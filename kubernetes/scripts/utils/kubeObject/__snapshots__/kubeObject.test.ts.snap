// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`KubeObject Can create sealed secrets from selected secrets 1`] = `
Array [
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-secret",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/sealed-secrets/sealed-secret-argocd-secret-argocd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {
      "encryptedData": Object {
        "admin.passwordMtime": "lowo-testargocd-secretargocdKfg0625T3ODf2xa****************************",
        "clearPassword": "lowo-testargocd-secretargocd_lb07b4Zx_dRUNp************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"admin.password\\":\\"JDJhJDEwJDkwcG1lcUgvWlU1bTZ4TnR6b3NYQy5TdjAybm1OM3NlT3ZyQVFOSlg4a2JQTWpIM25ueExp\\",\\"admin.passwordMtime\\":\\"MjAyMi0wOC0xMVQwNjo0MzoyOFo=\\",\\"clearPassword\\":\\"b3llbG93bw==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"app.kubernetes.io/part-of\\":\\"argocd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-secret\\",\\"namespace\\":\\"argocd\\"},\\"type\\":\\"Opaque\\"}
",
          },
          "name": "argocd-secret",
          "namespace": "argocd",
        },
        "type": "Opaque",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-policy-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-policy-validator-k8s-tls-linkerd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "lowo-testlinkerd-policy-validator-k8s-tlslinkerdOJxdNDj0G4y
        "tls.key": "lowo-testlinkerd-policy-validator-k8s-tlslinkerdfA2Khv5tZnhYyf
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQUpxemFWRDJFQjluK3hzS3ZxSHV1MzB3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa2JHbHVhMlZ5WkMxd2IyeHBZM2t0ZG1Gc2FXUmhkRzl5TG14cGJtdGxjbVF1YzNaagpNQjRYRFRJeU1EZ3hNVEEyTkRNeU0xb1hEVEl6TURneE1UQTJORE15TTFvd0x6RXRNQ3NHQTFVRUF4TWtiR2x1CmEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeAp3MTRGRzA0di9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLCm9lTXdnN0IzV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnMKUnJqY1lpeXphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWApnWUFEUGloT1JVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrCkRuck5yUFFTaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJvM0F3YmpBT0JnTlYKSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdMd1lEVlIwUkJDZ3dKb0lrYkdsdWEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwCmJtdGxjbVF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ3VvelhFMWJZMkR1VHZLdzcya1NoQVE0c2YKeiszZGlYdEhSbGpiYjNKZWIyNFRWOUVqZ1RybmhsYlpFaG8rcFA5ME5kQlIvQTRvVHdXQjdVUFFienp5eHQ5aApCcHZmVXQ1N1pyQ3hQdGs5RXJVdXR2T3EvU2NqNkNDd1VBUjZ4b2pybnJWQzNqY3ZIZEp0TXBNNlA3QnlQVUtxCjZ6c1dVcVExT0p6Tjg0czV6TDRoMG9YZDA5T0RXOC8rNWRFUVBOY1JXM2pHallvdHFoUnYzVm5aSVVYejZlTVcKaXVveFlrTDZNc2NyNHhGZkROOXBDVnkyVWIvV0JUSGVQd2ZHOGduaTVlR3ErMjNUWGFCbm1xd2V2aFNZcXQ5eQpOcm9rMzVVZlFHamI2WUFRUVdyQlRxa1diSDZ2WVpYVUYrZGEwL2JrVnFwbDNDZGpJdHhHaWV4bnUxS1oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeHcxNEZHMDR2Ci9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLb2VNd2c3QjMKV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnNScmpjWWl5egphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWGdZQURQaWhPClJVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrRG5yTnJQUVMKaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJBb0lCQVFDcEorTEtuVmZHRGJWNAozbCtTWjE1aGRYQ3hTSUNEaUFsUGRwN3F2SHg3OGI4NkRiWW5qeTR2eUYwY09tY3lOK0xxM2NjU29FT0pTMXc2CndNeDJYempnbUdOWDVYalZ6RkhtNDNGZmpSZ2RkVWUzRDV3cU9wMEpMVit2cXBrZDl4V1AzdlRFUlhxQVU2Z2oKNkdteVIrQ2FlenZ1T09jN3M2WW9xaCs0cmZWTDNKU1F3ajZxQTZTbnAybERydmhsSXZ3ZFRNaEs2dnh5Y2xLego1a1o1ZkxUeWtZamxydW1kNEhkWU1BdDE5S2doRXBkYkEwRVlsT2hGRisxcDRjOWRtT3FLTW5oVmhHdVR0L010ClZxT09UN0pPU2tZRUpsWlUrZXBYSjVpeTV0bDA5UFpYOGRGSUZrVjNLSlN2c3NxdThnM0d6R2hUajZrVzFYU2wKT2tuMG9LZUpBb0dCQVAyNXUxQ3l3anJpc1Z5bThNMlRiNGxEejZ6YlVZVmJUc1VNL2lCRGJyYTFoYVlGM0ZqZQpzdEVuWXFHK3JtQ3B0dnhMT3Z6VUhKVyttSzJUY2o5VTNDeG1uYmpyWFd6QkNZWVBCbHExQWNvOW9NYy9UclE5ClhUS3BLSDNOcEdJZTBSYXFscDhrLzlnUm5nbEIyZzVSQ0U5LzVtQm5Tc2Z2STZzaDNCUlpWQkp2QW9HQkFOQXQKUm12blpTUHpLby9lcjNlajVWZGZCN1ZzWEhHRmVCWlVRRkwvL3Bia2gxY2FGQVBpUlJLUC9zaVlYcXBXVkNHZApBbThsSmNnRHpvcGw0NFZwQ0xUVDVvWktxUExDK2IzSDVkQVpRV1VXdm5oOEIxejNYemNDZlpybkpJT0FoZEp1CkE4dC9XQ0p6Vms5U1BHSEJyVHgvbnZyRUR0MGhSbGtPKzBTTWphRVBBb0dBSmpVcTVQc1dUcUhHamFwQ0J1TVYKMzdqTGREOU9wbU5hbUVmZG1PUXVydXJrNWx4cGt5UnVEeHI4T2xrcGp6cmZhRnkzMUV6b3hRLy9rOXZwVDJvcgpBYkN1UGFPTDNRMndyblJpdzVRUVlmRW4zZmxGazlUTnpRdzJJY091NW11M2xzODNnVjJqL1ZpaDBNa08yaXNQCnNsRVRVeDhhM3NLL1AwMEpCRE56ZXBjQ2dZRUFoTS9OdEx1Y3NCSEwzcHVRVUlEVXFTZ3NqOWRCSnYraXZJUWwKd1k0bWkzZml6SFFMdnVxVmJLRkhTQXpGb0dDUkxoeXdWOTVZTzBJS2ZBdEMyM05HSmE5bXk5aEg3eERyS2VPbApQMTFOZGtQTFlxeW1PZTVyNVhtR1R0UVdYSHNiWlVQZzBldzllMFVnRkZ6L3Z0SkVSbXVaTHB6MGFxbDI2d3grCnk1M3NJWXNDZ1lFQTJJVFVlZFQvdElucTJpTXNrR2s2ZExxWnZNWDFsVG4rb0o3ZUZFR2xkUGxuVGlzTFBvZ1AKVWRyTzU4Z2xPRHU2Mk9Qbm05YTJlVEJqTHhHa2o0bGdBK0xGT3g2R2U3V2NnR2MvTmt3UWNOTWUvNHFiUThPKwo4QTkxZGRqdzl1NXVZVFN5a0VqVHpxR2FOeVViQi8waHhheXZXY3BCUm1sZXFNOU0zc09LODRFPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy-validator-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "linkerd-policy-validator-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-mongo",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/sealed-secrets/sealed-secret-graphql-mongo-applications.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "encryptedData": Object {
        "APP_ENVIRONMENT": "lowo-testgraphql-mongoapplicationszIxkAlph3MF3vuD********",
        "APP_EXTERNAL_BASE_URL": "lowo-testgraphql-mongoapplicationseSKOW44eqQW9ZBv****************************",
        "APP_HOST": "lowo-testgraphql-mongoapplicationsukZkk1Wbxk3SSXg************",
        "APP_PORT": "lowo-testgraphql-mongoapplicationsE9UK5Uiqen19ryr********",
        "MONGODB_HOST": "lowo-testgraphql-mongoapplicationsVcGi4egHy9r6foR************************************************",
        "MONGODB_NAME": "lowo-testgraphql-mongoapplicationsSdkiDIj1hcYGccj********************************",
        "MONGODB_PASSWORD": "lowo-testgraphql-mongoapplicationsCve7S5Bwt1T34LM************",
        "MONGODB_PORT": "lowo-testgraphql-mongoapplicationsKoYIYABa96MvGdt********",
        "MONGODB_ROOT_PASSWORD": "lowo-testgraphql-mongoapplicationsUKKkLL_Jw0ZsiPz****************",
        "MONGODB_ROOT_USERNAME": "lowo-testgraphql-mongoapplicationsPEqNWnzxR3qf8cV************",
        "MONGODB_SERVICE_NAME": "lowo-testgraphql-mongoapplicationsTzrcp2VJzrorIJX********************************",
        "MONGODB_STORAGE_CLASS": "lowo-testgraphql-mongoapplications9rmNSpygvO8r_HZ************************************",
        "MONGODB_USERNAME": "lowo-testgraphql-mongoapplicationsaFEQS3uz5VdeVlQ************",
        "OAUTH_GITHUB_CLIENT_ID": "lowo-testgraphql-mongoapplications5lvcjG21Gx7qGRH****************************",
        "OAUTH_GITHUB_CLIENT_SECRET": "lowo-testgraphql-mongoapplicationsRDr9L8FlfJBc9mY********************************************************",
        "OAUTH_GOOGLE_CLIENT_ID": "lowo-testgraphql-mongoapplicationsTrOrun2yX8vUKVx************************************************************************************************",
        "OAUTH_GOOGLE_CLIENT_SECRET": "lowo-testgraphql-mongoapplicationsNKZyaF69HJzATki************************************************",
        "REDIS_HOST": "lowo-testgraphql-mongoapplications1wAjVe1cIbh9bN6****************************************************",
        "REDIS_PASSWORD": "lowo-testgraphql-mongoapplicationsRITD0B7dEP01UmQ************",
        "REDIS_PORT": "lowo-testgraphql-mongoapplicationstj2LzIAPb0_Ao9q********",
        "REDIS_SERVICE_NAME": "lowo-testgraphql-mongoapplicationsqUmIPZdQQ3rrneM****************************",
        "REDIS_SERVICE_NAME_WITH_SUFFIX": "lowo-testgraphql-mongoapplicationsZMTVVMxIYqhOXHx************************************",
        "REDIS_USERNAME": "lowo-testgraphql-mongoapplicationsO3IhXwc6D2gAliO************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"APP_ENVIRONMENT\\":\\"bG9jYWw=\\",\\"APP_EXTERNAL_BASE_URL\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\",\\"APP_HOST\\":\\"MC4wLjAuMA==\\",\\"APP_PORT\\":\\"ODAwMA==\\",\\"MONGODB_HOST\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZS5hcHBsaWNhdGlvbnM=\\",\\"MONGODB_NAME\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==\\",\\"MONGODB_PASSWORD\\":\\"anVuZ2J1bnU=\\",\\"MONGODB_PORT\\":\\"MjcwMTc=\\",\\"MONGODB_ROOT_PASSWORD\\":\\"ZXhhcmVyZW1wbGU=\\",\\"MONGODB_ROOT_USERNAME\\":\\"ZXhhbXBsZQ==\\",\\"MONGODB_SERVICE_NAME\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==\\",\\"MONGODB_STORAGE_CLASS\\":\\"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu\\",\\"MONGODB_USERNAME\\":\\"ZXhhbXBsZW1t\\",\\"OAUTH_GITHUB_CLIENT_ID\\":\\"ODljMTkzNzRmN2U3YjViMzUxNjQ=\\",\\"OAUTH_GITHUB_CLIENT_SECRET\\":\\"MTI5NDg4Y2M5MmUyZDJmOTFlM2E1YTAyNDA4NjM5NmM0OGM2NTMzOQ==\\",\\"OAUTH_GOOGLE_CLIENT_ID\\":\\"ODU1MTc0MjA5NTQzLTZtMGYwODhlNTVkM21ldmhucjhiczBxamFwOGo2ZzBnLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29t\\",\\"OAUTH_GOOGLE_CLIENT_SECRET\\":\\"R09DU1BYLUNTMUpGaXNSSVNnZU4wSS13VGFWam8zNTJ6YlU=\\",\\"REDIS_HOST\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXIuYXBwbGljYXRpb25z\\",\\"REDIS_PASSWORD\\":\\"anVuZ2J1bnU=\\",\\"REDIS_PORT\\":\\"NjM3OQ==\\",\\"REDIS_SERVICE_NAME\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcw==\\",\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXI=\\",\\"REDIS_USERNAME\\":\\"anVuZ2J1bnU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"sealedsecrets.bitnami.com/managed\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"applications\\"}}
",
            "sealedsecrets.bitnami.com/managed": "true",
          },
          "name": "graphql-mongo",
          "namespace": "applications",
        },
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-mongo-redis",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/sealed-secrets/sealed-secret-graphql-mongo-redis-applications.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "encryptedData": Object {
        "redis-password": "lowo-testgraphql-mongo-redisapplicationsTRPB6JEMYHCgjUx************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"redis-password\\":\\"anVuZ2J1bnU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis\\",\\"namespace\\":\\"applications\\"},\\"type\\":\\"Opaque\\"}
",
          },
          "name": "graphql-mongo-redis",
          "namespace": "applications",
        },
        "type": "Opaque",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/react-web/sealed-secrets/sealed-secret-react-web-applications.yaml",
    "resourceBaseDir": "generatedManifests/test/services/react-web",
    "spec": Object {
      "encryptedData": Object {
        "APP_ENVIRONMENT": "lowo-testreact-webapplicationsuaB68JwQUDqziRn********",
        "APP_EXTERNAL_BASE_URL": "lowo-testreact-webapplicationsW29tKodBj5PNS6C****************************",
        "APP_PORT": "lowo-testreact-webapplicationsDgLfNKZucSsGhHs********",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"APP_ENVIRONMENT\\":\\"bG9jYWw=\\",\\"APP_EXTERNAL_BASE_URL\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\",\\"APP_HOST\\":\\"MC4wLjAuMA==\\",\\"APP_PORT\\":\\"MzAwMA==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"sealedsecrets.bitnami.com/managed\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"}}
",
            "sealedsecrets.bitnami.com/managed": "true",
          },
          "name": "react-web",
          "namespace": "applications",
        },
      },
    },
  },
]
`;

exports[`KubeObject Can sync resources 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "data": Object {
      "ADMIN_PASSWORD": "jungbunu",
      "password": "jungbunu",
      "type": "git",
      "url": "https://github.com/Oyelowo/modern-distributed-app-template",
      "username": "Oyelowo",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"ADMIN_PASSWORD\\":\\"jungbunu\\",\\"password\\":\\"jungbunu\\",\\"type\\":\\"git\\",\\"url\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"username\\":\\"Oyelowo\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"argocd.argoproj.io/secret-type\\":\\"repository\\"},\\"name\\":\\"argocd-applications-secret\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-applications-secret",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd-applications-parents/1-manifest/v1-secret-argocd-argocd-applications-secret.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd-applications-parents",
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"argocd-applications-children-infrastructure\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"argocd\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/infrastructure/argocd-applications-children-infrastructure\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "argocd-applications-children-infrastructure",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd-applications-parents/1-manifest/argoproj.io_v1alpha1-application-argocd-argocd-applications-children-infrastructure.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd-applications-parents",
    "spec": Object {},
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"argocd-applications-children-services\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"argocd\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/infrastructure/argocd-applications-children-services\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "argocd-applications-children-services",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd-applications-parents/1-manifest/argoproj.io_v1alpha1-application-argocd-argocd-applications-children-services.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd-applications-parents",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "appprojects.argoproj.io",
    },
    "path": "generatedManifests/test/infrastructure/argocd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-appprojects.argoproj.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "applications.argoproj.io",
    },
    "path": "generatedManifests/test/infrastructure/argocd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-applications.argoproj.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "controller-gen.kubebuilder.io/version": "v0.3.0",
      },
      "name": "applicationsets.argoproj.io",
    },
    "path": "generatedManifests/test/infrastructure/argocd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-applicationsets.argoproj.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "application.instanceLabelKey": "argocd.argoproj.io/instance",
      "dex.config": "",
      "url": "",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"application.instanceLabelKey\\":\\"argocd.argoproj.io/instance\\",\\"dex.config\\":\\"\\",\\"url\\":\\"\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"app.kubernetes.io/part-of\\":\\"argocd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-cm\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-cm",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-cm.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "admin.password": "JDJhJDEwJDkwcG1lcUgvWlU1bTZ4TnR6b3NYQy5TdjAybm1OM3NlT3ZyQVFOSlg4a2JQTWpIM25ueExp",
      "admin.passwordMtime": "MjAyMi0wOC0xMVQwNjo0MzoyOFo=",
      "clearPassword": "b3llbG93bw==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"admin.password\\":\\"JDJhJDEwJDkwcG1lcUgvWlU1bTZ4TnR6b3NYQy5TdjAybm1OM3NlT3ZyQVFOSlg4a2JQTWpIM25ueExp\\",\\"admin.passwordMtime\\":\\"MjAyMi0wOC0xMVQwNjo0MzoyOFo=\\",\\"clearPassword\\":\\"b3llbG93bw==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"app.kubernetes.io/part-of\\":\\"argocd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-secret\\",\\"namespace\\":\\"argocd\\"},\\"type\\":\\"Opaque\\"}
",
      },
      "name": "argocd-secret",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-secret-argocd-argocd-secret.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "type": "Opaque",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"argocd-argo-cd-server\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"argocd-argo-cd-argocd-server\\",\\"namespace\\":\\"argocd\\"}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"argocd-argo-cd-server\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"argocd-argo-cd-argocd-server\\"}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-repo-server\\",\\"namespace\\":\\"argocd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"argoproj.io\\"],\\"resources\\":[\\"applications\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]}]}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-role-argocd-argocd-argo-cd-repo-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-app-controller\\",\\"namespace\\":\\"argocd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\",\\"configmaps\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"argoproj.io\\"],\\"resources\\":[\\"applications\\",\\"appprojects\\"],\\"verbs\\":[\\"create\\",\\"get\\",\\"list\\",\\"watch\\",\\"update\\",\\"patch\\",\\"delete\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"list\\"]}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-role-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-argocd-repo-server\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-argo-cd-argocd-repo-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-argo-cd-argocd-repo-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-argocd-server\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-argo-cd-argocd-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-argo-cd-argocd-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"networking.k8s.io/v1\\",\\"kind\\":\\"Ingress\\",\\"metadata\\":{\\"annotations\\":{\\"nginx.ingress.kubernetes.io/ssl-redirect\\":\\"false\\",\\"nginx.ingress.kubernetes.io/use-regex\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"ingressClassName\\":\\"nginx\\",\\"rules\\":[{\\"host\\":\\"argocd.localhost:8080\\",\\"http\\":{\\"paths\\":[{\\"backend\\":{\\"service\\":{\\"name\\":\\"argocd-argo-cd-server\\",\\"port\\":{\\"name\\":\\"https\\"}}},\\"path\\":\\"/\\",\\"pathType\\":\\"Prefix\\"}]}}],\\"tls\\":[{\\"hosts\\":[\\"argocd.localhost:8080\\"],\\"secretName\\":\\"argocd.localhost:8080-tls\\"}]}}
",
        "nginx.ingress.kubernetes.io/ssl-redirect": "false",
        "nginx.ingress.kubernetes.io/use-regex": "true",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/networking.k8s.io_v1-ingress-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-app-controller\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"tcp-controller\\",\\"port\\":8082,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"controller\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"},\\"sessionAffinity\\":\\"None\\",\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "ping_liveness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\\"$(< \\"\${REDIS_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h localhost \\\\
    -p $REDIS_PORT \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ \\"$response\\" != \\"PONG\\" ] && [ \\"$responseFirstWord\\" != \\"LOADING\\" ] && [ \\"$responseFirstWord\\" != \\"MASTERDOWN\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_liveness_local_and_master.sh": "script_dir=\\"$(dirname \\"$0\\")\\"
exit_status=0
\\"$script_dir/ping_liveness_local.sh\\" $1 || exit_status=$?
\\"$script_dir/ping_liveness_master.sh\\" $1 || exit_status=$?
exit $exit_status",
      "ping_liveness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\\"$(< \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h $REDIS_MASTER_HOST \\\\
    -p $REDIS_MASTER_PORT_NUMBER \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ \\"$response\\" != \\"PONG\\" ] && [ \\"$responseFirstWord\\" != \\"LOADING\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_readiness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\\"$(< \\"\${REDIS_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h localhost \\\\
    -p $REDIS_PORT \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
if [ \\"$response\\" != \\"PONG\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_readiness_local_and_master.sh": "script_dir=\\"$(dirname \\"$0\\")\\"
exit_status=0
\\"$script_dir/ping_readiness_local.sh\\" $1 || exit_status=$?
\\"$script_dir/ping_readiness_master.sh\\" $1 || exit_status=$?
exit $exit_status",
      "ping_readiness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\\"$(< \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h $REDIS_MASTER_HOST \\\\
    -p $REDIS_MASTER_PORT_NUMBER \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
if [ \\"$response\\" != \\"PONG\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"ping_liveness_local.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h localhost \\\\\\\\\\\\n    -p $REDIS_PORT \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ] \\\\u0026\\\\u0026 [ \\\\\\"$responseFirstWord\\\\\\" != \\\\\\"LOADING\\\\\\" ] \\\\u0026\\\\u0026 [ \\\\\\"$responseFirstWord\\\\\\" != \\\\\\"MASTERDOWN\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\",\\"ping_liveness_local_and_master.sh\\":\\"script_dir=\\\\\\"$(dirname \\\\\\"$0\\\\\\")\\\\\\"\\\\nexit_status=0\\\\n\\\\\\"$script_dir/ping_liveness_local.sh\\\\\\" $1 || exit_status=$?\\\\n\\\\\\"$script_dir/ping_liveness_master.sh\\\\\\" $1 || exit_status=$?\\\\nexit $exit_status\\",\\"ping_liveness_master.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_MASTER_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_MASTER_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_MASTER_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_MASTER_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h $REDIS_MASTER_HOST \\\\\\\\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ] \\\\u0026\\\\u0026 [ \\\\\\"$responseFirstWord\\\\\\" != \\\\\\"LOADING\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\",\\"ping_readiness_local.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h localhost \\\\\\\\\\\\n    -p $REDIS_PORT \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\",\\"ping_readiness_local_and_master.sh\\":\\"script_dir=\\\\\\"$(dirname \\\\\\"$0\\\\\\")\\\\\\"\\\\nexit_status=0\\\\n\\\\\\"$script_dir/ping_readiness_local.sh\\\\\\" $1 || exit_status=$?\\\\n\\\\\\"$script_dir/ping_readiness_master.sh\\\\\\" $1 || exit_status=$?\\\\nexit $exit_status\\",\\"ping_readiness_master.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_MASTER_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_MASTER_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_MASTER_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_MASTER_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h $REDIS_MASTER_HOST \\\\\\\\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis-health\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-redis-health",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-redis-health.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"*\\"],\\"resources\\":[\\"*\\"],\\"verbs\\":[\\"delete\\",\\"get\\",\\"patch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"pods\\",\\"pods/log\\"],\\"verbs\\":[\\"get\\"]}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "master.conf": "dir /data
# User-supplied master configuration:
rename-command FLUSHDB \\"\\"
rename-command FLUSHALL \\"\\"
# End of master configuration",
      "redis.conf": "# User-supplied common configuration:
# Enable AOF https://redis.io/topics/persistence#append-only-file
appendonly yes
# Disable RDB persistence, AOF persistence already enabled.
save \\"\\"
# End of common configuration",
      "replica.conf": "dir /data
slave-read-only yes
# User-supplied replica configuration:
rename-command FLUSHDB \\"\\"
rename-command FLUSHALL \\"\\"
# End of replica configuration",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"master.conf\\":\\"dir /data\\\\n# User-supplied master configuration:\\\\nrename-command FLUSHDB \\\\\\"\\\\\\"\\\\nrename-command FLUSHALL \\\\\\"\\\\\\"\\\\n# End of master configuration\\",\\"redis.conf\\":\\"# User-supplied common configuration:\\\\n# Enable AOF https://redis.io/topics/persistence#append-only-file\\\\nappendonly yes\\\\n# Disable RDB persistence, AOF persistence already enabled.\\\\nsave \\\\\\"\\\\\\"\\\\n# End of common configuration\\",\\"replica.conf\\":\\"dir /data\\\\nslave-read-only yes\\\\n# User-supplied replica configuration:\\\\nrename-command FLUSHDB \\\\\\"\\\\\\"\\\\nrename-command FLUSHALL \\\\\\"\\\\\\"\\\\n# End of replica configuration\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis-configuration\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-redis-configuration",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-redis-configuration.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"strategy\\":{\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"namespaces\\":[\\"argocd\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--staticassets\\",\\"/opt/bitnami/argo-cd/app\\",\\"--repo-server\\",\\"argocd-argo-cd-repo-server:8081\\",\\"--logformat\\",\\"text\\",\\"--loglevel\\",\\"info\\",\\"--redis\\",\\"argocd-redis-master:6379\\",\\"--insecure\\"],\\"command\\":[\\"argocd-server\\"],\\"env\\":[{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/argo-cd:2.3.3-debian-10-r25\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":8080},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"name\\":\\"argocd-server\\",\\"ports\\":[{\\"containerPort\\":8080,\\"name\\":\\"http\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":8080},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/app/config/ssh\\",\\"name\\":\\"ssh-known-hosts\\"},{\\"mountPath\\":\\"/app/config/server/tls\\",\\"name\\":\\"argocd-repo-server-tls\\"}]}],\\"initContainers\\":[{\\"args\\":[\\"-ec\\",\\"#!/bin/bash\\\\n\\\\nset -o errexit\\\\nset -o nounset\\\\nset -o pipefail\\\\n\\\\n. /opt/bitnami/scripts/libos.sh\\\\n. /opt/bitnami/scripts/liblog.sh\\\\n\\\\ncheck_redis_connection() {\\\\n  local result=\\\\\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\\\\\"\\\\n  if [[ \\\\\\"$result\\\\\\" != \\\\\\"PONG\\\\\\" ]]; then\\\\n    false\\\\n  fi\\\\n}\\\\n\\\\ninfo \\\\\\"Checking redis connection...\\\\\\"\\\\nif ! retry_while \\\\\\"check_redis_connection\\\\\\"; then\\\\n    error \\\\\\"Could not connect to the Redis server\\\\\\"\\\\n    return 1\\\\nelse\\\\n    info \\\\\\"Connected to the Redis instance\\\\\\"\\\\nfi\\\\n\\"],\\"command\\":[\\"/bin/bash\\"],\\"env\\":[{\\"name\\":\\"REDISCLI_AUTH\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/redis:6.2.7-debian-10-r2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"wait-for-redis\\"}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"argocd-argo-cd-argocd-server\\",\\"volumes\\":[{\\"configMap\\":{\\"name\\":\\"argocd-ssh-known-hosts-cm\\"},\\"name\\":\\"ssh-known-hosts\\"},{\\"name\\":\\"argocd-repo-server-tls\\",\\"secret\\":{\\"items\\":[{\\"key\\":\\"tls.crt\\",\\"path\\":\\"tls.crt\\"},{\\"key\\":\\"tls.key\\",\\"path\\":\\"tls.key\\"},{\\"key\\":\\"ca.crt\\",\\"path\\":\\"ca.crt\\"}],\\"optional\\":true,\\"secretName\\":\\"argocd-repo-server-tls\\"}}]}}}}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "server",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-3.1.16",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "server",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": Array [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--staticassets",
                "/opt/bitnami/argo-cd/app",
                "--repo-server",
                "argocd-argo-cd-repo-server:8081",
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
                "--insecure",
              ],
              "command": Array [
                "argocd-server",
              ],
              "env": Array [
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.3.3-debian-10-r25",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 8080,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "argocd-server",
              "ports": Array [
                Object {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 8080,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/app/config/ssh",
                  "name": "ssh-known-hosts",
                },
                Object {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result=\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\"
  if [[ \\"$result\\" != \\"PONG\\" ]]; then
    false
  fi
}

info \\"Checking redis connection...\\"
if ! retry_while \\"check_redis_connection\\"; then
    error \\"Could not connect to the Redis server\\"
    return 1
else
    info \\"Connected to the Redis instance\\"
fi
",
              ],
              "command": Array [
                "/bin/bash",
              ],
              "env": Array [
                Object {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r2",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-server",
          "volumes": Array [
            Object {
              "configMap": Object {
                "name": "argocd-ssh-known-hosts-cm",
              },
              "name": "ssh-known-hosts",
            },
            Object {
              "name": "argocd-repo-server-tls",
              "secret": Object {
                "items": Array [
                  Object {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  Object {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  Object {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis-master\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"tcp-redis\\",\\"port\\":6379,\\"targetPort\\":\\"redis\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"redis\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "argocd-redis-master",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-redis-master.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-app-controller\\",\\"namespace\\":\\"argocd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"argocd-argo-cd-app-controller\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"argocd-argo-cd-argocd-app-controller\\",\\"namespace\\":\\"argocd\\"}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "ssh_known_hosts": "bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"ssh_known_hosts\\":\\"bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==\\\\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\\\\ngitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\\\\ngitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\\\\ngitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\\\\nssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\\\nvs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\\\n\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"app.kubernetes.io/part-of\\":\\"argocd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-ssh-known-hosts-cm\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-ssh-known-hosts-cm",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-ssh-known-hosts-cm.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-redis",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-redis.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-repo-server\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"strategy\\":{\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"namespaces\\":[\\"argocd\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--logformat\\",\\"text\\",\\"--loglevel\\",\\"info\\",\\"--redis\\",\\"argocd-redis-master:6379\\"],\\"command\\":[\\"argocd-repo-server\\"],\\"env\\":[{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/argo-cd:2.3.3-debian-10-r25\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"tcpSocket\\":{\\"port\\":8081},\\"timeoutSeconds\\":1},\\"name\\":\\"argocd-repo-server\\",\\"ports\\":[{\\"containerPort\\":8081,\\"name\\":\\"repo-server\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"tcpSocket\\":{\\"port\\":8081},\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/app/config/ssh\\",\\"name\\":\\"ssh-known-hosts\\"},{\\"mountPath\\":\\"/app/config/server/tls\\",\\"name\\":\\"argocd-repo-server-tls\\"},{\\"mountPath\\":\\"/app/config/gpg/keys\\",\\"name\\":\\"gpg-keyring\\"},{\\"mountPath\\":\\"/tmp\\",\\"name\\":\\"tmp-dir\\"}]}],\\"initContainers\\":[{\\"args\\":[\\"-ec\\",\\"#!/bin/bash\\\\n\\\\nset -o errexit\\\\nset -o nounset\\\\nset -o pipefail\\\\n\\\\n. /opt/bitnami/scripts/libos.sh\\\\n. /opt/bitnami/scripts/liblog.sh\\\\n\\\\ncheck_redis_connection() {\\\\n  local result=\\\\\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\\\\\"\\\\n  if [[ \\\\\\"$result\\\\\\" != \\\\\\"PONG\\\\\\" ]]; then\\\\n    false\\\\n  fi\\\\n}\\\\n\\\\ninfo \\\\\\"Checking redis connection...\\\\\\"\\\\nif ! retry_while \\\\\\"check_redis_connection\\\\\\"; then\\\\n    error \\\\\\"Could not connect to the Redis server\\\\\\"\\\\n    return 1\\\\nelse\\\\n    info \\\\\\"Connected to the Redis instance\\\\\\"\\\\nfi\\\\n\\"],\\"command\\":[\\"/bin/bash\\"],\\"env\\":[{\\"name\\":\\"REDISCLI_AUTH\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/redis:6.2.7-debian-10-r2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"wait-for-redis\\"}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"argocd-argo-cd-argocd-repo-server\\",\\"volumes\\":[{\\"configMap\\":{\\"name\\":\\"argocd-ssh-known-hosts-cm\\"},\\"name\\":\\"ssh-known-hosts\\"},{\\"name\\":\\"argocd-repo-server-tls\\",\\"secret\\":{\\"items\\":[{\\"key\\":\\"tls.crt\\",\\"path\\":\\"tls.crt\\"},{\\"key\\":\\"tls.key\\",\\"path\\":\\"tls.key\\"},{\\"key\\":\\"ca.crt\\",\\"path\\":\\"ca.crt\\"}],\\"optional\\":true,\\"secretName\\":\\"argocd-repo-server-tls\\"}},{\\"emptyDir\\":{},\\"name\\":\\"tmp-dir\\"},{\\"emptyDir\\":{},\\"name\\":\\"gpg-keyring\\"}]}}}}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-repo-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "repo-server",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-3.1.16",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "repo-server",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": Array [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
              ],
              "command": Array [
                "argocd-repo-server",
              ],
              "env": Array [
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.3.3-debian-10-r25",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": Object {
                  "port": 8081,
                },
                "timeoutSeconds": 1,
              },
              "name": "argocd-repo-server",
              "ports": Array [
                Object {
                  "containerPort": 8081,
                  "name": "repo-server",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": Object {
                  "port": 8081,
                },
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/app/config/ssh",
                  "name": "ssh-known-hosts",
                },
                Object {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
                Object {
                  "mountPath": "/app/config/gpg/keys",
                  "name": "gpg-keyring",
                },
                Object {
                  "mountPath": "/tmp",
                  "name": "tmp-dir",
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result=\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\"
  if [[ \\"$result\\" != \\"PONG\\" ]]; then
    false
  fi
}

info \\"Checking redis connection...\\"
if ! retry_while \\"check_redis_connection\\"; then
    error \\"Could not connect to the Redis server\\"
    return 1
else
    info \\"Connected to the Redis instance\\"
fi
",
              ],
              "command": Array [
                "/bin/bash",
              ],
              "env": Array [
                Object {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r2",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-repo-server",
          "volumes": Array [
            Object {
              "configMap": Object {
                "name": "argocd-ssh-known-hosts-cm",
              },
              "name": "ssh-known-hosts",
            },
            Object {
              "name": "argocd-repo-server-tls",
              "secret": Object {
                "items": Array [
                  Object {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  Object {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  Object {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
            Object {
              "emptyDir": Object {},
              "name": "tmp-dir",
            },
            Object {
              "emptyDir": Object {},
              "name": "gpg-keyring",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"http\\",\\"port\\":80,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"http\\"},{\\"name\\":\\"https\\",\\"port\\":443,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"http\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"},\\"sessionAffinity\\":\\"None\\",\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-repo-server\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"tcp-repo-server\\",\\"port\\":8081,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"repo-server\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"},\\"sessionAffinity\\":\\"None\\",\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-argo-cd-repo-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-app-controller\\",\\"namespace\\":\\"argocd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"argocd-argo-cd-app-controller\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"argocd-argo-cd-argocd-app-controller\\"}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "redis-password": "dGw0RVN2WTlrTA==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"redis-password\\":\\"dGw0RVN2WTlrTA==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis\\",\\"namespace\\":\\"argocd\\"},\\"type\\":\\"Opaque\\"}
",
      },
      "name": "argocd-redis",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-secret-argocd-argocd-redis.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "type": "Opaque",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-repo-server\\",\\"namespace\\":\\"argocd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"argocd-argo-cd-repo-server\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"argocd-argo-cd-argocd-repo-server\\"}]}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-argocd-argocd-argo-cd-repo-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-app-controller\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"strategy\\":{\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"namespaces\\":[\\"argocd\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--status-processors\\",\\"20\\",\\"--operation-processors\\",\\"10\\",\\"--app-resync\\",\\"180\\",\\"--self-heal-timeout-seconds\\",\\"5\\",\\"--repo-server\\",\\"argocd-argo-cd-repo-server:8081\\",\\"--logformat\\",\\"text\\",\\"--loglevel\\",\\"info\\",\\"--redis\\",\\"argocd-redis-master:6379\\"],\\"command\\":[\\"argocd-application-controller\\"],\\"env\\":[{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/argo-cd:2.3.3-debian-10-r25\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":8082},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"name\\":\\"controller\\",\\"ports\\":[{\\"containerPort\\":8082,\\"name\\":\\"controller\\",\\"protocol\\":\\"TCP\\"},{\\"containerPort\\":8082,\\"name\\":\\"metrics\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"tcpSocket\\":{\\"port\\":8082},\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/app/config/server/tls\\",\\"name\\":\\"argocd-repo-server-tls\\"}]}],\\"initContainers\\":[{\\"args\\":[\\"-ec\\",\\"#!/bin/bash\\\\n\\\\nset -o errexit\\\\nset -o nounset\\\\nset -o pipefail\\\\n\\\\n. /opt/bitnami/scripts/libos.sh\\\\n. /opt/bitnami/scripts/liblog.sh\\\\n\\\\ncheck_redis_connection() {\\\\n  local result=\\\\\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\\\\\"\\\\n  if [[ \\\\\\"$result\\\\\\" != \\\\\\"PONG\\\\\\" ]]; then\\\\n    false\\\\n  fi\\\\n}\\\\n\\\\ninfo \\\\\\"Checking redis connection...\\\\\\"\\\\nif ! retry_while \\\\\\"check_redis_connection\\\\\\"; then\\\\n    error \\\\\\"Could not connect to the Redis server\\\\\\"\\\\n    return 1\\\\nelse\\\\n    info \\\\\\"Connected to the Redis instance\\\\\\"\\\\nfi\\\\n\\"],\\"command\\":[\\"/bin/bash\\"],\\"env\\":[{\\"name\\":\\"REDISCLI_AUTH\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/redis:6.2.7-debian-10-r2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"wait-for-redis\\"}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"argocd-argo-cd-argocd-app-controller\\",\\"volumes\\":[{\\"name\\":\\"argocd-repo-server-tls\\",\\"secret\\":{\\"items\\":[{\\"key\\":\\"tls.crt\\",\\"path\\":\\"tls.crt\\"},{\\"key\\":\\"tls.key\\",\\"path\\":\\"tls.key\\"},{\\"key\\":\\"ca.crt\\",\\"path\\":\\"ca.crt\\"}],\\"optional\\":true,\\"secretName\\":\\"argocd-repo-server-tls\\"}}]}}}}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-3.1.16",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "controller",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": Array [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--status-processors",
                "20",
                "--operation-processors",
                "10",
                "--app-resync",
                "180",
                "--self-heal-timeout-seconds",
                "5",
                "--repo-server",
                "argocd-argo-cd-repo-server:8081",
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
              ],
              "command": Array [
                "argocd-application-controller",
              ],
              "env": Array [
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.3.3-debian-10-r25",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 8082,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "controller",
              "ports": Array [
                Object {
                  "containerPort": 8082,
                  "name": "controller",
                  "protocol": "TCP",
                },
                Object {
                  "containerPort": 8082,
                  "name": "metrics",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": Object {
                  "port": 8082,
                },
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result=\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\"
  if [[ \\"$result\\" != \\"PONG\\" ]]; then
    false
  fi
}

info \\"Checking redis connection...\\"
if ! retry_while \\"check_redis_connection\\"; then
    error \\"Could not connect to the Redis server\\"
    return 1
else
    info \\"Connected to the Redis instance\\"
fi
",
              ],
              "command": Array [
                "/bin/bash",
              ],
              "env": Array [
                Object {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r2",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-app-controller",
          "volumes": Array [
            Object {
              "name": "argocd-repo-server-tls",
              "secret": Object {
                "items": Array [
                  Object {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  Object {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  Object {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\",\\"configmaps\\"],\\"verbs\\":[\\"create\\",\\"get\\",\\"list\\",\\"watch\\",\\"update\\",\\"patch\\",\\"delete\\"]},{\\"apiGroups\\":[\\"argoproj.io\\"],\\"resources\\":[\\"applications\\",\\"appprojects\\"],\\"verbs\\":[\\"create\\",\\"get\\",\\"list\\",\\"watch\\",\\"update\\",\\"delete\\",\\"patch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"list\\"]}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-role-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-argocd-app-controller\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-argo-cd-argocd-app-controller",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-argo-cd-argocd-app-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "start-master.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\\"$(< \\"\${REDIS_PASSWORD_FILE}\\")\\"
if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
fi
if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
fi
ARGS=(\\"--port\\" \\"\${REDIS_PORT}\\")
ARGS+=(\\"--requirepass\\" \\"\${REDIS_PASSWORD}\\")
ARGS+=(\\"--masterauth\\" \\"\${REDIS_PASSWORD}\\")
ARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/redis.conf\\")
ARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/master.conf\\")
exec redis-server \\"\${ARGS[@]}\\"
",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"start-master.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\nif [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then\\\\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\\\\nfi\\\\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\\\\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\\\\nfi\\\\nARGS=(\\\\\\"--port\\\\\\" \\\\\\"\${REDIS_PORT}\\\\\\")\\\\nARGS+=(\\\\\\"--requirepass\\\\\\" \\\\\\"\${REDIS_PASSWORD}\\\\\\")\\\\nARGS+=(\\\\\\"--masterauth\\\\\\" \\\\\\"\${REDIS_PASSWORD}\\\\\\")\\\\nARGS+=(\\\\\\"--include\\\\\\" \\\\\\"/opt/bitnami/redis/etc/redis.conf\\\\\\")\\\\nARGS+=(\\\\\\"--include\\\\\\" \\\\\\"/opt/bitnami/redis/etc/master.conf\\\\\\")\\\\nexec redis-server \\\\\\"\${ARGS[@]}\\\\\\"\\\\n\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis-scripts\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-redis-scripts",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-redis-scripts.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis-headless\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"tcp-redis\\",\\"port\\":6379,\\"targetPort\\":\\"redis\\"}],\\"selector\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"redis\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "argocd-redis-headless",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-redis-headless.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"StatefulSet\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis-master\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"redis\\"}},\\"serviceName\\":\\"argocd-redis-headless\\",\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/configmap\\":\\"e613b74f64a1abb905aba4af7f0301b476819a3f6a306d9a3657086466a276f9\\",\\"checksum/health\\":\\"7bcc56d6b8dd9f33cae37e7b3fc8b726110f46a517de6d73f1451bf57187000e\\",\\"checksum/scripts\\":\\"3891447283e6d8c1c3eeec22f284bfa7d72558be1faee862ed78dcd1e275cf5d\\",\\"checksum/secret\\":\\"8d1472edc989e2f52d1566011b7554eb3143b444cfdd00159fc9646b121dca6b\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"redis\\"}},\\"namespaces\\":[\\"argocd\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"-c\\",\\"/opt/bitnami/scripts/start-scripts/start-master.sh\\"],\\"command\\":[\\"/bin/bash\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"REDIS_REPLICATION_MODE\\",\\"value\\":\\"master\\"},{\\"name\\":\\"ALLOW_EMPTY_PASSWORD\\",\\"value\\":\\"no\\"},{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}},{\\"name\\":\\"REDIS_TLS_ENABLED\\",\\"value\\":\\"no\\"},{\\"name\\":\\"REDIS_PORT\\",\\"value\\":\\"6379\\"}],\\"image\\":\\"docker.io/bitnami/redis:6.2.7-debian-10-r2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"exec\\":{\\"command\\":[\\"sh\\",\\"-c\\",\\"/health/ping_liveness_local.sh 5\\"]},\\"failureThreshold\\":5,\\"initialDelaySeconds\\":20,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":6},\\"name\\":\\"redis\\",\\"ports\\":[{\\"containerPort\\":6379,\\"name\\":\\"redis\\"}],\\"readinessProbe\\":{\\"exec\\":{\\"command\\":[\\"sh\\",\\"-c\\",\\"/health/ping_readiness_local.sh 1\\"]},\\"failureThreshold\\":5,\\"initialDelaySeconds\\":20,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":2},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/opt/bitnami/scripts/start-scripts\\",\\"name\\":\\"start-scripts\\"},{\\"mountPath\\":\\"/health\\",\\"name\\":\\"health\\"},{\\"mountPath\\":\\"/data\\",\\"name\\":\\"redis-data\\"},{\\"mountPath\\":\\"/opt/bitnami/redis/mounted-etc\\",\\"name\\":\\"config\\"},{\\"mountPath\\":\\"/opt/bitnami/redis/etc/\\",\\"name\\":\\"redis-tmp-conf\\"},{\\"mountPath\\":\\"/tmp\\",\\"name\\":\\"tmp\\"}]}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"argocd-redis\\",\\"terminationGracePeriodSeconds\\":30,\\"volumes\\":[{\\"configMap\\":{\\"defaultMode\\":493,\\"name\\":\\"argocd-redis-scripts\\"},\\"name\\":\\"start-scripts\\"},{\\"configMap\\":{\\"defaultMode\\":493,\\"name\\":\\"argocd-redis-health\\"},\\"name\\":\\"health\\"},{\\"configMap\\":{\\"name\\":\\"argocd-redis-configuration\\"},\\"name\\":\\"config\\"},{\\"emptyDir\\":{},\\"name\\":\\"redis-tmp-conf\\"},{\\"emptyDir\\":{},\\"name\\":\\"tmp\\"}]}},\\"updateStrategy\\":{\\"rollingUpdate\\":{},\\"type\\":\\"RollingUpdate\\"},\\"volumeClaimTemplates\\":[{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"redis\\"},\\"name\\":\\"redis-data\\"},\\"spec\\":{\\"accessModes\\":[\\"ReadWriteOnce\\"],\\"resources\\":{\\"requests\\":{\\"storage\\":\\"8Gi\\"}}}}]}}
",
      },
      "name": "argocd-redis-master",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-statefulset-argocd-argocd-redis-master.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/configmap": "e613b74f64a1abb905aba4af7f0301b476819a3f6a306d9a3657086466a276f9",
            "checksum/health": "7bcc56d6b8dd9f33cae37e7b3fc8b726110f46a517de6d73f1451bf57187000e",
            "checksum/scripts": "3891447283e6d8c1c3eeec22f284bfa7d72558be1faee862ed78dcd1e275cf5d",
            "checksum/secret": "8d1472edc989e2f52d1566011b7554eb3143b444cfdd00159fc9646b121dca6b",
          },
          "labels": Object {
            "app.kubernetes.io/component": "master",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "redis",
            "helm.sh/chart": "redis-16.8.9",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "master",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "redis",
                      },
                    },
                    "namespaces": Array [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-master.sh",
              ],
              "command": Array [
                "/bin/bash",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "REDIS_REPLICATION_MODE",
                  "value": "master",
                },
                Object {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no",
                },
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
                Object {
                  "name": "REDIS_TLS_ENABLED",
                  "value": "no",
                },
                Object {
                  "name": "REDIS_PORT",
                  "value": "6379",
                },
              ],
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "sh",
                    "-c",
                    "/health/ping_liveness_local.sh 5",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 6,
              },
              "name": "redis",
              "ports": Array [
                Object {
                  "containerPort": 6379,
                  "name": "redis",
                },
              ],
              "readinessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "sh",
                    "-c",
                    "/health/ping_readiness_local.sh 1",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/opt/bitnami/scripts/start-scripts",
                  "name": "start-scripts",
                },
                Object {
                  "mountPath": "/health",
                  "name": "health",
                },
                Object {
                  "mountPath": "/data",
                  "name": "redis-data",
                },
                Object {
                  "mountPath": "/opt/bitnami/redis/mounted-etc",
                  "name": "config",
                },
                Object {
                  "mountPath": "/opt/bitnami/redis/etc/",
                  "name": "redis-tmp-conf",
                },
                Object {
                  "mountPath": "/tmp",
                  "name": "tmp",
                },
              ],
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-redis",
          "terminationGracePeriodSeconds": 30,
          "volumes": Array [
            Object {
              "configMap": Object {
                "defaultMode": 493,
                "name": "argocd-redis-scripts",
              },
              "name": "start-scripts",
            },
            Object {
              "configMap": Object {
                "defaultMode": 493,
                "name": "argocd-redis-health",
              },
              "name": "health",
            },
            Object {
              "configMap": Object {
                "name": "argocd-redis-configuration",
              },
              "name": "config",
            },
            Object {
              "emptyDir": Object {},
              "name": "redis-tmp-conf",
            },
            Object {
              "emptyDir": Object {},
              "name": "tmp",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-app-controller\\",\\"namespace\\":\\"argocd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"*\\"],\\"resources\\":[\\"*\\"],\\"verbs\\":[\\"*\\"]},{\\"nonResourceURLs\\":[\\"*\\"],\\"verbs\\":[\\"*\\"]}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
      },
      "name": "issuers.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-issuers.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "challenges.acme.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-challenges.acme.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "certificates.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-certificates.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
      },
      "name": "orders.acme.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-orders.acme.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "controller-gen.kubebuilder.io/version": "v0.6.1",
      },
      "name": "bundles.trust.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-bundles.trust.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "certificaterequests.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-certificaterequests.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "clusterissuers.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-clusterissuers.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-trust\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-trust",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-edit\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\",\\"certificaterequests\\",\\"issuers\\"],\\"verbs\\":[\\"create\\",\\"delete\\",\\"deletecollection\\",\\"patch\\",\\"update\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"challenges\\",\\"orders\\"],\\"verbs\\":[\\"create\\",\\"delete\\",\\"deletecollection\\",\\"patch\\",\\"update\\"]}]}
",
      },
      "name": "cert-manager-controller-edit",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-edit.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-metrics\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"controller\\",\\"port\\":9402,\\"protocol\\":\\"TCP\\",\\"targetPort\\":9402}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "cert-manager-controller-metrics",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-controller-metrics.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"strategy\\":{\\"rollingUpdate\\":{},\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"prometheus.io/path\\":\\"/metrics\\",\\"prometheus.io/port\\":\\"9402\\",\\"prometheus.io/scrape\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"namespaces\\":[\\"cert-manager\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--v=2\\",\\"--cluster-resource-namespace=$(POD_NAMESPACE)\\",\\"--leader-election-namespace=kube-system\\",\\"--acme-http01-solver-image=docker.io/bitnami/acmesolver:1.8.1-debian-11-r0\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}}],\\"image\\":\\"docker.io/bitnami/cert-manager:1.8.1-debian-11-r0\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"cert-manager\\",\\"ports\\":[{\\"containerPort\\":9402,\\"protocol\\":\\"TCP\\"}],\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001}}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"cert-manager-controller\\"}}}}
",
      },
      "name": "cert-manager-controller",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "prometheus.io/path": "/metrics",
            "prometheus.io/port": "9402",
            "prometheus.io/scrape": "true",
          },
          "labels": Object {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.6.1",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": Array [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--v=2",
                "--cluster-resource-namespace=$(POD_NAMESPACE)",
                "--leader-election-namespace=kube-system",
                "--acme-http01-solver-image=docker.io/bitnami/acmesolver:1.8.1-debian-11-r0",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cert-manager:1.8.1-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "name": "cert-manager",
              "ports": Array [
                Object {
                  "containerPort": 9402,
                  "protocol": "TCP",
                },
              ],
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-controller",
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook-dynamic-serving\\",\\"namespace\\":\\"cert-manager\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"cert-manager-webhook-ca\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"create\\"]}]}
",
      },
      "name": "cert-manager-webhook-dynamic-serving",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-cert-manager-cert-manager-webhook-dynamic-serving.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook-subjectaccessreviews\\"},\\"rules\\":[{\\"apiGroups\\":[\\"authorization.k8s.io\\"],\\"resources\\":[\\"subjectaccessreviews\\"],\\"verbs\\":[\\"create\\"]}]}
",
      },
      "name": "cert-manager-webhook-subjectaccessreviews",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-webhook-subjectaccessreviews.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Certificate",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"Certificate\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"dnsNames\\":[\\"cert-manager-trust.cert-manager.svc\\"],\\"issuerRef\\":{\\"name\\":\\"cert-manager-trust\\"},\\"revisionHistoryLimit\\":1,\\"secretName\\":\\"cert-manager-trust-tls\\"}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-certificate-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook\\",\\"namespace\\":\\"cert-manager\\"}}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-webhook.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-issuers\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"issuers\\",\\"issuers/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"issuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"create\\",\\"update\\",\\"patch\\",\\"delete\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-issuers",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-issuers.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-view\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\",\\"certificaterequests\\",\\"issuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"challenges\\",\\"orders\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]}]}
",
      },
      "name": "cert-manager-controller-view",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-view.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "ClusterIssuer",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"ClusterIssuer\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-trust-anchor\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"ca\\":{\\"secretName\\":\\"linkerd-identity-trust-roots\\"}}}
",
      },
      "name": "linkerd-trust-anchor",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-clusterissuer-cert-manager-linkerd-trust-anchor.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook-dynamic-serving\\",\\"namespace\\":\\"cert-manager\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"cert-manager-webhook-dynamic-serving\\"},\\"subjects\\":[{\\"apiGroup\\":\\"\\",\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-webhook\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-webhook-dynamic-serving",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-cert-manager-cert-manager-webhook-dynamic-serving.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app\\":\\"cert-manager-trust\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app\\":\\"cert-manager-trust\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"--log-level=1\\",\\"--metrics-port=9402\\",\\"--readiness-probe-port=6060\\",\\"--readiness-probe-path=/readyz\\",\\"--trust-namespace=cert-manager\\",\\"--webhook-host=0.0.0.0\\",\\"--webhook-port=6443\\",\\"--webhook-certificate-dir=/tls\\"],\\"command\\":[\\"cert-manager-trust\\"],\\"image\\":\\"quay.io/jetstack/cert-manager-trust:v0.1.0\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"cert-manager-trust\\",\\"ports\\":[{\\"containerPort\\":6443},{\\"containerPort\\":9402}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/readyz\\",\\"port\\":6060},\\"initialDelaySeconds\\":3,\\"periodSeconds\\":7},\\"resources\\":{},\\"volumeMounts\\":[{\\"mountPath\\":\\"/tls\\",\\"name\\":\\"tls\\",\\"readOnly\\":true}]}],\\"serviceAccountName\\":\\"cert-manager-trust\\",\\"volumes\\":[{\\"name\\":\\"tls\\",\\"secret\\":{\\"defaultMode\\":420,\\"secretName\\":\\"cert-manager-trust-tls\\"}}]}}}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app": "cert-manager-trust",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "--log-level=1",
                "--metrics-port=9402",
                "--readiness-probe-port=6060",
                "--readiness-probe-path=/readyz",
                "--trust-namespace=cert-manager",
                "--webhook-host=0.0.0.0",
                "--webhook-port=6443",
                "--webhook-certificate-dir=/tls",
              ],
              "command": Array [
                "cert-manager-trust",
              ],
              "image": "quay.io/jetstack/cert-manager-trust:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "cert-manager-trust",
              "ports": Array [
                Object {
                  "containerPort": 6443,
                },
                Object {
                  "containerPort": 9402,
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/readyz",
                  "port": 6060,
                },
                "initialDelaySeconds": 3,
                "periodSeconds": 7,
              },
              "resources": Object {},
              "volumeMounts": Array [
                Object {
                  "mountPath": "/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "serviceAccountName": "cert-manager-trust",
          "volumes": Array [
            Object {
              "name": "tls",
              "secret": Object {
                "defaultMode": 420,
                "secretName": "cert-manager-trust-tls",
              },
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"https\\",\\"port\\":443,\\"targetPort\\":10250}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-webhook.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"strategy\\":{\\"rollingUpdate\\":{},\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"namespaces\\":[\\"cert-manager\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--v=2\\",\\"--secure-port=10250\\",\\"--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)\\",\\"--dynamic-serving-ca-secret-name=cert-manager-webhook-ca\\",\\"--dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}}],\\"image\\":\\"docker.io/bitnami/cert-manager-webhook:1.8.1-debian-11-r0\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/livez\\",\\"port\\":6080,\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":60,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"name\\":\\"cert-manager-webhook\\",\\"ports\\":[{\\"containerPort\\":10250,\\"name\\":\\"https\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":6080,\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":5,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001}}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"cert-manager-webhook\\"}}}}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-webhook.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "webhook",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.6.1",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": Array [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--v=2",
                "--secure-port=10250",
                "--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)",
                "--dynamic-serving-ca-secret-name=cert-manager-webhook-ca",
                "--dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cert-manager-webhook:1.8.1-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/livez",
                  "port": 6080,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "cert-manager-webhook",
              "ports": Array [
                Object {
                  "containerPort": 10250,
                  "name": "https",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 6080,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-webhook",
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"coordination.k8s.io\\"],\\"resources\\":[\\"leases\\"],\\"verbs\\":[\\"get\\",\\"create\\",\\"update\\",\\"watch\\",\\"list\\"]}]}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}}
",
      },
      "name": "cert-manager-controller",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cert-manager\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-approve\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resourceNames\\":[\\"issuers.cert-manager.io/*\\",\\"clusterissuers.cert-manager.io/*\\"],\\"resources\\":[\\"signers\\"],\\"verbs\\":[\\"approve\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-approve",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-approve.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-orders\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-orders\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-orders",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-orders.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-certificates\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-certificates\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-certificates",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-certificates.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook-subjectaccessreviews\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-webhook-subjectaccessreviews\\"},\\"subjects\\":[{\\"apiGroup\\":\\"\\",\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-webhook\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-webhook-subjectaccessreviews",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-webhook-subjectaccessreviews.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Issuer",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"Issuer\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"selfSigned\\":{}}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-issuer-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-cainjector\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"get\\",\\"create\\",\\"update\\",\\"patch\\"]},{\\"apiGroups\\":[\\"admissionregistration.k8s.io\\"],\\"resources\\":[\\"validatingwebhookconfigurations\\",\\"mutatingwebhookconfigurations\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"update\\"]},{\\"apiGroups\\":[\\"apiregistration.k8s.io\\"],\\"resources\\":[\\"apiservices\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"update\\"]},{\\"apiGroups\\":[\\"apiextensions.k8s.io\\"],\\"resources\\":[\\"customresourcedefinitions\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"update\\"]},{\\"apiGroups\\":[\\"auditregistration.k8s.io\\"],\\"resources\\":[\\"auditsinks\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"update\\"]}]}
",
      },
      "name": "cert-manager-cainjector",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-cainjector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-ingress-shim\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\",\\"certificaterequests\\"],\\"verbs\\":[\\"create\\",\\"update\\",\\"delete\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\",\\"certificaterequests\\",\\"issuers\\",\\"clusterissuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses/finalizers\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-ingress-shim",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-ingress-shim.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-leader-election\\",\\"namespace\\":\\"kube-system\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"cert-manager-controller\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"get\\",\\"update\\",\\"patch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"create\\"]},{\\"apiGroups\\":[\\"coordination.k8s.io\\"],\\"resourceNames\\":[\\"cert-manager-controller\\"],\\"resources\\":[\\"leases\\"],\\"verbs\\":[\\"get\\",\\"update\\",\\"patch\\"]},{\\"apiGroups\\":[\\"coordination.k8s.io\\"],\\"resources\\":[\\"leases\\"],\\"verbs\\":[\\"create\\"]}]}
",
      },
      "name": "cert-manager-controller-leader-election",
      "namespace": "kube-system",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-kube-system-cert-manager-controller-leader-election.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Certificate",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"Certificate\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-trust-anchor\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"commonName\\":\\"root.linkerd.cluster.local\\",\\"isCA\\":true,\\"issuerRef\\":{\\"group\\":\\"cert-manager.io\\",\\"kind\\":\\"ClusterIssuer\\",\\"name\\":\\"linkerd-self-signed-issuer\\"},\\"privateKey\\":{\\"algorithm\\":\\"ECDSA\\",\\"size\\":256},\\"secretName\\":\\"linkerd-identity-trust-roots\\"}}
",
      },
      "name": "linkerd-trust-anchor",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-certificate-cert-manager-linkerd-trust-anchor.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-issuers\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-issuers\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-issuers",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-issuers.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-cainjector-leader-election\\",\\"namespace\\":\\"kube-system\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"cert-manager-cainjector-leader-election\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-cainjector\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-cainjector-leader-election",
      "namespace": "kube-system",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-kube-system-cert-manager-cainjector-leader-election.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-cainjector\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"strategy\\":{\\"rollingUpdate\\":{},\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"namespaces\\":[\\"cert-manager\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--v=2\\",\\"--leader-election-namespace=kube-system\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}}],\\"image\\":\\"docker.io/bitnami/cainjector:1.8.1-debian-11-r0\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"cainjector\\",\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001}}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"cert-manager-cainjector\\"}}}}
",
      },
      "name": "cert-manager-cainjector",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-cainjector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "cainjector",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.6.1",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": Array [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--v=2",
                "--leader-election-namespace=kube-system",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cainjector:1.8.1-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "name": "cainjector",
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-cainjector",
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-clusterissuers\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-clusterissuers\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-clusterissuers",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-clusterissuers.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-cainjector\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-cainjector\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-cainjector\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-cainjector",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-cainjector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-clusterissuers\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"clusterissuers\\",\\"clusterissuers/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"clusterissuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"create\\",\\"update\\",\\"patch\\",\\"delete\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-clusterissuers",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-clusterissuers.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-challenges\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-challenges\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-challenges",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-challenges.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\"},\\"rules\\":[{\\"apiGroups\\":[\\"trust.cert-manager.io\\"],\\"resources\\":[\\"bundles\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"trust.cert-manager.io\\"],\\"resources\\":[\\"bundles/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"create\\",\\"update\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "cert-manager-trust",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "ClusterIssuer",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"ClusterIssuer\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-self-signed-issuer\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"selfSigned\\":{}}}
",
      },
      "name": "linkerd-self-signed-issuer",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-clusterissuer-cert-manager-linkerd-self-signed-issuer.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust-metrics\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"metrics\\",\\"port\\":9402,\\"protocol\\":\\"TCP\\",\\"targetPort\\":9402}],\\"selector\\":{\\"app\\":\\"cert-manager-trust\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "cert-manager-trust-metrics",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-trust-metrics.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"webhook\\",\\"port\\":443,\\"protocol\\":\\"TCP\\",\\"targetPort\\":6443}],\\"selector\\":{\\"app\\":\\"cert-manager-trust\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-cainjector\\",\\"namespace\\":\\"cert-manager\\"}}
",
      },
      "name": "cert-manager-cainjector",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-cainjector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-certificates\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\",\\"certificates/status\\",\\"certificaterequests\\",\\"certificaterequests/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\",\\"certificaterequests\\",\\"clusterissuers\\",\\"issuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates/finalizers\\",\\"certificaterequests/finalizers\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"orders\\"],\\"verbs\\":[\\"create\\",\\"delete\\",\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"create\\",\\"update\\",\\"delete\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-certificates",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-certificates.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"cert-manager-trust\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-orders\\"},\\"rules\\":[{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"orders\\",\\"orders/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"orders\\",\\"challenges\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"clusterissuers\\",\\"issuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"challenges\\"],\\"verbs\\":[\\"create\\",\\"delete\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"orders/finalizers\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-orders",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-orders.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-cainjector-leader-election\\",\\"namespace\\":\\"kube-system\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"cert-manager-cainjector-leader-election\\",\\"cert-manager-cainjector-leader-election-core\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"get\\",\\"update\\",\\"patch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"create\\"]},{\\"apiGroups\\":[\\"coordination.k8s.io\\"],\\"resourceNames\\":[\\"cert-manager-controller\\"],\\"resources\\":[\\"leases\\"],\\"verbs\\":[\\"get\\",\\"update\\",\\"patch\\"]},{\\"apiGroups\\":[\\"coordination.k8s.io\\"],\\"resources\\":[\\"leases\\"],\\"verbs\\":[\\"create\\",\\"get\\",\\"update\\"]}]}
",
      },
      "name": "cert-manager-cainjector-leader-election",
      "namespace": "kube-system",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-kube-system-cert-manager-cainjector-leader-election.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-challenges\\"},\\"rules\\":[{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"challenges\\",\\"challenges/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"challenges\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"issuers\\",\\"clusterissuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"pods\\",\\"services\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"create\\",\\"delete\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"create\\",\\"delete\\",\\"update\\"]},{\\"apiGroups\\":[\\"route.openshift.io\\"],\\"resources\\":[\\"routes/custom-host\\"],\\"verbs\\":[\\"create\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"challenges/finalizers\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-challenges",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-challenges.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cert-manager\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-approve\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-approve\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-approve",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-approve.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": Object {
      "annotations": Object {
        "cert-manager.io/inject-ca-from": "cert-manager/cert-manager-trust",
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"admissionregistration.k8s.io/v1\\",\\"kind\\":\\"ValidatingWebhookConfiguration\\",\\"metadata\\":{\\"annotations\\":{\\"cert-manager.io/inject-ca-from\\":\\"cert-manager/cert-manager-trust\\"},\\"labels\\":{\\"app\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\"},\\"webhooks\\":[{\\"admissionReviewVersions\\":[\\"v1\\",\\"v1beta1\\"],\\"clientConfig\\":{\\"service\\":{\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\",\\"path\\":\\"/validate\\"}},\\"failurePolicy\\":\\"Fail\\",\\"name\\":\\"trust.cert-manager.io\\",\\"rules\\":[{\\"apiGroups\\":[\\"trust.cert-manager.io\\"],\\"apiVersions\\":[\\"*\\"],\\"operations\\":[\\"CREATE\\",\\"UPDATE\\"],\\"resources\\":[\\"*/*\\"]}],\\"sideEffects\\":\\"None\\",\\"timeoutSeconds\\":5}]}
",
      },
      "name": "cert-manager-trust",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/admissionregistration.k8s.io_v1-validatingwebhookconfiguration-default-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "ClusterIssuer",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"ClusterIssuer\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"letsencrypt-cluster-issuer\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"acme\\":{\\"email\\":\\"oyelowooyedayo@gmail.com\\",\\"privateKeySecretRef\\":{\\"name\\":\\"letsencrypt-cluster-issuer-key\\"},\\"server\\":\\"https://acme-staging-v02.api.letsencrypt.org/directory\\",\\"solvers\\":[{\\"http01\\":{\\"ingress\\":{\\"class\\":\\"nginx\\"}}}]}}}
",
      },
      "name": "letsencrypt-cluster-issuer",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-clusterissuer-default-letsencrypt-cluster-issuer.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-leader-election\\",\\"namespace\\":\\"kube-system\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"cert-manager-controller-leader-election\\"},\\"subjects\\":[{\\"apiGroup\\":\\"\\",\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-leader-election",
      "namespace": "kube-system",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-kube-system-cert-manager-controller-leader-election.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "trust.cert-manager.io/v1alpha1",
    "kind": "Bundle",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"trust.cert-manager.io/v1alpha1\\",\\"kind\\":\\"Bundle\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-identity-trust-roots\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"sources\\":[{\\"secret\\":{\\"key\\":\\"ca.crt\\",\\"name\\":\\"linkerd-identity-trust-roots\\"}}],\\"target\\":{\\"configMap\\":{\\"key\\":\\"ca-bundle.crt\\"}}}}
",
      },
      "name": "linkerd-identity-trust-roots",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/trust.cert-manager.io_v1alpha1-bundle-default-linkerd-identity-trust-roots.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-ingress-shim\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-ingress-shim\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-ingress-shim",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-ingress-shim.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "sealedsecrets.bitnami.com",
    },
    "path": "generatedManifests/test/infrastructure/sealed-secrets/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-sealedsecrets.bitnami.com.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/sealed-secrets",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\",\\"app.kubernetes.io/version\\":\\"v0.17.5\\",\\"helm.sh/chart\\":\\"sealed-secrets-2.1.7\\"},\\"name\\":\\"sealed-secrets-key-admin\\",\\"namespace\\":\\"kube-system\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"sealed-secrets-key-admin\\"},\\"subjects\\":[{\\"apiGroup\\":\\"\\",\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"sealed-secrets\\",\\"namespace\\":\\"kube-system\\"}]}
",
      },
      "name": "sealed-secrets-key-admin",
      "namespace": "kube-system",
    },
    "path": "generatedManifests/test/infrastructure/sealed-secrets/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-kube-system-sealed-secrets-key-admin.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/sealed-secrets",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\",\\"app.kubernetes.io/version\\":\\"v0.17.5\\",\\"helm.sh/chart\\":\\"sealed-secrets-2.1.7\\"},\\"name\\":\\"sealed-secrets-service-proxier\\",\\"namespace\\":\\"kube-system\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"services\\"],\\"verbs\\":[\\"get\\"]},{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"http:sealed-secrets:\\",\\"http:sealed-secrets:http\\",\\"sealed-secrets\\"],\\"resources\\":[\\"services/proxy\\"],\\"verbs\\":[\\"create\\",\\"get\\"]}]}
",
      },
      "name": "sealed-secrets-service-proxier",
      "namespace": "kube-system",
    },
    "path": "generatedManifests/test/infrastructure/sealed-secrets/1-manifest/rbac.authorization.k8s.io_v1-role-kube-system-sealed-secrets-service-proxier.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/sealed-secrets",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\",\\"app.kubernetes.io/version\\":\\"v0.17.5\\",\\"helm.sh/chart\\":\\"sealed-secrets-2.1.7\\"},\\"name\\":\\"sealed-secrets-service-proxier\\",\\"namespace\\":\\"kube-system\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"sealed-secrets-service-proxier\\"},\\"subjects\\":[{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Group\\",\\"name\\":\\"system:authenticated\\"}]}
",
      },
      "name": "sealed-secrets-service-proxier",
      "namespace": "kube-system",
    },
    "path": "generatedManifests/test/infrastructure/sealed-secrets/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-kube-system-sealed-secrets-service-proxier.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/sealed-secrets",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\",\\"app.kubernetes.io/version\\":\\"v0.17.5\\",\\"helm.sh/chart\\":\\"sealed-secrets-2.1.7\\"},\\"name\\":\\"secrets-unsealer\\"},\\"rules\\":[{\\"apiGroups\\":[\\"bitnami.com\\"],\\"resources\\":[\\"sealedsecrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"bitnami.com\\"],\\"resources\\":[\\"sealedsecrets/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"create\\",\\"update\\",\\"delete\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "secrets-unsealer",
    },
    "path": "generatedManifests/test/infrastructure/sealed-secrets/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-secrets-unsealer.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/sealed-secrets",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\",\\"app.kubernetes.io/version\\":\\"v0.17.5\\",\\"helm.sh/chart\\":\\"sealed-secrets-2.1.7\\"},\\"name\\":\\"sealed-secrets\\",\\"namespace\\":\\"kube-system\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"http\\",\\"port\\":8080,\\"targetPort\\":\\"http\\"}],\\"selector\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "sealed-secrets",
      "namespace": "kube-system",
    },
    "path": "generatedManifests/test/infrastructure/sealed-secrets/1-manifest/v1-service-kube-system-sealed-secrets.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/sealed-secrets",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\",\\"app.kubernetes.io/version\\":\\"v0.17.5\\",\\"helm.sh/chart\\":\\"sealed-secrets-2.1.7\\"},\\"name\\":\\"sealed-secrets\\",\\"namespace\\":\\"kube-system\\"},\\"spec\\":{\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"--update-status\\",\\"--key-prefix\\",\\"sealed-secrets-key\\"],\\"command\\":[\\"controller\\"],\\"image\\":\\"docker.io/bitnami/sealed-secrets-controller:v0.17.5\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":\\"http\\"},\\"initialDelaySeconds\\":0,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"name\\":\\"controller\\",\\"ports\\":[{\\"containerPort\\":8080,\\"name\\":\\"http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":\\"http\\"},\\"initialDelaySeconds\\":0,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"readOnlyRootFilesystem\\":true,\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/tmp\\",\\"name\\":\\"tmp\\"}]}],\\"securityContext\\":{\\"fsGroup\\":65534},\\"serviceAccountName\\":\\"sealed-secrets\\",\\"volumes\\":[{\\"emptyDir\\":{},\\"name\\":\\"tmp\\"}]}}}}
",
      },
      "name": "sealed-secrets",
      "namespace": "kube-system",
    },
    "path": "generatedManifests/test/infrastructure/sealed-secrets/1-manifest/apps_v1-deployment-kube-system-sealed-secrets.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/sealed-secrets",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/instance": "sealed-secrets",
            "app.kubernetes.io/name": "sealed-secrets",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "--update-status",
                "--key-prefix",
                "sealed-secrets-key",
              ],
              "command": Array [
                "controller",
              ],
              "image": "docker.io/bitnami/sealed-secrets-controller:v0.17.5",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": "http",
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "controller",
              "ports": Array [
                Object {
                  "containerPort": 8080,
                  "name": "http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": "http",
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/tmp",
                  "name": "tmp",
                },
              ],
            },
          ],
          "securityContext": Object {
            "fsGroup": 65534,
          },
          "serviceAccountName": "sealed-secrets",
          "volumes": Array [
            Object {
              "emptyDir": Object {},
              "name": "tmp",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\",\\"app.kubernetes.io/version\\":\\"v0.17.5\\",\\"helm.sh/chart\\":\\"sealed-secrets-2.1.7\\"},\\"name\\":\\"sealed-secrets\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"secrets-unsealer\\"},\\"subjects\\":[{\\"apiGroup\\":\\"\\",\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"sealed-secrets\\",\\"namespace\\":\\"kube-system\\"}]}
",
      },
      "name": "sealed-secrets",
    },
    "path": "generatedManifests/test/infrastructure/sealed-secrets/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-sealed-secrets.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/sealed-secrets",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\",\\"app.kubernetes.io/version\\":\\"v0.17.5\\",\\"helm.sh/chart\\":\\"sealed-secrets-2.1.7\\"},\\"name\\":\\"sealed-secrets-key-admin\\",\\"namespace\\":\\"kube-system\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"sealed-secrets-key\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"create\\",\\"list\\"]}]}
",
      },
      "name": "sealed-secrets-key-admin",
      "namespace": "kube-system",
    },
    "path": "generatedManifests/test/infrastructure/sealed-secrets/1-manifest/rbac.authorization.k8s.io_v1-role-kube-system-sealed-secrets-key-admin.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/sealed-secrets",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\",\\"app.kubernetes.io/version\\":\\"v0.17.5\\",\\"helm.sh/chart\\":\\"sealed-secrets-2.1.7\\"},\\"name\\":\\"sealed-secrets\\",\\"namespace\\":\\"kube-system\\"}}
",
      },
      "name": "sealed-secrets",
      "namespace": "kube-system",
    },
    "path": "generatedManifests/test/infrastructure/sealed-secrets/1-manifest/v1-serviceaccount-kube-system-sealed-secrets.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/sealed-secrets",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"minReadySeconds\\":0,\\"replicas\\":1,\\"revisionHistoryLimit\\":10,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"}},\\"namespaces\\":[\\"default\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"/nginx-ingress-controller\\",\\"--default-backend-service=default/nginx-ingress-controller-default-backend\\",\\"--election-id=ingress-controller-leader\\",\\"--controller-class=k8s.io/ingress-nginx\\",\\"--configmap=default/nginx-ingress-controller\\"],\\"env\\":[{\\"name\\":\\"POD_NAME\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}}],\\"image\\":\\"docker.io/bitnami/nginx-ingress-controller:1.2.1-debian-11-r6\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":10254,\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"name\\":\\"controller\\",\\"ports\\":[{\\"containerPort\\":80,\\"name\\":\\"http\\",\\"protocol\\":\\"TCP\\"},{\\"containerPort\\":443,\\"name\\":\\"https\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":10254,\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":true,\\"capabilities\\":{\\"add\\":[\\"NET_BIND_SERVICE\\"],\\"drop\\":[\\"ALL\\"]},\\"runAsNonRoot\\":true,\\"runAsUser\\":1001}}],\\"dnsPolicy\\":\\"ClusterFirst\\",\\"hostNetwork\\":false,\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"nginx-ingress-controller\\",\\"terminationGracePeriodSeconds\\":60}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/apps_v1-deployment-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "nginx-ingress-controller",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "nginx-ingress-controller",
            "helm.sh/chart": "nginx-ingress-controller-9.2.11",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "controller",
                        "app.kubernetes.io/instance": "nginx-ingress-controller",
                        "app.kubernetes.io/name": "nginx-ingress-controller",
                      },
                    },
                    "namespaces": Array [
                      "default",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "/nginx-ingress-controller",
                "--default-backend-service=default/nginx-ingress-controller-default-backend",
                "--election-id=ingress-controller-leader",
                "--controller-class=k8s.io/ingress-nginx",
                "--configmap=default/nginx-ingress-controller",
              ],
              "env": Array [
                Object {
                  "name": "POD_NAME",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/nginx-ingress-controller:1.2.1-debian-11-r6",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "controller",
              "ports": Array [
                Object {
                  "containerPort": 80,
                  "name": "http",
                  "protocol": "TCP",
                },
                Object {
                  "containerPort": 443,
                  "name": "https",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": true,
                "capabilities": Object {
                  "add": Array [
                    "NET_BIND_SERVICE",
                  ],
                  "drop": Array [
                    "ALL",
                  ],
                },
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "dnsPolicy": "ClusterFirst",
          "hostNetwork": false,
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "nginx-ingress-controller",
          "terminationGracePeriodSeconds": 60,
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "defaultBackend.conf": "location /healthz {
  return 200;
}

location / {
  return 404;
}",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"defaultBackend.conf\\":\\"location /healthz {\\\\n  return 200;\\\\n}\\\\n\\\\nlocation / {\\\\n  return 404;\\\\n}\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller-default-backend\\",\\"namespace\\":\\"default\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller-default-backend",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/v1-configmap-default-nginx-ingress-controller-default-backend.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "IngressClass",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"networking.k8s.io/v1\\",\\"kind\\":\\"IngressClass\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx\\"},\\"spec\\":{\\"controller\\":\\"k8s.io/ingress-nginx\\"}}
",
      },
      "name": "nginx",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/networking.k8s.io_v1-ingressclass-default-nginx.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/v1-serviceaccount-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"networking.k8s.io/v1\\",\\"kind\\":\\"Ingress\\",\\"metadata\\":{\\"annotations\\":{\\"nginx.ingress.kubernetes.io/ssl-redirect\\":\\"false\\",\\"nginx.ingress.kubernetes.io/use-regex\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"oyelowo-ingress\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"ingressClassName\\":\\"nginx\\",\\"rules\\":[{\\"host\\":\\"localhost:8080\\",\\"http\\":{\\"paths\\":[{\\"backend\\":{\\"service\\":{\\"name\\":\\"graphql-mongo\\",\\"port\\":{\\"number\\":8000}}},\\"path\\":\\"/api\\",\\"pathType\\":\\"Prefix\\"},{\\"backend\\":{\\"service\\":{\\"name\\":\\"react-web\\",\\"port\\":{\\"number\\":3000}}},\\"path\\":\\"/\\",\\"pathType\\":\\"Prefix\\"}]}}],\\"tls\\":[]}}
",
        "nginx.ingress.kubernetes.io/ssl-redirect": "false",
        "nginx.ingress.kubernetes.io/use-regex": "true",
      },
      "name": "oyelowo-ingress",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/networking.k8s.io_v1-ingress-applications-oyelowo-ingress.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"nginx-ingress-controller\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"configmaps\\",\\"endpoints\\",\\"nodes\\",\\"pods\\",\\"secrets\\"],\\"verbs\\":[\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"nodes\\"],\\"verbs\\":[\\"get\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"services\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"update\\",\\"watch\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingressclasses\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"nginx-ingress-controller\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller-default-backend\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"}},\\"namespaces\\":[\\"default\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"image\\":\\"docker.io/bitnami/nginx:1.21.6-debian-11-r6\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":\\"http\\",\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":30,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":5},\\"name\\":\\"default-backend\\",\\"ports\\":[{\\"containerPort\\":8080,\\"name\\":\\"http\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":6,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":\\"http\\",\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":0,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":5},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/opt/bitnami/nginx/conf/bitnami/\\",\\"name\\":\\"nginx-config-volume\\",\\"readOnly\\":true}]}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"nginx-ingress-controller\\",\\"terminationGracePeriodSeconds\\":60,\\"volumes\\":[{\\"configMap\\":{\\"items\\":[{\\"key\\":\\"defaultBackend.conf\\",\\"path\\":\\"defaultBackend.conf\\"}],\\"name\\":\\"nginx-ingress-controller-default-backend\\"},\\"name\\":\\"nginx-config-volume\\"}]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller-default-backend",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/apps_v1-deployment-default-nginx-ingress-controller-default-backend.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "default-backend",
            "app.kubernetes.io/instance": "nginx-ingress-controller",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "nginx-ingress-controller",
            "helm.sh/chart": "nginx-ingress-controller-9.2.11",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "default-backend",
                        "app.kubernetes.io/instance": "nginx-ingress-controller",
                        "app.kubernetes.io/name": "nginx-ingress-controller",
                      },
                    },
                    "namespaces": Array [
                      "default",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "image": "docker.io/bitnami/nginx:1.21.6-debian-11-r6",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": "http",
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "name": "default-backend",
              "ports": Array [
                Object {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 6,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": "http",
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/opt/bitnami/nginx/conf/bitnami/",
                  "name": "nginx-config-volume",
                  "readOnly": true,
                },
              ],
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "nginx-ingress-controller",
          "terminationGracePeriodSeconds": 60,
          "volumes": Array [
            Object {
              "configMap": Object {
                "items": Array [
                  Object {
                    "key": "defaultBackend.conf",
                    "path": "defaultBackend.conf",
                  },
                ],
                "name": "nginx-ingress-controller-default-backend",
              },
              "name": "nginx-config-volume",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\"],\\"verbs\\":[\\"get\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"configmaps\\",\\"pods\\",\\"secrets\\",\\"endpoints\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"services\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"update\\",\\"watch\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"ingress-controller-leader\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"get\\",\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"create\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"endpoints\\"],\\"verbs\\":[\\"create\\",\\"get\\",\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-role-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller-default-backend\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"http\\",\\"port\\":80,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"http\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller-default-backend",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/v1-service-default-nginx-ingress-controller-default-backend.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"externalTrafficPolicy\\":\\"\\",\\"ports\\":[{\\"name\\":\\"http\\",\\"port\\":80,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"http\\"},{\\"name\\":\\"https\\",\\"port\\":443,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"https\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"},\\"sessionAffinity\\":\\"None\\",\\"type\\":\\"LoadBalancer\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/v1-service-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
    "spec": Object {},
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"applications\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/services/react-web\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "react-web",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd-applications-children-services/1-manifest/argoproj.io_v1alpha1-application-argocd-react-web.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd-applications-children-services",
    "spec": Object {},
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"applications\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/services/graphql-mongo\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "graphql-mongo",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd-applications-children-services/1-manifest/argoproj.io_v1alpha1-application-argocd-graphql-mongo.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd-applications-children-services",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"\\"},\\"name\\":\\"applications\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "applications",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-applications-applications.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/namespaces",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"\\"},\\"name\\":\\"linkerd-viz\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
      },
      "name": "linkerd-viz",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-linkerd-viz-linkerd-viz.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/namespaces",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"\\"},\\"name\\":\\"argocd\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-argocd-argocd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/namespaces",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"\\"},\\"name\\":\\"default\\",\\"namespace\\":\\"default\\"}}
",
      },
      "name": "default",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-default-default.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/namespaces",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"disabled\\"},\\"name\\":\\"linkerd\\",\\"namespace\\":\\"linkerd\\"}}
",
      },
      "name": "linkerd",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-linkerd-linkerd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/namespaces",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"\\"},\\"name\\":\\"kube-system\\",\\"namespace\\":\\"kube-system\\"}}
",
      },
      "name": "kube-system",
      "namespace": "kube-system",
    },
    "path": "generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-kube-system-kube-system.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/namespaces",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"\\"},\\"name\\":\\"cert-manager\\",\\"namespace\\":\\"cert-manager\\"}}
",
      },
      "name": "cert-manager",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-cert-manager-cert-manager.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/namespaces",
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "trafficsplits.split.smi-spec.io",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-trafficsplits.split.smi-spec.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "serverauthorizations.policy.linkerd.io",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-serverauthorizations.policy.linkerd.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "servers.policy.linkerd.io",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-servers.policy.linkerd.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "serviceprofiles.linkerd.io",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-serviceprofiles.linkerd.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-identity\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"grpc\\",\\"port\\":8080,\\"targetPort\\":8080}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"identity\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-identity",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"grpc\\",\\"port\\":8090,\\"targetPort\\":8090}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-policy",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-policy.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-dst-headless\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"grpc\\",\\"port\\":8086,\\"targetPort\\":8086}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-dst-headless",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-dst-headless.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"proxy-injector\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/config\\":\\"173ab73deb21ded56701835d0405fe9b6b152e8003f0a23857a20c3cf5165dbd\\",\\"config.linkerd.io/default-inbound-policy\\":\\"all-unauthenticated\\",\\"config.linkerd.io/opaque-ports\\":\\"8443\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\",\\"linkerd.io/identity-mode\\":\\"default\\",\\"linkerd.io/proxy-version\\":\\"stable-2.11.2\\"},\\"labels\\":{\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-proxy-injector\\",\\"linkerd.io/workload-ns\\":\\"linkerd\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"_pod_name\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"_pod_ns\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}},{\\"name\\":\\"_pod_nodeName\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.nodeName\\"}}},{\\"name\\":\\"LINKERD2_PROXY_LOG\\",\\"value\\":\\"warn,linkerd=info\\"},{\\"name\\":\\"LINKERD2_PROXY_LOG_FORMAT\\",\\"value\\":\\"plain\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_ADDR\\",\\"value\\":\\"linkerd-dst-headless.linkerd.svc.cluster.local.:8086\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_ADDR\\",\\"value\\":\\"linkerd-policy.linkerd.svc.cluster.local.:8090\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_WORKLOAD\\",\\"value\\":\\"$(_pod_ns):$(_pod_name)\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY\\",\\"value\\":\\"all-unauthenticated\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"100ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"1000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_CONTROL_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4190\\"},{\\"name\\":\\"LINKERD2_PROXY_ADMIN_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4191\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR\\",\\"value\\":\\"127.0.0.1:4140\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4143\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_IPS\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"status.podIPs\\"}}},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS\\",\\"value\\":\\"8443,9995\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES\\",\\"value\\":\\"svc.cluster.local.\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION\\",\\"value\\":\\"25,587,3306,4444,5432,6379,9300,11211\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_CONTEXT\\",\\"value\\":\\"{\\\\\\"ns\\\\\\":\\\\\\"$(_pod_ns)\\\\\\", \\\\\\"nodeName\\\\\\":\\\\\\"$(_pod_nodeName)\\\\\\"}\\\\n\\"},{\\"name\\":\\"_pod_sa\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.serviceAccountName\\"}}},{\\"name\\":\\"_l5d_ns\\",\\"value\\":\\"linkerd\\"},{\\"name\\":\\"_l5d_trustdomain\\",\\"value\\":\\"cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_DIR\\",\\"value\\":\\"/var/run/linkerd/identity/end-entity\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS\\",\\"valueFrom\\":{\\"configMapKeyRef\\":{\\"key\\":\\"ca-bundle.crt\\",\\"name\\":\\"linkerd-identity-trust-roots\\"}}},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TOKEN_FILE\\",\\"value\\":\\"/var/run/secrets/kubernetes.io/serviceaccount/token\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_ADDR\\",\\"value\\":\\"linkerd-identity-headless.linkerd.svc.cluster.local.:8080\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_LOCAL_NAME\\",\\"value\\":\\"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_NAME\\",\\"value\\":\\"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"}],\\"image\\":\\"cr.l5d.io/linkerd/proxy:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"lifecycle\\":{\\"postStart\\":{\\"exec\\":{\\"command\\":[\\"/usr/lib/linkerd/linkerd-await\\",\\"--timeout=2m\\"]}}},\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/live\\",\\"port\\":4191},\\"initialDelaySeconds\\":10},\\"name\\":\\"linkerd-proxy\\",\\"ports\\":[{\\"containerPort\\":4143,\\"name\\":\\"linkerd-proxy\\"},{\\"containerPort\\":4191,\\"name\\":\\"linkerd-admin\\"}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":4191},\\"initialDelaySeconds\\":2},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsUser\\":2102},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/identity/end-entity\\",\\"name\\":\\"linkerd-identity-end-entity\\"}]},{\\"args\\":[\\"proxy-injector\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9995},\\"initialDelaySeconds\\":10},\\"name\\":\\"proxy-injector\\",\\"ports\\":[{\\"containerPort\\":8443,\\"name\\":\\"proxy-injector\\"},{\\"containerPort\\":9995,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9995}},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/config\\",\\"name\\":\\"config\\"},{\\"mountPath\\":\\"/var/run/linkerd/identity/trust-roots\\",\\"name\\":\\"trust-roots\\"},{\\"mountPath\\":\\"/var/run/linkerd/tls\\",\\"name\\":\\"tls\\",\\"readOnly\\":true}]}],\\"initContainers\\":[{\\"args\\":[\\"--incoming-proxy-port\\",\\"4143\\",\\"--outgoing-proxy-port\\",\\"4140\\",\\"--proxy-uid\\",\\"2102\\",\\"--inbound-ports-to-ignore\\",\\"4190,4191,4567,4568\\",\\"--outbound-ports-to-ignore\\",\\"4567,4568\\"],\\"image\\":\\"cr.l5d.io/linkerd/proxy-init:v1.5.3\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"linkerd-init\\",\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"50Mi\\"},\\"requests\\":{\\"cpu\\":\\"10m\\",\\"memory\\":\\"10Mi\\"}},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":true,\\"capabilities\\":{\\"add\\":[\\"NET_ADMIN\\",\\"NET_RAW\\"]},\\"privileged\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsNonRoot\\":false,\\"runAsUser\\":0},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/run\\",\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"linkerd-proxy-injector\\",\\"volumes\\":[{\\"configMap\\":{\\"name\\":\\"linkerd-config\\"},\\"name\\":\\"config\\"},{\\"configMap\\":{\\"name\\":\\"linkerd-identity-trust-roots\\"},\\"name\\":\\"trust-roots\\"},{\\"name\\":\\"tls\\",\\"secret\\":{\\"secretName\\":\\"linkerd-proxy-injector-k8s-tls\\"}},{\\"emptyDir\\":{},\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"},{\\"emptyDir\\":{\\"medium\\":\\"Memory\\"},\\"name\\":\\"linkerd-identity-end-entity\\"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-proxy-injector",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/config": "173ab73deb21ded56701835d0405fe9b6b152e8003f0a23857a20c3cf5165dbd",
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "config.linkerd.io/opaque-ports": "8443",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
            "linkerd.io/identity-mode": "default",
            "linkerd.io/proxy-version": "stable-2.11.2",
          },
          "labels": Object {
            "linkerd.io/control-plane-component": "proxy-injector",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-proxy-injector",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "_pod_name",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "_pod_ns",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                Object {
                  "name": "_pod_nodeName",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "linkerd-dst-headless.linkerd.svc.cluster.local.:8086",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "linkerd-policy.linkerd.svc.cluster.local.:8090",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                Object {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8443,9995",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}
",
                },
                Object {
                  "name": "_pod_sa",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                Object {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                Object {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": Object {
                    "configMapKeyRef": Object {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "linkerd-identity-headless.linkerd.svc.cluster.local.:8080",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": Object {
                "postStart": Object {
                  "exec": Object {
                    "command": Array [
                      "/usr/lib/linkerd/linkerd-await",
                      "--timeout=2m",
                    ],
                  },
                },
              },
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": Array [
                Object {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                Object {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
              ],
            },
            Object {
              "args": Array [
                "proxy-injector",
                "-log-level=info",
                "-log-format=plain",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9995,
                },
                "initialDelaySeconds": 10,
              },
              "name": "proxy-injector",
              "ports": Array [
                Object {
                  "containerPort": 8443,
                  "name": "proxy-injector",
                },
                Object {
                  "containerPort": 9995,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9995,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/config",
                  "name": "config",
                },
                Object {
                  "mountPath": "/var/run/linkerd/identity/trust-roots",
                  "name": "trust-roots",
                },
                Object {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "4567,4568",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v1.5.3",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": Object {
                "limits": Object {
                  "cpu": "100m",
                  "memory": "50Mi",
                },
                "requests": Object {
                  "cpu": "10m",
                  "memory": "10Mi",
                },
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": true,
                "capabilities": Object {
                  "add": Array [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": false,
                "runAsUser": 0,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-proxy-injector",
          "volumes": Array [
            Object {
              "configMap": Object {
                "name": "linkerd-config",
              },
              "name": "config",
            },
            Object {
              "configMap": Object {
                "name": "linkerd-identity-trust-roots",
              },
              "name": "trust-roots",
            },
            Object {
              "name": "tls",
              "secret": Object {
                "secretName": "linkerd-proxy-injector-k8s-tls",
              },
            },
            Object {
              "emptyDir": Object {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            Object {
              "emptyDir": Object {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"admissionregistration.k8s.io/v1\\",\\"kind\\":\\"ValidatingWebhookConfiguration\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy-validator-webhook-config\\"},\\"webhooks\\":[{\\"admissionReviewVersions\\":[\\"v1\\",\\"v1beta1\\"],\\"clientConfig\\":{\\"caBundle\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQUpxemFWRDJFQjluK3hzS3ZxSHV1MzB3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa2JHbHVhMlZ5WkMxd2IyeHBZM2t0ZG1Gc2FXUmhkRzl5TG14cGJtdGxjbVF1YzNaagpNQjRYRFRJeU1EZ3hNVEEyTkRNeU0xb1hEVEl6TURneE1UQTJORE15TTFvd0x6RXRNQ3NHQTFVRUF4TWtiR2x1CmEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeAp3MTRGRzA0di9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLCm9lTXdnN0IzV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnMKUnJqY1lpeXphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWApnWUFEUGloT1JVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrCkRuck5yUFFTaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJvM0F3YmpBT0JnTlYKSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdMd1lEVlIwUkJDZ3dKb0lrYkdsdWEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwCmJtdGxjbVF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ3VvelhFMWJZMkR1VHZLdzcya1NoQVE0c2YKeiszZGlYdEhSbGpiYjNKZWIyNFRWOUVqZ1RybmhsYlpFaG8rcFA5ME5kQlIvQTRvVHdXQjdVUFFienp5eHQ5aApCcHZmVXQ1N1pyQ3hQdGs5RXJVdXR2T3EvU2NqNkNDd1VBUjZ4b2pybnJWQzNqY3ZIZEp0TXBNNlA3QnlQVUtxCjZ6c1dVcVExT0p6Tjg0czV6TDRoMG9YZDA5T0RXOC8rNWRFUVBOY1JXM2pHallvdHFoUnYzVm5aSVVYejZlTVcKaXVveFlrTDZNc2NyNHhGZkROOXBDVnkyVWIvV0JUSGVQd2ZHOGduaTVlR3ErMjNUWGFCbm1xd2V2aFNZcXQ5eQpOcm9rMzVVZlFHamI2WUFRUVdyQlRxa1diSDZ2WVpYVUYrZGEwL2JrVnFwbDNDZGpJdHhHaWV4bnUxS1oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"service\\":{\\"name\\":\\"linkerd-policy-validator\\",\\"namespace\\":\\"linkerd\\",\\"path\\":\\"/\\"}},\\"failurePolicy\\":\\"Ignore\\",\\"name\\":\\"linkerd-policy-validator.linkerd.io\\",\\"namespaceSelector\\":{\\"matchExpressions\\":[{\\"key\\":\\"config.linkerd.io/admission-webhooks\\",\\"operator\\":\\"NotIn\\",\\"values\\":[\\"disabled\\"]}]},\\"rules\\":[{\\"apiGroups\\":[\\"policy.linkerd.io\\"],\\"apiVersions\\":[\\"v1alpha1\\",\\"v1beta1\\"],\\"operations\\":[\\"CREATE\\",\\"UPDATE\\"],\\"resources\\":[\\"serverauthorizations\\",\\"servers\\"]}],\\"sideEffects\\":\\"None\\"}]}
",
      },
      "name": "linkerd-policy-validator-webhook-config",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/admissionregistration.k8s.io_v1-validatingwebhookconfiguration-default-linkerd-policy-validator-webhook-config.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-linkerd-destination\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-destination\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"linkerd-destination\\",\\"namespace\\":\\"linkerd\\"}]}
",
      },
      "name": "linkerd-linkerd-destination",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-destination.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Certificate",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"Certificate\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-identity-issuer\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"commonName\\":\\"identity.linkerd.cluster.local\\",\\"dnsNames\\":[\\"identity.linkerd.cluster.local\\"],\\"duration\\":\\"48h\\",\\"isCA\\":true,\\"issuerRef\\":{\\"kind\\":\\"ClusterIssuer\\",\\"name\\":\\"linkerd-trust-anchor\\"},\\"privateKey\\":{\\"algorithm\\":\\"ECDSA\\"},\\"renewBefore\\":\\"25h\\",\\"secretName\\":\\"linkerd-identity-issuer\\",\\"usages\\":[\\"cert sign\\",\\"crl sign\\",\\"server auth\\",\\"client auth\\"]}}
",
      },
      "name": "linkerd-identity-issuer",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/cert-manager.io_v1-certificate-linkerd-linkerd-identity-issuer.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy-validator\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"policy-https\\",\\"port\\":443,\\"targetPort\\":\\"policy-https\\"}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-policy-validator",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-policy-validator.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-linkerd-proxy-injector\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-proxy-injector\\"},\\"subjects\\":[{\\"apiGroup\\":\\"\\",\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"linkerd-proxy-injector\\",\\"namespace\\":\\"linkerd\\"}]}
",
      },
      "name": "linkerd-linkerd-proxy-injector",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-linkerd-identity\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-identity\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"linkerd-identity\\",\\"namespace\\":\\"linkerd\\"}]}
",
      },
      "name": "linkerd-linkerd-identity",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "MutatingWebhookConfiguration",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"admissionregistration.k8s.io/v1\\",\\"kind\\":\\"MutatingWebhookConfiguration\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector-webhook-config\\"},\\"webhooks\\":[{\\"admissionReviewVersions\\":[\\"v1\\",\\"v1beta1\\"],\\"clientConfig\\":{\\"caBundle\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUxsUXVZVlBqeVo1N0dhcWgzWXFJM3d3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBNE1URXdOalF6TWpOYUZ3MHlNekE0TVRFd05qUXpNak5hTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRRGduL3ZacVo4NGdEVWhuRG9OdEQxYU1zZXBReFFhTnRDcWdWR3lIOFZSZm9ySwpXMTdRcko0M2lvd3JvVXUzaWpQY3JPZnlQdFZxOWZSMXNlSCtBenY1WlFpczRQYUlNUFZ1b1AxV3ArK3pPTVpyCmJydE01TzNIdUNCcmVXYTRaU2ZoeXRkNDhxMzhEdTVnQ1I4WFByKzUwQU5BN2FVaUYxaG9uK3MycUVMbHY3b0UKL01FblR5eUhIUWhzNWFkajVMdWR3bXpBTXI1cGo4ZGlXc2d4WThLc0owYU8zVGJIUmJXTkRZTU9MZFNzZ3pFKwoxRmsxdTdMSWljRG9GQm1oRENZZVZzTURLYTV4Znk4TVUrU1FxVEpKVHRiUXNBTzdiQU5KTW9mMnJEZUhTeTU3CnhSRFBTczZNTjU2MXNadVdHaHdJQmpzZHZCMU5UcXp3ZFo4ekhjNWpBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ0NHNaNlNnclRSK01xbExON3F3bW9kMXplTkF1dDh6Q3IKYkc3NEhpdktIZ1Zhb3JwOUp1SlJKU0VEUlVQLzdocmNMd0pjRUlMTllGZHhmalpKYllBMUFnSmZkdUt2WDM0Ygo1SC9hc05QRkVzSTdIOWw0cmY3TDVHbjJ6QWlBR1k4WFpKcXpxclE0eGIrdWE0V3p1VGQ2VHRoSm9pMU96UTBNCnh3UWRFbHVBWTNYVzJZV2VrYzJub0FiRlFvNCtQK3VVcHg1NE8wY0NCa0xCM2NuSmtzZ2RRejViektXVzFITUkKQmRQekN3c0xTK1dPK2doTWRWSkVuV3hWY1krNTZpRjNCM2FQWG9WL01RNU56WEs5c2FBNVZhYWJKbjVYd2FqRAplR1l4QlJvZ0R2ZTNnaWwwbERDbnVxMHZZZFp2aktDd2dwRUxhaVBWS1dnZmxYcVR1bFVWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"service\\":{\\"name\\":\\"linkerd-proxy-injector\\",\\"namespace\\":\\"linkerd\\",\\"path\\":\\"/\\"}},\\"failurePolicy\\":\\"Ignore\\",\\"name\\":\\"linkerd-proxy-injector.linkerd.io\\",\\"namespaceSelector\\":{\\"matchExpressions\\":[{\\"key\\":\\"config.linkerd.io/admission-webhooks\\",\\"operator\\":\\"NotIn\\",\\"values\\":[\\"disabled\\"]}]},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"apiVersions\\":[\\"v1\\"],\\"operations\\":[\\"CREATE\\"],\\"resources\\":[\\"pods\\",\\"services\\"]}],\\"sideEffects\\":\\"None\\"}]}
",
      },
      "name": "linkerd-proxy-injector-webhook-config",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/admissionregistration.k8s.io_v1-mutatingwebhookconfiguration-default-linkerd-proxy-injector-webhook-config.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-linkerd-identity\\"},\\"rules\\":[{\\"apiGroups\\":[\\"authentication.k8s.io\\"],\\"resources\\":[\\"tokenreviews\\"],\\"verbs\\":[\\"create\\"]},{\\"apiGroups\\":[\\"apps\\"],\\"resources\\":[\\"deployments\\"],\\"verbs\\":[\\"get\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "linkerd-linkerd-identity",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-destination\\",\\"namespace\\":\\"linkerd\\"}}
",
      },
      "name": "linkerd-destination",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-destination.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-heartbeat\\",\\"namespace\\":\\"linkerd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"linkerd-config\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"get\\"]}]}
",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-role-linkerd-linkerd-heartbeat.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-sp-validator\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"sp-validator\\",\\"port\\":443,\\"targetPort\\":\\"sp-validator\\"}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-sp-validator",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-sp-validator.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"admissionregistration.k8s.io/v1\\",\\"kind\\":\\"ValidatingWebhookConfiguration\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-sp-validator-webhook-config\\"},\\"webhooks\\":[{\\"admissionReviewVersions\\":[\\"v1\\",\\"v1beta1\\"],\\"clientConfig\\":{\\"caBundle\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUkrYUVCL0EzcmRkK0VDak5VYzhsYlF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3T0RFeE1EWTBNekl6V2hjTk1qTXdPREV4TURZME16SXpXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxwdU53cFZ2dEcvUkVoUXpCM1JiK1BvWU9iVTVOck5iSUJKTU4vNjlWY3FucnYweWQ0SQpjUllyWVIwMjJ5NE9UODk5THVtOHpiVGZDOGVPTXlnaFZ0akFwb0xzcWdtMkkwV3FIcVNtQ0NuR3l6cnJLbzNrCnNCODdsTmJDV1k2ekcvV0J4NFRpbFdsTzBiSDB5elM3NmRrR0d0eW1YNlFwLzdYV2kvMEUzblRhaWxYVHZ0M1kKcFpNTDhZREFQdjJtR1FHU0hhUkQxNG9LRTJDa2tEVm5mU0g4UU5Vd0sydys5cEY1aW82Q0oyTXRIeWhIZmF5NwpaUnBXK0hxLzYxVFhVTTVYR0hPNlpoZ0dLeWEzbnlseXhLa3lFR1QxUFZkMWtXUEhyQ0lXWjZoelArb3dZNzJXCm1NRklwbXJTNExDa0RTSVRBdW03RnpoMGZ0c2dJYmErUk9jQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBNVgvRnMwbXF0R1c4SjVhMVViTVFrTHpuazIzbzZCWkxhMnlydjBxbTYKSCtrdW5UWkVzMnAzUGR0SDJYeXVhVytrRDFmbmRyR2haRHErRkt2Qnc4ZDlmUERLMXBiVHU1RnprS1lrUU9CbwptajJtZVdJUjdMUlJ1UWFIbnJTd1BUQzNlbWtWRVpQMjBiaUNSclhpV3RLdWtaeEZyTmdrbXZwY0d1VWZPWlBUCkNmU0s1NzM4VXpUSVIzWWxHOXExdnVBbVcyQXNrYXNIbTE3M0ZLN2x2R3NwaE8wVTdRY3JFeEJiVmd0SUZ0Qk0KM0tJYktBZmg5VUs2aW1DNGpsazRlVFBicTZSTHlmNFJoK3Rwb3pWeTlmK295cDZ5eEVlUWwvMk5jNU1mQmxyOQp3MWtDUTczN2k0R1QzMXZmRDJST25JOU9ZZFMrV1VDSWs0dnlVL1l6eVdBawotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t\\",\\"service\\":{\\"name\\":\\"linkerd-sp-validator\\",\\"namespace\\":\\"linkerd\\",\\"path\\":\\"/\\"}},\\"failurePolicy\\":\\"Ignore\\",\\"name\\":\\"linkerd-sp-validator.linkerd.io\\",\\"namespaceSelector\\":{\\"matchExpressions\\":[{\\"key\\":\\"config.linkerd.io/admission-webhooks\\",\\"operator\\":\\"NotIn\\",\\"values\\":[\\"disabled\\"]}]},\\"rules\\":[{\\"apiGroups\\":[\\"linkerd.io\\"],\\"apiVersions\\":[\\"v1alpha1\\",\\"v1alpha2\\"],\\"operations\\":[\\"CREATE\\",\\"UPDATE\\"],\\"resources\\":[\\"serviceprofiles\\"]}],\\"sideEffects\\":\\"None\\"}]}
",
      },
      "name": "linkerd-sp-validator-webhook-config",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/admissionregistration.k8s.io_v1-validatingwebhookconfiguration-default-linkerd-sp-validator-webhook-config.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-heartbeat\\",\\"namespace\\":\\"linkerd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"linkerd-heartbeat\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"linkerd-heartbeat\\",\\"namespace\\":\\"linkerd\\"}]}
",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-linkerd-linkerd-heartbeat.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"identity\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-identity\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-identity\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"config.linkerd.io/default-inbound-policy\\":\\"all-unauthenticated\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\",\\"linkerd.io/identity-mode\\":\\"default\\",\\"linkerd.io/proxy-version\\":\\"stable-2.11.2\\"},\\"labels\\":{\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-identity\\",\\"linkerd.io/workload-ns\\":\\"linkerd\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"identity\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-controller-namespace=linkerd\\",\\"-identity-trust-domain=cluster.local\\",\\"-identity-issuance-lifetime=24h0m0s\\",\\"-identity-clock-skew-allowance=20s\\",\\"-identity-scheme=kubernetes.io/tls\\",\\"-enable-pprof=false\\"],\\"env\\":[{\\"name\\":\\"LINKERD_DISABLED\\",\\"value\\":\\"linkerd-await cannot block the identity controller\\"}],\\"image\\":\\"cr.l5d.io/linkerd/controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9990},\\"initialDelaySeconds\\":10},\\"name\\":\\"identity\\",\\"ports\\":[{\\"containerPort\\":8080,\\"name\\":\\"grpc\\"},{\\"containerPort\\":9990,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9990}},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/identity/issuer\\",\\"name\\":\\"identity-issuer\\"},{\\"mountPath\\":\\"/var/run/linkerd/identity/trust-roots/\\",\\"name\\":\\"trust-roots\\"}]},{\\"env\\":[{\\"name\\":\\"_pod_name\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"_pod_ns\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}},{\\"name\\":\\"_pod_nodeName\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.nodeName\\"}}},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS\\",\\"value\\":\\"8080\\"},{\\"name\\":\\"LINKERD2_PROXY_LOG\\",\\"value\\":\\"warn,linkerd=info\\"},{\\"name\\":\\"LINKERD2_PROXY_LOG_FORMAT\\",\\"value\\":\\"plain\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_ADDR\\",\\"value\\":\\"linkerd-dst-headless.linkerd.svc.cluster.local.:8086\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_ADDR\\",\\"value\\":\\"linkerd-policy.linkerd.svc.cluster.local.:8090\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_WORKLOAD\\",\\"value\\":\\"$(_pod_ns):$(_pod_name)\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY\\",\\"value\\":\\"all-unauthenticated\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"100ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"1000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_CONTROL_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4190\\"},{\\"name\\":\\"LINKERD2_PROXY_ADMIN_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4191\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR\\",\\"value\\":\\"127.0.0.1:4140\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4143\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_IPS\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"status.podIPs\\"}}},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS\\",\\"value\\":\\"8080,9990\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES\\",\\"value\\":\\"svc.cluster.local.\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION\\",\\"value\\":\\"25,587,3306,4444,5432,6379,9300,11211\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_CONTEXT\\",\\"value\\":\\"{\\\\\\"ns\\\\\\":\\\\\\"$(_pod_ns)\\\\\\", \\\\\\"nodeName\\\\\\":\\\\\\"$(_pod_nodeName)\\\\\\"}\\\\n\\"},{\\"name\\":\\"_pod_sa\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.serviceAccountName\\"}}},{\\"name\\":\\"_l5d_ns\\",\\"value\\":\\"linkerd\\"},{\\"name\\":\\"_l5d_trustdomain\\",\\"value\\":\\"cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_DIR\\",\\"value\\":\\"/var/run/linkerd/identity/end-entity\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS\\",\\"valueFrom\\":{\\"configMapKeyRef\\":{\\"key\\":\\"ca-bundle.crt\\",\\"name\\":\\"linkerd-identity-trust-roots\\"}}},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TOKEN_FILE\\",\\"value\\":\\"/var/run/secrets/kubernetes.io/serviceaccount/token\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_ADDR\\",\\"value\\":\\"localhost.:8080\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_LOCAL_NAME\\",\\"value\\":\\"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_NAME\\",\\"value\\":\\"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"}],\\"image\\":\\"cr.l5d.io/linkerd/proxy:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/live\\",\\"port\\":4191},\\"initialDelaySeconds\\":10},\\"name\\":\\"linkerd-proxy\\",\\"ports\\":[{\\"containerPort\\":4143,\\"name\\":\\"linkerd-proxy\\"},{\\"containerPort\\":4191,\\"name\\":\\"linkerd-admin\\"}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":4191},\\"initialDelaySeconds\\":2},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsUser\\":2102},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/identity/end-entity\\",\\"name\\":\\"linkerd-identity-end-entity\\"}]}],\\"initContainers\\":[{\\"args\\":[\\"--incoming-proxy-port\\",\\"4143\\",\\"--outgoing-proxy-port\\",\\"4140\\",\\"--proxy-uid\\",\\"2102\\",\\"--inbound-ports-to-ignore\\",\\"4190,4191,4567,4568\\",\\"--outbound-ports-to-ignore\\",\\"443\\"],\\"image\\":\\"cr.l5d.io/linkerd/proxy-init:v1.5.3\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"linkerd-init\\",\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"50Mi\\"},\\"requests\\":{\\"cpu\\":\\"10m\\",\\"memory\\":\\"10Mi\\"}},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":true,\\"capabilities\\":{\\"add\\":[\\"NET_ADMIN\\",\\"NET_RAW\\"]},\\"privileged\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsNonRoot\\":false,\\"runAsUser\\":0},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/run\\",\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"linkerd-identity\\",\\"volumes\\":[{\\"name\\":\\"identity-issuer\\",\\"secret\\":{\\"secretName\\":\\"linkerd-identity-issuer\\"}},{\\"configMap\\":{\\"name\\":\\"linkerd-identity-trust-roots\\"},\\"name\\":\\"trust-roots\\"},{\\"emptyDir\\":{},\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"},{\\"emptyDir\\":{\\"medium\\":\\"Memory\\"},\\"name\\":\\"linkerd-identity-end-entity\\"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-identity",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
            "linkerd.io/identity-mode": "default",
            "linkerd.io/proxy-version": "stable-2.11.2",
          },
          "labels": Object {
            "linkerd.io/control-plane-component": "identity",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-identity",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "identity",
                "-log-level=info",
                "-log-format=plain",
                "-controller-namespace=linkerd",
                "-identity-trust-domain=cluster.local",
                "-identity-issuance-lifetime=24h0m0s",
                "-identity-clock-skew-allowance=20s",
                "-identity-scheme=kubernetes.io/tls",
                "-enable-pprof=false",
              ],
              "env": Array [
                Object {
                  "name": "LINKERD_DISABLED",
                  "value": "linkerd-await cannot block the identity controller",
                },
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9990,
                },
                "initialDelaySeconds": 10,
              },
              "name": "identity",
              "ports": Array [
                Object {
                  "containerPort": 8080,
                  "name": "grpc",
                },
                Object {
                  "containerPort": 9990,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9990,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/identity/issuer",
                  "name": "identity-issuer",
                },
                Object {
                  "mountPath": "/var/run/linkerd/identity/trust-roots/",
                  "name": "trust-roots",
                },
              ],
            },
            Object {
              "env": Array [
                Object {
                  "name": "_pod_name",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "_pod_ns",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                Object {
                  "name": "_pod_nodeName",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS",
                  "value": "8080",
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "linkerd-dst-headless.linkerd.svc.cluster.local.:8086",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "linkerd-policy.linkerd.svc.cluster.local.:8090",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                Object {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8080,9990",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}
",
                },
                Object {
                  "name": "_pod_sa",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                Object {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                Object {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": Object {
                    "configMapKeyRef": Object {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "localhost.:8080",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": Array [
                Object {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                Object {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "443",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v1.5.3",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": Object {
                "limits": Object {
                  "cpu": "100m",
                  "memory": "50Mi",
                },
                "requests": Object {
                  "cpu": "10m",
                  "memory": "10Mi",
                },
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": true,
                "capabilities": Object {
                  "add": Array [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": false,
                "runAsUser": 0,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-identity",
          "volumes": Array [
            Object {
              "name": "identity-issuer",
              "secret": Object {
                "secretName": "linkerd-identity-issuer",
              },
            },
            Object {
              "configMap": Object {
                "name": "linkerd-identity-trust-roots",
              },
              "name": "trust-roots",
            },
            Object {
              "emptyDir": Object {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            Object {
              "emptyDir": Object {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUkrYUVCL0EzcmRkK0VDak5VYzhsYlF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3T0RFeE1EWTBNekl6V2hjTk1qTXdPREV4TURZME16SXpXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxwdU53cFZ2dEcvUkVoUXpCM1JiK1BvWU9iVTVOck5iSUJKTU4vNjlWY3FucnYweWQ0SQpjUllyWVIwMjJ5NE9UODk5THVtOHpiVGZDOGVPTXlnaFZ0akFwb0xzcWdtMkkwV3FIcVNtQ0NuR3l6cnJLbzNrCnNCODdsTmJDV1k2ekcvV0J4NFRpbFdsTzBiSDB5elM3NmRrR0d0eW1YNlFwLzdYV2kvMEUzblRhaWxYVHZ0M1kKcFpNTDhZREFQdjJtR1FHU0hhUkQxNG9LRTJDa2tEVm5mU0g4UU5Vd0sydys5cEY1aW82Q0oyTXRIeWhIZmF5NwpaUnBXK0hxLzYxVFhVTTVYR0hPNlpoZ0dLeWEzbnlseXhLa3lFR1QxUFZkMWtXUEhyQ0lXWjZoelArb3dZNzJXCm1NRklwbXJTNExDa0RTSVRBdW03RnpoMGZ0c2dJYmErUk9jQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBNVgvRnMwbXF0R1c4SjVhMVViTVFrTHpuazIzbzZCWkxhMnlydjBxbTYKSCtrdW5UWkVzMnAzUGR0SDJYeXVhVytrRDFmbmRyR2haRHErRkt2Qnc4ZDlmUERLMXBiVHU1RnprS1lrUU9CbwptajJtZVdJUjdMUlJ1UWFIbnJTd1BUQzNlbWtWRVpQMjBiaUNSclhpV3RLdWtaeEZyTmdrbXZwY0d1VWZPWlBUCkNmU0s1NzM4VXpUSVIzWWxHOXExdnVBbVcyQXNrYXNIbTE3M0ZLN2x2R3NwaE8wVTdRY3JFeEJiVmd0SUZ0Qk0KM0tJYktBZmg5VUs2aW1DNGpsazRlVFBicTZSTHlmNFJoK3Rwb3pWeTlmK295cDZ5eEVlUWwvMk5jNU1mQmxyOQp3MWtDUTczN2k0R1QzMXZmRDJST25JOU9ZZFMrV1VDSWs0dnlVL1l6eVdBawotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdW00M0NsVyswYjlFU0ZETUhkRnY0K2hnNXRUazJzMXNnRWt3My9yMVZ5cWV1L1RKCjNnaHhGaXRoSFRiYkxnNVB6MzB1NmJ6TnROOEx4NDR6S0NGVzJNQ21ndXlxQ2JZalJhb2VwS1lJS2NiTE91c3EKamVTd0h6dVUxc0paanJNYjlZSEhoT0tWYVU3UnNmVExOTHZwMlFZYTNLWmZwQ24vdGRhTC9RVGVkTnFLVmRPKwozZGlsa3d2eGdNQSsvYVlaQVpJZHBFUFhpZ29UWUtTUU5XZDlJZnhBMVRBcmJENzJrWG1Lam9Jbll5MGZLRWQ5CnJMdGxHbGI0ZXIvclZOZFF6bGNZYzdwbUdBWXJKcmVmS1hMRXFUSVFaUFU5VjNXUlk4ZXNJaFpucUhNLzZqQmoKdlphWXdVaW1hdExnc0tRTkloTUM2YnNYT0hSKzJ5QWh0cjVFNXdJREFRQUJBb0lCQUc4a0VaQUp1aTZVMWdJKwptTkVWOEp4d0JvVFdXbkRPa21hUU82RHJuYU9QZHY0YVd0WVJOa20vSnJBaDZkeTFENE5rMzdqY284MjJRdkYrCnBxUy82MlJneFdPNzcwckcySlJKYk9jL1RCS0x2dENyTGIxVm5tR2dSWVVhYkFXVVpaQ2hBKzhHbllnZ1F3YlMKSnVxVE5ELzdVYnhGT3pORkRucTdJczErUDVodFFzNlA2U1NFTEpMNG1hK3l2NGdETFIyZm5QbUZIZCtia0xlSwozb3Y5aE1nVjBRRHZCbVVVaFlnZS9icHJCc2ZMd2QxaXRlcHQxNXRGT1RpVWs2NnI1WlFkZlhDY1BmTGd3bExCCkc0MlZLSFovNkxEaTR2Q2U4cXpoVW9KYzExaFlnQnZWYks5WVk1MEJTL21tNllvZmROWjlvMmFKNDk5cjF6R1cKR1FHKzBTRUNnWUVBeGFvWlArZXU5OU1FZmVPU0FVRVV4Zy9udlJiOVhaSnBMazQ0N3RQd2lRbkRSVTUxZXZzVAo0dHhjeWxhYStBNFJNdlVPcURqVTNnUEdKN0lmckVjY3JJMXJZbkZFb2xXSVBiR0xCMWRTOWMzejhBYTJHdkVLCitLdFNTWVYvQ1B4MFlNUHRybXMydmdwQVluRTJGZWU0YjFvVlBiNDZNQTRRcWtnNWtkdzcrKzhDZ1lFQThYTmYKcC8xU2k0b1ZJT3ZseWxoSk52SjVKdXhTcmsxN0gvOFgvdWM1UngyS0J5SFNzRFNiQTEvMFk3Q29aSHJMYkQwTAo5OHJxekxGa1g5WHhENml1ZmU5MzE1OVo4L0Exb2w3OTMzSk1Vd2hTQXZTK1d4Uy9yVUczamdRMjJ4RWN3cThUCmwvTDZlR0dpM2tBU0R1SVRLUFFMemxlUTdXVVRHZnJndWZrWXJva0NnWUVBcHlSTGo0OGdrNnlhMnJ5cEJHaDgKNFhJbm1ld3J1SWtLYWI1NVEvSnhMZC9VZi9GMVE5VzFuaHFLV0FwZHBpMTIrNmplaVA3dGVRS2w5NEVXYVQ0RQprQ0JSVW4vRzhxSHl2NEEydUxGdGxDNWYvSElnWUsyOGdrT1VKRmsrNzJGU0kxVHAwWmdWUlNNMENFb0Uyd2NECkhSMkdZcHhOWmI4dTlsNTJWOUZyNDM4Q2dZRUF5cE02K1Uydm1NVmtUcmU4bHRVVnNGVWxVb1BLSnRWNDdQSncKWm53RzhXU1dMcit3N2dkazJ5TUJmelp6UWNKSXMrcFFCVGtwWUUyZzRrczBNaWdiSml2cEIyNTU0UkZ6WG1TRwphWmVTODhNeVU2cVZud004Z2hkMThtQVV5aDJFWE03WkNJNWltT2VKNXlBb1JuWmxEdUlhbWFlY1A2Q2lzeFJxCndYMTl1TWtDZ1lBaE1Dc2t3aWplbUtGcUd3SnBkeUJ5bWRsemhZcEhaYlN5cm96bEZ3bUpFeHhWVlViVTRSaUEKY1lQOUx4bFZFQ0dETnBCK3NXdnFBdmtEKzRyelRpMDk5OHhWYW93QkNzMVZ1VU9ZMUs4T0FWU3hBVys0dWh0dQpZUWtkN1dnUHB1RS9ybkhIdmNnV29nRnpSQVB0ZVFHRzNpM1dNODdPOVFsSk5PcXVGbDFWSGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUkrYUVCL0EzcmRkK0VDak5VYzhsYlF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3T0RFeE1EWTBNekl6V2hjTk1qTXdPREV4TURZME16SXpXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxwdU53cFZ2dEcvUkVoUXpCM1JiK1BvWU9iVTVOck5iSUJKTU4vNjlWY3FucnYweWQ0SQpjUllyWVIwMjJ5NE9UODk5THVtOHpiVGZDOGVPTXlnaFZ0akFwb0xzcWdtMkkwV3FIcVNtQ0NuR3l6cnJLbzNrCnNCODdsTmJDV1k2ekcvV0J4NFRpbFdsTzBiSDB5elM3NmRrR0d0eW1YNlFwLzdYV2kvMEUzblRhaWxYVHZ0M1kKcFpNTDhZREFQdjJtR1FHU0hhUkQxNG9LRTJDa2tEVm5mU0g4UU5Vd0sydys5cEY1aW82Q0oyTXRIeWhIZmF5NwpaUnBXK0hxLzYxVFhVTTVYR0hPNlpoZ0dLeWEzbnlseXhLa3lFR1QxUFZkMWtXUEhyQ0lXWjZoelArb3dZNzJXCm1NRklwbXJTNExDa0RTSVRBdW03RnpoMGZ0c2dJYmErUk9jQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBNVgvRnMwbXF0R1c4SjVhMVViTVFrTHpuazIzbzZCWkxhMnlydjBxbTYKSCtrdW5UWkVzMnAzUGR0SDJYeXVhVytrRDFmbmRyR2haRHErRkt2Qnc4ZDlmUERLMXBiVHU1RnprS1lrUU9CbwptajJtZVdJUjdMUlJ1UWFIbnJTd1BUQzNlbWtWRVpQMjBiaUNSclhpV3RLdWtaeEZyTmdrbXZwY0d1VWZPWlBUCkNmU0s1NzM4VXpUSVIzWWxHOXExdnVBbVcyQXNrYXNIbTE3M0ZLN2x2R3NwaE8wVTdRY3JFeEJiVmd0SUZ0Qk0KM0tJYktBZmg5VUs2aW1DNGpsazRlVFBicTZSTHlmNFJoK3Rwb3pWeTlmK295cDZ5eEVlUWwvMk5jNU1mQmxyOQp3MWtDUTczN2k0R1QzMXZmRDJST25JOU9ZZFMrV1VDSWs0dnlVL1l6eVdBawotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdW00M0NsVyswYjlFU0ZETUhkRnY0K2hnNXRUazJzMXNnRWt3My9yMVZ5cWV1L1RKCjNnaHhGaXRoSFRiYkxnNVB6MzB1NmJ6TnROOEx4NDR6S0NGVzJNQ21ndXlxQ2JZalJhb2VwS1lJS2NiTE91c3EKamVTd0h6dVUxc0paanJNYjlZSEhoT0tWYVU3UnNmVExOTHZwMlFZYTNLWmZwQ24vdGRhTC9RVGVkTnFLVmRPKwozZGlsa3d2eGdNQSsvYVlaQVpJZHBFUFhpZ29UWUtTUU5XZDlJZnhBMVRBcmJENzJrWG1Lam9Jbll5MGZLRWQ5CnJMdGxHbGI0ZXIvclZOZFF6bGNZYzdwbUdBWXJKcmVmS1hMRXFUSVFaUFU5VjNXUlk4ZXNJaFpucUhNLzZqQmoKdlphWXdVaW1hdExnc0tRTkloTUM2YnNYT0hSKzJ5QWh0cjVFNXdJREFRQUJBb0lCQUc4a0VaQUp1aTZVMWdJKwptTkVWOEp4d0JvVFdXbkRPa21hUU82RHJuYU9QZHY0YVd0WVJOa20vSnJBaDZkeTFENE5rMzdqY284MjJRdkYrCnBxUy82MlJneFdPNzcwckcySlJKYk9jL1RCS0x2dENyTGIxVm5tR2dSWVVhYkFXVVpaQ2hBKzhHbllnZ1F3YlMKSnVxVE5ELzdVYnhGT3pORkRucTdJczErUDVodFFzNlA2U1NFTEpMNG1hK3l2NGdETFIyZm5QbUZIZCtia0xlSwozb3Y5aE1nVjBRRHZCbVVVaFlnZS9icHJCc2ZMd2QxaXRlcHQxNXRGT1RpVWs2NnI1WlFkZlhDY1BmTGd3bExCCkc0MlZLSFovNkxEaTR2Q2U4cXpoVW9KYzExaFlnQnZWYks5WVk1MEJTL21tNllvZmROWjlvMmFKNDk5cjF6R1cKR1FHKzBTRUNnWUVBeGFvWlArZXU5OU1FZmVPU0FVRVV4Zy9udlJiOVhaSnBMazQ0N3RQd2lRbkRSVTUxZXZzVAo0dHhjeWxhYStBNFJNdlVPcURqVTNnUEdKN0lmckVjY3JJMXJZbkZFb2xXSVBiR0xCMWRTOWMzejhBYTJHdkVLCitLdFNTWVYvQ1B4MFlNUHRybXMydmdwQVluRTJGZWU0YjFvVlBiNDZNQTRRcWtnNWtkdzcrKzhDZ1lFQThYTmYKcC8xU2k0b1ZJT3ZseWxoSk52SjVKdXhTcmsxN0gvOFgvdWM1UngyS0J5SFNzRFNiQTEvMFk3Q29aSHJMYkQwTAo5OHJxekxGa1g5WHhENml1ZmU5MzE1OVo4L0Exb2w3OTMzSk1Vd2hTQXZTK1d4Uy9yVUczamdRMjJ4RWN3cThUCmwvTDZlR0dpM2tBU0R1SVRLUFFMemxlUTdXVVRHZnJndWZrWXJva0NnWUVBcHlSTGo0OGdrNnlhMnJ5cEJHaDgKNFhJbm1ld3J1SWtLYWI1NVEvSnhMZC9VZi9GMVE5VzFuaHFLV0FwZHBpMTIrNmplaVA3dGVRS2w5NEVXYVQ0RQprQ0JSVW4vRzhxSHl2NEEydUxGdGxDNWYvSElnWUsyOGdrT1VKRmsrNzJGU0kxVHAwWmdWUlNNMENFb0Uyd2NECkhSMkdZcHhOWmI4dTlsNTJWOUZyNDM4Q2dZRUF5cE02K1Uydm1NVmtUcmU4bHRVVnNGVWxVb1BLSnRWNDdQSncKWm53RzhXU1dMcit3N2dkazJ5TUJmelp6UWNKSXMrcFFCVGtwWUUyZzRrczBNaWdiSml2cEIyNTU0UkZ6WG1TRwphWmVTODhNeVU2cVZud004Z2hkMThtQVV5aDJFWE03WkNJNWltT2VKNXlBb1JuWmxEdUlhbWFlY1A2Q2lzeFJxCndYMTl1TWtDZ1lBaE1Dc2t3aWplbUtGcUd3SnBkeUJ5bWRsemhZcEhaYlN5cm96bEZ3bUpFeHhWVlViVTRSaUEKY1lQOUx4bFZFQ0dETnBCK3NXdnFBdmtEKzRyelRpMDk5OHhWYW93QkNzMVZ1VU9ZMUs4T0FWU3hBVys0dWh0dQpZUWtkN1dnUHB1RS9ybkhIdmNnV29nRnpSQVB0ZVFHRzNpM1dNODdPOVFsSk5PcXVGbDFWSGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-sp-validator-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-sp-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-sp-validator-k8s-tls.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "type": "kubernetes.io/tls",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"heartbeat\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-heartbeat\\",\\"namespace\\":\\"linkerd\\"}}
",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-heartbeat.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "config.linkerd.io/opaque-ports": "443",
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"config.linkerd.io/opaque-ports\\":\\"443\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"proxy-injector\\",\\"port\\":443,\\"targetPort\\":\\"proxy-injector\\"}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-proxy-injector",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-identity-headless\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"grpc\\",\\"port\\":8080,\\"targetPort\\":8080}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"identity\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-identity-headless",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-identity-headless.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-linkerd-destination\\"},\\"rules\\":[{\\"apiGroups\\":[\\"apps\\"],\\"resources\\":[\\"replicasets\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"batch\\"],\\"resources\\":[\\"jobs\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"pods\\",\\"endpoints\\",\\"services\\",\\"nodes\\",\\"namespaces\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"linkerd.io\\"],\\"resources\\":[\\"serviceprofiles\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"split.smi-spec.io\\"],\\"resources\\":[\\"trafficsplits\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]}]}
",
      },
      "name": "linkerd-linkerd-destination",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-destination.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQUpxemFWRDJFQjluK3hzS3ZxSHV1MzB3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa2JHbHVhMlZ5WkMxd2IyeHBZM2t0ZG1Gc2FXUmhkRzl5TG14cGJtdGxjbVF1YzNaagpNQjRYRFRJeU1EZ3hNVEEyTkRNeU0xb1hEVEl6TURneE1UQTJORE15TTFvd0x6RXRNQ3NHQTFVRUF4TWtiR2x1CmEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeAp3MTRGRzA0di9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLCm9lTXdnN0IzV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnMKUnJqY1lpeXphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWApnWUFEUGloT1JVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrCkRuck5yUFFTaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJvM0F3YmpBT0JnTlYKSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdMd1lEVlIwUkJDZ3dKb0lrYkdsdWEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwCmJtdGxjbVF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ3VvelhFMWJZMkR1VHZLdzcya1NoQVE0c2YKeiszZGlYdEhSbGpiYjNKZWIyNFRWOUVqZ1RybmhsYlpFaG8rcFA5ME5kQlIvQTRvVHdXQjdVUFFienp5eHQ5aApCcHZmVXQ1N1pyQ3hQdGs5RXJVdXR2T3EvU2NqNkNDd1VBUjZ4b2pybnJWQzNqY3ZIZEp0TXBNNlA3QnlQVUtxCjZ6c1dVcVExT0p6Tjg0czV6TDRoMG9YZDA5T0RXOC8rNWRFUVBOY1JXM2pHallvdHFoUnYzVm5aSVVYejZlTVcKaXVveFlrTDZNc2NyNHhGZkROOXBDVnkyVWIvV0JUSGVQd2ZHOGduaTVlR3ErMjNUWGFCbm1xd2V2aFNZcXQ5eQpOcm9rMzVVZlFHamI2WUFRUVdyQlRxa1diSDZ2WVpYVUYrZGEwL2JrVnFwbDNDZGpJdHhHaWV4bnUxS1oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeHcxNEZHMDR2Ci9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLb2VNd2c3QjMKV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnNScmpjWWl5egphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWGdZQURQaWhPClJVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrRG5yTnJQUVMKaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJBb0lCQVFDcEorTEtuVmZHRGJWNAozbCtTWjE1aGRYQ3hTSUNEaUFsUGRwN3F2SHg3OGI4NkRiWW5qeTR2eUYwY09tY3lOK0xxM2NjU29FT0pTMXc2CndNeDJYempnbUdOWDVYalZ6RkhtNDNGZmpSZ2RkVWUzRDV3cU9wMEpMVit2cXBrZDl4V1AzdlRFUlhxQVU2Z2oKNkdteVIrQ2FlenZ1T09jN3M2WW9xaCs0cmZWTDNKU1F3ajZxQTZTbnAybERydmhsSXZ3ZFRNaEs2dnh5Y2xLego1a1o1ZkxUeWtZamxydW1kNEhkWU1BdDE5S2doRXBkYkEwRVlsT2hGRisxcDRjOWRtT3FLTW5oVmhHdVR0L010ClZxT09UN0pPU2tZRUpsWlUrZXBYSjVpeTV0bDA5UFpYOGRGSUZrVjNLSlN2c3NxdThnM0d6R2hUajZrVzFYU2wKT2tuMG9LZUpBb0dCQVAyNXUxQ3l3anJpc1Z5bThNMlRiNGxEejZ6YlVZVmJUc1VNL2lCRGJyYTFoYVlGM0ZqZQpzdEVuWXFHK3JtQ3B0dnhMT3Z6VUhKVyttSzJUY2o5VTNDeG1uYmpyWFd6QkNZWVBCbHExQWNvOW9NYy9UclE5ClhUS3BLSDNOcEdJZTBSYXFscDhrLzlnUm5nbEIyZzVSQ0U5LzVtQm5Tc2Z2STZzaDNCUlpWQkp2QW9HQkFOQXQKUm12blpTUHpLby9lcjNlajVWZGZCN1ZzWEhHRmVCWlVRRkwvL3Bia2gxY2FGQVBpUlJLUC9zaVlYcXBXVkNHZApBbThsSmNnRHpvcGw0NFZwQ0xUVDVvWktxUExDK2IzSDVkQVpRV1VXdm5oOEIxejNYemNDZlpybkpJT0FoZEp1CkE4dC9XQ0p6Vms5U1BHSEJyVHgvbnZyRUR0MGhSbGtPKzBTTWphRVBBb0dBSmpVcTVQc1dUcUhHamFwQ0J1TVYKMzdqTGREOU9wbU5hbUVmZG1PUXVydXJrNWx4cGt5UnVEeHI4T2xrcGp6cmZhRnkzMUV6b3hRLy9rOXZwVDJvcgpBYkN1UGFPTDNRMndyblJpdzVRUVlmRW4zZmxGazlUTnpRdzJJY091NW11M2xzODNnVjJqL1ZpaDBNa08yaXNQCnNsRVRVeDhhM3NLL1AwMEpCRE56ZXBjQ2dZRUFoTS9OdEx1Y3NCSEwzcHVRVUlEVXFTZ3NqOWRCSnYraXZJUWwKd1k0bWkzZml6SFFMdnVxVmJLRkhTQXpGb0dDUkxoeXdWOTVZTzBJS2ZBdEMyM05HSmE5bXk5aEg3eERyS2VPbApQMTFOZGtQTFlxeW1PZTVyNVhtR1R0UVdYSHNiWlVQZzBldzllMFVnRkZ6L3Z0SkVSbXVaTHB6MGFxbDI2d3grCnk1M3NJWXNDZ1lFQTJJVFVlZFQvdElucTJpTXNrR2s2ZExxWnZNWDFsVG4rb0o3ZUZFR2xkUGxuVGlzTFBvZ1AKVWRyTzU4Z2xPRHU2Mk9Qbm05YTJlVEJqTHhHa2o0bGdBK0xGT3g2R2U3V2NnR2MvTmt3UWNOTWUvNHFiUThPKwo4QTkxZGRqdzl1NXVZVFN5a0VqVHpxR2FOeVViQi8waHhheXZXY3BCUm1sZXFNOU0zc09LODRFPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQUpxemFWRDJFQjluK3hzS3ZxSHV1MzB3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa2JHbHVhMlZ5WkMxd2IyeHBZM2t0ZG1Gc2FXUmhkRzl5TG14cGJtdGxjbVF1YzNaagpNQjRYRFRJeU1EZ3hNVEEyTkRNeU0xb1hEVEl6TURneE1UQTJORE15TTFvd0x6RXRNQ3NHQTFVRUF4TWtiR2x1CmEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeAp3MTRGRzA0di9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLCm9lTXdnN0IzV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnMKUnJqY1lpeXphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWApnWUFEUGloT1JVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrCkRuck5yUFFTaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJvM0F3YmpBT0JnTlYKSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdMd1lEVlIwUkJDZ3dKb0lrYkdsdWEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwCmJtdGxjbVF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ3VvelhFMWJZMkR1VHZLdzcya1NoQVE0c2YKeiszZGlYdEhSbGpiYjNKZWIyNFRWOUVqZ1RybmhsYlpFaG8rcFA5ME5kQlIvQTRvVHdXQjdVUFFienp5eHQ5aApCcHZmVXQ1N1pyQ3hQdGs5RXJVdXR2T3EvU2NqNkNDd1VBUjZ4b2pybnJWQzNqY3ZIZEp0TXBNNlA3QnlQVUtxCjZ6c1dVcVExT0p6Tjg0czV6TDRoMG9YZDA5T0RXOC8rNWRFUVBOY1JXM2pHallvdHFoUnYzVm5aSVVYejZlTVcKaXVveFlrTDZNc2NyNHhGZkROOXBDVnkyVWIvV0JUSGVQd2ZHOGduaTVlR3ErMjNUWGFCbm1xd2V2aFNZcXQ5eQpOcm9rMzVVZlFHamI2WUFRUVdyQlRxa1diSDZ2WVpYVUYrZGEwL2JrVnFwbDNDZGpJdHhHaWV4bnUxS1oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeHcxNEZHMDR2Ci9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLb2VNd2c3QjMKV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnNScmpjWWl5egphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWGdZQURQaWhPClJVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrRG5yTnJQUVMKaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJBb0lCQVFDcEorTEtuVmZHRGJWNAozbCtTWjE1aGRYQ3hTSUNEaUFsUGRwN3F2SHg3OGI4NkRiWW5qeTR2eUYwY09tY3lOK0xxM2NjU29FT0pTMXc2CndNeDJYempnbUdOWDVYalZ6RkhtNDNGZmpSZ2RkVWUzRDV3cU9wMEpMVit2cXBrZDl4V1AzdlRFUlhxQVU2Z2oKNkdteVIrQ2FlenZ1T09jN3M2WW9xaCs0cmZWTDNKU1F3ajZxQTZTbnAybERydmhsSXZ3ZFRNaEs2dnh5Y2xLego1a1o1ZkxUeWtZamxydW1kNEhkWU1BdDE5S2doRXBkYkEwRVlsT2hGRisxcDRjOWRtT3FLTW5oVmhHdVR0L010ClZxT09UN0pPU2tZRUpsWlUrZXBYSjVpeTV0bDA5UFpYOGRGSUZrVjNLSlN2c3NxdThnM0d6R2hUajZrVzFYU2wKT2tuMG9LZUpBb0dCQVAyNXUxQ3l3anJpc1Z5bThNMlRiNGxEejZ6YlVZVmJUc1VNL2lCRGJyYTFoYVlGM0ZqZQpzdEVuWXFHK3JtQ3B0dnhMT3Z6VUhKVyttSzJUY2o5VTNDeG1uYmpyWFd6QkNZWVBCbHExQWNvOW9NYy9UclE5ClhUS3BLSDNOcEdJZTBSYXFscDhrLzlnUm5nbEIyZzVSQ0U5LzVtQm5Tc2Z2STZzaDNCUlpWQkp2QW9HQkFOQXQKUm12blpTUHpLby9lcjNlajVWZGZCN1ZzWEhHRmVCWlVRRkwvL3Bia2gxY2FGQVBpUlJLUC9zaVlYcXBXVkNHZApBbThsSmNnRHpvcGw0NFZwQ0xUVDVvWktxUExDK2IzSDVkQVpRV1VXdm5oOEIxejNYemNDZlpybkpJT0FoZEp1CkE4dC9XQ0p6Vms5U1BHSEJyVHgvbnZyRUR0MGhSbGtPKzBTTWphRVBBb0dBSmpVcTVQc1dUcUhHamFwQ0J1TVYKMzdqTGREOU9wbU5hbUVmZG1PUXVydXJrNWx4cGt5UnVEeHI4T2xrcGp6cmZhRnkzMUV6b3hRLy9rOXZwVDJvcgpBYkN1UGFPTDNRMndyblJpdzVRUVlmRW4zZmxGazlUTnpRdzJJY091NW11M2xzODNnVjJqL1ZpaDBNa08yaXNQCnNsRVRVeDhhM3NLL1AwMEpCRE56ZXBjQ2dZRUFoTS9OdEx1Y3NCSEwzcHVRVUlEVXFTZ3NqOWRCSnYraXZJUWwKd1k0bWkzZml6SFFMdnVxVmJLRkhTQXpGb0dDUkxoeXdWOTVZTzBJS2ZBdEMyM05HSmE5bXk5aEg3eERyS2VPbApQMTFOZGtQTFlxeW1PZTVyNVhtR1R0UVdYSHNiWlVQZzBldzllMFVnRkZ6L3Z0SkVSbXVaTHB6MGFxbDI2d3grCnk1M3NJWXNDZ1lFQTJJVFVlZFQvdElucTJpTXNrR2s2ZExxWnZNWDFsVG4rb0o3ZUZFR2xkUGxuVGlzTFBvZ1AKVWRyTzU4Z2xPRHU2Mk9Qbm05YTJlVEJqTHhHa2o0bGdBK0xGT3g2R2U3V2NnR2MvTmt3UWNOTWUvNHFiUThPKwo4QTkxZGRqdzl1NXVZVFN5a0VqVHpxR2FOeVViQi8waHhheXZXY3BCUm1sZXFNOU0zc09LODRFPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy-validator-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-policy-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-policy-validator-k8s-tls.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "type": "kubernetes.io/tls",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-heartbeat\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"linkerd.io\\"],\\"resources\\":[\\"serviceprofiles\\"],\\"verbs\\":[\\"list\\"]}]}
",
      },
      "name": "linkerd-heartbeat",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-heartbeat.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-dst\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"grpc\\",\\"port\\":8086,\\"targetPort\\":8086}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-dst",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-dst.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-linkerd-proxy-injector\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\",\\"replicationcontrollers\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"pods\\"],\\"verbs\\":[\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"extensions\\",\\"apps\\"],\\"resources\\":[\\"deployments\\",\\"replicasets\\",\\"daemonsets\\",\\"statefulsets\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"extensions\\",\\"batch\\"],\\"resources\\":[\\"cronjobs\\",\\"jobs\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]}]}
",
      },
      "name": "linkerd-linkerd-proxy-injector",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-destination-policy\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-policy\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"linkerd-destination\\",\\"namespace\\":\\"linkerd\\"}]}
",
      },
      "name": "linkerd-destination-policy",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-destination-policy.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"destination\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-destination\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-destination\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/config\\":\\"57f3ff6f5e13221b17df161b5575fa043a6a89b6cb522983674b6a476513f8a0\\",\\"config.linkerd.io/default-inbound-policy\\":\\"all-unauthenticated\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\",\\"linkerd.io/identity-mode\\":\\"default\\",\\"linkerd.io/proxy-version\\":\\"stable-2.11.2\\"},\\"labels\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-destination\\",\\"linkerd.io/workload-ns\\":\\"linkerd\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"_pod_name\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"_pod_ns\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}},{\\"name\\":\\"_pod_nodeName\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.nodeName\\"}}},{\\"name\\":\\"LINKERD2_PROXY_LOG\\",\\"value\\":\\"warn,linkerd=info\\"},{\\"name\\":\\"LINKERD2_PROXY_LOG_FORMAT\\",\\"value\\":\\"plain\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_ADDR\\",\\"value\\":\\"localhost.:8086\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_ADDR\\",\\"value\\":\\"localhost.:8090\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_WORKLOAD\\",\\"value\\":\\"$(_pod_ns):$(_pod_name)\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY\\",\\"value\\":\\"all-unauthenticated\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"100ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"1000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_CONTROL_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4190\\"},{\\"name\\":\\"LINKERD2_PROXY_ADMIN_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4191\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR\\",\\"value\\":\\"127.0.0.1:4140\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4143\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_IPS\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"status.podIPs\\"}}},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS\\",\\"value\\":\\"8086,8090,8443,9443,9990,9996,9997\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES\\",\\"value\\":\\"svc.cluster.local.\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION\\",\\"value\\":\\"25,587,3306,4444,5432,6379,9300,11211\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_CONTEXT\\",\\"value\\":\\"{\\\\\\"ns\\\\\\":\\\\\\"$(_pod_ns)\\\\\\", \\\\\\"nodeName\\\\\\":\\\\\\"$(_pod_nodeName)\\\\\\"}\\\\n\\"},{\\"name\\":\\"_pod_sa\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.serviceAccountName\\"}}},{\\"name\\":\\"_l5d_ns\\",\\"value\\":\\"linkerd\\"},{\\"name\\":\\"_l5d_trustdomain\\",\\"value\\":\\"cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_DIR\\",\\"value\\":\\"/var/run/linkerd/identity/end-entity\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS\\",\\"valueFrom\\":{\\"configMapKeyRef\\":{\\"key\\":\\"ca-bundle.crt\\",\\"name\\":\\"linkerd-identity-trust-roots\\"}}},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TOKEN_FILE\\",\\"value\\":\\"/var/run/secrets/kubernetes.io/serviceaccount/token\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_ADDR\\",\\"value\\":\\"linkerd-identity-headless.linkerd.svc.cluster.local.:8080\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_LOCAL_NAME\\",\\"value\\":\\"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_NAME\\",\\"value\\":\\"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"}],\\"image\\":\\"cr.l5d.io/linkerd/proxy:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"lifecycle\\":{\\"postStart\\":{\\"exec\\":{\\"command\\":[\\"/usr/lib/linkerd/linkerd-await\\",\\"--timeout=2m\\"]}}},\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/live\\",\\"port\\":4191},\\"initialDelaySeconds\\":10},\\"name\\":\\"linkerd-proxy\\",\\"ports\\":[{\\"containerPort\\":4143,\\"name\\":\\"linkerd-proxy\\"},{\\"containerPort\\":4191,\\"name\\":\\"linkerd-admin\\"}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":4191},\\"initialDelaySeconds\\":2},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsUser\\":2102},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/identity/end-entity\\",\\"name\\":\\"linkerd-identity-end-entity\\"}]},{\\"args\\":[\\"destination\\",\\"-addr=:8086\\",\\"-controller-namespace=linkerd\\",\\"-enable-h2-upgrade=true\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-enable-endpoint-slices=false\\",\\"-cluster-domain=cluster.local\\",\\"-identity-trust-domain=cluster.local\\",\\"-default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9996},\\"initialDelaySeconds\\":10},\\"name\\":\\"destination\\",\\"ports\\":[{\\"containerPort\\":8086,\\"name\\":\\"grpc\\"},{\\"containerPort\\":9996,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9996}},\\"securityContext\\":{\\"runAsUser\\":2103}},{\\"args\\":[\\"sp-validator\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9997},\\"initialDelaySeconds\\":10},\\"name\\":\\"sp-validator\\",\\"ports\\":[{\\"containerPort\\":8443,\\"name\\":\\"sp-validator\\"},{\\"containerPort\\":9997,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9997}},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/tls\\",\\"name\\":\\"sp-tls\\",\\"readOnly\\":true}]},{\\"args\\":[\\"--admin-addr=0.0.0.0:9990\\",\\"--control-plane-namespace=linkerd\\",\\"--grpc-addr=0.0.0.0:8090\\",\\"--server-addr=0.0.0.0:9443\\",\\"--server-tls-key=/var/run/linkerd/tls/tls.key\\",\\"--server-tls-certs=/var/run/linkerd/tls/tls.crt\\",\\"--cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\",\\"--identity-domain=cluster.local\\",\\"--default-policy=all-unauthenticated\\",\\"--log-level=linkerd=info,warn\\",\\"--log-format=plain\\"],\\"image\\":\\"cr.l5d.io/linkerd/policy-controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/live\\",\\"port\\":\\"admin\\"}},\\"name\\":\\"policy\\",\\"ports\\":[{\\"containerPort\\":8090,\\"name\\":\\"grpc\\"},{\\"containerPort\\":9990,\\"name\\":\\"admin\\"},{\\"containerPort\\":9443,\\"name\\":\\"policy-https\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":\\"admin\\"},\\"initialDelaySeconds\\":10},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/tls\\",\\"name\\":\\"policy-tls\\",\\"readOnly\\":true}]}],\\"initContainers\\":[{\\"args\\":[\\"--incoming-proxy-port\\",\\"4143\\",\\"--outgoing-proxy-port\\",\\"4140\\",\\"--proxy-uid\\",\\"2102\\",\\"--inbound-ports-to-ignore\\",\\"4190,4191,4567,4568\\",\\"--outbound-ports-to-ignore\\",\\"443\\"],\\"image\\":\\"cr.l5d.io/linkerd/proxy-init:v1.5.3\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"linkerd-init\\",\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"50Mi\\"},\\"requests\\":{\\"cpu\\":\\"10m\\",\\"memory\\":\\"10Mi\\"}},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":true,\\"capabilities\\":{\\"add\\":[\\"NET_ADMIN\\",\\"NET_RAW\\"]},\\"privileged\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsNonRoot\\":false,\\"runAsUser\\":0},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/run\\",\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"linkerd-destination\\",\\"volumes\\":[{\\"name\\":\\"sp-tls\\",\\"secret\\":{\\"secretName\\":\\"linkerd-sp-validator-k8s-tls\\"}},{\\"name\\":\\"policy-tls\\",\\"secret\\":{\\"secretName\\":\\"linkerd-policy-validator-k8s-tls\\"}},{\\"emptyDir\\":{},\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"},{\\"emptyDir\\":{\\"medium\\":\\"Memory\\"},\\"name\\":\\"linkerd-identity-end-entity\\"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-destination",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-destination.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/config": "57f3ff6f5e13221b17df161b5575fa043a6a89b6cb522983674b6a476513f8a0",
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
            "linkerd.io/identity-mode": "default",
            "linkerd.io/proxy-version": "stable-2.11.2",
          },
          "labels": Object {
            "linkerd.io/control-plane-component": "destination",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-destination",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "_pod_name",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "_pod_ns",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                Object {
                  "name": "_pod_nodeName",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "localhost.:8086",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "localhost.:8090",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                Object {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8086,8090,8443,9443,9990,9996,9997",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}
",
                },
                Object {
                  "name": "_pod_sa",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                Object {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                Object {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": Object {
                    "configMapKeyRef": Object {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "linkerd-identity-headless.linkerd.svc.cluster.local.:8080",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": Object {
                "postStart": Object {
                  "exec": Object {
                    "command": Array [
                      "/usr/lib/linkerd/linkerd-await",
                      "--timeout=2m",
                    ],
                  },
                },
              },
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": Array [
                Object {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                Object {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
              ],
            },
            Object {
              "args": Array [
                "destination",
                "-addr=:8086",
                "-controller-namespace=linkerd",
                "-enable-h2-upgrade=true",
                "-log-level=info",
                "-log-format=plain",
                "-enable-endpoint-slices=false",
                "-cluster-domain=cluster.local",
                "-identity-trust-domain=cluster.local",
                "-default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9996,
                },
                "initialDelaySeconds": 10,
              },
              "name": "destination",
              "ports": Array [
                Object {
                  "containerPort": 8086,
                  "name": "grpc",
                },
                Object {
                  "containerPort": 9996,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9996,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
            },
            Object {
              "args": Array [
                "sp-validator",
                "-log-level=info",
                "-log-format=plain",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9997,
                },
                "initialDelaySeconds": 10,
              },
              "name": "sp-validator",
              "ports": Array [
                Object {
                  "containerPort": 8443,
                  "name": "sp-validator",
                },
                Object {
                  "containerPort": 9997,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9997,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "sp-tls",
                  "readOnly": true,
                },
              ],
            },
            Object {
              "args": Array [
                "--admin-addr=0.0.0.0:9990",
                "--control-plane-namespace=linkerd",
                "--grpc-addr=0.0.0.0:8090",
                "--server-addr=0.0.0.0:9443",
                "--server-tls-key=/var/run/linkerd/tls/tls.key",
                "--server-tls-certs=/var/run/linkerd/tls/tls.crt",
                "--cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                "--identity-domain=cluster.local",
                "--default-policy=all-unauthenticated",
                "--log-level=linkerd=info,warn",
                "--log-format=plain",
              ],
              "image": "cr.l5d.io/linkerd/policy-controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/live",
                  "port": "admin",
                },
              },
              "name": "policy",
              "ports": Array [
                Object {
                  "containerPort": 8090,
                  "name": "grpc",
                },
                Object {
                  "containerPort": 9990,
                  "name": "admin",
                },
                Object {
                  "containerPort": 9443,
                  "name": "policy-https",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": "admin",
                },
                "initialDelaySeconds": 10,
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "policy-tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "443",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v1.5.3",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": Object {
                "limits": Object {
                  "cpu": "100m",
                  "memory": "50Mi",
                },
                "requests": Object {
                  "cpu": "10m",
                  "memory": "10Mi",
                },
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": true,
                "capabilities": Object {
                  "add": Array [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": false,
                "runAsUser": 0,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-destination",
          "volumes": Array [
            Object {
              "name": "sp-tls",
              "secret": Object {
                "secretName": "linkerd-sp-validator-k8s-tls",
              },
            },
            Object {
              "name": "policy-tls",
              "secret": Object {
                "secretName": "linkerd-policy-validator-k8s-tls",
              },
            },
            Object {
              "emptyDir": Object {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            Object {
              "emptyDir": Object {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"pods\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"policy.linkerd.io\\"],\\"resources\\":[\\"servers\\",\\"serverauthorizations\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]}]}
",
      },
      "name": "linkerd-policy",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-policy.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUxsUXVZVlBqeVo1N0dhcWgzWXFJM3d3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBNE1URXdOalF6TWpOYUZ3MHlNekE0TVRFd05qUXpNak5hTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRRGduL3ZacVo4NGdEVWhuRG9OdEQxYU1zZXBReFFhTnRDcWdWR3lIOFZSZm9ySwpXMTdRcko0M2lvd3JvVXUzaWpQY3JPZnlQdFZxOWZSMXNlSCtBenY1WlFpczRQYUlNUFZ1b1AxV3ArK3pPTVpyCmJydE01TzNIdUNCcmVXYTRaU2ZoeXRkNDhxMzhEdTVnQ1I4WFByKzUwQU5BN2FVaUYxaG9uK3MycUVMbHY3b0UKL01FblR5eUhIUWhzNWFkajVMdWR3bXpBTXI1cGo4ZGlXc2d4WThLc0owYU8zVGJIUmJXTkRZTU9MZFNzZ3pFKwoxRmsxdTdMSWljRG9GQm1oRENZZVZzTURLYTV4Znk4TVUrU1FxVEpKVHRiUXNBTzdiQU5KTW9mMnJEZUhTeTU3CnhSRFBTczZNTjU2MXNadVdHaHdJQmpzZHZCMU5UcXp3ZFo4ekhjNWpBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ0NHNaNlNnclRSK01xbExON3F3bW9kMXplTkF1dDh6Q3IKYkc3NEhpdktIZ1Zhb3JwOUp1SlJKU0VEUlVQLzdocmNMd0pjRUlMTllGZHhmalpKYllBMUFnSmZkdUt2WDM0Ygo1SC9hc05QRkVzSTdIOWw0cmY3TDVHbjJ6QWlBR1k4WFpKcXpxclE0eGIrdWE0V3p1VGQ2VHRoSm9pMU96UTBNCnh3UWRFbHVBWTNYVzJZV2VrYzJub0FiRlFvNCtQK3VVcHg1NE8wY0NCa0xCM2NuSmtzZ2RRejViektXVzFITUkKQmRQekN3c0xTK1dPK2doTWRWSkVuV3hWY1krNTZpRjNCM2FQWG9WL01RNU56WEs5c2FBNVZhYWJKbjVYd2FqRAplR1l4QlJvZ0R2ZTNnaWwwbERDbnVxMHZZZFp2aktDd2dwRUxhaVBWS1dnZmxYcVR1bFVWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNEovNzJhbWZPSUExSVp3NkRiUTlXakxIcVVNVUdqYlFxb0ZSc2gvRlVYNkt5bHRlCjBLeWVONHFNSzZGTHQ0b3ozS3puOGo3VmF2WDBkYkhoL2dNNytXVUlyT0QyaUREMWJxRDlWcWZ2c3pqR2EyNjcKVE9UdHg3Z2dhM2xtdUdVbjRjclhlUEt0L0E3dVlBa2ZGejYvdWRBRFFPMmxJaGRZYUovck5xaEM1Yis2QlB6QgpKMDhzaHgwSWJPV25ZK1M3bmNKc3dESythWS9IWWxySU1XUENyQ2RHanQwMngwVzFqUTJERGkzVXJJTXhQdFJaCk5idXl5SW5BNkJRWm9Rd21IbGJEQXltdWNYOHZERlBra0treVNVN1cwTEFEdTJ3RFNUS0g5cXczaDBzdWU4VVEKejByT2pEZWV0YkdibGhvY0NBWTdIYndkVFU2czhIV2ZNeDNPWXdJREFRQUJBb0lCQUFyYTBGSFpaNDlVYXJ6ZwpEdElndHFKSU4rdlBDUWFuUlhnbjNhbk03VDBkNzFrT0IwdndPNGtWa2VaOTJlblpyTjNxSVI5TXVBVitNejBJCnhwSCsyQVFhUk13TjV2djMyYlJwNVRRdDAyQ0d5dGZnTnY3bFJUUlVpb1NIRGxhMDFMT05tTklJY0MzeERzWG4KU3ZCVm9QQTZ4QjE4SG5IQ1RReHBSZldUTmdCaUowYzE4UmNxMUViR2wvQUZHckIrMTZCZEdWK2dpOTR6MDNHaQo5R0ZkZHNPQTdRdzFsSk9iaDZ3OVhqZFZOU0l6dC9FbSs4eEd3VHdpaC9IQkZVQ2hib1g3djhQMUZtT0wwN1B2CitBd2NBTWJiNDN2c2F0TFlJVDc0SDR6U2xWZ29raG5zVDlaellwRkV4WWxsTktFQ3pOVjlQQXdDWVBZYmJvc3gKYzFrQVdIRUNnWUVBL0ZxejFnSUVQT1Z2OEJ6YXJ5bFVIUnJWSEt6WTdyeWc5Q0VzZ2ZSRDhoRU5zN3l6aWtEQQpVaXI4U2czaXpONldzNldCMkxxTVBpWGlaMlc2ek8wZEFobTNUNVFtRkx6NGdSMUt0OURGZmVaSTlyeTAwNExDCjFtU01uMlJHRlFtTHBoL3U0Mk5KeWN2RGp1TjRUajhua1hmNlhCenljWlVKdU1JWDUvQ1dueXNDZ1lFQTQ5NjYKWW5KK3k1eVlHZlhvOWxJMHlFa25OZjBNRnhKbllHNzdMNmtNdWt4a241VHJ4YytxdGU3TGxveS9aS1lxWmNOeApUYkpabkFLZlFvZUZIR00wOSs0aERDYnNJWFJUcHo1Y01UQm40SFBJVlUxTTJjb0EzMTJnU2ZzUlU2aXRmRnIrCnNjUURoZDc3Sm9XZFNwTGtLbGpwamVoQ3d3cWJaS2FsblRIbXNha0NnWUVBNC9JU1M1ZGF1SjhPODdjOG1jZ2QKSUlVaVIxcWlRVlBGbDM5M3NwTXY1TEllekdJQlV6cVYvaUt4N1RxSnlVQ3VvK3MyVk14ODdZNU82ZExzWHpzMwpYclJYN3R3Rlllb29Gb2ljKzFqcmE0UGVHSEh3YkxYS3hObmlZLyt4aGtNdkQ0bjh3UXpvbEEwb3dpTWFncU50ClhHc2hqSjdoS0ZQVmlqeFlWN3ZzY2kwQ2dZRUE0c0hsRmt5NzB1RU5GMkI0S0k4YnlXZktwbFlmYnVJNGoyVkIKZjJjcHJFYVRKNTdwbFJxWDFaNUJhSnE5WjJwWDdKYTJMTXhia2YybUFHMmR6K2NGY2VlOWFUdGVaZGc5MnNNYQp1VFJqV3ArOWJ1MlNtWFFFdEVLV1hLaUUwSXlkdjQ5SnZ4ckJLcm4va1pFTE9vZThtRXVNZDFQM0ErS05TbmJ2CmZlT0huNmtDZ1lFQXcrU3hManc3OWpFUjBWRzJrSTBaZkRCaXF6cEVjMmVyRkZOaFBnZGszSWtHSkZEZkF5S00KTEE4dEdWNDNkaEtpNWJtUytzeVMwYy8vQWJVTXBwbDVWb0tZekRhMjN4RkpPU1dEOXZYUkdXcXBMVVRwaXpEaQppVDdyQ253V253WHJ0YURBaUk5RE1zRU9mT2hKc1E0SGF0N0ZhQ2FLY0o1ak9SVDYzZ2Z6cXJRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUxsUXVZVlBqeVo1N0dhcWgzWXFJM3d3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBNE1URXdOalF6TWpOYUZ3MHlNekE0TVRFd05qUXpNak5hTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRRGduL3ZacVo4NGdEVWhuRG9OdEQxYU1zZXBReFFhTnRDcWdWR3lIOFZSZm9ySwpXMTdRcko0M2lvd3JvVXUzaWpQY3JPZnlQdFZxOWZSMXNlSCtBenY1WlFpczRQYUlNUFZ1b1AxV3ArK3pPTVpyCmJydE01TzNIdUNCcmVXYTRaU2ZoeXRkNDhxMzhEdTVnQ1I4WFByKzUwQU5BN2FVaUYxaG9uK3MycUVMbHY3b0UKL01FblR5eUhIUWhzNWFkajVMdWR3bXpBTXI1cGo4ZGlXc2d4WThLc0owYU8zVGJIUmJXTkRZTU9MZFNzZ3pFKwoxRmsxdTdMSWljRG9GQm1oRENZZVZzTURLYTV4Znk4TVUrU1FxVEpKVHRiUXNBTzdiQU5KTW9mMnJEZUhTeTU3CnhSRFBTczZNTjU2MXNadVdHaHdJQmpzZHZCMU5UcXp3ZFo4ekhjNWpBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ0NHNaNlNnclRSK01xbExON3F3bW9kMXplTkF1dDh6Q3IKYkc3NEhpdktIZ1Zhb3JwOUp1SlJKU0VEUlVQLzdocmNMd0pjRUlMTllGZHhmalpKYllBMUFnSmZkdUt2WDM0Ygo1SC9hc05QRkVzSTdIOWw0cmY3TDVHbjJ6QWlBR1k4WFpKcXpxclE0eGIrdWE0V3p1VGQ2VHRoSm9pMU96UTBNCnh3UWRFbHVBWTNYVzJZV2VrYzJub0FiRlFvNCtQK3VVcHg1NE8wY0NCa0xCM2NuSmtzZ2RRejViektXVzFITUkKQmRQekN3c0xTK1dPK2doTWRWSkVuV3hWY1krNTZpRjNCM2FQWG9WL01RNU56WEs5c2FBNVZhYWJKbjVYd2FqRAplR1l4QlJvZ0R2ZTNnaWwwbERDbnVxMHZZZFp2aktDd2dwRUxhaVBWS1dnZmxYcVR1bFVWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNEovNzJhbWZPSUExSVp3NkRiUTlXakxIcVVNVUdqYlFxb0ZSc2gvRlVYNkt5bHRlCjBLeWVONHFNSzZGTHQ0b3ozS3puOGo3VmF2WDBkYkhoL2dNNytXVUlyT0QyaUREMWJxRDlWcWZ2c3pqR2EyNjcKVE9UdHg3Z2dhM2xtdUdVbjRjclhlUEt0L0E3dVlBa2ZGejYvdWRBRFFPMmxJaGRZYUovck5xaEM1Yis2QlB6QgpKMDhzaHgwSWJPV25ZK1M3bmNKc3dESythWS9IWWxySU1XUENyQ2RHanQwMngwVzFqUTJERGkzVXJJTXhQdFJaCk5idXl5SW5BNkJRWm9Rd21IbGJEQXltdWNYOHZERlBra0treVNVN1cwTEFEdTJ3RFNUS0g5cXczaDBzdWU4VVEKejByT2pEZWV0YkdibGhvY0NBWTdIYndkVFU2czhIV2ZNeDNPWXdJREFRQUJBb0lCQUFyYTBGSFpaNDlVYXJ6ZwpEdElndHFKSU4rdlBDUWFuUlhnbjNhbk03VDBkNzFrT0IwdndPNGtWa2VaOTJlblpyTjNxSVI5TXVBVitNejBJCnhwSCsyQVFhUk13TjV2djMyYlJwNVRRdDAyQ0d5dGZnTnY3bFJUUlVpb1NIRGxhMDFMT05tTklJY0MzeERzWG4KU3ZCVm9QQTZ4QjE4SG5IQ1RReHBSZldUTmdCaUowYzE4UmNxMUViR2wvQUZHckIrMTZCZEdWK2dpOTR6MDNHaQo5R0ZkZHNPQTdRdzFsSk9iaDZ3OVhqZFZOU0l6dC9FbSs4eEd3VHdpaC9IQkZVQ2hib1g3djhQMUZtT0wwN1B2CitBd2NBTWJiNDN2c2F0TFlJVDc0SDR6U2xWZ29raG5zVDlaellwRkV4WWxsTktFQ3pOVjlQQXdDWVBZYmJvc3gKYzFrQVdIRUNnWUVBL0ZxejFnSUVQT1Z2OEJ6YXJ5bFVIUnJWSEt6WTdyeWc5Q0VzZ2ZSRDhoRU5zN3l6aWtEQQpVaXI4U2czaXpONldzNldCMkxxTVBpWGlaMlc2ek8wZEFobTNUNVFtRkx6NGdSMUt0OURGZmVaSTlyeTAwNExDCjFtU01uMlJHRlFtTHBoL3U0Mk5KeWN2RGp1TjRUajhua1hmNlhCenljWlVKdU1JWDUvQ1dueXNDZ1lFQTQ5NjYKWW5KK3k1eVlHZlhvOWxJMHlFa25OZjBNRnhKbllHNzdMNmtNdWt4a241VHJ4YytxdGU3TGxveS9aS1lxWmNOeApUYkpabkFLZlFvZUZIR00wOSs0aERDYnNJWFJUcHo1Y01UQm40SFBJVlUxTTJjb0EzMTJnU2ZzUlU2aXRmRnIrCnNjUURoZDc3Sm9XZFNwTGtLbGpwamVoQ3d3cWJaS2FsblRIbXNha0NnWUVBNC9JU1M1ZGF1SjhPODdjOG1jZ2QKSUlVaVIxcWlRVlBGbDM5M3NwTXY1TEllekdJQlV6cVYvaUt4N1RxSnlVQ3VvK3MyVk14ODdZNU82ZExzWHpzMwpYclJYN3R3Rlllb29Gb2ljKzFqcmE0UGVHSEh3YkxYS3hObmlZLyt4aGtNdkQ0bjh3UXpvbEEwb3dpTWFncU50ClhHc2hqSjdoS0ZQVmlqeFlWN3ZzY2kwQ2dZRUE0c0hsRmt5NzB1RU5GMkI0S0k4YnlXZktwbFlmYnVJNGoyVkIKZjJjcHJFYVRKNTdwbFJxWDFaNUJhSnE5WjJwWDdKYTJMTXhia2YybUFHMmR6K2NGY2VlOWFUdGVaZGc5MnNNYQp1VFJqV3ArOWJ1MlNtWFFFdEVLV1hLaUUwSXlkdjQ5SnZ4ckJLcm4va1pFTE9vZThtRXVNZDFQM0ErS05TbmJ2CmZlT0huNmtDZ1lFQXcrU3hManc3OWpFUjBWRzJrSTBaZkRCaXF6cEVjMmVyRkZOaFBnZGszSWtHSkZEZkF5S00KTEE4dEdWNDNkaEtpNWJtUytzeVMwYy8vQWJVTXBwbDVWb0tZekRhMjN4RkpPU1dEOXZYUkdXcXBMVVRwaXpEaQppVDdyQ253V253WHJ0YURBaUk5RE1zRU9mT2hKc1E0SGF0N0ZhQ2FLY0o1ak9SVDYzZ2Z6cXJRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-proxy-injector-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-proxy-injector-k8s-tls.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "type": "kubernetes.io/tls",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-heartbeat\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-heartbeat\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"linkerd-heartbeat\\",\\"namespace\\":\\"linkerd\\"}]}
",
      },
      "name": "linkerd-heartbeat",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-heartbeat.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector\\",\\"namespace\\":\\"linkerd\\"}}
",
      },
      "name": "linkerd-proxy-injector",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "batch/v1beta1",
    "kind": "CronJob",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"batch/v1beta1\\",\\"kind\\":\\"CronJob\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"heartbeat\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"linkerd.io/control-plane-component\\":\\"heartbeat\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-heartbeat\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"concurrencyPolicy\\":\\"Replace\\",\\"jobTemplate\\":{\\"spec\\":{\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"linkerd.io/control-plane-component\\":\\"heartbeat\\",\\"linkerd.io/workload-ns\\":\\"linkerd\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"heartbeat\\",\\"-controller-namespace=linkerd\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090\\"],\\"env\\":[{\\"name\\":\\"LINKERD_DISABLED\\",\\"value\\":\\"the heartbeat controller does not use the proxy\\"}],\\"image\\":\\"cr.l5d.io/linkerd/controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"heartbeat\\",\\"securityContext\\":{\\"runAsUser\\":2103}}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"restartPolicy\\":\\"Never\\",\\"serviceAccountName\\":\\"linkerd-heartbeat\\"}}}},\\"schedule\\":\\"53 06 * * *\\",\\"successfulJobsHistoryLimit\\":0}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/batch_v1beta1-cronjob-linkerd-linkerd-heartbeat.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-identity\\",\\"namespace\\":\\"linkerd\\"}}
",
      },
      "name": "linkerd-identity",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"disabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"disabled\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/is-control-plane\\":\\"true\\"},\\"name\\":\\"linkerd\\"}}
",
        "linkerd.io/inject": "disabled",
      },
      "name": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-namespace-default-linkerd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "values": "clusterDomain: cluster.local
clusterNetworks: 10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
cniEnabled: false
controlPlaneTracing: false
controlPlaneTracingNamespace: linkerd-jaeger
controllerImage: cr.l5d.io/linkerd/controller
controllerLogFormat: plain
controllerLogLevel: info
controllerReplicas: 1
controllerUID: 2103
debugContainer:
  image:
    name: cr.l5d.io/linkerd/debug
    pullPolicy: \\"\\"
    version: \\"\\"
disableHeartBeat: false
enableEndpointSlices: false
enableH2Upgrade: true
enablePSP: false
enablePprof: false
identity:
  externalCA: true
  issuer:
    clockSkewAllowance: 20s
    issuanceLifetime: 24h0m0s
    scheme: kubernetes.io/tls
    tls:
      crtPEM: \\"\\"
identityTrustAnchorsPEM: \\"\\"
identityTrustDomain: cluster.local
imagePullPolicy: IfNotPresent
imagePullSecrets: []
installNamespace: true
linkerdVersion: stable-2.11.2
namespace: linkerd
nodeSelector:
  kubernetes.io/os: linux
podAnnotations: {}
podLabels: {}
policyController:
  defaultAllowPolicy: all-unauthenticated
  image:
    name: cr.l5d.io/linkerd/policy-controller
    pullPolicy: \\"\\"
    version: \\"\\"
  logLevel: linkerd=info,warn
  resources:
    cpu:
      limit: \\"\\"
      request: \\"\\"
    memory:
      limit: \\"\\"
      request: \\"\\"
policyValidator:
  caBundle: \\"\\"
  crtPEM: \\"\\"
  externalSecret: false
  keyPEM: \\"\\"
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
profileValidator:
  caBundle: \\"\\"
  crtPEM: \\"\\"
  externalSecret: false
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
proxy:
  await: true
  cores: 0
  enableExternalProfiles: false
  image:
    name: cr.l5d.io/linkerd/proxy
    pullPolicy: \\"\\"
    version: \\"\\"
  inboundConnectTimeout: 100ms
  logFormat: plain
  logLevel: warn,linkerd=info
  opaquePorts: 25,587,3306,4444,5432,6379,9300,11211
  outboundConnectTimeout: 1000ms
  ports:
    admin: 4191
    control: 4190
    inbound: 4143
    outbound: 4140
  requireIdentityOnInboundPorts: \\"\\"
  resources:
    cpu:
      limit: \\"\\"
      request: \\"\\"
    memory:
      limit: \\"\\"
      request: \\"\\"
  uid: 2102
  waitBeforeExitSeconds: 0
proxyInit:
  closeWaitTimeoutSecs: 0
  ignoreInboundPorts: 4567,4568
  ignoreOutboundPorts: 4567,4568
  image:
    name: cr.l5d.io/linkerd/proxy-init
    pullPolicy: \\"\\"
    version: v1.5.3
  logFormat: \\"\\"
  logLevel: \\"\\"
  resources:
    cpu:
      limit: 100m
      request: 10m
    memory:
      limit: 50Mi
      request: 10Mi
  runAsRoot: true
  skipSubnets: \\"\\"
  xtMountPath:
    mountPath: /run
    name: linkerd-proxy-init-xtables-lock
proxyInjector:
  caBundle: \\"\\"
  crtPEM: \\"\\"
  externalSecret: false
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
webhookFailurePolicy: Ignore
",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"values\\":\\"clusterDomain: cluster.local\\\\nclusterNetworks: 10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\\\ncniEnabled: false\\\\ncontrolPlaneTracing: false\\\\ncontrolPlaneTracingNamespace: linkerd-jaeger\\\\ncontrollerImage: cr.l5d.io/linkerd/controller\\\\ncontrollerLogFormat: plain\\\\ncontrollerLogLevel: info\\\\ncontrollerReplicas: 1\\\\ncontrollerUID: 2103\\\\ndebugContainer:\\\\n  image:\\\\n    name: cr.l5d.io/linkerd/debug\\\\n    pullPolicy: \\\\\\"\\\\\\"\\\\n    version: \\\\\\"\\\\\\"\\\\ndisableHeartBeat: false\\\\nenableEndpointSlices: false\\\\nenableH2Upgrade: true\\\\nenablePSP: false\\\\nenablePprof: false\\\\nidentity:\\\\n  externalCA: true\\\\n  issuer:\\\\n    clockSkewAllowance: 20s\\\\n    issuanceLifetime: 24h0m0s\\\\n    scheme: kubernetes.io/tls\\\\n    tls:\\\\n      crtPEM: \\\\\\"\\\\\\"\\\\nidentityTrustAnchorsPEM: \\\\\\"\\\\\\"\\\\nidentityTrustDomain: cluster.local\\\\nimagePullPolicy: IfNotPresent\\\\nimagePullSecrets: []\\\\ninstallNamespace: true\\\\nlinkerdVersion: stable-2.11.2\\\\nnamespace: linkerd\\\\nnodeSelector:\\\\n  kubernetes.io/os: linux\\\\npodAnnotations: {}\\\\npodLabels: {}\\\\npolicyController:\\\\n  defaultAllowPolicy: all-unauthenticated\\\\n  image:\\\\n    name: cr.l5d.io/linkerd/policy-controller\\\\n    pullPolicy: \\\\\\"\\\\\\"\\\\n    version: \\\\\\"\\\\\\"\\\\n  logLevel: linkerd=info,warn\\\\n  resources:\\\\n    cpu:\\\\n      limit: \\\\\\"\\\\\\"\\\\n      request: \\\\\\"\\\\\\"\\\\n    memory:\\\\n      limit: \\\\\\"\\\\\\"\\\\n      request: \\\\\\"\\\\\\"\\\\npolicyValidator:\\\\n  caBundle: \\\\\\"\\\\\\"\\\\n  crtPEM: \\\\\\"\\\\\\"\\\\n  externalSecret: false\\\\n  keyPEM: \\\\\\"\\\\\\"\\\\n  namespaceSelector:\\\\n    matchExpressions:\\\\n    - key: config.linkerd.io/admission-webhooks\\\\n      operator: NotIn\\\\n      values:\\\\n      - disabled\\\\nprofileValidator:\\\\n  caBundle: \\\\\\"\\\\\\"\\\\n  crtPEM: \\\\\\"\\\\\\"\\\\n  externalSecret: false\\\\n  namespaceSelector:\\\\n    matchExpressions:\\\\n    - key: config.linkerd.io/admission-webhooks\\\\n      operator: NotIn\\\\n      values:\\\\n      - disabled\\\\nproxy:\\\\n  await: true\\\\n  cores: 0\\\\n  enableExternalProfiles: false\\\\n  image:\\\\n    name: cr.l5d.io/linkerd/proxy\\\\n    pullPolicy: \\\\\\"\\\\\\"\\\\n    version: \\\\\\"\\\\\\"\\\\n  inboundConnectTimeout: 100ms\\\\n  logFormat: plain\\\\n  logLevel: warn,linkerd=info\\\\n  opaquePorts: 25,587,3306,4444,5432,6379,9300,11211\\\\n  outboundConnectTimeout: 1000ms\\\\n  ports:\\\\n    admin: 4191\\\\n    control: 4190\\\\n    inbound: 4143\\\\n    outbound: 4140\\\\n  requireIdentityOnInboundPorts: \\\\\\"\\\\\\"\\\\n  resources:\\\\n    cpu:\\\\n      limit: \\\\\\"\\\\\\"\\\\n      request: \\\\\\"\\\\\\"\\\\n    memory:\\\\n      limit: \\\\\\"\\\\\\"\\\\n      request: \\\\\\"\\\\\\"\\\\n  uid: 2102\\\\n  waitBeforeExitSeconds: 0\\\\nproxyInit:\\\\n  closeWaitTimeoutSecs: 0\\\\n  ignoreInboundPorts: 4567,4568\\\\n  ignoreOutboundPorts: 4567,4568\\\\n  image:\\\\n    name: cr.l5d.io/linkerd/proxy-init\\\\n    pullPolicy: \\\\\\"\\\\\\"\\\\n    version: v1.5.3\\\\n  logFormat: \\\\\\"\\\\\\"\\\\n  logLevel: \\\\\\"\\\\\\"\\\\n  resources:\\\\n    cpu:\\\\n      limit: 100m\\\\n      request: 10m\\\\n    memory:\\\\n      limit: 50Mi\\\\n      request: 10Mi\\\\n  runAsRoot: true\\\\n  skipSubnets: \\\\\\"\\\\\\"\\\\n  xtMountPath:\\\\n    mountPath: /run\\\\n    name: linkerd-proxy-init-xtables-lock\\\\nproxyInjector:\\\\n  caBundle: \\\\\\"\\\\\\"\\\\n  crtPEM: \\\\\\"\\\\\\"\\\\n  externalSecret: false\\\\n  namespaceSelector:\\\\n    matchExpressions:\\\\n    - key: config.linkerd.io/admission-webhooks\\\\n      operator: NotIn\\\\n      values:\\\\n      - disabled\\\\nwebhookFailurePolicy: Ignore\\\\n\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"controller\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-config\\",\\"namespace\\":\\"linkerd\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-config",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-configmap-linkerd-linkerd-config.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"linkerd\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/infrastructure/linkerd\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "linkerd",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-linkerd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd-applications-children-infrastructure",
    "spec": Object {},
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"sealed-secrets\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"default\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/infrastructure/sealed-secrets\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "sealed-secrets",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-sealed-secrets.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd-applications-children-infrastructure",
    "spec": Object {},
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"nginx-ingress\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"default\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/infrastructure/nginx-ingress\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "nginx-ingress",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-nginx-ingress.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd-applications-children-infrastructure",
    "spec": Object {},
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-viz\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"linkerd-viz\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/infrastructure/linkerd-viz\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "linkerd-viz",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-linkerd-viz.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd-applications-children-infrastructure",
    "spec": Object {},
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"namespaces\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"default\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/infrastructure/namespaces\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "namespaces",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-namespaces.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd-applications-children-infrastructure",
    "spec": Object {},
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"cert-manager\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"cert-manager\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/infrastructure/cert-manager\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "cert-manager",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-cert-manager.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd-applications-children-infrastructure",
    "spec": Object {},
  },
  Object {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "MutatingWebhookConfiguration",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"admissionregistration.k8s.io/v1\\",\\"kind\\":\\"MutatingWebhookConfiguration\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-tap-injector-webhook-config\\"},\\"webhooks\\":[{\\"admissionReviewVersions\\":[\\"v1\\",\\"v1beta1\\"],\\"clientConfig\\":{\\"caBundle\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU9aT2Q5cTlhYmJDZ3pya3dLMHRleEF3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBNApNVEV3TmpRek1qTmFGdzB5TXpBNE1URXdOalF6TWpOYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFETnZwOU1ZYUVobE9kY3BtSlZSSGJjbzUwSmFBNXA0bG9hVnV3UnU4Q1RjRndYOXlyc3lOUVpYV1VOR0lQMQpNMGJBR0kxL2RIMlRIY2R6d0RDdU9NRUtCVzJ5U1J4L1hDNFZ2OHJTcnQzSktiSXJkSVIxWUd2QW9uTHVpdFlGCkx6T1dFR1dzS1BjcjkxV1E2WmZIWDdicVl2a1YvUUpWVFluZDNPRkt0NjlFdUFjN09yOXRiNHhJV3JxRGVhTXgKN2RVajNnVE05SG9rcjVRclFIN1M1V3RrL2cvVEo3R0twRS9qeloxenhaN04zOFJOWVpGM2dLT1ozbHhBU3M3bQpKemxmcnlzbHhpc21kVUE3MlFoYWxWeG41RXZSc3Q0UURMNUI5MzA3VmtPNDJKZkFmcjNmbW5yV01IcHpTL0srCitUZmljdDEzT3p5c0lYNTZON1hwSnNUWkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUFVVU5DWWZ2cDhsWFdadnF4Vy8wd1RWQ2J6UGEzSzB5Nk1wOTFaZmRQd1lHS05NUFJkV0tJbEQwMnEKL1ZKM2ZBV1AzcEw4VE1vSCt5VWxxRWdESEtvUDlQZzFCM3Ayb2tFOHNaVDdjSHR4U0orTlNkTzJseEVSV2U0VAovMU5tNC8vWGw1cVhCZWVmbHo2enM0VmMvK0tPL0JnZnpncTViaUhwamVISDhRcVRnVmw1U2h3b1RvQTVidDdiCjN5bitZM25aVStsdThXajQ5MjYvd1d1L2UwUDY0Z3ZJdDhMWDlTMHBJNXZZM3E4clR1eWgyalZFRDVIdmE0TUMKenJGSm5razVWT0UyTVRSYlZ4T0pnb3RkMzYzdmV4TmZJZjNkWWNDRHhMMkNTZE1XZkNhWmdLSGlFeHJDMCtGcgpzVFducHdFZ0llazJBbmN4UFFlbmRwQWdPSlNpCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"service\\":{\\"name\\":\\"tap-injector\\",\\"namespace\\":\\"linkerd-viz\\",\\"path\\":\\"/\\"}},\\"failurePolicy\\":\\"Ignore\\",\\"name\\":\\"tap-injector.linkerd.io\\",\\"reinvocationPolicy\\":\\"IfNeeded\\",\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"apiVersions\\":[\\"v1\\"],\\"operations\\":[\\"CREATE\\"],\\"resources\\":[\\"pods\\"]}],\\"sideEffects\\":\\"None\\"}]}
",
      },
      "name": "linkerd-tap-injector-webhook-config",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/admissionregistration.k8s.io_v1-mutatingwebhookconfiguration-default-linkerd-tap-injector-webhook-config.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "ServerAuthorization",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"ServerAuthorization\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap-injector\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap-injector\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"client\\":{\\"unauthenticated\\":true},\\"server\\":{\\"name\\":\\"tap-injector-webhook\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap-injector",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-serverauthorization-linkerd-viz-tap-injector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"tap-injector\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"component\\":\\"tap-injector\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap-injector\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"component\\":\\"tap-injector\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/config\\":\\"179c1704366eac5276a9192f0692c7931db1e7e881d22eb572fe4336b98f4e7e\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"component\\":\\"tap-injector\\",\\"linkerd.io/extension\\":\\"viz\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"injector\\",\\"-tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/tap:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9995},\\"initialDelaySeconds\\":10},\\"name\\":\\"tap-injector\\",\\"ports\\":[{\\"containerPort\\":8443,\\"name\\":\\"tap-injector\\"},{\\"containerPort\\":9995,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9995}},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/tls\\",\\"name\\":\\"tls\\",\\"readOnly\\":true}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"tap-injector\\",\\"volumes\\":[{\\"name\\":\\"tls\\",\\"secret\\":{\\"secretName\\":\\"tap-injector-k8s-tls\\"}}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap-injector",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-tap-injector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/config": "179c1704366eac5276a9192f0692c7931db1e7e881d22eb572fe4336b98f4e7e",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "labels": Object {
            "component": "tap-injector",
            "linkerd.io/extension": "viz",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "injector",
                "-tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local",
                "-log-level=info",
                "-log-format=plain",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/tap:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9995,
                },
                "initialDelaySeconds": 10,
              },
              "name": "tap-injector",
              "ports": Array [
                Object {
                  "containerPort": 8443,
                  "name": "tap-injector",
                },
                Object {
                  "containerPort": 9995,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9995,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "tap-injector",
          "volumes": Array [
            Object {
              "name": "tls",
              "secret": Object {
                "secretName": "tap-injector-k8s-tls",
              },
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"prometheus\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
      },
      "name": "prometheus",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-serviceaccount-linkerd-viz-prometheus.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "Server",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"Server\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"grafana\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"podSelector\\":{\\"matchLabels\\":{\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\"}},\\"port\\":\\"http\\",\\"proxyProtocol\\":\\"HTTP/1\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "grafana",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-server-linkerd-viz-grafana.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU9aT2Q5cTlhYmJDZ3pya3dLMHRleEF3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBNApNVEV3TmpRek1qTmFGdzB5TXpBNE1URXdOalF6TWpOYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFETnZwOU1ZYUVobE9kY3BtSlZSSGJjbzUwSmFBNXA0bG9hVnV3UnU4Q1RjRndYOXlyc3lOUVpYV1VOR0lQMQpNMGJBR0kxL2RIMlRIY2R6d0RDdU9NRUtCVzJ5U1J4L1hDNFZ2OHJTcnQzSktiSXJkSVIxWUd2QW9uTHVpdFlGCkx6T1dFR1dzS1BjcjkxV1E2WmZIWDdicVl2a1YvUUpWVFluZDNPRkt0NjlFdUFjN09yOXRiNHhJV3JxRGVhTXgKN2RVajNnVE05SG9rcjVRclFIN1M1V3RrL2cvVEo3R0twRS9qeloxenhaN04zOFJOWVpGM2dLT1ozbHhBU3M3bQpKemxmcnlzbHhpc21kVUE3MlFoYWxWeG41RXZSc3Q0UURMNUI5MzA3VmtPNDJKZkFmcjNmbW5yV01IcHpTL0srCitUZmljdDEzT3p5c0lYNTZON1hwSnNUWkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUFVVU5DWWZ2cDhsWFdadnF4Vy8wd1RWQ2J6UGEzSzB5Nk1wOTFaZmRQd1lHS05NUFJkV0tJbEQwMnEKL1ZKM2ZBV1AzcEw4VE1vSCt5VWxxRWdESEtvUDlQZzFCM3Ayb2tFOHNaVDdjSHR4U0orTlNkTzJseEVSV2U0VAovMU5tNC8vWGw1cVhCZWVmbHo2enM0VmMvK0tPL0JnZnpncTViaUhwamVISDhRcVRnVmw1U2h3b1RvQTVidDdiCjN5bitZM25aVStsdThXajQ5MjYvd1d1L2UwUDY0Z3ZJdDhMWDlTMHBJNXZZM3E4clR1eWgyalZFRDVIdmE0TUMKenJGSm5razVWT0UyTVRSYlZ4T0pnb3RkMzYzdmV4TmZJZjNkWWNDRHhMMkNTZE1XZkNhWmdLSGlFeHJDMCtGcgpzVFducHdFZ0llazJBbmN4UFFlbmRwQWdPSlNpCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBemI2ZlRHR2hJWlRuWEtaaVZVUjIzS09kQ1dnT2FlSmFHbGJzRWJ2QWszQmNGL2NxCjdNalVHVjFsRFJpRDlUTkd3QmlOZjNSOWt4M0hjOEF3cmpqQkNnVnRza2tjZjF3dUZiL0swcTdkeVNteUszU0UKZFdCcndLSnk3b3JXQlM4emxoQmxyQ2ozSy9kVmtPbVh4MSsyNm1MNUZmMENWVTJKM2R6aFNyZXZSTGdIT3pxLwpiVytNU0ZxNmczbWpNZTNWSTk0RXpQUjZKSytVSzBCKzB1VnJaUDRQMHlleGlxUlA0ODJkYzhXZXpkL0VUV0dSCmQ0Q2ptZDVjUUVyTzVpYzVYNjhySmNZckpuVkFPOWtJV3BWY1orUkwwYkxlRUF5K1FmZDlPMVpEdU5pWHdINjkKMzVwNjFqQjZjMHZ5dnZrMzRuTGRkenM4ckNGK2VqZTE2U2JFMlFJREFRQUJBb0lCQUJSVW5kRWlaSlc0N1JQTwpyVERYenhjR1krSW1FaWFNWTNMdTIrejBySmJsSjNTR3pBc1IzVU9VWXdQa1JFWGFoMGM4SmQ5T1Y0cE9Dd041CkhsWlk3VnBjSnZiVEdxbkxKaEtvSFJhc2lPWHo1Tk0rZEVoVSt0RFNQS0V0dnZCTU5jRENaZ21aRXJPWmdTOE0KcGg3aGFtWEcyZTQrVGhpM3pNUExxOGVDVnlObkRseEg2MXA3QjJ0VEQrbno4TVBnMEkyNWtoazNMbHBia08zSQpxTElESVhBREQ2dE8xN1IxRmtselZDdXlLalB6ajB5Z2s3U1hUTlpuZTNrcmY0WHdOYjFPSnFBTGxsZkJqdnNUClZXRnlNZ2lrY1dhYmoxbHVScEFKRGJGaytTMWdaMnZuVjhWQ1pXdzBNRFZpanNBSm9EZVFBcDYwZHRrSWY2UWwKRmo4bHZYRUNnWUVBei8wQmJkdXluV2ZQV0RUUDU3ejV5aFJoMG5FRzg0VWV0RFhsSGRLN0ZLNVVFODEwcTY2dgpxRVZRZjJPWTRFNUZmT2tOamRCNVJmWVgyN1J0TVhjLzVFbStwV0JXM0lWU05DdU9pTUVuNHJJOU0wT2NCUFhmCkU4U2pIblBDZGZ4VVgyV0ZJcjlZM3pNM0p6bEVoT1R0NE5sNEpNWmhqV2J4UVpVSzZrOGM5RDhDZ1lFQS9UMEcKNUY2NmZIWXdMWFJOU0Fqa3NES3BsYlUzWXRPcm9DNkkwZlBXdHJwSDloUDlPS1RsMTBXUFpVRzduSk9kVUJUTQpMSTlaaUd4cmdmR1VPQVVoWUVDakM1MHZMRmZGcFpOSWJNQ0FKNGdzZUdvb1VvQkMyc2ljWjlxYTBVZkNmU0JjClNZTFd4UFk5bmgxTXJtdlJkUWdGaTYwLzdhdGNmRWJkbzc3aG9PY0NnWUFjWUFzSzN0YytiRVE0WjNRWnpJbFQKalhaUERJYURRSjBRdnUyVUpRVEs3SUdoOWZ5OTAyWTVrY05LcmQ3VWN6azlzbG5jQ0I0VGNtQ000OCtsMlB3SgpmQm9iVzhwZDZYNXVpYWEzZDRxbWZlU2xrc3E5VG9IeG8za1JsWDlwTTFTYmN6RTNyVjFGamlvdkdyd0RXV3d1CnFkeWZQOFZkVWpjRjJIeVZ2TmRaWndLQmdRRHhuMy9xK0NPUlM2ZU9SekRSc1lLYVI4eWRSa254WnF1VDY3S3EKT0xFK3FpQ3RQOGRWZTZpOXJPWTBJL0xoWThzdXRKbFhUdk9MZ245VmZlNEJRWXZsN2VaajEzZENKUUUxaVlFSwpHdVpzVWJhMHNmMkZNbElYdEYvZmk2bzZVdkRVT01NMWRMeDlNOEg1RWxXdStycmdvbVhBTHU4WFUzQ3NOMldVCnJqVlVNd0tCZ1FDZlhEOE1yMElIWGR6cFlYL1VnTDQ2REVCUjB4aGt4YTUvQUl4c3Frcjgzeldad01FQ1E1dFoKdk5QZW9KUWVrMXI4M3ZRNHVpVlVLRUk2NmErU05wbnhDbDh0SVIwdjFwcGkyYnRVdDdrdEFjZWtnN0EwL1R6agpkSHc0eDBoSVVTb2pEYTQ1OUNRMk0zcXRBeHdvYXNlNERyQ3lBbmpKN0QxdWJEQ1d5Uy9Icnc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU9aT2Q5cTlhYmJDZ3pya3dLMHRleEF3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBNApNVEV3TmpRek1qTmFGdzB5TXpBNE1URXdOalF6TWpOYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFETnZwOU1ZYUVobE9kY3BtSlZSSGJjbzUwSmFBNXA0bG9hVnV3UnU4Q1RjRndYOXlyc3lOUVpYV1VOR0lQMQpNMGJBR0kxL2RIMlRIY2R6d0RDdU9NRUtCVzJ5U1J4L1hDNFZ2OHJTcnQzSktiSXJkSVIxWUd2QW9uTHVpdFlGCkx6T1dFR1dzS1BjcjkxV1E2WmZIWDdicVl2a1YvUUpWVFluZDNPRkt0NjlFdUFjN09yOXRiNHhJV3JxRGVhTXgKN2RVajNnVE05SG9rcjVRclFIN1M1V3RrL2cvVEo3R0twRS9qeloxenhaN04zOFJOWVpGM2dLT1ozbHhBU3M3bQpKemxmcnlzbHhpc21kVUE3MlFoYWxWeG41RXZSc3Q0UURMNUI5MzA3VmtPNDJKZkFmcjNmbW5yV01IcHpTL0srCitUZmljdDEzT3p5c0lYNTZON1hwSnNUWkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUFVVU5DWWZ2cDhsWFdadnF4Vy8wd1RWQ2J6UGEzSzB5Nk1wOTFaZmRQd1lHS05NUFJkV0tJbEQwMnEKL1ZKM2ZBV1AzcEw4VE1vSCt5VWxxRWdESEtvUDlQZzFCM3Ayb2tFOHNaVDdjSHR4U0orTlNkTzJseEVSV2U0VAovMU5tNC8vWGw1cVhCZWVmbHo2enM0VmMvK0tPL0JnZnpncTViaUhwamVISDhRcVRnVmw1U2h3b1RvQTVidDdiCjN5bitZM25aVStsdThXajQ5MjYvd1d1L2UwUDY0Z3ZJdDhMWDlTMHBJNXZZM3E4clR1eWgyalZFRDVIdmE0TUMKenJGSm5razVWT0UyTVRSYlZ4T0pnb3RkMzYzdmV4TmZJZjNkWWNDRHhMMkNTZE1XZkNhWmdLSGlFeHJDMCtGcgpzVFducHdFZ0llazJBbmN4UFFlbmRwQWdPSlNpCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBemI2ZlRHR2hJWlRuWEtaaVZVUjIzS09kQ1dnT2FlSmFHbGJzRWJ2QWszQmNGL2NxCjdNalVHVjFsRFJpRDlUTkd3QmlOZjNSOWt4M0hjOEF3cmpqQkNnVnRza2tjZjF3dUZiL0swcTdkeVNteUszU0UKZFdCcndLSnk3b3JXQlM4emxoQmxyQ2ozSy9kVmtPbVh4MSsyNm1MNUZmMENWVTJKM2R6aFNyZXZSTGdIT3pxLwpiVytNU0ZxNmczbWpNZTNWSTk0RXpQUjZKSytVSzBCKzB1VnJaUDRQMHlleGlxUlA0ODJkYzhXZXpkL0VUV0dSCmQ0Q2ptZDVjUUVyTzVpYzVYNjhySmNZckpuVkFPOWtJV3BWY1orUkwwYkxlRUF5K1FmZDlPMVpEdU5pWHdINjkKMzVwNjFqQjZjMHZ5dnZrMzRuTGRkenM4ckNGK2VqZTE2U2JFMlFJREFRQUJBb0lCQUJSVW5kRWlaSlc0N1JQTwpyVERYenhjR1krSW1FaWFNWTNMdTIrejBySmJsSjNTR3pBc1IzVU9VWXdQa1JFWGFoMGM4SmQ5T1Y0cE9Dd041CkhsWlk3VnBjSnZiVEdxbkxKaEtvSFJhc2lPWHo1Tk0rZEVoVSt0RFNQS0V0dnZCTU5jRENaZ21aRXJPWmdTOE0KcGg3aGFtWEcyZTQrVGhpM3pNUExxOGVDVnlObkRseEg2MXA3QjJ0VEQrbno4TVBnMEkyNWtoazNMbHBia08zSQpxTElESVhBREQ2dE8xN1IxRmtselZDdXlLalB6ajB5Z2s3U1hUTlpuZTNrcmY0WHdOYjFPSnFBTGxsZkJqdnNUClZXRnlNZ2lrY1dhYmoxbHVScEFKRGJGaytTMWdaMnZuVjhWQ1pXdzBNRFZpanNBSm9EZVFBcDYwZHRrSWY2UWwKRmo4bHZYRUNnWUVBei8wQmJkdXluV2ZQV0RUUDU3ejV5aFJoMG5FRzg0VWV0RFhsSGRLN0ZLNVVFODEwcTY2dgpxRVZRZjJPWTRFNUZmT2tOamRCNVJmWVgyN1J0TVhjLzVFbStwV0JXM0lWU05DdU9pTUVuNHJJOU0wT2NCUFhmCkU4U2pIblBDZGZ4VVgyV0ZJcjlZM3pNM0p6bEVoT1R0NE5sNEpNWmhqV2J4UVpVSzZrOGM5RDhDZ1lFQS9UMEcKNUY2NmZIWXdMWFJOU0Fqa3NES3BsYlUzWXRPcm9DNkkwZlBXdHJwSDloUDlPS1RsMTBXUFpVRzduSk9kVUJUTQpMSTlaaUd4cmdmR1VPQVVoWUVDakM1MHZMRmZGcFpOSWJNQ0FKNGdzZUdvb1VvQkMyc2ljWjlxYTBVZkNmU0JjClNZTFd4UFk5bmgxTXJtdlJkUWdGaTYwLzdhdGNmRWJkbzc3aG9PY0NnWUFjWUFzSzN0YytiRVE0WjNRWnpJbFQKalhaUERJYURRSjBRdnUyVUpRVEs3SUdoOWZ5OTAyWTVrY05LcmQ3VWN6azlzbG5jQ0I0VGNtQ000OCtsMlB3SgpmQm9iVzhwZDZYNXVpYWEzZDRxbWZlU2xrc3E5VG9IeG8za1JsWDlwTTFTYmN6RTNyVjFGamlvdkdyd0RXV3d1CnFkeWZQOFZkVWpjRjJIeVZ2TmRaWndLQmdRRHhuMy9xK0NPUlM2ZU9SekRSc1lLYVI4eWRSa254WnF1VDY3S3EKT0xFK3FpQ3RQOGRWZTZpOXJPWTBJL0xoWThzdXRKbFhUdk9MZ245VmZlNEJRWXZsN2VaajEzZENKUUUxaVlFSwpHdVpzVWJhMHNmMkZNbElYdEYvZmk2bzZVdkRVT01NMWRMeDlNOEg1RWxXdStycmdvbVhBTHU4WFUzQ3NOMldVCnJqVlVNd0tCZ1FDZlhEOE1yMElIWGR6cFlYL1VnTDQ2REVCUjB4aGt4YTUvQUl4c3Frcjgzeldad01FQ1E1dFoKdk5QZW9KUWVrMXI4M3ZRNHVpVlVLRUk2NmErU05wbnhDbDh0SVIwdjFwcGkyYnRVdDdrdEFjZWtnN0EwL1R6agpkSHc0eDBoSVVTb2pEYTQ1OUNRMk0zcXRBeHdvYXNlNERyQ3lBbmpKN0QxdWJEQ1d5Uy9Icnc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap-injector-k8s-tls\\",\\"namespace\\":\\"linkerd-viz\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap-injector-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-secret-linkerd-viz-tap-injector-k8s-tls.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "type": "kubernetes.io/tls",
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "ServerAuthorization",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"ServerAuthorization\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"grafana\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"client\\":{\\"unauthenticated\\":true},\\"server\\":{\\"name\\":\\"grafana\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "grafana",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-serverauthorization-linkerd-viz-grafana.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "ServerAuthorization",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"ServerAuthorization\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"proxy-admin\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"client\\":{\\"unauthenticated\\":true},\\"server\\":{\\"name\\":\\"proxy-admin\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "proxy-admin",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-serverauthorization-linkerd-viz-proxy-admin.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "dashboards.yaml": "apiVersion: 1
providers:
- name: 'default'
  orgId: 1
  folder: ''
  type: file
  disableDeletion: true
  editable: true
  options:
    path: /var/lib/grafana/dashboards
    homeDashboardId: linkerd-top-line",
      "datasources.yaml": "apiVersion: 1
datasources:
- name: prometheus
  type: prometheus
  access: proxy
  orgId: 1
  url: http://prometheus.linkerd-viz.svc.cluster.local:9090
  isDefault: true
  jsonData:
    timeInterval: \\"5s\\"
  version: 1
  editable: true",
      "grafana.ini": "instance_name = grafana
[server]
root_url = %(protocol)s://%(domain)s:/grafana/
[auth]
disable_login_form = true
[auth.anonymous]
enabled = true
org_role = Editor
[auth.basic]
enabled = false
[analytics]
check_for_updates = false
[panels]
disable_sanitize_html = true
[log]
mode = console
[log.console]
format = text
level = info",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"dashboards.yaml\\":\\"apiVersion: 1\\\\nproviders:\\\\n- name: 'default'\\\\n  orgId: 1\\\\n  folder: ''\\\\n  type: file\\\\n  disableDeletion: true\\\\n  editable: true\\\\n  options:\\\\n    path: /var/lib/grafana/dashboards\\\\n    homeDashboardId: linkerd-top-line\\",\\"datasources.yaml\\":\\"apiVersion: 1\\\\ndatasources:\\\\n- name: prometheus\\\\n  type: prometheus\\\\n  access: proxy\\\\n  orgId: 1\\\\n  url: http://prometheus.linkerd-viz.svc.cluster.local:9090\\\\n  isDefault: true\\\\n  jsonData:\\\\n    timeInterval: \\\\\\"5s\\\\\\"\\\\n  version: 1\\\\n  editable: true\\",\\"grafana.ini\\":\\"instance_name = grafana\\\\n[server]\\\\nroot_url = %(protocol)s://%(domain)s:/grafana/\\\\n[auth]\\\\ndisable_login_form = true\\\\n[auth.anonymous]\\\\nenabled = true\\\\norg_role = Editor\\\\n[auth.basic]\\\\nenabled = false\\\\n[analytics]\\\\ncheck_for_updates = false\\\\n[panels]\\\\ndisable_sanitize_html = true\\\\n[log]\\\\nmode = console\\\\n[log.console]\\\\nformat = text\\\\nlevel = info\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"grafana-config\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "grafana-config",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-configmap-linkerd-viz-grafana-config.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"web\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"http\\",\\"port\\":8084,\\"targetPort\\":8084},{\\"name\\":\\"admin-http\\",\\"port\\":9994,\\"targetPort\\":9994}],\\"selector\\":{\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "web",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-service-linkerd-viz-web.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"tap\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"tap\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/config\\":\\"1977e32926f655a5a4752905449a934b15c31ee0a061b57ebff5aa2a586d7ff6\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"api\\",\\"-api-namespace=linkerd\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-identity-trust-domain=cluster.local\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/tap:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9998},\\"initialDelaySeconds\\":10},\\"name\\":\\"tap\\",\\"ports\\":[{\\"containerPort\\":8088,\\"name\\":\\"grpc\\"},{\\"containerPort\\":8089,\\"name\\":\\"apiserver\\"},{\\"containerPort\\":9998,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9998}},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/tls\\",\\"name\\":\\"tls\\",\\"readOnly\\":true}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"tap\\",\\"volumes\\":[{\\"name\\":\\"tls\\",\\"secret\\":{\\"secretName\\":\\"tap-k8s-tls\\"}}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-tap.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/config": "1977e32926f655a5a4752905449a934b15c31ee0a061b57ebff5aa2a586d7ff6",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "labels": Object {
            "component": "tap",
            "linkerd.io/extension": "viz",
            "namespace": "linkerd-viz",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "api",
                "-api-namespace=linkerd",
                "-log-level=info",
                "-log-format=plain",
                "-identity-trust-domain=cluster.local",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/tap:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9998,
                },
                "initialDelaySeconds": 10,
              },
              "name": "tap",
              "ports": Array [
                Object {
                  "containerPort": 8088,
                  "name": "grpc",
                },
                Object {
                  "containerPort": 8089,
                  "name": "apiserver",
                },
                Object {
                  "containerPort": 9998,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9998,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "tap",
          "volumes": Array [
            Object {
              "name": "tls",
              "secret": Object {
                "secretName": "tap-k8s-tls",
              },
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"grafana\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"http\\",\\"port\\":3000,\\"targetPort\\":3000}],\\"selector\\":{\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "grafana",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-service-linkerd-viz-grafana.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRQzQyZlBjc3B1VXhUaE1DdDVhMTE5VEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURneE1UQTJORE15TTFvWApEVEl6TURneE1UQTJORE15TTFvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHJYb3dJNWdpbUtmbEVOdU9QMjA0MnkKbUJpV0tYQjl6R0pjdEU1RHNyV3pZMHFySkFsMHlOQ1p4aFZpRDFCWUFFd3hGODcxdnpPdjdpUXpVcVNLTjJ2ZQpmOFZZNkNUejZjbVVYa1dyWmZaMHNORVBnSzYwcjVIM1ZaT3V3eFZta3UzL3FXT2Q4UFVxYUN2MWk1eHg1R3hRCmNXZmFSVWdWbUZQRHB5bUhvcEcrZlBkdmZDMWRtc1lJdEloYllVNGw0YWNvbHlUM3RWOG1tcFpKVjVqdWdzR3QKUnVDWTlucE1vZ0E5aUwxOWM5V0dESFFTbWVlWlZsTE90NG5BLzhOWEhMZlpiZDc2TG9lUUF3dGVPaXJZaFU1dApLNHZHNlZHMnc0RWh3ekpBeUhFMkJ1NHRnNnNrN3huOUFqcjB1TjJwNlV5QjFnR3paOTd2cWNyMC9vSkFPMThDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBM3UxT1ZINEVPaEZSRU9PMEp1TzZEY2FJeDZqdnhXClRVR2ZQeS8rdTllcE9oY0pGSyszTnJFR2E4SDVwU0dvVWRVTitvUS9MTVZ0REh3ZnU3WnF2Y0NXWDk4bmtHaUMKOTVHYnRNeENpY2hjS2gwdkppcDdHT3VKeENQelpzRkJUTEwxWHJFalhIYmI3YzFtZnNzWTFGRFBtOWltSmVsUgpUb2lLQlZsV1o4akhaQWQyZ28yeCtlWHNFY3hQTVdFTFB5dnB1N1gweDkwaEtxRlp4OWRyR1RwZkdMd21nNXB0CkwydnIwM3FUVzJPdVdkMU5DMExDaWE2SFEzSlo4UnZJN2FDRUNVZkhqb0lsaGM4d0RkUytEbjdxM0RCQVh3SXUKRlREMlk4eGVZWlZqNzFKM3pRcjNMdGxScnd1TmlZbnhwSEkyYlRZbm90RkpwZjdkZ0w0ckVDaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdXRlakFqbUNLWXArVVEyNDQvYlRqYktZR0pZcGNIM01ZbHkwVGtPeXRiTmpTcXNrCkNYVEkwSm5HRldJUFVGZ0FUREVYenZXL002L3VKRE5TcElvM2E5NS94VmpvSlBQcHlaUmVSYXRsOW5TdzBRK0EKcnJTdmtmZFZrNjdERldhUzdmK3BZNTN3OVNwb0svV0xuSEhrYkZCeFo5cEZTQldZVThPbktZZWlrYjU4OTI5OApMVjJheGdpMGlGdGhUaVhocHlpWEpQZTFYeWFhbGtsWG1PNkN3YTFHNEpqMmVreWlBRDJJdlgxejFZWU1kQktaCjU1bFdVczYzaWNEL3cxY2N0OWx0M3ZvdWg1QURDMTQ2S3RpRlRtMHJpOGJwVWJiRGdTSERNa0RJY1RZRzdpMkQKcXlUdkdmMENPdlM0M2FucFRJSFdBYk5uM3UrcHl2VCtna0E3WHdJREFRQUJBb0lCQUhrbW43VXVrdjdhcFlOcgpFV3NIdmk5UUVaMUhxUUVmSU9yYXo3TTc1R0k3T25QTk91WEN5dit2NWlneFdGcXhaU2dDWVR5NlRrdDJsVVQxCjNtMkFqZVVzOWM2Q0VxejdWNmwwd2hnTXhtV2pUbytRck5FYnFnaE14em1taFNxWVEwZDlrbGxjclVSYlJnYlQKQmI3Z2Zzdlk4Vi8wd1IyM212a2RrWU8xUmkyWHFXODA5eGp3MDhLQnd4dHpCRTBRSE9UQ1ZnOGhzakIrTmQzbgpQQm9DVWQxdVNsTmh6QWw1MmJCc2dMR1JObUhOalloVWpkNDJSVUZybnhIWlNNZldkMXQ5ZFFVc2pjTjhjREJSCkgyTmdxckNnVWRQejBLUCtBMDJJT0ZNeTZyVGNQUmtiQWlEdkVKMnlDSGFhaFc1Y0RZaUpubGR3Zm5mZ3JJK2MKeFBwWlJ3a0NnWUVBeklrMEtveVpQSFRBSmJZeHY1SWgyVkFMQTVWbHJ1blB5bTFGTXQ5Q25tZWVMaHU2cEtZRgphakVjTFhPSSthc2pPTlpGSTc2Y2V4cUE0c2hwdUZyQmR3RTV4ejYrSm5PUVd5Q0JDWForWC9Bb3l5SFJDUEpNCmo3cXBrYjV3d0hMaEhvTWNpR0lHdmowdGdPOFNqZ1hHd3BGSWxqR2I2TEsvVzhKcFd0RVB3YnNDZ1lFQTZkcTcKV3k3Wlk0aFJWbWloR0F0Qmp2SlhONmlESWFIdkk4elFpakNuVlJqUFBEckt5dVdNNUxKeW4zUGxjL3dQWHU4RAp5d0E0aXFwcWQ2Ukx3MGpCekR1TXNJVWFtTy9NUENoSGZWMnVXNzlNcUQ3Sy9JQkVZVnQrZEFZUzJrYmh4RkdrCnRtcTRUOGxSZUpUZmkrNC9FZHdkZEVQN0piTEpraUs3R0VYQjhLMENnWUVBanZFQU5SQkhjem5BbzFwZUVCem4KYlFFRWdYK2lMWWlYd0VkM1NlTS9vb2FWeEhGNmtlQzQvZ3JPUDNGejg5QkhjRXhHeTRGRnlMNnYvazNEbktSSQplb3V2dm5BNTRaTjMra2VRQm5YNlFjQU1NbEl5elViUWZNNGQvWTRUTEZ2Y3VqODA3SmRkVVF4ZVJiSk96RlI3CklMVDUvb1V6Q1lBS1BlMXpSWlcvcGtzQ2dZRUFxTUJLaXRZWDBSZEJlcFV1Q21lMCt5NHRlZUNFSC9UMjJHS24KNmRDS0w0SWpxVmJUbCs1bDZYSkwvSHhwaTNUTXNyalBoK0cwNjN0bU1NZkNWRDFnZTd4TkhlUXUrVVd4bjRlQgpieG4zQkFYYmoxMGdwV3o1NnpkVzNPcTFHQVltVE1DTmw0VVRVNS8yeG9qSGQvYUlWSjcrTWpRTU8zdjBzUnVXCjMwRVhYbEVDZ1lFQWg3eFFhOFV1cW5QYmJ1TXlHVmRBenJITjYvYlorRm14R3FobXNHQ1dGK0EzeWtNeUprUWMKZi9HbkZ1ek1tSWRmYkhHM0pOUGMrNEYvL3N3azcyRi9rdFJtTE5Yc3hjUm96M0lNTitkeXE5dGUxeDJSN3NEbApZN3hORjdkTEVIQ2JXQTJuN2Nmc2RQQTJiaGJxNEhJU3VZcW0xWE1yVnF2THlETitjejZJT01NPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRQzQyZlBjc3B1VXhUaE1DdDVhMTE5VEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURneE1UQTJORE15TTFvWApEVEl6TURneE1UQTJORE15TTFvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHJYb3dJNWdpbUtmbEVOdU9QMjA0MnkKbUJpV0tYQjl6R0pjdEU1RHNyV3pZMHFySkFsMHlOQ1p4aFZpRDFCWUFFd3hGODcxdnpPdjdpUXpVcVNLTjJ2ZQpmOFZZNkNUejZjbVVYa1dyWmZaMHNORVBnSzYwcjVIM1ZaT3V3eFZta3UzL3FXT2Q4UFVxYUN2MWk1eHg1R3hRCmNXZmFSVWdWbUZQRHB5bUhvcEcrZlBkdmZDMWRtc1lJdEloYllVNGw0YWNvbHlUM3RWOG1tcFpKVjVqdWdzR3QKUnVDWTlucE1vZ0E5aUwxOWM5V0dESFFTbWVlWlZsTE90NG5BLzhOWEhMZlpiZDc2TG9lUUF3dGVPaXJZaFU1dApLNHZHNlZHMnc0RWh3ekpBeUhFMkJ1NHRnNnNrN3huOUFqcjB1TjJwNlV5QjFnR3paOTd2cWNyMC9vSkFPMThDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBM3UxT1ZINEVPaEZSRU9PMEp1TzZEY2FJeDZqdnhXClRVR2ZQeS8rdTllcE9oY0pGSyszTnJFR2E4SDVwU0dvVWRVTitvUS9MTVZ0REh3ZnU3WnF2Y0NXWDk4bmtHaUMKOTVHYnRNeENpY2hjS2gwdkppcDdHT3VKeENQelpzRkJUTEwxWHJFalhIYmI3YzFtZnNzWTFGRFBtOWltSmVsUgpUb2lLQlZsV1o4akhaQWQyZ28yeCtlWHNFY3hQTVdFTFB5dnB1N1gweDkwaEtxRlp4OWRyR1RwZkdMd21nNXB0CkwydnIwM3FUVzJPdVdkMU5DMExDaWE2SFEzSlo4UnZJN2FDRUNVZkhqb0lsaGM4d0RkUytEbjdxM0RCQVh3SXUKRlREMlk4eGVZWlZqNzFKM3pRcjNMdGxScnd1TmlZbnhwSEkyYlRZbm90RkpwZjdkZ0w0ckVDaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdXRlakFqbUNLWXArVVEyNDQvYlRqYktZR0pZcGNIM01ZbHkwVGtPeXRiTmpTcXNrCkNYVEkwSm5HRldJUFVGZ0FUREVYenZXL002L3VKRE5TcElvM2E5NS94VmpvSlBQcHlaUmVSYXRsOW5TdzBRK0EKcnJTdmtmZFZrNjdERldhUzdmK3BZNTN3OVNwb0svV0xuSEhrYkZCeFo5cEZTQldZVThPbktZZWlrYjU4OTI5OApMVjJheGdpMGlGdGhUaVhocHlpWEpQZTFYeWFhbGtsWG1PNkN3YTFHNEpqMmVreWlBRDJJdlgxejFZWU1kQktaCjU1bFdVczYzaWNEL3cxY2N0OWx0M3ZvdWg1QURDMTQ2S3RpRlRtMHJpOGJwVWJiRGdTSERNa0RJY1RZRzdpMkQKcXlUdkdmMENPdlM0M2FucFRJSFdBYk5uM3UrcHl2VCtna0E3WHdJREFRQUJBb0lCQUhrbW43VXVrdjdhcFlOcgpFV3NIdmk5UUVaMUhxUUVmSU9yYXo3TTc1R0k3T25QTk91WEN5dit2NWlneFdGcXhaU2dDWVR5NlRrdDJsVVQxCjNtMkFqZVVzOWM2Q0VxejdWNmwwd2hnTXhtV2pUbytRck5FYnFnaE14em1taFNxWVEwZDlrbGxjclVSYlJnYlQKQmI3Z2Zzdlk4Vi8wd1IyM212a2RrWU8xUmkyWHFXODA5eGp3MDhLQnd4dHpCRTBRSE9UQ1ZnOGhzakIrTmQzbgpQQm9DVWQxdVNsTmh6QWw1MmJCc2dMR1JObUhOalloVWpkNDJSVUZybnhIWlNNZldkMXQ5ZFFVc2pjTjhjREJSCkgyTmdxckNnVWRQejBLUCtBMDJJT0ZNeTZyVGNQUmtiQWlEdkVKMnlDSGFhaFc1Y0RZaUpubGR3Zm5mZ3JJK2MKeFBwWlJ3a0NnWUVBeklrMEtveVpQSFRBSmJZeHY1SWgyVkFMQTVWbHJ1blB5bTFGTXQ5Q25tZWVMaHU2cEtZRgphakVjTFhPSSthc2pPTlpGSTc2Y2V4cUE0c2hwdUZyQmR3RTV4ejYrSm5PUVd5Q0JDWForWC9Bb3l5SFJDUEpNCmo3cXBrYjV3d0hMaEhvTWNpR0lHdmowdGdPOFNqZ1hHd3BGSWxqR2I2TEsvVzhKcFd0RVB3YnNDZ1lFQTZkcTcKV3k3Wlk0aFJWbWloR0F0Qmp2SlhONmlESWFIdkk4elFpakNuVlJqUFBEckt5dVdNNUxKeW4zUGxjL3dQWHU4RAp5d0E0aXFwcWQ2Ukx3MGpCekR1TXNJVWFtTy9NUENoSGZWMnVXNzlNcUQ3Sy9JQkVZVnQrZEFZUzJrYmh4RkdrCnRtcTRUOGxSZUpUZmkrNC9FZHdkZEVQN0piTEpraUs3R0VYQjhLMENnWUVBanZFQU5SQkhjem5BbzFwZUVCem4KYlFFRWdYK2lMWWlYd0VkM1NlTS9vb2FWeEhGNmtlQzQvZ3JPUDNGejg5QkhjRXhHeTRGRnlMNnYvazNEbktSSQplb3V2dm5BNTRaTjMra2VRQm5YNlFjQU1NbEl5elViUWZNNGQvWTRUTEZ2Y3VqODA3SmRkVVF4ZVJiSk96RlI3CklMVDUvb1V6Q1lBS1BlMXpSWlcvcGtzQ2dZRUFxTUJLaXRZWDBSZEJlcFV1Q21lMCt5NHRlZUNFSC9UMjJHS24KNmRDS0w0SWpxVmJUbCs1bDZYSkwvSHhwaTNUTXNyalBoK0cwNjN0bU1NZkNWRDFnZTd4TkhlUXUrVVd4bjRlQgpieG4zQkFYYmoxMGdwV3o1NnpkVzNPcTFHQVltVE1DTmw0VVRVNS8yeG9qSGQvYUlWSjcrTWpRTU8zdjBzUnVXCjMwRVhYbEVDZ1lFQWg3eFFhOFV1cW5QYmJ1TXlHVmRBenJITjYvYlorRm14R3FobXNHQ1dGK0EzeWtNeUprUWMKZi9HbkZ1ek1tSWRmYkhHM0pOUGMrNEYvL3N3azcyRi9rdFJtTE5Yc3hjUm96M0lNTitkeXE5dGUxeDJSN3NEbApZN3hORjdkTEVIQ2JXQTJuN2Nmc2RQQTJiaGJxNEhJU3VZcW0xWE1yVnF2THlETitjejZJT01NPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"tap-k8s-tls\\",\\"namespace\\":\\"linkerd-viz\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-secret-linkerd-viz-tap-k8s-tls.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "type": "kubernetes.io/tls",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-tap-auth-delegator\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"system:auth-delegator\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"tap\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "linkerd-linkerd-viz-tap-auth-delegator",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-tap-auth-delegator.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "apiregistration.k8s.io/v1",
    "kind": "APIService",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apiregistration.k8s.io/v1\\",\\"kind\\":\\"APIService\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"v1alpha1.tap.linkerd.io\\"},\\"spec\\":{\\"caBundle\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRQzQyZlBjc3B1VXhUaE1DdDVhMTE5VEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURneE1UQTJORE15TTFvWApEVEl6TURneE1UQTJORE15TTFvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHJYb3dJNWdpbUtmbEVOdU9QMjA0MnkKbUJpV0tYQjl6R0pjdEU1RHNyV3pZMHFySkFsMHlOQ1p4aFZpRDFCWUFFd3hGODcxdnpPdjdpUXpVcVNLTjJ2ZQpmOFZZNkNUejZjbVVYa1dyWmZaMHNORVBnSzYwcjVIM1ZaT3V3eFZta3UzL3FXT2Q4UFVxYUN2MWk1eHg1R3hRCmNXZmFSVWdWbUZQRHB5bUhvcEcrZlBkdmZDMWRtc1lJdEloYllVNGw0YWNvbHlUM3RWOG1tcFpKVjVqdWdzR3QKUnVDWTlucE1vZ0E5aUwxOWM5V0dESFFTbWVlWlZsTE90NG5BLzhOWEhMZlpiZDc2TG9lUUF3dGVPaXJZaFU1dApLNHZHNlZHMnc0RWh3ekpBeUhFMkJ1NHRnNnNrN3huOUFqcjB1TjJwNlV5QjFnR3paOTd2cWNyMC9vSkFPMThDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBM3UxT1ZINEVPaEZSRU9PMEp1TzZEY2FJeDZqdnhXClRVR2ZQeS8rdTllcE9oY0pGSyszTnJFR2E4SDVwU0dvVWRVTitvUS9MTVZ0REh3ZnU3WnF2Y0NXWDk4bmtHaUMKOTVHYnRNeENpY2hjS2gwdkppcDdHT3VKeENQelpzRkJUTEwxWHJFalhIYmI3YzFtZnNzWTFGRFBtOWltSmVsUgpUb2lLQlZsV1o4akhaQWQyZ28yeCtlWHNFY3hQTVdFTFB5dnB1N1gweDkwaEtxRlp4OWRyR1RwZkdMd21nNXB0CkwydnIwM3FUVzJPdVdkMU5DMExDaWE2SFEzSlo4UnZJN2FDRUNVZkhqb0lsaGM4d0RkUytEbjdxM0RCQVh3SXUKRlREMlk4eGVZWlZqNzFKM3pRcjNMdGxScnd1TmlZbnhwSEkyYlRZbm90RkpwZjdkZ0w0ckVDaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"group\\":\\"tap.linkerd.io\\",\\"groupPriorityMinimum\\":1000,\\"service\\":{\\"name\\":\\"tap\\",\\"namespace\\":\\"linkerd-viz\\"},\\"version\\":\\"v1alpha1\\",\\"versionPriority\\":100}}
",
      },
      "name": "v1alpha1.tap.linkerd.io",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apiregistration.k8s.io_v1-apiservice-default-v1alpha1.tap.linkerd.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "Server",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"Server\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"metrics-api\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"podSelector\\":{\\"matchLabels\\":{\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"}},\\"port\\":\\"http\\",\\"proxyProtocol\\":\\"HTTP/1\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "metrics-api",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-server-linkerd-viz-metrics-api.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "linkerd.io/v1alpha2",
    "kind": "ServiceProfile",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"linkerd.io/v1alpha2\\",\\"kind\\":\\"ServiceProfile\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"grafana.linkerd-viz.svc.cluster.local\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"routes\\":[{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/api/annotations\\"},\\"name\\":\\"GET /api/annotations\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/api/dashboards/tags\\"},\\"name\\":\\"GET /api/dashboards/tags\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/api/dashboards/uid/.*\\"},\\"name\\":\\"GET /api/dashboards/uid/{uid}\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/api/dashboard/.*\\"},\\"name\\":\\"GET /api/dashboard/{dashboard}\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/api/datasources/proxy/1/api/v1/series\\"},\\"name\\":\\"GET /api/datasources/proxy/1/api/v1/series\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/api/datasources/proxy/1/api/v1/query_range\\"},\\"name\\":\\"GET /api/datasources/proxy/1/api/v1/query_range\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/api/search\\"},\\"name\\":\\"GET /api/search\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/d/[^/]*/.*\\"},\\"name\\":\\"GET /d/{uid}/{dashboard-name}\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/public/build/.*\\\\\\\\.css\\"},\\"name\\":\\"GET /public/build/{style}.css\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/public/fonts/.*\\"},\\"name\\":\\"GET /public/fonts/{font}\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/public/img/.*\\"},\\"name\\":\\"GET /public/img/{img}\\"}]}}
",
      },
      "name": "grafana.linkerd-viz.svc.cluster.local",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/linkerd.io_v1alpha2-serviceprofile-linkerd-viz-grafana.linkerd-viz.svc.cluster.local.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"linkerd-linkerd-viz-tap-auth-reader\\",\\"namespace\\":\\"kube-system\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"extension-apiserver-authentication-reader\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"tap\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "linkerd-linkerd-viz-tap-auth-reader",
      "namespace": "kube-system",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-kube-system-linkerd-linkerd-viz-tap-auth-reader.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-metrics-api\\"},\\"rules\\":[{\\"apiGroups\\":[\\"extensions\\",\\"apps\\"],\\"resources\\":[\\"daemonsets\\",\\"deployments\\",\\"replicasets\\",\\"statefulsets\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"extensions\\",\\"batch\\"],\\"resources\\":[\\"cronjobs\\",\\"jobs\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"pods\\",\\"endpoints\\",\\"services\\",\\"replicationcontrollers\\",\\"namespaces\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"linkerd.io\\"],\\"resources\\":[\\"serviceprofiles\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"split.smi-spec.io\\"],\\"resources\\":[\\"trafficsplits\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"policy.linkerd.io\\"],\\"resources\\":[\\"servers\\",\\"serverauthorizations\\"],\\"verbs\\":[\\"list\\",\\"get\\"]}]}
",
      },
      "name": "linkerd-linkerd-viz-metrics-api",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-viz-metrics-api.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"tap\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
      },
      "name": "tap",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-serviceaccount-linkerd-viz-tap.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-web-check\\"},\\"rules\\":[{\\"apiGroups\\":[\\"rbac.authorization.k8s.io\\"],\\"resources\\":[\\"clusterroles\\",\\"clusterrolebindings\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"apiextensions.k8s.io\\"],\\"resources\\":[\\"customresourcedefinitions\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"admissionregistration.k8s.io\\"],\\"resources\\":[\\"mutatingwebhookconfigurations\\",\\"validatingwebhookconfigurations\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"linkerd.io\\"],\\"resources\\":[\\"serviceprofiles\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"nodes\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"apiregistration.k8s.io\\"],\\"resources\\":[\\"apiservices\\"],\\"verbs\\":[\\"get\\"]}]}
",
      },
      "name": "linkerd-linkerd-viz-web-check",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-viz-web-check.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "auth": "YWRtaW46JDJiJDEwJEEwS2pIb2oydlNhMFhOeFVyU0RLbGUzcHk5SHE5c2xVbG51M3ZUeXJnWlZWa2d2cDJZMWUu",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"auth\\":\\"YWRtaW46JDJiJDEwJEEwS2pIb2oydlNhMFhOeFVyU0RLbGUzcHk5SHE5c2xVbG51M3ZUeXJnWlZWa2d2cDJZMWUu\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-viz-ingress-auth\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
      },
      "name": "linkerd-viz-ingress-auth",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-secret-linkerd-viz-linkerd-viz-ingress-auth.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "prometheus.yml": "global:
  evaluation_interval: 10s
  scrape_interval: 10s
  scrape_timeout: 10s

rule_files:
- /etc/prometheus/*_rules.yml
- /etc/prometheus/*_rules.yaml

scrape_configs:
- job_name: 'prometheus'
  static_configs:
  - targets: ['localhost:9090']

- job_name: 'grafana'
  kubernetes_sd_configs:
  - role: pod
    namespaces:
      names: ['linkerd-viz']
  relabel_configs:
  - source_labels:
    - __meta_kubernetes_pod_container_name
    action: keep
    regex: ^grafana$

#  Required for: https://grafana.com/grafana/dashboards/315
- job_name: 'kubernetes-nodes-cadvisor'
  scheme: https
  tls_config:
    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    insecure_skip_verify: true
  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  kubernetes_sd_configs:
  - role: node
  relabel_configs:
  - action: labelmap
    regex: __meta_kubernetes_node_label_(.+)
  - target_label: __address__
    replacement: kubernetes.default.svc:443
  - source_labels: [__meta_kubernetes_node_name]
    regex: (.+)
    target_label: __metrics_path__
    replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
  metric_relabel_configs:
  - source_labels: [__name__]
    regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
    action: keep
  - source_labels: [__name__]
    regex: 'container_memory_failures_total' # unneeded large metric
    action: drop

- job_name: 'linkerd-controller'
  kubernetes_sd_configs:
  - role: pod
    namespaces:
      names:
      - 'linkerd'
      - 'linkerd-viz'
  relabel_configs:
  - source_labels:
    - __meta_kubernetes_pod_container_port_name
    action: keep
    regex: admin-http
  - source_labels: [__meta_kubernetes_pod_container_name]
    action: replace
    target_label: component

- job_name: 'linkerd-service-mirror'
  kubernetes_sd_configs:
  - role: pod
  relabel_configs:
  - source_labels:
    - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
    - __meta_kubernetes_pod_container_port_name
    action: keep
    regex: linkerd-service-mirror;admin-http$
  - source_labels: [__meta_kubernetes_pod_container_name]
    action: replace
    target_label: component

- job_name: 'linkerd-proxy'
  kubernetes_sd_configs:
  - role: pod
  relabel_configs:
  - source_labels:
    - __meta_kubernetes_pod_container_name
    - __meta_kubernetes_pod_container_port_name
    - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
    action: keep
    regex: ^linkerd-proxy;linkerd-admin;linkerd$
  - source_labels: [__meta_kubernetes_namespace]
    action: replace
    target_label: namespace
  - source_labels: [__meta_kubernetes_pod_name]
    action: replace
    target_label: pod
  # special case k8s' \\"job\\" label, to not interfere with prometheus' \\"job\\"
  # label
  # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
  # k8s_job=foo
  - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
    action: replace
    target_label: k8s_job
  # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
  - action: labeldrop
    regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
  # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
  # deployment=foo
  - action: labelmap
    regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
  # drop all labels that we just made copies of in the previous labelmap
  - action: labeldrop
    regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
  # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
  # foo=bar
  - action: labelmap
    regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
  # Copy all pod labels to tmp labels
  - action: labelmap
    regex: __meta_kubernetes_pod_label_(.+)
    replacement: __tmp_pod_label_$1
  # Take \`linkerd_io_\` prefixed labels and copy them without the prefix
  - action: labelmap
    regex: __tmp_pod_label_linkerd_io_(.+)
    replacement:  __tmp_pod_label_$1
  # Drop the \`linkerd_io_\` originals
  - action: labeldrop
    regex: __tmp_pod_label_linkerd_io_(.+)
  # Copy tmp labels into real labels
  - action: labelmap
    regex: __tmp_pod_label_(.+)",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"prometheus.yml\\":\\"global:\\\\n  evaluation_interval: 10s\\\\n  scrape_interval: 10s\\\\n  scrape_timeout: 10s\\\\n\\\\nrule_files:\\\\n- /etc/prometheus/*_rules.yml\\\\n- /etc/prometheus/*_rules.yaml\\\\n\\\\nscrape_configs:\\\\n- job_name: 'prometheus'\\\\n  static_configs:\\\\n  - targets: ['localhost:9090']\\\\n\\\\n- job_name: 'grafana'\\\\n  kubernetes_sd_configs:\\\\n  - role: pod\\\\n    namespaces:\\\\n      names: ['linkerd-viz']\\\\n  relabel_configs:\\\\n  - source_labels:\\\\n    - __meta_kubernetes_pod_container_name\\\\n    action: keep\\\\n    regex: ^grafana$\\\\n\\\\n#  Required for: https://grafana.com/grafana/dashboards/315\\\\n- job_name: 'kubernetes-nodes-cadvisor'\\\\n  scheme: https\\\\n  tls_config:\\\\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\\\\n    insecure_skip_verify: true\\\\n  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\\\\n  kubernetes_sd_configs:\\\\n  - role: node\\\\n  relabel_configs:\\\\n  - action: labelmap\\\\n    regex: __meta_kubernetes_node_label_(.+)\\\\n  - target_label: __address__\\\\n    replacement: kubernetes.default.svc:443\\\\n  - source_labels: [__meta_kubernetes_node_name]\\\\n    regex: (.+)\\\\n    target_label: __metrics_path__\\\\n    replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor\\\\n  metric_relabel_configs:\\\\n  - source_labels: [__name__]\\\\n    regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'\\\\n    action: keep\\\\n  - source_labels: [__name__]\\\\n    regex: 'container_memory_failures_total' # unneeded large metric\\\\n    action: drop\\\\n\\\\n- job_name: 'linkerd-controller'\\\\n  kubernetes_sd_configs:\\\\n  - role: pod\\\\n    namespaces:\\\\n      names:\\\\n      - 'linkerd'\\\\n      - 'linkerd-viz'\\\\n  relabel_configs:\\\\n  - source_labels:\\\\n    - __meta_kubernetes_pod_container_port_name\\\\n    action: keep\\\\n    regex: admin-http\\\\n  - source_labels: [__meta_kubernetes_pod_container_name]\\\\n    action: replace\\\\n    target_label: component\\\\n\\\\n- job_name: 'linkerd-service-mirror'\\\\n  kubernetes_sd_configs:\\\\n  - role: pod\\\\n  relabel_configs:\\\\n  - source_labels:\\\\n    - __meta_kubernetes_pod_label_linkerd_io_control_plane_component\\\\n    - __meta_kubernetes_pod_container_port_name\\\\n    action: keep\\\\n    regex: linkerd-service-mirror;admin-http$\\\\n  - source_labels: [__meta_kubernetes_pod_container_name]\\\\n    action: replace\\\\n    target_label: component\\\\n\\\\n- job_name: 'linkerd-proxy'\\\\n  kubernetes_sd_configs:\\\\n  - role: pod\\\\n  relabel_configs:\\\\n  - source_labels:\\\\n    - __meta_kubernetes_pod_container_name\\\\n    - __meta_kubernetes_pod_container_port_name\\\\n    - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns\\\\n    action: keep\\\\n    regex: ^linkerd-proxy;linkerd-admin;linkerd$\\\\n  - source_labels: [__meta_kubernetes_namespace]\\\\n    action: replace\\\\n    target_label: namespace\\\\n  - source_labels: [__meta_kubernetes_pod_name]\\\\n    action: replace\\\\n    target_label: pod\\\\n  # special case k8s' \\\\\\"job\\\\\\" label, to not interfere with prometheus' \\\\\\"job\\\\\\"\\\\n  # label\\\\n  # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =\\\\u003e\\\\n  # k8s_job=foo\\\\n  - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]\\\\n    action: replace\\\\n    target_label: k8s_job\\\\n  # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job\\\\n  - action: labeldrop\\\\n    regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job\\\\n  # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =\\\\u003e\\\\n  # deployment=foo\\\\n  - action: labelmap\\\\n    regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)\\\\n  # drop all labels that we just made copies of in the previous labelmap\\\\n  - action: labeldrop\\\\n    regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)\\\\n  # __meta_kubernetes_pod_label_linkerd_io_foo=bar =\\\\u003e\\\\n  # foo=bar\\\\n  - action: labelmap\\\\n    regex: __meta_kubernetes_pod_label_linkerd_io_(.+)\\\\n  # Copy all pod labels to tmp labels\\\\n  - action: labelmap\\\\n    regex: __meta_kubernetes_pod_label_(.+)\\\\n    replacement: __tmp_pod_label_$1\\\\n  # Take \`linkerd_io_\` prefixed labels and copy them without the prefix\\\\n  - action: labelmap\\\\n    regex: __tmp_pod_label_linkerd_io_(.+)\\\\n    replacement:  __tmp_pod_label_$1\\\\n  # Drop the \`linkerd_io_\` originals\\\\n  - action: labeldrop\\\\n    regex: __tmp_pod_label_linkerd_io_(.+)\\\\n  # Copy tmp labels into real labels\\\\n  - action: labelmap\\\\n    regex: __tmp_pod_label_(.+)\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"prometheus-config\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "prometheus-config",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-configmap-linkerd-viz-prometheus-config.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-prometheus\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-viz-prometheus\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"prometheus\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "linkerd-linkerd-viz-prometheus",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-prometheus.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap-injector\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap-injector\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"tap-injector\\",\\"port\\":443,\\"targetPort\\":\\"tap-injector\\"}],\\"selector\\":{\\"component\\":\\"tap-injector\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap-injector",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-service-linkerd-viz-tap-injector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "Server",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"Server\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"admin\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"podSelector\\":{\\"matchLabels\\":{\\"linkerd.io/extension\\":\\"viz\\"}},\\"port\\":\\"admin-http\\",\\"proxyProtocol\\":\\"HTTP/1\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "admin",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-server-linkerd-viz-admin.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-web-api\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\"],\\"verbs\\":[\\"list\\"]}]}
",
      },
      "name": "linkerd-linkerd-viz-web-api",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-viz-web-api.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "config.linkerd.io/proxy-await": "enabled",
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{\\"config.linkerd.io/proxy-await\\":\\"enabled\\",\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-viz\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-namespace-default-linkerd-viz.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"prometheus\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"admin-http\\",\\"port\\":9090,\\"targetPort\\":9090}],\\"selector\\":{\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "prometheus",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-service-linkerd-viz-prometheus.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "Server",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"Server\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap-api\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"podSelector\\":{\\"matchLabels\\":{\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\"}},\\"port\\":\\"apiserver\\",\\"proxyProtocol\\":\\"TLS\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap-api",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-server-linkerd-viz-tap-api.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": Object {
      "annotations": Object {
        "cert-manager.io/cluster-issuer": "letsencrypt-cluster-issuer",
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"networking.k8s.io/v1\\",\\"kind\\":\\"Ingress\\",\\"metadata\\":{\\"annotations\\":{\\"cert-manager.io/cluster-issuer\\":\\"letsencrypt-cluster-issuer\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-viz-ingress\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"ingressClassName\\":\\"nginx\\",\\"rules\\":[{\\"host\\":\\"linkerd.localhost:8080\\",\\"http\\":{\\"paths\\":[{\\"backend\\":{\\"service\\":{\\"name\\":\\"web\\",\\"port\\":{\\"number\\":8084}}},\\"path\\":\\"/\\",\\"pathType\\":\\"Prefix\\"}]}}],\\"tls\\":[{\\"hosts\\":[\\"linkerd.localhost:8080\\"],\\"secretName\\":\\"linkerd-nginx-ingress-tls\\"}]}}
",
      },
      "name": "linkerd-viz-ingress",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/networking.k8s.io_v1-ingress-linkerd-viz-linkerd-viz-ingress.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-web-admin\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-viz-tap-admin\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"web\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "linkerd-linkerd-viz-web-admin",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-web-admin.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "linkerd.io/v1alpha2",
    "kind": "ServiceProfile",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"linkerd.io/v1alpha2\\",\\"kind\\":\\"ServiceProfile\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"prometheus.linkerd-viz.svc.cluster.local\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"routes\\":[{\\"condition\\":{\\"method\\":\\"POST\\",\\"pathRegex\\":\\"/api/v1/query\\"},\\"name\\":\\"POST /api/v1/query\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/api/v1/query_range\\"},\\"name\\":\\"GET /api/v1/query_range\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/api/v1/series\\"},\\"name\\":\\"GET /api/v1/series\\"}]}}
",
      },
      "name": "prometheus.linkerd-viz.svc.cluster.local",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/linkerd.io_v1alpha2-serviceprofile-linkerd-viz-prometheus.linkerd-viz.svc.cluster.local.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"tap-injector\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
      },
      "name": "tap-injector",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-serviceaccount-linkerd-viz-tap-injector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "Server",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"Server\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap-injector\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap-injector-webhook\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"podSelector\\":{\\"matchLabels\\":{\\"component\\":\\"tap-injector\\",\\"linkerd.io/extension\\":\\"viz\\"}},\\"port\\":\\"tap-injector\\",\\"proxyProtocol\\":\\"TLS\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap-injector-webhook",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-server-linkerd-viz-tap-injector-webhook.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"metrics-api\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
      },
      "name": "metrics-api",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-serviceaccount-linkerd-viz-metrics-api.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "ServerAuthorization",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"ServerAuthorization\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"client\\":{\\"unauthenticated\\":true},\\"server\\":{\\"name\\":\\"tap-api\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-serverauthorization-linkerd-viz-tap.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd\\"},\\"name\\":\\"web\\",\\"namespace\\":\\"linkerd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"linkerd-config\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"get\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\",\\"configmaps\\"],\\"verbs\\":[\\"get\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"serviceaccounts\\",\\"pods\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"apps\\"],\\"resources\\":[\\"replicasets\\"],\\"verbs\\":[\\"list\\"]}]}
",
      },
      "name": "web",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-role-linkerd-web.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"metrics-api\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"metrics-api\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/config\\":\\"951a7b61ff59229914ca604c671353e5fdc0eda710bde2bfbb50c9225225babe\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"-controller-namespace=linkerd\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-cluster-domain=cluster.local\\",\\"-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/metrics-api:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9995},\\"initialDelaySeconds\\":10},\\"name\\":\\"metrics-api\\",\\"ports\\":[{\\"containerPort\\":8085,\\"name\\":\\"http\\"},{\\"containerPort\\":9995,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9995}},\\"securityContext\\":{\\"runAsUser\\":2103}}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"metrics-api\\"}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "metrics-api",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-metrics-api.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/config": "951a7b61ff59229914ca604c671353e5fdc0eda710bde2bfbb50c9225225babe",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "labels": Object {
            "component": "metrics-api",
            "linkerd.io/extension": "viz",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "-controller-namespace=linkerd",
                "-log-level=info",
                "-log-format=plain",
                "-cluster-domain=cluster.local",
                "-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/metrics-api:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9995,
                },
                "initialDelaySeconds": 10,
              },
              "name": "metrics-api",
              "ports": Array [
                Object {
                  "containerPort": 8085,
                  "name": "http",
                },
                Object {
                  "containerPort": 9995,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9995,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "metrics-api",
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"web\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
      },
      "name": "web",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-serviceaccount-linkerd-viz-web.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-prometheus\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"nodes\\",\\"nodes/proxy\\",\\"pods\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]}]}
",
      },
      "name": "linkerd-linkerd-viz-prometheus",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-viz-prometheus.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"tap\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"grpc\\",\\"port\\":8088,\\"targetPort\\":8088},{\\"name\\":\\"apiserver\\",\\"port\\":443,\\"targetPort\\":\\"apiserver\\"}],\\"selector\\":{\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-service-linkerd-viz-tap.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"web\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"web\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"-linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085\\",\\"-cluster-domain=cluster.local\\",\\"-grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000\\",\\"-controller-namespace=linkerd\\",\\"-viz-namespace=linkerd-viz\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-enforced-host=^(localhost|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|web\\\\\\\\.linkerd-viz\\\\\\\\.svc\\\\\\\\.cluster\\\\\\\\.local|web\\\\\\\\.linkerd-viz\\\\\\\\.svc|\\\\\\\\[::1\\\\\\\\])(:\\\\\\\\d+)?$\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/web:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9994},\\"initialDelaySeconds\\":10},\\"name\\":\\"web\\",\\"ports\\":[{\\"containerPort\\":8084,\\"name\\":\\"http\\"},{\\"containerPort\\":9994,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9994}},\\"securityContext\\":{\\"runAsUser\\":2103}}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"web\\"}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "web",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-web.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "labels": Object {
            "component": "web",
            "linkerd.io/extension": "viz",
            "namespace": "linkerd-viz",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "-linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085",
                "-cluster-domain=cluster.local",
                "-grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000",
                "-controller-namespace=linkerd",
                "-viz-namespace=linkerd-viz",
                "-log-level=info",
                "-log-format=plain",
                "-enforced-host=^(localhost|127\\\\.0\\\\.0\\\\.1|web\\\\.linkerd-viz\\\\.svc\\\\.cluster\\\\.local|web\\\\.linkerd-viz\\\\.svc|\\\\[::1\\\\])(:\\\\d+)?$",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/web:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9994,
                },
                "initialDelaySeconds": 10,
              },
              "name": "web",
              "ports": Array [
                Object {
                  "containerPort": 8084,
                  "name": "http",
                },
                Object {
                  "containerPort": 9994,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9994,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "web",
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"metrics-api\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"http\\",\\"port\\":8085,\\"targetPort\\":8085}],\\"selector\\":{\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "metrics-api",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-service-linkerd-viz-metrics-api.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-tap-injector\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-tap-injector\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"tap-injector\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "linkerd-tap-injector",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-tap-injector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "Server",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"Server\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"proxy-admin\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"podSelector\\":{\\"matchLabels\\":{\\"linkerd.io/extension\\":\\"viz\\"}},\\"port\\":\\"linkerd-admin\\",\\"proxyProtocol\\":\\"HTTP/1\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "proxy-admin",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-server-linkerd-viz-proxy-admin.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-web-check\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-viz-web-check\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"web\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "linkerd-linkerd-viz-web-check",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-web-check.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "ServerAuthorization",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"ServerAuthorization\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"metrics-api\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"client\\":{\\"meshTLS\\":{\\"serviceAccounts\\":[{\\"name\\":\\"web\\"},{\\"name\\":\\"prometheus\\"}]}},\\"server\\":{\\"name\\":\\"metrics-api\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "metrics-api",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-serverauthorization-linkerd-viz-metrics-api.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd\\"},\\"name\\":\\"web\\",\\"namespace\\":\\"linkerd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"web\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"web\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "web",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-linkerd-web.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "ServerAuthorization",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"ServerAuthorization\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"admin\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"client\\":{\\"unauthenticated\\":true},\\"server\\":{\\"name\\":\\"admin\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "admin",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-serverauthorization-linkerd-viz-admin.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-tap\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-viz-tap\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"tap\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "linkerd-linkerd-viz-tap",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-tap.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-tap-admin\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"tap.linkerd.io\\"],\\"resources\\":[\\"*\\"],\\"verbs\\":[\\"watch\\"]}]}
",
      },
      "name": "linkerd-linkerd-viz-tap-admin",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-viz-tap-admin.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"prometheus\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"prometheus\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"--log.level=info\\",\\"--log.format=logfmt\\",\\"--config.file=/etc/prometheus/prometheus.yml\\",\\"--storage.tsdb.path=/data\\",\\"--storage.tsdb.retention.time=6h\\"],\\"image\\":\\"prom/prometheus:v2.19.3\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/-/healthy\\",\\"port\\":9090},\\"initialDelaySeconds\\":30,\\"timeoutSeconds\\":30},\\"name\\":\\"prometheus\\",\\"ports\\":[{\\"containerPort\\":9090,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/-/ready\\",\\"port\\":9090},\\"initialDelaySeconds\\":30,\\"timeoutSeconds\\":30},\\"securityContext\\":{\\"runAsGroup\\":65534,\\"runAsNonRoot\\":true,\\"runAsUser\\":65534},\\"volumeMounts\\":[{\\"mountPath\\":\\"/data\\",\\"name\\":\\"data\\"},{\\"mountPath\\":\\"/etc/prometheus/prometheus.yml\\",\\"name\\":\\"prometheus-config\\",\\"readOnly\\":true,\\"subPath\\":\\"prometheus.yml\\"}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"securityContext\\":{\\"fsGroup\\":65534},\\"serviceAccountName\\":\\"prometheus\\",\\"volumes\\":[{\\"emptyDir\\":{},\\"name\\":\\"data\\"},{\\"configMap\\":{\\"name\\":\\"prometheus-config\\"},\\"name\\":\\"prometheus-config\\"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "prometheus",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-prometheus.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "labels": Object {
            "component": "prometheus",
            "linkerd.io/extension": "viz",
            "namespace": "linkerd-viz",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "--log.level=info",
                "--log.format=logfmt",
                "--config.file=/etc/prometheus/prometheus.yml",
                "--storage.tsdb.path=/data",
                "--storage.tsdb.retention.time=6h",
              ],
              "image": "prom/prometheus:v2.19.3",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/-/healthy",
                  "port": 9090,
                },
                "initialDelaySeconds": 30,
                "timeoutSeconds": 30,
              },
              "name": "prometheus",
              "ports": Array [
                Object {
                  "containerPort": 9090,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/-/ready",
                  "port": 9090,
                },
                "initialDelaySeconds": 30,
                "timeoutSeconds": 30,
              },
              "securityContext": Object {
                "runAsGroup": 65534,
                "runAsNonRoot": true,
                "runAsUser": 65534,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/data",
                  "name": "data",
                },
                Object {
                  "mountPath": "/etc/prometheus/prometheus.yml",
                  "name": "prometheus-config",
                  "readOnly": true,
                  "subPath": "prometheus.yml",
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "securityContext": Object {
            "fsGroup": 65534,
          },
          "serviceAccountName": "prometheus",
          "volumes": Array [
            Object {
              "emptyDir": Object {},
              "name": "data",
            },
            Object {
              "configMap": Object {
                "name": "prometheus-config",
              },
              "name": "prometheus-config",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"grafana\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
      },
      "name": "grafana",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-serviceaccount-linkerd-viz-grafana.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-metrics-api\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-viz-metrics-api\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"metrics-api\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "linkerd-linkerd-viz-metrics-api",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-metrics-api.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-web-api\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-viz-web-api\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"web\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "linkerd-linkerd-viz-web-api",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-web-api.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"grafana\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"grafana\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"GF_PATHS_DATA\\",\\"value\\":\\"/data\\"},{\\"name\\":\\"GODEBUG\\",\\"value\\":\\"netdns=go\\"}],\\"image\\":\\"cr.l5d.io/linkerd/grafana:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/api/health\\",\\"port\\":3000},\\"initialDelaySeconds\\":30},\\"name\\":\\"grafana\\",\\"ports\\":[{\\"containerPort\\":3000,\\"name\\":\\"http\\"}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/api/health\\",\\"port\\":3000}},\\"securityContext\\":{\\"runAsUser\\":472},\\"volumeMounts\\":[{\\"mountPath\\":\\"/data\\",\\"name\\":\\"data\\"},{\\"mountPath\\":\\"/etc/grafana\\",\\"name\\":\\"grafana-config\\",\\"readOnly\\":true}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"grafana\\",\\"volumes\\":[{\\"emptyDir\\":{},\\"name\\":\\"data\\"},{\\"configMap\\":{\\"items\\":[{\\"key\\":\\"grafana.ini\\",\\"path\\":\\"grafana.ini\\"},{\\"key\\":\\"datasources.yaml\\",\\"path\\":\\"provisioning/datasources/datasources.yaml\\"},{\\"key\\":\\"dashboards.yaml\\",\\"path\\":\\"provisioning/dashboards/dashboards.yaml\\"}],\\"name\\":\\"grafana-config\\"},\\"name\\":\\"grafana-config\\"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "grafana",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-grafana.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "labels": Object {
            "component": "grafana",
            "linkerd.io/extension": "viz",
            "namespace": "linkerd-viz",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "GF_PATHS_DATA",
                  "value": "/data",
                },
                Object {
                  "name": "GODEBUG",
                  "value": "netdns=go",
                },
              ],
              "image": "cr.l5d.io/linkerd/grafana:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/api/health",
                  "port": 3000,
                },
                "initialDelaySeconds": 30,
              },
              "name": "grafana",
              "ports": Array [
                Object {
                  "containerPort": 3000,
                  "name": "http",
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/api/health",
                  "port": 3000,
                },
              },
              "securityContext": Object {
                "runAsUser": 472,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/data",
                  "name": "data",
                },
                Object {
                  "mountPath": "/etc/grafana",
                  "name": "grafana-config",
                  "readOnly": true,
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "grafana",
          "volumes": Array [
            Object {
              "emptyDir": Object {},
              "name": "data",
            },
            Object {
              "configMap": Object {
                "items": Array [
                  Object {
                    "key": "grafana.ini",
                    "path": "grafana.ini",
                  },
                  Object {
                    "key": "datasources.yaml",
                    "path": "provisioning/datasources/datasources.yaml",
                  },
                  Object {
                    "key": "dashboards.yaml",
                    "path": "provisioning/dashboards/dashboards.yaml",
                  },
                ],
                "name": "grafana-config",
              },
              "name": "grafana-config",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "linkerd.io/v1alpha2",
    "kind": "ServiceProfile",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"linkerd.io/v1alpha2\\",\\"kind\\":\\"ServiceProfile\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"metrics-api.linkerd-viz.svc.cluster.local\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"routes\\":[{\\"condition\\":{\\"method\\":\\"POST\\",\\"pathRegex\\":\\"/api/v1/StatSummary\\"},\\"name\\":\\"POST /api/v1/StatSummary\\"},{\\"condition\\":{\\"method\\":\\"POST\\",\\"pathRegex\\":\\"/api/v1/TopRoutes\\"},\\"name\\":\\"POST /api/v1/TopRoutes\\"},{\\"condition\\":{\\"method\\":\\"POST\\",\\"pathRegex\\":\\"/api/v1/ListPods\\"},\\"name\\":\\"POST /api/v1/ListPods\\"},{\\"condition\\":{\\"method\\":\\"POST\\",\\"pathRegex\\":\\"/api/v1/ListServices\\"},\\"name\\":\\"POST /api/v1/ListServices\\"},{\\"condition\\":{\\"method\\":\\"POST\\",\\"pathRegex\\":\\"/api/v1/SelfCheck\\"},\\"name\\":\\"POST /api/v1/SelfCheck\\"},{\\"condition\\":{\\"method\\":\\"POST\\",\\"pathRegex\\":\\"/api/v1/Gateways\\"},\\"name\\":\\"POST /api/v1/Gateways\\"},{\\"condition\\":{\\"method\\":\\"POST\\",\\"pathRegex\\":\\"/api/v1/Edges\\"},\\"name\\":\\"POST /api/v1/Edges\\"}]}}
",
      },
      "name": "metrics-api.linkerd-viz.svc.cluster.local",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/linkerd.io_v1alpha2-serviceprofile-linkerd-viz-metrics-api.linkerd-viz.svc.cluster.local.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-tap-injector\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]}]}
",
      },
      "name": "linkerd-tap-injector",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-tap-injector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-tap\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"pods\\",\\"services\\",\\"replicationcontrollers\\",\\"namespaces\\",\\"nodes\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"extensions\\",\\"apps\\"],\\"resources\\":[\\"daemonsets\\",\\"deployments\\",\\"replicasets\\",\\"statefulsets\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"extensions\\",\\"batch\\"],\\"resources\\":[\\"cronjobs\\",\\"jobs\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]}]}
",
      },
      "name": "linkerd-linkerd-viz-tap",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-viz-tap.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database\\",\\"namespace\\":\\"applications\\"},\\"secrets\\":[{\\"name\\":\\"graphql-mongo-database\\"}]}
",
      },
      "name": "graphql-mongo-database",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-serviceaccount-applications-graphql-mongo-database.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "ping_liveness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\\"$(< \\"\${REDIS_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h localhost \\\\
    -p $REDIS_PORT \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ \\"$response\\" != \\"PONG\\" ] && [ \\"$responseFirstWord\\" != \\"LOADING\\" ] && [ \\"$responseFirstWord\\" != \\"MASTERDOWN\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_liveness_local_and_master.sh": "script_dir=\\"$(dirname \\"$0\\")\\"
exit_status=0
\\"$script_dir/ping_liveness_local.sh\\" $1 || exit_status=$?
\\"$script_dir/ping_liveness_master.sh\\" $1 || exit_status=$?
exit $exit_status",
      "ping_liveness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\\"$(< \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h $REDIS_MASTER_HOST \\\\
    -p $REDIS_MASTER_PORT_NUMBER \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ \\"$response\\" != \\"PONG\\" ] && [ \\"$responseFirstWord\\" != \\"LOADING\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_readiness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\\"$(< \\"\${REDIS_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h localhost \\\\
    -p $REDIS_PORT \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
if [ \\"$response\\" != \\"PONG\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_readiness_local_and_master.sh": "script_dir=\\"$(dirname \\"$0\\")\\"
exit_status=0
\\"$script_dir/ping_readiness_local.sh\\" $1 || exit_status=$?
\\"$script_dir/ping_readiness_master.sh\\" $1 || exit_status=$?
exit $exit_status",
      "ping_readiness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\\"$(< \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h $REDIS_MASTER_HOST \\\\
    -p $REDIS_MASTER_PORT_NUMBER \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
if [ \\"$response\\" != \\"PONG\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"ping_liveness_local.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h localhost \\\\\\\\\\\\n    -p $REDIS_PORT \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ] \\\\u0026\\\\u0026 [ \\\\\\"$responseFirstWord\\\\\\" != \\\\\\"LOADING\\\\\\" ] \\\\u0026\\\\u0026 [ \\\\\\"$responseFirstWord\\\\\\" != \\\\\\"MASTERDOWN\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\",\\"ping_liveness_local_and_master.sh\\":\\"script_dir=\\\\\\"$(dirname \\\\\\"$0\\\\\\")\\\\\\"\\\\nexit_status=0\\\\n\\\\\\"$script_dir/ping_liveness_local.sh\\\\\\" $1 || exit_status=$?\\\\n\\\\\\"$script_dir/ping_liveness_master.sh\\\\\\" $1 || exit_status=$?\\\\nexit $exit_status\\",\\"ping_liveness_master.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_MASTER_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_MASTER_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_MASTER_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_MASTER_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h $REDIS_MASTER_HOST \\\\\\\\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ] \\\\u0026\\\\u0026 [ \\\\\\"$responseFirstWord\\\\\\" != \\\\\\"LOADING\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\",\\"ping_readiness_local.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h localhost \\\\\\\\\\\\n    -p $REDIS_PORT \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\",\\"ping_readiness_local_and_master.sh\\":\\"script_dir=\\\\\\"$(dirname \\\\\\"$0\\\\\\")\\\\\\"\\\\nexit_status=0\\\\n\\\\\\"$script_dir/ping_readiness_local.sh\\\\\\" $1 || exit_status=$?\\\\n\\\\\\"$script_dir/ping_readiness_master.sh\\\\\\" $1 || exit_status=$?\\\\nexit $exit_status\\",\\"ping_readiness_master.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_MASTER_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_MASTER_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_MASTER_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_MASTER_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h $REDIS_MASTER_HOST \\\\\\\\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis-health\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "graphql-mongo-redis-health",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-configmap-applications-graphql-mongo-redis-health.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "mongodb-passwords": "anVuZ2J1bnUscGFzc3dvcmQxLHBhc3N3b3JkMg==",
      "mongodb-replica-set-key": "MkozZno3SlRmVA==",
      "mongodb-root-password": "ZXhhcmVyZW1wbGU=",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"mongodb-passwords\\":\\"anVuZ2J1bnUscGFzc3dvcmQxLHBhc3N3b3JkMg==\\",\\"mongodb-replica-set-key\\":\\"MkozZno3SlRmVA==\\",\\"mongodb-root-password\\":\\"ZXhhcmVyZW1wbGU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database\\",\\"namespace\\":\\"applications\\"},\\"type\\":\\"Opaque\\"}
",
      },
      "name": "graphql-mongo-database",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-secret-applications-graphql-mongo-database.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "type": "Opaque",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"StatefulSet\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"arbiter\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database-arbiter\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"arbiter\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/name\\":\\"mongodb\\"}},\\"serviceName\\":\\"graphql-mongo-database-arbiter-headless\\",\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"arbiter\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"arbiter\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/name\\":\\"mongodb\\"}},\\"namespaces\\":[\\"applications\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"MY_POD_NAME\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"MY_POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}},{\\"name\\":\\"K8S_SERVICE_NAME\\",\\"value\\":\\"graphql-mongo-database-arbiter-headless\\"},{\\"name\\":\\"MONGODB_REPLICA_SET_MODE\\",\\"value\\":\\"arbiter\\"},{\\"name\\":\\"MONGODB_INITIAL_PRIMARY_HOST\\",\\"value\\":\\"graphql-mongo-database-0.graphql-mongo-database.$(MY_POD_NAMESPACE).svc.cluster.local\\"},{\\"name\\":\\"MONGODB_REPLICA_SET_NAME\\",\\"value\\":\\"rs0\\"},{\\"name\\":\\"MONGODB_ADVERTISED_HOSTNAME\\",\\"value\\":\\"$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local\\"},{\\"name\\":\\"MONGODB_INITIAL_PRIMARY_ROOT_USER\\",\\"value\\":\\"example\\"},{\\"name\\":\\"MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"mongodb-root-password\\",\\"name\\":\\"graphql-mongo-database\\"}}},{\\"name\\":\\"MONGODB_REPLICA_SET_KEY\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"mongodb-replica-set-key\\",\\"name\\":\\"graphql-mongo-database\\"}}},{\\"name\\":\\"ALLOW_EMPTY_PASSWORD\\",\\"value\\":\\"no\\"}],\\"image\\":\\"docker.io/bitnami/mongodb:4.4.13-debian-10-r52\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":6,\\"initialDelaySeconds\\":30,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"tcpSocket\\":{\\"port\\":\\"mongodb\\"},\\"timeoutSeconds\\":5},\\"name\\":\\"mongodb-arbiter\\",\\"ports\\":[{\\"containerPort\\":27017,\\"name\\":\\"mongodb\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":6,\\"initialDelaySeconds\\":5,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"tcpSocket\\":{\\"port\\":\\"mongodb\\"},\\"timeoutSeconds\\":5},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsUser\\":1001}}],\\"securityContext\\":{\\"fsGroup\\":1001,\\"sysctls\\":[]},\\"serviceAccountName\\":\\"graphql-mongo-database\\"}}}}
",
      },
      "name": "graphql-mongo-database-arbiter",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/apps_v1-statefulset-applications-graphql-mongo-database-arbiter.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "arbiter",
            "app.kubernetes.io/instance": "graphql-mongo-database",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "mongodb",
            "helm.sh/chart": "mongodb-11.1.10",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "arbiter",
                        "app.kubernetes.io/instance": "graphql-mongo-database",
                        "app.kubernetes.io/name": "mongodb",
                      },
                    },
                    "namespaces": Array [
                      "applications",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "MY_POD_NAME",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "MY_POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                Object {
                  "name": "K8S_SERVICE_NAME",
                  "value": "graphql-mongo-database-arbiter-headless",
                },
                Object {
                  "name": "MONGODB_REPLICA_SET_MODE",
                  "value": "arbiter",
                },
                Object {
                  "name": "MONGODB_INITIAL_PRIMARY_HOST",
                  "value": "graphql-mongo-database-0.graphql-mongo-database.$(MY_POD_NAMESPACE).svc.cluster.local",
                },
                Object {
                  "name": "MONGODB_REPLICA_SET_NAME",
                  "value": "rs0",
                },
                Object {
                  "name": "MONGODB_ADVERTISED_HOSTNAME",
                  "value": "$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local",
                },
                Object {
                  "name": "MONGODB_INITIAL_PRIMARY_ROOT_USER",
                  "value": "example",
                },
                Object {
                  "name": "MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "mongodb-root-password",
                      "name": "graphql-mongo-database",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_REPLICA_SET_KEY",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "mongodb-replica-set-key",
                      "name": "graphql-mongo-database",
                    },
                  },
                },
                Object {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no",
                },
              ],
              "image": "docker.io/bitnami/mongodb:4.4.13-debian-10-r52",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": Object {
                  "port": "mongodb",
                },
                "timeoutSeconds": 5,
              },
              "name": "mongodb-arbiter",
              "ports": Array [
                Object {
                  "containerPort": 27017,
                  "name": "mongodb",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 6,
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": Object {
                  "port": "mongodb",
                },
                "timeoutSeconds": 5,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
            "sysctls": Array [],
          },
          "serviceAccountName": "graphql-mongo-database",
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"arbiter\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database-arbiter-headless\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"tcp-mongodb\\",\\"port\\":27017,\\"targetPort\\":\\"mongodb\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"arbiter\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/name\\":\\"mongodb\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "graphql-mongo-database-arbiter-headless",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-service-applications-graphql-mongo-database-arbiter-headless.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "graphql-mongo-redis",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-serviceaccount-applications-graphql-mongo-redis.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "APP_ENVIRONMENT": "bG9jYWw=",
      "APP_EXTERNAL_BASE_URL": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
      "APP_HOST": "MC4wLjAuMA==",
      "APP_PORT": "ODAwMA==",
      "MONGODB_HOST": "Z3JhcGhxbC1tb25nby1kYXRhYmFzZS5hcHBsaWNhdGlvbnM=",
      "MONGODB_NAME": "Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==",
      "MONGODB_PASSWORD": "anVuZ2J1bnU=",
      "MONGODB_PORT": "MjcwMTc=",
      "MONGODB_ROOT_PASSWORD": "ZXhhcmVyZW1wbGU=",
      "MONGODB_ROOT_USERNAME": "ZXhhbXBsZQ==",
      "MONGODB_SERVICE_NAME": "Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==",
      "MONGODB_STORAGE_CLASS": "bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu",
      "MONGODB_USERNAME": "ZXhhbXBsZW1t",
      "OAUTH_GITHUB_CLIENT_ID": "ODljMTkzNzRmN2U3YjViMzUxNjQ=",
      "OAUTH_GITHUB_CLIENT_SECRET": "MTI5NDg4Y2M5MmUyZDJmOTFlM2E1YTAyNDA4NjM5NmM0OGM2NTMzOQ==",
      "OAUTH_GOOGLE_CLIENT_ID": "ODU1MTc0MjA5NTQzLTZtMGYwODhlNTVkM21ldmhucjhiczBxamFwOGo2ZzBnLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29t",
      "OAUTH_GOOGLE_CLIENT_SECRET": "R09DU1BYLUNTMUpGaXNSSVNnZU4wSS13VGFWam8zNTJ6YlU=",
      "REDIS_HOST": "Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXIuYXBwbGljYXRpb25z",
      "REDIS_PASSWORD": "anVuZ2J1bnU=",
      "REDIS_PORT": "NjM3OQ==",
      "REDIS_SERVICE_NAME": "Z3JhcGhxbC1tb25nby1yZWRpcw==",
      "REDIS_SERVICE_NAME_WITH_SUFFIX": "Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXI=",
      "REDIS_USERNAME": "anVuZ2J1bnU=",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"APP_ENVIRONMENT\\":\\"bG9jYWw=\\",\\"APP_EXTERNAL_BASE_URL\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\",\\"APP_HOST\\":\\"MC4wLjAuMA==\\",\\"APP_PORT\\":\\"ODAwMA==\\",\\"MONGODB_HOST\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZS5hcHBsaWNhdGlvbnM=\\",\\"MONGODB_NAME\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==\\",\\"MONGODB_PASSWORD\\":\\"anVuZ2J1bnU=\\",\\"MONGODB_PORT\\":\\"MjcwMTc=\\",\\"MONGODB_ROOT_PASSWORD\\":\\"ZXhhcmVyZW1wbGU=\\",\\"MONGODB_ROOT_USERNAME\\":\\"ZXhhbXBsZQ==\\",\\"MONGODB_SERVICE_NAME\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==\\",\\"MONGODB_STORAGE_CLASS\\":\\"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu\\",\\"MONGODB_USERNAME\\":\\"ZXhhbXBsZW1t\\",\\"OAUTH_GITHUB_CLIENT_ID\\":\\"ODljMTkzNzRmN2U3YjViMzUxNjQ=\\",\\"OAUTH_GITHUB_CLIENT_SECRET\\":\\"MTI5NDg4Y2M5MmUyZDJmOTFlM2E1YTAyNDA4NjM5NmM0OGM2NTMzOQ==\\",\\"OAUTH_GOOGLE_CLIENT_ID\\":\\"ODU1MTc0MjA5NTQzLTZtMGYwODhlNTVkM21ldmhucjhiczBxamFwOGo2ZzBnLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29t\\",\\"OAUTH_GOOGLE_CLIENT_SECRET\\":\\"R09DU1BYLUNTMUpGaXNSSVNnZU4wSS13VGFWam8zNTJ6YlU=\\",\\"REDIS_HOST\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXIuYXBwbGljYXRpb25z\\",\\"REDIS_PASSWORD\\":\\"anVuZ2J1bnU=\\",\\"REDIS_PORT\\":\\"NjM3OQ==\\",\\"REDIS_SERVICE_NAME\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcw==\\",\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXI=\\",\\"REDIS_USERNAME\\":\\"anVuZ2J1bnU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"sealedsecrets.bitnami.com/managed\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"applications\\"}}
",
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-mongo",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-secret-applications-graphql-mongo.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"StatefulSet\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis-master\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/name\\":\\"redis\\"}},\\"serviceName\\":\\"graphql-mongo-redis-headless\\",\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/configmap\\":\\"6f57cf9208511916e80bd8064d393590a176097d1ff524e72b1f95587da02513\\",\\"checksum/health\\":\\"b1f770fa15f8bb15ac0176ba7a31391b52d924d5361b52cc3efee627e050e973\\",\\"checksum/scripts\\":\\"7f5a69f15dcba18a677b168f00b5496b0bef29e6d64ab5ced7c6f7e8ab8ee813\\",\\"checksum/secret\\":\\"cd0142dd7139f7c45a3bd1a57eccb67804d27c013d7e1e685fe35f610ae114f1\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/name\\":\\"redis\\"}},\\"namespaces\\":[\\"applications\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"-c\\",\\"/opt/bitnami/scripts/start-scripts/start-master.sh\\"],\\"command\\":[\\"/bin/bash\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"REDIS_REPLICATION_MODE\\",\\"value\\":\\"master\\"},{\\"name\\":\\"ALLOW_EMPTY_PASSWORD\\",\\"value\\":\\"no\\"},{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"graphql-mongo-redis\\"}}},{\\"name\\":\\"REDIS_TLS_ENABLED\\",\\"value\\":\\"no\\"},{\\"name\\":\\"REDIS_PORT\\",\\"value\\":\\"6379\\"}],\\"image\\":\\"docker.io/bitnami/redis:6.2.7-debian-10-r0\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"exec\\":{\\"command\\":[\\"sh\\",\\"-c\\",\\"/health/ping_liveness_local.sh 5\\"]},\\"failureThreshold\\":5,\\"initialDelaySeconds\\":20,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":6},\\"name\\":\\"redis\\",\\"ports\\":[{\\"containerPort\\":6379,\\"name\\":\\"redis\\"}],\\"readinessProbe\\":{\\"exec\\":{\\"command\\":[\\"sh\\",\\"-c\\",\\"/health/ping_readiness_local.sh 1\\"]},\\"failureThreshold\\":5,\\"initialDelaySeconds\\":20,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":2},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/opt/bitnami/scripts/start-scripts\\",\\"name\\":\\"start-scripts\\"},{\\"mountPath\\":\\"/health\\",\\"name\\":\\"health\\"},{\\"mountPath\\":\\"/data\\",\\"name\\":\\"redis-data\\"},{\\"mountPath\\":\\"/opt/bitnami/redis/mounted-etc\\",\\"name\\":\\"config\\"},{\\"mountPath\\":\\"/opt/bitnami/redis/etc/\\",\\"name\\":\\"redis-tmp-conf\\"},{\\"mountPath\\":\\"/tmp\\",\\"name\\":\\"tmp\\"}]}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"graphql-mongo-redis\\",\\"terminationGracePeriodSeconds\\":30,\\"volumes\\":[{\\"configMap\\":{\\"defaultMode\\":493,\\"name\\":\\"graphql-mongo-redis-scripts\\"},\\"name\\":\\"start-scripts\\"},{\\"configMap\\":{\\"defaultMode\\":493,\\"name\\":\\"graphql-mongo-redis-health\\"},\\"name\\":\\"health\\"},{\\"configMap\\":{\\"name\\":\\"graphql-mongo-redis-configuration\\"},\\"name\\":\\"config\\"},{\\"emptyDir\\":{},\\"name\\":\\"redis-tmp-conf\\"},{\\"emptyDir\\":{},\\"name\\":\\"tmp\\"}]}},\\"updateStrategy\\":{\\"rollingUpdate\\":{},\\"type\\":\\"RollingUpdate\\"},\\"volumeClaimTemplates\\":[{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/name\\":\\"redis\\"},\\"name\\":\\"redis-data\\"},\\"spec\\":{\\"accessModes\\":[\\"ReadWriteOnce\\"],\\"resources\\":{\\"requests\\":{\\"storage\\":\\"8Gi\\"}}}}]}}
",
      },
      "name": "graphql-mongo-redis-master",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/apps_v1-statefulset-applications-graphql-mongo-redis-master.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/configmap": "6f57cf9208511916e80bd8064d393590a176097d1ff524e72b1f95587da02513",
            "checksum/health": "b1f770fa15f8bb15ac0176ba7a31391b52d924d5361b52cc3efee627e050e973",
            "checksum/scripts": "7f5a69f15dcba18a677b168f00b5496b0bef29e6d64ab5ced7c6f7e8ab8ee813",
            "checksum/secret": "cd0142dd7139f7c45a3bd1a57eccb67804d27c013d7e1e685fe35f610ae114f1",
          },
          "labels": Object {
            "app.kubernetes.io/component": "master",
            "app.kubernetes.io/instance": "redis",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "redis",
            "helm.sh/chart": "redis-16.8.9",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "master",
                        "app.kubernetes.io/instance": "redis",
                        "app.kubernetes.io/name": "redis",
                      },
                    },
                    "namespaces": Array [
                      "applications",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-master.sh",
              ],
              "command": Array [
                "/bin/bash",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "REDIS_REPLICATION_MODE",
                  "value": "master",
                },
                Object {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no",
                },
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "graphql-mongo-redis",
                    },
                  },
                },
                Object {
                  "name": "REDIS_TLS_ENABLED",
                  "value": "no",
                },
                Object {
                  "name": "REDIS_PORT",
                  "value": "6379",
                },
              ],
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "sh",
                    "-c",
                    "/health/ping_liveness_local.sh 5",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 6,
              },
              "name": "redis",
              "ports": Array [
                Object {
                  "containerPort": 6379,
                  "name": "redis",
                },
              ],
              "readinessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "sh",
                    "-c",
                    "/health/ping_readiness_local.sh 1",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/opt/bitnami/scripts/start-scripts",
                  "name": "start-scripts",
                },
                Object {
                  "mountPath": "/health",
                  "name": "health",
                },
                Object {
                  "mountPath": "/data",
                  "name": "redis-data",
                },
                Object {
                  "mountPath": "/opt/bitnami/redis/mounted-etc",
                  "name": "config",
                },
                Object {
                  "mountPath": "/opt/bitnami/redis/etc/",
                  "name": "redis-tmp-conf",
                },
                Object {
                  "mountPath": "/tmp",
                  "name": "tmp",
                },
              ],
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "graphql-mongo-redis",
          "terminationGracePeriodSeconds": 30,
          "volumes": Array [
            Object {
              "configMap": Object {
                "defaultMode": 493,
                "name": "graphql-mongo-redis-scripts",
              },
              "name": "start-scripts",
            },
            Object {
              "configMap": Object {
                "defaultMode": 493,
                "name": "graphql-mongo-redis-health",
              },
              "name": "health",
            },
            Object {
              "configMap": Object {
                "name": "graphql-mongo-redis-configuration",
              },
              "name": "config",
            },
            Object {
              "emptyDir": Object {},
              "name": "redis-tmp-conf",
            },
            Object {
              "emptyDir": Object {},
              "name": "tmp",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "master.conf": "dir /data
# User-supplied master configuration:
rename-command FLUSHDB \\"\\"
rename-command FLUSHALL \\"\\"
# End of master configuration",
      "redis.conf": "# User-supplied common configuration:
# Enable AOF https://redis.io/topics/persistence#append-only-file
appendonly yes
# Disable RDB persistence, AOF persistence already enabled.
save \\"\\"
# End of common configuration",
      "replica.conf": "dir /data
slave-read-only yes
# User-supplied replica configuration:
rename-command FLUSHDB \\"\\"
rename-command FLUSHALL \\"\\"
# End of replica configuration",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"master.conf\\":\\"dir /data\\\\n# User-supplied master configuration:\\\\nrename-command FLUSHDB \\\\\\"\\\\\\"\\\\nrename-command FLUSHALL \\\\\\"\\\\\\"\\\\n# End of master configuration\\",\\"redis.conf\\":\\"# User-supplied common configuration:\\\\n# Enable AOF https://redis.io/topics/persistence#append-only-file\\\\nappendonly yes\\\\n# Disable RDB persistence, AOF persistence already enabled.\\\\nsave \\\\\\"\\\\\\"\\\\n# End of common configuration\\",\\"replica.conf\\":\\"dir /data\\\\nslave-read-only yes\\\\n# User-supplied replica configuration:\\\\nrename-command FLUSHDB \\\\\\"\\\\\\"\\\\nrename-command FLUSHALL \\\\\\"\\\\\\"\\\\n# End of replica configuration\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis-configuration\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "graphql-mongo-redis-configuration",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-configmap-applications-graphql-mongo-redis-configuration.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "start-master.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\\"$(< \\"\${REDIS_PASSWORD_FILE}\\")\\"
if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
fi
if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
fi
ARGS=(\\"--port\\" \\"\${REDIS_PORT}\\")
ARGS+=(\\"--requirepass\\" \\"\${REDIS_PASSWORD}\\")
ARGS+=(\\"--masterauth\\" \\"\${REDIS_PASSWORD}\\")
ARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/redis.conf\\")
ARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/master.conf\\")
exec redis-server \\"\${ARGS[@]}\\"
",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"start-master.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\nif [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then\\\\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\\\\nfi\\\\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\\\\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\\\\nfi\\\\nARGS=(\\\\\\"--port\\\\\\" \\\\\\"\${REDIS_PORT}\\\\\\")\\\\nARGS+=(\\\\\\"--requirepass\\\\\\" \\\\\\"\${REDIS_PASSWORD}\\\\\\")\\\\nARGS+=(\\\\\\"--masterauth\\\\\\" \\\\\\"\${REDIS_PASSWORD}\\\\\\")\\\\nARGS+=(\\\\\\"--include\\\\\\" \\\\\\"/opt/bitnami/redis/etc/redis.conf\\\\\\")\\\\nARGS+=(\\\\\\"--include\\\\\\" \\\\\\"/opt/bitnami/redis/etc/master.conf\\\\\\")\\\\nexec redis-server \\\\\\"\${ARGS[@]}\\\\\\"\\\\n\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis-scripts\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "graphql-mongo-redis-scripts",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-configmap-applications-graphql-mongo-redis-scripts.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "setup-hidden.sh": "#!/bin/bash

. /opt/bitnami/scripts/mongodb-env.sh

echo \\"Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME\\"
echo \\"Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER\\"
echo \\"Configuring node as a hidden node\\"
export MONGODB_REPLICA_SET_MODE=\\"hidden\\"
export MONGODB_INITIAL_PRIMARY_ROOT_USER=\\"$MONGODB_ROOT_USER\\"
export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=\\"$MONGODB_ROOT_PASSWORD\\"
export MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\\"$MONGODB_PORT_NUMBER\\"
export MONGODB_ROOT_PASSWORD=\\"\\"
export MONGODB_EXTRA_USERNAMES=\\"\\"
export MONGODB_EXTRA_DATABASES=\\"\\"
export MONGODB_EXTRA_PASSWORDS=\\"\\"
export MONGODB_ROOT_PASSWORD_FILE=\\"\\"
export MONGODB_EXTRA_USERNAMES_FILE=\\"\\"
export MONGODB_EXTRA_DATABASES_FILE=\\"\\"
export MONGODB_EXTRA_PASSWORDS_FILE=\\"\\"
exec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh",
      "setup.sh": "#!/bin/bash

. /opt/bitnami/scripts/mongodb-env.sh
. /opt/bitnami/scripts/libfs.sh
. /opt/bitnami/scripts/liblog.sh
. /opt/bitnami/scripts/libvalidations.sh

if is_empty_value \\"$MONGODB_ADVERTISED_PORT_NUMBER\\"; then
  export MONGODB_ADVERTISED_PORT_NUMBER=\\"$MONGODB_PORT_NUMBER\\"
fi

info \\"Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME\\"
info \\"Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER\\"

# Check for existing replica set in case there is no data in the PVC
# This is for cases where the PVC is lost or for MongoDB caches without
# persistence
current_primary=\\"\\"
if is_dir_empty \\"\${MONGODB_DATA_DIR}/db\\"; then
  info \\"Data dir empty, checking if the replica set already exists\\"
  current_primary=$(mongo admin --host \\"graphql-mongo-database-0.graphql-mongo-database-headless.applications.svc.cluster.local:27017,graphql-mongo-database-1.graphql-mongo-database-headless.applications.svc.cluster.local:27017,graphql-mongo-database-2.graphql-mongo-database-headless.applications.svc.cluster.local:27017\\" --authenticationDatabase admin -u root -p $MONGODB_ROOT_PASSWORD --eval 'db.runCommand(\\"ismaster\\")' | awk -F\\\\\\" '/primary/ {print $4}')

  if ! is_empty_value \\"$current_primary\\"; then
    info \\"Detected existing primary: \${current_primary}\\"
  fi
fi

if ! is_empty_value \\"$current_primary\\" && [[ \\"$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER\\" == \\"$current_primary\\" ]]; then
    info \\"Advertised name matches current primary, configuring node as a primary\\"
    export MONGODB_REPLICA_SET_MODE=\\"primary\\"
elif ! is_empty_value \\"$current_primary\\" && [[ \\"$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER\\" != \\"$current_primary\\" ]]; then
    info \\"Current primary is different from this node. Configuring the node as replica of \${current_primary}\\"
    export MONGODB_REPLICA_SET_MODE=\\"secondary\\"
    export MONOGDB_INITIAL_PRIMARY_HOST=\\"\${current_primary%:*}\\"
    export MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\\"\${current_primary#*:}\\"
    export MONGODB_SET_SECONDARY_OK=\\"yes\\"
elif [[ \\"$MY_POD_NAME\\" = \\"graphql-mongo-database-0\\" ]]; then
    info \\"Pod name matches initial primary pod name, configuring node as a primary\\"
    export MONGODB_REPLICA_SET_MODE=\\"primary\\"
else
    info \\"Pod name doesn't match initial primary pod name, configuring node as a secondary\\"
    export MONGODB_REPLICA_SET_MODE=\\"secondary\\"
    export MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\\"$MONGODB_PORT_NUMBER\\"
fi

if [[ \\"$MONGODB_REPLICA_SET_MODE\\" == \\"secondary\\" ]]; then
    export MONGODB_INITIAL_PRIMARY_ROOT_USER=\\"$MONGODB_ROOT_USER\\"
    export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=\\"$MONGODB_ROOT_PASSWORD\\"
    export MONGODB_ROOT_PASSWORD=\\"\\"
    export MONGODB_EXTRA_USERNAMES=\\"\\"
    export MONGODB_EXTRA_DATABASES=\\"\\"
    export MONGODB_EXTRA_PASSWORDS=\\"\\"
    export MONGODB_ROOT_PASSWORD_FILE=\\"\\"
    export MONGODB_EXTRA_USERNAMES_FILE=\\"\\"
    export MONGODB_EXTRA_DATABASES_FILE=\\"\\"
    export MONGODB_EXTRA_PASSWORDS_FILE=\\"\\"
fi

exec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"setup-hidden.sh\\":\\"#!/bin/bash\\\\n\\\\n. /opt/bitnami/scripts/mongodb-env.sh\\\\n\\\\necho \\\\\\"Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME\\\\\\"\\\\necho \\\\\\"Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER\\\\\\"\\\\necho \\\\\\"Configuring node as a hidden node\\\\\\"\\\\nexport MONGODB_REPLICA_SET_MODE=\\\\\\"hidden\\\\\\"\\\\nexport MONGODB_INITIAL_PRIMARY_ROOT_USER=\\\\\\"$MONGODB_ROOT_USER\\\\\\"\\\\nexport MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=\\\\\\"$MONGODB_ROOT_PASSWORD\\\\\\"\\\\nexport MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\\\\\\"$MONGODB_PORT_NUMBER\\\\\\"\\\\nexport MONGODB_ROOT_PASSWORD=\\\\\\"\\\\\\"\\\\nexport MONGODB_EXTRA_USERNAMES=\\\\\\"\\\\\\"\\\\nexport MONGODB_EXTRA_DATABASES=\\\\\\"\\\\\\"\\\\nexport MONGODB_EXTRA_PASSWORDS=\\\\\\"\\\\\\"\\\\nexport MONGODB_ROOT_PASSWORD_FILE=\\\\\\"\\\\\\"\\\\nexport MONGODB_EXTRA_USERNAMES_FILE=\\\\\\"\\\\\\"\\\\nexport MONGODB_EXTRA_DATABASES_FILE=\\\\\\"\\\\\\"\\\\nexport MONGODB_EXTRA_PASSWORDS_FILE=\\\\\\"\\\\\\"\\\\nexec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh\\",\\"setup.sh\\":\\"#!/bin/bash\\\\n\\\\n. /opt/bitnami/scripts/mongodb-env.sh\\\\n. /opt/bitnami/scripts/libfs.sh\\\\n. /opt/bitnami/scripts/liblog.sh\\\\n. /opt/bitnami/scripts/libvalidations.sh\\\\n\\\\nif is_empty_value \\\\\\"$MONGODB_ADVERTISED_PORT_NUMBER\\\\\\"; then\\\\n  export MONGODB_ADVERTISED_PORT_NUMBER=\\\\\\"$MONGODB_PORT_NUMBER\\\\\\"\\\\nfi\\\\n\\\\ninfo \\\\\\"Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME\\\\\\"\\\\ninfo \\\\\\"Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER\\\\\\"\\\\n\\\\n# Check for existing replica set in case there is no data in the PVC\\\\n# This is for cases where the PVC is lost or for MongoDB caches without\\\\n# persistence\\\\ncurrent_primary=\\\\\\"\\\\\\"\\\\nif is_dir_empty \\\\\\"\${MONGODB_DATA_DIR}/db\\\\\\"; then\\\\n  info \\\\\\"Data dir empty, checking if the replica set already exists\\\\\\"\\\\n  current_primary=$(mongo admin --host \\\\\\"graphql-mongo-database-0.graphql-mongo-database-headless.applications.svc.cluster.local:27017,graphql-mongo-database-1.graphql-mongo-database-headless.applications.svc.cluster.local:27017,graphql-mongo-database-2.graphql-mongo-database-headless.applications.svc.cluster.local:27017\\\\\\" --authenticationDatabase admin -u root -p $MONGODB_ROOT_PASSWORD --eval 'db.runCommand(\\\\\\"ismaster\\\\\\")' | awk -F\\\\\\\\\\\\\\" '/primary/ {print $4}')\\\\n\\\\n  if ! is_empty_value \\\\\\"$current_primary\\\\\\"; then\\\\n    info \\\\\\"Detected existing primary: \${current_primary}\\\\\\"\\\\n  fi\\\\nfi\\\\n\\\\nif ! is_empty_value \\\\\\"$current_primary\\\\\\" \\\\u0026\\\\u0026 [[ \\\\\\"$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER\\\\\\" == \\\\\\"$current_primary\\\\\\" ]]; then\\\\n    info \\\\\\"Advertised name matches current primary, configuring node as a primary\\\\\\"\\\\n    export MONGODB_REPLICA_SET_MODE=\\\\\\"primary\\\\\\"\\\\nelif ! is_empty_value \\\\\\"$current_primary\\\\\\" \\\\u0026\\\\u0026 [[ \\\\\\"$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER\\\\\\" != \\\\\\"$current_primary\\\\\\" ]]; then\\\\n    info \\\\\\"Current primary is different from this node. Configuring the node as replica of \${current_primary}\\\\\\"\\\\n    export MONGODB_REPLICA_SET_MODE=\\\\\\"secondary\\\\\\"\\\\n    export MONOGDB_INITIAL_PRIMARY_HOST=\\\\\\"\${current_primary%:*}\\\\\\"\\\\n    export MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\\\\\\"\${current_primary#*:}\\\\\\"\\\\n    export MONGODB_SET_SECONDARY_OK=\\\\\\"yes\\\\\\"\\\\nelif [[ \\\\\\"$MY_POD_NAME\\\\\\" = \\\\\\"graphql-mongo-database-0\\\\\\" ]]; then\\\\n    info \\\\\\"Pod name matches initial primary pod name, configuring node as a primary\\\\\\"\\\\n    export MONGODB_REPLICA_SET_MODE=\\\\\\"primary\\\\\\"\\\\nelse\\\\n    info \\\\\\"Pod name doesn't match initial primary pod name, configuring node as a secondary\\\\\\"\\\\n    export MONGODB_REPLICA_SET_MODE=\\\\\\"secondary\\\\\\"\\\\n    export MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\\\\\\"$MONGODB_PORT_NUMBER\\\\\\"\\\\nfi\\\\n\\\\nif [[ \\\\\\"$MONGODB_REPLICA_SET_MODE\\\\\\" == \\\\\\"secondary\\\\\\" ]]; then\\\\n    export MONGODB_INITIAL_PRIMARY_ROOT_USER=\\\\\\"$MONGODB_ROOT_USER\\\\\\"\\\\n    export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=\\\\\\"$MONGODB_ROOT_PASSWORD\\\\\\"\\\\n    export MONGODB_ROOT_PASSWORD=\\\\\\"\\\\\\"\\\\n    export MONGODB_EXTRA_USERNAMES=\\\\\\"\\\\\\"\\\\n    export MONGODB_EXTRA_DATABASES=\\\\\\"\\\\\\"\\\\n    export MONGODB_EXTRA_PASSWORDS=\\\\\\"\\\\\\"\\\\n    export MONGODB_ROOT_PASSWORD_FILE=\\\\\\"\\\\\\"\\\\n    export MONGODB_EXTRA_USERNAMES_FILE=\\\\\\"\\\\\\"\\\\n    export MONGODB_EXTRA_DATABASES_FILE=\\\\\\"\\\\\\"\\\\n    export MONGODB_EXTRA_PASSWORDS_FILE=\\\\\\"\\\\\\"\\\\nfi\\\\n\\\\nexec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database-scripts\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "graphql-mongo-database-scripts",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-configmap-applications-graphql-mongo-database-scripts.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"StatefulSet\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"podManagementPolicy\\":\\"OrderedReady\\",\\"replicas\\":3,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/name\\":\\"mongodb\\"}},\\"serviceName\\":\\"graphql-mongo-database\\",\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/name\\":\\"mongodb\\"}},\\"namespaces\\":[\\"applications\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"command\\":[\\"/scripts/setup.sh\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"MY_POD_NAME\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"MY_POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}},{\\"name\\":\\"MY_POD_HOST_IP\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"status.hostIP\\"}}},{\\"name\\":\\"K8S_SERVICE_NAME\\",\\"value\\":\\"graphql-mongo-database\\"},{\\"name\\":\\"MONGODB_INITIAL_PRIMARY_HOST\\",\\"value\\":\\"graphql-mongo-database-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local\\"},{\\"name\\":\\"MONGODB_REPLICA_SET_NAME\\",\\"value\\":\\"rs0\\"},{\\"name\\":\\"MONGODB_ADVERTISED_HOSTNAME\\",\\"value\\":\\"$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local\\"},{\\"name\\":\\"MONGODB_EXTRA_USERNAMES\\",\\"value\\":\\"examplemm,username1,username2\\"},{\\"name\\":\\"MONGODB_EXTRA_DATABASES\\",\\"value\\":\\"graphql-mongo-database,db1,db2\\"},{\\"name\\":\\"MONGODB_EXTRA_PASSWORDS\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"mongodb-passwords\\",\\"name\\":\\"graphql-mongo-database\\"}}},{\\"name\\":\\"MONGODB_ROOT_USER\\",\\"value\\":\\"example\\"},{\\"name\\":\\"MONGODB_ROOT_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"mongodb-root-password\\",\\"name\\":\\"graphql-mongo-database\\"}}},{\\"name\\":\\"MONGODB_REPLICA_SET_KEY\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"mongodb-replica-set-key\\",\\"name\\":\\"graphql-mongo-database\\"}}},{\\"name\\":\\"ALLOW_EMPTY_PASSWORD\\",\\"value\\":\\"no\\"},{\\"name\\":\\"MONGODB_SYSTEM_LOG_VERBOSITY\\",\\"value\\":\\"0\\"},{\\"name\\":\\"MONGODB_DISABLE_SYSTEM_LOG\\",\\"value\\":\\"no\\"},{\\"name\\":\\"MONGODB_DISABLE_JAVASCRIPT\\",\\"value\\":\\"no\\"},{\\"name\\":\\"MONGODB_ENABLE_JOURNAL\\",\\"value\\":\\"yes\\"},{\\"name\\":\\"MONGODB_ENABLE_IPV6\\",\\"value\\":\\"no\\"},{\\"name\\":\\"MONGODB_ENABLE_DIRECTORY_PER_DB\\",\\"value\\":\\"no\\"}],\\"image\\":\\"docker.io/bitnami/mongodb:4.4.13-debian-10-r52\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"exec\\":{\\"command\\":[\\"mongo\\",\\"--disableImplicitSessions\\",\\"--eval\\",\\"db.adminCommand('ping')\\"]},\\"failureThreshold\\":6,\\"initialDelaySeconds\\":30,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":5},\\"name\\":\\"mongodb\\",\\"ports\\":[{\\"containerPort\\":27017,\\"name\\":\\"mongodb\\"}],\\"readinessProbe\\":{\\"exec\\":{\\"command\\":[\\"bash\\",\\"-ec\\",\\"# Run the proper check depending on the version\\\\n[[ $(mongo --version | grep \\\\\\"MongoDB shell\\\\\\") =~ ([0-9]+\\\\\\\\.[0-9]+\\\\\\\\.[0-9]+) ]] \\\\u0026\\\\u0026 VERSION=\${BASH_REMATCH[1]}\\\\n. /opt/bitnami/scripts/libversion.sh\\\\nVERSION_MAJOR=\\\\\\"$(get_sematic_version \\\\\\"$VERSION\\\\\\" 1)\\\\\\"\\\\nVERSION_MINOR=\\\\\\"$(get_sematic_version \\\\\\"$VERSION\\\\\\" 2)\\\\\\"\\\\nVERSION_PATCH=\\\\\\"$(get_sematic_version \\\\\\"$VERSION\\\\\\" 3)\\\\\\"\\\\nif [[ \\\\\\"$VERSION_MAJOR\\\\\\" -ge 4 ]] \\\\u0026\\\\u0026 [[ \\\\\\"$VERSION_MINOR\\\\\\" -ge 4 ]] \\\\u0026\\\\u0026 [[ \\\\\\"$VERSION_PATCH\\\\\\" -ge 2 ]]; then\\\\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'\\\\nelse\\\\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'\\\\nfi\\\\n\\"]},\\"failureThreshold\\":6,\\"initialDelaySeconds\\":5,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":5},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/bitnami/mongodb\\",\\"name\\":\\"datadir\\"},{\\"mountPath\\":\\"/scripts/setup.sh\\",\\"name\\":\\"scripts\\",\\"subPath\\":\\"setup.sh\\"}]}],\\"securityContext\\":{\\"fsGroup\\":1001,\\"sysctls\\":[]},\\"serviceAccountName\\":\\"graphql-mongo-database\\",\\"volumes\\":[{\\"configMap\\":{\\"defaultMode\\":493,\\"name\\":\\"graphql-mongo-database-scripts\\"},\\"name\\":\\"scripts\\"}]}},\\"updateStrategy\\":{\\"type\\":\\"RollingUpdate\\"},\\"volumeClaimTemplates\\":[{\\"metadata\\":{\\"name\\":\\"datadir\\"},\\"spec\\":{\\"accessModes\\":[\\"ReadWriteOnce\\"],\\"resources\\":{\\"requests\\":{\\"storage\\":\\"10Gi\\"}}}}]}}
",
      },
      "name": "graphql-mongo-database",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/apps_v1-statefulset-applications-graphql-mongo-database.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "mongodb",
            "app.kubernetes.io/instance": "graphql-mongo-database",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "mongodb",
            "helm.sh/chart": "mongodb-11.1.10",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "mongodb",
                        "app.kubernetes.io/instance": "graphql-mongo-database",
                        "app.kubernetes.io/name": "mongodb",
                      },
                    },
                    "namespaces": Array [
                      "applications",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "command": Array [
                "/scripts/setup.sh",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "MY_POD_NAME",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "MY_POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                Object {
                  "name": "MY_POD_HOST_IP",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "status.hostIP",
                    },
                  },
                },
                Object {
                  "name": "K8S_SERVICE_NAME",
                  "value": "graphql-mongo-database",
                },
                Object {
                  "name": "MONGODB_INITIAL_PRIMARY_HOST",
                  "value": "graphql-mongo-database-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local",
                },
                Object {
                  "name": "MONGODB_REPLICA_SET_NAME",
                  "value": "rs0",
                },
                Object {
                  "name": "MONGODB_ADVERTISED_HOSTNAME",
                  "value": "$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local",
                },
                Object {
                  "name": "MONGODB_EXTRA_USERNAMES",
                  "value": "examplemm,username1,username2",
                },
                Object {
                  "name": "MONGODB_EXTRA_DATABASES",
                  "value": "graphql-mongo-database,db1,db2",
                },
                Object {
                  "name": "MONGODB_EXTRA_PASSWORDS",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "mongodb-passwords",
                      "name": "graphql-mongo-database",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_ROOT_USER",
                  "value": "example",
                },
                Object {
                  "name": "MONGODB_ROOT_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "mongodb-root-password",
                      "name": "graphql-mongo-database",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_REPLICA_SET_KEY",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "mongodb-replica-set-key",
                      "name": "graphql-mongo-database",
                    },
                  },
                },
                Object {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no",
                },
                Object {
                  "name": "MONGODB_SYSTEM_LOG_VERBOSITY",
                  "value": "0",
                },
                Object {
                  "name": "MONGODB_DISABLE_SYSTEM_LOG",
                  "value": "no",
                },
                Object {
                  "name": "MONGODB_DISABLE_JAVASCRIPT",
                  "value": "no",
                },
                Object {
                  "name": "MONGODB_ENABLE_JOURNAL",
                  "value": "yes",
                },
                Object {
                  "name": "MONGODB_ENABLE_IPV6",
                  "value": "no",
                },
                Object {
                  "name": "MONGODB_ENABLE_DIRECTORY_PER_DB",
                  "value": "no",
                },
              ],
              "image": "docker.io/bitnami/mongodb:4.4.13-debian-10-r52",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "mongo",
                    "--disableImplicitSessions",
                    "--eval",
                    "db.adminCommand('ping')",
                  ],
                },
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "name": "mongodb",
              "ports": Array [
                Object {
                  "containerPort": 27017,
                  "name": "mongodb",
                },
              ],
              "readinessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "bash",
                    "-ec",
                    "# Run the proper check depending on the version
[[ $(mongo --version | grep \\"MongoDB shell\\") =~ ([0-9]+\\\\.[0-9]+\\\\.[0-9]+) ]] && VERSION=\${BASH_REMATCH[1]}
. /opt/bitnami/scripts/libversion.sh
VERSION_MAJOR=\\"$(get_sematic_version \\"$VERSION\\" 1)\\"
VERSION_MINOR=\\"$(get_sematic_version \\"$VERSION\\" 2)\\"
VERSION_PATCH=\\"$(get_sematic_version \\"$VERSION\\" 3)\\"
if [[ \\"$VERSION_MAJOR\\" -ge 4 ]] && [[ \\"$VERSION_MINOR\\" -ge 4 ]] && [[ \\"$VERSION_PATCH\\" -ge 2 ]]; then
    mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
else
    mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'
fi
",
                  ],
                },
                "failureThreshold": 6,
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/bitnami/mongodb",
                  "name": "datadir",
                },
                Object {
                  "mountPath": "/scripts/setup.sh",
                  "name": "scripts",
                  "subPath": "setup.sh",
                },
              ],
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
            "sysctls": Array [],
          },
          "serviceAccountName": "graphql-mongo-database",
          "volumes": Array [
            Object {
              "configMap": Object {
                "defaultMode": 493,
                "name": "graphql-mongo-database-scripts",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"kubectl.kubernetes.io/last-applied-configuration\\":\\"{\\\\\\"apiVersion\\\\\\":\\\\\\"apps/v1\\\\\\",\\\\\\"kind\\\\\\":\\\\\\"Deployment\\\\\\",\\\\\\"metadata\\\\\\":{\\\\\\"annotations\\\\\\":{\\\\\\"linkerd.io/inject\\\\\\":\\\\\\"enabled\\\\\\"},\\\\\\"labels\\\\\\":{\\\\\\"app.kubernetes.io/managed-by\\\\\\":\\\\\\"pulumi\\\\\\"},\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\",\\\\\\"namespace\\\\\\":\\\\\\"applications\\\\\\"},\\\\\\"spec\\\\\\":{\\\\\\"replicas\\\\\\":2,\\\\\\"selector\\\\\\":{\\\\\\"matchLabels\\\\\\":{\\\\\\"app\\\\\\":\\\\\\"graphql\\\\\\"}},\\\\\\"template\\\\\\":{\\\\\\"metadata\\\\\\":{\\\\\\"labels\\\\\\":{\\\\\\"app\\\\\\":\\\\\\"graphql\\\\\\"}},\\\\\\"spec\\\\\\":{\\\\\\"containers\\\\\\":[{\\\\\\"env\\\\\\":[{\\\\\\"name\\\\\\":\\\\\\"APP_ENVIRONMENT\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_ENVIRONMENT\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"APP_HOST\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_HOST\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"APP_PORT\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_PORT\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"APP_EXTERNAL_BASE_URL\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_EXTERNAL_BASE_URL\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"OAUTH_GITHUB_CLIENT_ID\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"OAUTH_GITHUB_CLIENT_ID\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"OAUTH_GITHUB_CLIENT_SECRET\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"OAUTH_GITHUB_CLIENT_SECRET\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"OAUTH_GOOGLE_CLIENT_ID\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"OAUTH_GOOGLE_CLIENT_ID\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"OAUTH_GOOGLE_CLIENT_SECRET\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"OAUTH_GOOGLE_CLIENT_SECRET\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_NAME\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_NAME\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_USERNAME\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_USERNAME\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_PASSWORD\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_PASSWORD\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_ROOT_USERNAME\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_ROOT_USERNAME\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_ROOT_PASSWORD\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_ROOT_PASSWORD\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_HOST\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_HOST\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_SERVICE_NAME\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_SERVICE_NAME\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_STORAGE_CLASS\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_STORAGE_CLASS\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_PORT\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_PORT\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"REDIS_USERNAME\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"REDIS_USERNAME\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"REDIS_PASSWORD\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"REDIS_PASSWORD\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"REDIS_HOST\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"REDIS_HOST\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"REDIS_SERVICE_NAME\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"REDIS_SERVICE_NAME\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"REDIS_PORT\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"REDIS_PORT\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}}],\\\\\\"image\\\\\\":\\\\\\"ghcr.io/oyelowo/graphql-mongo:master-f21d07e5b52e5fdc859482d526310efc78d9efea\\\\\\",\\\\\\"livenessProbe\\\\\\":{\\\\\\"failureThreshold\\\\\\":7,\\\\\\"httpGet\\\\\\":{\\\\\\"path\\\\\\":\\\\\\"/api/liveness\\\\\\",\\\\\\"port\\\\\\":8000},\\\\\\"initialDelaySeconds\\\\\\":300,\\\\\\"periodSeconds\\\\\\":10},\\\\\\"name\\\\\\":\\\\\\"graphql\\\\\\",\\\\\\"ports\\\\\\":[{\\\\\\"containerPort\\\\\\":8000,\\\\\\"name\\\\\\":\\\\\\"http\\\\\\"}],\\\\\\"readinessProbe\\\\\\":{\\\\\\"failureThreshold\\\\\\":7,\\\\\\"httpGet\\\\\\":{\\\\\\"path\\\\\\":\\\\\\"/api/healthz\\\\\\",\\\\\\"port\\\\\\":8000},\\\\\\"initialDelaySeconds\\\\\\":60,\\\\\\"periodSeconds\\\\\\":10},\\\\\\"resources\\\\\\":{\\\\\\"limits\\\\\\":{\\\\\\"cpu\\\\\\":\\\\\\"100m\\\\\\",\\\\\\"memory\\\\\\":\\\\\\"200Mi\\\\\\"},\\\\\\"requests\\\\\\":{\\\\\\"cpu\\\\\\":\\\\\\"100m\\\\\\",\\\\\\"memory\\\\\\":\\\\\\"70Mi\\\\\\"}},\\\\\\"volumeMounts\\\\\\":[]}],\\\\\\"imagePullSecrets\\\\\\":[{\\\\\\"name\\\\\\":\\\\\\"my-registry-key\\\\\\"}],\\\\\\"initContainers\\\\\\":[],\\\\\\"volumes\\\\\\":[]}}}}\\\\n\\",\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"graphql-mongo-http\\",\\"port\\":8000,\\"protocol\\":\\"TCP\\",\\"targetPort\\":8000}],\\"selector\\":{\\"app\\":\\"graphql\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "graphql-mongo",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-service-applications-graphql-mongo.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"replicas\\":2,\\"selector\\":{\\"matchLabels\\":{\\"app\\":\\"graphql\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app\\":\\"graphql\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"APP_ENVIRONMENT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_ENVIRONMENT\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"APP_HOST\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_HOST\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"APP_PORT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_PORT\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"APP_EXTERNAL_BASE_URL\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_EXTERNAL_BASE_URL\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"OAUTH_GITHUB_CLIENT_ID\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"OAUTH_GITHUB_CLIENT_ID\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"OAUTH_GITHUB_CLIENT_SECRET\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"OAUTH_GITHUB_CLIENT_SECRET\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"OAUTH_GOOGLE_CLIENT_ID\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"OAUTH_GOOGLE_CLIENT_ID\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"OAUTH_GOOGLE_CLIENT_SECRET\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"OAUTH_GOOGLE_CLIENT_SECRET\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_NAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_NAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_USERNAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_USERNAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_PASSWORD\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_ROOT_USERNAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_ROOT_USERNAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_ROOT_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_ROOT_PASSWORD\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_HOST\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_HOST\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_SERVICE_NAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_SERVICE_NAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_STORAGE_CLASS\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_STORAGE_CLASS\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_PORT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_PORT\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_USERNAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_USERNAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_PASSWORD\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_HOST\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_HOST\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_SERVICE_NAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_SERVICE_NAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_PORT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_PORT\\",\\"name\\":\\"graphql-mongo\\"}}}],\\"image\\":\\"ghcr.io/oyelowo/graphql-mongo:master-f21d07e5b52e5fdc859482d526310efc78d9efea\\",\\"livenessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/api/liveness\\",\\"port\\":8000},\\"initialDelaySeconds\\":300,\\"periodSeconds\\":10},\\"name\\":\\"graphql\\",\\"ports\\":[{\\"containerPort\\":8000,\\"name\\":\\"http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/api/healthz\\",\\"port\\":8000},\\"initialDelaySeconds\\":60,\\"periodSeconds\\":10},\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"200Mi\\"},\\"requests\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"70Mi\\"}},\\"volumeMounts\\":[]}],\\"imagePullSecrets\\":[{\\"name\\":\\"my-registry-key\\"}],\\"initContainers\\":[],\\"volumes\\":[]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "graphql-mongo",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/apps_v1-deployment-applications-graphql-mongo.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app": "graphql",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "APP_ENVIRONMENT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_ENVIRONMENT",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "APP_HOST",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_HOST",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "APP_PORT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_PORT",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "APP_EXTERNAL_BASE_URL",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_EXTERNAL_BASE_URL",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "OAUTH_GITHUB_CLIENT_ID",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "OAUTH_GITHUB_CLIENT_ID",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "OAUTH_GITHUB_CLIENT_SECRET",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "OAUTH_GITHUB_CLIENT_SECRET",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "OAUTH_GOOGLE_CLIENT_ID",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "OAUTH_GOOGLE_CLIENT_ID",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "OAUTH_GOOGLE_CLIENT_SECRET",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "OAUTH_GOOGLE_CLIENT_SECRET",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_NAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_NAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_USERNAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_USERNAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_PASSWORD",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_ROOT_USERNAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_ROOT_USERNAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_ROOT_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_ROOT_PASSWORD",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_HOST",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_HOST",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_SERVICE_NAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_SERVICE_NAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_STORAGE_CLASS",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_STORAGE_CLASS",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_PORT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_PORT",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_USERNAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_USERNAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_PASSWORD",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_HOST",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_HOST",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_SERVICE_NAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_SERVICE_NAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_SERVICE_NAME_WITH_SUFFIX",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_SERVICE_NAME_WITH_SUFFIX",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_PORT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_PORT",
                      "name": "graphql-mongo",
                    },
                  },
                },
              ],
              "image": "ghcr.io/oyelowo/graphql-mongo:master-f21d07e5b52e5fdc859482d526310efc78d9efea",
              "livenessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/api/liveness",
                  "port": 8000,
                },
                "initialDelaySeconds": 300,
                "periodSeconds": 10,
              },
              "name": "graphql",
              "ports": Array [
                Object {
                  "containerPort": 8000,
                  "name": "http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/api/healthz",
                  "port": 8000,
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
              },
              "resources": Object {
                "limits": Object {
                  "cpu": "100m",
                  "memory": "200Mi",
                },
                "requests": Object {
                  "cpu": "100m",
                  "memory": "70Mi",
                },
              },
              "volumeMounts": Array [],
            },
          ],
          "imagePullSecrets": Array [
            Object {
              "name": "my-registry-key",
            },
          ],
          "initContainers": Array [],
          "volumes": Array [],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"mongodb\\",\\"port\\":27017,\\"targetPort\\":\\"mongodb\\"}],\\"publishNotReadyAddresses\\":true,\\"selector\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/name\\":\\"mongodb\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "graphql-mongo-database",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-service-applications-graphql-mongo-database.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "config": "very important data",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"config\\":\\"very important data\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "graphql-mongo",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-configmap-applications-graphql-mongo.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis-headless\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"tcp-redis\\",\\"port\\":6379,\\"targetPort\\":\\"redis\\"}],\\"selector\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/name\\":\\"redis\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "graphql-mongo-redis-headless",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-service-applications-graphql-mongo-redis-headless.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "redis-password": "anVuZ2J1bnU=",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"redis-password\\":\\"anVuZ2J1bnU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis\\",\\"namespace\\":\\"applications\\"},\\"type\\":\\"Opaque\\"}
",
      },
      "name": "graphql-mongo-redis",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-secret-applications-graphql-mongo-redis.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "type": "Opaque",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis-master\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"tcp-redis\\",\\"port\\":6379,\\"targetPort\\":\\"redis\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/name\\":\\"redis\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "graphql-mongo-redis-master",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-service-applications-graphql-mongo-redis-master.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"kubectl.kubernetes.io/last-applied-configuration\\":\\"{\\\\\\"apiVersion\\\\\\":\\\\\\"apps/v1\\\\\\",\\\\\\"kind\\\\\\":\\\\\\"Deployment\\\\\\",\\\\\\"metadata\\\\\\":{\\\\\\"annotations\\\\\\":{\\\\\\"linkerd.io/inject\\\\\\":\\\\\\"enabled\\\\\\"},\\\\\\"labels\\\\\\":{\\\\\\"app.kubernetes.io/managed-by\\\\\\":\\\\\\"pulumi\\\\\\"},\\\\\\"name\\\\\\":\\\\\\"react-web\\\\\\",\\\\\\"namespace\\\\\\":\\\\\\"applications\\\\\\"},\\\\\\"spec\\\\\\":{\\\\\\"replicas\\\\\\":2,\\\\\\"selector\\\\\\":{\\\\\\"matchLabels\\\\\\":{\\\\\\"app\\\\\\":\\\\\\"react\\\\\\"}},\\\\\\"template\\\\\\":{\\\\\\"metadata\\\\\\":{\\\\\\"labels\\\\\\":{\\\\\\"app\\\\\\":\\\\\\"react\\\\\\"}},\\\\\\"spec\\\\\\":{\\\\\\"containers\\\\\\":[{\\\\\\"env\\\\\\":[{\\\\\\"name\\\\\\":\\\\\\"APP_ENVIRONMENT\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_ENVIRONMENT\\\\\\",\\\\\\"name\\\\\\":\\\\\\"react-web\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"APP_HOST\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_HOST\\\\\\",\\\\\\"name\\\\\\":\\\\\\"react-web\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"APP_PORT\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_PORT\\\\\\",\\\\\\"name\\\\\\":\\\\\\"react-web\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"APP_EXTERNAL_BASE_URL\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_EXTERNAL_BASE_URL\\\\\\",\\\\\\"name\\\\\\":\\\\\\"react-web\\\\\\"}}}],\\\\\\"image\\\\\\":\\\\\\"ghcr.io/oyelowo/react-web:master-6fe87cdb17db051e707efbaaae6fc0dc83844ebe\\\\\\",\\\\\\"name\\\\\\":\\\\\\"react\\\\\\",\\\\\\"ports\\\\\\":[{\\\\\\"containerPort\\\\\\":3000,\\\\\\"name\\\\\\":\\\\\\"http\\\\\\"}],\\\\\\"resources\\\\\\":{\\\\\\"limits\\\\\\":{\\\\\\"cpu\\\\\\":\\\\\\"700m\\\\\\",\\\\\\"memory\\\\\\":\\\\\\"2Gi\\\\\\"},\\\\\\"requests\\\\\\":{\\\\\\"cpu\\\\\\":\\\\\\"500m\\\\\\",\\\\\\"memory\\\\\\":\\\\\\"1.3Gi\\\\\\"}},\\\\\\"volumeMounts\\\\\\":[]}],\\\\\\"imagePullSecrets\\\\\\":[{\\\\\\"name\\\\\\":\\\\\\"my-registry-key\\\\\\"}],\\\\\\"initContainers\\\\\\":[],\\\\\\"volumes\\\\\\":[]}}}}\\\\n\\",\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"react-web-http\\",\\"port\\":3000,\\"protocol\\":\\"TCP\\",\\"targetPort\\":3000}],\\"selector\\":{\\"app\\":\\"react\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/react-web/1-manifest/v1-service-applications-react-web.yaml",
    "resourceBaseDir": "generatedManifests/test/services/react-web",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "APP_ENVIRONMENT": "bG9jYWw=",
      "APP_EXTERNAL_BASE_URL": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
      "APP_HOST": "MC4wLjAuMA==",
      "APP_PORT": "MzAwMA==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"APP_ENVIRONMENT\\":\\"bG9jYWw=\\",\\"APP_EXTERNAL_BASE_URL\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\",\\"APP_HOST\\":\\"MC4wLjAuMA==\\",\\"APP_PORT\\":\\"MzAwMA==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"sealedsecrets.bitnami.com/managed\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"}}
",
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/react-web/1-manifest/v1-secret-applications-react-web.yaml",
    "resourceBaseDir": "generatedManifests/test/services/react-web",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"replicas\\":2,\\"selector\\":{\\"matchLabels\\":{\\"app\\":\\"react\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app\\":\\"react\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"APP_ENVIRONMENT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_ENVIRONMENT\\",\\"name\\":\\"react-web\\"}}},{\\"name\\":\\"APP_HOST\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_HOST\\",\\"name\\":\\"react-web\\"}}},{\\"name\\":\\"APP_PORT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_PORT\\",\\"name\\":\\"react-web\\"}}},{\\"name\\":\\"APP_EXTERNAL_BASE_URL\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_EXTERNAL_BASE_URL\\",\\"name\\":\\"react-web\\"}}}],\\"image\\":\\"ghcr.io/oyelowo/react-web:master-6fe87cdb17db051e707efbaaae6fc0dc83844ebe\\",\\"name\\":\\"react\\",\\"ports\\":[{\\"containerPort\\":3000,\\"name\\":\\"http\\"}],\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"700m\\",\\"memory\\":\\"2Gi\\"},\\"requests\\":{\\"cpu\\":\\"500m\\",\\"memory\\":\\"1.3Gi\\"}},\\"volumeMounts\\":[]}],\\"imagePullSecrets\\":[{\\"name\\":\\"my-registry-key\\"}],\\"initContainers\\":[],\\"volumes\\":[]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/react-web/1-manifest/apps_v1-deployment-applications-react-web.yaml",
    "resourceBaseDir": "generatedManifests/test/services/react-web",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app": "react",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "APP_ENVIRONMENT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_ENVIRONMENT",
                      "name": "react-web",
                    },
                  },
                },
                Object {
                  "name": "APP_HOST",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_HOST",
                      "name": "react-web",
                    },
                  },
                },
                Object {
                  "name": "APP_PORT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_PORT",
                      "name": "react-web",
                    },
                  },
                },
                Object {
                  "name": "APP_EXTERNAL_BASE_URL",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_EXTERNAL_BASE_URL",
                      "name": "react-web",
                    },
                  },
                },
              ],
              "image": "ghcr.io/oyelowo/react-web:master-6fe87cdb17db051e707efbaaae6fc0dc83844ebe",
              "name": "react",
              "ports": Array [
                Object {
                  "containerPort": 3000,
                  "name": "http",
                },
              ],
              "resources": Object {
                "limits": Object {
                  "cpu": "700m",
                  "memory": "2Gi",
                },
                "requests": Object {
                  "cpu": "500m",
                  "memory": "1.3Gi",
                },
              },
              "volumeMounts": Array [],
            },
          ],
          "imagePullSecrets": Array [
            Object {
              "name": "my-registry-key",
            },
          ],
          "initContainers": Array [],
          "volumes": Array [],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "config": "very important data",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"config\\":\\"very important data\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/react-web/1-manifest/v1-configmap-applications-react-web.yaml",
    "resourceBaseDir": "generatedManifests/test/services/react-web",
  },
]
`;

exports[`KubeObject Can sync resources 2`] = `
Array [
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"strategy\\":{\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"namespaces\\":[\\"argocd\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--staticassets\\",\\"/opt/bitnami/argo-cd/app\\",\\"--repo-server\\",\\"argocd-argo-cd-repo-server:8081\\",\\"--logformat\\",\\"text\\",\\"--loglevel\\",\\"info\\",\\"--redis\\",\\"argocd-redis-master:6379\\",\\"--insecure\\"],\\"command\\":[\\"argocd-server\\"],\\"env\\":[{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/argo-cd:2.3.3-debian-10-r25\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":8080},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"name\\":\\"argocd-server\\",\\"ports\\":[{\\"containerPort\\":8080,\\"name\\":\\"http\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":8080},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/app/config/ssh\\",\\"name\\":\\"ssh-known-hosts\\"},{\\"mountPath\\":\\"/app/config/server/tls\\",\\"name\\":\\"argocd-repo-server-tls\\"}]}],\\"initContainers\\":[{\\"args\\":[\\"-ec\\",\\"#!/bin/bash\\\\n\\\\nset -o errexit\\\\nset -o nounset\\\\nset -o pipefail\\\\n\\\\n. /opt/bitnami/scripts/libos.sh\\\\n. /opt/bitnami/scripts/liblog.sh\\\\n\\\\ncheck_redis_connection() {\\\\n  local result=\\\\\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\\\\\"\\\\n  if [[ \\\\\\"$result\\\\\\" != \\\\\\"PONG\\\\\\" ]]; then\\\\n    false\\\\n  fi\\\\n}\\\\n\\\\ninfo \\\\\\"Checking redis connection...\\\\\\"\\\\nif ! retry_while \\\\\\"check_redis_connection\\\\\\"; then\\\\n    error \\\\\\"Could not connect to the Redis server\\\\\\"\\\\n    return 1\\\\nelse\\\\n    info \\\\\\"Connected to the Redis instance\\\\\\"\\\\nfi\\\\n\\"],\\"command\\":[\\"/bin/bash\\"],\\"env\\":[{\\"name\\":\\"REDISCLI_AUTH\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/redis:6.2.7-debian-10-r2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"wait-for-redis\\"}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"argocd-argo-cd-argocd-server\\",\\"volumes\\":[{\\"configMap\\":{\\"name\\":\\"argocd-ssh-known-hosts-cm\\"},\\"name\\":\\"ssh-known-hosts\\"},{\\"name\\":\\"argocd-repo-server-tls\\",\\"secret\\":{\\"items\\":[{\\"key\\":\\"tls.crt\\",\\"path\\":\\"tls.crt\\"},{\\"key\\":\\"tls.key\\",\\"path\\":\\"tls.key\\"},{\\"key\\":\\"ca.crt\\",\\"path\\":\\"ca.crt\\"}],\\"optional\\":true,\\"secretName\\":\\"argocd-repo-server-tls\\"}}]}}}}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "server",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-3.1.16",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "server",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": Array [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--staticassets",
                "/opt/bitnami/argo-cd/app",
                "--repo-server",
                "argocd-argo-cd-repo-server:8081",
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
                "--insecure",
              ],
              "command": Array [
                "argocd-server",
              ],
              "env": Array [
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.3.3-debian-10-r25",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 8080,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "argocd-server",
              "ports": Array [
                Object {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 8080,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/app/config/ssh",
                  "name": "ssh-known-hosts",
                },
                Object {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result=\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\"
  if [[ \\"$result\\" != \\"PONG\\" ]]; then
    false
  fi
}

info \\"Checking redis connection...\\"
if ! retry_while \\"check_redis_connection\\"; then
    error \\"Could not connect to the Redis server\\"
    return 1
else
    info \\"Connected to the Redis instance\\"
fi
",
              ],
              "command": Array [
                "/bin/bash",
              ],
              "env": Array [
                Object {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r2",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-server",
          "volumes": Array [
            Object {
              "configMap": Object {
                "name": "argocd-ssh-known-hosts-cm",
              },
              "name": "ssh-known-hosts",
            },
            Object {
              "name": "argocd-repo-server-tls",
              "secret": Object {
                "items": Array [
                  Object {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  Object {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  Object {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-repo-server\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"strategy\\":{\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"namespaces\\":[\\"argocd\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--logformat\\",\\"text\\",\\"--loglevel\\",\\"info\\",\\"--redis\\",\\"argocd-redis-master:6379\\"],\\"command\\":[\\"argocd-repo-server\\"],\\"env\\":[{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/argo-cd:2.3.3-debian-10-r25\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"tcpSocket\\":{\\"port\\":8081},\\"timeoutSeconds\\":1},\\"name\\":\\"argocd-repo-server\\",\\"ports\\":[{\\"containerPort\\":8081,\\"name\\":\\"repo-server\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"tcpSocket\\":{\\"port\\":8081},\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/app/config/ssh\\",\\"name\\":\\"ssh-known-hosts\\"},{\\"mountPath\\":\\"/app/config/server/tls\\",\\"name\\":\\"argocd-repo-server-tls\\"},{\\"mountPath\\":\\"/app/config/gpg/keys\\",\\"name\\":\\"gpg-keyring\\"},{\\"mountPath\\":\\"/tmp\\",\\"name\\":\\"tmp-dir\\"}]}],\\"initContainers\\":[{\\"args\\":[\\"-ec\\",\\"#!/bin/bash\\\\n\\\\nset -o errexit\\\\nset -o nounset\\\\nset -o pipefail\\\\n\\\\n. /opt/bitnami/scripts/libos.sh\\\\n. /opt/bitnami/scripts/liblog.sh\\\\n\\\\ncheck_redis_connection() {\\\\n  local result=\\\\\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\\\\\"\\\\n  if [[ \\\\\\"$result\\\\\\" != \\\\\\"PONG\\\\\\" ]]; then\\\\n    false\\\\n  fi\\\\n}\\\\n\\\\ninfo \\\\\\"Checking redis connection...\\\\\\"\\\\nif ! retry_while \\\\\\"check_redis_connection\\\\\\"; then\\\\n    error \\\\\\"Could not connect to the Redis server\\\\\\"\\\\n    return 1\\\\nelse\\\\n    info \\\\\\"Connected to the Redis instance\\\\\\"\\\\nfi\\\\n\\"],\\"command\\":[\\"/bin/bash\\"],\\"env\\":[{\\"name\\":\\"REDISCLI_AUTH\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/redis:6.2.7-debian-10-r2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"wait-for-redis\\"}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"argocd-argo-cd-argocd-repo-server\\",\\"volumes\\":[{\\"configMap\\":{\\"name\\":\\"argocd-ssh-known-hosts-cm\\"},\\"name\\":\\"ssh-known-hosts\\"},{\\"name\\":\\"argocd-repo-server-tls\\",\\"secret\\":{\\"items\\":[{\\"key\\":\\"tls.crt\\",\\"path\\":\\"tls.crt\\"},{\\"key\\":\\"tls.key\\",\\"path\\":\\"tls.key\\"},{\\"key\\":\\"ca.crt\\",\\"path\\":\\"ca.crt\\"}],\\"optional\\":true,\\"secretName\\":\\"argocd-repo-server-tls\\"}},{\\"emptyDir\\":{},\\"name\\":\\"tmp-dir\\"},{\\"emptyDir\\":{},\\"name\\":\\"gpg-keyring\\"}]}}}}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-repo-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "repo-server",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-3.1.16",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "repo-server",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": Array [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
              ],
              "command": Array [
                "argocd-repo-server",
              ],
              "env": Array [
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.3.3-debian-10-r25",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": Object {
                  "port": 8081,
                },
                "timeoutSeconds": 1,
              },
              "name": "argocd-repo-server",
              "ports": Array [
                Object {
                  "containerPort": 8081,
                  "name": "repo-server",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": Object {
                  "port": 8081,
                },
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/app/config/ssh",
                  "name": "ssh-known-hosts",
                },
                Object {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
                Object {
                  "mountPath": "/app/config/gpg/keys",
                  "name": "gpg-keyring",
                },
                Object {
                  "mountPath": "/tmp",
                  "name": "tmp-dir",
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result=\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\"
  if [[ \\"$result\\" != \\"PONG\\" ]]; then
    false
  fi
}

info \\"Checking redis connection...\\"
if ! retry_while \\"check_redis_connection\\"; then
    error \\"Could not connect to the Redis server\\"
    return 1
else
    info \\"Connected to the Redis instance\\"
fi
",
              ],
              "command": Array [
                "/bin/bash",
              ],
              "env": Array [
                Object {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r2",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-repo-server",
          "volumes": Array [
            Object {
              "configMap": Object {
                "name": "argocd-ssh-known-hosts-cm",
              },
              "name": "ssh-known-hosts",
            },
            Object {
              "name": "argocd-repo-server-tls",
              "secret": Object {
                "items": Array [
                  Object {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  Object {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  Object {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
            Object {
              "emptyDir": Object {},
              "name": "tmp-dir",
            },
            Object {
              "emptyDir": Object {},
              "name": "gpg-keyring",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-app-controller\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"strategy\\":{\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"namespaces\\":[\\"argocd\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--status-processors\\",\\"20\\",\\"--operation-processors\\",\\"10\\",\\"--app-resync\\",\\"180\\",\\"--self-heal-timeout-seconds\\",\\"5\\",\\"--repo-server\\",\\"argocd-argo-cd-repo-server:8081\\",\\"--logformat\\",\\"text\\",\\"--loglevel\\",\\"info\\",\\"--redis\\",\\"argocd-redis-master:6379\\"],\\"command\\":[\\"argocd-application-controller\\"],\\"env\\":[{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/argo-cd:2.3.3-debian-10-r25\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":8082},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"name\\":\\"controller\\",\\"ports\\":[{\\"containerPort\\":8082,\\"name\\":\\"controller\\",\\"protocol\\":\\"TCP\\"},{\\"containerPort\\":8082,\\"name\\":\\"metrics\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"tcpSocket\\":{\\"port\\":8082},\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/app/config/server/tls\\",\\"name\\":\\"argocd-repo-server-tls\\"}]}],\\"initContainers\\":[{\\"args\\":[\\"-ec\\",\\"#!/bin/bash\\\\n\\\\nset -o errexit\\\\nset -o nounset\\\\nset -o pipefail\\\\n\\\\n. /opt/bitnami/scripts/libos.sh\\\\n. /opt/bitnami/scripts/liblog.sh\\\\n\\\\ncheck_redis_connection() {\\\\n  local result=\\\\\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\\\\\"\\\\n  if [[ \\\\\\"$result\\\\\\" != \\\\\\"PONG\\\\\\" ]]; then\\\\n    false\\\\n  fi\\\\n}\\\\n\\\\ninfo \\\\\\"Checking redis connection...\\\\\\"\\\\nif ! retry_while \\\\\\"check_redis_connection\\\\\\"; then\\\\n    error \\\\\\"Could not connect to the Redis server\\\\\\"\\\\n    return 1\\\\nelse\\\\n    info \\\\\\"Connected to the Redis instance\\\\\\"\\\\nfi\\\\n\\"],\\"command\\":[\\"/bin/bash\\"],\\"env\\":[{\\"name\\":\\"REDISCLI_AUTH\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/redis:6.2.7-debian-10-r2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"wait-for-redis\\"}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"argocd-argo-cd-argocd-app-controller\\",\\"volumes\\":[{\\"name\\":\\"argocd-repo-server-tls\\",\\"secret\\":{\\"items\\":[{\\"key\\":\\"tls.crt\\",\\"path\\":\\"tls.crt\\"},{\\"key\\":\\"tls.key\\",\\"path\\":\\"tls.key\\"},{\\"key\\":\\"ca.crt\\",\\"path\\":\\"ca.crt\\"}],\\"optional\\":true,\\"secretName\\":\\"argocd-repo-server-tls\\"}}]}}}}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-3.1.16",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "controller",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": Array [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--status-processors",
                "20",
                "--operation-processors",
                "10",
                "--app-resync",
                "180",
                "--self-heal-timeout-seconds",
                "5",
                "--repo-server",
                "argocd-argo-cd-repo-server:8081",
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
              ],
              "command": Array [
                "argocd-application-controller",
              ],
              "env": Array [
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.3.3-debian-10-r25",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 8082,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "controller",
              "ports": Array [
                Object {
                  "containerPort": 8082,
                  "name": "controller",
                  "protocol": "TCP",
                },
                Object {
                  "containerPort": 8082,
                  "name": "metrics",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": Object {
                  "port": 8082,
                },
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result=\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\"
  if [[ \\"$result\\" != \\"PONG\\" ]]; then
    false
  fi
}

info \\"Checking redis connection...\\"
if ! retry_while \\"check_redis_connection\\"; then
    error \\"Could not connect to the Redis server\\"
    return 1
else
    info \\"Connected to the Redis instance\\"
fi
",
              ],
              "command": Array [
                "/bin/bash",
              ],
              "env": Array [
                Object {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r2",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-app-controller",
          "volumes": Array [
            Object {
              "name": "argocd-repo-server-tls",
              "secret": Object {
                "items": Array [
                  Object {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  Object {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  Object {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"strategy\\":{\\"rollingUpdate\\":{},\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"prometheus.io/path\\":\\"/metrics\\",\\"prometheus.io/port\\":\\"9402\\",\\"prometheus.io/scrape\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"namespaces\\":[\\"cert-manager\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--v=2\\",\\"--cluster-resource-namespace=$(POD_NAMESPACE)\\",\\"--leader-election-namespace=kube-system\\",\\"--acme-http01-solver-image=docker.io/bitnami/acmesolver:1.8.1-debian-11-r0\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}}],\\"image\\":\\"docker.io/bitnami/cert-manager:1.8.1-debian-11-r0\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"cert-manager\\",\\"ports\\":[{\\"containerPort\\":9402,\\"protocol\\":\\"TCP\\"}],\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001}}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"cert-manager-controller\\"}}}}
",
      },
      "name": "cert-manager-controller",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "prometheus.io/path": "/metrics",
            "prometheus.io/port": "9402",
            "prometheus.io/scrape": "true",
          },
          "labels": Object {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.6.1",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": Array [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--v=2",
                "--cluster-resource-namespace=$(POD_NAMESPACE)",
                "--leader-election-namespace=kube-system",
                "--acme-http01-solver-image=docker.io/bitnami/acmesolver:1.8.1-debian-11-r0",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cert-manager:1.8.1-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "name": "cert-manager",
              "ports": Array [
                Object {
                  "containerPort": 9402,
                  "protocol": "TCP",
                },
              ],
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-controller",
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app\\":\\"cert-manager-trust\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app\\":\\"cert-manager-trust\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"--log-level=1\\",\\"--metrics-port=9402\\",\\"--readiness-probe-port=6060\\",\\"--readiness-probe-path=/readyz\\",\\"--trust-namespace=cert-manager\\",\\"--webhook-host=0.0.0.0\\",\\"--webhook-port=6443\\",\\"--webhook-certificate-dir=/tls\\"],\\"command\\":[\\"cert-manager-trust\\"],\\"image\\":\\"quay.io/jetstack/cert-manager-trust:v0.1.0\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"cert-manager-trust\\",\\"ports\\":[{\\"containerPort\\":6443},{\\"containerPort\\":9402}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/readyz\\",\\"port\\":6060},\\"initialDelaySeconds\\":3,\\"periodSeconds\\":7},\\"resources\\":{},\\"volumeMounts\\":[{\\"mountPath\\":\\"/tls\\",\\"name\\":\\"tls\\",\\"readOnly\\":true}]}],\\"serviceAccountName\\":\\"cert-manager-trust\\",\\"volumes\\":[{\\"name\\":\\"tls\\",\\"secret\\":{\\"defaultMode\\":420,\\"secretName\\":\\"cert-manager-trust-tls\\"}}]}}}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app": "cert-manager-trust",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "--log-level=1",
                "--metrics-port=9402",
                "--readiness-probe-port=6060",
                "--readiness-probe-path=/readyz",
                "--trust-namespace=cert-manager",
                "--webhook-host=0.0.0.0",
                "--webhook-port=6443",
                "--webhook-certificate-dir=/tls",
              ],
              "command": Array [
                "cert-manager-trust",
              ],
              "image": "quay.io/jetstack/cert-manager-trust:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "cert-manager-trust",
              "ports": Array [
                Object {
                  "containerPort": 6443,
                },
                Object {
                  "containerPort": 9402,
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/readyz",
                  "port": 6060,
                },
                "initialDelaySeconds": 3,
                "periodSeconds": 7,
              },
              "resources": Object {},
              "volumeMounts": Array [
                Object {
                  "mountPath": "/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "serviceAccountName": "cert-manager-trust",
          "volumes": Array [
            Object {
              "name": "tls",
              "secret": Object {
                "defaultMode": 420,
                "secretName": "cert-manager-trust-tls",
              },
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"strategy\\":{\\"rollingUpdate\\":{},\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"namespaces\\":[\\"cert-manager\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--v=2\\",\\"--secure-port=10250\\",\\"--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)\\",\\"--dynamic-serving-ca-secret-name=cert-manager-webhook-ca\\",\\"--dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}}],\\"image\\":\\"docker.io/bitnami/cert-manager-webhook:1.8.1-debian-11-r0\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/livez\\",\\"port\\":6080,\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":60,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"name\\":\\"cert-manager-webhook\\",\\"ports\\":[{\\"containerPort\\":10250,\\"name\\":\\"https\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":6080,\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":5,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001}}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"cert-manager-webhook\\"}}}}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-webhook.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "webhook",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.6.1",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": Array [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--v=2",
                "--secure-port=10250",
                "--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)",
                "--dynamic-serving-ca-secret-name=cert-manager-webhook-ca",
                "--dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cert-manager-webhook:1.8.1-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/livez",
                  "port": 6080,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "cert-manager-webhook",
              "ports": Array [
                Object {
                  "containerPort": 10250,
                  "name": "https",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 6080,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-webhook",
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-cainjector\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"strategy\\":{\\"rollingUpdate\\":{},\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"namespaces\\":[\\"cert-manager\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--v=2\\",\\"--leader-election-namespace=kube-system\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}}],\\"image\\":\\"docker.io/bitnami/cainjector:1.8.1-debian-11-r0\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"cainjector\\",\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001}}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"cert-manager-cainjector\\"}}}}
",
      },
      "name": "cert-manager-cainjector",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-cainjector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "cainjector",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.6.1",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": Array [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--v=2",
                "--leader-election-namespace=kube-system",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cainjector:1.8.1-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "name": "cainjector",
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-cainjector",
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\",\\"app.kubernetes.io/version\\":\\"v0.17.5\\",\\"helm.sh/chart\\":\\"sealed-secrets-2.1.7\\"},\\"name\\":\\"sealed-secrets\\",\\"namespace\\":\\"kube-system\\"},\\"spec\\":{\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"--update-status\\",\\"--key-prefix\\",\\"sealed-secrets-key\\"],\\"command\\":[\\"controller\\"],\\"image\\":\\"docker.io/bitnami/sealed-secrets-controller:v0.17.5\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":\\"http\\"},\\"initialDelaySeconds\\":0,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"name\\":\\"controller\\",\\"ports\\":[{\\"containerPort\\":8080,\\"name\\":\\"http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":\\"http\\"},\\"initialDelaySeconds\\":0,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"readOnlyRootFilesystem\\":true,\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/tmp\\",\\"name\\":\\"tmp\\"}]}],\\"securityContext\\":{\\"fsGroup\\":65534},\\"serviceAccountName\\":\\"sealed-secrets\\",\\"volumes\\":[{\\"emptyDir\\":{},\\"name\\":\\"tmp\\"}]}}}}
",
      },
      "name": "sealed-secrets",
      "namespace": "kube-system",
    },
    "path": "generatedManifests/test/infrastructure/sealed-secrets/1-manifest/apps_v1-deployment-kube-system-sealed-secrets.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/sealed-secrets",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/instance": "sealed-secrets",
            "app.kubernetes.io/name": "sealed-secrets",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "--update-status",
                "--key-prefix",
                "sealed-secrets-key",
              ],
              "command": Array [
                "controller",
              ],
              "image": "docker.io/bitnami/sealed-secrets-controller:v0.17.5",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": "http",
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "controller",
              "ports": Array [
                Object {
                  "containerPort": 8080,
                  "name": "http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": "http",
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/tmp",
                  "name": "tmp",
                },
              ],
            },
          ],
          "securityContext": Object {
            "fsGroup": 65534,
          },
          "serviceAccountName": "sealed-secrets",
          "volumes": Array [
            Object {
              "emptyDir": Object {},
              "name": "tmp",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"minReadySeconds\\":0,\\"replicas\\":1,\\"revisionHistoryLimit\\":10,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"}},\\"namespaces\\":[\\"default\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"/nginx-ingress-controller\\",\\"--default-backend-service=default/nginx-ingress-controller-default-backend\\",\\"--election-id=ingress-controller-leader\\",\\"--controller-class=k8s.io/ingress-nginx\\",\\"--configmap=default/nginx-ingress-controller\\"],\\"env\\":[{\\"name\\":\\"POD_NAME\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}}],\\"image\\":\\"docker.io/bitnami/nginx-ingress-controller:1.2.1-debian-11-r6\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":10254,\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"name\\":\\"controller\\",\\"ports\\":[{\\"containerPort\\":80,\\"name\\":\\"http\\",\\"protocol\\":\\"TCP\\"},{\\"containerPort\\":443,\\"name\\":\\"https\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":10254,\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":true,\\"capabilities\\":{\\"add\\":[\\"NET_BIND_SERVICE\\"],\\"drop\\":[\\"ALL\\"]},\\"runAsNonRoot\\":true,\\"runAsUser\\":1001}}],\\"dnsPolicy\\":\\"ClusterFirst\\",\\"hostNetwork\\":false,\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"nginx-ingress-controller\\",\\"terminationGracePeriodSeconds\\":60}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/apps_v1-deployment-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "nginx-ingress-controller",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "nginx-ingress-controller",
            "helm.sh/chart": "nginx-ingress-controller-9.2.11",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "controller",
                        "app.kubernetes.io/instance": "nginx-ingress-controller",
                        "app.kubernetes.io/name": "nginx-ingress-controller",
                      },
                    },
                    "namespaces": Array [
                      "default",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "/nginx-ingress-controller",
                "--default-backend-service=default/nginx-ingress-controller-default-backend",
                "--election-id=ingress-controller-leader",
                "--controller-class=k8s.io/ingress-nginx",
                "--configmap=default/nginx-ingress-controller",
              ],
              "env": Array [
                Object {
                  "name": "POD_NAME",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/nginx-ingress-controller:1.2.1-debian-11-r6",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "controller",
              "ports": Array [
                Object {
                  "containerPort": 80,
                  "name": "http",
                  "protocol": "TCP",
                },
                Object {
                  "containerPort": 443,
                  "name": "https",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": true,
                "capabilities": Object {
                  "add": Array [
                    "NET_BIND_SERVICE",
                  ],
                  "drop": Array [
                    "ALL",
                  ],
                },
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "dnsPolicy": "ClusterFirst",
          "hostNetwork": false,
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "nginx-ingress-controller",
          "terminationGracePeriodSeconds": 60,
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller-default-backend\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"}},\\"namespaces\\":[\\"default\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"image\\":\\"docker.io/bitnami/nginx:1.21.6-debian-11-r6\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":\\"http\\",\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":30,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":5},\\"name\\":\\"default-backend\\",\\"ports\\":[{\\"containerPort\\":8080,\\"name\\":\\"http\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":6,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":\\"http\\",\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":0,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":5},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/opt/bitnami/nginx/conf/bitnami/\\",\\"name\\":\\"nginx-config-volume\\",\\"readOnly\\":true}]}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"nginx-ingress-controller\\",\\"terminationGracePeriodSeconds\\":60,\\"volumes\\":[{\\"configMap\\":{\\"items\\":[{\\"key\\":\\"defaultBackend.conf\\",\\"path\\":\\"defaultBackend.conf\\"}],\\"name\\":\\"nginx-ingress-controller-default-backend\\"},\\"name\\":\\"nginx-config-volume\\"}]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller-default-backend",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/apps_v1-deployment-default-nginx-ingress-controller-default-backend.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "default-backend",
            "app.kubernetes.io/instance": "nginx-ingress-controller",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "nginx-ingress-controller",
            "helm.sh/chart": "nginx-ingress-controller-9.2.11",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "default-backend",
                        "app.kubernetes.io/instance": "nginx-ingress-controller",
                        "app.kubernetes.io/name": "nginx-ingress-controller",
                      },
                    },
                    "namespaces": Array [
                      "default",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "image": "docker.io/bitnami/nginx:1.21.6-debian-11-r6",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": "http",
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "name": "default-backend",
              "ports": Array [
                Object {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 6,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": "http",
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/opt/bitnami/nginx/conf/bitnami/",
                  "name": "nginx-config-volume",
                  "readOnly": true,
                },
              ],
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "nginx-ingress-controller",
          "terminationGracePeriodSeconds": 60,
          "volumes": Array [
            Object {
              "configMap": Object {
                "items": Array [
                  Object {
                    "key": "defaultBackend.conf",
                    "path": "defaultBackend.conf",
                  },
                ],
                "name": "nginx-ingress-controller-default-backend",
              },
              "name": "nginx-config-volume",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"proxy-injector\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/config\\":\\"173ab73deb21ded56701835d0405fe9b6b152e8003f0a23857a20c3cf5165dbd\\",\\"config.linkerd.io/default-inbound-policy\\":\\"all-unauthenticated\\",\\"config.linkerd.io/opaque-ports\\":\\"8443\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\",\\"linkerd.io/identity-mode\\":\\"default\\",\\"linkerd.io/proxy-version\\":\\"stable-2.11.2\\"},\\"labels\\":{\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-proxy-injector\\",\\"linkerd.io/workload-ns\\":\\"linkerd\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"_pod_name\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"_pod_ns\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}},{\\"name\\":\\"_pod_nodeName\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.nodeName\\"}}},{\\"name\\":\\"LINKERD2_PROXY_LOG\\",\\"value\\":\\"warn,linkerd=info\\"},{\\"name\\":\\"LINKERD2_PROXY_LOG_FORMAT\\",\\"value\\":\\"plain\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_ADDR\\",\\"value\\":\\"linkerd-dst-headless.linkerd.svc.cluster.local.:8086\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_ADDR\\",\\"value\\":\\"linkerd-policy.linkerd.svc.cluster.local.:8090\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_WORKLOAD\\",\\"value\\":\\"$(_pod_ns):$(_pod_name)\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY\\",\\"value\\":\\"all-unauthenticated\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"100ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"1000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_CONTROL_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4190\\"},{\\"name\\":\\"LINKERD2_PROXY_ADMIN_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4191\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR\\",\\"value\\":\\"127.0.0.1:4140\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4143\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_IPS\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"status.podIPs\\"}}},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS\\",\\"value\\":\\"8443,9995\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES\\",\\"value\\":\\"svc.cluster.local.\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION\\",\\"value\\":\\"25,587,3306,4444,5432,6379,9300,11211\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_CONTEXT\\",\\"value\\":\\"{\\\\\\"ns\\\\\\":\\\\\\"$(_pod_ns)\\\\\\", \\\\\\"nodeName\\\\\\":\\\\\\"$(_pod_nodeName)\\\\\\"}\\\\n\\"},{\\"name\\":\\"_pod_sa\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.serviceAccountName\\"}}},{\\"name\\":\\"_l5d_ns\\",\\"value\\":\\"linkerd\\"},{\\"name\\":\\"_l5d_trustdomain\\",\\"value\\":\\"cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_DIR\\",\\"value\\":\\"/var/run/linkerd/identity/end-entity\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS\\",\\"valueFrom\\":{\\"configMapKeyRef\\":{\\"key\\":\\"ca-bundle.crt\\",\\"name\\":\\"linkerd-identity-trust-roots\\"}}},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TOKEN_FILE\\",\\"value\\":\\"/var/run/secrets/kubernetes.io/serviceaccount/token\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_ADDR\\",\\"value\\":\\"linkerd-identity-headless.linkerd.svc.cluster.local.:8080\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_LOCAL_NAME\\",\\"value\\":\\"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_NAME\\",\\"value\\":\\"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"}],\\"image\\":\\"cr.l5d.io/linkerd/proxy:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"lifecycle\\":{\\"postStart\\":{\\"exec\\":{\\"command\\":[\\"/usr/lib/linkerd/linkerd-await\\",\\"--timeout=2m\\"]}}},\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/live\\",\\"port\\":4191},\\"initialDelaySeconds\\":10},\\"name\\":\\"linkerd-proxy\\",\\"ports\\":[{\\"containerPort\\":4143,\\"name\\":\\"linkerd-proxy\\"},{\\"containerPort\\":4191,\\"name\\":\\"linkerd-admin\\"}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":4191},\\"initialDelaySeconds\\":2},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsUser\\":2102},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/identity/end-entity\\",\\"name\\":\\"linkerd-identity-end-entity\\"}]},{\\"args\\":[\\"proxy-injector\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9995},\\"initialDelaySeconds\\":10},\\"name\\":\\"proxy-injector\\",\\"ports\\":[{\\"containerPort\\":8443,\\"name\\":\\"proxy-injector\\"},{\\"containerPort\\":9995,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9995}},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/config\\",\\"name\\":\\"config\\"},{\\"mountPath\\":\\"/var/run/linkerd/identity/trust-roots\\",\\"name\\":\\"trust-roots\\"},{\\"mountPath\\":\\"/var/run/linkerd/tls\\",\\"name\\":\\"tls\\",\\"readOnly\\":true}]}],\\"initContainers\\":[{\\"args\\":[\\"--incoming-proxy-port\\",\\"4143\\",\\"--outgoing-proxy-port\\",\\"4140\\",\\"--proxy-uid\\",\\"2102\\",\\"--inbound-ports-to-ignore\\",\\"4190,4191,4567,4568\\",\\"--outbound-ports-to-ignore\\",\\"4567,4568\\"],\\"image\\":\\"cr.l5d.io/linkerd/proxy-init:v1.5.3\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"linkerd-init\\",\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"50Mi\\"},\\"requests\\":{\\"cpu\\":\\"10m\\",\\"memory\\":\\"10Mi\\"}},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":true,\\"capabilities\\":{\\"add\\":[\\"NET_ADMIN\\",\\"NET_RAW\\"]},\\"privileged\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsNonRoot\\":false,\\"runAsUser\\":0},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/run\\",\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"linkerd-proxy-injector\\",\\"volumes\\":[{\\"configMap\\":{\\"name\\":\\"linkerd-config\\"},\\"name\\":\\"config\\"},{\\"configMap\\":{\\"name\\":\\"linkerd-identity-trust-roots\\"},\\"name\\":\\"trust-roots\\"},{\\"name\\":\\"tls\\",\\"secret\\":{\\"secretName\\":\\"linkerd-proxy-injector-k8s-tls\\"}},{\\"emptyDir\\":{},\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"},{\\"emptyDir\\":{\\"medium\\":\\"Memory\\"},\\"name\\":\\"linkerd-identity-end-entity\\"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-proxy-injector",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/config": "173ab73deb21ded56701835d0405fe9b6b152e8003f0a23857a20c3cf5165dbd",
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "config.linkerd.io/opaque-ports": "8443",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
            "linkerd.io/identity-mode": "default",
            "linkerd.io/proxy-version": "stable-2.11.2",
          },
          "labels": Object {
            "linkerd.io/control-plane-component": "proxy-injector",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-proxy-injector",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "_pod_name",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "_pod_ns",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                Object {
                  "name": "_pod_nodeName",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "linkerd-dst-headless.linkerd.svc.cluster.local.:8086",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "linkerd-policy.linkerd.svc.cluster.local.:8090",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                Object {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8443,9995",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}
",
                },
                Object {
                  "name": "_pod_sa",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                Object {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                Object {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": Object {
                    "configMapKeyRef": Object {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "linkerd-identity-headless.linkerd.svc.cluster.local.:8080",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": Object {
                "postStart": Object {
                  "exec": Object {
                    "command": Array [
                      "/usr/lib/linkerd/linkerd-await",
                      "--timeout=2m",
                    ],
                  },
                },
              },
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": Array [
                Object {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                Object {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
              ],
            },
            Object {
              "args": Array [
                "proxy-injector",
                "-log-level=info",
                "-log-format=plain",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9995,
                },
                "initialDelaySeconds": 10,
              },
              "name": "proxy-injector",
              "ports": Array [
                Object {
                  "containerPort": 8443,
                  "name": "proxy-injector",
                },
                Object {
                  "containerPort": 9995,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9995,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/config",
                  "name": "config",
                },
                Object {
                  "mountPath": "/var/run/linkerd/identity/trust-roots",
                  "name": "trust-roots",
                },
                Object {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "4567,4568",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v1.5.3",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": Object {
                "limits": Object {
                  "cpu": "100m",
                  "memory": "50Mi",
                },
                "requests": Object {
                  "cpu": "10m",
                  "memory": "10Mi",
                },
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": true,
                "capabilities": Object {
                  "add": Array [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": false,
                "runAsUser": 0,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-proxy-injector",
          "volumes": Array [
            Object {
              "configMap": Object {
                "name": "linkerd-config",
              },
              "name": "config",
            },
            Object {
              "configMap": Object {
                "name": "linkerd-identity-trust-roots",
              },
              "name": "trust-roots",
            },
            Object {
              "name": "tls",
              "secret": Object {
                "secretName": "linkerd-proxy-injector-k8s-tls",
              },
            },
            Object {
              "emptyDir": Object {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            Object {
              "emptyDir": Object {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"identity\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-identity\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-identity\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"config.linkerd.io/default-inbound-policy\\":\\"all-unauthenticated\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\",\\"linkerd.io/identity-mode\\":\\"default\\",\\"linkerd.io/proxy-version\\":\\"stable-2.11.2\\"},\\"labels\\":{\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-identity\\",\\"linkerd.io/workload-ns\\":\\"linkerd\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"identity\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-controller-namespace=linkerd\\",\\"-identity-trust-domain=cluster.local\\",\\"-identity-issuance-lifetime=24h0m0s\\",\\"-identity-clock-skew-allowance=20s\\",\\"-identity-scheme=kubernetes.io/tls\\",\\"-enable-pprof=false\\"],\\"env\\":[{\\"name\\":\\"LINKERD_DISABLED\\",\\"value\\":\\"linkerd-await cannot block the identity controller\\"}],\\"image\\":\\"cr.l5d.io/linkerd/controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9990},\\"initialDelaySeconds\\":10},\\"name\\":\\"identity\\",\\"ports\\":[{\\"containerPort\\":8080,\\"name\\":\\"grpc\\"},{\\"containerPort\\":9990,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9990}},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/identity/issuer\\",\\"name\\":\\"identity-issuer\\"},{\\"mountPath\\":\\"/var/run/linkerd/identity/trust-roots/\\",\\"name\\":\\"trust-roots\\"}]},{\\"env\\":[{\\"name\\":\\"_pod_name\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"_pod_ns\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}},{\\"name\\":\\"_pod_nodeName\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.nodeName\\"}}},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS\\",\\"value\\":\\"8080\\"},{\\"name\\":\\"LINKERD2_PROXY_LOG\\",\\"value\\":\\"warn,linkerd=info\\"},{\\"name\\":\\"LINKERD2_PROXY_LOG_FORMAT\\",\\"value\\":\\"plain\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_ADDR\\",\\"value\\":\\"linkerd-dst-headless.linkerd.svc.cluster.local.:8086\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_ADDR\\",\\"value\\":\\"linkerd-policy.linkerd.svc.cluster.local.:8090\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_WORKLOAD\\",\\"value\\":\\"$(_pod_ns):$(_pod_name)\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY\\",\\"value\\":\\"all-unauthenticated\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"100ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"1000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_CONTROL_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4190\\"},{\\"name\\":\\"LINKERD2_PROXY_ADMIN_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4191\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR\\",\\"value\\":\\"127.0.0.1:4140\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4143\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_IPS\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"status.podIPs\\"}}},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS\\",\\"value\\":\\"8080,9990\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES\\",\\"value\\":\\"svc.cluster.local.\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION\\",\\"value\\":\\"25,587,3306,4444,5432,6379,9300,11211\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_CONTEXT\\",\\"value\\":\\"{\\\\\\"ns\\\\\\":\\\\\\"$(_pod_ns)\\\\\\", \\\\\\"nodeName\\\\\\":\\\\\\"$(_pod_nodeName)\\\\\\"}\\\\n\\"},{\\"name\\":\\"_pod_sa\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.serviceAccountName\\"}}},{\\"name\\":\\"_l5d_ns\\",\\"value\\":\\"linkerd\\"},{\\"name\\":\\"_l5d_trustdomain\\",\\"value\\":\\"cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_DIR\\",\\"value\\":\\"/var/run/linkerd/identity/end-entity\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS\\",\\"valueFrom\\":{\\"configMapKeyRef\\":{\\"key\\":\\"ca-bundle.crt\\",\\"name\\":\\"linkerd-identity-trust-roots\\"}}},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TOKEN_FILE\\",\\"value\\":\\"/var/run/secrets/kubernetes.io/serviceaccount/token\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_ADDR\\",\\"value\\":\\"localhost.:8080\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_LOCAL_NAME\\",\\"value\\":\\"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_NAME\\",\\"value\\":\\"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"}],\\"image\\":\\"cr.l5d.io/linkerd/proxy:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/live\\",\\"port\\":4191},\\"initialDelaySeconds\\":10},\\"name\\":\\"linkerd-proxy\\",\\"ports\\":[{\\"containerPort\\":4143,\\"name\\":\\"linkerd-proxy\\"},{\\"containerPort\\":4191,\\"name\\":\\"linkerd-admin\\"}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":4191},\\"initialDelaySeconds\\":2},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsUser\\":2102},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/identity/end-entity\\",\\"name\\":\\"linkerd-identity-end-entity\\"}]}],\\"initContainers\\":[{\\"args\\":[\\"--incoming-proxy-port\\",\\"4143\\",\\"--outgoing-proxy-port\\",\\"4140\\",\\"--proxy-uid\\",\\"2102\\",\\"--inbound-ports-to-ignore\\",\\"4190,4191,4567,4568\\",\\"--outbound-ports-to-ignore\\",\\"443\\"],\\"image\\":\\"cr.l5d.io/linkerd/proxy-init:v1.5.3\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"linkerd-init\\",\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"50Mi\\"},\\"requests\\":{\\"cpu\\":\\"10m\\",\\"memory\\":\\"10Mi\\"}},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":true,\\"capabilities\\":{\\"add\\":[\\"NET_ADMIN\\",\\"NET_RAW\\"]},\\"privileged\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsNonRoot\\":false,\\"runAsUser\\":0},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/run\\",\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"linkerd-identity\\",\\"volumes\\":[{\\"name\\":\\"identity-issuer\\",\\"secret\\":{\\"secretName\\":\\"linkerd-identity-issuer\\"}},{\\"configMap\\":{\\"name\\":\\"linkerd-identity-trust-roots\\"},\\"name\\":\\"trust-roots\\"},{\\"emptyDir\\":{},\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"},{\\"emptyDir\\":{\\"medium\\":\\"Memory\\"},\\"name\\":\\"linkerd-identity-end-entity\\"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-identity",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
            "linkerd.io/identity-mode": "default",
            "linkerd.io/proxy-version": "stable-2.11.2",
          },
          "labels": Object {
            "linkerd.io/control-plane-component": "identity",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-identity",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "identity",
                "-log-level=info",
                "-log-format=plain",
                "-controller-namespace=linkerd",
                "-identity-trust-domain=cluster.local",
                "-identity-issuance-lifetime=24h0m0s",
                "-identity-clock-skew-allowance=20s",
                "-identity-scheme=kubernetes.io/tls",
                "-enable-pprof=false",
              ],
              "env": Array [
                Object {
                  "name": "LINKERD_DISABLED",
                  "value": "linkerd-await cannot block the identity controller",
                },
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9990,
                },
                "initialDelaySeconds": 10,
              },
              "name": "identity",
              "ports": Array [
                Object {
                  "containerPort": 8080,
                  "name": "grpc",
                },
                Object {
                  "containerPort": 9990,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9990,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/identity/issuer",
                  "name": "identity-issuer",
                },
                Object {
                  "mountPath": "/var/run/linkerd/identity/trust-roots/",
                  "name": "trust-roots",
                },
              ],
            },
            Object {
              "env": Array [
                Object {
                  "name": "_pod_name",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "_pod_ns",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                Object {
                  "name": "_pod_nodeName",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS",
                  "value": "8080",
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "linkerd-dst-headless.linkerd.svc.cluster.local.:8086",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "linkerd-policy.linkerd.svc.cluster.local.:8090",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                Object {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8080,9990",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}
",
                },
                Object {
                  "name": "_pod_sa",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                Object {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                Object {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": Object {
                    "configMapKeyRef": Object {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "localhost.:8080",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": Array [
                Object {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                Object {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "443",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v1.5.3",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": Object {
                "limits": Object {
                  "cpu": "100m",
                  "memory": "50Mi",
                },
                "requests": Object {
                  "cpu": "10m",
                  "memory": "10Mi",
                },
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": true,
                "capabilities": Object {
                  "add": Array [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": false,
                "runAsUser": 0,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-identity",
          "volumes": Array [
            Object {
              "name": "identity-issuer",
              "secret": Object {
                "secretName": "linkerd-identity-issuer",
              },
            },
            Object {
              "configMap": Object {
                "name": "linkerd-identity-trust-roots",
              },
              "name": "trust-roots",
            },
            Object {
              "emptyDir": Object {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            Object {
              "emptyDir": Object {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"destination\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-destination\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-destination\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/config\\":\\"57f3ff6f5e13221b17df161b5575fa043a6a89b6cb522983674b6a476513f8a0\\",\\"config.linkerd.io/default-inbound-policy\\":\\"all-unauthenticated\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\",\\"linkerd.io/identity-mode\\":\\"default\\",\\"linkerd.io/proxy-version\\":\\"stable-2.11.2\\"},\\"labels\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-destination\\",\\"linkerd.io/workload-ns\\":\\"linkerd\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"_pod_name\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"_pod_ns\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}},{\\"name\\":\\"_pod_nodeName\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.nodeName\\"}}},{\\"name\\":\\"LINKERD2_PROXY_LOG\\",\\"value\\":\\"warn,linkerd=info\\"},{\\"name\\":\\"LINKERD2_PROXY_LOG_FORMAT\\",\\"value\\":\\"plain\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_ADDR\\",\\"value\\":\\"localhost.:8086\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_ADDR\\",\\"value\\":\\"localhost.:8090\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_WORKLOAD\\",\\"value\\":\\"$(_pod_ns):$(_pod_name)\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY\\",\\"value\\":\\"all-unauthenticated\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"100ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"1000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_CONTROL_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4190\\"},{\\"name\\":\\"LINKERD2_PROXY_ADMIN_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4191\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR\\",\\"value\\":\\"127.0.0.1:4140\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4143\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_IPS\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"status.podIPs\\"}}},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS\\",\\"value\\":\\"8086,8090,8443,9443,9990,9996,9997\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES\\",\\"value\\":\\"svc.cluster.local.\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION\\",\\"value\\":\\"25,587,3306,4444,5432,6379,9300,11211\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_CONTEXT\\",\\"value\\":\\"{\\\\\\"ns\\\\\\":\\\\\\"$(_pod_ns)\\\\\\", \\\\\\"nodeName\\\\\\":\\\\\\"$(_pod_nodeName)\\\\\\"}\\\\n\\"},{\\"name\\":\\"_pod_sa\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.serviceAccountName\\"}}},{\\"name\\":\\"_l5d_ns\\",\\"value\\":\\"linkerd\\"},{\\"name\\":\\"_l5d_trustdomain\\",\\"value\\":\\"cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_DIR\\",\\"value\\":\\"/var/run/linkerd/identity/end-entity\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS\\",\\"valueFrom\\":{\\"configMapKeyRef\\":{\\"key\\":\\"ca-bundle.crt\\",\\"name\\":\\"linkerd-identity-trust-roots\\"}}},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TOKEN_FILE\\",\\"value\\":\\"/var/run/secrets/kubernetes.io/serviceaccount/token\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_ADDR\\",\\"value\\":\\"linkerd-identity-headless.linkerd.svc.cluster.local.:8080\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_LOCAL_NAME\\",\\"value\\":\\"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_NAME\\",\\"value\\":\\"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"}],\\"image\\":\\"cr.l5d.io/linkerd/proxy:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"lifecycle\\":{\\"postStart\\":{\\"exec\\":{\\"command\\":[\\"/usr/lib/linkerd/linkerd-await\\",\\"--timeout=2m\\"]}}},\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/live\\",\\"port\\":4191},\\"initialDelaySeconds\\":10},\\"name\\":\\"linkerd-proxy\\",\\"ports\\":[{\\"containerPort\\":4143,\\"name\\":\\"linkerd-proxy\\"},{\\"containerPort\\":4191,\\"name\\":\\"linkerd-admin\\"}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":4191},\\"initialDelaySeconds\\":2},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsUser\\":2102},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/identity/end-entity\\",\\"name\\":\\"linkerd-identity-end-entity\\"}]},{\\"args\\":[\\"destination\\",\\"-addr=:8086\\",\\"-controller-namespace=linkerd\\",\\"-enable-h2-upgrade=true\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-enable-endpoint-slices=false\\",\\"-cluster-domain=cluster.local\\",\\"-identity-trust-domain=cluster.local\\",\\"-default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9996},\\"initialDelaySeconds\\":10},\\"name\\":\\"destination\\",\\"ports\\":[{\\"containerPort\\":8086,\\"name\\":\\"grpc\\"},{\\"containerPort\\":9996,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9996}},\\"securityContext\\":{\\"runAsUser\\":2103}},{\\"args\\":[\\"sp-validator\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9997},\\"initialDelaySeconds\\":10},\\"name\\":\\"sp-validator\\",\\"ports\\":[{\\"containerPort\\":8443,\\"name\\":\\"sp-validator\\"},{\\"containerPort\\":9997,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9997}},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/tls\\",\\"name\\":\\"sp-tls\\",\\"readOnly\\":true}]},{\\"args\\":[\\"--admin-addr=0.0.0.0:9990\\",\\"--control-plane-namespace=linkerd\\",\\"--grpc-addr=0.0.0.0:8090\\",\\"--server-addr=0.0.0.0:9443\\",\\"--server-tls-key=/var/run/linkerd/tls/tls.key\\",\\"--server-tls-certs=/var/run/linkerd/tls/tls.crt\\",\\"--cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\",\\"--identity-domain=cluster.local\\",\\"--default-policy=all-unauthenticated\\",\\"--log-level=linkerd=info,warn\\",\\"--log-format=plain\\"],\\"image\\":\\"cr.l5d.io/linkerd/policy-controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/live\\",\\"port\\":\\"admin\\"}},\\"name\\":\\"policy\\",\\"ports\\":[{\\"containerPort\\":8090,\\"name\\":\\"grpc\\"},{\\"containerPort\\":9990,\\"name\\":\\"admin\\"},{\\"containerPort\\":9443,\\"name\\":\\"policy-https\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":\\"admin\\"},\\"initialDelaySeconds\\":10},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/tls\\",\\"name\\":\\"policy-tls\\",\\"readOnly\\":true}]}],\\"initContainers\\":[{\\"args\\":[\\"--incoming-proxy-port\\",\\"4143\\",\\"--outgoing-proxy-port\\",\\"4140\\",\\"--proxy-uid\\",\\"2102\\",\\"--inbound-ports-to-ignore\\",\\"4190,4191,4567,4568\\",\\"--outbound-ports-to-ignore\\",\\"443\\"],\\"image\\":\\"cr.l5d.io/linkerd/proxy-init:v1.5.3\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"linkerd-init\\",\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"50Mi\\"},\\"requests\\":{\\"cpu\\":\\"10m\\",\\"memory\\":\\"10Mi\\"}},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":true,\\"capabilities\\":{\\"add\\":[\\"NET_ADMIN\\",\\"NET_RAW\\"]},\\"privileged\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsNonRoot\\":false,\\"runAsUser\\":0},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/run\\",\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"linkerd-destination\\",\\"volumes\\":[{\\"name\\":\\"sp-tls\\",\\"secret\\":{\\"secretName\\":\\"linkerd-sp-validator-k8s-tls\\"}},{\\"name\\":\\"policy-tls\\",\\"secret\\":{\\"secretName\\":\\"linkerd-policy-validator-k8s-tls\\"}},{\\"emptyDir\\":{},\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"},{\\"emptyDir\\":{\\"medium\\":\\"Memory\\"},\\"name\\":\\"linkerd-identity-end-entity\\"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-destination",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-destination.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/config": "57f3ff6f5e13221b17df161b5575fa043a6a89b6cb522983674b6a476513f8a0",
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
            "linkerd.io/identity-mode": "default",
            "linkerd.io/proxy-version": "stable-2.11.2",
          },
          "labels": Object {
            "linkerd.io/control-plane-component": "destination",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-destination",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "_pod_name",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "_pod_ns",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                Object {
                  "name": "_pod_nodeName",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "localhost.:8086",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "localhost.:8090",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                Object {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8086,8090,8443,9443,9990,9996,9997",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}
",
                },
                Object {
                  "name": "_pod_sa",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                Object {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                Object {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": Object {
                    "configMapKeyRef": Object {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "linkerd-identity-headless.linkerd.svc.cluster.local.:8080",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": Object {
                "postStart": Object {
                  "exec": Object {
                    "command": Array [
                      "/usr/lib/linkerd/linkerd-await",
                      "--timeout=2m",
                    ],
                  },
                },
              },
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": Array [
                Object {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                Object {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
              ],
            },
            Object {
              "args": Array [
                "destination",
                "-addr=:8086",
                "-controller-namespace=linkerd",
                "-enable-h2-upgrade=true",
                "-log-level=info",
                "-log-format=plain",
                "-enable-endpoint-slices=false",
                "-cluster-domain=cluster.local",
                "-identity-trust-domain=cluster.local",
                "-default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9996,
                },
                "initialDelaySeconds": 10,
              },
              "name": "destination",
              "ports": Array [
                Object {
                  "containerPort": 8086,
                  "name": "grpc",
                },
                Object {
                  "containerPort": 9996,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9996,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
            },
            Object {
              "args": Array [
                "sp-validator",
                "-log-level=info",
                "-log-format=plain",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9997,
                },
                "initialDelaySeconds": 10,
              },
              "name": "sp-validator",
              "ports": Array [
                Object {
                  "containerPort": 8443,
                  "name": "sp-validator",
                },
                Object {
                  "containerPort": 9997,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9997,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "sp-tls",
                  "readOnly": true,
                },
              ],
            },
            Object {
              "args": Array [
                "--admin-addr=0.0.0.0:9990",
                "--control-plane-namespace=linkerd",
                "--grpc-addr=0.0.0.0:8090",
                "--server-addr=0.0.0.0:9443",
                "--server-tls-key=/var/run/linkerd/tls/tls.key",
                "--server-tls-certs=/var/run/linkerd/tls/tls.crt",
                "--cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                "--identity-domain=cluster.local",
                "--default-policy=all-unauthenticated",
                "--log-level=linkerd=info,warn",
                "--log-format=plain",
              ],
              "image": "cr.l5d.io/linkerd/policy-controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/live",
                  "port": "admin",
                },
              },
              "name": "policy",
              "ports": Array [
                Object {
                  "containerPort": 8090,
                  "name": "grpc",
                },
                Object {
                  "containerPort": 9990,
                  "name": "admin",
                },
                Object {
                  "containerPort": 9443,
                  "name": "policy-https",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": "admin",
                },
                "initialDelaySeconds": 10,
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "policy-tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "443",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v1.5.3",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": Object {
                "limits": Object {
                  "cpu": "100m",
                  "memory": "50Mi",
                },
                "requests": Object {
                  "cpu": "10m",
                  "memory": "10Mi",
                },
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": true,
                "capabilities": Object {
                  "add": Array [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": false,
                "runAsUser": 0,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-destination",
          "volumes": Array [
            Object {
              "name": "sp-tls",
              "secret": Object {
                "secretName": "linkerd-sp-validator-k8s-tls",
              },
            },
            Object {
              "name": "policy-tls",
              "secret": Object {
                "secretName": "linkerd-policy-validator-k8s-tls",
              },
            },
            Object {
              "emptyDir": Object {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            Object {
              "emptyDir": Object {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"tap-injector\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"component\\":\\"tap-injector\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap-injector\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"component\\":\\"tap-injector\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/config\\":\\"179c1704366eac5276a9192f0692c7931db1e7e881d22eb572fe4336b98f4e7e\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"component\\":\\"tap-injector\\",\\"linkerd.io/extension\\":\\"viz\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"injector\\",\\"-tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/tap:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9995},\\"initialDelaySeconds\\":10},\\"name\\":\\"tap-injector\\",\\"ports\\":[{\\"containerPort\\":8443,\\"name\\":\\"tap-injector\\"},{\\"containerPort\\":9995,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9995}},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/tls\\",\\"name\\":\\"tls\\",\\"readOnly\\":true}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"tap-injector\\",\\"volumes\\":[{\\"name\\":\\"tls\\",\\"secret\\":{\\"secretName\\":\\"tap-injector-k8s-tls\\"}}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap-injector",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-tap-injector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/config": "179c1704366eac5276a9192f0692c7931db1e7e881d22eb572fe4336b98f4e7e",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "labels": Object {
            "component": "tap-injector",
            "linkerd.io/extension": "viz",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "injector",
                "-tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local",
                "-log-level=info",
                "-log-format=plain",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/tap:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9995,
                },
                "initialDelaySeconds": 10,
              },
              "name": "tap-injector",
              "ports": Array [
                Object {
                  "containerPort": 8443,
                  "name": "tap-injector",
                },
                Object {
                  "containerPort": 9995,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9995,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "tap-injector",
          "volumes": Array [
            Object {
              "name": "tls",
              "secret": Object {
                "secretName": "tap-injector-k8s-tls",
              },
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"tap\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"tap\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/config\\":\\"1977e32926f655a5a4752905449a934b15c31ee0a061b57ebff5aa2a586d7ff6\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"api\\",\\"-api-namespace=linkerd\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-identity-trust-domain=cluster.local\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/tap:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9998},\\"initialDelaySeconds\\":10},\\"name\\":\\"tap\\",\\"ports\\":[{\\"containerPort\\":8088,\\"name\\":\\"grpc\\"},{\\"containerPort\\":8089,\\"name\\":\\"apiserver\\"},{\\"containerPort\\":9998,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9998}},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/tls\\",\\"name\\":\\"tls\\",\\"readOnly\\":true}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"tap\\",\\"volumes\\":[{\\"name\\":\\"tls\\",\\"secret\\":{\\"secretName\\":\\"tap-k8s-tls\\"}}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-tap.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/config": "1977e32926f655a5a4752905449a934b15c31ee0a061b57ebff5aa2a586d7ff6",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "labels": Object {
            "component": "tap",
            "linkerd.io/extension": "viz",
            "namespace": "linkerd-viz",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "api",
                "-api-namespace=linkerd",
                "-log-level=info",
                "-log-format=plain",
                "-identity-trust-domain=cluster.local",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/tap:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9998,
                },
                "initialDelaySeconds": 10,
              },
              "name": "tap",
              "ports": Array [
                Object {
                  "containerPort": 8088,
                  "name": "grpc",
                },
                Object {
                  "containerPort": 8089,
                  "name": "apiserver",
                },
                Object {
                  "containerPort": 9998,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9998,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "tap",
          "volumes": Array [
            Object {
              "name": "tls",
              "secret": Object {
                "secretName": "tap-k8s-tls",
              },
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"metrics-api\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"metrics-api\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/config\\":\\"951a7b61ff59229914ca604c671353e5fdc0eda710bde2bfbb50c9225225babe\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"-controller-namespace=linkerd\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-cluster-domain=cluster.local\\",\\"-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/metrics-api:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9995},\\"initialDelaySeconds\\":10},\\"name\\":\\"metrics-api\\",\\"ports\\":[{\\"containerPort\\":8085,\\"name\\":\\"http\\"},{\\"containerPort\\":9995,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9995}},\\"securityContext\\":{\\"runAsUser\\":2103}}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"metrics-api\\"}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "metrics-api",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-metrics-api.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/config": "951a7b61ff59229914ca604c671353e5fdc0eda710bde2bfbb50c9225225babe",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "labels": Object {
            "component": "metrics-api",
            "linkerd.io/extension": "viz",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "-controller-namespace=linkerd",
                "-log-level=info",
                "-log-format=plain",
                "-cluster-domain=cluster.local",
                "-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/metrics-api:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9995,
                },
                "initialDelaySeconds": 10,
              },
              "name": "metrics-api",
              "ports": Array [
                Object {
                  "containerPort": 8085,
                  "name": "http",
                },
                Object {
                  "containerPort": 9995,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9995,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "metrics-api",
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"web\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"web\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"-linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085\\",\\"-cluster-domain=cluster.local\\",\\"-grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000\\",\\"-controller-namespace=linkerd\\",\\"-viz-namespace=linkerd-viz\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-enforced-host=^(localhost|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|web\\\\\\\\.linkerd-viz\\\\\\\\.svc\\\\\\\\.cluster\\\\\\\\.local|web\\\\\\\\.linkerd-viz\\\\\\\\.svc|\\\\\\\\[::1\\\\\\\\])(:\\\\\\\\d+)?$\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/web:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9994},\\"initialDelaySeconds\\":10},\\"name\\":\\"web\\",\\"ports\\":[{\\"containerPort\\":8084,\\"name\\":\\"http\\"},{\\"containerPort\\":9994,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9994}},\\"securityContext\\":{\\"runAsUser\\":2103}}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"web\\"}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "web",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-web.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "labels": Object {
            "component": "web",
            "linkerd.io/extension": "viz",
            "namespace": "linkerd-viz",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "-linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085",
                "-cluster-domain=cluster.local",
                "-grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000",
                "-controller-namespace=linkerd",
                "-viz-namespace=linkerd-viz",
                "-log-level=info",
                "-log-format=plain",
                "-enforced-host=^(localhost|127\\\\.0\\\\.0\\\\.1|web\\\\.linkerd-viz\\\\.svc\\\\.cluster\\\\.local|web\\\\.linkerd-viz\\\\.svc|\\\\[::1\\\\])(:\\\\d+)?$",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/web:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9994,
                },
                "initialDelaySeconds": 10,
              },
              "name": "web",
              "ports": Array [
                Object {
                  "containerPort": 8084,
                  "name": "http",
                },
                Object {
                  "containerPort": 9994,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9994,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "web",
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"prometheus\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"prometheus\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"--log.level=info\\",\\"--log.format=logfmt\\",\\"--config.file=/etc/prometheus/prometheus.yml\\",\\"--storage.tsdb.path=/data\\",\\"--storage.tsdb.retention.time=6h\\"],\\"image\\":\\"prom/prometheus:v2.19.3\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/-/healthy\\",\\"port\\":9090},\\"initialDelaySeconds\\":30,\\"timeoutSeconds\\":30},\\"name\\":\\"prometheus\\",\\"ports\\":[{\\"containerPort\\":9090,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/-/ready\\",\\"port\\":9090},\\"initialDelaySeconds\\":30,\\"timeoutSeconds\\":30},\\"securityContext\\":{\\"runAsGroup\\":65534,\\"runAsNonRoot\\":true,\\"runAsUser\\":65534},\\"volumeMounts\\":[{\\"mountPath\\":\\"/data\\",\\"name\\":\\"data\\"},{\\"mountPath\\":\\"/etc/prometheus/prometheus.yml\\",\\"name\\":\\"prometheus-config\\",\\"readOnly\\":true,\\"subPath\\":\\"prometheus.yml\\"}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"securityContext\\":{\\"fsGroup\\":65534},\\"serviceAccountName\\":\\"prometheus\\",\\"volumes\\":[{\\"emptyDir\\":{},\\"name\\":\\"data\\"},{\\"configMap\\":{\\"name\\":\\"prometheus-config\\"},\\"name\\":\\"prometheus-config\\"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "prometheus",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-prometheus.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "labels": Object {
            "component": "prometheus",
            "linkerd.io/extension": "viz",
            "namespace": "linkerd-viz",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "--log.level=info",
                "--log.format=logfmt",
                "--config.file=/etc/prometheus/prometheus.yml",
                "--storage.tsdb.path=/data",
                "--storage.tsdb.retention.time=6h",
              ],
              "image": "prom/prometheus:v2.19.3",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/-/healthy",
                  "port": 9090,
                },
                "initialDelaySeconds": 30,
                "timeoutSeconds": 30,
              },
              "name": "prometheus",
              "ports": Array [
                Object {
                  "containerPort": 9090,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/-/ready",
                  "port": 9090,
                },
                "initialDelaySeconds": 30,
                "timeoutSeconds": 30,
              },
              "securityContext": Object {
                "runAsGroup": 65534,
                "runAsNonRoot": true,
                "runAsUser": 65534,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/data",
                  "name": "data",
                },
                Object {
                  "mountPath": "/etc/prometheus/prometheus.yml",
                  "name": "prometheus-config",
                  "readOnly": true,
                  "subPath": "prometheus.yml",
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "securityContext": Object {
            "fsGroup": 65534,
          },
          "serviceAccountName": "prometheus",
          "volumes": Array [
            Object {
              "emptyDir": Object {},
              "name": "data",
            },
            Object {
              "configMap": Object {
                "name": "prometheus-config",
              },
              "name": "prometheus-config",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"grafana\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"grafana\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"GF_PATHS_DATA\\",\\"value\\":\\"/data\\"},{\\"name\\":\\"GODEBUG\\",\\"value\\":\\"netdns=go\\"}],\\"image\\":\\"cr.l5d.io/linkerd/grafana:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/api/health\\",\\"port\\":3000},\\"initialDelaySeconds\\":30},\\"name\\":\\"grafana\\",\\"ports\\":[{\\"containerPort\\":3000,\\"name\\":\\"http\\"}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/api/health\\",\\"port\\":3000}},\\"securityContext\\":{\\"runAsUser\\":472},\\"volumeMounts\\":[{\\"mountPath\\":\\"/data\\",\\"name\\":\\"data\\"},{\\"mountPath\\":\\"/etc/grafana\\",\\"name\\":\\"grafana-config\\",\\"readOnly\\":true}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"grafana\\",\\"volumes\\":[{\\"emptyDir\\":{},\\"name\\":\\"data\\"},{\\"configMap\\":{\\"items\\":[{\\"key\\":\\"grafana.ini\\",\\"path\\":\\"grafana.ini\\"},{\\"key\\":\\"datasources.yaml\\",\\"path\\":\\"provisioning/datasources/datasources.yaml\\"},{\\"key\\":\\"dashboards.yaml\\",\\"path\\":\\"provisioning/dashboards/dashboards.yaml\\"}],\\"name\\":\\"grafana-config\\"},\\"name\\":\\"grafana-config\\"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "grafana",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-grafana.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "labels": Object {
            "component": "grafana",
            "linkerd.io/extension": "viz",
            "namespace": "linkerd-viz",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "GF_PATHS_DATA",
                  "value": "/data",
                },
                Object {
                  "name": "GODEBUG",
                  "value": "netdns=go",
                },
              ],
              "image": "cr.l5d.io/linkerd/grafana:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/api/health",
                  "port": 3000,
                },
                "initialDelaySeconds": 30,
              },
              "name": "grafana",
              "ports": Array [
                Object {
                  "containerPort": 3000,
                  "name": "http",
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/api/health",
                  "port": 3000,
                },
              },
              "securityContext": Object {
                "runAsUser": 472,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/data",
                  "name": "data",
                },
                Object {
                  "mountPath": "/etc/grafana",
                  "name": "grafana-config",
                  "readOnly": true,
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "grafana",
          "volumes": Array [
            Object {
              "emptyDir": Object {},
              "name": "data",
            },
            Object {
              "configMap": Object {
                "items": Array [
                  Object {
                    "key": "grafana.ini",
                    "path": "grafana.ini",
                  },
                  Object {
                    "key": "datasources.yaml",
                    "path": "provisioning/datasources/datasources.yaml",
                  },
                  Object {
                    "key": "dashboards.yaml",
                    "path": "provisioning/dashboards/dashboards.yaml",
                  },
                ],
                "name": "grafana-config",
              },
              "name": "grafana-config",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"replicas\\":2,\\"selector\\":{\\"matchLabels\\":{\\"app\\":\\"graphql\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app\\":\\"graphql\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"APP_ENVIRONMENT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_ENVIRONMENT\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"APP_HOST\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_HOST\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"APP_PORT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_PORT\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"APP_EXTERNAL_BASE_URL\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_EXTERNAL_BASE_URL\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"OAUTH_GITHUB_CLIENT_ID\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"OAUTH_GITHUB_CLIENT_ID\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"OAUTH_GITHUB_CLIENT_SECRET\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"OAUTH_GITHUB_CLIENT_SECRET\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"OAUTH_GOOGLE_CLIENT_ID\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"OAUTH_GOOGLE_CLIENT_ID\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"OAUTH_GOOGLE_CLIENT_SECRET\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"OAUTH_GOOGLE_CLIENT_SECRET\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_NAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_NAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_USERNAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_USERNAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_PASSWORD\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_ROOT_USERNAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_ROOT_USERNAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_ROOT_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_ROOT_PASSWORD\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_HOST\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_HOST\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_SERVICE_NAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_SERVICE_NAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_STORAGE_CLASS\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_STORAGE_CLASS\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_PORT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_PORT\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_USERNAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_USERNAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_PASSWORD\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_HOST\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_HOST\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_SERVICE_NAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_SERVICE_NAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_PORT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_PORT\\",\\"name\\":\\"graphql-mongo\\"}}}],\\"image\\":\\"ghcr.io/oyelowo/graphql-mongo:master-f21d07e5b52e5fdc859482d526310efc78d9efea\\",\\"livenessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/api/liveness\\",\\"port\\":8000},\\"initialDelaySeconds\\":300,\\"periodSeconds\\":10},\\"name\\":\\"graphql\\",\\"ports\\":[{\\"containerPort\\":8000,\\"name\\":\\"http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/api/healthz\\",\\"port\\":8000},\\"initialDelaySeconds\\":60,\\"periodSeconds\\":10},\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"200Mi\\"},\\"requests\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"70Mi\\"}},\\"volumeMounts\\":[]}],\\"imagePullSecrets\\":[{\\"name\\":\\"my-registry-key\\"}],\\"initContainers\\":[],\\"volumes\\":[]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "graphql-mongo",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/apps_v1-deployment-applications-graphql-mongo.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app": "graphql",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "APP_ENVIRONMENT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_ENVIRONMENT",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "APP_HOST",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_HOST",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "APP_PORT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_PORT",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "APP_EXTERNAL_BASE_URL",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_EXTERNAL_BASE_URL",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "OAUTH_GITHUB_CLIENT_ID",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "OAUTH_GITHUB_CLIENT_ID",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "OAUTH_GITHUB_CLIENT_SECRET",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "OAUTH_GITHUB_CLIENT_SECRET",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "OAUTH_GOOGLE_CLIENT_ID",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "OAUTH_GOOGLE_CLIENT_ID",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "OAUTH_GOOGLE_CLIENT_SECRET",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "OAUTH_GOOGLE_CLIENT_SECRET",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_NAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_NAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_USERNAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_USERNAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_PASSWORD",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_ROOT_USERNAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_ROOT_USERNAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_ROOT_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_ROOT_PASSWORD",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_HOST",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_HOST",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_SERVICE_NAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_SERVICE_NAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_STORAGE_CLASS",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_STORAGE_CLASS",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_PORT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_PORT",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_USERNAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_USERNAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_PASSWORD",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_HOST",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_HOST",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_SERVICE_NAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_SERVICE_NAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_SERVICE_NAME_WITH_SUFFIX",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_SERVICE_NAME_WITH_SUFFIX",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_PORT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_PORT",
                      "name": "graphql-mongo",
                    },
                  },
                },
              ],
              "image": "ghcr.io/oyelowo/graphql-mongo:master-f21d07e5b52e5fdc859482d526310efc78d9efea",
              "livenessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/api/liveness",
                  "port": 8000,
                },
                "initialDelaySeconds": 300,
                "periodSeconds": 10,
              },
              "name": "graphql",
              "ports": Array [
                Object {
                  "containerPort": 8000,
                  "name": "http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/api/healthz",
                  "port": 8000,
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
              },
              "resources": Object {
                "limits": Object {
                  "cpu": "100m",
                  "memory": "200Mi",
                },
                "requests": Object {
                  "cpu": "100m",
                  "memory": "70Mi",
                },
              },
              "volumeMounts": Array [],
            },
          ],
          "imagePullSecrets": Array [
            Object {
              "name": "my-registry-key",
            },
          ],
          "initContainers": Array [],
          "volumes": Array [],
        },
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"replicas\\":2,\\"selector\\":{\\"matchLabels\\":{\\"app\\":\\"react\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app\\":\\"react\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"APP_ENVIRONMENT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_ENVIRONMENT\\",\\"name\\":\\"react-web\\"}}},{\\"name\\":\\"APP_HOST\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_HOST\\",\\"name\\":\\"react-web\\"}}},{\\"name\\":\\"APP_PORT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_PORT\\",\\"name\\":\\"react-web\\"}}},{\\"name\\":\\"APP_EXTERNAL_BASE_URL\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_EXTERNAL_BASE_URL\\",\\"name\\":\\"react-web\\"}}}],\\"image\\":\\"ghcr.io/oyelowo/react-web:master-6fe87cdb17db051e707efbaaae6fc0dc83844ebe\\",\\"name\\":\\"react\\",\\"ports\\":[{\\"containerPort\\":3000,\\"name\\":\\"http\\"}],\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"700m\\",\\"memory\\":\\"2Gi\\"},\\"requests\\":{\\"cpu\\":\\"500m\\",\\"memory\\":\\"1.3Gi\\"}},\\"volumeMounts\\":[]}],\\"imagePullSecrets\\":[{\\"name\\":\\"my-registry-key\\"}],\\"initContainers\\":[],\\"volumes\\":[]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/react-web/1-manifest/apps_v1-deployment-applications-react-web.yaml",
    "resourceBaseDir": "generatedManifests/test/services/react-web",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app": "react",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "APP_ENVIRONMENT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_ENVIRONMENT",
                      "name": "react-web",
                    },
                  },
                },
                Object {
                  "name": "APP_HOST",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_HOST",
                      "name": "react-web",
                    },
                  },
                },
                Object {
                  "name": "APP_PORT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_PORT",
                      "name": "react-web",
                    },
                  },
                },
                Object {
                  "name": "APP_EXTERNAL_BASE_URL",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_EXTERNAL_BASE_URL",
                      "name": "react-web",
                    },
                  },
                },
              ],
              "image": "ghcr.io/oyelowo/react-web:master-6fe87cdb17db051e707efbaaae6fc0dc83844ebe",
              "name": "react",
              "ports": Array [
                Object {
                  "containerPort": 3000,
                  "name": "http",
                },
              ],
              "resources": Object {
                "limits": Object {
                  "cpu": "700m",
                  "memory": "2Gi",
                },
                "requests": Object {
                  "cpu": "500m",
                  "memory": "1.3Gi",
                },
              },
              "volumeMounts": Array [],
            },
          ],
          "imagePullSecrets": Array [
            Object {
              "name": "my-registry-key",
            },
          ],
          "initContainers": Array [],
          "volumes": Array [],
        },
      },
    },
  },
]
`;

exports[`KubeObject Can sync resources 3`] = `
Array [
  Object {
    "apiVersion": "v1",
    "data": Object {
      "ADMIN_PASSWORD": "jungbunu",
      "password": "jungbunu",
      "type": "git",
      "url": "https://github.com/Oyelowo/modern-distributed-app-template",
      "username": "Oyelowo",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"ADMIN_PASSWORD\\":\\"jungbunu\\",\\"password\\":\\"jungbunu\\",\\"type\\":\\"git\\",\\"url\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"username\\":\\"Oyelowo\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"argocd.argoproj.io/secret-type\\":\\"repository\\"},\\"name\\":\\"argocd-applications-secret\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-applications-secret",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd-applications-parents/1-manifest/v1-secret-argocd-argocd-applications-secret.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd-applications-parents",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "admin.password": "JDJhJDEwJDkwcG1lcUgvWlU1bTZ4TnR6b3NYQy5TdjAybm1OM3NlT3ZyQVFOSlg4a2JQTWpIM25ueExp",
      "admin.passwordMtime": "MjAyMi0wOC0xMVQwNjo0MzoyOFo=",
      "clearPassword": "b3llbG93bw==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"admin.password\\":\\"JDJhJDEwJDkwcG1lcUgvWlU1bTZ4TnR6b3NYQy5TdjAybm1OM3NlT3ZyQVFOSlg4a2JQTWpIM25ueExp\\",\\"admin.passwordMtime\\":\\"MjAyMi0wOC0xMVQwNjo0MzoyOFo=\\",\\"clearPassword\\":\\"b3llbG93bw==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"app.kubernetes.io/part-of\\":\\"argocd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-secret\\",\\"namespace\\":\\"argocd\\"},\\"type\\":\\"Opaque\\"}
",
      },
      "name": "argocd-secret",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-secret-argocd-argocd-secret.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "type": "Opaque",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "redis-password": "dGw0RVN2WTlrTA==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"redis-password\\":\\"dGw0RVN2WTlrTA==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis\\",\\"namespace\\":\\"argocd\\"},\\"type\\":\\"Opaque\\"}
",
      },
      "name": "argocd-redis",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-secret-argocd-argocd-redis.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "type": "Opaque",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUkrYUVCL0EzcmRkK0VDak5VYzhsYlF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3T0RFeE1EWTBNekl6V2hjTk1qTXdPREV4TURZME16SXpXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxwdU53cFZ2dEcvUkVoUXpCM1JiK1BvWU9iVTVOck5iSUJKTU4vNjlWY3FucnYweWQ0SQpjUllyWVIwMjJ5NE9UODk5THVtOHpiVGZDOGVPTXlnaFZ0akFwb0xzcWdtMkkwV3FIcVNtQ0NuR3l6cnJLbzNrCnNCODdsTmJDV1k2ekcvV0J4NFRpbFdsTzBiSDB5elM3NmRrR0d0eW1YNlFwLzdYV2kvMEUzblRhaWxYVHZ0M1kKcFpNTDhZREFQdjJtR1FHU0hhUkQxNG9LRTJDa2tEVm5mU0g4UU5Vd0sydys5cEY1aW82Q0oyTXRIeWhIZmF5NwpaUnBXK0hxLzYxVFhVTTVYR0hPNlpoZ0dLeWEzbnlseXhLa3lFR1QxUFZkMWtXUEhyQ0lXWjZoelArb3dZNzJXCm1NRklwbXJTNExDa0RTSVRBdW03RnpoMGZ0c2dJYmErUk9jQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBNVgvRnMwbXF0R1c4SjVhMVViTVFrTHpuazIzbzZCWkxhMnlydjBxbTYKSCtrdW5UWkVzMnAzUGR0SDJYeXVhVytrRDFmbmRyR2haRHErRkt2Qnc4ZDlmUERLMXBiVHU1RnprS1lrUU9CbwptajJtZVdJUjdMUlJ1UWFIbnJTd1BUQzNlbWtWRVpQMjBiaUNSclhpV3RLdWtaeEZyTmdrbXZwY0d1VWZPWlBUCkNmU0s1NzM4VXpUSVIzWWxHOXExdnVBbVcyQXNrYXNIbTE3M0ZLN2x2R3NwaE8wVTdRY3JFeEJiVmd0SUZ0Qk0KM0tJYktBZmg5VUs2aW1DNGpsazRlVFBicTZSTHlmNFJoK3Rwb3pWeTlmK295cDZ5eEVlUWwvMk5jNU1mQmxyOQp3MWtDUTczN2k0R1QzMXZmRDJST25JOU9ZZFMrV1VDSWs0dnlVL1l6eVdBawotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdW00M0NsVyswYjlFU0ZETUhkRnY0K2hnNXRUazJzMXNnRWt3My9yMVZ5cWV1L1RKCjNnaHhGaXRoSFRiYkxnNVB6MzB1NmJ6TnROOEx4NDR6S0NGVzJNQ21ndXlxQ2JZalJhb2VwS1lJS2NiTE91c3EKamVTd0h6dVUxc0paanJNYjlZSEhoT0tWYVU3UnNmVExOTHZwMlFZYTNLWmZwQ24vdGRhTC9RVGVkTnFLVmRPKwozZGlsa3d2eGdNQSsvYVlaQVpJZHBFUFhpZ29UWUtTUU5XZDlJZnhBMVRBcmJENzJrWG1Lam9Jbll5MGZLRWQ5CnJMdGxHbGI0ZXIvclZOZFF6bGNZYzdwbUdBWXJKcmVmS1hMRXFUSVFaUFU5VjNXUlk4ZXNJaFpucUhNLzZqQmoKdlphWXdVaW1hdExnc0tRTkloTUM2YnNYT0hSKzJ5QWh0cjVFNXdJREFRQUJBb0lCQUc4a0VaQUp1aTZVMWdJKwptTkVWOEp4d0JvVFdXbkRPa21hUU82RHJuYU9QZHY0YVd0WVJOa20vSnJBaDZkeTFENE5rMzdqY284MjJRdkYrCnBxUy82MlJneFdPNzcwckcySlJKYk9jL1RCS0x2dENyTGIxVm5tR2dSWVVhYkFXVVpaQ2hBKzhHbllnZ1F3YlMKSnVxVE5ELzdVYnhGT3pORkRucTdJczErUDVodFFzNlA2U1NFTEpMNG1hK3l2NGdETFIyZm5QbUZIZCtia0xlSwozb3Y5aE1nVjBRRHZCbVVVaFlnZS9icHJCc2ZMd2QxaXRlcHQxNXRGT1RpVWs2NnI1WlFkZlhDY1BmTGd3bExCCkc0MlZLSFovNkxEaTR2Q2U4cXpoVW9KYzExaFlnQnZWYks5WVk1MEJTL21tNllvZmROWjlvMmFKNDk5cjF6R1cKR1FHKzBTRUNnWUVBeGFvWlArZXU5OU1FZmVPU0FVRVV4Zy9udlJiOVhaSnBMazQ0N3RQd2lRbkRSVTUxZXZzVAo0dHhjeWxhYStBNFJNdlVPcURqVTNnUEdKN0lmckVjY3JJMXJZbkZFb2xXSVBiR0xCMWRTOWMzejhBYTJHdkVLCitLdFNTWVYvQ1B4MFlNUHRybXMydmdwQVluRTJGZWU0YjFvVlBiNDZNQTRRcWtnNWtkdzcrKzhDZ1lFQThYTmYKcC8xU2k0b1ZJT3ZseWxoSk52SjVKdXhTcmsxN0gvOFgvdWM1UngyS0J5SFNzRFNiQTEvMFk3Q29aSHJMYkQwTAo5OHJxekxGa1g5WHhENml1ZmU5MzE1OVo4L0Exb2w3OTMzSk1Vd2hTQXZTK1d4Uy9yVUczamdRMjJ4RWN3cThUCmwvTDZlR0dpM2tBU0R1SVRLUFFMemxlUTdXVVRHZnJndWZrWXJva0NnWUVBcHlSTGo0OGdrNnlhMnJ5cEJHaDgKNFhJbm1ld3J1SWtLYWI1NVEvSnhMZC9VZi9GMVE5VzFuaHFLV0FwZHBpMTIrNmplaVA3dGVRS2w5NEVXYVQ0RQprQ0JSVW4vRzhxSHl2NEEydUxGdGxDNWYvSElnWUsyOGdrT1VKRmsrNzJGU0kxVHAwWmdWUlNNMENFb0Uyd2NECkhSMkdZcHhOWmI4dTlsNTJWOUZyNDM4Q2dZRUF5cE02K1Uydm1NVmtUcmU4bHRVVnNGVWxVb1BLSnRWNDdQSncKWm53RzhXU1dMcit3N2dkazJ5TUJmelp6UWNKSXMrcFFCVGtwWUUyZzRrczBNaWdiSml2cEIyNTU0UkZ6WG1TRwphWmVTODhNeVU2cVZud004Z2hkMThtQVV5aDJFWE03WkNJNWltT2VKNXlBb1JuWmxEdUlhbWFlY1A2Q2lzeFJxCndYMTl1TWtDZ1lBaE1Dc2t3aWplbUtGcUd3SnBkeUJ5bWRsemhZcEhaYlN5cm96bEZ3bUpFeHhWVlViVTRSaUEKY1lQOUx4bFZFQ0dETnBCK3NXdnFBdmtEKzRyelRpMDk5OHhWYW93QkNzMVZ1VU9ZMUs4T0FWU3hBVys0dWh0dQpZUWtkN1dnUHB1RS9ybkhIdmNnV29nRnpSQVB0ZVFHRzNpM1dNODdPOVFsSk5PcXVGbDFWSGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUkrYUVCL0EzcmRkK0VDak5VYzhsYlF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3T0RFeE1EWTBNekl6V2hjTk1qTXdPREV4TURZME16SXpXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxwdU53cFZ2dEcvUkVoUXpCM1JiK1BvWU9iVTVOck5iSUJKTU4vNjlWY3FucnYweWQ0SQpjUllyWVIwMjJ5NE9UODk5THVtOHpiVGZDOGVPTXlnaFZ0akFwb0xzcWdtMkkwV3FIcVNtQ0NuR3l6cnJLbzNrCnNCODdsTmJDV1k2ekcvV0J4NFRpbFdsTzBiSDB5elM3NmRrR0d0eW1YNlFwLzdYV2kvMEUzblRhaWxYVHZ0M1kKcFpNTDhZREFQdjJtR1FHU0hhUkQxNG9LRTJDa2tEVm5mU0g4UU5Vd0sydys5cEY1aW82Q0oyTXRIeWhIZmF5NwpaUnBXK0hxLzYxVFhVTTVYR0hPNlpoZ0dLeWEzbnlseXhLa3lFR1QxUFZkMWtXUEhyQ0lXWjZoelArb3dZNzJXCm1NRklwbXJTNExDa0RTSVRBdW03RnpoMGZ0c2dJYmErUk9jQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBNVgvRnMwbXF0R1c4SjVhMVViTVFrTHpuazIzbzZCWkxhMnlydjBxbTYKSCtrdW5UWkVzMnAzUGR0SDJYeXVhVytrRDFmbmRyR2haRHErRkt2Qnc4ZDlmUERLMXBiVHU1RnprS1lrUU9CbwptajJtZVdJUjdMUlJ1UWFIbnJTd1BUQzNlbWtWRVpQMjBiaUNSclhpV3RLdWtaeEZyTmdrbXZwY0d1VWZPWlBUCkNmU0s1NzM4VXpUSVIzWWxHOXExdnVBbVcyQXNrYXNIbTE3M0ZLN2x2R3NwaE8wVTdRY3JFeEJiVmd0SUZ0Qk0KM0tJYktBZmg5VUs2aW1DNGpsazRlVFBicTZSTHlmNFJoK3Rwb3pWeTlmK295cDZ5eEVlUWwvMk5jNU1mQmxyOQp3MWtDUTczN2k0R1QzMXZmRDJST25JOU9ZZFMrV1VDSWs0dnlVL1l6eVdBawotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdW00M0NsVyswYjlFU0ZETUhkRnY0K2hnNXRUazJzMXNnRWt3My9yMVZ5cWV1L1RKCjNnaHhGaXRoSFRiYkxnNVB6MzB1NmJ6TnROOEx4NDR6S0NGVzJNQ21ndXlxQ2JZalJhb2VwS1lJS2NiTE91c3EKamVTd0h6dVUxc0paanJNYjlZSEhoT0tWYVU3UnNmVExOTHZwMlFZYTNLWmZwQ24vdGRhTC9RVGVkTnFLVmRPKwozZGlsa3d2eGdNQSsvYVlaQVpJZHBFUFhpZ29UWUtTUU5XZDlJZnhBMVRBcmJENzJrWG1Lam9Jbll5MGZLRWQ5CnJMdGxHbGI0ZXIvclZOZFF6bGNZYzdwbUdBWXJKcmVmS1hMRXFUSVFaUFU5VjNXUlk4ZXNJaFpucUhNLzZqQmoKdlphWXdVaW1hdExnc0tRTkloTUM2YnNYT0hSKzJ5QWh0cjVFNXdJREFRQUJBb0lCQUc4a0VaQUp1aTZVMWdJKwptTkVWOEp4d0JvVFdXbkRPa21hUU82RHJuYU9QZHY0YVd0WVJOa20vSnJBaDZkeTFENE5rMzdqY284MjJRdkYrCnBxUy82MlJneFdPNzcwckcySlJKYk9jL1RCS0x2dENyTGIxVm5tR2dSWVVhYkFXVVpaQ2hBKzhHbllnZ1F3YlMKSnVxVE5ELzdVYnhGT3pORkRucTdJczErUDVodFFzNlA2U1NFTEpMNG1hK3l2NGdETFIyZm5QbUZIZCtia0xlSwozb3Y5aE1nVjBRRHZCbVVVaFlnZS9icHJCc2ZMd2QxaXRlcHQxNXRGT1RpVWs2NnI1WlFkZlhDY1BmTGd3bExCCkc0MlZLSFovNkxEaTR2Q2U4cXpoVW9KYzExaFlnQnZWYks5WVk1MEJTL21tNllvZmROWjlvMmFKNDk5cjF6R1cKR1FHKzBTRUNnWUVBeGFvWlArZXU5OU1FZmVPU0FVRVV4Zy9udlJiOVhaSnBMazQ0N3RQd2lRbkRSVTUxZXZzVAo0dHhjeWxhYStBNFJNdlVPcURqVTNnUEdKN0lmckVjY3JJMXJZbkZFb2xXSVBiR0xCMWRTOWMzejhBYTJHdkVLCitLdFNTWVYvQ1B4MFlNUHRybXMydmdwQVluRTJGZWU0YjFvVlBiNDZNQTRRcWtnNWtkdzcrKzhDZ1lFQThYTmYKcC8xU2k0b1ZJT3ZseWxoSk52SjVKdXhTcmsxN0gvOFgvdWM1UngyS0J5SFNzRFNiQTEvMFk3Q29aSHJMYkQwTAo5OHJxekxGa1g5WHhENml1ZmU5MzE1OVo4L0Exb2w3OTMzSk1Vd2hTQXZTK1d4Uy9yVUczamdRMjJ4RWN3cThUCmwvTDZlR0dpM2tBU0R1SVRLUFFMemxlUTdXVVRHZnJndWZrWXJva0NnWUVBcHlSTGo0OGdrNnlhMnJ5cEJHaDgKNFhJbm1ld3J1SWtLYWI1NVEvSnhMZC9VZi9GMVE5VzFuaHFLV0FwZHBpMTIrNmplaVA3dGVRS2w5NEVXYVQ0RQprQ0JSVW4vRzhxSHl2NEEydUxGdGxDNWYvSElnWUsyOGdrT1VKRmsrNzJGU0kxVHAwWmdWUlNNMENFb0Uyd2NECkhSMkdZcHhOWmI4dTlsNTJWOUZyNDM4Q2dZRUF5cE02K1Uydm1NVmtUcmU4bHRVVnNGVWxVb1BLSnRWNDdQSncKWm53RzhXU1dMcit3N2dkazJ5TUJmelp6UWNKSXMrcFFCVGtwWUUyZzRrczBNaWdiSml2cEIyNTU0UkZ6WG1TRwphWmVTODhNeVU2cVZud004Z2hkMThtQVV5aDJFWE03WkNJNWltT2VKNXlBb1JuWmxEdUlhbWFlY1A2Q2lzeFJxCndYMTl1TWtDZ1lBaE1Dc2t3aWplbUtGcUd3SnBkeUJ5bWRsemhZcEhaYlN5cm96bEZ3bUpFeHhWVlViVTRSaUEKY1lQOUx4bFZFQ0dETnBCK3NXdnFBdmtEKzRyelRpMDk5OHhWYW93QkNzMVZ1VU9ZMUs4T0FWU3hBVys0dWh0dQpZUWtkN1dnUHB1RS9ybkhIdmNnV29nRnpSQVB0ZVFHRzNpM1dNODdPOVFsSk5PcXVGbDFWSGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-sp-validator-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-sp-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-sp-validator-k8s-tls.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "type": "kubernetes.io/tls",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQUpxemFWRDJFQjluK3hzS3ZxSHV1MzB3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa2JHbHVhMlZ5WkMxd2IyeHBZM2t0ZG1Gc2FXUmhkRzl5TG14cGJtdGxjbVF1YzNaagpNQjRYRFRJeU1EZ3hNVEEyTkRNeU0xb1hEVEl6TURneE1UQTJORE15TTFvd0x6RXRNQ3NHQTFVRUF4TWtiR2x1CmEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeAp3MTRGRzA0di9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLCm9lTXdnN0IzV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnMKUnJqY1lpeXphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWApnWUFEUGloT1JVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrCkRuck5yUFFTaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJvM0F3YmpBT0JnTlYKSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdMd1lEVlIwUkJDZ3dKb0lrYkdsdWEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwCmJtdGxjbVF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ3VvelhFMWJZMkR1VHZLdzcya1NoQVE0c2YKeiszZGlYdEhSbGpiYjNKZWIyNFRWOUVqZ1RybmhsYlpFaG8rcFA5ME5kQlIvQTRvVHdXQjdVUFFienp5eHQ5aApCcHZmVXQ1N1pyQ3hQdGs5RXJVdXR2T3EvU2NqNkNDd1VBUjZ4b2pybnJWQzNqY3ZIZEp0TXBNNlA3QnlQVUtxCjZ6c1dVcVExT0p6Tjg0czV6TDRoMG9YZDA5T0RXOC8rNWRFUVBOY1JXM2pHallvdHFoUnYzVm5aSVVYejZlTVcKaXVveFlrTDZNc2NyNHhGZkROOXBDVnkyVWIvV0JUSGVQd2ZHOGduaTVlR3ErMjNUWGFCbm1xd2V2aFNZcXQ5eQpOcm9rMzVVZlFHamI2WUFRUVdyQlRxa1diSDZ2WVpYVUYrZGEwL2JrVnFwbDNDZGpJdHhHaWV4bnUxS1oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeHcxNEZHMDR2Ci9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLb2VNd2c3QjMKV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnNScmpjWWl5egphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWGdZQURQaWhPClJVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrRG5yTnJQUVMKaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJBb0lCQVFDcEorTEtuVmZHRGJWNAozbCtTWjE1aGRYQ3hTSUNEaUFsUGRwN3F2SHg3OGI4NkRiWW5qeTR2eUYwY09tY3lOK0xxM2NjU29FT0pTMXc2CndNeDJYempnbUdOWDVYalZ6RkhtNDNGZmpSZ2RkVWUzRDV3cU9wMEpMVit2cXBrZDl4V1AzdlRFUlhxQVU2Z2oKNkdteVIrQ2FlenZ1T09jN3M2WW9xaCs0cmZWTDNKU1F3ajZxQTZTbnAybERydmhsSXZ3ZFRNaEs2dnh5Y2xLego1a1o1ZkxUeWtZamxydW1kNEhkWU1BdDE5S2doRXBkYkEwRVlsT2hGRisxcDRjOWRtT3FLTW5oVmhHdVR0L010ClZxT09UN0pPU2tZRUpsWlUrZXBYSjVpeTV0bDA5UFpYOGRGSUZrVjNLSlN2c3NxdThnM0d6R2hUajZrVzFYU2wKT2tuMG9LZUpBb0dCQVAyNXUxQ3l3anJpc1Z5bThNMlRiNGxEejZ6YlVZVmJUc1VNL2lCRGJyYTFoYVlGM0ZqZQpzdEVuWXFHK3JtQ3B0dnhMT3Z6VUhKVyttSzJUY2o5VTNDeG1uYmpyWFd6QkNZWVBCbHExQWNvOW9NYy9UclE5ClhUS3BLSDNOcEdJZTBSYXFscDhrLzlnUm5nbEIyZzVSQ0U5LzVtQm5Tc2Z2STZzaDNCUlpWQkp2QW9HQkFOQXQKUm12blpTUHpLby9lcjNlajVWZGZCN1ZzWEhHRmVCWlVRRkwvL3Bia2gxY2FGQVBpUlJLUC9zaVlYcXBXVkNHZApBbThsSmNnRHpvcGw0NFZwQ0xUVDVvWktxUExDK2IzSDVkQVpRV1VXdm5oOEIxejNYemNDZlpybkpJT0FoZEp1CkE4dC9XQ0p6Vms5U1BHSEJyVHgvbnZyRUR0MGhSbGtPKzBTTWphRVBBb0dBSmpVcTVQc1dUcUhHamFwQ0J1TVYKMzdqTGREOU9wbU5hbUVmZG1PUXVydXJrNWx4cGt5UnVEeHI4T2xrcGp6cmZhRnkzMUV6b3hRLy9rOXZwVDJvcgpBYkN1UGFPTDNRMndyblJpdzVRUVlmRW4zZmxGazlUTnpRdzJJY091NW11M2xzODNnVjJqL1ZpaDBNa08yaXNQCnNsRVRVeDhhM3NLL1AwMEpCRE56ZXBjQ2dZRUFoTS9OdEx1Y3NCSEwzcHVRVUlEVXFTZ3NqOWRCSnYraXZJUWwKd1k0bWkzZml6SFFMdnVxVmJLRkhTQXpGb0dDUkxoeXdWOTVZTzBJS2ZBdEMyM05HSmE5bXk5aEg3eERyS2VPbApQMTFOZGtQTFlxeW1PZTVyNVhtR1R0UVdYSHNiWlVQZzBldzllMFVnRkZ6L3Z0SkVSbXVaTHB6MGFxbDI2d3grCnk1M3NJWXNDZ1lFQTJJVFVlZFQvdElucTJpTXNrR2s2ZExxWnZNWDFsVG4rb0o3ZUZFR2xkUGxuVGlzTFBvZ1AKVWRyTzU4Z2xPRHU2Mk9Qbm05YTJlVEJqTHhHa2o0bGdBK0xGT3g2R2U3V2NnR2MvTmt3UWNOTWUvNHFiUThPKwo4QTkxZGRqdzl1NXVZVFN5a0VqVHpxR2FOeVViQi8waHhheXZXY3BCUm1sZXFNOU0zc09LODRFPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQUpxemFWRDJFQjluK3hzS3ZxSHV1MzB3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa2JHbHVhMlZ5WkMxd2IyeHBZM2t0ZG1Gc2FXUmhkRzl5TG14cGJtdGxjbVF1YzNaagpNQjRYRFRJeU1EZ3hNVEEyTkRNeU0xb1hEVEl6TURneE1UQTJORE15TTFvd0x6RXRNQ3NHQTFVRUF4TWtiR2x1CmEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeAp3MTRGRzA0di9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLCm9lTXdnN0IzV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnMKUnJqY1lpeXphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWApnWUFEUGloT1JVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrCkRuck5yUFFTaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJvM0F3YmpBT0JnTlYKSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdMd1lEVlIwUkJDZ3dKb0lrYkdsdWEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwCmJtdGxjbVF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ3VvelhFMWJZMkR1VHZLdzcya1NoQVE0c2YKeiszZGlYdEhSbGpiYjNKZWIyNFRWOUVqZ1RybmhsYlpFaG8rcFA5ME5kQlIvQTRvVHdXQjdVUFFienp5eHQ5aApCcHZmVXQ1N1pyQ3hQdGs5RXJVdXR2T3EvU2NqNkNDd1VBUjZ4b2pybnJWQzNqY3ZIZEp0TXBNNlA3QnlQVUtxCjZ6c1dVcVExT0p6Tjg0czV6TDRoMG9YZDA5T0RXOC8rNWRFUVBOY1JXM2pHallvdHFoUnYzVm5aSVVYejZlTVcKaXVveFlrTDZNc2NyNHhGZkROOXBDVnkyVWIvV0JUSGVQd2ZHOGduaTVlR3ErMjNUWGFCbm1xd2V2aFNZcXQ5eQpOcm9rMzVVZlFHamI2WUFRUVdyQlRxa1diSDZ2WVpYVUYrZGEwL2JrVnFwbDNDZGpJdHhHaWV4bnUxS1oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeHcxNEZHMDR2Ci9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLb2VNd2c3QjMKV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnNScmpjWWl5egphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWGdZQURQaWhPClJVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrRG5yTnJQUVMKaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJBb0lCQVFDcEorTEtuVmZHRGJWNAozbCtTWjE1aGRYQ3hTSUNEaUFsUGRwN3F2SHg3OGI4NkRiWW5qeTR2eUYwY09tY3lOK0xxM2NjU29FT0pTMXc2CndNeDJYempnbUdOWDVYalZ6RkhtNDNGZmpSZ2RkVWUzRDV3cU9wMEpMVit2cXBrZDl4V1AzdlRFUlhxQVU2Z2oKNkdteVIrQ2FlenZ1T09jN3M2WW9xaCs0cmZWTDNKU1F3ajZxQTZTbnAybERydmhsSXZ3ZFRNaEs2dnh5Y2xLego1a1o1ZkxUeWtZamxydW1kNEhkWU1BdDE5S2doRXBkYkEwRVlsT2hGRisxcDRjOWRtT3FLTW5oVmhHdVR0L010ClZxT09UN0pPU2tZRUpsWlUrZXBYSjVpeTV0bDA5UFpYOGRGSUZrVjNLSlN2c3NxdThnM0d6R2hUajZrVzFYU2wKT2tuMG9LZUpBb0dCQVAyNXUxQ3l3anJpc1Z5bThNMlRiNGxEejZ6YlVZVmJUc1VNL2lCRGJyYTFoYVlGM0ZqZQpzdEVuWXFHK3JtQ3B0dnhMT3Z6VUhKVyttSzJUY2o5VTNDeG1uYmpyWFd6QkNZWVBCbHExQWNvOW9NYy9UclE5ClhUS3BLSDNOcEdJZTBSYXFscDhrLzlnUm5nbEIyZzVSQ0U5LzVtQm5Tc2Z2STZzaDNCUlpWQkp2QW9HQkFOQXQKUm12blpTUHpLby9lcjNlajVWZGZCN1ZzWEhHRmVCWlVRRkwvL3Bia2gxY2FGQVBpUlJLUC9zaVlYcXBXVkNHZApBbThsSmNnRHpvcGw0NFZwQ0xUVDVvWktxUExDK2IzSDVkQVpRV1VXdm5oOEIxejNYemNDZlpybkpJT0FoZEp1CkE4dC9XQ0p6Vms5U1BHSEJyVHgvbnZyRUR0MGhSbGtPKzBTTWphRVBBb0dBSmpVcTVQc1dUcUhHamFwQ0J1TVYKMzdqTGREOU9wbU5hbUVmZG1PUXVydXJrNWx4cGt5UnVEeHI4T2xrcGp6cmZhRnkzMUV6b3hRLy9rOXZwVDJvcgpBYkN1UGFPTDNRMndyblJpdzVRUVlmRW4zZmxGazlUTnpRdzJJY091NW11M2xzODNnVjJqL1ZpaDBNa08yaXNQCnNsRVRVeDhhM3NLL1AwMEpCRE56ZXBjQ2dZRUFoTS9OdEx1Y3NCSEwzcHVRVUlEVXFTZ3NqOWRCSnYraXZJUWwKd1k0bWkzZml6SFFMdnVxVmJLRkhTQXpGb0dDUkxoeXdWOTVZTzBJS2ZBdEMyM05HSmE5bXk5aEg3eERyS2VPbApQMTFOZGtQTFlxeW1PZTVyNVhtR1R0UVdYSHNiWlVQZzBldzllMFVnRkZ6L3Z0SkVSbXVaTHB6MGFxbDI2d3grCnk1M3NJWXNDZ1lFQTJJVFVlZFQvdElucTJpTXNrR2s2ZExxWnZNWDFsVG4rb0o3ZUZFR2xkUGxuVGlzTFBvZ1AKVWRyTzU4Z2xPRHU2Mk9Qbm05YTJlVEJqTHhHa2o0bGdBK0xGT3g2R2U3V2NnR2MvTmt3UWNOTWUvNHFiUThPKwo4QTkxZGRqdzl1NXVZVFN5a0VqVHpxR2FOeVViQi8waHhheXZXY3BCUm1sZXFNOU0zc09LODRFPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy-validator-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-policy-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-policy-validator-k8s-tls.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "type": "kubernetes.io/tls",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUxsUXVZVlBqeVo1N0dhcWgzWXFJM3d3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBNE1URXdOalF6TWpOYUZ3MHlNekE0TVRFd05qUXpNak5hTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRRGduL3ZacVo4NGdEVWhuRG9OdEQxYU1zZXBReFFhTnRDcWdWR3lIOFZSZm9ySwpXMTdRcko0M2lvd3JvVXUzaWpQY3JPZnlQdFZxOWZSMXNlSCtBenY1WlFpczRQYUlNUFZ1b1AxV3ArK3pPTVpyCmJydE01TzNIdUNCcmVXYTRaU2ZoeXRkNDhxMzhEdTVnQ1I4WFByKzUwQU5BN2FVaUYxaG9uK3MycUVMbHY3b0UKL01FblR5eUhIUWhzNWFkajVMdWR3bXpBTXI1cGo4ZGlXc2d4WThLc0owYU8zVGJIUmJXTkRZTU9MZFNzZ3pFKwoxRmsxdTdMSWljRG9GQm1oRENZZVZzTURLYTV4Znk4TVUrU1FxVEpKVHRiUXNBTzdiQU5KTW9mMnJEZUhTeTU3CnhSRFBTczZNTjU2MXNadVdHaHdJQmpzZHZCMU5UcXp3ZFo4ekhjNWpBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ0NHNaNlNnclRSK01xbExON3F3bW9kMXplTkF1dDh6Q3IKYkc3NEhpdktIZ1Zhb3JwOUp1SlJKU0VEUlVQLzdocmNMd0pjRUlMTllGZHhmalpKYllBMUFnSmZkdUt2WDM0Ygo1SC9hc05QRkVzSTdIOWw0cmY3TDVHbjJ6QWlBR1k4WFpKcXpxclE0eGIrdWE0V3p1VGQ2VHRoSm9pMU96UTBNCnh3UWRFbHVBWTNYVzJZV2VrYzJub0FiRlFvNCtQK3VVcHg1NE8wY0NCa0xCM2NuSmtzZ2RRejViektXVzFITUkKQmRQekN3c0xTK1dPK2doTWRWSkVuV3hWY1krNTZpRjNCM2FQWG9WL01RNU56WEs5c2FBNVZhYWJKbjVYd2FqRAplR1l4QlJvZ0R2ZTNnaWwwbERDbnVxMHZZZFp2aktDd2dwRUxhaVBWS1dnZmxYcVR1bFVWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNEovNzJhbWZPSUExSVp3NkRiUTlXakxIcVVNVUdqYlFxb0ZSc2gvRlVYNkt5bHRlCjBLeWVONHFNSzZGTHQ0b3ozS3puOGo3VmF2WDBkYkhoL2dNNytXVUlyT0QyaUREMWJxRDlWcWZ2c3pqR2EyNjcKVE9UdHg3Z2dhM2xtdUdVbjRjclhlUEt0L0E3dVlBa2ZGejYvdWRBRFFPMmxJaGRZYUovck5xaEM1Yis2QlB6QgpKMDhzaHgwSWJPV25ZK1M3bmNKc3dESythWS9IWWxySU1XUENyQ2RHanQwMngwVzFqUTJERGkzVXJJTXhQdFJaCk5idXl5SW5BNkJRWm9Rd21IbGJEQXltdWNYOHZERlBra0treVNVN1cwTEFEdTJ3RFNUS0g5cXczaDBzdWU4VVEKejByT2pEZWV0YkdibGhvY0NBWTdIYndkVFU2czhIV2ZNeDNPWXdJREFRQUJBb0lCQUFyYTBGSFpaNDlVYXJ6ZwpEdElndHFKSU4rdlBDUWFuUlhnbjNhbk03VDBkNzFrT0IwdndPNGtWa2VaOTJlblpyTjNxSVI5TXVBVitNejBJCnhwSCsyQVFhUk13TjV2djMyYlJwNVRRdDAyQ0d5dGZnTnY3bFJUUlVpb1NIRGxhMDFMT05tTklJY0MzeERzWG4KU3ZCVm9QQTZ4QjE4SG5IQ1RReHBSZldUTmdCaUowYzE4UmNxMUViR2wvQUZHckIrMTZCZEdWK2dpOTR6MDNHaQo5R0ZkZHNPQTdRdzFsSk9iaDZ3OVhqZFZOU0l6dC9FbSs4eEd3VHdpaC9IQkZVQ2hib1g3djhQMUZtT0wwN1B2CitBd2NBTWJiNDN2c2F0TFlJVDc0SDR6U2xWZ29raG5zVDlaellwRkV4WWxsTktFQ3pOVjlQQXdDWVBZYmJvc3gKYzFrQVdIRUNnWUVBL0ZxejFnSUVQT1Z2OEJ6YXJ5bFVIUnJWSEt6WTdyeWc5Q0VzZ2ZSRDhoRU5zN3l6aWtEQQpVaXI4U2czaXpONldzNldCMkxxTVBpWGlaMlc2ek8wZEFobTNUNVFtRkx6NGdSMUt0OURGZmVaSTlyeTAwNExDCjFtU01uMlJHRlFtTHBoL3U0Mk5KeWN2RGp1TjRUajhua1hmNlhCenljWlVKdU1JWDUvQ1dueXNDZ1lFQTQ5NjYKWW5KK3k1eVlHZlhvOWxJMHlFa25OZjBNRnhKbllHNzdMNmtNdWt4a241VHJ4YytxdGU3TGxveS9aS1lxWmNOeApUYkpabkFLZlFvZUZIR00wOSs0aERDYnNJWFJUcHo1Y01UQm40SFBJVlUxTTJjb0EzMTJnU2ZzUlU2aXRmRnIrCnNjUURoZDc3Sm9XZFNwTGtLbGpwamVoQ3d3cWJaS2FsblRIbXNha0NnWUVBNC9JU1M1ZGF1SjhPODdjOG1jZ2QKSUlVaVIxcWlRVlBGbDM5M3NwTXY1TEllekdJQlV6cVYvaUt4N1RxSnlVQ3VvK3MyVk14ODdZNU82ZExzWHpzMwpYclJYN3R3Rlllb29Gb2ljKzFqcmE0UGVHSEh3YkxYS3hObmlZLyt4aGtNdkQ0bjh3UXpvbEEwb3dpTWFncU50ClhHc2hqSjdoS0ZQVmlqeFlWN3ZzY2kwQ2dZRUE0c0hsRmt5NzB1RU5GMkI0S0k4YnlXZktwbFlmYnVJNGoyVkIKZjJjcHJFYVRKNTdwbFJxWDFaNUJhSnE5WjJwWDdKYTJMTXhia2YybUFHMmR6K2NGY2VlOWFUdGVaZGc5MnNNYQp1VFJqV3ArOWJ1MlNtWFFFdEVLV1hLaUUwSXlkdjQ5SnZ4ckJLcm4va1pFTE9vZThtRXVNZDFQM0ErS05TbmJ2CmZlT0huNmtDZ1lFQXcrU3hManc3OWpFUjBWRzJrSTBaZkRCaXF6cEVjMmVyRkZOaFBnZGszSWtHSkZEZkF5S00KTEE4dEdWNDNkaEtpNWJtUytzeVMwYy8vQWJVTXBwbDVWb0tZekRhMjN4RkpPU1dEOXZYUkdXcXBMVVRwaXpEaQppVDdyQ253V253WHJ0YURBaUk5RE1zRU9mT2hKc1E0SGF0N0ZhQ2FLY0o1ak9SVDYzZ2Z6cXJRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUxsUXVZVlBqeVo1N0dhcWgzWXFJM3d3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBNE1URXdOalF6TWpOYUZ3MHlNekE0TVRFd05qUXpNak5hTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRRGduL3ZacVo4NGdEVWhuRG9OdEQxYU1zZXBReFFhTnRDcWdWR3lIOFZSZm9ySwpXMTdRcko0M2lvd3JvVXUzaWpQY3JPZnlQdFZxOWZSMXNlSCtBenY1WlFpczRQYUlNUFZ1b1AxV3ArK3pPTVpyCmJydE01TzNIdUNCcmVXYTRaU2ZoeXRkNDhxMzhEdTVnQ1I4WFByKzUwQU5BN2FVaUYxaG9uK3MycUVMbHY3b0UKL01FblR5eUhIUWhzNWFkajVMdWR3bXpBTXI1cGo4ZGlXc2d4WThLc0owYU8zVGJIUmJXTkRZTU9MZFNzZ3pFKwoxRmsxdTdMSWljRG9GQm1oRENZZVZzTURLYTV4Znk4TVUrU1FxVEpKVHRiUXNBTzdiQU5KTW9mMnJEZUhTeTU3CnhSRFBTczZNTjU2MXNadVdHaHdJQmpzZHZCMU5UcXp3ZFo4ekhjNWpBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ0NHNaNlNnclRSK01xbExON3F3bW9kMXplTkF1dDh6Q3IKYkc3NEhpdktIZ1Zhb3JwOUp1SlJKU0VEUlVQLzdocmNMd0pjRUlMTllGZHhmalpKYllBMUFnSmZkdUt2WDM0Ygo1SC9hc05QRkVzSTdIOWw0cmY3TDVHbjJ6QWlBR1k4WFpKcXpxclE0eGIrdWE0V3p1VGQ2VHRoSm9pMU96UTBNCnh3UWRFbHVBWTNYVzJZV2VrYzJub0FiRlFvNCtQK3VVcHg1NE8wY0NCa0xCM2NuSmtzZ2RRejViektXVzFITUkKQmRQekN3c0xTK1dPK2doTWRWSkVuV3hWY1krNTZpRjNCM2FQWG9WL01RNU56WEs5c2FBNVZhYWJKbjVYd2FqRAplR1l4QlJvZ0R2ZTNnaWwwbERDbnVxMHZZZFp2aktDd2dwRUxhaVBWS1dnZmxYcVR1bFVWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNEovNzJhbWZPSUExSVp3NkRiUTlXakxIcVVNVUdqYlFxb0ZSc2gvRlVYNkt5bHRlCjBLeWVONHFNSzZGTHQ0b3ozS3puOGo3VmF2WDBkYkhoL2dNNytXVUlyT0QyaUREMWJxRDlWcWZ2c3pqR2EyNjcKVE9UdHg3Z2dhM2xtdUdVbjRjclhlUEt0L0E3dVlBa2ZGejYvdWRBRFFPMmxJaGRZYUovck5xaEM1Yis2QlB6QgpKMDhzaHgwSWJPV25ZK1M3bmNKc3dESythWS9IWWxySU1XUENyQ2RHanQwMngwVzFqUTJERGkzVXJJTXhQdFJaCk5idXl5SW5BNkJRWm9Rd21IbGJEQXltdWNYOHZERlBra0treVNVN1cwTEFEdTJ3RFNUS0g5cXczaDBzdWU4VVEKejByT2pEZWV0YkdibGhvY0NBWTdIYndkVFU2czhIV2ZNeDNPWXdJREFRQUJBb0lCQUFyYTBGSFpaNDlVYXJ6ZwpEdElndHFKSU4rdlBDUWFuUlhnbjNhbk03VDBkNzFrT0IwdndPNGtWa2VaOTJlblpyTjNxSVI5TXVBVitNejBJCnhwSCsyQVFhUk13TjV2djMyYlJwNVRRdDAyQ0d5dGZnTnY3bFJUUlVpb1NIRGxhMDFMT05tTklJY0MzeERzWG4KU3ZCVm9QQTZ4QjE4SG5IQ1RReHBSZldUTmdCaUowYzE4UmNxMUViR2wvQUZHckIrMTZCZEdWK2dpOTR6MDNHaQo5R0ZkZHNPQTdRdzFsSk9iaDZ3OVhqZFZOU0l6dC9FbSs4eEd3VHdpaC9IQkZVQ2hib1g3djhQMUZtT0wwN1B2CitBd2NBTWJiNDN2c2F0TFlJVDc0SDR6U2xWZ29raG5zVDlaellwRkV4WWxsTktFQ3pOVjlQQXdDWVBZYmJvc3gKYzFrQVdIRUNnWUVBL0ZxejFnSUVQT1Z2OEJ6YXJ5bFVIUnJWSEt6WTdyeWc5Q0VzZ2ZSRDhoRU5zN3l6aWtEQQpVaXI4U2czaXpONldzNldCMkxxTVBpWGlaMlc2ek8wZEFobTNUNVFtRkx6NGdSMUt0OURGZmVaSTlyeTAwNExDCjFtU01uMlJHRlFtTHBoL3U0Mk5KeWN2RGp1TjRUajhua1hmNlhCenljWlVKdU1JWDUvQ1dueXNDZ1lFQTQ5NjYKWW5KK3k1eVlHZlhvOWxJMHlFa25OZjBNRnhKbllHNzdMNmtNdWt4a241VHJ4YytxdGU3TGxveS9aS1lxWmNOeApUYkpabkFLZlFvZUZIR00wOSs0aERDYnNJWFJUcHo1Y01UQm40SFBJVlUxTTJjb0EzMTJnU2ZzUlU2aXRmRnIrCnNjUURoZDc3Sm9XZFNwTGtLbGpwamVoQ3d3cWJaS2FsblRIbXNha0NnWUVBNC9JU1M1ZGF1SjhPODdjOG1jZ2QKSUlVaVIxcWlRVlBGbDM5M3NwTXY1TEllekdJQlV6cVYvaUt4N1RxSnlVQ3VvK3MyVk14ODdZNU82ZExzWHpzMwpYclJYN3R3Rlllb29Gb2ljKzFqcmE0UGVHSEh3YkxYS3hObmlZLyt4aGtNdkQ0bjh3UXpvbEEwb3dpTWFncU50ClhHc2hqSjdoS0ZQVmlqeFlWN3ZzY2kwQ2dZRUE0c0hsRmt5NzB1RU5GMkI0S0k4YnlXZktwbFlmYnVJNGoyVkIKZjJjcHJFYVRKNTdwbFJxWDFaNUJhSnE5WjJwWDdKYTJMTXhia2YybUFHMmR6K2NGY2VlOWFUdGVaZGc5MnNNYQp1VFJqV3ArOWJ1MlNtWFFFdEVLV1hLaUUwSXlkdjQ5SnZ4ckJLcm4va1pFTE9vZThtRXVNZDFQM0ErS05TbmJ2CmZlT0huNmtDZ1lFQXcrU3hManc3OWpFUjBWRzJrSTBaZkRCaXF6cEVjMmVyRkZOaFBnZGszSWtHSkZEZkF5S00KTEE4dEdWNDNkaEtpNWJtUytzeVMwYy8vQWJVTXBwbDVWb0tZekRhMjN4RkpPU1dEOXZYUkdXcXBMVVRwaXpEaQppVDdyQ253V253WHJ0YURBaUk5RE1zRU9mT2hKc1E0SGF0N0ZhQ2FLY0o1ak9SVDYzZ2Z6cXJRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-proxy-injector-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-proxy-injector-k8s-tls.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "type": "kubernetes.io/tls",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU9aT2Q5cTlhYmJDZ3pya3dLMHRleEF3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBNApNVEV3TmpRek1qTmFGdzB5TXpBNE1URXdOalF6TWpOYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFETnZwOU1ZYUVobE9kY3BtSlZSSGJjbzUwSmFBNXA0bG9hVnV3UnU4Q1RjRndYOXlyc3lOUVpYV1VOR0lQMQpNMGJBR0kxL2RIMlRIY2R6d0RDdU9NRUtCVzJ5U1J4L1hDNFZ2OHJTcnQzSktiSXJkSVIxWUd2QW9uTHVpdFlGCkx6T1dFR1dzS1BjcjkxV1E2WmZIWDdicVl2a1YvUUpWVFluZDNPRkt0NjlFdUFjN09yOXRiNHhJV3JxRGVhTXgKN2RVajNnVE05SG9rcjVRclFIN1M1V3RrL2cvVEo3R0twRS9qeloxenhaN04zOFJOWVpGM2dLT1ozbHhBU3M3bQpKemxmcnlzbHhpc21kVUE3MlFoYWxWeG41RXZSc3Q0UURMNUI5MzA3VmtPNDJKZkFmcjNmbW5yV01IcHpTL0srCitUZmljdDEzT3p5c0lYNTZON1hwSnNUWkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUFVVU5DWWZ2cDhsWFdadnF4Vy8wd1RWQ2J6UGEzSzB5Nk1wOTFaZmRQd1lHS05NUFJkV0tJbEQwMnEKL1ZKM2ZBV1AzcEw4VE1vSCt5VWxxRWdESEtvUDlQZzFCM3Ayb2tFOHNaVDdjSHR4U0orTlNkTzJseEVSV2U0VAovMU5tNC8vWGw1cVhCZWVmbHo2enM0VmMvK0tPL0JnZnpncTViaUhwamVISDhRcVRnVmw1U2h3b1RvQTVidDdiCjN5bitZM25aVStsdThXajQ5MjYvd1d1L2UwUDY0Z3ZJdDhMWDlTMHBJNXZZM3E4clR1eWgyalZFRDVIdmE0TUMKenJGSm5razVWT0UyTVRSYlZ4T0pnb3RkMzYzdmV4TmZJZjNkWWNDRHhMMkNTZE1XZkNhWmdLSGlFeHJDMCtGcgpzVFducHdFZ0llazJBbmN4UFFlbmRwQWdPSlNpCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBemI2ZlRHR2hJWlRuWEtaaVZVUjIzS09kQ1dnT2FlSmFHbGJzRWJ2QWszQmNGL2NxCjdNalVHVjFsRFJpRDlUTkd3QmlOZjNSOWt4M0hjOEF3cmpqQkNnVnRza2tjZjF3dUZiL0swcTdkeVNteUszU0UKZFdCcndLSnk3b3JXQlM4emxoQmxyQ2ozSy9kVmtPbVh4MSsyNm1MNUZmMENWVTJKM2R6aFNyZXZSTGdIT3pxLwpiVytNU0ZxNmczbWpNZTNWSTk0RXpQUjZKSytVSzBCKzB1VnJaUDRQMHlleGlxUlA0ODJkYzhXZXpkL0VUV0dSCmQ0Q2ptZDVjUUVyTzVpYzVYNjhySmNZckpuVkFPOWtJV3BWY1orUkwwYkxlRUF5K1FmZDlPMVpEdU5pWHdINjkKMzVwNjFqQjZjMHZ5dnZrMzRuTGRkenM4ckNGK2VqZTE2U2JFMlFJREFRQUJBb0lCQUJSVW5kRWlaSlc0N1JQTwpyVERYenhjR1krSW1FaWFNWTNMdTIrejBySmJsSjNTR3pBc1IzVU9VWXdQa1JFWGFoMGM4SmQ5T1Y0cE9Dd041CkhsWlk3VnBjSnZiVEdxbkxKaEtvSFJhc2lPWHo1Tk0rZEVoVSt0RFNQS0V0dnZCTU5jRENaZ21aRXJPWmdTOE0KcGg3aGFtWEcyZTQrVGhpM3pNUExxOGVDVnlObkRseEg2MXA3QjJ0VEQrbno4TVBnMEkyNWtoazNMbHBia08zSQpxTElESVhBREQ2dE8xN1IxRmtselZDdXlLalB6ajB5Z2s3U1hUTlpuZTNrcmY0WHdOYjFPSnFBTGxsZkJqdnNUClZXRnlNZ2lrY1dhYmoxbHVScEFKRGJGaytTMWdaMnZuVjhWQ1pXdzBNRFZpanNBSm9EZVFBcDYwZHRrSWY2UWwKRmo4bHZYRUNnWUVBei8wQmJkdXluV2ZQV0RUUDU3ejV5aFJoMG5FRzg0VWV0RFhsSGRLN0ZLNVVFODEwcTY2dgpxRVZRZjJPWTRFNUZmT2tOamRCNVJmWVgyN1J0TVhjLzVFbStwV0JXM0lWU05DdU9pTUVuNHJJOU0wT2NCUFhmCkU4U2pIblBDZGZ4VVgyV0ZJcjlZM3pNM0p6bEVoT1R0NE5sNEpNWmhqV2J4UVpVSzZrOGM5RDhDZ1lFQS9UMEcKNUY2NmZIWXdMWFJOU0Fqa3NES3BsYlUzWXRPcm9DNkkwZlBXdHJwSDloUDlPS1RsMTBXUFpVRzduSk9kVUJUTQpMSTlaaUd4cmdmR1VPQVVoWUVDakM1MHZMRmZGcFpOSWJNQ0FKNGdzZUdvb1VvQkMyc2ljWjlxYTBVZkNmU0JjClNZTFd4UFk5bmgxTXJtdlJkUWdGaTYwLzdhdGNmRWJkbzc3aG9PY0NnWUFjWUFzSzN0YytiRVE0WjNRWnpJbFQKalhaUERJYURRSjBRdnUyVUpRVEs3SUdoOWZ5OTAyWTVrY05LcmQ3VWN6azlzbG5jQ0I0VGNtQ000OCtsMlB3SgpmQm9iVzhwZDZYNXVpYWEzZDRxbWZlU2xrc3E5VG9IeG8za1JsWDlwTTFTYmN6RTNyVjFGamlvdkdyd0RXV3d1CnFkeWZQOFZkVWpjRjJIeVZ2TmRaWndLQmdRRHhuMy9xK0NPUlM2ZU9SekRSc1lLYVI4eWRSa254WnF1VDY3S3EKT0xFK3FpQ3RQOGRWZTZpOXJPWTBJL0xoWThzdXRKbFhUdk9MZ245VmZlNEJRWXZsN2VaajEzZENKUUUxaVlFSwpHdVpzVWJhMHNmMkZNbElYdEYvZmk2bzZVdkRVT01NMWRMeDlNOEg1RWxXdStycmdvbVhBTHU4WFUzQ3NOMldVCnJqVlVNd0tCZ1FDZlhEOE1yMElIWGR6cFlYL1VnTDQ2REVCUjB4aGt4YTUvQUl4c3Frcjgzeldad01FQ1E1dFoKdk5QZW9KUWVrMXI4M3ZRNHVpVlVLRUk2NmErU05wbnhDbDh0SVIwdjFwcGkyYnRVdDdrdEFjZWtnN0EwL1R6agpkSHc0eDBoSVVTb2pEYTQ1OUNRMk0zcXRBeHdvYXNlNERyQ3lBbmpKN0QxdWJEQ1d5Uy9Icnc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU9aT2Q5cTlhYmJDZ3pya3dLMHRleEF3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBNApNVEV3TmpRek1qTmFGdzB5TXpBNE1URXdOalF6TWpOYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFETnZwOU1ZYUVobE9kY3BtSlZSSGJjbzUwSmFBNXA0bG9hVnV3UnU4Q1RjRndYOXlyc3lOUVpYV1VOR0lQMQpNMGJBR0kxL2RIMlRIY2R6d0RDdU9NRUtCVzJ5U1J4L1hDNFZ2OHJTcnQzSktiSXJkSVIxWUd2QW9uTHVpdFlGCkx6T1dFR1dzS1BjcjkxV1E2WmZIWDdicVl2a1YvUUpWVFluZDNPRkt0NjlFdUFjN09yOXRiNHhJV3JxRGVhTXgKN2RVajNnVE05SG9rcjVRclFIN1M1V3RrL2cvVEo3R0twRS9qeloxenhaN04zOFJOWVpGM2dLT1ozbHhBU3M3bQpKemxmcnlzbHhpc21kVUE3MlFoYWxWeG41RXZSc3Q0UURMNUI5MzA3VmtPNDJKZkFmcjNmbW5yV01IcHpTL0srCitUZmljdDEzT3p5c0lYNTZON1hwSnNUWkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUFVVU5DWWZ2cDhsWFdadnF4Vy8wd1RWQ2J6UGEzSzB5Nk1wOTFaZmRQd1lHS05NUFJkV0tJbEQwMnEKL1ZKM2ZBV1AzcEw4VE1vSCt5VWxxRWdESEtvUDlQZzFCM3Ayb2tFOHNaVDdjSHR4U0orTlNkTzJseEVSV2U0VAovMU5tNC8vWGw1cVhCZWVmbHo2enM0VmMvK0tPL0JnZnpncTViaUhwamVISDhRcVRnVmw1U2h3b1RvQTVidDdiCjN5bitZM25aVStsdThXajQ5MjYvd1d1L2UwUDY0Z3ZJdDhMWDlTMHBJNXZZM3E4clR1eWgyalZFRDVIdmE0TUMKenJGSm5razVWT0UyTVRSYlZ4T0pnb3RkMzYzdmV4TmZJZjNkWWNDRHhMMkNTZE1XZkNhWmdLSGlFeHJDMCtGcgpzVFducHdFZ0llazJBbmN4UFFlbmRwQWdPSlNpCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBemI2ZlRHR2hJWlRuWEtaaVZVUjIzS09kQ1dnT2FlSmFHbGJzRWJ2QWszQmNGL2NxCjdNalVHVjFsRFJpRDlUTkd3QmlOZjNSOWt4M0hjOEF3cmpqQkNnVnRza2tjZjF3dUZiL0swcTdkeVNteUszU0UKZFdCcndLSnk3b3JXQlM4emxoQmxyQ2ozSy9kVmtPbVh4MSsyNm1MNUZmMENWVTJKM2R6aFNyZXZSTGdIT3pxLwpiVytNU0ZxNmczbWpNZTNWSTk0RXpQUjZKSytVSzBCKzB1VnJaUDRQMHlleGlxUlA0ODJkYzhXZXpkL0VUV0dSCmQ0Q2ptZDVjUUVyTzVpYzVYNjhySmNZckpuVkFPOWtJV3BWY1orUkwwYkxlRUF5K1FmZDlPMVpEdU5pWHdINjkKMzVwNjFqQjZjMHZ5dnZrMzRuTGRkenM4ckNGK2VqZTE2U2JFMlFJREFRQUJBb0lCQUJSVW5kRWlaSlc0N1JQTwpyVERYenhjR1krSW1FaWFNWTNMdTIrejBySmJsSjNTR3pBc1IzVU9VWXdQa1JFWGFoMGM4SmQ5T1Y0cE9Dd041CkhsWlk3VnBjSnZiVEdxbkxKaEtvSFJhc2lPWHo1Tk0rZEVoVSt0RFNQS0V0dnZCTU5jRENaZ21aRXJPWmdTOE0KcGg3aGFtWEcyZTQrVGhpM3pNUExxOGVDVnlObkRseEg2MXA3QjJ0VEQrbno4TVBnMEkyNWtoazNMbHBia08zSQpxTElESVhBREQ2dE8xN1IxRmtselZDdXlLalB6ajB5Z2s3U1hUTlpuZTNrcmY0WHdOYjFPSnFBTGxsZkJqdnNUClZXRnlNZ2lrY1dhYmoxbHVScEFKRGJGaytTMWdaMnZuVjhWQ1pXdzBNRFZpanNBSm9EZVFBcDYwZHRrSWY2UWwKRmo4bHZYRUNnWUVBei8wQmJkdXluV2ZQV0RUUDU3ejV5aFJoMG5FRzg0VWV0RFhsSGRLN0ZLNVVFODEwcTY2dgpxRVZRZjJPWTRFNUZmT2tOamRCNVJmWVgyN1J0TVhjLzVFbStwV0JXM0lWU05DdU9pTUVuNHJJOU0wT2NCUFhmCkU4U2pIblBDZGZ4VVgyV0ZJcjlZM3pNM0p6bEVoT1R0NE5sNEpNWmhqV2J4UVpVSzZrOGM5RDhDZ1lFQS9UMEcKNUY2NmZIWXdMWFJOU0Fqa3NES3BsYlUzWXRPcm9DNkkwZlBXdHJwSDloUDlPS1RsMTBXUFpVRzduSk9kVUJUTQpMSTlaaUd4cmdmR1VPQVVoWUVDakM1MHZMRmZGcFpOSWJNQ0FKNGdzZUdvb1VvQkMyc2ljWjlxYTBVZkNmU0JjClNZTFd4UFk5bmgxTXJtdlJkUWdGaTYwLzdhdGNmRWJkbzc3aG9PY0NnWUFjWUFzSzN0YytiRVE0WjNRWnpJbFQKalhaUERJYURRSjBRdnUyVUpRVEs3SUdoOWZ5OTAyWTVrY05LcmQ3VWN6azlzbG5jQ0I0VGNtQ000OCtsMlB3SgpmQm9iVzhwZDZYNXVpYWEzZDRxbWZlU2xrc3E5VG9IeG8za1JsWDlwTTFTYmN6RTNyVjFGamlvdkdyd0RXV3d1CnFkeWZQOFZkVWpjRjJIeVZ2TmRaWndLQmdRRHhuMy9xK0NPUlM2ZU9SekRSc1lLYVI4eWRSa254WnF1VDY3S3EKT0xFK3FpQ3RQOGRWZTZpOXJPWTBJL0xoWThzdXRKbFhUdk9MZ245VmZlNEJRWXZsN2VaajEzZENKUUUxaVlFSwpHdVpzVWJhMHNmMkZNbElYdEYvZmk2bzZVdkRVT01NMWRMeDlNOEg1RWxXdStycmdvbVhBTHU4WFUzQ3NOMldVCnJqVlVNd0tCZ1FDZlhEOE1yMElIWGR6cFlYL1VnTDQ2REVCUjB4aGt4YTUvQUl4c3Frcjgzeldad01FQ1E1dFoKdk5QZW9KUWVrMXI4M3ZRNHVpVlVLRUk2NmErU05wbnhDbDh0SVIwdjFwcGkyYnRVdDdrdEFjZWtnN0EwL1R6agpkSHc0eDBoSVVTb2pEYTQ1OUNRMk0zcXRBeHdvYXNlNERyQ3lBbmpKN0QxdWJEQ1d5Uy9Icnc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap-injector-k8s-tls\\",\\"namespace\\":\\"linkerd-viz\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap-injector-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-secret-linkerd-viz-tap-injector-k8s-tls.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "type": "kubernetes.io/tls",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRQzQyZlBjc3B1VXhUaE1DdDVhMTE5VEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURneE1UQTJORE15TTFvWApEVEl6TURneE1UQTJORE15TTFvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHJYb3dJNWdpbUtmbEVOdU9QMjA0MnkKbUJpV0tYQjl6R0pjdEU1RHNyV3pZMHFySkFsMHlOQ1p4aFZpRDFCWUFFd3hGODcxdnpPdjdpUXpVcVNLTjJ2ZQpmOFZZNkNUejZjbVVYa1dyWmZaMHNORVBnSzYwcjVIM1ZaT3V3eFZta3UzL3FXT2Q4UFVxYUN2MWk1eHg1R3hRCmNXZmFSVWdWbUZQRHB5bUhvcEcrZlBkdmZDMWRtc1lJdEloYllVNGw0YWNvbHlUM3RWOG1tcFpKVjVqdWdzR3QKUnVDWTlucE1vZ0E5aUwxOWM5V0dESFFTbWVlWlZsTE90NG5BLzhOWEhMZlpiZDc2TG9lUUF3dGVPaXJZaFU1dApLNHZHNlZHMnc0RWh3ekpBeUhFMkJ1NHRnNnNrN3huOUFqcjB1TjJwNlV5QjFnR3paOTd2cWNyMC9vSkFPMThDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBM3UxT1ZINEVPaEZSRU9PMEp1TzZEY2FJeDZqdnhXClRVR2ZQeS8rdTllcE9oY0pGSyszTnJFR2E4SDVwU0dvVWRVTitvUS9MTVZ0REh3ZnU3WnF2Y0NXWDk4bmtHaUMKOTVHYnRNeENpY2hjS2gwdkppcDdHT3VKeENQelpzRkJUTEwxWHJFalhIYmI3YzFtZnNzWTFGRFBtOWltSmVsUgpUb2lLQlZsV1o4akhaQWQyZ28yeCtlWHNFY3hQTVdFTFB5dnB1N1gweDkwaEtxRlp4OWRyR1RwZkdMd21nNXB0CkwydnIwM3FUVzJPdVdkMU5DMExDaWE2SFEzSlo4UnZJN2FDRUNVZkhqb0lsaGM4d0RkUytEbjdxM0RCQVh3SXUKRlREMlk4eGVZWlZqNzFKM3pRcjNMdGxScnd1TmlZbnhwSEkyYlRZbm90RkpwZjdkZ0w0ckVDaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdXRlakFqbUNLWXArVVEyNDQvYlRqYktZR0pZcGNIM01ZbHkwVGtPeXRiTmpTcXNrCkNYVEkwSm5HRldJUFVGZ0FUREVYenZXL002L3VKRE5TcElvM2E5NS94VmpvSlBQcHlaUmVSYXRsOW5TdzBRK0EKcnJTdmtmZFZrNjdERldhUzdmK3BZNTN3OVNwb0svV0xuSEhrYkZCeFo5cEZTQldZVThPbktZZWlrYjU4OTI5OApMVjJheGdpMGlGdGhUaVhocHlpWEpQZTFYeWFhbGtsWG1PNkN3YTFHNEpqMmVreWlBRDJJdlgxejFZWU1kQktaCjU1bFdVczYzaWNEL3cxY2N0OWx0M3ZvdWg1QURDMTQ2S3RpRlRtMHJpOGJwVWJiRGdTSERNa0RJY1RZRzdpMkQKcXlUdkdmMENPdlM0M2FucFRJSFdBYk5uM3UrcHl2VCtna0E3WHdJREFRQUJBb0lCQUhrbW43VXVrdjdhcFlOcgpFV3NIdmk5UUVaMUhxUUVmSU9yYXo3TTc1R0k3T25QTk91WEN5dit2NWlneFdGcXhaU2dDWVR5NlRrdDJsVVQxCjNtMkFqZVVzOWM2Q0VxejdWNmwwd2hnTXhtV2pUbytRck5FYnFnaE14em1taFNxWVEwZDlrbGxjclVSYlJnYlQKQmI3Z2Zzdlk4Vi8wd1IyM212a2RrWU8xUmkyWHFXODA5eGp3MDhLQnd4dHpCRTBRSE9UQ1ZnOGhzakIrTmQzbgpQQm9DVWQxdVNsTmh6QWw1MmJCc2dMR1JObUhOalloVWpkNDJSVUZybnhIWlNNZldkMXQ5ZFFVc2pjTjhjREJSCkgyTmdxckNnVWRQejBLUCtBMDJJT0ZNeTZyVGNQUmtiQWlEdkVKMnlDSGFhaFc1Y0RZaUpubGR3Zm5mZ3JJK2MKeFBwWlJ3a0NnWUVBeklrMEtveVpQSFRBSmJZeHY1SWgyVkFMQTVWbHJ1blB5bTFGTXQ5Q25tZWVMaHU2cEtZRgphakVjTFhPSSthc2pPTlpGSTc2Y2V4cUE0c2hwdUZyQmR3RTV4ejYrSm5PUVd5Q0JDWForWC9Bb3l5SFJDUEpNCmo3cXBrYjV3d0hMaEhvTWNpR0lHdmowdGdPOFNqZ1hHd3BGSWxqR2I2TEsvVzhKcFd0RVB3YnNDZ1lFQTZkcTcKV3k3Wlk0aFJWbWloR0F0Qmp2SlhONmlESWFIdkk4elFpakNuVlJqUFBEckt5dVdNNUxKeW4zUGxjL3dQWHU4RAp5d0E0aXFwcWQ2Ukx3MGpCekR1TXNJVWFtTy9NUENoSGZWMnVXNzlNcUQ3Sy9JQkVZVnQrZEFZUzJrYmh4RkdrCnRtcTRUOGxSZUpUZmkrNC9FZHdkZEVQN0piTEpraUs3R0VYQjhLMENnWUVBanZFQU5SQkhjem5BbzFwZUVCem4KYlFFRWdYK2lMWWlYd0VkM1NlTS9vb2FWeEhGNmtlQzQvZ3JPUDNGejg5QkhjRXhHeTRGRnlMNnYvazNEbktSSQplb3V2dm5BNTRaTjMra2VRQm5YNlFjQU1NbEl5elViUWZNNGQvWTRUTEZ2Y3VqODA3SmRkVVF4ZVJiSk96RlI3CklMVDUvb1V6Q1lBS1BlMXpSWlcvcGtzQ2dZRUFxTUJLaXRZWDBSZEJlcFV1Q21lMCt5NHRlZUNFSC9UMjJHS24KNmRDS0w0SWpxVmJUbCs1bDZYSkwvSHhwaTNUTXNyalBoK0cwNjN0bU1NZkNWRDFnZTd4TkhlUXUrVVd4bjRlQgpieG4zQkFYYmoxMGdwV3o1NnpkVzNPcTFHQVltVE1DTmw0VVRVNS8yeG9qSGQvYUlWSjcrTWpRTU8zdjBzUnVXCjMwRVhYbEVDZ1lFQWg3eFFhOFV1cW5QYmJ1TXlHVmRBenJITjYvYlorRm14R3FobXNHQ1dGK0EzeWtNeUprUWMKZi9HbkZ1ek1tSWRmYkhHM0pOUGMrNEYvL3N3azcyRi9rdFJtTE5Yc3hjUm96M0lNTitkeXE5dGUxeDJSN3NEbApZN3hORjdkTEVIQ2JXQTJuN2Nmc2RQQTJiaGJxNEhJU3VZcW0xWE1yVnF2THlETitjejZJT01NPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRQzQyZlBjc3B1VXhUaE1DdDVhMTE5VEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURneE1UQTJORE15TTFvWApEVEl6TURneE1UQTJORE15TTFvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHJYb3dJNWdpbUtmbEVOdU9QMjA0MnkKbUJpV0tYQjl6R0pjdEU1RHNyV3pZMHFySkFsMHlOQ1p4aFZpRDFCWUFFd3hGODcxdnpPdjdpUXpVcVNLTjJ2ZQpmOFZZNkNUejZjbVVYa1dyWmZaMHNORVBnSzYwcjVIM1ZaT3V3eFZta3UzL3FXT2Q4UFVxYUN2MWk1eHg1R3hRCmNXZmFSVWdWbUZQRHB5bUhvcEcrZlBkdmZDMWRtc1lJdEloYllVNGw0YWNvbHlUM3RWOG1tcFpKVjVqdWdzR3QKUnVDWTlucE1vZ0E5aUwxOWM5V0dESFFTbWVlWlZsTE90NG5BLzhOWEhMZlpiZDc2TG9lUUF3dGVPaXJZaFU1dApLNHZHNlZHMnc0RWh3ekpBeUhFMkJ1NHRnNnNrN3huOUFqcjB1TjJwNlV5QjFnR3paOTd2cWNyMC9vSkFPMThDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBM3UxT1ZINEVPaEZSRU9PMEp1TzZEY2FJeDZqdnhXClRVR2ZQeS8rdTllcE9oY0pGSyszTnJFR2E4SDVwU0dvVWRVTitvUS9MTVZ0REh3ZnU3WnF2Y0NXWDk4bmtHaUMKOTVHYnRNeENpY2hjS2gwdkppcDdHT3VKeENQelpzRkJUTEwxWHJFalhIYmI3YzFtZnNzWTFGRFBtOWltSmVsUgpUb2lLQlZsV1o4akhaQWQyZ28yeCtlWHNFY3hQTVdFTFB5dnB1N1gweDkwaEtxRlp4OWRyR1RwZkdMd21nNXB0CkwydnIwM3FUVzJPdVdkMU5DMExDaWE2SFEzSlo4UnZJN2FDRUNVZkhqb0lsaGM4d0RkUytEbjdxM0RCQVh3SXUKRlREMlk4eGVZWlZqNzFKM3pRcjNMdGxScnd1TmlZbnhwSEkyYlRZbm90RkpwZjdkZ0w0ckVDaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdXRlakFqbUNLWXArVVEyNDQvYlRqYktZR0pZcGNIM01ZbHkwVGtPeXRiTmpTcXNrCkNYVEkwSm5HRldJUFVGZ0FUREVYenZXL002L3VKRE5TcElvM2E5NS94VmpvSlBQcHlaUmVSYXRsOW5TdzBRK0EKcnJTdmtmZFZrNjdERldhUzdmK3BZNTN3OVNwb0svV0xuSEhrYkZCeFo5cEZTQldZVThPbktZZWlrYjU4OTI5OApMVjJheGdpMGlGdGhUaVhocHlpWEpQZTFYeWFhbGtsWG1PNkN3YTFHNEpqMmVreWlBRDJJdlgxejFZWU1kQktaCjU1bFdVczYzaWNEL3cxY2N0OWx0M3ZvdWg1QURDMTQ2S3RpRlRtMHJpOGJwVWJiRGdTSERNa0RJY1RZRzdpMkQKcXlUdkdmMENPdlM0M2FucFRJSFdBYk5uM3UrcHl2VCtna0E3WHdJREFRQUJBb0lCQUhrbW43VXVrdjdhcFlOcgpFV3NIdmk5UUVaMUhxUUVmSU9yYXo3TTc1R0k3T25QTk91WEN5dit2NWlneFdGcXhaU2dDWVR5NlRrdDJsVVQxCjNtMkFqZVVzOWM2Q0VxejdWNmwwd2hnTXhtV2pUbytRck5FYnFnaE14em1taFNxWVEwZDlrbGxjclVSYlJnYlQKQmI3Z2Zzdlk4Vi8wd1IyM212a2RrWU8xUmkyWHFXODA5eGp3MDhLQnd4dHpCRTBRSE9UQ1ZnOGhzakIrTmQzbgpQQm9DVWQxdVNsTmh6QWw1MmJCc2dMR1JObUhOalloVWpkNDJSVUZybnhIWlNNZldkMXQ5ZFFVc2pjTjhjREJSCkgyTmdxckNnVWRQejBLUCtBMDJJT0ZNeTZyVGNQUmtiQWlEdkVKMnlDSGFhaFc1Y0RZaUpubGR3Zm5mZ3JJK2MKeFBwWlJ3a0NnWUVBeklrMEtveVpQSFRBSmJZeHY1SWgyVkFMQTVWbHJ1blB5bTFGTXQ5Q25tZWVMaHU2cEtZRgphakVjTFhPSSthc2pPTlpGSTc2Y2V4cUE0c2hwdUZyQmR3RTV4ejYrSm5PUVd5Q0JDWForWC9Bb3l5SFJDUEpNCmo3cXBrYjV3d0hMaEhvTWNpR0lHdmowdGdPOFNqZ1hHd3BGSWxqR2I2TEsvVzhKcFd0RVB3YnNDZ1lFQTZkcTcKV3k3Wlk0aFJWbWloR0F0Qmp2SlhONmlESWFIdkk4elFpakNuVlJqUFBEckt5dVdNNUxKeW4zUGxjL3dQWHU4RAp5d0E0aXFwcWQ2Ukx3MGpCekR1TXNJVWFtTy9NUENoSGZWMnVXNzlNcUQ3Sy9JQkVZVnQrZEFZUzJrYmh4RkdrCnRtcTRUOGxSZUpUZmkrNC9FZHdkZEVQN0piTEpraUs3R0VYQjhLMENnWUVBanZFQU5SQkhjem5BbzFwZUVCem4KYlFFRWdYK2lMWWlYd0VkM1NlTS9vb2FWeEhGNmtlQzQvZ3JPUDNGejg5QkhjRXhHeTRGRnlMNnYvazNEbktSSQplb3V2dm5BNTRaTjMra2VRQm5YNlFjQU1NbEl5elViUWZNNGQvWTRUTEZ2Y3VqODA3SmRkVVF4ZVJiSk96RlI3CklMVDUvb1V6Q1lBS1BlMXpSWlcvcGtzQ2dZRUFxTUJLaXRZWDBSZEJlcFV1Q21lMCt5NHRlZUNFSC9UMjJHS24KNmRDS0w0SWpxVmJUbCs1bDZYSkwvSHhwaTNUTXNyalBoK0cwNjN0bU1NZkNWRDFnZTd4TkhlUXUrVVd4bjRlQgpieG4zQkFYYmoxMGdwV3o1NnpkVzNPcTFHQVltVE1DTmw0VVRVNS8yeG9qSGQvYUlWSjcrTWpRTU8zdjBzUnVXCjMwRVhYbEVDZ1lFQWg3eFFhOFV1cW5QYmJ1TXlHVmRBenJITjYvYlorRm14R3FobXNHQ1dGK0EzeWtNeUprUWMKZi9HbkZ1ek1tSWRmYkhHM0pOUGMrNEYvL3N3azcyRi9rdFJtTE5Yc3hjUm96M0lNTitkeXE5dGUxeDJSN3NEbApZN3hORjdkTEVIQ2JXQTJuN2Nmc2RQQTJiaGJxNEhJU3VZcW0xWE1yVnF2THlETitjejZJT01NPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"tap-k8s-tls\\",\\"namespace\\":\\"linkerd-viz\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-secret-linkerd-viz-tap-k8s-tls.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "type": "kubernetes.io/tls",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "auth": "YWRtaW46JDJiJDEwJEEwS2pIb2oydlNhMFhOeFVyU0RLbGUzcHk5SHE5c2xVbG51M3ZUeXJnWlZWa2d2cDJZMWUu",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"auth\\":\\"YWRtaW46JDJiJDEwJEEwS2pIb2oydlNhMFhOeFVyU0RLbGUzcHk5SHE5c2xVbG51M3ZUeXJnWlZWa2d2cDJZMWUu\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-viz-ingress-auth\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
      },
      "name": "linkerd-viz-ingress-auth",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-secret-linkerd-viz-linkerd-viz-ingress-auth.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "mongodb-passwords": "anVuZ2J1bnUscGFzc3dvcmQxLHBhc3N3b3JkMg==",
      "mongodb-replica-set-key": "MkozZno3SlRmVA==",
      "mongodb-root-password": "ZXhhcmVyZW1wbGU=",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"mongodb-passwords\\":\\"anVuZ2J1bnUscGFzc3dvcmQxLHBhc3N3b3JkMg==\\",\\"mongodb-replica-set-key\\":\\"MkozZno3SlRmVA==\\",\\"mongodb-root-password\\":\\"ZXhhcmVyZW1wbGU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database\\",\\"namespace\\":\\"applications\\"},\\"type\\":\\"Opaque\\"}
",
      },
      "name": "graphql-mongo-database",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-secret-applications-graphql-mongo-database.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "type": "Opaque",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "APP_ENVIRONMENT": "bG9jYWw=",
      "APP_EXTERNAL_BASE_URL": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
      "APP_HOST": "MC4wLjAuMA==",
      "APP_PORT": "ODAwMA==",
      "MONGODB_HOST": "Z3JhcGhxbC1tb25nby1kYXRhYmFzZS5hcHBsaWNhdGlvbnM=",
      "MONGODB_NAME": "Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==",
      "MONGODB_PASSWORD": "anVuZ2J1bnU=",
      "MONGODB_PORT": "MjcwMTc=",
      "MONGODB_ROOT_PASSWORD": "ZXhhcmVyZW1wbGU=",
      "MONGODB_ROOT_USERNAME": "ZXhhbXBsZQ==",
      "MONGODB_SERVICE_NAME": "Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==",
      "MONGODB_STORAGE_CLASS": "bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu",
      "MONGODB_USERNAME": "ZXhhbXBsZW1t",
      "OAUTH_GITHUB_CLIENT_ID": "ODljMTkzNzRmN2U3YjViMzUxNjQ=",
      "OAUTH_GITHUB_CLIENT_SECRET": "MTI5NDg4Y2M5MmUyZDJmOTFlM2E1YTAyNDA4NjM5NmM0OGM2NTMzOQ==",
      "OAUTH_GOOGLE_CLIENT_ID": "ODU1MTc0MjA5NTQzLTZtMGYwODhlNTVkM21ldmhucjhiczBxamFwOGo2ZzBnLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29t",
      "OAUTH_GOOGLE_CLIENT_SECRET": "R09DU1BYLUNTMUpGaXNSSVNnZU4wSS13VGFWam8zNTJ6YlU=",
      "REDIS_HOST": "Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXIuYXBwbGljYXRpb25z",
      "REDIS_PASSWORD": "anVuZ2J1bnU=",
      "REDIS_PORT": "NjM3OQ==",
      "REDIS_SERVICE_NAME": "Z3JhcGhxbC1tb25nby1yZWRpcw==",
      "REDIS_SERVICE_NAME_WITH_SUFFIX": "Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXI=",
      "REDIS_USERNAME": "anVuZ2J1bnU=",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"APP_ENVIRONMENT\\":\\"bG9jYWw=\\",\\"APP_EXTERNAL_BASE_URL\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\",\\"APP_HOST\\":\\"MC4wLjAuMA==\\",\\"APP_PORT\\":\\"ODAwMA==\\",\\"MONGODB_HOST\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZS5hcHBsaWNhdGlvbnM=\\",\\"MONGODB_NAME\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==\\",\\"MONGODB_PASSWORD\\":\\"anVuZ2J1bnU=\\",\\"MONGODB_PORT\\":\\"MjcwMTc=\\",\\"MONGODB_ROOT_PASSWORD\\":\\"ZXhhcmVyZW1wbGU=\\",\\"MONGODB_ROOT_USERNAME\\":\\"ZXhhbXBsZQ==\\",\\"MONGODB_SERVICE_NAME\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==\\",\\"MONGODB_STORAGE_CLASS\\":\\"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu\\",\\"MONGODB_USERNAME\\":\\"ZXhhbXBsZW1t\\",\\"OAUTH_GITHUB_CLIENT_ID\\":\\"ODljMTkzNzRmN2U3YjViMzUxNjQ=\\",\\"OAUTH_GITHUB_CLIENT_SECRET\\":\\"MTI5NDg4Y2M5MmUyZDJmOTFlM2E1YTAyNDA4NjM5NmM0OGM2NTMzOQ==\\",\\"OAUTH_GOOGLE_CLIENT_ID\\":\\"ODU1MTc0MjA5NTQzLTZtMGYwODhlNTVkM21ldmhucjhiczBxamFwOGo2ZzBnLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29t\\",\\"OAUTH_GOOGLE_CLIENT_SECRET\\":\\"R09DU1BYLUNTMUpGaXNSSVNnZU4wSS13VGFWam8zNTJ6YlU=\\",\\"REDIS_HOST\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXIuYXBwbGljYXRpb25z\\",\\"REDIS_PASSWORD\\":\\"anVuZ2J1bnU=\\",\\"REDIS_PORT\\":\\"NjM3OQ==\\",\\"REDIS_SERVICE_NAME\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcw==\\",\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXI=\\",\\"REDIS_USERNAME\\":\\"anVuZ2J1bnU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"sealedsecrets.bitnami.com/managed\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"applications\\"}}
",
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-mongo",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-secret-applications-graphql-mongo.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "redis-password": "anVuZ2J1bnU=",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"redis-password\\":\\"anVuZ2J1bnU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis\\",\\"namespace\\":\\"applications\\"},\\"type\\":\\"Opaque\\"}
",
      },
      "name": "graphql-mongo-redis",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-secret-applications-graphql-mongo-redis.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "type": "Opaque",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "APP_ENVIRONMENT": "bG9jYWw=",
      "APP_EXTERNAL_BASE_URL": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
      "APP_HOST": "MC4wLjAuMA==",
      "APP_PORT": "MzAwMA==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"APP_ENVIRONMENT\\":\\"bG9jYWw=\\",\\"APP_EXTERNAL_BASE_URL\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\",\\"APP_HOST\\":\\"MC4wLjAuMA==\\",\\"APP_PORT\\":\\"MzAwMA==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"sealedsecrets.bitnami.com/managed\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"}}
",
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/react-web/1-manifest/v1-secret-applications-react-web.yaml",
    "resourceBaseDir": "generatedManifests/test/services/react-web",
  },
]
`;

exports[`KubeObject Can sync resources 4`] = `Array []`;

exports[`KubeObject Can sync resources 5`] = `
Array [
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "appprojects.argoproj.io",
    },
    "path": "generatedManifests/test/infrastructure/argocd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-appprojects.argoproj.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "applications.argoproj.io",
    },
    "path": "generatedManifests/test/infrastructure/argocd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-applications.argoproj.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "controller-gen.kubebuilder.io/version": "v0.3.0",
      },
      "name": "applicationsets.argoproj.io",
    },
    "path": "generatedManifests/test/infrastructure/argocd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-applicationsets.argoproj.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
      },
      "name": "issuers.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-issuers.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "challenges.acme.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-challenges.acme.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "certificates.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-certificates.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
      },
      "name": "orders.acme.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-orders.acme.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "controller-gen.kubebuilder.io/version": "v0.6.1",
      },
      "name": "bundles.trust.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-bundles.trust.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "certificaterequests.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-certificaterequests.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "clusterissuers.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-clusterissuers.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "sealedsecrets.bitnami.com",
    },
    "path": "generatedManifests/test/infrastructure/sealed-secrets/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-sealedsecrets.bitnami.com.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/sealed-secrets",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "trafficsplits.split.smi-spec.io",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-trafficsplits.split.smi-spec.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "serverauthorizations.policy.linkerd.io",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-serverauthorizations.policy.linkerd.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "servers.policy.linkerd.io",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-servers.policy.linkerd.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "serviceprofiles.linkerd.io",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-serviceprofiles.linkerd.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
]
`;

exports[`KubeObject Can sync resources 6`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database\\",\\"namespace\\":\\"applications\\"},\\"secrets\\":[{\\"name\\":\\"graphql-mongo-database\\"}]}
",
      },
      "name": "graphql-mongo-database",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-serviceaccount-applications-graphql-mongo-database.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "ping_liveness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\\"$(< \\"\${REDIS_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h localhost \\\\
    -p $REDIS_PORT \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ \\"$response\\" != \\"PONG\\" ] && [ \\"$responseFirstWord\\" != \\"LOADING\\" ] && [ \\"$responseFirstWord\\" != \\"MASTERDOWN\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_liveness_local_and_master.sh": "script_dir=\\"$(dirname \\"$0\\")\\"
exit_status=0
\\"$script_dir/ping_liveness_local.sh\\" $1 || exit_status=$?
\\"$script_dir/ping_liveness_master.sh\\" $1 || exit_status=$?
exit $exit_status",
      "ping_liveness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\\"$(< \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h $REDIS_MASTER_HOST \\\\
    -p $REDIS_MASTER_PORT_NUMBER \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ \\"$response\\" != \\"PONG\\" ] && [ \\"$responseFirstWord\\" != \\"LOADING\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_readiness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\\"$(< \\"\${REDIS_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h localhost \\\\
    -p $REDIS_PORT \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
if [ \\"$response\\" != \\"PONG\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_readiness_local_and_master.sh": "script_dir=\\"$(dirname \\"$0\\")\\"
exit_status=0
\\"$script_dir/ping_readiness_local.sh\\" $1 || exit_status=$?
\\"$script_dir/ping_readiness_master.sh\\" $1 || exit_status=$?
exit $exit_status",
      "ping_readiness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\\"$(< \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h $REDIS_MASTER_HOST \\\\
    -p $REDIS_MASTER_PORT_NUMBER \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
if [ \\"$response\\" != \\"PONG\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"ping_liveness_local.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h localhost \\\\\\\\\\\\n    -p $REDIS_PORT \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ] \\\\u0026\\\\u0026 [ \\\\\\"$responseFirstWord\\\\\\" != \\\\\\"LOADING\\\\\\" ] \\\\u0026\\\\u0026 [ \\\\\\"$responseFirstWord\\\\\\" != \\\\\\"MASTERDOWN\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\",\\"ping_liveness_local_and_master.sh\\":\\"script_dir=\\\\\\"$(dirname \\\\\\"$0\\\\\\")\\\\\\"\\\\nexit_status=0\\\\n\\\\\\"$script_dir/ping_liveness_local.sh\\\\\\" $1 || exit_status=$?\\\\n\\\\\\"$script_dir/ping_liveness_master.sh\\\\\\" $1 || exit_status=$?\\\\nexit $exit_status\\",\\"ping_liveness_master.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_MASTER_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_MASTER_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_MASTER_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_MASTER_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h $REDIS_MASTER_HOST \\\\\\\\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ] \\\\u0026\\\\u0026 [ \\\\\\"$responseFirstWord\\\\\\" != \\\\\\"LOADING\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\",\\"ping_readiness_local.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h localhost \\\\\\\\\\\\n    -p $REDIS_PORT \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\",\\"ping_readiness_local_and_master.sh\\":\\"script_dir=\\\\\\"$(dirname \\\\\\"$0\\\\\\")\\\\\\"\\\\nexit_status=0\\\\n\\\\\\"$script_dir/ping_readiness_local.sh\\\\\\" $1 || exit_status=$?\\\\n\\\\\\"$script_dir/ping_readiness_master.sh\\\\\\" $1 || exit_status=$?\\\\nexit $exit_status\\",\\"ping_readiness_master.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_MASTER_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_MASTER_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_MASTER_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_MASTER_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h $REDIS_MASTER_HOST \\\\\\\\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis-health\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "graphql-mongo-redis-health",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-configmap-applications-graphql-mongo-redis-health.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "mongodb-passwords": "anVuZ2J1bnUscGFzc3dvcmQxLHBhc3N3b3JkMg==",
      "mongodb-replica-set-key": "MkozZno3SlRmVA==",
      "mongodb-root-password": "ZXhhcmVyZW1wbGU=",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"mongodb-passwords\\":\\"anVuZ2J1bnUscGFzc3dvcmQxLHBhc3N3b3JkMg==\\",\\"mongodb-replica-set-key\\":\\"MkozZno3SlRmVA==\\",\\"mongodb-root-password\\":\\"ZXhhcmVyZW1wbGU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database\\",\\"namespace\\":\\"applications\\"},\\"type\\":\\"Opaque\\"}
",
      },
      "name": "graphql-mongo-database",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-secret-applications-graphql-mongo-database.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "type": "Opaque",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"StatefulSet\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"arbiter\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database-arbiter\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"arbiter\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/name\\":\\"mongodb\\"}},\\"serviceName\\":\\"graphql-mongo-database-arbiter-headless\\",\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"arbiter\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"arbiter\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/name\\":\\"mongodb\\"}},\\"namespaces\\":[\\"applications\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"MY_POD_NAME\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"MY_POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}},{\\"name\\":\\"K8S_SERVICE_NAME\\",\\"value\\":\\"graphql-mongo-database-arbiter-headless\\"},{\\"name\\":\\"MONGODB_REPLICA_SET_MODE\\",\\"value\\":\\"arbiter\\"},{\\"name\\":\\"MONGODB_INITIAL_PRIMARY_HOST\\",\\"value\\":\\"graphql-mongo-database-0.graphql-mongo-database.$(MY_POD_NAMESPACE).svc.cluster.local\\"},{\\"name\\":\\"MONGODB_REPLICA_SET_NAME\\",\\"value\\":\\"rs0\\"},{\\"name\\":\\"MONGODB_ADVERTISED_HOSTNAME\\",\\"value\\":\\"$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local\\"},{\\"name\\":\\"MONGODB_INITIAL_PRIMARY_ROOT_USER\\",\\"value\\":\\"example\\"},{\\"name\\":\\"MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"mongodb-root-password\\",\\"name\\":\\"graphql-mongo-database\\"}}},{\\"name\\":\\"MONGODB_REPLICA_SET_KEY\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"mongodb-replica-set-key\\",\\"name\\":\\"graphql-mongo-database\\"}}},{\\"name\\":\\"ALLOW_EMPTY_PASSWORD\\",\\"value\\":\\"no\\"}],\\"image\\":\\"docker.io/bitnami/mongodb:4.4.13-debian-10-r52\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":6,\\"initialDelaySeconds\\":30,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"tcpSocket\\":{\\"port\\":\\"mongodb\\"},\\"timeoutSeconds\\":5},\\"name\\":\\"mongodb-arbiter\\",\\"ports\\":[{\\"containerPort\\":27017,\\"name\\":\\"mongodb\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":6,\\"initialDelaySeconds\\":5,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"tcpSocket\\":{\\"port\\":\\"mongodb\\"},\\"timeoutSeconds\\":5},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsUser\\":1001}}],\\"securityContext\\":{\\"fsGroup\\":1001,\\"sysctls\\":[]},\\"serviceAccountName\\":\\"graphql-mongo-database\\"}}}}
",
      },
      "name": "graphql-mongo-database-arbiter",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/apps_v1-statefulset-applications-graphql-mongo-database-arbiter.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "arbiter",
            "app.kubernetes.io/instance": "graphql-mongo-database",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "mongodb",
            "helm.sh/chart": "mongodb-11.1.10",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "arbiter",
                        "app.kubernetes.io/instance": "graphql-mongo-database",
                        "app.kubernetes.io/name": "mongodb",
                      },
                    },
                    "namespaces": Array [
                      "applications",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "MY_POD_NAME",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "MY_POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                Object {
                  "name": "K8S_SERVICE_NAME",
                  "value": "graphql-mongo-database-arbiter-headless",
                },
                Object {
                  "name": "MONGODB_REPLICA_SET_MODE",
                  "value": "arbiter",
                },
                Object {
                  "name": "MONGODB_INITIAL_PRIMARY_HOST",
                  "value": "graphql-mongo-database-0.graphql-mongo-database.$(MY_POD_NAMESPACE).svc.cluster.local",
                },
                Object {
                  "name": "MONGODB_REPLICA_SET_NAME",
                  "value": "rs0",
                },
                Object {
                  "name": "MONGODB_ADVERTISED_HOSTNAME",
                  "value": "$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local",
                },
                Object {
                  "name": "MONGODB_INITIAL_PRIMARY_ROOT_USER",
                  "value": "example",
                },
                Object {
                  "name": "MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "mongodb-root-password",
                      "name": "graphql-mongo-database",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_REPLICA_SET_KEY",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "mongodb-replica-set-key",
                      "name": "graphql-mongo-database",
                    },
                  },
                },
                Object {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no",
                },
              ],
              "image": "docker.io/bitnami/mongodb:4.4.13-debian-10-r52",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": Object {
                  "port": "mongodb",
                },
                "timeoutSeconds": 5,
              },
              "name": "mongodb-arbiter",
              "ports": Array [
                Object {
                  "containerPort": 27017,
                  "name": "mongodb",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 6,
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": Object {
                  "port": "mongodb",
                },
                "timeoutSeconds": 5,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
            "sysctls": Array [],
          },
          "serviceAccountName": "graphql-mongo-database",
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"arbiter\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database-arbiter-headless\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"tcp-mongodb\\",\\"port\\":27017,\\"targetPort\\":\\"mongodb\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"arbiter\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/name\\":\\"mongodb\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "graphql-mongo-database-arbiter-headless",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-service-applications-graphql-mongo-database-arbiter-headless.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "graphql-mongo-redis",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-serviceaccount-applications-graphql-mongo-redis.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "APP_ENVIRONMENT": "bG9jYWw=",
      "APP_EXTERNAL_BASE_URL": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
      "APP_HOST": "MC4wLjAuMA==",
      "APP_PORT": "ODAwMA==",
      "MONGODB_HOST": "Z3JhcGhxbC1tb25nby1kYXRhYmFzZS5hcHBsaWNhdGlvbnM=",
      "MONGODB_NAME": "Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==",
      "MONGODB_PASSWORD": "anVuZ2J1bnU=",
      "MONGODB_PORT": "MjcwMTc=",
      "MONGODB_ROOT_PASSWORD": "ZXhhcmVyZW1wbGU=",
      "MONGODB_ROOT_USERNAME": "ZXhhbXBsZQ==",
      "MONGODB_SERVICE_NAME": "Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==",
      "MONGODB_STORAGE_CLASS": "bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu",
      "MONGODB_USERNAME": "ZXhhbXBsZW1t",
      "OAUTH_GITHUB_CLIENT_ID": "ODljMTkzNzRmN2U3YjViMzUxNjQ=",
      "OAUTH_GITHUB_CLIENT_SECRET": "MTI5NDg4Y2M5MmUyZDJmOTFlM2E1YTAyNDA4NjM5NmM0OGM2NTMzOQ==",
      "OAUTH_GOOGLE_CLIENT_ID": "ODU1MTc0MjA5NTQzLTZtMGYwODhlNTVkM21ldmhucjhiczBxamFwOGo2ZzBnLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29t",
      "OAUTH_GOOGLE_CLIENT_SECRET": "R09DU1BYLUNTMUpGaXNSSVNnZU4wSS13VGFWam8zNTJ6YlU=",
      "REDIS_HOST": "Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXIuYXBwbGljYXRpb25z",
      "REDIS_PASSWORD": "anVuZ2J1bnU=",
      "REDIS_PORT": "NjM3OQ==",
      "REDIS_SERVICE_NAME": "Z3JhcGhxbC1tb25nby1yZWRpcw==",
      "REDIS_SERVICE_NAME_WITH_SUFFIX": "Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXI=",
      "REDIS_USERNAME": "anVuZ2J1bnU=",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"APP_ENVIRONMENT\\":\\"bG9jYWw=\\",\\"APP_EXTERNAL_BASE_URL\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\",\\"APP_HOST\\":\\"MC4wLjAuMA==\\",\\"APP_PORT\\":\\"ODAwMA==\\",\\"MONGODB_HOST\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZS5hcHBsaWNhdGlvbnM=\\",\\"MONGODB_NAME\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==\\",\\"MONGODB_PASSWORD\\":\\"anVuZ2J1bnU=\\",\\"MONGODB_PORT\\":\\"MjcwMTc=\\",\\"MONGODB_ROOT_PASSWORD\\":\\"ZXhhcmVyZW1wbGU=\\",\\"MONGODB_ROOT_USERNAME\\":\\"ZXhhbXBsZQ==\\",\\"MONGODB_SERVICE_NAME\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==\\",\\"MONGODB_STORAGE_CLASS\\":\\"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu\\",\\"MONGODB_USERNAME\\":\\"ZXhhbXBsZW1t\\",\\"OAUTH_GITHUB_CLIENT_ID\\":\\"ODljMTkzNzRmN2U3YjViMzUxNjQ=\\",\\"OAUTH_GITHUB_CLIENT_SECRET\\":\\"MTI5NDg4Y2M5MmUyZDJmOTFlM2E1YTAyNDA4NjM5NmM0OGM2NTMzOQ==\\",\\"OAUTH_GOOGLE_CLIENT_ID\\":\\"ODU1MTc0MjA5NTQzLTZtMGYwODhlNTVkM21ldmhucjhiczBxamFwOGo2ZzBnLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29t\\",\\"OAUTH_GOOGLE_CLIENT_SECRET\\":\\"R09DU1BYLUNTMUpGaXNSSVNnZU4wSS13VGFWam8zNTJ6YlU=\\",\\"REDIS_HOST\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXIuYXBwbGljYXRpb25z\\",\\"REDIS_PASSWORD\\":\\"anVuZ2J1bnU=\\",\\"REDIS_PORT\\":\\"NjM3OQ==\\",\\"REDIS_SERVICE_NAME\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcw==\\",\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXI=\\",\\"REDIS_USERNAME\\":\\"anVuZ2J1bnU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"sealedsecrets.bitnami.com/managed\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"applications\\"}}
",
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-mongo",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-secret-applications-graphql-mongo.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"StatefulSet\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis-master\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/name\\":\\"redis\\"}},\\"serviceName\\":\\"graphql-mongo-redis-headless\\",\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/configmap\\":\\"6f57cf9208511916e80bd8064d393590a176097d1ff524e72b1f95587da02513\\",\\"checksum/health\\":\\"b1f770fa15f8bb15ac0176ba7a31391b52d924d5361b52cc3efee627e050e973\\",\\"checksum/scripts\\":\\"7f5a69f15dcba18a677b168f00b5496b0bef29e6d64ab5ced7c6f7e8ab8ee813\\",\\"checksum/secret\\":\\"cd0142dd7139f7c45a3bd1a57eccb67804d27c013d7e1e685fe35f610ae114f1\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/name\\":\\"redis\\"}},\\"namespaces\\":[\\"applications\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"-c\\",\\"/opt/bitnami/scripts/start-scripts/start-master.sh\\"],\\"command\\":[\\"/bin/bash\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"REDIS_REPLICATION_MODE\\",\\"value\\":\\"master\\"},{\\"name\\":\\"ALLOW_EMPTY_PASSWORD\\",\\"value\\":\\"no\\"},{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"graphql-mongo-redis\\"}}},{\\"name\\":\\"REDIS_TLS_ENABLED\\",\\"value\\":\\"no\\"},{\\"name\\":\\"REDIS_PORT\\",\\"value\\":\\"6379\\"}],\\"image\\":\\"docker.io/bitnami/redis:6.2.7-debian-10-r0\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"exec\\":{\\"command\\":[\\"sh\\",\\"-c\\",\\"/health/ping_liveness_local.sh 5\\"]},\\"failureThreshold\\":5,\\"initialDelaySeconds\\":20,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":6},\\"name\\":\\"redis\\",\\"ports\\":[{\\"containerPort\\":6379,\\"name\\":\\"redis\\"}],\\"readinessProbe\\":{\\"exec\\":{\\"command\\":[\\"sh\\",\\"-c\\",\\"/health/ping_readiness_local.sh 1\\"]},\\"failureThreshold\\":5,\\"initialDelaySeconds\\":20,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":2},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/opt/bitnami/scripts/start-scripts\\",\\"name\\":\\"start-scripts\\"},{\\"mountPath\\":\\"/health\\",\\"name\\":\\"health\\"},{\\"mountPath\\":\\"/data\\",\\"name\\":\\"redis-data\\"},{\\"mountPath\\":\\"/opt/bitnami/redis/mounted-etc\\",\\"name\\":\\"config\\"},{\\"mountPath\\":\\"/opt/bitnami/redis/etc/\\",\\"name\\":\\"redis-tmp-conf\\"},{\\"mountPath\\":\\"/tmp\\",\\"name\\":\\"tmp\\"}]}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"graphql-mongo-redis\\",\\"terminationGracePeriodSeconds\\":30,\\"volumes\\":[{\\"configMap\\":{\\"defaultMode\\":493,\\"name\\":\\"graphql-mongo-redis-scripts\\"},\\"name\\":\\"start-scripts\\"},{\\"configMap\\":{\\"defaultMode\\":493,\\"name\\":\\"graphql-mongo-redis-health\\"},\\"name\\":\\"health\\"},{\\"configMap\\":{\\"name\\":\\"graphql-mongo-redis-configuration\\"},\\"name\\":\\"config\\"},{\\"emptyDir\\":{},\\"name\\":\\"redis-tmp-conf\\"},{\\"emptyDir\\":{},\\"name\\":\\"tmp\\"}]}},\\"updateStrategy\\":{\\"rollingUpdate\\":{},\\"type\\":\\"RollingUpdate\\"},\\"volumeClaimTemplates\\":[{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/name\\":\\"redis\\"},\\"name\\":\\"redis-data\\"},\\"spec\\":{\\"accessModes\\":[\\"ReadWriteOnce\\"],\\"resources\\":{\\"requests\\":{\\"storage\\":\\"8Gi\\"}}}}]}}
",
      },
      "name": "graphql-mongo-redis-master",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/apps_v1-statefulset-applications-graphql-mongo-redis-master.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/configmap": "6f57cf9208511916e80bd8064d393590a176097d1ff524e72b1f95587da02513",
            "checksum/health": "b1f770fa15f8bb15ac0176ba7a31391b52d924d5361b52cc3efee627e050e973",
            "checksum/scripts": "7f5a69f15dcba18a677b168f00b5496b0bef29e6d64ab5ced7c6f7e8ab8ee813",
            "checksum/secret": "cd0142dd7139f7c45a3bd1a57eccb67804d27c013d7e1e685fe35f610ae114f1",
          },
          "labels": Object {
            "app.kubernetes.io/component": "master",
            "app.kubernetes.io/instance": "redis",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "redis",
            "helm.sh/chart": "redis-16.8.9",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "master",
                        "app.kubernetes.io/instance": "redis",
                        "app.kubernetes.io/name": "redis",
                      },
                    },
                    "namespaces": Array [
                      "applications",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-master.sh",
              ],
              "command": Array [
                "/bin/bash",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "REDIS_REPLICATION_MODE",
                  "value": "master",
                },
                Object {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no",
                },
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "graphql-mongo-redis",
                    },
                  },
                },
                Object {
                  "name": "REDIS_TLS_ENABLED",
                  "value": "no",
                },
                Object {
                  "name": "REDIS_PORT",
                  "value": "6379",
                },
              ],
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "sh",
                    "-c",
                    "/health/ping_liveness_local.sh 5",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 6,
              },
              "name": "redis",
              "ports": Array [
                Object {
                  "containerPort": 6379,
                  "name": "redis",
                },
              ],
              "readinessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "sh",
                    "-c",
                    "/health/ping_readiness_local.sh 1",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/opt/bitnami/scripts/start-scripts",
                  "name": "start-scripts",
                },
                Object {
                  "mountPath": "/health",
                  "name": "health",
                },
                Object {
                  "mountPath": "/data",
                  "name": "redis-data",
                },
                Object {
                  "mountPath": "/opt/bitnami/redis/mounted-etc",
                  "name": "config",
                },
                Object {
                  "mountPath": "/opt/bitnami/redis/etc/",
                  "name": "redis-tmp-conf",
                },
                Object {
                  "mountPath": "/tmp",
                  "name": "tmp",
                },
              ],
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "graphql-mongo-redis",
          "terminationGracePeriodSeconds": 30,
          "volumes": Array [
            Object {
              "configMap": Object {
                "defaultMode": 493,
                "name": "graphql-mongo-redis-scripts",
              },
              "name": "start-scripts",
            },
            Object {
              "configMap": Object {
                "defaultMode": 493,
                "name": "graphql-mongo-redis-health",
              },
              "name": "health",
            },
            Object {
              "configMap": Object {
                "name": "graphql-mongo-redis-configuration",
              },
              "name": "config",
            },
            Object {
              "emptyDir": Object {},
              "name": "redis-tmp-conf",
            },
            Object {
              "emptyDir": Object {},
              "name": "tmp",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "master.conf": "dir /data
# User-supplied master configuration:
rename-command FLUSHDB \\"\\"
rename-command FLUSHALL \\"\\"
# End of master configuration",
      "redis.conf": "# User-supplied common configuration:
# Enable AOF https://redis.io/topics/persistence#append-only-file
appendonly yes
# Disable RDB persistence, AOF persistence already enabled.
save \\"\\"
# End of common configuration",
      "replica.conf": "dir /data
slave-read-only yes
# User-supplied replica configuration:
rename-command FLUSHDB \\"\\"
rename-command FLUSHALL \\"\\"
# End of replica configuration",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"master.conf\\":\\"dir /data\\\\n# User-supplied master configuration:\\\\nrename-command FLUSHDB \\\\\\"\\\\\\"\\\\nrename-command FLUSHALL \\\\\\"\\\\\\"\\\\n# End of master configuration\\",\\"redis.conf\\":\\"# User-supplied common configuration:\\\\n# Enable AOF https://redis.io/topics/persistence#append-only-file\\\\nappendonly yes\\\\n# Disable RDB persistence, AOF persistence already enabled.\\\\nsave \\\\\\"\\\\\\"\\\\n# End of common configuration\\",\\"replica.conf\\":\\"dir /data\\\\nslave-read-only yes\\\\n# User-supplied replica configuration:\\\\nrename-command FLUSHDB \\\\\\"\\\\\\"\\\\nrename-command FLUSHALL \\\\\\"\\\\\\"\\\\n# End of replica configuration\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis-configuration\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "graphql-mongo-redis-configuration",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-configmap-applications-graphql-mongo-redis-configuration.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "start-master.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\\"$(< \\"\${REDIS_PASSWORD_FILE}\\")\\"
if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
fi
if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
fi
ARGS=(\\"--port\\" \\"\${REDIS_PORT}\\")
ARGS+=(\\"--requirepass\\" \\"\${REDIS_PASSWORD}\\")
ARGS+=(\\"--masterauth\\" \\"\${REDIS_PASSWORD}\\")
ARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/redis.conf\\")
ARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/master.conf\\")
exec redis-server \\"\${ARGS[@]}\\"
",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"start-master.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\nif [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then\\\\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\\\\nfi\\\\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\\\\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\\\\nfi\\\\nARGS=(\\\\\\"--port\\\\\\" \\\\\\"\${REDIS_PORT}\\\\\\")\\\\nARGS+=(\\\\\\"--requirepass\\\\\\" \\\\\\"\${REDIS_PASSWORD}\\\\\\")\\\\nARGS+=(\\\\\\"--masterauth\\\\\\" \\\\\\"\${REDIS_PASSWORD}\\\\\\")\\\\nARGS+=(\\\\\\"--include\\\\\\" \\\\\\"/opt/bitnami/redis/etc/redis.conf\\\\\\")\\\\nARGS+=(\\\\\\"--include\\\\\\" \\\\\\"/opt/bitnami/redis/etc/master.conf\\\\\\")\\\\nexec redis-server \\\\\\"\${ARGS[@]}\\\\\\"\\\\n\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis-scripts\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "graphql-mongo-redis-scripts",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-configmap-applications-graphql-mongo-redis-scripts.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "setup-hidden.sh": "#!/bin/bash

. /opt/bitnami/scripts/mongodb-env.sh

echo \\"Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME\\"
echo \\"Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER\\"
echo \\"Configuring node as a hidden node\\"
export MONGODB_REPLICA_SET_MODE=\\"hidden\\"
export MONGODB_INITIAL_PRIMARY_ROOT_USER=\\"$MONGODB_ROOT_USER\\"
export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=\\"$MONGODB_ROOT_PASSWORD\\"
export MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\\"$MONGODB_PORT_NUMBER\\"
export MONGODB_ROOT_PASSWORD=\\"\\"
export MONGODB_EXTRA_USERNAMES=\\"\\"
export MONGODB_EXTRA_DATABASES=\\"\\"
export MONGODB_EXTRA_PASSWORDS=\\"\\"
export MONGODB_ROOT_PASSWORD_FILE=\\"\\"
export MONGODB_EXTRA_USERNAMES_FILE=\\"\\"
export MONGODB_EXTRA_DATABASES_FILE=\\"\\"
export MONGODB_EXTRA_PASSWORDS_FILE=\\"\\"
exec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh",
      "setup.sh": "#!/bin/bash

. /opt/bitnami/scripts/mongodb-env.sh
. /opt/bitnami/scripts/libfs.sh
. /opt/bitnami/scripts/liblog.sh
. /opt/bitnami/scripts/libvalidations.sh

if is_empty_value \\"$MONGODB_ADVERTISED_PORT_NUMBER\\"; then
  export MONGODB_ADVERTISED_PORT_NUMBER=\\"$MONGODB_PORT_NUMBER\\"
fi

info \\"Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME\\"
info \\"Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER\\"

# Check for existing replica set in case there is no data in the PVC
# This is for cases where the PVC is lost or for MongoDB caches without
# persistence
current_primary=\\"\\"
if is_dir_empty \\"\${MONGODB_DATA_DIR}/db\\"; then
  info \\"Data dir empty, checking if the replica set already exists\\"
  current_primary=$(mongo admin --host \\"graphql-mongo-database-0.graphql-mongo-database-headless.applications.svc.cluster.local:27017,graphql-mongo-database-1.graphql-mongo-database-headless.applications.svc.cluster.local:27017,graphql-mongo-database-2.graphql-mongo-database-headless.applications.svc.cluster.local:27017\\" --authenticationDatabase admin -u root -p $MONGODB_ROOT_PASSWORD --eval 'db.runCommand(\\"ismaster\\")' | awk -F\\\\\\" '/primary/ {print $4}')

  if ! is_empty_value \\"$current_primary\\"; then
    info \\"Detected existing primary: \${current_primary}\\"
  fi
fi

if ! is_empty_value \\"$current_primary\\" && [[ \\"$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER\\" == \\"$current_primary\\" ]]; then
    info \\"Advertised name matches current primary, configuring node as a primary\\"
    export MONGODB_REPLICA_SET_MODE=\\"primary\\"
elif ! is_empty_value \\"$current_primary\\" && [[ \\"$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER\\" != \\"$current_primary\\" ]]; then
    info \\"Current primary is different from this node. Configuring the node as replica of \${current_primary}\\"
    export MONGODB_REPLICA_SET_MODE=\\"secondary\\"
    export MONOGDB_INITIAL_PRIMARY_HOST=\\"\${current_primary%:*}\\"
    export MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\\"\${current_primary#*:}\\"
    export MONGODB_SET_SECONDARY_OK=\\"yes\\"
elif [[ \\"$MY_POD_NAME\\" = \\"graphql-mongo-database-0\\" ]]; then
    info \\"Pod name matches initial primary pod name, configuring node as a primary\\"
    export MONGODB_REPLICA_SET_MODE=\\"primary\\"
else
    info \\"Pod name doesn't match initial primary pod name, configuring node as a secondary\\"
    export MONGODB_REPLICA_SET_MODE=\\"secondary\\"
    export MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\\"$MONGODB_PORT_NUMBER\\"
fi

if [[ \\"$MONGODB_REPLICA_SET_MODE\\" == \\"secondary\\" ]]; then
    export MONGODB_INITIAL_PRIMARY_ROOT_USER=\\"$MONGODB_ROOT_USER\\"
    export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=\\"$MONGODB_ROOT_PASSWORD\\"
    export MONGODB_ROOT_PASSWORD=\\"\\"
    export MONGODB_EXTRA_USERNAMES=\\"\\"
    export MONGODB_EXTRA_DATABASES=\\"\\"
    export MONGODB_EXTRA_PASSWORDS=\\"\\"
    export MONGODB_ROOT_PASSWORD_FILE=\\"\\"
    export MONGODB_EXTRA_USERNAMES_FILE=\\"\\"
    export MONGODB_EXTRA_DATABASES_FILE=\\"\\"
    export MONGODB_EXTRA_PASSWORDS_FILE=\\"\\"
fi

exec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"setup-hidden.sh\\":\\"#!/bin/bash\\\\n\\\\n. /opt/bitnami/scripts/mongodb-env.sh\\\\n\\\\necho \\\\\\"Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME\\\\\\"\\\\necho \\\\\\"Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER\\\\\\"\\\\necho \\\\\\"Configuring node as a hidden node\\\\\\"\\\\nexport MONGODB_REPLICA_SET_MODE=\\\\\\"hidden\\\\\\"\\\\nexport MONGODB_INITIAL_PRIMARY_ROOT_USER=\\\\\\"$MONGODB_ROOT_USER\\\\\\"\\\\nexport MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=\\\\\\"$MONGODB_ROOT_PASSWORD\\\\\\"\\\\nexport MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\\\\\\"$MONGODB_PORT_NUMBER\\\\\\"\\\\nexport MONGODB_ROOT_PASSWORD=\\\\\\"\\\\\\"\\\\nexport MONGODB_EXTRA_USERNAMES=\\\\\\"\\\\\\"\\\\nexport MONGODB_EXTRA_DATABASES=\\\\\\"\\\\\\"\\\\nexport MONGODB_EXTRA_PASSWORDS=\\\\\\"\\\\\\"\\\\nexport MONGODB_ROOT_PASSWORD_FILE=\\\\\\"\\\\\\"\\\\nexport MONGODB_EXTRA_USERNAMES_FILE=\\\\\\"\\\\\\"\\\\nexport MONGODB_EXTRA_DATABASES_FILE=\\\\\\"\\\\\\"\\\\nexport MONGODB_EXTRA_PASSWORDS_FILE=\\\\\\"\\\\\\"\\\\nexec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh\\",\\"setup.sh\\":\\"#!/bin/bash\\\\n\\\\n. /opt/bitnami/scripts/mongodb-env.sh\\\\n. /opt/bitnami/scripts/libfs.sh\\\\n. /opt/bitnami/scripts/liblog.sh\\\\n. /opt/bitnami/scripts/libvalidations.sh\\\\n\\\\nif is_empty_value \\\\\\"$MONGODB_ADVERTISED_PORT_NUMBER\\\\\\"; then\\\\n  export MONGODB_ADVERTISED_PORT_NUMBER=\\\\\\"$MONGODB_PORT_NUMBER\\\\\\"\\\\nfi\\\\n\\\\ninfo \\\\\\"Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME\\\\\\"\\\\ninfo \\\\\\"Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER\\\\\\"\\\\n\\\\n# Check for existing replica set in case there is no data in the PVC\\\\n# This is for cases where the PVC is lost or for MongoDB caches without\\\\n# persistence\\\\ncurrent_primary=\\\\\\"\\\\\\"\\\\nif is_dir_empty \\\\\\"\${MONGODB_DATA_DIR}/db\\\\\\"; then\\\\n  info \\\\\\"Data dir empty, checking if the replica set already exists\\\\\\"\\\\n  current_primary=$(mongo admin --host \\\\\\"graphql-mongo-database-0.graphql-mongo-database-headless.applications.svc.cluster.local:27017,graphql-mongo-database-1.graphql-mongo-database-headless.applications.svc.cluster.local:27017,graphql-mongo-database-2.graphql-mongo-database-headless.applications.svc.cluster.local:27017\\\\\\" --authenticationDatabase admin -u root -p $MONGODB_ROOT_PASSWORD --eval 'db.runCommand(\\\\\\"ismaster\\\\\\")' | awk -F\\\\\\\\\\\\\\" '/primary/ {print $4}')\\\\n\\\\n  if ! is_empty_value \\\\\\"$current_primary\\\\\\"; then\\\\n    info \\\\\\"Detected existing primary: \${current_primary}\\\\\\"\\\\n  fi\\\\nfi\\\\n\\\\nif ! is_empty_value \\\\\\"$current_primary\\\\\\" \\\\u0026\\\\u0026 [[ \\\\\\"$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER\\\\\\" == \\\\\\"$current_primary\\\\\\" ]]; then\\\\n    info \\\\\\"Advertised name matches current primary, configuring node as a primary\\\\\\"\\\\n    export MONGODB_REPLICA_SET_MODE=\\\\\\"primary\\\\\\"\\\\nelif ! is_empty_value \\\\\\"$current_primary\\\\\\" \\\\u0026\\\\u0026 [[ \\\\\\"$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER\\\\\\" != \\\\\\"$current_primary\\\\\\" ]]; then\\\\n    info \\\\\\"Current primary is different from this node. Configuring the node as replica of \${current_primary}\\\\\\"\\\\n    export MONGODB_REPLICA_SET_MODE=\\\\\\"secondary\\\\\\"\\\\n    export MONOGDB_INITIAL_PRIMARY_HOST=\\\\\\"\${current_primary%:*}\\\\\\"\\\\n    export MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\\\\\\"\${current_primary#*:}\\\\\\"\\\\n    export MONGODB_SET_SECONDARY_OK=\\\\\\"yes\\\\\\"\\\\nelif [[ \\\\\\"$MY_POD_NAME\\\\\\" = \\\\\\"graphql-mongo-database-0\\\\\\" ]]; then\\\\n    info \\\\\\"Pod name matches initial primary pod name, configuring node as a primary\\\\\\"\\\\n    export MONGODB_REPLICA_SET_MODE=\\\\\\"primary\\\\\\"\\\\nelse\\\\n    info \\\\\\"Pod name doesn't match initial primary pod name, configuring node as a secondary\\\\\\"\\\\n    export MONGODB_REPLICA_SET_MODE=\\\\\\"secondary\\\\\\"\\\\n    export MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\\\\\\"$MONGODB_PORT_NUMBER\\\\\\"\\\\nfi\\\\n\\\\nif [[ \\\\\\"$MONGODB_REPLICA_SET_MODE\\\\\\" == \\\\\\"secondary\\\\\\" ]]; then\\\\n    export MONGODB_INITIAL_PRIMARY_ROOT_USER=\\\\\\"$MONGODB_ROOT_USER\\\\\\"\\\\n    export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=\\\\\\"$MONGODB_ROOT_PASSWORD\\\\\\"\\\\n    export MONGODB_ROOT_PASSWORD=\\\\\\"\\\\\\"\\\\n    export MONGODB_EXTRA_USERNAMES=\\\\\\"\\\\\\"\\\\n    export MONGODB_EXTRA_DATABASES=\\\\\\"\\\\\\"\\\\n    export MONGODB_EXTRA_PASSWORDS=\\\\\\"\\\\\\"\\\\n    export MONGODB_ROOT_PASSWORD_FILE=\\\\\\"\\\\\\"\\\\n    export MONGODB_EXTRA_USERNAMES_FILE=\\\\\\"\\\\\\"\\\\n    export MONGODB_EXTRA_DATABASES_FILE=\\\\\\"\\\\\\"\\\\n    export MONGODB_EXTRA_PASSWORDS_FILE=\\\\\\"\\\\\\"\\\\nfi\\\\n\\\\nexec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database-scripts\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "graphql-mongo-database-scripts",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-configmap-applications-graphql-mongo-database-scripts.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"StatefulSet\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"podManagementPolicy\\":\\"OrderedReady\\",\\"replicas\\":3,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/name\\":\\"mongodb\\"}},\\"serviceName\\":\\"graphql-mongo-database\\",\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/name\\":\\"mongodb\\"}},\\"namespaces\\":[\\"applications\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"command\\":[\\"/scripts/setup.sh\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"MY_POD_NAME\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"MY_POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}},{\\"name\\":\\"MY_POD_HOST_IP\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"status.hostIP\\"}}},{\\"name\\":\\"K8S_SERVICE_NAME\\",\\"value\\":\\"graphql-mongo-database\\"},{\\"name\\":\\"MONGODB_INITIAL_PRIMARY_HOST\\",\\"value\\":\\"graphql-mongo-database-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local\\"},{\\"name\\":\\"MONGODB_REPLICA_SET_NAME\\",\\"value\\":\\"rs0\\"},{\\"name\\":\\"MONGODB_ADVERTISED_HOSTNAME\\",\\"value\\":\\"$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local\\"},{\\"name\\":\\"MONGODB_EXTRA_USERNAMES\\",\\"value\\":\\"examplemm,username1,username2\\"},{\\"name\\":\\"MONGODB_EXTRA_DATABASES\\",\\"value\\":\\"graphql-mongo-database,db1,db2\\"},{\\"name\\":\\"MONGODB_EXTRA_PASSWORDS\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"mongodb-passwords\\",\\"name\\":\\"graphql-mongo-database\\"}}},{\\"name\\":\\"MONGODB_ROOT_USER\\",\\"value\\":\\"example\\"},{\\"name\\":\\"MONGODB_ROOT_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"mongodb-root-password\\",\\"name\\":\\"graphql-mongo-database\\"}}},{\\"name\\":\\"MONGODB_REPLICA_SET_KEY\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"mongodb-replica-set-key\\",\\"name\\":\\"graphql-mongo-database\\"}}},{\\"name\\":\\"ALLOW_EMPTY_PASSWORD\\",\\"value\\":\\"no\\"},{\\"name\\":\\"MONGODB_SYSTEM_LOG_VERBOSITY\\",\\"value\\":\\"0\\"},{\\"name\\":\\"MONGODB_DISABLE_SYSTEM_LOG\\",\\"value\\":\\"no\\"},{\\"name\\":\\"MONGODB_DISABLE_JAVASCRIPT\\",\\"value\\":\\"no\\"},{\\"name\\":\\"MONGODB_ENABLE_JOURNAL\\",\\"value\\":\\"yes\\"},{\\"name\\":\\"MONGODB_ENABLE_IPV6\\",\\"value\\":\\"no\\"},{\\"name\\":\\"MONGODB_ENABLE_DIRECTORY_PER_DB\\",\\"value\\":\\"no\\"}],\\"image\\":\\"docker.io/bitnami/mongodb:4.4.13-debian-10-r52\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"exec\\":{\\"command\\":[\\"mongo\\",\\"--disableImplicitSessions\\",\\"--eval\\",\\"db.adminCommand('ping')\\"]},\\"failureThreshold\\":6,\\"initialDelaySeconds\\":30,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":5},\\"name\\":\\"mongodb\\",\\"ports\\":[{\\"containerPort\\":27017,\\"name\\":\\"mongodb\\"}],\\"readinessProbe\\":{\\"exec\\":{\\"command\\":[\\"bash\\",\\"-ec\\",\\"# Run the proper check depending on the version\\\\n[[ $(mongo --version | grep \\\\\\"MongoDB shell\\\\\\") =~ ([0-9]+\\\\\\\\.[0-9]+\\\\\\\\.[0-9]+) ]] \\\\u0026\\\\u0026 VERSION=\${BASH_REMATCH[1]}\\\\n. /opt/bitnami/scripts/libversion.sh\\\\nVERSION_MAJOR=\\\\\\"$(get_sematic_version \\\\\\"$VERSION\\\\\\" 1)\\\\\\"\\\\nVERSION_MINOR=\\\\\\"$(get_sematic_version \\\\\\"$VERSION\\\\\\" 2)\\\\\\"\\\\nVERSION_PATCH=\\\\\\"$(get_sematic_version \\\\\\"$VERSION\\\\\\" 3)\\\\\\"\\\\nif [[ \\\\\\"$VERSION_MAJOR\\\\\\" -ge 4 ]] \\\\u0026\\\\u0026 [[ \\\\\\"$VERSION_MINOR\\\\\\" -ge 4 ]] \\\\u0026\\\\u0026 [[ \\\\\\"$VERSION_PATCH\\\\\\" -ge 2 ]]; then\\\\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'\\\\nelse\\\\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'\\\\nfi\\\\n\\"]},\\"failureThreshold\\":6,\\"initialDelaySeconds\\":5,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":5},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/bitnami/mongodb\\",\\"name\\":\\"datadir\\"},{\\"mountPath\\":\\"/scripts/setup.sh\\",\\"name\\":\\"scripts\\",\\"subPath\\":\\"setup.sh\\"}]}],\\"securityContext\\":{\\"fsGroup\\":1001,\\"sysctls\\":[]},\\"serviceAccountName\\":\\"graphql-mongo-database\\",\\"volumes\\":[{\\"configMap\\":{\\"defaultMode\\":493,\\"name\\":\\"graphql-mongo-database-scripts\\"},\\"name\\":\\"scripts\\"}]}},\\"updateStrategy\\":{\\"type\\":\\"RollingUpdate\\"},\\"volumeClaimTemplates\\":[{\\"metadata\\":{\\"name\\":\\"datadir\\"},\\"spec\\":{\\"accessModes\\":[\\"ReadWriteOnce\\"],\\"resources\\":{\\"requests\\":{\\"storage\\":\\"10Gi\\"}}}}]}}
",
      },
      "name": "graphql-mongo-database",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/apps_v1-statefulset-applications-graphql-mongo-database.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "mongodb",
            "app.kubernetes.io/instance": "graphql-mongo-database",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "mongodb",
            "helm.sh/chart": "mongodb-11.1.10",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "mongodb",
                        "app.kubernetes.io/instance": "graphql-mongo-database",
                        "app.kubernetes.io/name": "mongodb",
                      },
                    },
                    "namespaces": Array [
                      "applications",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "command": Array [
                "/scripts/setup.sh",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "MY_POD_NAME",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "MY_POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                Object {
                  "name": "MY_POD_HOST_IP",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "status.hostIP",
                    },
                  },
                },
                Object {
                  "name": "K8S_SERVICE_NAME",
                  "value": "graphql-mongo-database",
                },
                Object {
                  "name": "MONGODB_INITIAL_PRIMARY_HOST",
                  "value": "graphql-mongo-database-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local",
                },
                Object {
                  "name": "MONGODB_REPLICA_SET_NAME",
                  "value": "rs0",
                },
                Object {
                  "name": "MONGODB_ADVERTISED_HOSTNAME",
                  "value": "$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local",
                },
                Object {
                  "name": "MONGODB_EXTRA_USERNAMES",
                  "value": "examplemm,username1,username2",
                },
                Object {
                  "name": "MONGODB_EXTRA_DATABASES",
                  "value": "graphql-mongo-database,db1,db2",
                },
                Object {
                  "name": "MONGODB_EXTRA_PASSWORDS",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "mongodb-passwords",
                      "name": "graphql-mongo-database",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_ROOT_USER",
                  "value": "example",
                },
                Object {
                  "name": "MONGODB_ROOT_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "mongodb-root-password",
                      "name": "graphql-mongo-database",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_REPLICA_SET_KEY",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "mongodb-replica-set-key",
                      "name": "graphql-mongo-database",
                    },
                  },
                },
                Object {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no",
                },
                Object {
                  "name": "MONGODB_SYSTEM_LOG_VERBOSITY",
                  "value": "0",
                },
                Object {
                  "name": "MONGODB_DISABLE_SYSTEM_LOG",
                  "value": "no",
                },
                Object {
                  "name": "MONGODB_DISABLE_JAVASCRIPT",
                  "value": "no",
                },
                Object {
                  "name": "MONGODB_ENABLE_JOURNAL",
                  "value": "yes",
                },
                Object {
                  "name": "MONGODB_ENABLE_IPV6",
                  "value": "no",
                },
                Object {
                  "name": "MONGODB_ENABLE_DIRECTORY_PER_DB",
                  "value": "no",
                },
              ],
              "image": "docker.io/bitnami/mongodb:4.4.13-debian-10-r52",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "mongo",
                    "--disableImplicitSessions",
                    "--eval",
                    "db.adminCommand('ping')",
                  ],
                },
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "name": "mongodb",
              "ports": Array [
                Object {
                  "containerPort": 27017,
                  "name": "mongodb",
                },
              ],
              "readinessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "bash",
                    "-ec",
                    "# Run the proper check depending on the version
[[ $(mongo --version | grep \\"MongoDB shell\\") =~ ([0-9]+\\\\.[0-9]+\\\\.[0-9]+) ]] && VERSION=\${BASH_REMATCH[1]}
. /opt/bitnami/scripts/libversion.sh
VERSION_MAJOR=\\"$(get_sematic_version \\"$VERSION\\" 1)\\"
VERSION_MINOR=\\"$(get_sematic_version \\"$VERSION\\" 2)\\"
VERSION_PATCH=\\"$(get_sematic_version \\"$VERSION\\" 3)\\"
if [[ \\"$VERSION_MAJOR\\" -ge 4 ]] && [[ \\"$VERSION_MINOR\\" -ge 4 ]] && [[ \\"$VERSION_PATCH\\" -ge 2 ]]; then
    mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
else
    mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'
fi
",
                  ],
                },
                "failureThreshold": 6,
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/bitnami/mongodb",
                  "name": "datadir",
                },
                Object {
                  "mountPath": "/scripts/setup.sh",
                  "name": "scripts",
                  "subPath": "setup.sh",
                },
              ],
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
            "sysctls": Array [],
          },
          "serviceAccountName": "graphql-mongo-database",
          "volumes": Array [
            Object {
              "configMap": Object {
                "defaultMode": 493,
                "name": "graphql-mongo-database-scripts",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"kubectl.kubernetes.io/last-applied-configuration\\":\\"{\\\\\\"apiVersion\\\\\\":\\\\\\"apps/v1\\\\\\",\\\\\\"kind\\\\\\":\\\\\\"Deployment\\\\\\",\\\\\\"metadata\\\\\\":{\\\\\\"annotations\\\\\\":{\\\\\\"linkerd.io/inject\\\\\\":\\\\\\"enabled\\\\\\"},\\\\\\"labels\\\\\\":{\\\\\\"app.kubernetes.io/managed-by\\\\\\":\\\\\\"pulumi\\\\\\"},\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\",\\\\\\"namespace\\\\\\":\\\\\\"applications\\\\\\"},\\\\\\"spec\\\\\\":{\\\\\\"replicas\\\\\\":2,\\\\\\"selector\\\\\\":{\\\\\\"matchLabels\\\\\\":{\\\\\\"app\\\\\\":\\\\\\"graphql\\\\\\"}},\\\\\\"template\\\\\\":{\\\\\\"metadata\\\\\\":{\\\\\\"labels\\\\\\":{\\\\\\"app\\\\\\":\\\\\\"graphql\\\\\\"}},\\\\\\"spec\\\\\\":{\\\\\\"containers\\\\\\":[{\\\\\\"env\\\\\\":[{\\\\\\"name\\\\\\":\\\\\\"APP_ENVIRONMENT\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_ENVIRONMENT\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"APP_HOST\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_HOST\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"APP_PORT\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_PORT\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"APP_EXTERNAL_BASE_URL\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_EXTERNAL_BASE_URL\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"OAUTH_GITHUB_CLIENT_ID\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"OAUTH_GITHUB_CLIENT_ID\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"OAUTH_GITHUB_CLIENT_SECRET\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"OAUTH_GITHUB_CLIENT_SECRET\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"OAUTH_GOOGLE_CLIENT_ID\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"OAUTH_GOOGLE_CLIENT_ID\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"OAUTH_GOOGLE_CLIENT_SECRET\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"OAUTH_GOOGLE_CLIENT_SECRET\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_NAME\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_NAME\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_USERNAME\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_USERNAME\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_PASSWORD\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_PASSWORD\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_ROOT_USERNAME\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_ROOT_USERNAME\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_ROOT_PASSWORD\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_ROOT_PASSWORD\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_HOST\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_HOST\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_SERVICE_NAME\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_SERVICE_NAME\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_STORAGE_CLASS\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_STORAGE_CLASS\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_PORT\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_PORT\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"REDIS_USERNAME\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"REDIS_USERNAME\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"REDIS_PASSWORD\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"REDIS_PASSWORD\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"REDIS_HOST\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"REDIS_HOST\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"REDIS_SERVICE_NAME\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"REDIS_SERVICE_NAME\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"REDIS_PORT\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"REDIS_PORT\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}}],\\\\\\"image\\\\\\":\\\\\\"ghcr.io/oyelowo/graphql-mongo:master-f21d07e5b52e5fdc859482d526310efc78d9efea\\\\\\",\\\\\\"livenessProbe\\\\\\":{\\\\\\"failureThreshold\\\\\\":7,\\\\\\"httpGet\\\\\\":{\\\\\\"path\\\\\\":\\\\\\"/api/liveness\\\\\\",\\\\\\"port\\\\\\":8000},\\\\\\"initialDelaySeconds\\\\\\":300,\\\\\\"periodSeconds\\\\\\":10},\\\\\\"name\\\\\\":\\\\\\"graphql\\\\\\",\\\\\\"ports\\\\\\":[{\\\\\\"containerPort\\\\\\":8000,\\\\\\"name\\\\\\":\\\\\\"http\\\\\\"}],\\\\\\"readinessProbe\\\\\\":{\\\\\\"failureThreshold\\\\\\":7,\\\\\\"httpGet\\\\\\":{\\\\\\"path\\\\\\":\\\\\\"/api/healthz\\\\\\",\\\\\\"port\\\\\\":8000},\\\\\\"initialDelaySeconds\\\\\\":60,\\\\\\"periodSeconds\\\\\\":10},\\\\\\"resources\\\\\\":{\\\\\\"limits\\\\\\":{\\\\\\"cpu\\\\\\":\\\\\\"100m\\\\\\",\\\\\\"memory\\\\\\":\\\\\\"200Mi\\\\\\"},\\\\\\"requests\\\\\\":{\\\\\\"cpu\\\\\\":\\\\\\"100m\\\\\\",\\\\\\"memory\\\\\\":\\\\\\"70Mi\\\\\\"}},\\\\\\"volumeMounts\\\\\\":[]}],\\\\\\"imagePullSecrets\\\\\\":[{\\\\\\"name\\\\\\":\\\\\\"my-registry-key\\\\\\"}],\\\\\\"initContainers\\\\\\":[],\\\\\\"volumes\\\\\\":[]}}}}\\\\n\\",\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"graphql-mongo-http\\",\\"port\\":8000,\\"protocol\\":\\"TCP\\",\\"targetPort\\":8000}],\\"selector\\":{\\"app\\":\\"graphql\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "graphql-mongo",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-service-applications-graphql-mongo.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"replicas\\":2,\\"selector\\":{\\"matchLabels\\":{\\"app\\":\\"graphql\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app\\":\\"graphql\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"APP_ENVIRONMENT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_ENVIRONMENT\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"APP_HOST\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_HOST\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"APP_PORT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_PORT\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"APP_EXTERNAL_BASE_URL\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_EXTERNAL_BASE_URL\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"OAUTH_GITHUB_CLIENT_ID\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"OAUTH_GITHUB_CLIENT_ID\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"OAUTH_GITHUB_CLIENT_SECRET\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"OAUTH_GITHUB_CLIENT_SECRET\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"OAUTH_GOOGLE_CLIENT_ID\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"OAUTH_GOOGLE_CLIENT_ID\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"OAUTH_GOOGLE_CLIENT_SECRET\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"OAUTH_GOOGLE_CLIENT_SECRET\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_NAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_NAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_USERNAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_USERNAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_PASSWORD\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_ROOT_USERNAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_ROOT_USERNAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_ROOT_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_ROOT_PASSWORD\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_HOST\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_HOST\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_SERVICE_NAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_SERVICE_NAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_STORAGE_CLASS\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_STORAGE_CLASS\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_PORT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_PORT\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_USERNAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_USERNAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_PASSWORD\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_HOST\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_HOST\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_SERVICE_NAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_SERVICE_NAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_PORT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_PORT\\",\\"name\\":\\"graphql-mongo\\"}}}],\\"image\\":\\"ghcr.io/oyelowo/graphql-mongo:master-f21d07e5b52e5fdc859482d526310efc78d9efea\\",\\"livenessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/api/liveness\\",\\"port\\":8000},\\"initialDelaySeconds\\":300,\\"periodSeconds\\":10},\\"name\\":\\"graphql\\",\\"ports\\":[{\\"containerPort\\":8000,\\"name\\":\\"http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/api/healthz\\",\\"port\\":8000},\\"initialDelaySeconds\\":60,\\"periodSeconds\\":10},\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"200Mi\\"},\\"requests\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"70Mi\\"}},\\"volumeMounts\\":[]}],\\"imagePullSecrets\\":[{\\"name\\":\\"my-registry-key\\"}],\\"initContainers\\":[],\\"volumes\\":[]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "graphql-mongo",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/apps_v1-deployment-applications-graphql-mongo.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app": "graphql",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "APP_ENVIRONMENT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_ENVIRONMENT",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "APP_HOST",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_HOST",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "APP_PORT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_PORT",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "APP_EXTERNAL_BASE_URL",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_EXTERNAL_BASE_URL",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "OAUTH_GITHUB_CLIENT_ID",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "OAUTH_GITHUB_CLIENT_ID",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "OAUTH_GITHUB_CLIENT_SECRET",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "OAUTH_GITHUB_CLIENT_SECRET",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "OAUTH_GOOGLE_CLIENT_ID",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "OAUTH_GOOGLE_CLIENT_ID",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "OAUTH_GOOGLE_CLIENT_SECRET",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "OAUTH_GOOGLE_CLIENT_SECRET",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_NAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_NAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_USERNAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_USERNAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_PASSWORD",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_ROOT_USERNAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_ROOT_USERNAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_ROOT_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_ROOT_PASSWORD",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_HOST",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_HOST",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_SERVICE_NAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_SERVICE_NAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_STORAGE_CLASS",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_STORAGE_CLASS",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_PORT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_PORT",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_USERNAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_USERNAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_PASSWORD",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_HOST",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_HOST",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_SERVICE_NAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_SERVICE_NAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_SERVICE_NAME_WITH_SUFFIX",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_SERVICE_NAME_WITH_SUFFIX",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_PORT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_PORT",
                      "name": "graphql-mongo",
                    },
                  },
                },
              ],
              "image": "ghcr.io/oyelowo/graphql-mongo:master-f21d07e5b52e5fdc859482d526310efc78d9efea",
              "livenessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/api/liveness",
                  "port": 8000,
                },
                "initialDelaySeconds": 300,
                "periodSeconds": 10,
              },
              "name": "graphql",
              "ports": Array [
                Object {
                  "containerPort": 8000,
                  "name": "http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/api/healthz",
                  "port": 8000,
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
              },
              "resources": Object {
                "limits": Object {
                  "cpu": "100m",
                  "memory": "200Mi",
                },
                "requests": Object {
                  "cpu": "100m",
                  "memory": "70Mi",
                },
              },
              "volumeMounts": Array [],
            },
          ],
          "imagePullSecrets": Array [
            Object {
              "name": "my-registry-key",
            },
          ],
          "initContainers": Array [],
          "volumes": Array [],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"mongodb\\",\\"port\\":27017,\\"targetPort\\":\\"mongodb\\"}],\\"publishNotReadyAddresses\\":true,\\"selector\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/name\\":\\"mongodb\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "graphql-mongo-database",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-service-applications-graphql-mongo-database.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "config": "very important data",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"config\\":\\"very important data\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "graphql-mongo",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-configmap-applications-graphql-mongo.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis-headless\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"tcp-redis\\",\\"port\\":6379,\\"targetPort\\":\\"redis\\"}],\\"selector\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/name\\":\\"redis\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "graphql-mongo-redis-headless",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-service-applications-graphql-mongo-redis-headless.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "redis-password": "anVuZ2J1bnU=",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"redis-password\\":\\"anVuZ2J1bnU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis\\",\\"namespace\\":\\"applications\\"},\\"type\\":\\"Opaque\\"}
",
      },
      "name": "graphql-mongo-redis",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-secret-applications-graphql-mongo-redis.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "type": "Opaque",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis-master\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"tcp-redis\\",\\"port\\":6379,\\"targetPort\\":\\"redis\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/name\\":\\"redis\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "graphql-mongo-redis-master",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/1-manifest/v1-service-applications-graphql-mongo-redis-master.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {},
  },
]
`;

exports[`KubeObject Can sync resources 7`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"kubectl.kubernetes.io/last-applied-configuration\\":\\"{\\\\\\"apiVersion\\\\\\":\\\\\\"apps/v1\\\\\\",\\\\\\"kind\\\\\\":\\\\\\"Deployment\\\\\\",\\\\\\"metadata\\\\\\":{\\\\\\"annotations\\\\\\":{\\\\\\"linkerd.io/inject\\\\\\":\\\\\\"enabled\\\\\\"},\\\\\\"labels\\\\\\":{\\\\\\"app.kubernetes.io/managed-by\\\\\\":\\\\\\"pulumi\\\\\\"},\\\\\\"name\\\\\\":\\\\\\"react-web\\\\\\",\\\\\\"namespace\\\\\\":\\\\\\"applications\\\\\\"},\\\\\\"spec\\\\\\":{\\\\\\"replicas\\\\\\":2,\\\\\\"selector\\\\\\":{\\\\\\"matchLabels\\\\\\":{\\\\\\"app\\\\\\":\\\\\\"react\\\\\\"}},\\\\\\"template\\\\\\":{\\\\\\"metadata\\\\\\":{\\\\\\"labels\\\\\\":{\\\\\\"app\\\\\\":\\\\\\"react\\\\\\"}},\\\\\\"spec\\\\\\":{\\\\\\"containers\\\\\\":[{\\\\\\"env\\\\\\":[{\\\\\\"name\\\\\\":\\\\\\"APP_ENVIRONMENT\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_ENVIRONMENT\\\\\\",\\\\\\"name\\\\\\":\\\\\\"react-web\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"APP_HOST\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_HOST\\\\\\",\\\\\\"name\\\\\\":\\\\\\"react-web\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"APP_PORT\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_PORT\\\\\\",\\\\\\"name\\\\\\":\\\\\\"react-web\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"APP_EXTERNAL_BASE_URL\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_EXTERNAL_BASE_URL\\\\\\",\\\\\\"name\\\\\\":\\\\\\"react-web\\\\\\"}}}],\\\\\\"image\\\\\\":\\\\\\"ghcr.io/oyelowo/react-web:master-6fe87cdb17db051e707efbaaae6fc0dc83844ebe\\\\\\",\\\\\\"name\\\\\\":\\\\\\"react\\\\\\",\\\\\\"ports\\\\\\":[{\\\\\\"containerPort\\\\\\":3000,\\\\\\"name\\\\\\":\\\\\\"http\\\\\\"}],\\\\\\"resources\\\\\\":{\\\\\\"limits\\\\\\":{\\\\\\"cpu\\\\\\":\\\\\\"700m\\\\\\",\\\\\\"memory\\\\\\":\\\\\\"2Gi\\\\\\"},\\\\\\"requests\\\\\\":{\\\\\\"cpu\\\\\\":\\\\\\"500m\\\\\\",\\\\\\"memory\\\\\\":\\\\\\"1.3Gi\\\\\\"}},\\\\\\"volumeMounts\\\\\\":[]}],\\\\\\"imagePullSecrets\\\\\\":[{\\\\\\"name\\\\\\":\\\\\\"my-registry-key\\\\\\"}],\\\\\\"initContainers\\\\\\":[],\\\\\\"volumes\\\\\\":[]}}}}\\\\n\\",\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"react-web-http\\",\\"port\\":3000,\\"protocol\\":\\"TCP\\",\\"targetPort\\":3000}],\\"selector\\":{\\"app\\":\\"react\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/react-web/1-manifest/v1-service-applications-react-web.yaml",
    "resourceBaseDir": "generatedManifests/test/services/react-web",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "APP_ENVIRONMENT": "bG9jYWw=",
      "APP_EXTERNAL_BASE_URL": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
      "APP_HOST": "MC4wLjAuMA==",
      "APP_PORT": "MzAwMA==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"APP_ENVIRONMENT\\":\\"bG9jYWw=\\",\\"APP_EXTERNAL_BASE_URL\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\",\\"APP_HOST\\":\\"MC4wLjAuMA==\\",\\"APP_PORT\\":\\"MzAwMA==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"sealedsecrets.bitnami.com/managed\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"}}
",
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/react-web/1-manifest/v1-secret-applications-react-web.yaml",
    "resourceBaseDir": "generatedManifests/test/services/react-web",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"replicas\\":2,\\"selector\\":{\\"matchLabels\\":{\\"app\\":\\"react\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app\\":\\"react\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"APP_ENVIRONMENT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_ENVIRONMENT\\",\\"name\\":\\"react-web\\"}}},{\\"name\\":\\"APP_HOST\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_HOST\\",\\"name\\":\\"react-web\\"}}},{\\"name\\":\\"APP_PORT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_PORT\\",\\"name\\":\\"react-web\\"}}},{\\"name\\":\\"APP_EXTERNAL_BASE_URL\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_EXTERNAL_BASE_URL\\",\\"name\\":\\"react-web\\"}}}],\\"image\\":\\"ghcr.io/oyelowo/react-web:master-6fe87cdb17db051e707efbaaae6fc0dc83844ebe\\",\\"name\\":\\"react\\",\\"ports\\":[{\\"containerPort\\":3000,\\"name\\":\\"http\\"}],\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"700m\\",\\"memory\\":\\"2Gi\\"},\\"requests\\":{\\"cpu\\":\\"500m\\",\\"memory\\":\\"1.3Gi\\"}},\\"volumeMounts\\":[]}],\\"imagePullSecrets\\":[{\\"name\\":\\"my-registry-key\\"}],\\"initContainers\\":[],\\"volumes\\":[]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/react-web/1-manifest/apps_v1-deployment-applications-react-web.yaml",
    "resourceBaseDir": "generatedManifests/test/services/react-web",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app": "react",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "APP_ENVIRONMENT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_ENVIRONMENT",
                      "name": "react-web",
                    },
                  },
                },
                Object {
                  "name": "APP_HOST",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_HOST",
                      "name": "react-web",
                    },
                  },
                },
                Object {
                  "name": "APP_PORT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_PORT",
                      "name": "react-web",
                    },
                  },
                },
                Object {
                  "name": "APP_EXTERNAL_BASE_URL",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_EXTERNAL_BASE_URL",
                      "name": "react-web",
                    },
                  },
                },
              ],
              "image": "ghcr.io/oyelowo/react-web:master-6fe87cdb17db051e707efbaaae6fc0dc83844ebe",
              "name": "react",
              "ports": Array [
                Object {
                  "containerPort": 3000,
                  "name": "http",
                },
              ],
              "resources": Object {
                "limits": Object {
                  "cpu": "700m",
                  "memory": "2Gi",
                },
                "requests": Object {
                  "cpu": "500m",
                  "memory": "1.3Gi",
                },
              },
              "volumeMounts": Array [],
            },
          ],
          "imagePullSecrets": Array [
            Object {
              "name": "my-registry-key",
            },
          ],
          "initContainers": Array [],
          "volumes": Array [],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "config": "very important data",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"config\\":\\"very important data\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/react-web/1-manifest/v1-configmap-applications-react-web.yaml",
    "resourceBaseDir": "generatedManifests/test/services/react-web",
  },
]
`;

exports[`KubeObject Can sync resources 8`] = `
Array [
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "appprojects.argoproj.io",
    },
    "path": "generatedManifests/test/infrastructure/argocd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-appprojects.argoproj.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "applications.argoproj.io",
    },
    "path": "generatedManifests/test/infrastructure/argocd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-applications.argoproj.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "controller-gen.kubebuilder.io/version": "v0.3.0",
      },
      "name": "applicationsets.argoproj.io",
    },
    "path": "generatedManifests/test/infrastructure/argocd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-applicationsets.argoproj.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "application.instanceLabelKey": "argocd.argoproj.io/instance",
      "dex.config": "",
      "url": "",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"application.instanceLabelKey\\":\\"argocd.argoproj.io/instance\\",\\"dex.config\\":\\"\\",\\"url\\":\\"\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"app.kubernetes.io/part-of\\":\\"argocd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-cm\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-cm",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-cm.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "admin.password": "JDJhJDEwJDkwcG1lcUgvWlU1bTZ4TnR6b3NYQy5TdjAybm1OM3NlT3ZyQVFOSlg4a2JQTWpIM25ueExp",
      "admin.passwordMtime": "MjAyMi0wOC0xMVQwNjo0MzoyOFo=",
      "clearPassword": "b3llbG93bw==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"admin.password\\":\\"JDJhJDEwJDkwcG1lcUgvWlU1bTZ4TnR6b3NYQy5TdjAybm1OM3NlT3ZyQVFOSlg4a2JQTWpIM25ueExp\\",\\"admin.passwordMtime\\":\\"MjAyMi0wOC0xMVQwNjo0MzoyOFo=\\",\\"clearPassword\\":\\"b3llbG93bw==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"app.kubernetes.io/part-of\\":\\"argocd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-secret\\",\\"namespace\\":\\"argocd\\"},\\"type\\":\\"Opaque\\"}
",
      },
      "name": "argocd-secret",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-secret-argocd-argocd-secret.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "type": "Opaque",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"argocd-argo-cd-server\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"argocd-argo-cd-argocd-server\\",\\"namespace\\":\\"argocd\\"}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"argocd-argo-cd-server\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"argocd-argo-cd-argocd-server\\"}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-repo-server\\",\\"namespace\\":\\"argocd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"argoproj.io\\"],\\"resources\\":[\\"applications\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]}]}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-role-argocd-argocd-argo-cd-repo-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-app-controller\\",\\"namespace\\":\\"argocd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\",\\"configmaps\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"argoproj.io\\"],\\"resources\\":[\\"applications\\",\\"appprojects\\"],\\"verbs\\":[\\"create\\",\\"get\\",\\"list\\",\\"watch\\",\\"update\\",\\"patch\\",\\"delete\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"list\\"]}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-role-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-argocd-repo-server\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-argo-cd-argocd-repo-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-argo-cd-argocd-repo-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-argocd-server\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-argo-cd-argocd-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-argo-cd-argocd-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"networking.k8s.io/v1\\",\\"kind\\":\\"Ingress\\",\\"metadata\\":{\\"annotations\\":{\\"nginx.ingress.kubernetes.io/ssl-redirect\\":\\"false\\",\\"nginx.ingress.kubernetes.io/use-regex\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"ingressClassName\\":\\"nginx\\",\\"rules\\":[{\\"host\\":\\"argocd.localhost:8080\\",\\"http\\":{\\"paths\\":[{\\"backend\\":{\\"service\\":{\\"name\\":\\"argocd-argo-cd-server\\",\\"port\\":{\\"name\\":\\"https\\"}}},\\"path\\":\\"/\\",\\"pathType\\":\\"Prefix\\"}]}}],\\"tls\\":[{\\"hosts\\":[\\"argocd.localhost:8080\\"],\\"secretName\\":\\"argocd.localhost:8080-tls\\"}]}}
",
        "nginx.ingress.kubernetes.io/ssl-redirect": "false",
        "nginx.ingress.kubernetes.io/use-regex": "true",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/networking.k8s.io_v1-ingress-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-app-controller\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"tcp-controller\\",\\"port\\":8082,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"controller\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"},\\"sessionAffinity\\":\\"None\\",\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "ping_liveness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\\"$(< \\"\${REDIS_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h localhost \\\\
    -p $REDIS_PORT \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ \\"$response\\" != \\"PONG\\" ] && [ \\"$responseFirstWord\\" != \\"LOADING\\" ] && [ \\"$responseFirstWord\\" != \\"MASTERDOWN\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_liveness_local_and_master.sh": "script_dir=\\"$(dirname \\"$0\\")\\"
exit_status=0
\\"$script_dir/ping_liveness_local.sh\\" $1 || exit_status=$?
\\"$script_dir/ping_liveness_master.sh\\" $1 || exit_status=$?
exit $exit_status",
      "ping_liveness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\\"$(< \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h $REDIS_MASTER_HOST \\\\
    -p $REDIS_MASTER_PORT_NUMBER \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ \\"$response\\" != \\"PONG\\" ] && [ \\"$responseFirstWord\\" != \\"LOADING\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_readiness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\\"$(< \\"\${REDIS_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h localhost \\\\
    -p $REDIS_PORT \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
if [ \\"$response\\" != \\"PONG\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_readiness_local_and_master.sh": "script_dir=\\"$(dirname \\"$0\\")\\"
exit_status=0
\\"$script_dir/ping_readiness_local.sh\\" $1 || exit_status=$?
\\"$script_dir/ping_readiness_master.sh\\" $1 || exit_status=$?
exit $exit_status",
      "ping_readiness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\\"$(< \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h $REDIS_MASTER_HOST \\\\
    -p $REDIS_MASTER_PORT_NUMBER \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
if [ \\"$response\\" != \\"PONG\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"ping_liveness_local.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h localhost \\\\\\\\\\\\n    -p $REDIS_PORT \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ] \\\\u0026\\\\u0026 [ \\\\\\"$responseFirstWord\\\\\\" != \\\\\\"LOADING\\\\\\" ] \\\\u0026\\\\u0026 [ \\\\\\"$responseFirstWord\\\\\\" != \\\\\\"MASTERDOWN\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\",\\"ping_liveness_local_and_master.sh\\":\\"script_dir=\\\\\\"$(dirname \\\\\\"$0\\\\\\")\\\\\\"\\\\nexit_status=0\\\\n\\\\\\"$script_dir/ping_liveness_local.sh\\\\\\" $1 || exit_status=$?\\\\n\\\\\\"$script_dir/ping_liveness_master.sh\\\\\\" $1 || exit_status=$?\\\\nexit $exit_status\\",\\"ping_liveness_master.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_MASTER_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_MASTER_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_MASTER_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_MASTER_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h $REDIS_MASTER_HOST \\\\\\\\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ] \\\\u0026\\\\u0026 [ \\\\\\"$responseFirstWord\\\\\\" != \\\\\\"LOADING\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\",\\"ping_readiness_local.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h localhost \\\\\\\\\\\\n    -p $REDIS_PORT \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\",\\"ping_readiness_local_and_master.sh\\":\\"script_dir=\\\\\\"$(dirname \\\\\\"$0\\\\\\")\\\\\\"\\\\nexit_status=0\\\\n\\\\\\"$script_dir/ping_readiness_local.sh\\\\\\" $1 || exit_status=$?\\\\n\\\\\\"$script_dir/ping_readiness_master.sh\\\\\\" $1 || exit_status=$?\\\\nexit $exit_status\\",\\"ping_readiness_master.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_MASTER_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_MASTER_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_MASTER_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_MASTER_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h $REDIS_MASTER_HOST \\\\\\\\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis-health\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-redis-health",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-redis-health.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"*\\"],\\"resources\\":[\\"*\\"],\\"verbs\\":[\\"delete\\",\\"get\\",\\"patch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"pods\\",\\"pods/log\\"],\\"verbs\\":[\\"get\\"]}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "master.conf": "dir /data
# User-supplied master configuration:
rename-command FLUSHDB \\"\\"
rename-command FLUSHALL \\"\\"
# End of master configuration",
      "redis.conf": "# User-supplied common configuration:
# Enable AOF https://redis.io/topics/persistence#append-only-file
appendonly yes
# Disable RDB persistence, AOF persistence already enabled.
save \\"\\"
# End of common configuration",
      "replica.conf": "dir /data
slave-read-only yes
# User-supplied replica configuration:
rename-command FLUSHDB \\"\\"
rename-command FLUSHALL \\"\\"
# End of replica configuration",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"master.conf\\":\\"dir /data\\\\n# User-supplied master configuration:\\\\nrename-command FLUSHDB \\\\\\"\\\\\\"\\\\nrename-command FLUSHALL \\\\\\"\\\\\\"\\\\n# End of master configuration\\",\\"redis.conf\\":\\"# User-supplied common configuration:\\\\n# Enable AOF https://redis.io/topics/persistence#append-only-file\\\\nappendonly yes\\\\n# Disable RDB persistence, AOF persistence already enabled.\\\\nsave \\\\\\"\\\\\\"\\\\n# End of common configuration\\",\\"replica.conf\\":\\"dir /data\\\\nslave-read-only yes\\\\n# User-supplied replica configuration:\\\\nrename-command FLUSHDB \\\\\\"\\\\\\"\\\\nrename-command FLUSHALL \\\\\\"\\\\\\"\\\\n# End of replica configuration\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis-configuration\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-redis-configuration",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-redis-configuration.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"strategy\\":{\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"namespaces\\":[\\"argocd\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--staticassets\\",\\"/opt/bitnami/argo-cd/app\\",\\"--repo-server\\",\\"argocd-argo-cd-repo-server:8081\\",\\"--logformat\\",\\"text\\",\\"--loglevel\\",\\"info\\",\\"--redis\\",\\"argocd-redis-master:6379\\",\\"--insecure\\"],\\"command\\":[\\"argocd-server\\"],\\"env\\":[{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/argo-cd:2.3.3-debian-10-r25\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":8080},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"name\\":\\"argocd-server\\",\\"ports\\":[{\\"containerPort\\":8080,\\"name\\":\\"http\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":8080},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/app/config/ssh\\",\\"name\\":\\"ssh-known-hosts\\"},{\\"mountPath\\":\\"/app/config/server/tls\\",\\"name\\":\\"argocd-repo-server-tls\\"}]}],\\"initContainers\\":[{\\"args\\":[\\"-ec\\",\\"#!/bin/bash\\\\n\\\\nset -o errexit\\\\nset -o nounset\\\\nset -o pipefail\\\\n\\\\n. /opt/bitnami/scripts/libos.sh\\\\n. /opt/bitnami/scripts/liblog.sh\\\\n\\\\ncheck_redis_connection() {\\\\n  local result=\\\\\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\\\\\"\\\\n  if [[ \\\\\\"$result\\\\\\" != \\\\\\"PONG\\\\\\" ]]; then\\\\n    false\\\\n  fi\\\\n}\\\\n\\\\ninfo \\\\\\"Checking redis connection...\\\\\\"\\\\nif ! retry_while \\\\\\"check_redis_connection\\\\\\"; then\\\\n    error \\\\\\"Could not connect to the Redis server\\\\\\"\\\\n    return 1\\\\nelse\\\\n    info \\\\\\"Connected to the Redis instance\\\\\\"\\\\nfi\\\\n\\"],\\"command\\":[\\"/bin/bash\\"],\\"env\\":[{\\"name\\":\\"REDISCLI_AUTH\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/redis:6.2.7-debian-10-r2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"wait-for-redis\\"}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"argocd-argo-cd-argocd-server\\",\\"volumes\\":[{\\"configMap\\":{\\"name\\":\\"argocd-ssh-known-hosts-cm\\"},\\"name\\":\\"ssh-known-hosts\\"},{\\"name\\":\\"argocd-repo-server-tls\\",\\"secret\\":{\\"items\\":[{\\"key\\":\\"tls.crt\\",\\"path\\":\\"tls.crt\\"},{\\"key\\":\\"tls.key\\",\\"path\\":\\"tls.key\\"},{\\"key\\":\\"ca.crt\\",\\"path\\":\\"ca.crt\\"}],\\"optional\\":true,\\"secretName\\":\\"argocd-repo-server-tls\\"}}]}}}}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "server",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-3.1.16",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "server",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": Array [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--staticassets",
                "/opt/bitnami/argo-cd/app",
                "--repo-server",
                "argocd-argo-cd-repo-server:8081",
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
                "--insecure",
              ],
              "command": Array [
                "argocd-server",
              ],
              "env": Array [
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.3.3-debian-10-r25",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 8080,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "argocd-server",
              "ports": Array [
                Object {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 8080,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/app/config/ssh",
                  "name": "ssh-known-hosts",
                },
                Object {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result=\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\"
  if [[ \\"$result\\" != \\"PONG\\" ]]; then
    false
  fi
}

info \\"Checking redis connection...\\"
if ! retry_while \\"check_redis_connection\\"; then
    error \\"Could not connect to the Redis server\\"
    return 1
else
    info \\"Connected to the Redis instance\\"
fi
",
              ],
              "command": Array [
                "/bin/bash",
              ],
              "env": Array [
                Object {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r2",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-server",
          "volumes": Array [
            Object {
              "configMap": Object {
                "name": "argocd-ssh-known-hosts-cm",
              },
              "name": "ssh-known-hosts",
            },
            Object {
              "name": "argocd-repo-server-tls",
              "secret": Object {
                "items": Array [
                  Object {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  Object {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  Object {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis-master\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"tcp-redis\\",\\"port\\":6379,\\"targetPort\\":\\"redis\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"redis\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "argocd-redis-master",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-redis-master.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-app-controller\\",\\"namespace\\":\\"argocd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"argocd-argo-cd-app-controller\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"argocd-argo-cd-argocd-app-controller\\",\\"namespace\\":\\"argocd\\"}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "ssh_known_hosts": "bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"ssh_known_hosts\\":\\"bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==\\\\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\\\\ngitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\\\\ngitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\\\\ngitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\\\\nssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\\\nvs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\\\n\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"app.kubernetes.io/part-of\\":\\"argocd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-ssh-known-hosts-cm\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-ssh-known-hosts-cm",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-ssh-known-hosts-cm.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-redis",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-redis.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-repo-server\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"strategy\\":{\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"namespaces\\":[\\"argocd\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--logformat\\",\\"text\\",\\"--loglevel\\",\\"info\\",\\"--redis\\",\\"argocd-redis-master:6379\\"],\\"command\\":[\\"argocd-repo-server\\"],\\"env\\":[{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/argo-cd:2.3.3-debian-10-r25\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"tcpSocket\\":{\\"port\\":8081},\\"timeoutSeconds\\":1},\\"name\\":\\"argocd-repo-server\\",\\"ports\\":[{\\"containerPort\\":8081,\\"name\\":\\"repo-server\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"tcpSocket\\":{\\"port\\":8081},\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/app/config/ssh\\",\\"name\\":\\"ssh-known-hosts\\"},{\\"mountPath\\":\\"/app/config/server/tls\\",\\"name\\":\\"argocd-repo-server-tls\\"},{\\"mountPath\\":\\"/app/config/gpg/keys\\",\\"name\\":\\"gpg-keyring\\"},{\\"mountPath\\":\\"/tmp\\",\\"name\\":\\"tmp-dir\\"}]}],\\"initContainers\\":[{\\"args\\":[\\"-ec\\",\\"#!/bin/bash\\\\n\\\\nset -o errexit\\\\nset -o nounset\\\\nset -o pipefail\\\\n\\\\n. /opt/bitnami/scripts/libos.sh\\\\n. /opt/bitnami/scripts/liblog.sh\\\\n\\\\ncheck_redis_connection() {\\\\n  local result=\\\\\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\\\\\"\\\\n  if [[ \\\\\\"$result\\\\\\" != \\\\\\"PONG\\\\\\" ]]; then\\\\n    false\\\\n  fi\\\\n}\\\\n\\\\ninfo \\\\\\"Checking redis connection...\\\\\\"\\\\nif ! retry_while \\\\\\"check_redis_connection\\\\\\"; then\\\\n    error \\\\\\"Could not connect to the Redis server\\\\\\"\\\\n    return 1\\\\nelse\\\\n    info \\\\\\"Connected to the Redis instance\\\\\\"\\\\nfi\\\\n\\"],\\"command\\":[\\"/bin/bash\\"],\\"env\\":[{\\"name\\":\\"REDISCLI_AUTH\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/redis:6.2.7-debian-10-r2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"wait-for-redis\\"}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"argocd-argo-cd-argocd-repo-server\\",\\"volumes\\":[{\\"configMap\\":{\\"name\\":\\"argocd-ssh-known-hosts-cm\\"},\\"name\\":\\"ssh-known-hosts\\"},{\\"name\\":\\"argocd-repo-server-tls\\",\\"secret\\":{\\"items\\":[{\\"key\\":\\"tls.crt\\",\\"path\\":\\"tls.crt\\"},{\\"key\\":\\"tls.key\\",\\"path\\":\\"tls.key\\"},{\\"key\\":\\"ca.crt\\",\\"path\\":\\"ca.crt\\"}],\\"optional\\":true,\\"secretName\\":\\"argocd-repo-server-tls\\"}},{\\"emptyDir\\":{},\\"name\\":\\"tmp-dir\\"},{\\"emptyDir\\":{},\\"name\\":\\"gpg-keyring\\"}]}}}}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-repo-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "repo-server",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-3.1.16",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "repo-server",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": Array [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
              ],
              "command": Array [
                "argocd-repo-server",
              ],
              "env": Array [
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.3.3-debian-10-r25",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": Object {
                  "port": 8081,
                },
                "timeoutSeconds": 1,
              },
              "name": "argocd-repo-server",
              "ports": Array [
                Object {
                  "containerPort": 8081,
                  "name": "repo-server",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": Object {
                  "port": 8081,
                },
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/app/config/ssh",
                  "name": "ssh-known-hosts",
                },
                Object {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
                Object {
                  "mountPath": "/app/config/gpg/keys",
                  "name": "gpg-keyring",
                },
                Object {
                  "mountPath": "/tmp",
                  "name": "tmp-dir",
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result=\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\"
  if [[ \\"$result\\" != \\"PONG\\" ]]; then
    false
  fi
}

info \\"Checking redis connection...\\"
if ! retry_while \\"check_redis_connection\\"; then
    error \\"Could not connect to the Redis server\\"
    return 1
else
    info \\"Connected to the Redis instance\\"
fi
",
              ],
              "command": Array [
                "/bin/bash",
              ],
              "env": Array [
                Object {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r2",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-repo-server",
          "volumes": Array [
            Object {
              "configMap": Object {
                "name": "argocd-ssh-known-hosts-cm",
              },
              "name": "ssh-known-hosts",
            },
            Object {
              "name": "argocd-repo-server-tls",
              "secret": Object {
                "items": Array [
                  Object {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  Object {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  Object {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
            Object {
              "emptyDir": Object {},
              "name": "tmp-dir",
            },
            Object {
              "emptyDir": Object {},
              "name": "gpg-keyring",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"http\\",\\"port\\":80,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"http\\"},{\\"name\\":\\"https\\",\\"port\\":443,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"http\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"},\\"sessionAffinity\\":\\"None\\",\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-repo-server\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"tcp-repo-server\\",\\"port\\":8081,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"repo-server\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"},\\"sessionAffinity\\":\\"None\\",\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-argo-cd-repo-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-app-controller\\",\\"namespace\\":\\"argocd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"argocd-argo-cd-app-controller\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"argocd-argo-cd-argocd-app-controller\\"}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "redis-password": "dGw0RVN2WTlrTA==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"redis-password\\":\\"dGw0RVN2WTlrTA==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis\\",\\"namespace\\":\\"argocd\\"},\\"type\\":\\"Opaque\\"}
",
      },
      "name": "argocd-redis",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-secret-argocd-argocd-redis.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "type": "Opaque",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-repo-server\\",\\"namespace\\":\\"argocd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"argocd-argo-cd-repo-server\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"argocd-argo-cd-argocd-repo-server\\"}]}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-argocd-argocd-argo-cd-repo-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-app-controller\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"strategy\\":{\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"namespaces\\":[\\"argocd\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--status-processors\\",\\"20\\",\\"--operation-processors\\",\\"10\\",\\"--app-resync\\",\\"180\\",\\"--self-heal-timeout-seconds\\",\\"5\\",\\"--repo-server\\",\\"argocd-argo-cd-repo-server:8081\\",\\"--logformat\\",\\"text\\",\\"--loglevel\\",\\"info\\",\\"--redis\\",\\"argocd-redis-master:6379\\"],\\"command\\":[\\"argocd-application-controller\\"],\\"env\\":[{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/argo-cd:2.3.3-debian-10-r25\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":8082},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"name\\":\\"controller\\",\\"ports\\":[{\\"containerPort\\":8082,\\"name\\":\\"controller\\",\\"protocol\\":\\"TCP\\"},{\\"containerPort\\":8082,\\"name\\":\\"metrics\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"tcpSocket\\":{\\"port\\":8082},\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/app/config/server/tls\\",\\"name\\":\\"argocd-repo-server-tls\\"}]}],\\"initContainers\\":[{\\"args\\":[\\"-ec\\",\\"#!/bin/bash\\\\n\\\\nset -o errexit\\\\nset -o nounset\\\\nset -o pipefail\\\\n\\\\n. /opt/bitnami/scripts/libos.sh\\\\n. /opt/bitnami/scripts/liblog.sh\\\\n\\\\ncheck_redis_connection() {\\\\n  local result=\\\\\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\\\\\"\\\\n  if [[ \\\\\\"$result\\\\\\" != \\\\\\"PONG\\\\\\" ]]; then\\\\n    false\\\\n  fi\\\\n}\\\\n\\\\ninfo \\\\\\"Checking redis connection...\\\\\\"\\\\nif ! retry_while \\\\\\"check_redis_connection\\\\\\"; then\\\\n    error \\\\\\"Could not connect to the Redis server\\\\\\"\\\\n    return 1\\\\nelse\\\\n    info \\\\\\"Connected to the Redis instance\\\\\\"\\\\nfi\\\\n\\"],\\"command\\":[\\"/bin/bash\\"],\\"env\\":[{\\"name\\":\\"REDISCLI_AUTH\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/redis:6.2.7-debian-10-r2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"wait-for-redis\\"}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"argocd-argo-cd-argocd-app-controller\\",\\"volumes\\":[{\\"name\\":\\"argocd-repo-server-tls\\",\\"secret\\":{\\"items\\":[{\\"key\\":\\"tls.crt\\",\\"path\\":\\"tls.crt\\"},{\\"key\\":\\"tls.key\\",\\"path\\":\\"tls.key\\"},{\\"key\\":\\"ca.crt\\",\\"path\\":\\"ca.crt\\"}],\\"optional\\":true,\\"secretName\\":\\"argocd-repo-server-tls\\"}}]}}}}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-3.1.16",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "controller",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": Array [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--status-processors",
                "20",
                "--operation-processors",
                "10",
                "--app-resync",
                "180",
                "--self-heal-timeout-seconds",
                "5",
                "--repo-server",
                "argocd-argo-cd-repo-server:8081",
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
              ],
              "command": Array [
                "argocd-application-controller",
              ],
              "env": Array [
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.3.3-debian-10-r25",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 8082,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "controller",
              "ports": Array [
                Object {
                  "containerPort": 8082,
                  "name": "controller",
                  "protocol": "TCP",
                },
                Object {
                  "containerPort": 8082,
                  "name": "metrics",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": Object {
                  "port": 8082,
                },
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result=\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\"
  if [[ \\"$result\\" != \\"PONG\\" ]]; then
    false
  fi
}

info \\"Checking redis connection...\\"
if ! retry_while \\"check_redis_connection\\"; then
    error \\"Could not connect to the Redis server\\"
    return 1
else
    info \\"Connected to the Redis instance\\"
fi
",
              ],
              "command": Array [
                "/bin/bash",
              ],
              "env": Array [
                Object {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r2",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-app-controller",
          "volumes": Array [
            Object {
              "name": "argocd-repo-server-tls",
              "secret": Object {
                "items": Array [
                  Object {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  Object {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  Object {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\",\\"configmaps\\"],\\"verbs\\":[\\"create\\",\\"get\\",\\"list\\",\\"watch\\",\\"update\\",\\"patch\\",\\"delete\\"]},{\\"apiGroups\\":[\\"argoproj.io\\"],\\"resources\\":[\\"applications\\",\\"appprojects\\"],\\"verbs\\":[\\"create\\",\\"get\\",\\"list\\",\\"watch\\",\\"update\\",\\"delete\\",\\"patch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"list\\"]}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-role-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-argocd-app-controller\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-argo-cd-argocd-app-controller",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-argo-cd-argocd-app-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "start-master.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\\"$(< \\"\${REDIS_PASSWORD_FILE}\\")\\"
if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
fi
if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
fi
ARGS=(\\"--port\\" \\"\${REDIS_PORT}\\")
ARGS+=(\\"--requirepass\\" \\"\${REDIS_PASSWORD}\\")
ARGS+=(\\"--masterauth\\" \\"\${REDIS_PASSWORD}\\")
ARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/redis.conf\\")
ARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/master.conf\\")
exec redis-server \\"\${ARGS[@]}\\"
",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"start-master.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\nif [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then\\\\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\\\\nfi\\\\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\\\\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\\\\nfi\\\\nARGS=(\\\\\\"--port\\\\\\" \\\\\\"\${REDIS_PORT}\\\\\\")\\\\nARGS+=(\\\\\\"--requirepass\\\\\\" \\\\\\"\${REDIS_PASSWORD}\\\\\\")\\\\nARGS+=(\\\\\\"--masterauth\\\\\\" \\\\\\"\${REDIS_PASSWORD}\\\\\\")\\\\nARGS+=(\\\\\\"--include\\\\\\" \\\\\\"/opt/bitnami/redis/etc/redis.conf\\\\\\")\\\\nARGS+=(\\\\\\"--include\\\\\\" \\\\\\"/opt/bitnami/redis/etc/master.conf\\\\\\")\\\\nexec redis-server \\\\\\"\${ARGS[@]}\\\\\\"\\\\n\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis-scripts\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-redis-scripts",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-redis-scripts.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis-headless\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"tcp-redis\\",\\"port\\":6379,\\"targetPort\\":\\"redis\\"}],\\"selector\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"redis\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "argocd-redis-headless",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-redis-headless.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"StatefulSet\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis-master\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"redis\\"}},\\"serviceName\\":\\"argocd-redis-headless\\",\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/configmap\\":\\"e613b74f64a1abb905aba4af7f0301b476819a3f6a306d9a3657086466a276f9\\",\\"checksum/health\\":\\"7bcc56d6b8dd9f33cae37e7b3fc8b726110f46a517de6d73f1451bf57187000e\\",\\"checksum/scripts\\":\\"3891447283e6d8c1c3eeec22f284bfa7d72558be1faee862ed78dcd1e275cf5d\\",\\"checksum/secret\\":\\"8d1472edc989e2f52d1566011b7554eb3143b444cfdd00159fc9646b121dca6b\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"redis\\"}},\\"namespaces\\":[\\"argocd\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"-c\\",\\"/opt/bitnami/scripts/start-scripts/start-master.sh\\"],\\"command\\":[\\"/bin/bash\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"REDIS_REPLICATION_MODE\\",\\"value\\":\\"master\\"},{\\"name\\":\\"ALLOW_EMPTY_PASSWORD\\",\\"value\\":\\"no\\"},{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}},{\\"name\\":\\"REDIS_TLS_ENABLED\\",\\"value\\":\\"no\\"},{\\"name\\":\\"REDIS_PORT\\",\\"value\\":\\"6379\\"}],\\"image\\":\\"docker.io/bitnami/redis:6.2.7-debian-10-r2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"exec\\":{\\"command\\":[\\"sh\\",\\"-c\\",\\"/health/ping_liveness_local.sh 5\\"]},\\"failureThreshold\\":5,\\"initialDelaySeconds\\":20,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":6},\\"name\\":\\"redis\\",\\"ports\\":[{\\"containerPort\\":6379,\\"name\\":\\"redis\\"}],\\"readinessProbe\\":{\\"exec\\":{\\"command\\":[\\"sh\\",\\"-c\\",\\"/health/ping_readiness_local.sh 1\\"]},\\"failureThreshold\\":5,\\"initialDelaySeconds\\":20,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":2},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/opt/bitnami/scripts/start-scripts\\",\\"name\\":\\"start-scripts\\"},{\\"mountPath\\":\\"/health\\",\\"name\\":\\"health\\"},{\\"mountPath\\":\\"/data\\",\\"name\\":\\"redis-data\\"},{\\"mountPath\\":\\"/opt/bitnami/redis/mounted-etc\\",\\"name\\":\\"config\\"},{\\"mountPath\\":\\"/opt/bitnami/redis/etc/\\",\\"name\\":\\"redis-tmp-conf\\"},{\\"mountPath\\":\\"/tmp\\",\\"name\\":\\"tmp\\"}]}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"argocd-redis\\",\\"terminationGracePeriodSeconds\\":30,\\"volumes\\":[{\\"configMap\\":{\\"defaultMode\\":493,\\"name\\":\\"argocd-redis-scripts\\"},\\"name\\":\\"start-scripts\\"},{\\"configMap\\":{\\"defaultMode\\":493,\\"name\\":\\"argocd-redis-health\\"},\\"name\\":\\"health\\"},{\\"configMap\\":{\\"name\\":\\"argocd-redis-configuration\\"},\\"name\\":\\"config\\"},{\\"emptyDir\\":{},\\"name\\":\\"redis-tmp-conf\\"},{\\"emptyDir\\":{},\\"name\\":\\"tmp\\"}]}},\\"updateStrategy\\":{\\"rollingUpdate\\":{},\\"type\\":\\"RollingUpdate\\"},\\"volumeClaimTemplates\\":[{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"redis\\"},\\"name\\":\\"redis-data\\"},\\"spec\\":{\\"accessModes\\":[\\"ReadWriteOnce\\"],\\"resources\\":{\\"requests\\":{\\"storage\\":\\"8Gi\\"}}}}]}}
",
      },
      "name": "argocd-redis-master",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-statefulset-argocd-argocd-redis-master.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/configmap": "e613b74f64a1abb905aba4af7f0301b476819a3f6a306d9a3657086466a276f9",
            "checksum/health": "7bcc56d6b8dd9f33cae37e7b3fc8b726110f46a517de6d73f1451bf57187000e",
            "checksum/scripts": "3891447283e6d8c1c3eeec22f284bfa7d72558be1faee862ed78dcd1e275cf5d",
            "checksum/secret": "8d1472edc989e2f52d1566011b7554eb3143b444cfdd00159fc9646b121dca6b",
          },
          "labels": Object {
            "app.kubernetes.io/component": "master",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "redis",
            "helm.sh/chart": "redis-16.8.9",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "master",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "redis",
                      },
                    },
                    "namespaces": Array [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-master.sh",
              ],
              "command": Array [
                "/bin/bash",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "REDIS_REPLICATION_MODE",
                  "value": "master",
                },
                Object {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no",
                },
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
                Object {
                  "name": "REDIS_TLS_ENABLED",
                  "value": "no",
                },
                Object {
                  "name": "REDIS_PORT",
                  "value": "6379",
                },
              ],
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "sh",
                    "-c",
                    "/health/ping_liveness_local.sh 5",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 6,
              },
              "name": "redis",
              "ports": Array [
                Object {
                  "containerPort": 6379,
                  "name": "redis",
                },
              ],
              "readinessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "sh",
                    "-c",
                    "/health/ping_readiness_local.sh 1",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/opt/bitnami/scripts/start-scripts",
                  "name": "start-scripts",
                },
                Object {
                  "mountPath": "/health",
                  "name": "health",
                },
                Object {
                  "mountPath": "/data",
                  "name": "redis-data",
                },
                Object {
                  "mountPath": "/opt/bitnami/redis/mounted-etc",
                  "name": "config",
                },
                Object {
                  "mountPath": "/opt/bitnami/redis/etc/",
                  "name": "redis-tmp-conf",
                },
                Object {
                  "mountPath": "/tmp",
                  "name": "tmp",
                },
              ],
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-redis",
          "terminationGracePeriodSeconds": 30,
          "volumes": Array [
            Object {
              "configMap": Object {
                "defaultMode": 493,
                "name": "argocd-redis-scripts",
              },
              "name": "start-scripts",
            },
            Object {
              "configMap": Object {
                "defaultMode": 493,
                "name": "argocd-redis-health",
              },
              "name": "health",
            },
            Object {
              "configMap": Object {
                "name": "argocd-redis-configuration",
              },
              "name": "config",
            },
            Object {
              "emptyDir": Object {},
              "name": "redis-tmp-conf",
            },
            Object {
              "emptyDir": Object {},
              "name": "tmp",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-app-controller\\",\\"namespace\\":\\"argocd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"*\\"],\\"resources\\":[\\"*\\"],\\"verbs\\":[\\"*\\"]},{\\"nonResourceURLs\\":[\\"*\\"],\\"verbs\\":[\\"*\\"]}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
  },
]
`;

exports[`KubeObject Can sync resources 9`] = `
Array [
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "trafficsplits.split.smi-spec.io",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-trafficsplits.split.smi-spec.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "serverauthorizations.policy.linkerd.io",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-serverauthorizations.policy.linkerd.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "servers.policy.linkerd.io",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-servers.policy.linkerd.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "serviceprofiles.linkerd.io",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-serviceprofiles.linkerd.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-identity\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"grpc\\",\\"port\\":8080,\\"targetPort\\":8080}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"identity\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-identity",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"grpc\\",\\"port\\":8090,\\"targetPort\\":8090}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-policy",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-policy.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-dst-headless\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"grpc\\",\\"port\\":8086,\\"targetPort\\":8086}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-dst-headless",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-dst-headless.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"proxy-injector\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/config\\":\\"173ab73deb21ded56701835d0405fe9b6b152e8003f0a23857a20c3cf5165dbd\\",\\"config.linkerd.io/default-inbound-policy\\":\\"all-unauthenticated\\",\\"config.linkerd.io/opaque-ports\\":\\"8443\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\",\\"linkerd.io/identity-mode\\":\\"default\\",\\"linkerd.io/proxy-version\\":\\"stable-2.11.2\\"},\\"labels\\":{\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-proxy-injector\\",\\"linkerd.io/workload-ns\\":\\"linkerd\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"_pod_name\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"_pod_ns\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}},{\\"name\\":\\"_pod_nodeName\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.nodeName\\"}}},{\\"name\\":\\"LINKERD2_PROXY_LOG\\",\\"value\\":\\"warn,linkerd=info\\"},{\\"name\\":\\"LINKERD2_PROXY_LOG_FORMAT\\",\\"value\\":\\"plain\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_ADDR\\",\\"value\\":\\"linkerd-dst-headless.linkerd.svc.cluster.local.:8086\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_ADDR\\",\\"value\\":\\"linkerd-policy.linkerd.svc.cluster.local.:8090\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_WORKLOAD\\",\\"value\\":\\"$(_pod_ns):$(_pod_name)\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY\\",\\"value\\":\\"all-unauthenticated\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"100ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"1000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_CONTROL_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4190\\"},{\\"name\\":\\"LINKERD2_PROXY_ADMIN_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4191\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR\\",\\"value\\":\\"127.0.0.1:4140\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4143\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_IPS\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"status.podIPs\\"}}},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS\\",\\"value\\":\\"8443,9995\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES\\",\\"value\\":\\"svc.cluster.local.\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION\\",\\"value\\":\\"25,587,3306,4444,5432,6379,9300,11211\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_CONTEXT\\",\\"value\\":\\"{\\\\\\"ns\\\\\\":\\\\\\"$(_pod_ns)\\\\\\", \\\\\\"nodeName\\\\\\":\\\\\\"$(_pod_nodeName)\\\\\\"}\\\\n\\"},{\\"name\\":\\"_pod_sa\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.serviceAccountName\\"}}},{\\"name\\":\\"_l5d_ns\\",\\"value\\":\\"linkerd\\"},{\\"name\\":\\"_l5d_trustdomain\\",\\"value\\":\\"cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_DIR\\",\\"value\\":\\"/var/run/linkerd/identity/end-entity\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS\\",\\"valueFrom\\":{\\"configMapKeyRef\\":{\\"key\\":\\"ca-bundle.crt\\",\\"name\\":\\"linkerd-identity-trust-roots\\"}}},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TOKEN_FILE\\",\\"value\\":\\"/var/run/secrets/kubernetes.io/serviceaccount/token\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_ADDR\\",\\"value\\":\\"linkerd-identity-headless.linkerd.svc.cluster.local.:8080\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_LOCAL_NAME\\",\\"value\\":\\"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_NAME\\",\\"value\\":\\"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"}],\\"image\\":\\"cr.l5d.io/linkerd/proxy:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"lifecycle\\":{\\"postStart\\":{\\"exec\\":{\\"command\\":[\\"/usr/lib/linkerd/linkerd-await\\",\\"--timeout=2m\\"]}}},\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/live\\",\\"port\\":4191},\\"initialDelaySeconds\\":10},\\"name\\":\\"linkerd-proxy\\",\\"ports\\":[{\\"containerPort\\":4143,\\"name\\":\\"linkerd-proxy\\"},{\\"containerPort\\":4191,\\"name\\":\\"linkerd-admin\\"}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":4191},\\"initialDelaySeconds\\":2},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsUser\\":2102},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/identity/end-entity\\",\\"name\\":\\"linkerd-identity-end-entity\\"}]},{\\"args\\":[\\"proxy-injector\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9995},\\"initialDelaySeconds\\":10},\\"name\\":\\"proxy-injector\\",\\"ports\\":[{\\"containerPort\\":8443,\\"name\\":\\"proxy-injector\\"},{\\"containerPort\\":9995,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9995}},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/config\\",\\"name\\":\\"config\\"},{\\"mountPath\\":\\"/var/run/linkerd/identity/trust-roots\\",\\"name\\":\\"trust-roots\\"},{\\"mountPath\\":\\"/var/run/linkerd/tls\\",\\"name\\":\\"tls\\",\\"readOnly\\":true}]}],\\"initContainers\\":[{\\"args\\":[\\"--incoming-proxy-port\\",\\"4143\\",\\"--outgoing-proxy-port\\",\\"4140\\",\\"--proxy-uid\\",\\"2102\\",\\"--inbound-ports-to-ignore\\",\\"4190,4191,4567,4568\\",\\"--outbound-ports-to-ignore\\",\\"4567,4568\\"],\\"image\\":\\"cr.l5d.io/linkerd/proxy-init:v1.5.3\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"linkerd-init\\",\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"50Mi\\"},\\"requests\\":{\\"cpu\\":\\"10m\\",\\"memory\\":\\"10Mi\\"}},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":true,\\"capabilities\\":{\\"add\\":[\\"NET_ADMIN\\",\\"NET_RAW\\"]},\\"privileged\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsNonRoot\\":false,\\"runAsUser\\":0},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/run\\",\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"linkerd-proxy-injector\\",\\"volumes\\":[{\\"configMap\\":{\\"name\\":\\"linkerd-config\\"},\\"name\\":\\"config\\"},{\\"configMap\\":{\\"name\\":\\"linkerd-identity-trust-roots\\"},\\"name\\":\\"trust-roots\\"},{\\"name\\":\\"tls\\",\\"secret\\":{\\"secretName\\":\\"linkerd-proxy-injector-k8s-tls\\"}},{\\"emptyDir\\":{},\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"},{\\"emptyDir\\":{\\"medium\\":\\"Memory\\"},\\"name\\":\\"linkerd-identity-end-entity\\"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-proxy-injector",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/config": "173ab73deb21ded56701835d0405fe9b6b152e8003f0a23857a20c3cf5165dbd",
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "config.linkerd.io/opaque-ports": "8443",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
            "linkerd.io/identity-mode": "default",
            "linkerd.io/proxy-version": "stable-2.11.2",
          },
          "labels": Object {
            "linkerd.io/control-plane-component": "proxy-injector",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-proxy-injector",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "_pod_name",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "_pod_ns",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                Object {
                  "name": "_pod_nodeName",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "linkerd-dst-headless.linkerd.svc.cluster.local.:8086",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "linkerd-policy.linkerd.svc.cluster.local.:8090",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                Object {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8443,9995",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}
",
                },
                Object {
                  "name": "_pod_sa",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                Object {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                Object {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": Object {
                    "configMapKeyRef": Object {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "linkerd-identity-headless.linkerd.svc.cluster.local.:8080",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": Object {
                "postStart": Object {
                  "exec": Object {
                    "command": Array [
                      "/usr/lib/linkerd/linkerd-await",
                      "--timeout=2m",
                    ],
                  },
                },
              },
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": Array [
                Object {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                Object {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
              ],
            },
            Object {
              "args": Array [
                "proxy-injector",
                "-log-level=info",
                "-log-format=plain",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9995,
                },
                "initialDelaySeconds": 10,
              },
              "name": "proxy-injector",
              "ports": Array [
                Object {
                  "containerPort": 8443,
                  "name": "proxy-injector",
                },
                Object {
                  "containerPort": 9995,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9995,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/config",
                  "name": "config",
                },
                Object {
                  "mountPath": "/var/run/linkerd/identity/trust-roots",
                  "name": "trust-roots",
                },
                Object {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "4567,4568",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v1.5.3",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": Object {
                "limits": Object {
                  "cpu": "100m",
                  "memory": "50Mi",
                },
                "requests": Object {
                  "cpu": "10m",
                  "memory": "10Mi",
                },
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": true,
                "capabilities": Object {
                  "add": Array [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": false,
                "runAsUser": 0,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-proxy-injector",
          "volumes": Array [
            Object {
              "configMap": Object {
                "name": "linkerd-config",
              },
              "name": "config",
            },
            Object {
              "configMap": Object {
                "name": "linkerd-identity-trust-roots",
              },
              "name": "trust-roots",
            },
            Object {
              "name": "tls",
              "secret": Object {
                "secretName": "linkerd-proxy-injector-k8s-tls",
              },
            },
            Object {
              "emptyDir": Object {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            Object {
              "emptyDir": Object {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"admissionregistration.k8s.io/v1\\",\\"kind\\":\\"ValidatingWebhookConfiguration\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy-validator-webhook-config\\"},\\"webhooks\\":[{\\"admissionReviewVersions\\":[\\"v1\\",\\"v1beta1\\"],\\"clientConfig\\":{\\"caBundle\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQUpxemFWRDJFQjluK3hzS3ZxSHV1MzB3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa2JHbHVhMlZ5WkMxd2IyeHBZM2t0ZG1Gc2FXUmhkRzl5TG14cGJtdGxjbVF1YzNaagpNQjRYRFRJeU1EZ3hNVEEyTkRNeU0xb1hEVEl6TURneE1UQTJORE15TTFvd0x6RXRNQ3NHQTFVRUF4TWtiR2x1CmEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeAp3MTRGRzA0di9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLCm9lTXdnN0IzV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnMKUnJqY1lpeXphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWApnWUFEUGloT1JVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrCkRuck5yUFFTaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJvM0F3YmpBT0JnTlYKSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdMd1lEVlIwUkJDZ3dKb0lrYkdsdWEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwCmJtdGxjbVF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ3VvelhFMWJZMkR1VHZLdzcya1NoQVE0c2YKeiszZGlYdEhSbGpiYjNKZWIyNFRWOUVqZ1RybmhsYlpFaG8rcFA5ME5kQlIvQTRvVHdXQjdVUFFienp5eHQ5aApCcHZmVXQ1N1pyQ3hQdGs5RXJVdXR2T3EvU2NqNkNDd1VBUjZ4b2pybnJWQzNqY3ZIZEp0TXBNNlA3QnlQVUtxCjZ6c1dVcVExT0p6Tjg0czV6TDRoMG9YZDA5T0RXOC8rNWRFUVBOY1JXM2pHallvdHFoUnYzVm5aSVVYejZlTVcKaXVveFlrTDZNc2NyNHhGZkROOXBDVnkyVWIvV0JUSGVQd2ZHOGduaTVlR3ErMjNUWGFCbm1xd2V2aFNZcXQ5eQpOcm9rMzVVZlFHamI2WUFRUVdyQlRxa1diSDZ2WVpYVUYrZGEwL2JrVnFwbDNDZGpJdHhHaWV4bnUxS1oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"service\\":{\\"name\\":\\"linkerd-policy-validator\\",\\"namespace\\":\\"linkerd\\",\\"path\\":\\"/\\"}},\\"failurePolicy\\":\\"Ignore\\",\\"name\\":\\"linkerd-policy-validator.linkerd.io\\",\\"namespaceSelector\\":{\\"matchExpressions\\":[{\\"key\\":\\"config.linkerd.io/admission-webhooks\\",\\"operator\\":\\"NotIn\\",\\"values\\":[\\"disabled\\"]}]},\\"rules\\":[{\\"apiGroups\\":[\\"policy.linkerd.io\\"],\\"apiVersions\\":[\\"v1alpha1\\",\\"v1beta1\\"],\\"operations\\":[\\"CREATE\\",\\"UPDATE\\"],\\"resources\\":[\\"serverauthorizations\\",\\"servers\\"]}],\\"sideEffects\\":\\"None\\"}]}
",
      },
      "name": "linkerd-policy-validator-webhook-config",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/admissionregistration.k8s.io_v1-validatingwebhookconfiguration-default-linkerd-policy-validator-webhook-config.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-linkerd-destination\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-destination\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"linkerd-destination\\",\\"namespace\\":\\"linkerd\\"}]}
",
      },
      "name": "linkerd-linkerd-destination",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-destination.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Certificate",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"Certificate\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-identity-issuer\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"commonName\\":\\"identity.linkerd.cluster.local\\",\\"dnsNames\\":[\\"identity.linkerd.cluster.local\\"],\\"duration\\":\\"48h\\",\\"isCA\\":true,\\"issuerRef\\":{\\"kind\\":\\"ClusterIssuer\\",\\"name\\":\\"linkerd-trust-anchor\\"},\\"privateKey\\":{\\"algorithm\\":\\"ECDSA\\"},\\"renewBefore\\":\\"25h\\",\\"secretName\\":\\"linkerd-identity-issuer\\",\\"usages\\":[\\"cert sign\\",\\"crl sign\\",\\"server auth\\",\\"client auth\\"]}}
",
      },
      "name": "linkerd-identity-issuer",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/cert-manager.io_v1-certificate-linkerd-linkerd-identity-issuer.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy-validator\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"policy-https\\",\\"port\\":443,\\"targetPort\\":\\"policy-https\\"}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-policy-validator",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-policy-validator.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-linkerd-proxy-injector\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-proxy-injector\\"},\\"subjects\\":[{\\"apiGroup\\":\\"\\",\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"linkerd-proxy-injector\\",\\"namespace\\":\\"linkerd\\"}]}
",
      },
      "name": "linkerd-linkerd-proxy-injector",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-linkerd-identity\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-identity\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"linkerd-identity\\",\\"namespace\\":\\"linkerd\\"}]}
",
      },
      "name": "linkerd-linkerd-identity",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "MutatingWebhookConfiguration",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"admissionregistration.k8s.io/v1\\",\\"kind\\":\\"MutatingWebhookConfiguration\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector-webhook-config\\"},\\"webhooks\\":[{\\"admissionReviewVersions\\":[\\"v1\\",\\"v1beta1\\"],\\"clientConfig\\":{\\"caBundle\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUxsUXVZVlBqeVo1N0dhcWgzWXFJM3d3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBNE1URXdOalF6TWpOYUZ3MHlNekE0TVRFd05qUXpNak5hTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRRGduL3ZacVo4NGdEVWhuRG9OdEQxYU1zZXBReFFhTnRDcWdWR3lIOFZSZm9ySwpXMTdRcko0M2lvd3JvVXUzaWpQY3JPZnlQdFZxOWZSMXNlSCtBenY1WlFpczRQYUlNUFZ1b1AxV3ArK3pPTVpyCmJydE01TzNIdUNCcmVXYTRaU2ZoeXRkNDhxMzhEdTVnQ1I4WFByKzUwQU5BN2FVaUYxaG9uK3MycUVMbHY3b0UKL01FblR5eUhIUWhzNWFkajVMdWR3bXpBTXI1cGo4ZGlXc2d4WThLc0owYU8zVGJIUmJXTkRZTU9MZFNzZ3pFKwoxRmsxdTdMSWljRG9GQm1oRENZZVZzTURLYTV4Znk4TVUrU1FxVEpKVHRiUXNBTzdiQU5KTW9mMnJEZUhTeTU3CnhSRFBTczZNTjU2MXNadVdHaHdJQmpzZHZCMU5UcXp3ZFo4ekhjNWpBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ0NHNaNlNnclRSK01xbExON3F3bW9kMXplTkF1dDh6Q3IKYkc3NEhpdktIZ1Zhb3JwOUp1SlJKU0VEUlVQLzdocmNMd0pjRUlMTllGZHhmalpKYllBMUFnSmZkdUt2WDM0Ygo1SC9hc05QRkVzSTdIOWw0cmY3TDVHbjJ6QWlBR1k4WFpKcXpxclE0eGIrdWE0V3p1VGQ2VHRoSm9pMU96UTBNCnh3UWRFbHVBWTNYVzJZV2VrYzJub0FiRlFvNCtQK3VVcHg1NE8wY0NCa0xCM2NuSmtzZ2RRejViektXVzFITUkKQmRQekN3c0xTK1dPK2doTWRWSkVuV3hWY1krNTZpRjNCM2FQWG9WL01RNU56WEs5c2FBNVZhYWJKbjVYd2FqRAplR1l4QlJvZ0R2ZTNnaWwwbERDbnVxMHZZZFp2aktDd2dwRUxhaVBWS1dnZmxYcVR1bFVWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"service\\":{\\"name\\":\\"linkerd-proxy-injector\\",\\"namespace\\":\\"linkerd\\",\\"path\\":\\"/\\"}},\\"failurePolicy\\":\\"Ignore\\",\\"name\\":\\"linkerd-proxy-injector.linkerd.io\\",\\"namespaceSelector\\":{\\"matchExpressions\\":[{\\"key\\":\\"config.linkerd.io/admission-webhooks\\",\\"operator\\":\\"NotIn\\",\\"values\\":[\\"disabled\\"]}]},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"apiVersions\\":[\\"v1\\"],\\"operations\\":[\\"CREATE\\"],\\"resources\\":[\\"pods\\",\\"services\\"]}],\\"sideEffects\\":\\"None\\"}]}
",
      },
      "name": "linkerd-proxy-injector-webhook-config",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/admissionregistration.k8s.io_v1-mutatingwebhookconfiguration-default-linkerd-proxy-injector-webhook-config.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-linkerd-identity\\"},\\"rules\\":[{\\"apiGroups\\":[\\"authentication.k8s.io\\"],\\"resources\\":[\\"tokenreviews\\"],\\"verbs\\":[\\"create\\"]},{\\"apiGroups\\":[\\"apps\\"],\\"resources\\":[\\"deployments\\"],\\"verbs\\":[\\"get\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "linkerd-linkerd-identity",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-destination\\",\\"namespace\\":\\"linkerd\\"}}
",
      },
      "name": "linkerd-destination",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-destination.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-heartbeat\\",\\"namespace\\":\\"linkerd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"linkerd-config\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"get\\"]}]}
",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-role-linkerd-linkerd-heartbeat.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-sp-validator\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"sp-validator\\",\\"port\\":443,\\"targetPort\\":\\"sp-validator\\"}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-sp-validator",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-sp-validator.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"admissionregistration.k8s.io/v1\\",\\"kind\\":\\"ValidatingWebhookConfiguration\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-sp-validator-webhook-config\\"},\\"webhooks\\":[{\\"admissionReviewVersions\\":[\\"v1\\",\\"v1beta1\\"],\\"clientConfig\\":{\\"caBundle\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUkrYUVCL0EzcmRkK0VDak5VYzhsYlF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3T0RFeE1EWTBNekl6V2hjTk1qTXdPREV4TURZME16SXpXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxwdU53cFZ2dEcvUkVoUXpCM1JiK1BvWU9iVTVOck5iSUJKTU4vNjlWY3FucnYweWQ0SQpjUllyWVIwMjJ5NE9UODk5THVtOHpiVGZDOGVPTXlnaFZ0akFwb0xzcWdtMkkwV3FIcVNtQ0NuR3l6cnJLbzNrCnNCODdsTmJDV1k2ekcvV0J4NFRpbFdsTzBiSDB5elM3NmRrR0d0eW1YNlFwLzdYV2kvMEUzblRhaWxYVHZ0M1kKcFpNTDhZREFQdjJtR1FHU0hhUkQxNG9LRTJDa2tEVm5mU0g4UU5Vd0sydys5cEY1aW82Q0oyTXRIeWhIZmF5NwpaUnBXK0hxLzYxVFhVTTVYR0hPNlpoZ0dLeWEzbnlseXhLa3lFR1QxUFZkMWtXUEhyQ0lXWjZoelArb3dZNzJXCm1NRklwbXJTNExDa0RTSVRBdW03RnpoMGZ0c2dJYmErUk9jQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBNVgvRnMwbXF0R1c4SjVhMVViTVFrTHpuazIzbzZCWkxhMnlydjBxbTYKSCtrdW5UWkVzMnAzUGR0SDJYeXVhVytrRDFmbmRyR2haRHErRkt2Qnc4ZDlmUERLMXBiVHU1RnprS1lrUU9CbwptajJtZVdJUjdMUlJ1UWFIbnJTd1BUQzNlbWtWRVpQMjBiaUNSclhpV3RLdWtaeEZyTmdrbXZwY0d1VWZPWlBUCkNmU0s1NzM4VXpUSVIzWWxHOXExdnVBbVcyQXNrYXNIbTE3M0ZLN2x2R3NwaE8wVTdRY3JFeEJiVmd0SUZ0Qk0KM0tJYktBZmg5VUs2aW1DNGpsazRlVFBicTZSTHlmNFJoK3Rwb3pWeTlmK295cDZ5eEVlUWwvMk5jNU1mQmxyOQp3MWtDUTczN2k0R1QzMXZmRDJST25JOU9ZZFMrV1VDSWs0dnlVL1l6eVdBawotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t\\",\\"service\\":{\\"name\\":\\"linkerd-sp-validator\\",\\"namespace\\":\\"linkerd\\",\\"path\\":\\"/\\"}},\\"failurePolicy\\":\\"Ignore\\",\\"name\\":\\"linkerd-sp-validator.linkerd.io\\",\\"namespaceSelector\\":{\\"matchExpressions\\":[{\\"key\\":\\"config.linkerd.io/admission-webhooks\\",\\"operator\\":\\"NotIn\\",\\"values\\":[\\"disabled\\"]}]},\\"rules\\":[{\\"apiGroups\\":[\\"linkerd.io\\"],\\"apiVersions\\":[\\"v1alpha1\\",\\"v1alpha2\\"],\\"operations\\":[\\"CREATE\\",\\"UPDATE\\"],\\"resources\\":[\\"serviceprofiles\\"]}],\\"sideEffects\\":\\"None\\"}]}
",
      },
      "name": "linkerd-sp-validator-webhook-config",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/admissionregistration.k8s.io_v1-validatingwebhookconfiguration-default-linkerd-sp-validator-webhook-config.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-heartbeat\\",\\"namespace\\":\\"linkerd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"linkerd-heartbeat\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"linkerd-heartbeat\\",\\"namespace\\":\\"linkerd\\"}]}
",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-linkerd-linkerd-heartbeat.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"identity\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-identity\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-identity\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"config.linkerd.io/default-inbound-policy\\":\\"all-unauthenticated\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\",\\"linkerd.io/identity-mode\\":\\"default\\",\\"linkerd.io/proxy-version\\":\\"stable-2.11.2\\"},\\"labels\\":{\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-identity\\",\\"linkerd.io/workload-ns\\":\\"linkerd\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"identity\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-controller-namespace=linkerd\\",\\"-identity-trust-domain=cluster.local\\",\\"-identity-issuance-lifetime=24h0m0s\\",\\"-identity-clock-skew-allowance=20s\\",\\"-identity-scheme=kubernetes.io/tls\\",\\"-enable-pprof=false\\"],\\"env\\":[{\\"name\\":\\"LINKERD_DISABLED\\",\\"value\\":\\"linkerd-await cannot block the identity controller\\"}],\\"image\\":\\"cr.l5d.io/linkerd/controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9990},\\"initialDelaySeconds\\":10},\\"name\\":\\"identity\\",\\"ports\\":[{\\"containerPort\\":8080,\\"name\\":\\"grpc\\"},{\\"containerPort\\":9990,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9990}},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/identity/issuer\\",\\"name\\":\\"identity-issuer\\"},{\\"mountPath\\":\\"/var/run/linkerd/identity/trust-roots/\\",\\"name\\":\\"trust-roots\\"}]},{\\"env\\":[{\\"name\\":\\"_pod_name\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"_pod_ns\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}},{\\"name\\":\\"_pod_nodeName\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.nodeName\\"}}},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS\\",\\"value\\":\\"8080\\"},{\\"name\\":\\"LINKERD2_PROXY_LOG\\",\\"value\\":\\"warn,linkerd=info\\"},{\\"name\\":\\"LINKERD2_PROXY_LOG_FORMAT\\",\\"value\\":\\"plain\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_ADDR\\",\\"value\\":\\"linkerd-dst-headless.linkerd.svc.cluster.local.:8086\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_ADDR\\",\\"value\\":\\"linkerd-policy.linkerd.svc.cluster.local.:8090\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_WORKLOAD\\",\\"value\\":\\"$(_pod_ns):$(_pod_name)\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY\\",\\"value\\":\\"all-unauthenticated\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"100ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"1000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_CONTROL_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4190\\"},{\\"name\\":\\"LINKERD2_PROXY_ADMIN_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4191\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR\\",\\"value\\":\\"127.0.0.1:4140\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4143\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_IPS\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"status.podIPs\\"}}},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS\\",\\"value\\":\\"8080,9990\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES\\",\\"value\\":\\"svc.cluster.local.\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION\\",\\"value\\":\\"25,587,3306,4444,5432,6379,9300,11211\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_CONTEXT\\",\\"value\\":\\"{\\\\\\"ns\\\\\\":\\\\\\"$(_pod_ns)\\\\\\", \\\\\\"nodeName\\\\\\":\\\\\\"$(_pod_nodeName)\\\\\\"}\\\\n\\"},{\\"name\\":\\"_pod_sa\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.serviceAccountName\\"}}},{\\"name\\":\\"_l5d_ns\\",\\"value\\":\\"linkerd\\"},{\\"name\\":\\"_l5d_trustdomain\\",\\"value\\":\\"cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_DIR\\",\\"value\\":\\"/var/run/linkerd/identity/end-entity\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS\\",\\"valueFrom\\":{\\"configMapKeyRef\\":{\\"key\\":\\"ca-bundle.crt\\",\\"name\\":\\"linkerd-identity-trust-roots\\"}}},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TOKEN_FILE\\",\\"value\\":\\"/var/run/secrets/kubernetes.io/serviceaccount/token\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_ADDR\\",\\"value\\":\\"localhost.:8080\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_LOCAL_NAME\\",\\"value\\":\\"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_NAME\\",\\"value\\":\\"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"}],\\"image\\":\\"cr.l5d.io/linkerd/proxy:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/live\\",\\"port\\":4191},\\"initialDelaySeconds\\":10},\\"name\\":\\"linkerd-proxy\\",\\"ports\\":[{\\"containerPort\\":4143,\\"name\\":\\"linkerd-proxy\\"},{\\"containerPort\\":4191,\\"name\\":\\"linkerd-admin\\"}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":4191},\\"initialDelaySeconds\\":2},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsUser\\":2102},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/identity/end-entity\\",\\"name\\":\\"linkerd-identity-end-entity\\"}]}],\\"initContainers\\":[{\\"args\\":[\\"--incoming-proxy-port\\",\\"4143\\",\\"--outgoing-proxy-port\\",\\"4140\\",\\"--proxy-uid\\",\\"2102\\",\\"--inbound-ports-to-ignore\\",\\"4190,4191,4567,4568\\",\\"--outbound-ports-to-ignore\\",\\"443\\"],\\"image\\":\\"cr.l5d.io/linkerd/proxy-init:v1.5.3\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"linkerd-init\\",\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"50Mi\\"},\\"requests\\":{\\"cpu\\":\\"10m\\",\\"memory\\":\\"10Mi\\"}},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":true,\\"capabilities\\":{\\"add\\":[\\"NET_ADMIN\\",\\"NET_RAW\\"]},\\"privileged\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsNonRoot\\":false,\\"runAsUser\\":0},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/run\\",\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"linkerd-identity\\",\\"volumes\\":[{\\"name\\":\\"identity-issuer\\",\\"secret\\":{\\"secretName\\":\\"linkerd-identity-issuer\\"}},{\\"configMap\\":{\\"name\\":\\"linkerd-identity-trust-roots\\"},\\"name\\":\\"trust-roots\\"},{\\"emptyDir\\":{},\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"},{\\"emptyDir\\":{\\"medium\\":\\"Memory\\"},\\"name\\":\\"linkerd-identity-end-entity\\"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-identity",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
            "linkerd.io/identity-mode": "default",
            "linkerd.io/proxy-version": "stable-2.11.2",
          },
          "labels": Object {
            "linkerd.io/control-plane-component": "identity",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-identity",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "identity",
                "-log-level=info",
                "-log-format=plain",
                "-controller-namespace=linkerd",
                "-identity-trust-domain=cluster.local",
                "-identity-issuance-lifetime=24h0m0s",
                "-identity-clock-skew-allowance=20s",
                "-identity-scheme=kubernetes.io/tls",
                "-enable-pprof=false",
              ],
              "env": Array [
                Object {
                  "name": "LINKERD_DISABLED",
                  "value": "linkerd-await cannot block the identity controller",
                },
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9990,
                },
                "initialDelaySeconds": 10,
              },
              "name": "identity",
              "ports": Array [
                Object {
                  "containerPort": 8080,
                  "name": "grpc",
                },
                Object {
                  "containerPort": 9990,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9990,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/identity/issuer",
                  "name": "identity-issuer",
                },
                Object {
                  "mountPath": "/var/run/linkerd/identity/trust-roots/",
                  "name": "trust-roots",
                },
              ],
            },
            Object {
              "env": Array [
                Object {
                  "name": "_pod_name",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "_pod_ns",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                Object {
                  "name": "_pod_nodeName",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS",
                  "value": "8080",
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "linkerd-dst-headless.linkerd.svc.cluster.local.:8086",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "linkerd-policy.linkerd.svc.cluster.local.:8090",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                Object {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8080,9990",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}
",
                },
                Object {
                  "name": "_pod_sa",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                Object {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                Object {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": Object {
                    "configMapKeyRef": Object {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "localhost.:8080",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": Array [
                Object {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                Object {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "443",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v1.5.3",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": Object {
                "limits": Object {
                  "cpu": "100m",
                  "memory": "50Mi",
                },
                "requests": Object {
                  "cpu": "10m",
                  "memory": "10Mi",
                },
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": true,
                "capabilities": Object {
                  "add": Array [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": false,
                "runAsUser": 0,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-identity",
          "volumes": Array [
            Object {
              "name": "identity-issuer",
              "secret": Object {
                "secretName": "linkerd-identity-issuer",
              },
            },
            Object {
              "configMap": Object {
                "name": "linkerd-identity-trust-roots",
              },
              "name": "trust-roots",
            },
            Object {
              "emptyDir": Object {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            Object {
              "emptyDir": Object {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUkrYUVCL0EzcmRkK0VDak5VYzhsYlF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3T0RFeE1EWTBNekl6V2hjTk1qTXdPREV4TURZME16SXpXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxwdU53cFZ2dEcvUkVoUXpCM1JiK1BvWU9iVTVOck5iSUJKTU4vNjlWY3FucnYweWQ0SQpjUllyWVIwMjJ5NE9UODk5THVtOHpiVGZDOGVPTXlnaFZ0akFwb0xzcWdtMkkwV3FIcVNtQ0NuR3l6cnJLbzNrCnNCODdsTmJDV1k2ekcvV0J4NFRpbFdsTzBiSDB5elM3NmRrR0d0eW1YNlFwLzdYV2kvMEUzblRhaWxYVHZ0M1kKcFpNTDhZREFQdjJtR1FHU0hhUkQxNG9LRTJDa2tEVm5mU0g4UU5Vd0sydys5cEY1aW82Q0oyTXRIeWhIZmF5NwpaUnBXK0hxLzYxVFhVTTVYR0hPNlpoZ0dLeWEzbnlseXhLa3lFR1QxUFZkMWtXUEhyQ0lXWjZoelArb3dZNzJXCm1NRklwbXJTNExDa0RTSVRBdW03RnpoMGZ0c2dJYmErUk9jQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBNVgvRnMwbXF0R1c4SjVhMVViTVFrTHpuazIzbzZCWkxhMnlydjBxbTYKSCtrdW5UWkVzMnAzUGR0SDJYeXVhVytrRDFmbmRyR2haRHErRkt2Qnc4ZDlmUERLMXBiVHU1RnprS1lrUU9CbwptajJtZVdJUjdMUlJ1UWFIbnJTd1BUQzNlbWtWRVpQMjBiaUNSclhpV3RLdWtaeEZyTmdrbXZwY0d1VWZPWlBUCkNmU0s1NzM4VXpUSVIzWWxHOXExdnVBbVcyQXNrYXNIbTE3M0ZLN2x2R3NwaE8wVTdRY3JFeEJiVmd0SUZ0Qk0KM0tJYktBZmg5VUs2aW1DNGpsazRlVFBicTZSTHlmNFJoK3Rwb3pWeTlmK295cDZ5eEVlUWwvMk5jNU1mQmxyOQp3MWtDUTczN2k0R1QzMXZmRDJST25JOU9ZZFMrV1VDSWs0dnlVL1l6eVdBawotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdW00M0NsVyswYjlFU0ZETUhkRnY0K2hnNXRUazJzMXNnRWt3My9yMVZ5cWV1L1RKCjNnaHhGaXRoSFRiYkxnNVB6MzB1NmJ6TnROOEx4NDR6S0NGVzJNQ21ndXlxQ2JZalJhb2VwS1lJS2NiTE91c3EKamVTd0h6dVUxc0paanJNYjlZSEhoT0tWYVU3UnNmVExOTHZwMlFZYTNLWmZwQ24vdGRhTC9RVGVkTnFLVmRPKwozZGlsa3d2eGdNQSsvYVlaQVpJZHBFUFhpZ29UWUtTUU5XZDlJZnhBMVRBcmJENzJrWG1Lam9Jbll5MGZLRWQ5CnJMdGxHbGI0ZXIvclZOZFF6bGNZYzdwbUdBWXJKcmVmS1hMRXFUSVFaUFU5VjNXUlk4ZXNJaFpucUhNLzZqQmoKdlphWXdVaW1hdExnc0tRTkloTUM2YnNYT0hSKzJ5QWh0cjVFNXdJREFRQUJBb0lCQUc4a0VaQUp1aTZVMWdJKwptTkVWOEp4d0JvVFdXbkRPa21hUU82RHJuYU9QZHY0YVd0WVJOa20vSnJBaDZkeTFENE5rMzdqY284MjJRdkYrCnBxUy82MlJneFdPNzcwckcySlJKYk9jL1RCS0x2dENyTGIxVm5tR2dSWVVhYkFXVVpaQ2hBKzhHbllnZ1F3YlMKSnVxVE5ELzdVYnhGT3pORkRucTdJczErUDVodFFzNlA2U1NFTEpMNG1hK3l2NGdETFIyZm5QbUZIZCtia0xlSwozb3Y5aE1nVjBRRHZCbVVVaFlnZS9icHJCc2ZMd2QxaXRlcHQxNXRGT1RpVWs2NnI1WlFkZlhDY1BmTGd3bExCCkc0MlZLSFovNkxEaTR2Q2U4cXpoVW9KYzExaFlnQnZWYks5WVk1MEJTL21tNllvZmROWjlvMmFKNDk5cjF6R1cKR1FHKzBTRUNnWUVBeGFvWlArZXU5OU1FZmVPU0FVRVV4Zy9udlJiOVhaSnBMazQ0N3RQd2lRbkRSVTUxZXZzVAo0dHhjeWxhYStBNFJNdlVPcURqVTNnUEdKN0lmckVjY3JJMXJZbkZFb2xXSVBiR0xCMWRTOWMzejhBYTJHdkVLCitLdFNTWVYvQ1B4MFlNUHRybXMydmdwQVluRTJGZWU0YjFvVlBiNDZNQTRRcWtnNWtkdzcrKzhDZ1lFQThYTmYKcC8xU2k0b1ZJT3ZseWxoSk52SjVKdXhTcmsxN0gvOFgvdWM1UngyS0J5SFNzRFNiQTEvMFk3Q29aSHJMYkQwTAo5OHJxekxGa1g5WHhENml1ZmU5MzE1OVo4L0Exb2w3OTMzSk1Vd2hTQXZTK1d4Uy9yVUczamdRMjJ4RWN3cThUCmwvTDZlR0dpM2tBU0R1SVRLUFFMemxlUTdXVVRHZnJndWZrWXJva0NnWUVBcHlSTGo0OGdrNnlhMnJ5cEJHaDgKNFhJbm1ld3J1SWtLYWI1NVEvSnhMZC9VZi9GMVE5VzFuaHFLV0FwZHBpMTIrNmplaVA3dGVRS2w5NEVXYVQ0RQprQ0JSVW4vRzhxSHl2NEEydUxGdGxDNWYvSElnWUsyOGdrT1VKRmsrNzJGU0kxVHAwWmdWUlNNMENFb0Uyd2NECkhSMkdZcHhOWmI4dTlsNTJWOUZyNDM4Q2dZRUF5cE02K1Uydm1NVmtUcmU4bHRVVnNGVWxVb1BLSnRWNDdQSncKWm53RzhXU1dMcit3N2dkazJ5TUJmelp6UWNKSXMrcFFCVGtwWUUyZzRrczBNaWdiSml2cEIyNTU0UkZ6WG1TRwphWmVTODhNeVU2cVZud004Z2hkMThtQVV5aDJFWE03WkNJNWltT2VKNXlBb1JuWmxEdUlhbWFlY1A2Q2lzeFJxCndYMTl1TWtDZ1lBaE1Dc2t3aWplbUtGcUd3SnBkeUJ5bWRsemhZcEhaYlN5cm96bEZ3bUpFeHhWVlViVTRSaUEKY1lQOUx4bFZFQ0dETnBCK3NXdnFBdmtEKzRyelRpMDk5OHhWYW93QkNzMVZ1VU9ZMUs4T0FWU3hBVys0dWh0dQpZUWtkN1dnUHB1RS9ybkhIdmNnV29nRnpSQVB0ZVFHRzNpM1dNODdPOVFsSk5PcXVGbDFWSGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUkrYUVCL0EzcmRkK0VDak5VYzhsYlF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3T0RFeE1EWTBNekl6V2hjTk1qTXdPREV4TURZME16SXpXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxwdU53cFZ2dEcvUkVoUXpCM1JiK1BvWU9iVTVOck5iSUJKTU4vNjlWY3FucnYweWQ0SQpjUllyWVIwMjJ5NE9UODk5THVtOHpiVGZDOGVPTXlnaFZ0akFwb0xzcWdtMkkwV3FIcVNtQ0NuR3l6cnJLbzNrCnNCODdsTmJDV1k2ekcvV0J4NFRpbFdsTzBiSDB5elM3NmRrR0d0eW1YNlFwLzdYV2kvMEUzblRhaWxYVHZ0M1kKcFpNTDhZREFQdjJtR1FHU0hhUkQxNG9LRTJDa2tEVm5mU0g4UU5Vd0sydys5cEY1aW82Q0oyTXRIeWhIZmF5NwpaUnBXK0hxLzYxVFhVTTVYR0hPNlpoZ0dLeWEzbnlseXhLa3lFR1QxUFZkMWtXUEhyQ0lXWjZoelArb3dZNzJXCm1NRklwbXJTNExDa0RTSVRBdW03RnpoMGZ0c2dJYmErUk9jQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBNVgvRnMwbXF0R1c4SjVhMVViTVFrTHpuazIzbzZCWkxhMnlydjBxbTYKSCtrdW5UWkVzMnAzUGR0SDJYeXVhVytrRDFmbmRyR2haRHErRkt2Qnc4ZDlmUERLMXBiVHU1RnprS1lrUU9CbwptajJtZVdJUjdMUlJ1UWFIbnJTd1BUQzNlbWtWRVpQMjBiaUNSclhpV3RLdWtaeEZyTmdrbXZwY0d1VWZPWlBUCkNmU0s1NzM4VXpUSVIzWWxHOXExdnVBbVcyQXNrYXNIbTE3M0ZLN2x2R3NwaE8wVTdRY3JFeEJiVmd0SUZ0Qk0KM0tJYktBZmg5VUs2aW1DNGpsazRlVFBicTZSTHlmNFJoK3Rwb3pWeTlmK295cDZ5eEVlUWwvMk5jNU1mQmxyOQp3MWtDUTczN2k0R1QzMXZmRDJST25JOU9ZZFMrV1VDSWs0dnlVL1l6eVdBawotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdW00M0NsVyswYjlFU0ZETUhkRnY0K2hnNXRUazJzMXNnRWt3My9yMVZ5cWV1L1RKCjNnaHhGaXRoSFRiYkxnNVB6MzB1NmJ6TnROOEx4NDR6S0NGVzJNQ21ndXlxQ2JZalJhb2VwS1lJS2NiTE91c3EKamVTd0h6dVUxc0paanJNYjlZSEhoT0tWYVU3UnNmVExOTHZwMlFZYTNLWmZwQ24vdGRhTC9RVGVkTnFLVmRPKwozZGlsa3d2eGdNQSsvYVlaQVpJZHBFUFhpZ29UWUtTUU5XZDlJZnhBMVRBcmJENzJrWG1Lam9Jbll5MGZLRWQ5CnJMdGxHbGI0ZXIvclZOZFF6bGNZYzdwbUdBWXJKcmVmS1hMRXFUSVFaUFU5VjNXUlk4ZXNJaFpucUhNLzZqQmoKdlphWXdVaW1hdExnc0tRTkloTUM2YnNYT0hSKzJ5QWh0cjVFNXdJREFRQUJBb0lCQUc4a0VaQUp1aTZVMWdJKwptTkVWOEp4d0JvVFdXbkRPa21hUU82RHJuYU9QZHY0YVd0WVJOa20vSnJBaDZkeTFENE5rMzdqY284MjJRdkYrCnBxUy82MlJneFdPNzcwckcySlJKYk9jL1RCS0x2dENyTGIxVm5tR2dSWVVhYkFXVVpaQ2hBKzhHbllnZ1F3YlMKSnVxVE5ELzdVYnhGT3pORkRucTdJczErUDVodFFzNlA2U1NFTEpMNG1hK3l2NGdETFIyZm5QbUZIZCtia0xlSwozb3Y5aE1nVjBRRHZCbVVVaFlnZS9icHJCc2ZMd2QxaXRlcHQxNXRGT1RpVWs2NnI1WlFkZlhDY1BmTGd3bExCCkc0MlZLSFovNkxEaTR2Q2U4cXpoVW9KYzExaFlnQnZWYks5WVk1MEJTL21tNllvZmROWjlvMmFKNDk5cjF6R1cKR1FHKzBTRUNnWUVBeGFvWlArZXU5OU1FZmVPU0FVRVV4Zy9udlJiOVhaSnBMazQ0N3RQd2lRbkRSVTUxZXZzVAo0dHhjeWxhYStBNFJNdlVPcURqVTNnUEdKN0lmckVjY3JJMXJZbkZFb2xXSVBiR0xCMWRTOWMzejhBYTJHdkVLCitLdFNTWVYvQ1B4MFlNUHRybXMydmdwQVluRTJGZWU0YjFvVlBiNDZNQTRRcWtnNWtkdzcrKzhDZ1lFQThYTmYKcC8xU2k0b1ZJT3ZseWxoSk52SjVKdXhTcmsxN0gvOFgvdWM1UngyS0J5SFNzRFNiQTEvMFk3Q29aSHJMYkQwTAo5OHJxekxGa1g5WHhENml1ZmU5MzE1OVo4L0Exb2w3OTMzSk1Vd2hTQXZTK1d4Uy9yVUczamdRMjJ4RWN3cThUCmwvTDZlR0dpM2tBU0R1SVRLUFFMemxlUTdXVVRHZnJndWZrWXJva0NnWUVBcHlSTGo0OGdrNnlhMnJ5cEJHaDgKNFhJbm1ld3J1SWtLYWI1NVEvSnhMZC9VZi9GMVE5VzFuaHFLV0FwZHBpMTIrNmplaVA3dGVRS2w5NEVXYVQ0RQprQ0JSVW4vRzhxSHl2NEEydUxGdGxDNWYvSElnWUsyOGdrT1VKRmsrNzJGU0kxVHAwWmdWUlNNMENFb0Uyd2NECkhSMkdZcHhOWmI4dTlsNTJWOUZyNDM4Q2dZRUF5cE02K1Uydm1NVmtUcmU4bHRVVnNGVWxVb1BLSnRWNDdQSncKWm53RzhXU1dMcit3N2dkazJ5TUJmelp6UWNKSXMrcFFCVGtwWUUyZzRrczBNaWdiSml2cEIyNTU0UkZ6WG1TRwphWmVTODhNeVU2cVZud004Z2hkMThtQVV5aDJFWE03WkNJNWltT2VKNXlBb1JuWmxEdUlhbWFlY1A2Q2lzeFJxCndYMTl1TWtDZ1lBaE1Dc2t3aWplbUtGcUd3SnBkeUJ5bWRsemhZcEhaYlN5cm96bEZ3bUpFeHhWVlViVTRSaUEKY1lQOUx4bFZFQ0dETnBCK3NXdnFBdmtEKzRyelRpMDk5OHhWYW93QkNzMVZ1VU9ZMUs4T0FWU3hBVys0dWh0dQpZUWtkN1dnUHB1RS9ybkhIdmNnV29nRnpSQVB0ZVFHRzNpM1dNODdPOVFsSk5PcXVGbDFWSGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-sp-validator-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-sp-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-sp-validator-k8s-tls.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "type": "kubernetes.io/tls",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"heartbeat\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-heartbeat\\",\\"namespace\\":\\"linkerd\\"}}
",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-heartbeat.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "config.linkerd.io/opaque-ports": "443",
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"config.linkerd.io/opaque-ports\\":\\"443\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"proxy-injector\\",\\"port\\":443,\\"targetPort\\":\\"proxy-injector\\"}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-proxy-injector",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-identity-headless\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"grpc\\",\\"port\\":8080,\\"targetPort\\":8080}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"identity\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-identity-headless",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-identity-headless.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-linkerd-destination\\"},\\"rules\\":[{\\"apiGroups\\":[\\"apps\\"],\\"resources\\":[\\"replicasets\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"batch\\"],\\"resources\\":[\\"jobs\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"pods\\",\\"endpoints\\",\\"services\\",\\"nodes\\",\\"namespaces\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"linkerd.io\\"],\\"resources\\":[\\"serviceprofiles\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"split.smi-spec.io\\"],\\"resources\\":[\\"trafficsplits\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]}]}
",
      },
      "name": "linkerd-linkerd-destination",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-destination.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQUpxemFWRDJFQjluK3hzS3ZxSHV1MzB3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa2JHbHVhMlZ5WkMxd2IyeHBZM2t0ZG1Gc2FXUmhkRzl5TG14cGJtdGxjbVF1YzNaagpNQjRYRFRJeU1EZ3hNVEEyTkRNeU0xb1hEVEl6TURneE1UQTJORE15TTFvd0x6RXRNQ3NHQTFVRUF4TWtiR2x1CmEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeAp3MTRGRzA0di9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLCm9lTXdnN0IzV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnMKUnJqY1lpeXphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWApnWUFEUGloT1JVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrCkRuck5yUFFTaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJvM0F3YmpBT0JnTlYKSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdMd1lEVlIwUkJDZ3dKb0lrYkdsdWEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwCmJtdGxjbVF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ3VvelhFMWJZMkR1VHZLdzcya1NoQVE0c2YKeiszZGlYdEhSbGpiYjNKZWIyNFRWOUVqZ1RybmhsYlpFaG8rcFA5ME5kQlIvQTRvVHdXQjdVUFFienp5eHQ5aApCcHZmVXQ1N1pyQ3hQdGs5RXJVdXR2T3EvU2NqNkNDd1VBUjZ4b2pybnJWQzNqY3ZIZEp0TXBNNlA3QnlQVUtxCjZ6c1dVcVExT0p6Tjg0czV6TDRoMG9YZDA5T0RXOC8rNWRFUVBOY1JXM2pHallvdHFoUnYzVm5aSVVYejZlTVcKaXVveFlrTDZNc2NyNHhGZkROOXBDVnkyVWIvV0JUSGVQd2ZHOGduaTVlR3ErMjNUWGFCbm1xd2V2aFNZcXQ5eQpOcm9rMzVVZlFHamI2WUFRUVdyQlRxa1diSDZ2WVpYVUYrZGEwL2JrVnFwbDNDZGpJdHhHaWV4bnUxS1oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeHcxNEZHMDR2Ci9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLb2VNd2c3QjMKV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnNScmpjWWl5egphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWGdZQURQaWhPClJVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrRG5yTnJQUVMKaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJBb0lCQVFDcEorTEtuVmZHRGJWNAozbCtTWjE1aGRYQ3hTSUNEaUFsUGRwN3F2SHg3OGI4NkRiWW5qeTR2eUYwY09tY3lOK0xxM2NjU29FT0pTMXc2CndNeDJYempnbUdOWDVYalZ6RkhtNDNGZmpSZ2RkVWUzRDV3cU9wMEpMVit2cXBrZDl4V1AzdlRFUlhxQVU2Z2oKNkdteVIrQ2FlenZ1T09jN3M2WW9xaCs0cmZWTDNKU1F3ajZxQTZTbnAybERydmhsSXZ3ZFRNaEs2dnh5Y2xLego1a1o1ZkxUeWtZamxydW1kNEhkWU1BdDE5S2doRXBkYkEwRVlsT2hGRisxcDRjOWRtT3FLTW5oVmhHdVR0L010ClZxT09UN0pPU2tZRUpsWlUrZXBYSjVpeTV0bDA5UFpYOGRGSUZrVjNLSlN2c3NxdThnM0d6R2hUajZrVzFYU2wKT2tuMG9LZUpBb0dCQVAyNXUxQ3l3anJpc1Z5bThNMlRiNGxEejZ6YlVZVmJUc1VNL2lCRGJyYTFoYVlGM0ZqZQpzdEVuWXFHK3JtQ3B0dnhMT3Z6VUhKVyttSzJUY2o5VTNDeG1uYmpyWFd6QkNZWVBCbHExQWNvOW9NYy9UclE5ClhUS3BLSDNOcEdJZTBSYXFscDhrLzlnUm5nbEIyZzVSQ0U5LzVtQm5Tc2Z2STZzaDNCUlpWQkp2QW9HQkFOQXQKUm12blpTUHpLby9lcjNlajVWZGZCN1ZzWEhHRmVCWlVRRkwvL3Bia2gxY2FGQVBpUlJLUC9zaVlYcXBXVkNHZApBbThsSmNnRHpvcGw0NFZwQ0xUVDVvWktxUExDK2IzSDVkQVpRV1VXdm5oOEIxejNYemNDZlpybkpJT0FoZEp1CkE4dC9XQ0p6Vms5U1BHSEJyVHgvbnZyRUR0MGhSbGtPKzBTTWphRVBBb0dBSmpVcTVQc1dUcUhHamFwQ0J1TVYKMzdqTGREOU9wbU5hbUVmZG1PUXVydXJrNWx4cGt5UnVEeHI4T2xrcGp6cmZhRnkzMUV6b3hRLy9rOXZwVDJvcgpBYkN1UGFPTDNRMndyblJpdzVRUVlmRW4zZmxGazlUTnpRdzJJY091NW11M2xzODNnVjJqL1ZpaDBNa08yaXNQCnNsRVRVeDhhM3NLL1AwMEpCRE56ZXBjQ2dZRUFoTS9OdEx1Y3NCSEwzcHVRVUlEVXFTZ3NqOWRCSnYraXZJUWwKd1k0bWkzZml6SFFMdnVxVmJLRkhTQXpGb0dDUkxoeXdWOTVZTzBJS2ZBdEMyM05HSmE5bXk5aEg3eERyS2VPbApQMTFOZGtQTFlxeW1PZTVyNVhtR1R0UVdYSHNiWlVQZzBldzllMFVnRkZ6L3Z0SkVSbXVaTHB6MGFxbDI2d3grCnk1M3NJWXNDZ1lFQTJJVFVlZFQvdElucTJpTXNrR2s2ZExxWnZNWDFsVG4rb0o3ZUZFR2xkUGxuVGlzTFBvZ1AKVWRyTzU4Z2xPRHU2Mk9Qbm05YTJlVEJqTHhHa2o0bGdBK0xGT3g2R2U3V2NnR2MvTmt3UWNOTWUvNHFiUThPKwo4QTkxZGRqdzl1NXVZVFN5a0VqVHpxR2FOeVViQi8waHhheXZXY3BCUm1sZXFNOU0zc09LODRFPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQUpxemFWRDJFQjluK3hzS3ZxSHV1MzB3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa2JHbHVhMlZ5WkMxd2IyeHBZM2t0ZG1Gc2FXUmhkRzl5TG14cGJtdGxjbVF1YzNaagpNQjRYRFRJeU1EZ3hNVEEyTkRNeU0xb1hEVEl6TURneE1UQTJORE15TTFvd0x6RXRNQ3NHQTFVRUF4TWtiR2x1CmEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeAp3MTRGRzA0di9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLCm9lTXdnN0IzV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnMKUnJqY1lpeXphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWApnWUFEUGloT1JVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrCkRuck5yUFFTaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJvM0F3YmpBT0JnTlYKSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdMd1lEVlIwUkJDZ3dKb0lrYkdsdWEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwCmJtdGxjbVF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ3VvelhFMWJZMkR1VHZLdzcya1NoQVE0c2YKeiszZGlYdEhSbGpiYjNKZWIyNFRWOUVqZ1RybmhsYlpFaG8rcFA5ME5kQlIvQTRvVHdXQjdVUFFienp5eHQ5aApCcHZmVXQ1N1pyQ3hQdGs5RXJVdXR2T3EvU2NqNkNDd1VBUjZ4b2pybnJWQzNqY3ZIZEp0TXBNNlA3QnlQVUtxCjZ6c1dVcVExT0p6Tjg0czV6TDRoMG9YZDA5T0RXOC8rNWRFUVBOY1JXM2pHallvdHFoUnYzVm5aSVVYejZlTVcKaXVveFlrTDZNc2NyNHhGZkROOXBDVnkyVWIvV0JUSGVQd2ZHOGduaTVlR3ErMjNUWGFCbm1xd2V2aFNZcXQ5eQpOcm9rMzVVZlFHamI2WUFRUVdyQlRxa1diSDZ2WVpYVUYrZGEwL2JrVnFwbDNDZGpJdHhHaWV4bnUxS1oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeHcxNEZHMDR2Ci9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLb2VNd2c3QjMKV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnNScmpjWWl5egphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWGdZQURQaWhPClJVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrRG5yTnJQUVMKaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJBb0lCQVFDcEorTEtuVmZHRGJWNAozbCtTWjE1aGRYQ3hTSUNEaUFsUGRwN3F2SHg3OGI4NkRiWW5qeTR2eUYwY09tY3lOK0xxM2NjU29FT0pTMXc2CndNeDJYempnbUdOWDVYalZ6RkhtNDNGZmpSZ2RkVWUzRDV3cU9wMEpMVit2cXBrZDl4V1AzdlRFUlhxQVU2Z2oKNkdteVIrQ2FlenZ1T09jN3M2WW9xaCs0cmZWTDNKU1F3ajZxQTZTbnAybERydmhsSXZ3ZFRNaEs2dnh5Y2xLego1a1o1ZkxUeWtZamxydW1kNEhkWU1BdDE5S2doRXBkYkEwRVlsT2hGRisxcDRjOWRtT3FLTW5oVmhHdVR0L010ClZxT09UN0pPU2tZRUpsWlUrZXBYSjVpeTV0bDA5UFpYOGRGSUZrVjNLSlN2c3NxdThnM0d6R2hUajZrVzFYU2wKT2tuMG9LZUpBb0dCQVAyNXUxQ3l3anJpc1Z5bThNMlRiNGxEejZ6YlVZVmJUc1VNL2lCRGJyYTFoYVlGM0ZqZQpzdEVuWXFHK3JtQ3B0dnhMT3Z6VUhKVyttSzJUY2o5VTNDeG1uYmpyWFd6QkNZWVBCbHExQWNvOW9NYy9UclE5ClhUS3BLSDNOcEdJZTBSYXFscDhrLzlnUm5nbEIyZzVSQ0U5LzVtQm5Tc2Z2STZzaDNCUlpWQkp2QW9HQkFOQXQKUm12blpTUHpLby9lcjNlajVWZGZCN1ZzWEhHRmVCWlVRRkwvL3Bia2gxY2FGQVBpUlJLUC9zaVlYcXBXVkNHZApBbThsSmNnRHpvcGw0NFZwQ0xUVDVvWktxUExDK2IzSDVkQVpRV1VXdm5oOEIxejNYemNDZlpybkpJT0FoZEp1CkE4dC9XQ0p6Vms5U1BHSEJyVHgvbnZyRUR0MGhSbGtPKzBTTWphRVBBb0dBSmpVcTVQc1dUcUhHamFwQ0J1TVYKMzdqTGREOU9wbU5hbUVmZG1PUXVydXJrNWx4cGt5UnVEeHI4T2xrcGp6cmZhRnkzMUV6b3hRLy9rOXZwVDJvcgpBYkN1UGFPTDNRMndyblJpdzVRUVlmRW4zZmxGazlUTnpRdzJJY091NW11M2xzODNnVjJqL1ZpaDBNa08yaXNQCnNsRVRVeDhhM3NLL1AwMEpCRE56ZXBjQ2dZRUFoTS9OdEx1Y3NCSEwzcHVRVUlEVXFTZ3NqOWRCSnYraXZJUWwKd1k0bWkzZml6SFFMdnVxVmJLRkhTQXpGb0dDUkxoeXdWOTVZTzBJS2ZBdEMyM05HSmE5bXk5aEg3eERyS2VPbApQMTFOZGtQTFlxeW1PZTVyNVhtR1R0UVdYSHNiWlVQZzBldzllMFVnRkZ6L3Z0SkVSbXVaTHB6MGFxbDI2d3grCnk1M3NJWXNDZ1lFQTJJVFVlZFQvdElucTJpTXNrR2s2ZExxWnZNWDFsVG4rb0o3ZUZFR2xkUGxuVGlzTFBvZ1AKVWRyTzU4Z2xPRHU2Mk9Qbm05YTJlVEJqTHhHa2o0bGdBK0xGT3g2R2U3V2NnR2MvTmt3UWNOTWUvNHFiUThPKwo4QTkxZGRqdzl1NXVZVFN5a0VqVHpxR2FOeVViQi8waHhheXZXY3BCUm1sZXFNOU0zc09LODRFPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy-validator-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-policy-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-policy-validator-k8s-tls.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "type": "kubernetes.io/tls",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-heartbeat\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"linkerd.io\\"],\\"resources\\":[\\"serviceprofiles\\"],\\"verbs\\":[\\"list\\"]}]}
",
      },
      "name": "linkerd-heartbeat",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-heartbeat.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-dst\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"grpc\\",\\"port\\":8086,\\"targetPort\\":8086}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-dst",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-dst.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-linkerd-proxy-injector\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\",\\"replicationcontrollers\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"pods\\"],\\"verbs\\":[\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"extensions\\",\\"apps\\"],\\"resources\\":[\\"deployments\\",\\"replicasets\\",\\"daemonsets\\",\\"statefulsets\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"extensions\\",\\"batch\\"],\\"resources\\":[\\"cronjobs\\",\\"jobs\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]}]}
",
      },
      "name": "linkerd-linkerd-proxy-injector",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-destination-policy\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-policy\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"linkerd-destination\\",\\"namespace\\":\\"linkerd\\"}]}
",
      },
      "name": "linkerd-destination-policy",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-destination-policy.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"destination\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-destination\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-destination\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/config\\":\\"57f3ff6f5e13221b17df161b5575fa043a6a89b6cb522983674b6a476513f8a0\\",\\"config.linkerd.io/default-inbound-policy\\":\\"all-unauthenticated\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\",\\"linkerd.io/identity-mode\\":\\"default\\",\\"linkerd.io/proxy-version\\":\\"stable-2.11.2\\"},\\"labels\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-destination\\",\\"linkerd.io/workload-ns\\":\\"linkerd\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"_pod_name\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"_pod_ns\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}},{\\"name\\":\\"_pod_nodeName\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.nodeName\\"}}},{\\"name\\":\\"LINKERD2_PROXY_LOG\\",\\"value\\":\\"warn,linkerd=info\\"},{\\"name\\":\\"LINKERD2_PROXY_LOG_FORMAT\\",\\"value\\":\\"plain\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_ADDR\\",\\"value\\":\\"localhost.:8086\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_ADDR\\",\\"value\\":\\"localhost.:8090\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_WORKLOAD\\",\\"value\\":\\"$(_pod_ns):$(_pod_name)\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY\\",\\"value\\":\\"all-unauthenticated\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"100ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"1000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_CONTROL_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4190\\"},{\\"name\\":\\"LINKERD2_PROXY_ADMIN_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4191\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR\\",\\"value\\":\\"127.0.0.1:4140\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4143\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_IPS\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"status.podIPs\\"}}},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS\\",\\"value\\":\\"8086,8090,8443,9443,9990,9996,9997\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES\\",\\"value\\":\\"svc.cluster.local.\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION\\",\\"value\\":\\"25,587,3306,4444,5432,6379,9300,11211\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_CONTEXT\\",\\"value\\":\\"{\\\\\\"ns\\\\\\":\\\\\\"$(_pod_ns)\\\\\\", \\\\\\"nodeName\\\\\\":\\\\\\"$(_pod_nodeName)\\\\\\"}\\\\n\\"},{\\"name\\":\\"_pod_sa\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.serviceAccountName\\"}}},{\\"name\\":\\"_l5d_ns\\",\\"value\\":\\"linkerd\\"},{\\"name\\":\\"_l5d_trustdomain\\",\\"value\\":\\"cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_DIR\\",\\"value\\":\\"/var/run/linkerd/identity/end-entity\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS\\",\\"valueFrom\\":{\\"configMapKeyRef\\":{\\"key\\":\\"ca-bundle.crt\\",\\"name\\":\\"linkerd-identity-trust-roots\\"}}},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TOKEN_FILE\\",\\"value\\":\\"/var/run/secrets/kubernetes.io/serviceaccount/token\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_ADDR\\",\\"value\\":\\"linkerd-identity-headless.linkerd.svc.cluster.local.:8080\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_LOCAL_NAME\\",\\"value\\":\\"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_NAME\\",\\"value\\":\\"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"}],\\"image\\":\\"cr.l5d.io/linkerd/proxy:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"lifecycle\\":{\\"postStart\\":{\\"exec\\":{\\"command\\":[\\"/usr/lib/linkerd/linkerd-await\\",\\"--timeout=2m\\"]}}},\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/live\\",\\"port\\":4191},\\"initialDelaySeconds\\":10},\\"name\\":\\"linkerd-proxy\\",\\"ports\\":[{\\"containerPort\\":4143,\\"name\\":\\"linkerd-proxy\\"},{\\"containerPort\\":4191,\\"name\\":\\"linkerd-admin\\"}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":4191},\\"initialDelaySeconds\\":2},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsUser\\":2102},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/identity/end-entity\\",\\"name\\":\\"linkerd-identity-end-entity\\"}]},{\\"args\\":[\\"destination\\",\\"-addr=:8086\\",\\"-controller-namespace=linkerd\\",\\"-enable-h2-upgrade=true\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-enable-endpoint-slices=false\\",\\"-cluster-domain=cluster.local\\",\\"-identity-trust-domain=cluster.local\\",\\"-default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9996},\\"initialDelaySeconds\\":10},\\"name\\":\\"destination\\",\\"ports\\":[{\\"containerPort\\":8086,\\"name\\":\\"grpc\\"},{\\"containerPort\\":9996,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9996}},\\"securityContext\\":{\\"runAsUser\\":2103}},{\\"args\\":[\\"sp-validator\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9997},\\"initialDelaySeconds\\":10},\\"name\\":\\"sp-validator\\",\\"ports\\":[{\\"containerPort\\":8443,\\"name\\":\\"sp-validator\\"},{\\"containerPort\\":9997,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9997}},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/tls\\",\\"name\\":\\"sp-tls\\",\\"readOnly\\":true}]},{\\"args\\":[\\"--admin-addr=0.0.0.0:9990\\",\\"--control-plane-namespace=linkerd\\",\\"--grpc-addr=0.0.0.0:8090\\",\\"--server-addr=0.0.0.0:9443\\",\\"--server-tls-key=/var/run/linkerd/tls/tls.key\\",\\"--server-tls-certs=/var/run/linkerd/tls/tls.crt\\",\\"--cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\",\\"--identity-domain=cluster.local\\",\\"--default-policy=all-unauthenticated\\",\\"--log-level=linkerd=info,warn\\",\\"--log-format=plain\\"],\\"image\\":\\"cr.l5d.io/linkerd/policy-controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/live\\",\\"port\\":\\"admin\\"}},\\"name\\":\\"policy\\",\\"ports\\":[{\\"containerPort\\":8090,\\"name\\":\\"grpc\\"},{\\"containerPort\\":9990,\\"name\\":\\"admin\\"},{\\"containerPort\\":9443,\\"name\\":\\"policy-https\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":\\"admin\\"},\\"initialDelaySeconds\\":10},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/tls\\",\\"name\\":\\"policy-tls\\",\\"readOnly\\":true}]}],\\"initContainers\\":[{\\"args\\":[\\"--incoming-proxy-port\\",\\"4143\\",\\"--outgoing-proxy-port\\",\\"4140\\",\\"--proxy-uid\\",\\"2102\\",\\"--inbound-ports-to-ignore\\",\\"4190,4191,4567,4568\\",\\"--outbound-ports-to-ignore\\",\\"443\\"],\\"image\\":\\"cr.l5d.io/linkerd/proxy-init:v1.5.3\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"linkerd-init\\",\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"50Mi\\"},\\"requests\\":{\\"cpu\\":\\"10m\\",\\"memory\\":\\"10Mi\\"}},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":true,\\"capabilities\\":{\\"add\\":[\\"NET_ADMIN\\",\\"NET_RAW\\"]},\\"privileged\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsNonRoot\\":false,\\"runAsUser\\":0},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/run\\",\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"linkerd-destination\\",\\"volumes\\":[{\\"name\\":\\"sp-tls\\",\\"secret\\":{\\"secretName\\":\\"linkerd-sp-validator-k8s-tls\\"}},{\\"name\\":\\"policy-tls\\",\\"secret\\":{\\"secretName\\":\\"linkerd-policy-validator-k8s-tls\\"}},{\\"emptyDir\\":{},\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"},{\\"emptyDir\\":{\\"medium\\":\\"Memory\\"},\\"name\\":\\"linkerd-identity-end-entity\\"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-destination",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-destination.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/config": "57f3ff6f5e13221b17df161b5575fa043a6a89b6cb522983674b6a476513f8a0",
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
            "linkerd.io/identity-mode": "default",
            "linkerd.io/proxy-version": "stable-2.11.2",
          },
          "labels": Object {
            "linkerd.io/control-plane-component": "destination",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-destination",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "_pod_name",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "_pod_ns",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                Object {
                  "name": "_pod_nodeName",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "localhost.:8086",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "localhost.:8090",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                Object {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8086,8090,8443,9443,9990,9996,9997",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}
",
                },
                Object {
                  "name": "_pod_sa",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                Object {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                Object {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": Object {
                    "configMapKeyRef": Object {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "linkerd-identity-headless.linkerd.svc.cluster.local.:8080",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": Object {
                "postStart": Object {
                  "exec": Object {
                    "command": Array [
                      "/usr/lib/linkerd/linkerd-await",
                      "--timeout=2m",
                    ],
                  },
                },
              },
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": Array [
                Object {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                Object {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
              ],
            },
            Object {
              "args": Array [
                "destination",
                "-addr=:8086",
                "-controller-namespace=linkerd",
                "-enable-h2-upgrade=true",
                "-log-level=info",
                "-log-format=plain",
                "-enable-endpoint-slices=false",
                "-cluster-domain=cluster.local",
                "-identity-trust-domain=cluster.local",
                "-default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9996,
                },
                "initialDelaySeconds": 10,
              },
              "name": "destination",
              "ports": Array [
                Object {
                  "containerPort": 8086,
                  "name": "grpc",
                },
                Object {
                  "containerPort": 9996,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9996,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
            },
            Object {
              "args": Array [
                "sp-validator",
                "-log-level=info",
                "-log-format=plain",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9997,
                },
                "initialDelaySeconds": 10,
              },
              "name": "sp-validator",
              "ports": Array [
                Object {
                  "containerPort": 8443,
                  "name": "sp-validator",
                },
                Object {
                  "containerPort": 9997,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9997,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "sp-tls",
                  "readOnly": true,
                },
              ],
            },
            Object {
              "args": Array [
                "--admin-addr=0.0.0.0:9990",
                "--control-plane-namespace=linkerd",
                "--grpc-addr=0.0.0.0:8090",
                "--server-addr=0.0.0.0:9443",
                "--server-tls-key=/var/run/linkerd/tls/tls.key",
                "--server-tls-certs=/var/run/linkerd/tls/tls.crt",
                "--cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                "--identity-domain=cluster.local",
                "--default-policy=all-unauthenticated",
                "--log-level=linkerd=info,warn",
                "--log-format=plain",
              ],
              "image": "cr.l5d.io/linkerd/policy-controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/live",
                  "port": "admin",
                },
              },
              "name": "policy",
              "ports": Array [
                Object {
                  "containerPort": 8090,
                  "name": "grpc",
                },
                Object {
                  "containerPort": 9990,
                  "name": "admin",
                },
                Object {
                  "containerPort": 9443,
                  "name": "policy-https",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": "admin",
                },
                "initialDelaySeconds": 10,
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "policy-tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "443",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v1.5.3",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": Object {
                "limits": Object {
                  "cpu": "100m",
                  "memory": "50Mi",
                },
                "requests": Object {
                  "cpu": "10m",
                  "memory": "10Mi",
                },
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": true,
                "capabilities": Object {
                  "add": Array [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": false,
                "runAsUser": 0,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-destination",
          "volumes": Array [
            Object {
              "name": "sp-tls",
              "secret": Object {
                "secretName": "linkerd-sp-validator-k8s-tls",
              },
            },
            Object {
              "name": "policy-tls",
              "secret": Object {
                "secretName": "linkerd-policy-validator-k8s-tls",
              },
            },
            Object {
              "emptyDir": Object {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            Object {
              "emptyDir": Object {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"pods\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"policy.linkerd.io\\"],\\"resources\\":[\\"servers\\",\\"serverauthorizations\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]}]}
",
      },
      "name": "linkerd-policy",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-policy.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUxsUXVZVlBqeVo1N0dhcWgzWXFJM3d3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBNE1URXdOalF6TWpOYUZ3MHlNekE0TVRFd05qUXpNak5hTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRRGduL3ZacVo4NGdEVWhuRG9OdEQxYU1zZXBReFFhTnRDcWdWR3lIOFZSZm9ySwpXMTdRcko0M2lvd3JvVXUzaWpQY3JPZnlQdFZxOWZSMXNlSCtBenY1WlFpczRQYUlNUFZ1b1AxV3ArK3pPTVpyCmJydE01TzNIdUNCcmVXYTRaU2ZoeXRkNDhxMzhEdTVnQ1I4WFByKzUwQU5BN2FVaUYxaG9uK3MycUVMbHY3b0UKL01FblR5eUhIUWhzNWFkajVMdWR3bXpBTXI1cGo4ZGlXc2d4WThLc0owYU8zVGJIUmJXTkRZTU9MZFNzZ3pFKwoxRmsxdTdMSWljRG9GQm1oRENZZVZzTURLYTV4Znk4TVUrU1FxVEpKVHRiUXNBTzdiQU5KTW9mMnJEZUhTeTU3CnhSRFBTczZNTjU2MXNadVdHaHdJQmpzZHZCMU5UcXp3ZFo4ekhjNWpBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ0NHNaNlNnclRSK01xbExON3F3bW9kMXplTkF1dDh6Q3IKYkc3NEhpdktIZ1Zhb3JwOUp1SlJKU0VEUlVQLzdocmNMd0pjRUlMTllGZHhmalpKYllBMUFnSmZkdUt2WDM0Ygo1SC9hc05QRkVzSTdIOWw0cmY3TDVHbjJ6QWlBR1k4WFpKcXpxclE0eGIrdWE0V3p1VGQ2VHRoSm9pMU96UTBNCnh3UWRFbHVBWTNYVzJZV2VrYzJub0FiRlFvNCtQK3VVcHg1NE8wY0NCa0xCM2NuSmtzZ2RRejViektXVzFITUkKQmRQekN3c0xTK1dPK2doTWRWSkVuV3hWY1krNTZpRjNCM2FQWG9WL01RNU56WEs5c2FBNVZhYWJKbjVYd2FqRAplR1l4QlJvZ0R2ZTNnaWwwbERDbnVxMHZZZFp2aktDd2dwRUxhaVBWS1dnZmxYcVR1bFVWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNEovNzJhbWZPSUExSVp3NkRiUTlXakxIcVVNVUdqYlFxb0ZSc2gvRlVYNkt5bHRlCjBLeWVONHFNSzZGTHQ0b3ozS3puOGo3VmF2WDBkYkhoL2dNNytXVUlyT0QyaUREMWJxRDlWcWZ2c3pqR2EyNjcKVE9UdHg3Z2dhM2xtdUdVbjRjclhlUEt0L0E3dVlBa2ZGejYvdWRBRFFPMmxJaGRZYUovck5xaEM1Yis2QlB6QgpKMDhzaHgwSWJPV25ZK1M3bmNKc3dESythWS9IWWxySU1XUENyQ2RHanQwMngwVzFqUTJERGkzVXJJTXhQdFJaCk5idXl5SW5BNkJRWm9Rd21IbGJEQXltdWNYOHZERlBra0treVNVN1cwTEFEdTJ3RFNUS0g5cXczaDBzdWU4VVEKejByT2pEZWV0YkdibGhvY0NBWTdIYndkVFU2czhIV2ZNeDNPWXdJREFRQUJBb0lCQUFyYTBGSFpaNDlVYXJ6ZwpEdElndHFKSU4rdlBDUWFuUlhnbjNhbk03VDBkNzFrT0IwdndPNGtWa2VaOTJlblpyTjNxSVI5TXVBVitNejBJCnhwSCsyQVFhUk13TjV2djMyYlJwNVRRdDAyQ0d5dGZnTnY3bFJUUlVpb1NIRGxhMDFMT05tTklJY0MzeERzWG4KU3ZCVm9QQTZ4QjE4SG5IQ1RReHBSZldUTmdCaUowYzE4UmNxMUViR2wvQUZHckIrMTZCZEdWK2dpOTR6MDNHaQo5R0ZkZHNPQTdRdzFsSk9iaDZ3OVhqZFZOU0l6dC9FbSs4eEd3VHdpaC9IQkZVQ2hib1g3djhQMUZtT0wwN1B2CitBd2NBTWJiNDN2c2F0TFlJVDc0SDR6U2xWZ29raG5zVDlaellwRkV4WWxsTktFQ3pOVjlQQXdDWVBZYmJvc3gKYzFrQVdIRUNnWUVBL0ZxejFnSUVQT1Z2OEJ6YXJ5bFVIUnJWSEt6WTdyeWc5Q0VzZ2ZSRDhoRU5zN3l6aWtEQQpVaXI4U2czaXpONldzNldCMkxxTVBpWGlaMlc2ek8wZEFobTNUNVFtRkx6NGdSMUt0OURGZmVaSTlyeTAwNExDCjFtU01uMlJHRlFtTHBoL3U0Mk5KeWN2RGp1TjRUajhua1hmNlhCenljWlVKdU1JWDUvQ1dueXNDZ1lFQTQ5NjYKWW5KK3k1eVlHZlhvOWxJMHlFa25OZjBNRnhKbllHNzdMNmtNdWt4a241VHJ4YytxdGU3TGxveS9aS1lxWmNOeApUYkpabkFLZlFvZUZIR00wOSs0aERDYnNJWFJUcHo1Y01UQm40SFBJVlUxTTJjb0EzMTJnU2ZzUlU2aXRmRnIrCnNjUURoZDc3Sm9XZFNwTGtLbGpwamVoQ3d3cWJaS2FsblRIbXNha0NnWUVBNC9JU1M1ZGF1SjhPODdjOG1jZ2QKSUlVaVIxcWlRVlBGbDM5M3NwTXY1TEllekdJQlV6cVYvaUt4N1RxSnlVQ3VvK3MyVk14ODdZNU82ZExzWHpzMwpYclJYN3R3Rlllb29Gb2ljKzFqcmE0UGVHSEh3YkxYS3hObmlZLyt4aGtNdkQ0bjh3UXpvbEEwb3dpTWFncU50ClhHc2hqSjdoS0ZQVmlqeFlWN3ZzY2kwQ2dZRUE0c0hsRmt5NzB1RU5GMkI0S0k4YnlXZktwbFlmYnVJNGoyVkIKZjJjcHJFYVRKNTdwbFJxWDFaNUJhSnE5WjJwWDdKYTJMTXhia2YybUFHMmR6K2NGY2VlOWFUdGVaZGc5MnNNYQp1VFJqV3ArOWJ1MlNtWFFFdEVLV1hLaUUwSXlkdjQ5SnZ4ckJLcm4va1pFTE9vZThtRXVNZDFQM0ErS05TbmJ2CmZlT0huNmtDZ1lFQXcrU3hManc3OWpFUjBWRzJrSTBaZkRCaXF6cEVjMmVyRkZOaFBnZGszSWtHSkZEZkF5S00KTEE4dEdWNDNkaEtpNWJtUytzeVMwYy8vQWJVTXBwbDVWb0tZekRhMjN4RkpPU1dEOXZYUkdXcXBMVVRwaXpEaQppVDdyQ253V253WHJ0YURBaUk5RE1zRU9mT2hKc1E0SGF0N0ZhQ2FLY0o1ak9SVDYzZ2Z6cXJRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUxsUXVZVlBqeVo1N0dhcWgzWXFJM3d3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBNE1URXdOalF6TWpOYUZ3MHlNekE0TVRFd05qUXpNak5hTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRRGduL3ZacVo4NGdEVWhuRG9OdEQxYU1zZXBReFFhTnRDcWdWR3lIOFZSZm9ySwpXMTdRcko0M2lvd3JvVXUzaWpQY3JPZnlQdFZxOWZSMXNlSCtBenY1WlFpczRQYUlNUFZ1b1AxV3ArK3pPTVpyCmJydE01TzNIdUNCcmVXYTRaU2ZoeXRkNDhxMzhEdTVnQ1I4WFByKzUwQU5BN2FVaUYxaG9uK3MycUVMbHY3b0UKL01FblR5eUhIUWhzNWFkajVMdWR3bXpBTXI1cGo4ZGlXc2d4WThLc0owYU8zVGJIUmJXTkRZTU9MZFNzZ3pFKwoxRmsxdTdMSWljRG9GQm1oRENZZVZzTURLYTV4Znk4TVUrU1FxVEpKVHRiUXNBTzdiQU5KTW9mMnJEZUhTeTU3CnhSRFBTczZNTjU2MXNadVdHaHdJQmpzZHZCMU5UcXp3ZFo4ekhjNWpBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ0NHNaNlNnclRSK01xbExON3F3bW9kMXplTkF1dDh6Q3IKYkc3NEhpdktIZ1Zhb3JwOUp1SlJKU0VEUlVQLzdocmNMd0pjRUlMTllGZHhmalpKYllBMUFnSmZkdUt2WDM0Ygo1SC9hc05QRkVzSTdIOWw0cmY3TDVHbjJ6QWlBR1k4WFpKcXpxclE0eGIrdWE0V3p1VGQ2VHRoSm9pMU96UTBNCnh3UWRFbHVBWTNYVzJZV2VrYzJub0FiRlFvNCtQK3VVcHg1NE8wY0NCa0xCM2NuSmtzZ2RRejViektXVzFITUkKQmRQekN3c0xTK1dPK2doTWRWSkVuV3hWY1krNTZpRjNCM2FQWG9WL01RNU56WEs5c2FBNVZhYWJKbjVYd2FqRAplR1l4QlJvZ0R2ZTNnaWwwbERDbnVxMHZZZFp2aktDd2dwRUxhaVBWS1dnZmxYcVR1bFVWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNEovNzJhbWZPSUExSVp3NkRiUTlXakxIcVVNVUdqYlFxb0ZSc2gvRlVYNkt5bHRlCjBLeWVONHFNSzZGTHQ0b3ozS3puOGo3VmF2WDBkYkhoL2dNNytXVUlyT0QyaUREMWJxRDlWcWZ2c3pqR2EyNjcKVE9UdHg3Z2dhM2xtdUdVbjRjclhlUEt0L0E3dVlBa2ZGejYvdWRBRFFPMmxJaGRZYUovck5xaEM1Yis2QlB6QgpKMDhzaHgwSWJPV25ZK1M3bmNKc3dESythWS9IWWxySU1XUENyQ2RHanQwMngwVzFqUTJERGkzVXJJTXhQdFJaCk5idXl5SW5BNkJRWm9Rd21IbGJEQXltdWNYOHZERlBra0treVNVN1cwTEFEdTJ3RFNUS0g5cXczaDBzdWU4VVEKejByT2pEZWV0YkdibGhvY0NBWTdIYndkVFU2czhIV2ZNeDNPWXdJREFRQUJBb0lCQUFyYTBGSFpaNDlVYXJ6ZwpEdElndHFKSU4rdlBDUWFuUlhnbjNhbk03VDBkNzFrT0IwdndPNGtWa2VaOTJlblpyTjNxSVI5TXVBVitNejBJCnhwSCsyQVFhUk13TjV2djMyYlJwNVRRdDAyQ0d5dGZnTnY3bFJUUlVpb1NIRGxhMDFMT05tTklJY0MzeERzWG4KU3ZCVm9QQTZ4QjE4SG5IQ1RReHBSZldUTmdCaUowYzE4UmNxMUViR2wvQUZHckIrMTZCZEdWK2dpOTR6MDNHaQo5R0ZkZHNPQTdRdzFsSk9iaDZ3OVhqZFZOU0l6dC9FbSs4eEd3VHdpaC9IQkZVQ2hib1g3djhQMUZtT0wwN1B2CitBd2NBTWJiNDN2c2F0TFlJVDc0SDR6U2xWZ29raG5zVDlaellwRkV4WWxsTktFQ3pOVjlQQXdDWVBZYmJvc3gKYzFrQVdIRUNnWUVBL0ZxejFnSUVQT1Z2OEJ6YXJ5bFVIUnJWSEt6WTdyeWc5Q0VzZ2ZSRDhoRU5zN3l6aWtEQQpVaXI4U2czaXpONldzNldCMkxxTVBpWGlaMlc2ek8wZEFobTNUNVFtRkx6NGdSMUt0OURGZmVaSTlyeTAwNExDCjFtU01uMlJHRlFtTHBoL3U0Mk5KeWN2RGp1TjRUajhua1hmNlhCenljWlVKdU1JWDUvQ1dueXNDZ1lFQTQ5NjYKWW5KK3k1eVlHZlhvOWxJMHlFa25OZjBNRnhKbllHNzdMNmtNdWt4a241VHJ4YytxdGU3TGxveS9aS1lxWmNOeApUYkpabkFLZlFvZUZIR00wOSs0aERDYnNJWFJUcHo1Y01UQm40SFBJVlUxTTJjb0EzMTJnU2ZzUlU2aXRmRnIrCnNjUURoZDc3Sm9XZFNwTGtLbGpwamVoQ3d3cWJaS2FsblRIbXNha0NnWUVBNC9JU1M1ZGF1SjhPODdjOG1jZ2QKSUlVaVIxcWlRVlBGbDM5M3NwTXY1TEllekdJQlV6cVYvaUt4N1RxSnlVQ3VvK3MyVk14ODdZNU82ZExzWHpzMwpYclJYN3R3Rlllb29Gb2ljKzFqcmE0UGVHSEh3YkxYS3hObmlZLyt4aGtNdkQ0bjh3UXpvbEEwb3dpTWFncU50ClhHc2hqSjdoS0ZQVmlqeFlWN3ZzY2kwQ2dZRUE0c0hsRmt5NzB1RU5GMkI0S0k4YnlXZktwbFlmYnVJNGoyVkIKZjJjcHJFYVRKNTdwbFJxWDFaNUJhSnE5WjJwWDdKYTJMTXhia2YybUFHMmR6K2NGY2VlOWFUdGVaZGc5MnNNYQp1VFJqV3ArOWJ1MlNtWFFFdEVLV1hLaUUwSXlkdjQ5SnZ4ckJLcm4va1pFTE9vZThtRXVNZDFQM0ErS05TbmJ2CmZlT0huNmtDZ1lFQXcrU3hManc3OWpFUjBWRzJrSTBaZkRCaXF6cEVjMmVyRkZOaFBnZGszSWtHSkZEZkF5S00KTEE4dEdWNDNkaEtpNWJtUytzeVMwYy8vQWJVTXBwbDVWb0tZekRhMjN4RkpPU1dEOXZYUkdXcXBMVVRwaXpEaQppVDdyQ253V253WHJ0YURBaUk5RE1zRU9mT2hKc1E0SGF0N0ZhQ2FLY0o1ak9SVDYzZ2Z6cXJRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-proxy-injector-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-proxy-injector-k8s-tls.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "type": "kubernetes.io/tls",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-heartbeat\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-heartbeat\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"linkerd-heartbeat\\",\\"namespace\\":\\"linkerd\\"}]}
",
      },
      "name": "linkerd-heartbeat",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-heartbeat.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector\\",\\"namespace\\":\\"linkerd\\"}}
",
      },
      "name": "linkerd-proxy-injector",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "batch/v1beta1",
    "kind": "CronJob",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"batch/v1beta1\\",\\"kind\\":\\"CronJob\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"heartbeat\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"linkerd.io/control-plane-component\\":\\"heartbeat\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-heartbeat\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"concurrencyPolicy\\":\\"Replace\\",\\"jobTemplate\\":{\\"spec\\":{\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"linkerd.io/control-plane-component\\":\\"heartbeat\\",\\"linkerd.io/workload-ns\\":\\"linkerd\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"heartbeat\\",\\"-controller-namespace=linkerd\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090\\"],\\"env\\":[{\\"name\\":\\"LINKERD_DISABLED\\",\\"value\\":\\"the heartbeat controller does not use the proxy\\"}],\\"image\\":\\"cr.l5d.io/linkerd/controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"heartbeat\\",\\"securityContext\\":{\\"runAsUser\\":2103}}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"restartPolicy\\":\\"Never\\",\\"serviceAccountName\\":\\"linkerd-heartbeat\\"}}}},\\"schedule\\":\\"53 06 * * *\\",\\"successfulJobsHistoryLimit\\":0}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/batch_v1beta1-cronjob-linkerd-linkerd-heartbeat.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-identity\\",\\"namespace\\":\\"linkerd\\"}}
",
      },
      "name": "linkerd-identity",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"disabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"disabled\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/is-control-plane\\":\\"true\\"},\\"name\\":\\"linkerd\\"}}
",
        "linkerd.io/inject": "disabled",
      },
      "name": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-namespace-default-linkerd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "values": "clusterDomain: cluster.local
clusterNetworks: 10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
cniEnabled: false
controlPlaneTracing: false
controlPlaneTracingNamespace: linkerd-jaeger
controllerImage: cr.l5d.io/linkerd/controller
controllerLogFormat: plain
controllerLogLevel: info
controllerReplicas: 1
controllerUID: 2103
debugContainer:
  image:
    name: cr.l5d.io/linkerd/debug
    pullPolicy: \\"\\"
    version: \\"\\"
disableHeartBeat: false
enableEndpointSlices: false
enableH2Upgrade: true
enablePSP: false
enablePprof: false
identity:
  externalCA: true
  issuer:
    clockSkewAllowance: 20s
    issuanceLifetime: 24h0m0s
    scheme: kubernetes.io/tls
    tls:
      crtPEM: \\"\\"
identityTrustAnchorsPEM: \\"\\"
identityTrustDomain: cluster.local
imagePullPolicy: IfNotPresent
imagePullSecrets: []
installNamespace: true
linkerdVersion: stable-2.11.2
namespace: linkerd
nodeSelector:
  kubernetes.io/os: linux
podAnnotations: {}
podLabels: {}
policyController:
  defaultAllowPolicy: all-unauthenticated
  image:
    name: cr.l5d.io/linkerd/policy-controller
    pullPolicy: \\"\\"
    version: \\"\\"
  logLevel: linkerd=info,warn
  resources:
    cpu:
      limit: \\"\\"
      request: \\"\\"
    memory:
      limit: \\"\\"
      request: \\"\\"
policyValidator:
  caBundle: \\"\\"
  crtPEM: \\"\\"
  externalSecret: false
  keyPEM: \\"\\"
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
profileValidator:
  caBundle: \\"\\"
  crtPEM: \\"\\"
  externalSecret: false
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
proxy:
  await: true
  cores: 0
  enableExternalProfiles: false
  image:
    name: cr.l5d.io/linkerd/proxy
    pullPolicy: \\"\\"
    version: \\"\\"
  inboundConnectTimeout: 100ms
  logFormat: plain
  logLevel: warn,linkerd=info
  opaquePorts: 25,587,3306,4444,5432,6379,9300,11211
  outboundConnectTimeout: 1000ms
  ports:
    admin: 4191
    control: 4190
    inbound: 4143
    outbound: 4140
  requireIdentityOnInboundPorts: \\"\\"
  resources:
    cpu:
      limit: \\"\\"
      request: \\"\\"
    memory:
      limit: \\"\\"
      request: \\"\\"
  uid: 2102
  waitBeforeExitSeconds: 0
proxyInit:
  closeWaitTimeoutSecs: 0
  ignoreInboundPorts: 4567,4568
  ignoreOutboundPorts: 4567,4568
  image:
    name: cr.l5d.io/linkerd/proxy-init
    pullPolicy: \\"\\"
    version: v1.5.3
  logFormat: \\"\\"
  logLevel: \\"\\"
  resources:
    cpu:
      limit: 100m
      request: 10m
    memory:
      limit: 50Mi
      request: 10Mi
  runAsRoot: true
  skipSubnets: \\"\\"
  xtMountPath:
    mountPath: /run
    name: linkerd-proxy-init-xtables-lock
proxyInjector:
  caBundle: \\"\\"
  crtPEM: \\"\\"
  externalSecret: false
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
webhookFailurePolicy: Ignore
",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"values\\":\\"clusterDomain: cluster.local\\\\nclusterNetworks: 10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\\\ncniEnabled: false\\\\ncontrolPlaneTracing: false\\\\ncontrolPlaneTracingNamespace: linkerd-jaeger\\\\ncontrollerImage: cr.l5d.io/linkerd/controller\\\\ncontrollerLogFormat: plain\\\\ncontrollerLogLevel: info\\\\ncontrollerReplicas: 1\\\\ncontrollerUID: 2103\\\\ndebugContainer:\\\\n  image:\\\\n    name: cr.l5d.io/linkerd/debug\\\\n    pullPolicy: \\\\\\"\\\\\\"\\\\n    version: \\\\\\"\\\\\\"\\\\ndisableHeartBeat: false\\\\nenableEndpointSlices: false\\\\nenableH2Upgrade: true\\\\nenablePSP: false\\\\nenablePprof: false\\\\nidentity:\\\\n  externalCA: true\\\\n  issuer:\\\\n    clockSkewAllowance: 20s\\\\n    issuanceLifetime: 24h0m0s\\\\n    scheme: kubernetes.io/tls\\\\n    tls:\\\\n      crtPEM: \\\\\\"\\\\\\"\\\\nidentityTrustAnchorsPEM: \\\\\\"\\\\\\"\\\\nidentityTrustDomain: cluster.local\\\\nimagePullPolicy: IfNotPresent\\\\nimagePullSecrets: []\\\\ninstallNamespace: true\\\\nlinkerdVersion: stable-2.11.2\\\\nnamespace: linkerd\\\\nnodeSelector:\\\\n  kubernetes.io/os: linux\\\\npodAnnotations: {}\\\\npodLabels: {}\\\\npolicyController:\\\\n  defaultAllowPolicy: all-unauthenticated\\\\n  image:\\\\n    name: cr.l5d.io/linkerd/policy-controller\\\\n    pullPolicy: \\\\\\"\\\\\\"\\\\n    version: \\\\\\"\\\\\\"\\\\n  logLevel: linkerd=info,warn\\\\n  resources:\\\\n    cpu:\\\\n      limit: \\\\\\"\\\\\\"\\\\n      request: \\\\\\"\\\\\\"\\\\n    memory:\\\\n      limit: \\\\\\"\\\\\\"\\\\n      request: \\\\\\"\\\\\\"\\\\npolicyValidator:\\\\n  caBundle: \\\\\\"\\\\\\"\\\\n  crtPEM: \\\\\\"\\\\\\"\\\\n  externalSecret: false\\\\n  keyPEM: \\\\\\"\\\\\\"\\\\n  namespaceSelector:\\\\n    matchExpressions:\\\\n    - key: config.linkerd.io/admission-webhooks\\\\n      operator: NotIn\\\\n      values:\\\\n      - disabled\\\\nprofileValidator:\\\\n  caBundle: \\\\\\"\\\\\\"\\\\n  crtPEM: \\\\\\"\\\\\\"\\\\n  externalSecret: false\\\\n  namespaceSelector:\\\\n    matchExpressions:\\\\n    - key: config.linkerd.io/admission-webhooks\\\\n      operator: NotIn\\\\n      values:\\\\n      - disabled\\\\nproxy:\\\\n  await: true\\\\n  cores: 0\\\\n  enableExternalProfiles: false\\\\n  image:\\\\n    name: cr.l5d.io/linkerd/proxy\\\\n    pullPolicy: \\\\\\"\\\\\\"\\\\n    version: \\\\\\"\\\\\\"\\\\n  inboundConnectTimeout: 100ms\\\\n  logFormat: plain\\\\n  logLevel: warn,linkerd=info\\\\n  opaquePorts: 25,587,3306,4444,5432,6379,9300,11211\\\\n  outboundConnectTimeout: 1000ms\\\\n  ports:\\\\n    admin: 4191\\\\n    control: 4190\\\\n    inbound: 4143\\\\n    outbound: 4140\\\\n  requireIdentityOnInboundPorts: \\\\\\"\\\\\\"\\\\n  resources:\\\\n    cpu:\\\\n      limit: \\\\\\"\\\\\\"\\\\n      request: \\\\\\"\\\\\\"\\\\n    memory:\\\\n      limit: \\\\\\"\\\\\\"\\\\n      request: \\\\\\"\\\\\\"\\\\n  uid: 2102\\\\n  waitBeforeExitSeconds: 0\\\\nproxyInit:\\\\n  closeWaitTimeoutSecs: 0\\\\n  ignoreInboundPorts: 4567,4568\\\\n  ignoreOutboundPorts: 4567,4568\\\\n  image:\\\\n    name: cr.l5d.io/linkerd/proxy-init\\\\n    pullPolicy: \\\\\\"\\\\\\"\\\\n    version: v1.5.3\\\\n  logFormat: \\\\\\"\\\\\\"\\\\n  logLevel: \\\\\\"\\\\\\"\\\\n  resources:\\\\n    cpu:\\\\n      limit: 100m\\\\n      request: 10m\\\\n    memory:\\\\n      limit: 50Mi\\\\n      request: 10Mi\\\\n  runAsRoot: true\\\\n  skipSubnets: \\\\\\"\\\\\\"\\\\n  xtMountPath:\\\\n    mountPath: /run\\\\n    name: linkerd-proxy-init-xtables-lock\\\\nproxyInjector:\\\\n  caBundle: \\\\\\"\\\\\\"\\\\n  crtPEM: \\\\\\"\\\\\\"\\\\n  externalSecret: false\\\\n  namespaceSelector:\\\\n    matchExpressions:\\\\n    - key: config.linkerd.io/admission-webhooks\\\\n      operator: NotIn\\\\n      values:\\\\n      - disabled\\\\nwebhookFailurePolicy: Ignore\\\\n\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"controller\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-config\\",\\"namespace\\":\\"linkerd\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-config",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/1-manifest/v1-configmap-linkerd-linkerd-config.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
  },
]
`;

exports[`KubeObject Can sync resources 10`] = `
Array [
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
      },
      "name": "issuers.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-issuers.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "challenges.acme.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-challenges.acme.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "certificates.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-certificates.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
      },
      "name": "orders.acme.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-orders.acme.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "controller-gen.kubebuilder.io/version": "v0.6.1",
      },
      "name": "bundles.trust.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-bundles.trust.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "certificaterequests.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-certificaterequests.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "clusterissuers.cert-manager.io",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-clusterissuers.cert-manager.io.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-trust\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-trust",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-edit\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\",\\"certificaterequests\\",\\"issuers\\"],\\"verbs\\":[\\"create\\",\\"delete\\",\\"deletecollection\\",\\"patch\\",\\"update\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"challenges\\",\\"orders\\"],\\"verbs\\":[\\"create\\",\\"delete\\",\\"deletecollection\\",\\"patch\\",\\"update\\"]}]}
",
      },
      "name": "cert-manager-controller-edit",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-edit.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-metrics\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"controller\\",\\"port\\":9402,\\"protocol\\":\\"TCP\\",\\"targetPort\\":9402}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "cert-manager-controller-metrics",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-controller-metrics.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"strategy\\":{\\"rollingUpdate\\":{},\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"prometheus.io/path\\":\\"/metrics\\",\\"prometheus.io/port\\":\\"9402\\",\\"prometheus.io/scrape\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"namespaces\\":[\\"cert-manager\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--v=2\\",\\"--cluster-resource-namespace=$(POD_NAMESPACE)\\",\\"--leader-election-namespace=kube-system\\",\\"--acme-http01-solver-image=docker.io/bitnami/acmesolver:1.8.1-debian-11-r0\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}}],\\"image\\":\\"docker.io/bitnami/cert-manager:1.8.1-debian-11-r0\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"cert-manager\\",\\"ports\\":[{\\"containerPort\\":9402,\\"protocol\\":\\"TCP\\"}],\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001}}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"cert-manager-controller\\"}}}}
",
      },
      "name": "cert-manager-controller",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "prometheus.io/path": "/metrics",
            "prometheus.io/port": "9402",
            "prometheus.io/scrape": "true",
          },
          "labels": Object {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.6.1",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": Array [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--v=2",
                "--cluster-resource-namespace=$(POD_NAMESPACE)",
                "--leader-election-namespace=kube-system",
                "--acme-http01-solver-image=docker.io/bitnami/acmesolver:1.8.1-debian-11-r0",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cert-manager:1.8.1-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "name": "cert-manager",
              "ports": Array [
                Object {
                  "containerPort": 9402,
                  "protocol": "TCP",
                },
              ],
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-controller",
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook-dynamic-serving\\",\\"namespace\\":\\"cert-manager\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"cert-manager-webhook-ca\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"create\\"]}]}
",
      },
      "name": "cert-manager-webhook-dynamic-serving",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-cert-manager-cert-manager-webhook-dynamic-serving.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook-subjectaccessreviews\\"},\\"rules\\":[{\\"apiGroups\\":[\\"authorization.k8s.io\\"],\\"resources\\":[\\"subjectaccessreviews\\"],\\"verbs\\":[\\"create\\"]}]}
",
      },
      "name": "cert-manager-webhook-subjectaccessreviews",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-webhook-subjectaccessreviews.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Certificate",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"Certificate\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"dnsNames\\":[\\"cert-manager-trust.cert-manager.svc\\"],\\"issuerRef\\":{\\"name\\":\\"cert-manager-trust\\"},\\"revisionHistoryLimit\\":1,\\"secretName\\":\\"cert-manager-trust-tls\\"}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-certificate-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook\\",\\"namespace\\":\\"cert-manager\\"}}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-webhook.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-issuers\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"issuers\\",\\"issuers/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"issuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"create\\",\\"update\\",\\"patch\\",\\"delete\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-issuers",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-issuers.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-view\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\",\\"certificaterequests\\",\\"issuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"challenges\\",\\"orders\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]}]}
",
      },
      "name": "cert-manager-controller-view",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-view.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "ClusterIssuer",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"ClusterIssuer\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-trust-anchor\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"ca\\":{\\"secretName\\":\\"linkerd-identity-trust-roots\\"}}}
",
      },
      "name": "linkerd-trust-anchor",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-clusterissuer-cert-manager-linkerd-trust-anchor.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook-dynamic-serving\\",\\"namespace\\":\\"cert-manager\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"cert-manager-webhook-dynamic-serving\\"},\\"subjects\\":[{\\"apiGroup\\":\\"\\",\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-webhook\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-webhook-dynamic-serving",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-cert-manager-cert-manager-webhook-dynamic-serving.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app\\":\\"cert-manager-trust\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app\\":\\"cert-manager-trust\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"--log-level=1\\",\\"--metrics-port=9402\\",\\"--readiness-probe-port=6060\\",\\"--readiness-probe-path=/readyz\\",\\"--trust-namespace=cert-manager\\",\\"--webhook-host=0.0.0.0\\",\\"--webhook-port=6443\\",\\"--webhook-certificate-dir=/tls\\"],\\"command\\":[\\"cert-manager-trust\\"],\\"image\\":\\"quay.io/jetstack/cert-manager-trust:v0.1.0\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"cert-manager-trust\\",\\"ports\\":[{\\"containerPort\\":6443},{\\"containerPort\\":9402}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/readyz\\",\\"port\\":6060},\\"initialDelaySeconds\\":3,\\"periodSeconds\\":7},\\"resources\\":{},\\"volumeMounts\\":[{\\"mountPath\\":\\"/tls\\",\\"name\\":\\"tls\\",\\"readOnly\\":true}]}],\\"serviceAccountName\\":\\"cert-manager-trust\\",\\"volumes\\":[{\\"name\\":\\"tls\\",\\"secret\\":{\\"defaultMode\\":420,\\"secretName\\":\\"cert-manager-trust-tls\\"}}]}}}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app": "cert-manager-trust",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "--log-level=1",
                "--metrics-port=9402",
                "--readiness-probe-port=6060",
                "--readiness-probe-path=/readyz",
                "--trust-namespace=cert-manager",
                "--webhook-host=0.0.0.0",
                "--webhook-port=6443",
                "--webhook-certificate-dir=/tls",
              ],
              "command": Array [
                "cert-manager-trust",
              ],
              "image": "quay.io/jetstack/cert-manager-trust:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "cert-manager-trust",
              "ports": Array [
                Object {
                  "containerPort": 6443,
                },
                Object {
                  "containerPort": 9402,
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/readyz",
                  "port": 6060,
                },
                "initialDelaySeconds": 3,
                "periodSeconds": 7,
              },
              "resources": Object {},
              "volumeMounts": Array [
                Object {
                  "mountPath": "/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "serviceAccountName": "cert-manager-trust",
          "volumes": Array [
            Object {
              "name": "tls",
              "secret": Object {
                "defaultMode": 420,
                "secretName": "cert-manager-trust-tls",
              },
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"https\\",\\"port\\":443,\\"targetPort\\":10250}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-webhook.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"strategy\\":{\\"rollingUpdate\\":{},\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"namespaces\\":[\\"cert-manager\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--v=2\\",\\"--secure-port=10250\\",\\"--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)\\",\\"--dynamic-serving-ca-secret-name=cert-manager-webhook-ca\\",\\"--dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}}],\\"image\\":\\"docker.io/bitnami/cert-manager-webhook:1.8.1-debian-11-r0\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/livez\\",\\"port\\":6080,\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":60,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"name\\":\\"cert-manager-webhook\\",\\"ports\\":[{\\"containerPort\\":10250,\\"name\\":\\"https\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":6080,\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":5,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001}}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"cert-manager-webhook\\"}}}}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-webhook.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "webhook",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.6.1",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": Array [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--v=2",
                "--secure-port=10250",
                "--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)",
                "--dynamic-serving-ca-secret-name=cert-manager-webhook-ca",
                "--dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cert-manager-webhook:1.8.1-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/livez",
                  "port": 6080,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "cert-manager-webhook",
              "ports": Array [
                Object {
                  "containerPort": 10250,
                  "name": "https",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 6080,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-webhook",
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"coordination.k8s.io\\"],\\"resources\\":[\\"leases\\"],\\"verbs\\":[\\"get\\",\\"create\\",\\"update\\",\\"watch\\",\\"list\\"]}]}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}}
",
      },
      "name": "cert-manager-controller",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cert-manager\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-approve\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resourceNames\\":[\\"issuers.cert-manager.io/*\\",\\"clusterissuers.cert-manager.io/*\\"],\\"resources\\":[\\"signers\\"],\\"verbs\\":[\\"approve\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-approve",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-approve.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-orders\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-orders\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-orders",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-orders.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-certificates\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-certificates\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-certificates",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-certificates.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook-subjectaccessreviews\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-webhook-subjectaccessreviews\\"},\\"subjects\\":[{\\"apiGroup\\":\\"\\",\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-webhook\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-webhook-subjectaccessreviews",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-webhook-subjectaccessreviews.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Issuer",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"Issuer\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"selfSigned\\":{}}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-issuer-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-cainjector\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"get\\",\\"create\\",\\"update\\",\\"patch\\"]},{\\"apiGroups\\":[\\"admissionregistration.k8s.io\\"],\\"resources\\":[\\"validatingwebhookconfigurations\\",\\"mutatingwebhookconfigurations\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"update\\"]},{\\"apiGroups\\":[\\"apiregistration.k8s.io\\"],\\"resources\\":[\\"apiservices\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"update\\"]},{\\"apiGroups\\":[\\"apiextensions.k8s.io\\"],\\"resources\\":[\\"customresourcedefinitions\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"update\\"]},{\\"apiGroups\\":[\\"auditregistration.k8s.io\\"],\\"resources\\":[\\"auditsinks\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"update\\"]}]}
",
      },
      "name": "cert-manager-cainjector",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-cainjector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-ingress-shim\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\",\\"certificaterequests\\"],\\"verbs\\":[\\"create\\",\\"update\\",\\"delete\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\",\\"certificaterequests\\",\\"issuers\\",\\"clusterissuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses/finalizers\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-ingress-shim",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-ingress-shim.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-leader-election\\",\\"namespace\\":\\"kube-system\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"cert-manager-controller\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"get\\",\\"update\\",\\"patch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"create\\"]},{\\"apiGroups\\":[\\"coordination.k8s.io\\"],\\"resourceNames\\":[\\"cert-manager-controller\\"],\\"resources\\":[\\"leases\\"],\\"verbs\\":[\\"get\\",\\"update\\",\\"patch\\"]},{\\"apiGroups\\":[\\"coordination.k8s.io\\"],\\"resources\\":[\\"leases\\"],\\"verbs\\":[\\"create\\"]}]}
",
      },
      "name": "cert-manager-controller-leader-election",
      "namespace": "kube-system",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-kube-system-cert-manager-controller-leader-election.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Certificate",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"Certificate\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-trust-anchor\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"commonName\\":\\"root.linkerd.cluster.local\\",\\"isCA\\":true,\\"issuerRef\\":{\\"group\\":\\"cert-manager.io\\",\\"kind\\":\\"ClusterIssuer\\",\\"name\\":\\"linkerd-self-signed-issuer\\"},\\"privateKey\\":{\\"algorithm\\":\\"ECDSA\\",\\"size\\":256},\\"secretName\\":\\"linkerd-identity-trust-roots\\"}}
",
      },
      "name": "linkerd-trust-anchor",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-certificate-cert-manager-linkerd-trust-anchor.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-issuers\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-issuers\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-issuers",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-issuers.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-cainjector-leader-election\\",\\"namespace\\":\\"kube-system\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"cert-manager-cainjector-leader-election\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-cainjector\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-cainjector-leader-election",
      "namespace": "kube-system",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-kube-system-cert-manager-cainjector-leader-election.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-cainjector\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"strategy\\":{\\"rollingUpdate\\":{},\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"namespaces\\":[\\"cert-manager\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--v=2\\",\\"--leader-election-namespace=kube-system\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}}],\\"image\\":\\"docker.io/bitnami/cainjector:1.8.1-debian-11-r0\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"cainjector\\",\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001}}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"cert-manager-cainjector\\"}}}}
",
      },
      "name": "cert-manager-cainjector",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-cainjector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "cainjector",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.6.1",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": Array [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--v=2",
                "--leader-election-namespace=kube-system",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cainjector:1.8.1-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "name": "cainjector",
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-cainjector",
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-clusterissuers\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-clusterissuers\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-clusterissuers",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-clusterissuers.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-cainjector\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-cainjector\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-cainjector\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-cainjector",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-cainjector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-clusterissuers\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"clusterissuers\\",\\"clusterissuers/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"clusterissuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"create\\",\\"update\\",\\"patch\\",\\"delete\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-clusterissuers",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-clusterissuers.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-challenges\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-challenges\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-challenges",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-challenges.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\"},\\"rules\\":[{\\"apiGroups\\":[\\"trust.cert-manager.io\\"],\\"resources\\":[\\"bundles\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"trust.cert-manager.io\\"],\\"resources\\":[\\"bundles/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"create\\",\\"update\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "cert-manager-trust",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "ClusterIssuer",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"ClusterIssuer\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-self-signed-issuer\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"selfSigned\\":{}}}
",
      },
      "name": "linkerd-self-signed-issuer",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-clusterissuer-cert-manager-linkerd-self-signed-issuer.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust-metrics\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"metrics\\",\\"port\\":9402,\\"protocol\\":\\"TCP\\",\\"targetPort\\":9402}],\\"selector\\":{\\"app\\":\\"cert-manager-trust\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "cert-manager-trust-metrics",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-trust-metrics.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"webhook\\",\\"port\\":443,\\"protocol\\":\\"TCP\\",\\"targetPort\\":6443}],\\"selector\\":{\\"app\\":\\"cert-manager-trust\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-cainjector\\",\\"namespace\\":\\"cert-manager\\"}}
",
      },
      "name": "cert-manager-cainjector",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-cainjector.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-certificates\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\",\\"certificates/status\\",\\"certificaterequests\\",\\"certificaterequests/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\",\\"certificaterequests\\",\\"clusterissuers\\",\\"issuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates/finalizers\\",\\"certificaterequests/finalizers\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"orders\\"],\\"verbs\\":[\\"create\\",\\"delete\\",\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"create\\",\\"update\\",\\"delete\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-certificates",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-certificates.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"cert-manager-trust\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-orders\\"},\\"rules\\":[{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"orders\\",\\"orders/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"orders\\",\\"challenges\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"clusterissuers\\",\\"issuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"challenges\\"],\\"verbs\\":[\\"create\\",\\"delete\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"orders/finalizers\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-orders",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-orders.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-cainjector-leader-election\\",\\"namespace\\":\\"kube-system\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"cert-manager-cainjector-leader-election\\",\\"cert-manager-cainjector-leader-election-core\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"get\\",\\"update\\",\\"patch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"create\\"]},{\\"apiGroups\\":[\\"coordination.k8s.io\\"],\\"resourceNames\\":[\\"cert-manager-controller\\"],\\"resources\\":[\\"leases\\"],\\"verbs\\":[\\"get\\",\\"update\\",\\"patch\\"]},{\\"apiGroups\\":[\\"coordination.k8s.io\\"],\\"resources\\":[\\"leases\\"],\\"verbs\\":[\\"create\\",\\"get\\",\\"update\\"]}]}
",
      },
      "name": "cert-manager-cainjector-leader-election",
      "namespace": "kube-system",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-kube-system-cert-manager-cainjector-leader-election.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-challenges\\"},\\"rules\\":[{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"challenges\\",\\"challenges/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"challenges\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"issuers\\",\\"clusterissuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"pods\\",\\"services\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"create\\",\\"delete\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"create\\",\\"delete\\",\\"update\\"]},{\\"apiGroups\\":[\\"route.openshift.io\\"],\\"resources\\":[\\"routes/custom-host\\"],\\"verbs\\":[\\"create\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"challenges/finalizers\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-challenges",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-challenges.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cert-manager\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-approve\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-approve\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-approve",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-approve.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": Object {
      "annotations": Object {
        "cert-manager.io/inject-ca-from": "cert-manager/cert-manager-trust",
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"admissionregistration.k8s.io/v1\\",\\"kind\\":\\"ValidatingWebhookConfiguration\\",\\"metadata\\":{\\"annotations\\":{\\"cert-manager.io/inject-ca-from\\":\\"cert-manager/cert-manager-trust\\"},\\"labels\\":{\\"app\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\"},\\"webhooks\\":[{\\"admissionReviewVersions\\":[\\"v1\\",\\"v1beta1\\"],\\"clientConfig\\":{\\"service\\":{\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\",\\"path\\":\\"/validate\\"}},\\"failurePolicy\\":\\"Fail\\",\\"name\\":\\"trust.cert-manager.io\\",\\"rules\\":[{\\"apiGroups\\":[\\"trust.cert-manager.io\\"],\\"apiVersions\\":[\\"*\\"],\\"operations\\":[\\"CREATE\\",\\"UPDATE\\"],\\"resources\\":[\\"*/*\\"]}],\\"sideEffects\\":\\"None\\",\\"timeoutSeconds\\":5}]}
",
      },
      "name": "cert-manager-trust",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/admissionregistration.k8s.io_v1-validatingwebhookconfiguration-default-cert-manager-trust.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "ClusterIssuer",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"ClusterIssuer\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"letsencrypt-cluster-issuer\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"acme\\":{\\"email\\":\\"oyelowooyedayo@gmail.com\\",\\"privateKeySecretRef\\":{\\"name\\":\\"letsencrypt-cluster-issuer-key\\"},\\"server\\":\\"https://acme-staging-v02.api.letsencrypt.org/directory\\",\\"solvers\\":[{\\"http01\\":{\\"ingress\\":{\\"class\\":\\"nginx\\"}}}]}}}
",
      },
      "name": "letsencrypt-cluster-issuer",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-clusterissuer-default-letsencrypt-cluster-issuer.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-leader-election\\",\\"namespace\\":\\"kube-system\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"cert-manager-controller-leader-election\\"},\\"subjects\\":[{\\"apiGroup\\":\\"\\",\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-leader-election",
      "namespace": "kube-system",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-kube-system-cert-manager-controller-leader-election.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
  Object {
    "apiVersion": "trust.cert-manager.io/v1alpha1",
    "kind": "Bundle",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"trust.cert-manager.io/v1alpha1\\",\\"kind\\":\\"Bundle\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-identity-trust-roots\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"sources\\":[{\\"secret\\":{\\"key\\":\\"ca.crt\\",\\"name\\":\\"linkerd-identity-trust-roots\\"}}],\\"target\\":{\\"configMap\\":{\\"key\\":\\"ca-bundle.crt\\"}}}}
",
      },
      "name": "linkerd-identity-trust-roots",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/trust.cert-manager.io_v1alpha1-bundle-default-linkerd-identity-trust-roots.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-ingress-shim\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-ingress-shim\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-ingress-shim",
    },
    "path": "generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-ingress-shim.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/cert-manager",
  },
]
`;

exports[`KubeObject Can sync resources 11`] = `
Array [
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"minReadySeconds\\":0,\\"replicas\\":1,\\"revisionHistoryLimit\\":10,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"}},\\"namespaces\\":[\\"default\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"/nginx-ingress-controller\\",\\"--default-backend-service=default/nginx-ingress-controller-default-backend\\",\\"--election-id=ingress-controller-leader\\",\\"--controller-class=k8s.io/ingress-nginx\\",\\"--configmap=default/nginx-ingress-controller\\"],\\"env\\":[{\\"name\\":\\"POD_NAME\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}}],\\"image\\":\\"docker.io/bitnami/nginx-ingress-controller:1.2.1-debian-11-r6\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":10254,\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"name\\":\\"controller\\",\\"ports\\":[{\\"containerPort\\":80,\\"name\\":\\"http\\",\\"protocol\\":\\"TCP\\"},{\\"containerPort\\":443,\\"name\\":\\"https\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":10254,\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":true,\\"capabilities\\":{\\"add\\":[\\"NET_BIND_SERVICE\\"],\\"drop\\":[\\"ALL\\"]},\\"runAsNonRoot\\":true,\\"runAsUser\\":1001}}],\\"dnsPolicy\\":\\"ClusterFirst\\",\\"hostNetwork\\":false,\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"nginx-ingress-controller\\",\\"terminationGracePeriodSeconds\\":60}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/apps_v1-deployment-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "nginx-ingress-controller",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "nginx-ingress-controller",
            "helm.sh/chart": "nginx-ingress-controller-9.2.11",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "controller",
                        "app.kubernetes.io/instance": "nginx-ingress-controller",
                        "app.kubernetes.io/name": "nginx-ingress-controller",
                      },
                    },
                    "namespaces": Array [
                      "default",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "/nginx-ingress-controller",
                "--default-backend-service=default/nginx-ingress-controller-default-backend",
                "--election-id=ingress-controller-leader",
                "--controller-class=k8s.io/ingress-nginx",
                "--configmap=default/nginx-ingress-controller",
              ],
              "env": Array [
                Object {
                  "name": "POD_NAME",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/nginx-ingress-controller:1.2.1-debian-11-r6",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "controller",
              "ports": Array [
                Object {
                  "containerPort": 80,
                  "name": "http",
                  "protocol": "TCP",
                },
                Object {
                  "containerPort": 443,
                  "name": "https",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": true,
                "capabilities": Object {
                  "add": Array [
                    "NET_BIND_SERVICE",
                  ],
                  "drop": Array [
                    "ALL",
                  ],
                },
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "dnsPolicy": "ClusterFirst",
          "hostNetwork": false,
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "nginx-ingress-controller",
          "terminationGracePeriodSeconds": 60,
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "defaultBackend.conf": "location /healthz {
  return 200;
}

location / {
  return 404;
}",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"defaultBackend.conf\\":\\"location /healthz {\\\\n  return 200;\\\\n}\\\\n\\\\nlocation / {\\\\n  return 404;\\\\n}\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller-default-backend\\",\\"namespace\\":\\"default\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller-default-backend",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/v1-configmap-default-nginx-ingress-controller-default-backend.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "IngressClass",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"networking.k8s.io/v1\\",\\"kind\\":\\"IngressClass\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx\\"},\\"spec\\":{\\"controller\\":\\"k8s.io/ingress-nginx\\"}}
",
      },
      "name": "nginx",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/networking.k8s.io_v1-ingressclass-default-nginx.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/v1-serviceaccount-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"networking.k8s.io/v1\\",\\"kind\\":\\"Ingress\\",\\"metadata\\":{\\"annotations\\":{\\"nginx.ingress.kubernetes.io/ssl-redirect\\":\\"false\\",\\"nginx.ingress.kubernetes.io/use-regex\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"oyelowo-ingress\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"ingressClassName\\":\\"nginx\\",\\"rules\\":[{\\"host\\":\\"localhost:8080\\",\\"http\\":{\\"paths\\":[{\\"backend\\":{\\"service\\":{\\"name\\":\\"graphql-mongo\\",\\"port\\":{\\"number\\":8000}}},\\"path\\":\\"/api\\",\\"pathType\\":\\"Prefix\\"},{\\"backend\\":{\\"service\\":{\\"name\\":\\"react-web\\",\\"port\\":{\\"number\\":3000}}},\\"path\\":\\"/\\",\\"pathType\\":\\"Prefix\\"}]}}],\\"tls\\":[]}}
",
        "nginx.ingress.kubernetes.io/ssl-redirect": "false",
        "nginx.ingress.kubernetes.io/use-regex": "true",
      },
      "name": "oyelowo-ingress",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/networking.k8s.io_v1-ingress-applications-oyelowo-ingress.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"nginx-ingress-controller\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"configmaps\\",\\"endpoints\\",\\"nodes\\",\\"pods\\",\\"secrets\\"],\\"verbs\\":[\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"nodes\\"],\\"verbs\\":[\\"get\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"services\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"update\\",\\"watch\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingressclasses\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"nginx-ingress-controller\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller-default-backend\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"}},\\"namespaces\\":[\\"default\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"image\\":\\"docker.io/bitnami/nginx:1.21.6-debian-11-r6\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":\\"http\\",\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":30,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":5},\\"name\\":\\"default-backend\\",\\"ports\\":[{\\"containerPort\\":8080,\\"name\\":\\"http\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":6,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":\\"http\\",\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":0,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":5},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/opt/bitnami/nginx/conf/bitnami/\\",\\"name\\":\\"nginx-config-volume\\",\\"readOnly\\":true}]}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"nginx-ingress-controller\\",\\"terminationGracePeriodSeconds\\":60,\\"volumes\\":[{\\"configMap\\":{\\"items\\":[{\\"key\\":\\"defaultBackend.conf\\",\\"path\\":\\"defaultBackend.conf\\"}],\\"name\\":\\"nginx-ingress-controller-default-backend\\"},\\"name\\":\\"nginx-config-volume\\"}]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller-default-backend",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/apps_v1-deployment-default-nginx-ingress-controller-default-backend.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "default-backend",
            "app.kubernetes.io/instance": "nginx-ingress-controller",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "nginx-ingress-controller",
            "helm.sh/chart": "nginx-ingress-controller-9.2.11",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "default-backend",
                        "app.kubernetes.io/instance": "nginx-ingress-controller",
                        "app.kubernetes.io/name": "nginx-ingress-controller",
                      },
                    },
                    "namespaces": Array [
                      "default",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "image": "docker.io/bitnami/nginx:1.21.6-debian-11-r6",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": "http",
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "name": "default-backend",
              "ports": Array [
                Object {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 6,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": "http",
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/opt/bitnami/nginx/conf/bitnami/",
                  "name": "nginx-config-volume",
                  "readOnly": true,
                },
              ],
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "nginx-ingress-controller",
          "terminationGracePeriodSeconds": 60,
          "volumes": Array [
            Object {
              "configMap": Object {
                "items": Array [
                  Object {
                    "key": "defaultBackend.conf",
                    "path": "defaultBackend.conf",
                  },
                ],
                "name": "nginx-ingress-controller-default-backend",
              },
              "name": "nginx-config-volume",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\"],\\"verbs\\":[\\"get\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"configmaps\\",\\"pods\\",\\"secrets\\",\\"endpoints\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"services\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"update\\",\\"watch\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"ingress-controller-leader\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"get\\",\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"create\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"endpoints\\"],\\"verbs\\":[\\"create\\",\\"get\\",\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-role-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller-default-backend\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"http\\",\\"port\\":80,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"http\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller-default-backend",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/v1-service-default-nginx-ingress-controller-default-backend.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"externalTrafficPolicy\\":\\"\\",\\"ports\\":[{\\"name\\":\\"http\\",\\"port\\":80,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"http\\"},{\\"name\\":\\"https\\",\\"port\\":443,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"https\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"},\\"sessionAffinity\\":\\"None\\",\\"type\\":\\"LoadBalancer\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/nginx-ingress/1-manifest/v1-service-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/nginx-ingress",
    "spec": Object {},
  },
]
`;

exports[`KubeObject Can sync resources 12`] = `
Array [
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"\\"},\\"name\\":\\"applications\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "applications",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-applications-applications.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/namespaces",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"\\"},\\"name\\":\\"linkerd-viz\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
      },
      "name": "linkerd-viz",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-linkerd-viz-linkerd-viz.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/namespaces",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"\\"},\\"name\\":\\"argocd\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-argocd-argocd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/namespaces",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"\\"},\\"name\\":\\"default\\",\\"namespace\\":\\"default\\"}}
",
      },
      "name": "default",
      "namespace": "default",
    },
    "path": "generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-default-default.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/namespaces",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"disabled\\"},\\"name\\":\\"linkerd\\",\\"namespace\\":\\"linkerd\\"}}
",
      },
      "name": "linkerd",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-linkerd-linkerd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/namespaces",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"\\"},\\"name\\":\\"kube-system\\",\\"namespace\\":\\"kube-system\\"}}
",
      },
      "name": "kube-system",
      "namespace": "kube-system",
    },
    "path": "generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-kube-system-kube-system.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/namespaces",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"\\"},\\"name\\":\\"cert-manager\\",\\"namespace\\":\\"cert-manager\\"}}
",
      },
      "name": "cert-manager",
      "namespace": "cert-manager",
    },
    "path": "generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-cert-manager-cert-manager.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/namespaces",
  },
]
`;

exports[`KubeObject Can update sealed secrets 1`] = `
Array [
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-applications-secret",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd-applications-parents/sealed-secrets/sealed-secret-argocd-applications-secret-argocd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd-applications-parents",
    "spec": Object {
      "encryptedData": Object {
        "ADMIN_PASSWORD": "lowo-testargocd-applications-secretargocdHey7F2EAFyTqHbR********",
        "password": "lowo-testargocd-applications-secretargocd4Kt6SwHLVIz3jme********",
        "type": "lowo-testargocd-applications-secretargocdmbRtsuoo1tYIHS3***",
        "url": "lowo-testargocd-applications-secretargocdbbkpHh_hKk6KMwv**********************************************************",
        "username": "lowo-testargocd-applications-secretargocdRax5wOXVWX9c6SH*******",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"ADMIN_PASSWORD\\":\\"jungbunu\\",\\"password\\":\\"jungbunu\\",\\"type\\":\\"git\\",\\"url\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"username\\":\\"Oyelowo\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"argocd.argoproj.io/secret-type\\":\\"repository\\"},\\"name\\":\\"argocd-applications-secret\\",\\"namespace\\":\\"argocd\\"}}
",
          },
          "name": "argocd-applications-secret",
          "namespace": "argocd",
        },
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-redis",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/sealed-secrets/sealed-secret-argocd-redis-argocd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {
      "encryptedData": Object {
        "redis-password": "lowo-testargocd-redisargocd7ivjWjWSudBMwiM****************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"redis-password\\":\\"dGw0RVN2WTlrTA==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis\\",\\"namespace\\":\\"argocd\\"},\\"type\\":\\"Opaque\\"}
",
          },
          "name": "argocd-redis",
          "namespace": "argocd",
        },
        "type": "Opaque",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-secret",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/sealed-secrets/sealed-secret-argocd-secret-argocd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {
      "encryptedData": Object {
        "admin.password": "lowo-testargocd-secretargocdbOHTiSQlzXtvTKu********************************************************************************",
        "admin.passwordMtime": "lowo-testargocd-secretargocdmDFT0yCBWhetbhB****************************",
        "clearPassword": "lowo-testargocd-secretargocdBiBvhItPkKBWzGE************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"admin.password\\":\\"JDJhJDEwJDkwcG1lcUgvWlU1bTZ4TnR6b3NYQy5TdjAybm1OM3NlT3ZyQVFOSlg4a2JQTWpIM25ueExp\\",\\"admin.passwordMtime\\":\\"MjAyMi0wOC0xMVQwNjo0MzoyOFo=\\",\\"clearPassword\\":\\"b3llbG93bw==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"app.kubernetes.io/part-of\\":\\"argocd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-secret\\",\\"namespace\\":\\"argocd\\"},\\"type\\":\\"Opaque\\"}
",
          },
          "name": "argocd-secret",
          "namespace": "argocd",
        },
        "type": "Opaque",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-sp-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-sp-validator-k8s-tls-linkerd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "lowo-testlinkerd-sp-validator-k8s-tlslinkerdypbU1Mgy3cM6hQh
        "tls.key": "lowo-testlinkerd-sp-validator-k8s-tlslinkerd4xdR1FQ8rT7Up
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUkrYUVCL0EzcmRkK0VDak5VYzhsYlF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3T0RFeE1EWTBNekl6V2hjTk1qTXdPREV4TURZME16SXpXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxwdU53cFZ2dEcvUkVoUXpCM1JiK1BvWU9iVTVOck5iSUJKTU4vNjlWY3FucnYweWQ0SQpjUllyWVIwMjJ5NE9UODk5THVtOHpiVGZDOGVPTXlnaFZ0akFwb0xzcWdtMkkwV3FIcVNtQ0NuR3l6cnJLbzNrCnNCODdsTmJDV1k2ekcvV0J4NFRpbFdsTzBiSDB5elM3NmRrR0d0eW1YNlFwLzdYV2kvMEUzblRhaWxYVHZ0M1kKcFpNTDhZREFQdjJtR1FHU0hhUkQxNG9LRTJDa2tEVm5mU0g4UU5Vd0sydys5cEY1aW82Q0oyTXRIeWhIZmF5NwpaUnBXK0hxLzYxVFhVTTVYR0hPNlpoZ0dLeWEzbnlseXhLa3lFR1QxUFZkMWtXUEhyQ0lXWjZoelArb3dZNzJXCm1NRklwbXJTNExDa0RTSVRBdW03RnpoMGZ0c2dJYmErUk9jQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBNVgvRnMwbXF0R1c4SjVhMVViTVFrTHpuazIzbzZCWkxhMnlydjBxbTYKSCtrdW5UWkVzMnAzUGR0SDJYeXVhVytrRDFmbmRyR2haRHErRkt2Qnc4ZDlmUERLMXBiVHU1RnprS1lrUU9CbwptajJtZVdJUjdMUlJ1UWFIbnJTd1BUQzNlbWtWRVpQMjBiaUNSclhpV3RLdWtaeEZyTmdrbXZwY0d1VWZPWlBUCkNmU0s1NzM4VXpUSVIzWWxHOXExdnVBbVcyQXNrYXNIbTE3M0ZLN2x2R3NwaE8wVTdRY3JFeEJiVmd0SUZ0Qk0KM0tJYktBZmg5VUs2aW1DNGpsazRlVFBicTZSTHlmNFJoK3Rwb3pWeTlmK295cDZ5eEVlUWwvMk5jNU1mQmxyOQp3MWtDUTczN2k0R1QzMXZmRDJST25JOU9ZZFMrV1VDSWs0dnlVL1l6eVdBawotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdW00M0NsVyswYjlFU0ZETUhkRnY0K2hnNXRUazJzMXNnRWt3My9yMVZ5cWV1L1RKCjNnaHhGaXRoSFRiYkxnNVB6MzB1NmJ6TnROOEx4NDR6S0NGVzJNQ21ndXlxQ2JZalJhb2VwS1lJS2NiTE91c3EKamVTd0h6dVUxc0paanJNYjlZSEhoT0tWYVU3UnNmVExOTHZwMlFZYTNLWmZwQ24vdGRhTC9RVGVkTnFLVmRPKwozZGlsa3d2eGdNQSsvYVlaQVpJZHBFUFhpZ29UWUtTUU5XZDlJZnhBMVRBcmJENzJrWG1Lam9Jbll5MGZLRWQ5CnJMdGxHbGI0ZXIvclZOZFF6bGNZYzdwbUdBWXJKcmVmS1hMRXFUSVFaUFU5VjNXUlk4ZXNJaFpucUhNLzZqQmoKdlphWXdVaW1hdExnc0tRTkloTUM2YnNYT0hSKzJ5QWh0cjVFNXdJREFRQUJBb0lCQUc4a0VaQUp1aTZVMWdJKwptTkVWOEp4d0JvVFdXbkRPa21hUU82RHJuYU9QZHY0YVd0WVJOa20vSnJBaDZkeTFENE5rMzdqY284MjJRdkYrCnBxUy82MlJneFdPNzcwckcySlJKYk9jL1RCS0x2dENyTGIxVm5tR2dSWVVhYkFXVVpaQ2hBKzhHbllnZ1F3YlMKSnVxVE5ELzdVYnhGT3pORkRucTdJczErUDVodFFzNlA2U1NFTEpMNG1hK3l2NGdETFIyZm5QbUZIZCtia0xlSwozb3Y5aE1nVjBRRHZCbVVVaFlnZS9icHJCc2ZMd2QxaXRlcHQxNXRGT1RpVWs2NnI1WlFkZlhDY1BmTGd3bExCCkc0MlZLSFovNkxEaTR2Q2U4cXpoVW9KYzExaFlnQnZWYks5WVk1MEJTL21tNllvZmROWjlvMmFKNDk5cjF6R1cKR1FHKzBTRUNnWUVBeGFvWlArZXU5OU1FZmVPU0FVRVV4Zy9udlJiOVhaSnBMazQ0N3RQd2lRbkRSVTUxZXZzVAo0dHhjeWxhYStBNFJNdlVPcURqVTNnUEdKN0lmckVjY3JJMXJZbkZFb2xXSVBiR0xCMWRTOWMzejhBYTJHdkVLCitLdFNTWVYvQ1B4MFlNUHRybXMydmdwQVluRTJGZWU0YjFvVlBiNDZNQTRRcWtnNWtkdzcrKzhDZ1lFQThYTmYKcC8xU2k0b1ZJT3ZseWxoSk52SjVKdXhTcmsxN0gvOFgvdWM1UngyS0J5SFNzRFNiQTEvMFk3Q29aSHJMYkQwTAo5OHJxekxGa1g5WHhENml1ZmU5MzE1OVo4L0Exb2w3OTMzSk1Vd2hTQXZTK1d4Uy9yVUczamdRMjJ4RWN3cThUCmwvTDZlR0dpM2tBU0R1SVRLUFFMemxlUTdXVVRHZnJndWZrWXJva0NnWUVBcHlSTGo0OGdrNnlhMnJ5cEJHaDgKNFhJbm1ld3J1SWtLYWI1NVEvSnhMZC9VZi9GMVE5VzFuaHFLV0FwZHBpMTIrNmplaVA3dGVRS2w5NEVXYVQ0RQprQ0JSVW4vRzhxSHl2NEEydUxGdGxDNWYvSElnWUsyOGdrT1VKRmsrNzJGU0kxVHAwWmdWUlNNMENFb0Uyd2NECkhSMkdZcHhOWmI4dTlsNTJWOUZyNDM4Q2dZRUF5cE02K1Uydm1NVmtUcmU4bHRVVnNGVWxVb1BLSnRWNDdQSncKWm53RzhXU1dMcit3N2dkazJ5TUJmelp6UWNKSXMrcFFCVGtwWUUyZzRrczBNaWdiSml2cEIyNTU0UkZ6WG1TRwphWmVTODhNeVU2cVZud004Z2hkMThtQVV5aDJFWE03WkNJNWltT2VKNXlBb1JuWmxEdUlhbWFlY1A2Q2lzeFJxCndYMTl1TWtDZ1lBaE1Dc2t3aWplbUtGcUd3SnBkeUJ5bWRsemhZcEhaYlN5cm96bEZ3bUpFeHhWVlViVTRSaUEKY1lQOUx4bFZFQ0dETnBCK3NXdnFBdmtEKzRyelRpMDk5OHhWYW93QkNzMVZ1VU9ZMUs4T0FWU3hBVys0dWh0dQpZUWtkN1dnUHB1RS9ybkhIdmNnV29nRnpSQVB0ZVFHRzNpM1dNODdPOVFsSk5PcXVGbDFWSGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-sp-validator-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "linkerd-sp-validator-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-policy-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-policy-validator-k8s-tls-linkerd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "lowo-testlinkerd-policy-validator-k8s-tlslinkerdWHVCnm7emEIshg
        "tls.key": "lowo-testlinkerd-policy-validator-k8s-tlslinkerdUICzxk6dV_CV48g
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQUpxemFWRDJFQjluK3hzS3ZxSHV1MzB3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa2JHbHVhMlZ5WkMxd2IyeHBZM2t0ZG1Gc2FXUmhkRzl5TG14cGJtdGxjbVF1YzNaagpNQjRYRFRJeU1EZ3hNVEEyTkRNeU0xb1hEVEl6TURneE1UQTJORE15TTFvd0x6RXRNQ3NHQTFVRUF4TWtiR2x1CmEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeAp3MTRGRzA0di9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLCm9lTXdnN0IzV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnMKUnJqY1lpeXphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWApnWUFEUGloT1JVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrCkRuck5yUFFTaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJvM0F3YmpBT0JnTlYKSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdMd1lEVlIwUkJDZ3dKb0lrYkdsdWEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwCmJtdGxjbVF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ3VvelhFMWJZMkR1VHZLdzcya1NoQVE0c2YKeiszZGlYdEhSbGpiYjNKZWIyNFRWOUVqZ1RybmhsYlpFaG8rcFA5ME5kQlIvQTRvVHdXQjdVUFFienp5eHQ5aApCcHZmVXQ1N1pyQ3hQdGs5RXJVdXR2T3EvU2NqNkNDd1VBUjZ4b2pybnJWQzNqY3ZIZEp0TXBNNlA3QnlQVUtxCjZ6c1dVcVExT0p6Tjg0czV6TDRoMG9YZDA5T0RXOC8rNWRFUVBOY1JXM2pHallvdHFoUnYzVm5aSVVYejZlTVcKaXVveFlrTDZNc2NyNHhGZkROOXBDVnkyVWIvV0JUSGVQd2ZHOGduaTVlR3ErMjNUWGFCbm1xd2V2aFNZcXQ5eQpOcm9rMzVVZlFHamI2WUFRUVdyQlRxa1diSDZ2WVpYVUYrZGEwL2JrVnFwbDNDZGpJdHhHaWV4bnUxS1oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeHcxNEZHMDR2Ci9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLb2VNd2c3QjMKV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnNScmpjWWl5egphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWGdZQURQaWhPClJVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrRG5yTnJQUVMKaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJBb0lCQVFDcEorTEtuVmZHRGJWNAozbCtTWjE1aGRYQ3hTSUNEaUFsUGRwN3F2SHg3OGI4NkRiWW5qeTR2eUYwY09tY3lOK0xxM2NjU29FT0pTMXc2CndNeDJYempnbUdOWDVYalZ6RkhtNDNGZmpSZ2RkVWUzRDV3cU9wMEpMVit2cXBrZDl4V1AzdlRFUlhxQVU2Z2oKNkdteVIrQ2FlenZ1T09jN3M2WW9xaCs0cmZWTDNKU1F3ajZxQTZTbnAybERydmhsSXZ3ZFRNaEs2dnh5Y2xLego1a1o1ZkxUeWtZamxydW1kNEhkWU1BdDE5S2doRXBkYkEwRVlsT2hGRisxcDRjOWRtT3FLTW5oVmhHdVR0L010ClZxT09UN0pPU2tZRUpsWlUrZXBYSjVpeTV0bDA5UFpYOGRGSUZrVjNLSlN2c3NxdThnM0d6R2hUajZrVzFYU2wKT2tuMG9LZUpBb0dCQVAyNXUxQ3l3anJpc1Z5bThNMlRiNGxEejZ6YlVZVmJUc1VNL2lCRGJyYTFoYVlGM0ZqZQpzdEVuWXFHK3JtQ3B0dnhMT3Z6VUhKVyttSzJUY2o5VTNDeG1uYmpyWFd6QkNZWVBCbHExQWNvOW9NYy9UclE5ClhUS3BLSDNOcEdJZTBSYXFscDhrLzlnUm5nbEIyZzVSQ0U5LzVtQm5Tc2Z2STZzaDNCUlpWQkp2QW9HQkFOQXQKUm12blpTUHpLby9lcjNlajVWZGZCN1ZzWEhHRmVCWlVRRkwvL3Bia2gxY2FGQVBpUlJLUC9zaVlYcXBXVkNHZApBbThsSmNnRHpvcGw0NFZwQ0xUVDVvWktxUExDK2IzSDVkQVpRV1VXdm5oOEIxejNYemNDZlpybkpJT0FoZEp1CkE4dC9XQ0p6Vms5U1BHSEJyVHgvbnZyRUR0MGhSbGtPKzBTTWphRVBBb0dBSmpVcTVQc1dUcUhHamFwQ0J1TVYKMzdqTGREOU9wbU5hbUVmZG1PUXVydXJrNWx4cGt5UnVEeHI4T2xrcGp6cmZhRnkzMUV6b3hRLy9rOXZwVDJvcgpBYkN1UGFPTDNRMndyblJpdzVRUVlmRW4zZmxGazlUTnpRdzJJY091NW11M2xzODNnVjJqL1ZpaDBNa08yaXNQCnNsRVRVeDhhM3NLL1AwMEpCRE56ZXBjQ2dZRUFoTS9OdEx1Y3NCSEwzcHVRVUlEVXFTZ3NqOWRCSnYraXZJUWwKd1k0bWkzZml6SFFMdnVxVmJLRkhTQXpGb0dDUkxoeXdWOTVZTzBJS2ZBdEMyM05HSmE5bXk5aEg3eERyS2VPbApQMTFOZGtQTFlxeW1PZTVyNVhtR1R0UVdYSHNiWlVQZzBldzllMFVnRkZ6L3Z0SkVSbXVaTHB6MGFxbDI2d3grCnk1M3NJWXNDZ1lFQTJJVFVlZFQvdElucTJpTXNrR2s2ZExxWnZNWDFsVG4rb0o3ZUZFR2xkUGxuVGlzTFBvZ1AKVWRyTzU4Z2xPRHU2Mk9Qbm05YTJlVEJqTHhHa2o0bGdBK0xGT3g2R2U3V2NnR2MvTmt3UWNOTWUvNHFiUThPKwo4QTkxZGRqdzl1NXVZVFN5a0VqVHpxR2FOeVViQi8waHhheXZXY3BCUm1sZXFNOU0zc09LODRFPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy-validator-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "linkerd-policy-validator-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-proxy-injector-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-proxy-injector-k8s-tls-linkerd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "lowo-testlinkerd-proxy-injector-k8s-tlslinkerd03zXDqg7O4ouiOn
        "tls.key": "lowo-testlinkerd-proxy-injector-k8s-tlslinkerdZiWLSXEQU5gxLi
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUxsUXVZVlBqeVo1N0dhcWgzWXFJM3d3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBNE1URXdOalF6TWpOYUZ3MHlNekE0TVRFd05qUXpNak5hTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRRGduL3ZacVo4NGdEVWhuRG9OdEQxYU1zZXBReFFhTnRDcWdWR3lIOFZSZm9ySwpXMTdRcko0M2lvd3JvVXUzaWpQY3JPZnlQdFZxOWZSMXNlSCtBenY1WlFpczRQYUlNUFZ1b1AxV3ArK3pPTVpyCmJydE01TzNIdUNCcmVXYTRaU2ZoeXRkNDhxMzhEdTVnQ1I4WFByKzUwQU5BN2FVaUYxaG9uK3MycUVMbHY3b0UKL01FblR5eUhIUWhzNWFkajVMdWR3bXpBTXI1cGo4ZGlXc2d4WThLc0owYU8zVGJIUmJXTkRZTU9MZFNzZ3pFKwoxRmsxdTdMSWljRG9GQm1oRENZZVZzTURLYTV4Znk4TVUrU1FxVEpKVHRiUXNBTzdiQU5KTW9mMnJEZUhTeTU3CnhSRFBTczZNTjU2MXNadVdHaHdJQmpzZHZCMU5UcXp3ZFo4ekhjNWpBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ0NHNaNlNnclRSK01xbExON3F3bW9kMXplTkF1dDh6Q3IKYkc3NEhpdktIZ1Zhb3JwOUp1SlJKU0VEUlVQLzdocmNMd0pjRUlMTllGZHhmalpKYllBMUFnSmZkdUt2WDM0Ygo1SC9hc05QRkVzSTdIOWw0cmY3TDVHbjJ6QWlBR1k4WFpKcXpxclE0eGIrdWE0V3p1VGQ2VHRoSm9pMU96UTBNCnh3UWRFbHVBWTNYVzJZV2VrYzJub0FiRlFvNCtQK3VVcHg1NE8wY0NCa0xCM2NuSmtzZ2RRejViektXVzFITUkKQmRQekN3c0xTK1dPK2doTWRWSkVuV3hWY1krNTZpRjNCM2FQWG9WL01RNU56WEs5c2FBNVZhYWJKbjVYd2FqRAplR1l4QlJvZ0R2ZTNnaWwwbERDbnVxMHZZZFp2aktDd2dwRUxhaVBWS1dnZmxYcVR1bFVWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNEovNzJhbWZPSUExSVp3NkRiUTlXakxIcVVNVUdqYlFxb0ZSc2gvRlVYNkt5bHRlCjBLeWVONHFNSzZGTHQ0b3ozS3puOGo3VmF2WDBkYkhoL2dNNytXVUlyT0QyaUREMWJxRDlWcWZ2c3pqR2EyNjcKVE9UdHg3Z2dhM2xtdUdVbjRjclhlUEt0L0E3dVlBa2ZGejYvdWRBRFFPMmxJaGRZYUovck5xaEM1Yis2QlB6QgpKMDhzaHgwSWJPV25ZK1M3bmNKc3dESythWS9IWWxySU1XUENyQ2RHanQwMngwVzFqUTJERGkzVXJJTXhQdFJaCk5idXl5SW5BNkJRWm9Rd21IbGJEQXltdWNYOHZERlBra0treVNVN1cwTEFEdTJ3RFNUS0g5cXczaDBzdWU4VVEKejByT2pEZWV0YkdibGhvY0NBWTdIYndkVFU2czhIV2ZNeDNPWXdJREFRQUJBb0lCQUFyYTBGSFpaNDlVYXJ6ZwpEdElndHFKSU4rdlBDUWFuUlhnbjNhbk03VDBkNzFrT0IwdndPNGtWa2VaOTJlblpyTjNxSVI5TXVBVitNejBJCnhwSCsyQVFhUk13TjV2djMyYlJwNVRRdDAyQ0d5dGZnTnY3bFJUUlVpb1NIRGxhMDFMT05tTklJY0MzeERzWG4KU3ZCVm9QQTZ4QjE4SG5IQ1RReHBSZldUTmdCaUowYzE4UmNxMUViR2wvQUZHckIrMTZCZEdWK2dpOTR6MDNHaQo5R0ZkZHNPQTdRdzFsSk9iaDZ3OVhqZFZOU0l6dC9FbSs4eEd3VHdpaC9IQkZVQ2hib1g3djhQMUZtT0wwN1B2CitBd2NBTWJiNDN2c2F0TFlJVDc0SDR6U2xWZ29raG5zVDlaellwRkV4WWxsTktFQ3pOVjlQQXdDWVBZYmJvc3gKYzFrQVdIRUNnWUVBL0ZxejFnSUVQT1Z2OEJ6YXJ5bFVIUnJWSEt6WTdyeWc5Q0VzZ2ZSRDhoRU5zN3l6aWtEQQpVaXI4U2czaXpONldzNldCMkxxTVBpWGlaMlc2ek8wZEFobTNUNVFtRkx6NGdSMUt0OURGZmVaSTlyeTAwNExDCjFtU01uMlJHRlFtTHBoL3U0Mk5KeWN2RGp1TjRUajhua1hmNlhCenljWlVKdU1JWDUvQ1dueXNDZ1lFQTQ5NjYKWW5KK3k1eVlHZlhvOWxJMHlFa25OZjBNRnhKbllHNzdMNmtNdWt4a241VHJ4YytxdGU3TGxveS9aS1lxWmNOeApUYkpabkFLZlFvZUZIR00wOSs0aERDYnNJWFJUcHo1Y01UQm40SFBJVlUxTTJjb0EzMTJnU2ZzUlU2aXRmRnIrCnNjUURoZDc3Sm9XZFNwTGtLbGpwamVoQ3d3cWJaS2FsblRIbXNha0NnWUVBNC9JU1M1ZGF1SjhPODdjOG1jZ2QKSUlVaVIxcWlRVlBGbDM5M3NwTXY1TEllekdJQlV6cVYvaUt4N1RxSnlVQ3VvK3MyVk14ODdZNU82ZExzWHpzMwpYclJYN3R3Rlllb29Gb2ljKzFqcmE0UGVHSEh3YkxYS3hObmlZLyt4aGtNdkQ0bjh3UXpvbEEwb3dpTWFncU50ClhHc2hqSjdoS0ZQVmlqeFlWN3ZzY2kwQ2dZRUE0c0hsRmt5NzB1RU5GMkI0S0k4YnlXZktwbFlmYnVJNGoyVkIKZjJjcHJFYVRKNTdwbFJxWDFaNUJhSnE5WjJwWDdKYTJMTXhia2YybUFHMmR6K2NGY2VlOWFUdGVaZGc5MnNNYQp1VFJqV3ArOWJ1MlNtWFFFdEVLV1hLaUUwSXlkdjQ5SnZ4ckJLcm4va1pFTE9vZThtRXVNZDFQM0ErS05TbmJ2CmZlT0huNmtDZ1lFQXcrU3hManc3OWpFUjBWRzJrSTBaZkRCaXF6cEVjMmVyRkZOaFBnZGszSWtHSkZEZkF5S00KTEE4dEdWNDNkaEtpNWJtUytzeVMwYy8vQWJVTXBwbDVWb0tZekRhMjN4RkpPU1dEOXZYUkdXcXBMVVRwaXpEaQppVDdyQ253V253WHJ0YURBaUk5RE1zRU9mT2hKc1E0SGF0N0ZhQ2FLY0o1ak9SVDYzZ2Z6cXJRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "linkerd-proxy-injector-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-viz-ingress-auth",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-linkerd-viz-ingress-auth-linkerd-viz.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "encryptedData": Object {
        "auth": "lowo-testlinkerd-viz-ingress-authlinkerd-vizvt7qwLITAlWOYY5****************************************************************************************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"auth\\":\\"YWRtaW46JDJiJDEwJEEwS2pIb2oydlNhMFhOeFVyU0RLbGUzcHk5SHE5c2xVbG51M3ZUeXJnWlZWa2d2cDJZMWUu\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-viz-ingress-auth\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
          },
          "name": "linkerd-viz-ingress-auth",
          "namespace": "linkerd-viz",
        },
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "tap-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-tap-k8s-tls-linkerd-viz.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "lowo-testtap-k8s-tlslinkerd-vizwyFO0ZUKxmx
        "tls.key": "lowo-testtap-k8s-tlslinkerd-vizBbQLoM1PumSAz
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRQzQyZlBjc3B1VXhUaE1DdDVhMTE5VEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURneE1UQTJORE15TTFvWApEVEl6TURneE1UQTJORE15TTFvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHJYb3dJNWdpbUtmbEVOdU9QMjA0MnkKbUJpV0tYQjl6R0pjdEU1RHNyV3pZMHFySkFsMHlOQ1p4aFZpRDFCWUFFd3hGODcxdnpPdjdpUXpVcVNLTjJ2ZQpmOFZZNkNUejZjbVVYa1dyWmZaMHNORVBnSzYwcjVIM1ZaT3V3eFZta3UzL3FXT2Q4UFVxYUN2MWk1eHg1R3hRCmNXZmFSVWdWbUZQRHB5bUhvcEcrZlBkdmZDMWRtc1lJdEloYllVNGw0YWNvbHlUM3RWOG1tcFpKVjVqdWdzR3QKUnVDWTlucE1vZ0E5aUwxOWM5V0dESFFTbWVlWlZsTE90NG5BLzhOWEhMZlpiZDc2TG9lUUF3dGVPaXJZaFU1dApLNHZHNlZHMnc0RWh3ekpBeUhFMkJ1NHRnNnNrN3huOUFqcjB1TjJwNlV5QjFnR3paOTd2cWNyMC9vSkFPMThDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBM3UxT1ZINEVPaEZSRU9PMEp1TzZEY2FJeDZqdnhXClRVR2ZQeS8rdTllcE9oY0pGSyszTnJFR2E4SDVwU0dvVWRVTitvUS9MTVZ0REh3ZnU3WnF2Y0NXWDk4bmtHaUMKOTVHYnRNeENpY2hjS2gwdkppcDdHT3VKeENQelpzRkJUTEwxWHJFalhIYmI3YzFtZnNzWTFGRFBtOWltSmVsUgpUb2lLQlZsV1o4akhaQWQyZ28yeCtlWHNFY3hQTVdFTFB5dnB1N1gweDkwaEtxRlp4OWRyR1RwZkdMd21nNXB0CkwydnIwM3FUVzJPdVdkMU5DMExDaWE2SFEzSlo4UnZJN2FDRUNVZkhqb0lsaGM4d0RkUytEbjdxM0RCQVh3SXUKRlREMlk4eGVZWlZqNzFKM3pRcjNMdGxScnd1TmlZbnhwSEkyYlRZbm90RkpwZjdkZ0w0ckVDaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdXRlakFqbUNLWXArVVEyNDQvYlRqYktZR0pZcGNIM01ZbHkwVGtPeXRiTmpTcXNrCkNYVEkwSm5HRldJUFVGZ0FUREVYenZXL002L3VKRE5TcElvM2E5NS94VmpvSlBQcHlaUmVSYXRsOW5TdzBRK0EKcnJTdmtmZFZrNjdERldhUzdmK3BZNTN3OVNwb0svV0xuSEhrYkZCeFo5cEZTQldZVThPbktZZWlrYjU4OTI5OApMVjJheGdpMGlGdGhUaVhocHlpWEpQZTFYeWFhbGtsWG1PNkN3YTFHNEpqMmVreWlBRDJJdlgxejFZWU1kQktaCjU1bFdVczYzaWNEL3cxY2N0OWx0M3ZvdWg1QURDMTQ2S3RpRlRtMHJpOGJwVWJiRGdTSERNa0RJY1RZRzdpMkQKcXlUdkdmMENPdlM0M2FucFRJSFdBYk5uM3UrcHl2VCtna0E3WHdJREFRQUJBb0lCQUhrbW43VXVrdjdhcFlOcgpFV3NIdmk5UUVaMUhxUUVmSU9yYXo3TTc1R0k3T25QTk91WEN5dit2NWlneFdGcXhaU2dDWVR5NlRrdDJsVVQxCjNtMkFqZVVzOWM2Q0VxejdWNmwwd2hnTXhtV2pUbytRck5FYnFnaE14em1taFNxWVEwZDlrbGxjclVSYlJnYlQKQmI3Z2Zzdlk4Vi8wd1IyM212a2RrWU8xUmkyWHFXODA5eGp3MDhLQnd4dHpCRTBRSE9UQ1ZnOGhzakIrTmQzbgpQQm9DVWQxdVNsTmh6QWw1MmJCc2dMR1JObUhOalloVWpkNDJSVUZybnhIWlNNZldkMXQ5ZFFVc2pjTjhjREJSCkgyTmdxckNnVWRQejBLUCtBMDJJT0ZNeTZyVGNQUmtiQWlEdkVKMnlDSGFhaFc1Y0RZaUpubGR3Zm5mZ3JJK2MKeFBwWlJ3a0NnWUVBeklrMEtveVpQSFRBSmJZeHY1SWgyVkFMQTVWbHJ1blB5bTFGTXQ5Q25tZWVMaHU2cEtZRgphakVjTFhPSSthc2pPTlpGSTc2Y2V4cUE0c2hwdUZyQmR3RTV4ejYrSm5PUVd5Q0JDWForWC9Bb3l5SFJDUEpNCmo3cXBrYjV3d0hMaEhvTWNpR0lHdmowdGdPOFNqZ1hHd3BGSWxqR2I2TEsvVzhKcFd0RVB3YnNDZ1lFQTZkcTcKV3k3Wlk0aFJWbWloR0F0Qmp2SlhONmlESWFIdkk4elFpakNuVlJqUFBEckt5dVdNNUxKeW4zUGxjL3dQWHU4RAp5d0E0aXFwcWQ2Ukx3MGpCekR1TXNJVWFtTy9NUENoSGZWMnVXNzlNcUQ3Sy9JQkVZVnQrZEFZUzJrYmh4RkdrCnRtcTRUOGxSZUpUZmkrNC9FZHdkZEVQN0piTEpraUs3R0VYQjhLMENnWUVBanZFQU5SQkhjem5BbzFwZUVCem4KYlFFRWdYK2lMWWlYd0VkM1NlTS9vb2FWeEhGNmtlQzQvZ3JPUDNGejg5QkhjRXhHeTRGRnlMNnYvazNEbktSSQplb3V2dm5BNTRaTjMra2VRQm5YNlFjQU1NbEl5elViUWZNNGQvWTRUTEZ2Y3VqODA3SmRkVVF4ZVJiSk96RlI3CklMVDUvb1V6Q1lBS1BlMXpSWlcvcGtzQ2dZRUFxTUJLaXRZWDBSZEJlcFV1Q21lMCt5NHRlZUNFSC9UMjJHS24KNmRDS0w0SWpxVmJUbCs1bDZYSkwvSHhwaTNUTXNyalBoK0cwNjN0bU1NZkNWRDFnZTd4TkhlUXUrVVd4bjRlQgpieG4zQkFYYmoxMGdwV3o1NnpkVzNPcTFHQVltVE1DTmw0VVRVNS8yeG9qSGQvYUlWSjcrTWpRTU8zdjBzUnVXCjMwRVhYbEVDZ1lFQWg3eFFhOFV1cW5QYmJ1TXlHVmRBenJITjYvYlorRm14R3FobXNHQ1dGK0EzeWtNeUprUWMKZi9HbkZ1ek1tSWRmYkhHM0pOUGMrNEYvL3N3azcyRi9rdFJtTE5Yc3hjUm96M0lNTitkeXE5dGUxeDJSN3NEbApZN3hORjdkTEVIQ2JXQTJuN2Nmc2RQQTJiaGJxNEhJU3VZcW0xWE1yVnF2THlETitjejZJT01NPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"tap-k8s-tls\\",\\"namespace\\":\\"linkerd-viz\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "tap-k8s-tls",
          "namespace": "linkerd-viz",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "tap-injector-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-tap-injector-k8s-tls-linkerd-viz.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "lowo-testtap-injector-k8s-tlslinkerd-viz54h0B9m3yWRpxff
        "tls.key": "lowo-testtap-injector-k8s-tlslinkerd-vizRjfw0ybI7fhFx
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU9aT2Q5cTlhYmJDZ3pya3dLMHRleEF3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBNApNVEV3TmpRek1qTmFGdzB5TXpBNE1URXdOalF6TWpOYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFETnZwOU1ZYUVobE9kY3BtSlZSSGJjbzUwSmFBNXA0bG9hVnV3UnU4Q1RjRndYOXlyc3lOUVpYV1VOR0lQMQpNMGJBR0kxL2RIMlRIY2R6d0RDdU9NRUtCVzJ5U1J4L1hDNFZ2OHJTcnQzSktiSXJkSVIxWUd2QW9uTHVpdFlGCkx6T1dFR1dzS1BjcjkxV1E2WmZIWDdicVl2a1YvUUpWVFluZDNPRkt0NjlFdUFjN09yOXRiNHhJV3JxRGVhTXgKN2RVajNnVE05SG9rcjVRclFIN1M1V3RrL2cvVEo3R0twRS9qeloxenhaN04zOFJOWVpGM2dLT1ozbHhBU3M3bQpKemxmcnlzbHhpc21kVUE3MlFoYWxWeG41RXZSc3Q0UURMNUI5MzA3VmtPNDJKZkFmcjNmbW5yV01IcHpTL0srCitUZmljdDEzT3p5c0lYNTZON1hwSnNUWkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUFVVU5DWWZ2cDhsWFdadnF4Vy8wd1RWQ2J6UGEzSzB5Nk1wOTFaZmRQd1lHS05NUFJkV0tJbEQwMnEKL1ZKM2ZBV1AzcEw4VE1vSCt5VWxxRWdESEtvUDlQZzFCM3Ayb2tFOHNaVDdjSHR4U0orTlNkTzJseEVSV2U0VAovMU5tNC8vWGw1cVhCZWVmbHo2enM0VmMvK0tPL0JnZnpncTViaUhwamVISDhRcVRnVmw1U2h3b1RvQTVidDdiCjN5bitZM25aVStsdThXajQ5MjYvd1d1L2UwUDY0Z3ZJdDhMWDlTMHBJNXZZM3E4clR1eWgyalZFRDVIdmE0TUMKenJGSm5razVWT0UyTVRSYlZ4T0pnb3RkMzYzdmV4TmZJZjNkWWNDRHhMMkNTZE1XZkNhWmdLSGlFeHJDMCtGcgpzVFducHdFZ0llazJBbmN4UFFlbmRwQWdPSlNpCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBemI2ZlRHR2hJWlRuWEtaaVZVUjIzS09kQ1dnT2FlSmFHbGJzRWJ2QWszQmNGL2NxCjdNalVHVjFsRFJpRDlUTkd3QmlOZjNSOWt4M0hjOEF3cmpqQkNnVnRza2tjZjF3dUZiL0swcTdkeVNteUszU0UKZFdCcndLSnk3b3JXQlM4emxoQmxyQ2ozSy9kVmtPbVh4MSsyNm1MNUZmMENWVTJKM2R6aFNyZXZSTGdIT3pxLwpiVytNU0ZxNmczbWpNZTNWSTk0RXpQUjZKSytVSzBCKzB1VnJaUDRQMHlleGlxUlA0ODJkYzhXZXpkL0VUV0dSCmQ0Q2ptZDVjUUVyTzVpYzVYNjhySmNZckpuVkFPOWtJV3BWY1orUkwwYkxlRUF5K1FmZDlPMVpEdU5pWHdINjkKMzVwNjFqQjZjMHZ5dnZrMzRuTGRkenM4ckNGK2VqZTE2U2JFMlFJREFRQUJBb0lCQUJSVW5kRWlaSlc0N1JQTwpyVERYenhjR1krSW1FaWFNWTNMdTIrejBySmJsSjNTR3pBc1IzVU9VWXdQa1JFWGFoMGM4SmQ5T1Y0cE9Dd041CkhsWlk3VnBjSnZiVEdxbkxKaEtvSFJhc2lPWHo1Tk0rZEVoVSt0RFNQS0V0dnZCTU5jRENaZ21aRXJPWmdTOE0KcGg3aGFtWEcyZTQrVGhpM3pNUExxOGVDVnlObkRseEg2MXA3QjJ0VEQrbno4TVBnMEkyNWtoazNMbHBia08zSQpxTElESVhBREQ2dE8xN1IxRmtselZDdXlLalB6ajB5Z2s3U1hUTlpuZTNrcmY0WHdOYjFPSnFBTGxsZkJqdnNUClZXRnlNZ2lrY1dhYmoxbHVScEFKRGJGaytTMWdaMnZuVjhWQ1pXdzBNRFZpanNBSm9EZVFBcDYwZHRrSWY2UWwKRmo4bHZYRUNnWUVBei8wQmJkdXluV2ZQV0RUUDU3ejV5aFJoMG5FRzg0VWV0RFhsSGRLN0ZLNVVFODEwcTY2dgpxRVZRZjJPWTRFNUZmT2tOamRCNVJmWVgyN1J0TVhjLzVFbStwV0JXM0lWU05DdU9pTUVuNHJJOU0wT2NCUFhmCkU4U2pIblBDZGZ4VVgyV0ZJcjlZM3pNM0p6bEVoT1R0NE5sNEpNWmhqV2J4UVpVSzZrOGM5RDhDZ1lFQS9UMEcKNUY2NmZIWXdMWFJOU0Fqa3NES3BsYlUzWXRPcm9DNkkwZlBXdHJwSDloUDlPS1RsMTBXUFpVRzduSk9kVUJUTQpMSTlaaUd4cmdmR1VPQVVoWUVDakM1MHZMRmZGcFpOSWJNQ0FKNGdzZUdvb1VvQkMyc2ljWjlxYTBVZkNmU0JjClNZTFd4UFk5bmgxTXJtdlJkUWdGaTYwLzdhdGNmRWJkbzc3aG9PY0NnWUFjWUFzSzN0YytiRVE0WjNRWnpJbFQKalhaUERJYURRSjBRdnUyVUpRVEs3SUdoOWZ5OTAyWTVrY05LcmQ3VWN6azlzbG5jQ0I0VGNtQ000OCtsMlB3SgpmQm9iVzhwZDZYNXVpYWEzZDRxbWZlU2xrc3E5VG9IeG8za1JsWDlwTTFTYmN6RTNyVjFGamlvdkdyd0RXV3d1CnFkeWZQOFZkVWpjRjJIeVZ2TmRaWndLQmdRRHhuMy9xK0NPUlM2ZU9SekRSc1lLYVI4eWRSa254WnF1VDY3S3EKT0xFK3FpQ3RQOGRWZTZpOXJPWTBJL0xoWThzdXRKbFhUdk9MZ245VmZlNEJRWXZsN2VaajEzZENKUUUxaVlFSwpHdVpzVWJhMHNmMkZNbElYdEYvZmk2bzZVdkRVT01NMWRMeDlNOEg1RWxXdStycmdvbVhBTHU4WFUzQ3NOMldVCnJqVlVNd0tCZ1FDZlhEOE1yMElIWGR6cFlYL1VnTDQ2REVCUjB4aGt4YTUvQUl4c3Frcjgzeldad01FQ1E1dFoKdk5QZW9KUWVrMXI4M3ZRNHVpVlVLRUk2NmErU05wbnhDbDh0SVIwdjFwcGkyYnRVdDdrdEFjZWtnN0EwL1R6agpkSHc0eDBoSVVTb2pEYTQ1OUNRMk0zcXRBeHdvYXNlNERyQ3lBbmpKN0QxdWJEQ1d5Uy9Icnc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap-injector-k8s-tls\\",\\"namespace\\":\\"linkerd-viz\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "tap-injector-k8s-tls",
          "namespace": "linkerd-viz",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-mongo",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/sealed-secrets/sealed-secret-graphql-mongo-applications.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "encryptedData": Object {
        "APP_ENVIRONMENT": "lowo-testgraphql-mongoapplicationsSVI0Iab3IA5ltyv********",
        "APP_EXTERNAL_BASE_URL": "lowo-testgraphql-mongoapplicationsk_R8rTSrm2WfRKj****************************",
        "APP_HOST": "lowo-testgraphql-mongoapplicationsWMnAjDd72nstb_W************",
        "APP_PORT": "lowo-testgraphql-mongoapplications20RMvAN6qYpxTwM********",
        "MONGODB_HOST": "lowo-testgraphql-mongoapplications95J3NPf4Q8qHZ7u************************************************",
        "MONGODB_NAME": "lowo-testgraphql-mongoapplicationsRlN54aT_Qh6Rvkd********************************",
        "MONGODB_PASSWORD": "lowo-testgraphql-mongoapplicationsFsqBTs4oreciZGl************",
        "MONGODB_PORT": "lowo-testgraphql-mongoapplicationscXjf996AjlQKkKC********",
        "MONGODB_ROOT_PASSWORD": "lowo-testgraphql-mongoapplicationsvUTH4T_SmLBuS0W****************",
        "MONGODB_ROOT_USERNAME": "lowo-testgraphql-mongoapplicationsgxCermbNbO2pJUX************",
        "MONGODB_SERVICE_NAME": "lowo-testgraphql-mongoapplicationsO4869hxL4tQM5el********************************",
        "MONGODB_STORAGE_CLASS": "lowo-testgraphql-mongoapplicationsO4Yq0EPhkQvT5gm************************************",
        "MONGODB_USERNAME": "lowo-testgraphql-mongoapplications9VdMD6QbLICnmEc************",
        "OAUTH_GITHUB_CLIENT_ID": "lowo-testgraphql-mongoapplicationsLifAwqIno_fZaXL****************************",
        "OAUTH_GITHUB_CLIENT_SECRET": "lowo-testgraphql-mongoapplicationsWChFEgpKKXNNmGk********************************************************",
        "OAUTH_GOOGLE_CLIENT_ID": "lowo-testgraphql-mongoapplicationsv_jebZTjwulQwd2************************************************************************************************",
        "OAUTH_GOOGLE_CLIENT_SECRET": "lowo-testgraphql-mongoapplicationspcwUrdgfwGW81Ou************************************************",
        "REDIS_HOST": "lowo-testgraphql-mongoapplicationsntqnXlSPjwCxJQ6****************************************************",
        "REDIS_PASSWORD": "lowo-testgraphql-mongoapplicationszqeOuRuruVQbLtP************",
        "REDIS_PORT": "lowo-testgraphql-mongoapplicationsuW4nRpxRI08Dyuz********",
        "REDIS_SERVICE_NAME": "lowo-testgraphql-mongoapplicationsWqDx6G6B1rZHn02****************************",
        "REDIS_SERVICE_NAME_WITH_SUFFIX": "lowo-testgraphql-mongoapplicationsJc07tWNBF6PjR11************************************",
        "REDIS_USERNAME": "lowo-testgraphql-mongoapplicationsXWynLYviYd3KtDZ************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"APP_ENVIRONMENT\\":\\"bG9jYWw=\\",\\"APP_EXTERNAL_BASE_URL\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\",\\"APP_HOST\\":\\"MC4wLjAuMA==\\",\\"APP_PORT\\":\\"ODAwMA==\\",\\"MONGODB_HOST\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZS5hcHBsaWNhdGlvbnM=\\",\\"MONGODB_NAME\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==\\",\\"MONGODB_PASSWORD\\":\\"anVuZ2J1bnU=\\",\\"MONGODB_PORT\\":\\"MjcwMTc=\\",\\"MONGODB_ROOT_PASSWORD\\":\\"ZXhhcmVyZW1wbGU=\\",\\"MONGODB_ROOT_USERNAME\\":\\"ZXhhbXBsZQ==\\",\\"MONGODB_SERVICE_NAME\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==\\",\\"MONGODB_STORAGE_CLASS\\":\\"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu\\",\\"MONGODB_USERNAME\\":\\"ZXhhbXBsZW1t\\",\\"OAUTH_GITHUB_CLIENT_ID\\":\\"ODljMTkzNzRmN2U3YjViMzUxNjQ=\\",\\"OAUTH_GITHUB_CLIENT_SECRET\\":\\"MTI5NDg4Y2M5MmUyZDJmOTFlM2E1YTAyNDA4NjM5NmM0OGM2NTMzOQ==\\",\\"OAUTH_GOOGLE_CLIENT_ID\\":\\"ODU1MTc0MjA5NTQzLTZtMGYwODhlNTVkM21ldmhucjhiczBxamFwOGo2ZzBnLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29t\\",\\"OAUTH_GOOGLE_CLIENT_SECRET\\":\\"R09DU1BYLUNTMUpGaXNSSVNnZU4wSS13VGFWam8zNTJ6YlU=\\",\\"REDIS_HOST\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXIuYXBwbGljYXRpb25z\\",\\"REDIS_PASSWORD\\":\\"anVuZ2J1bnU=\\",\\"REDIS_PORT\\":\\"NjM3OQ==\\",\\"REDIS_SERVICE_NAME\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcw==\\",\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXI=\\",\\"REDIS_USERNAME\\":\\"anVuZ2J1bnU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"sealedsecrets.bitnami.com/managed\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"applications\\"}}
",
            "sealedsecrets.bitnami.com/managed": "true",
          },
          "name": "graphql-mongo",
          "namespace": "applications",
        },
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-mongo-database",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/sealed-secrets/sealed-secret-graphql-mongo-database-applications.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "encryptedData": Object {
        "mongodb-passwords": "lowo-testgraphql-mongo-databaseapplicationsJ8ms7unWT23kXHa****************************************",
        "mongodb-replica-set-key": "lowo-testgraphql-mongo-databaseapplicationsFxWskD9Zo4WHBcX****************",
        "mongodb-root-password": "lowo-testgraphql-mongo-databaseapplicationschrhkcvsMKCE7HG****************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"mongodb-passwords\\":\\"anVuZ2J1bnUscGFzc3dvcmQxLHBhc3N3b3JkMg==\\",\\"mongodb-replica-set-key\\":\\"MkozZno3SlRmVA==\\",\\"mongodb-root-password\\":\\"ZXhhcmVyZW1wbGU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database\\",\\"namespace\\":\\"applications\\"},\\"type\\":\\"Opaque\\"}
",
          },
          "name": "graphql-mongo-database",
          "namespace": "applications",
        },
        "type": "Opaque",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-mongo-redis",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/sealed-secrets/sealed-secret-graphql-mongo-redis-applications.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "encryptedData": Object {
        "redis-password": "lowo-testgraphql-mongo-redisapplications0Hi3o0NBjO4fXMJ************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"redis-password\\":\\"anVuZ2J1bnU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis\\",\\"namespace\\":\\"applications\\"},\\"type\\":\\"Opaque\\"}
",
          },
          "name": "graphql-mongo-redis",
          "namespace": "applications",
        },
        "type": "Opaque",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/react-web/sealed-secrets/sealed-secret-react-web-applications.yaml",
    "resourceBaseDir": "generatedManifests/test/services/react-web",
    "spec": Object {
      "encryptedData": Object {
        "APP_ENVIRONMENT": "lowo-testreact-webapplicationsLi05LARh9MsPbas********",
        "APP_EXTERNAL_BASE_URL": "lowo-testreact-webapplicationsjBFrRymKcbhKWwm****************************",
        "APP_HOST": "lowo-testreact-webapplicationsOrVoLanW8IVmUB8************",
        "APP_PORT": "lowo-testreact-webapplicationsr38g8j9IRmEB5qi********",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"APP_ENVIRONMENT\\":\\"bG9jYWw=\\",\\"APP_EXTERNAL_BASE_URL\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\",\\"APP_HOST\\":\\"MC4wLjAuMA==\\",\\"APP_PORT\\":\\"MzAwMA==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"sealedsecrets.bitnami.com/managed\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"}}
",
            "sealedsecrets.bitnami.com/managed": "true",
          },
          "name": "react-web",
          "namespace": "applications",
        },
      },
    },
  },
]
`;

exports[`KubeObject Can update sealed secrets after initial 1`] = `
Array [
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-applications-secret",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd-applications-parents/sealed-secrets/sealed-secret-argocd-applications-secret-argocd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd-applications-parents",
    "spec": Object {
      "encryptedData": Object {
        "ADMIN_PASSWORD": "inital-secretsargocd-applications-secretargocdvFPJE6PjioF2li3********",
        "password": "inital-secretsargocd-applications-secretargocd2iAZ5bEFEz_XIAH********",
        "type": "inital-secretsargocd-applications-secretargocdiGrQV5pcxUhfNBr***",
        "url": "inital-secretsargocd-applications-secretargocdzAOlTNv9Kt99FgU**********************************************************",
        "username": "inital-secretsargocd-applications-secretargocd5Prs76ECWRkDten*******",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"ADMIN_PASSWORD\\":\\"jungbunu\\",\\"password\\":\\"jungbunu\\",\\"type\\":\\"git\\",\\"url\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"username\\":\\"Oyelowo\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"argocd.argoproj.io/secret-type\\":\\"repository\\"},\\"name\\":\\"argocd-applications-secret\\",\\"namespace\\":\\"argocd\\"}}
",
          },
          "name": "argocd-applications-secret",
          "namespace": "argocd",
        },
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-redis",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/sealed-secrets/sealed-secret-argocd-redis-argocd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {
      "encryptedData": Object {
        "redis-password": "inital-secretsargocd-redisargocds_qo9K7QILsQMGj****************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"redis-password\\":\\"dGw0RVN2WTlrTA==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis\\",\\"namespace\\":\\"argocd\\"},\\"type\\":\\"Opaque\\"}
",
          },
          "name": "argocd-redis",
          "namespace": "argocd",
        },
        "type": "Opaque",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-secret",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/sealed-secrets/sealed-secret-argocd-secret-argocd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {
      "encryptedData": Object {
        "admin.password": "inital-secretsargocd-secretargocdBOSdATU8hIzjNuh********************************************************************************",
        "admin.passwordMtime": "inital-secretsargocd-secretargocdIiMU5AQbt8Ii0SB****************************",
        "clearPassword": "inital-secretsargocd-secretargocdl3inZLQd0JqsLtI************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"admin.password\\":\\"JDJhJDEwJDkwcG1lcUgvWlU1bTZ4TnR6b3NYQy5TdjAybm1OM3NlT3ZyQVFOSlg4a2JQTWpIM25ueExp\\",\\"admin.passwordMtime\\":\\"MjAyMi0wOC0xMVQwNjo0MzoyOFo=\\",\\"clearPassword\\":\\"b3llbG93bw==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"app.kubernetes.io/part-of\\":\\"argocd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-secret\\",\\"namespace\\":\\"argocd\\"},\\"type\\":\\"Opaque\\"}
",
          },
          "name": "argocd-secret",
          "namespace": "argocd",
        },
        "type": "Opaque",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-sp-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-sp-validator-k8s-tls-linkerd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "inital-secretslinkerd-sp-validator-k8s-tlslinkerdSp1COB7GzzdAv
        "tls.key": "inital-secretslinkerd-sp-validator-k8s-tlslinkerdy7oz_b9PsacZZPf
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUkrYUVCL0EzcmRkK0VDak5VYzhsYlF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3T0RFeE1EWTBNekl6V2hjTk1qTXdPREV4TURZME16SXpXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxwdU53cFZ2dEcvUkVoUXpCM1JiK1BvWU9iVTVOck5iSUJKTU4vNjlWY3FucnYweWQ0SQpjUllyWVIwMjJ5NE9UODk5THVtOHpiVGZDOGVPTXlnaFZ0akFwb0xzcWdtMkkwV3FIcVNtQ0NuR3l6cnJLbzNrCnNCODdsTmJDV1k2ekcvV0J4NFRpbFdsTzBiSDB5elM3NmRrR0d0eW1YNlFwLzdYV2kvMEUzblRhaWxYVHZ0M1kKcFpNTDhZREFQdjJtR1FHU0hhUkQxNG9LRTJDa2tEVm5mU0g4UU5Vd0sydys5cEY1aW82Q0oyTXRIeWhIZmF5NwpaUnBXK0hxLzYxVFhVTTVYR0hPNlpoZ0dLeWEzbnlseXhLa3lFR1QxUFZkMWtXUEhyQ0lXWjZoelArb3dZNzJXCm1NRklwbXJTNExDa0RTSVRBdW03RnpoMGZ0c2dJYmErUk9jQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBNVgvRnMwbXF0R1c4SjVhMVViTVFrTHpuazIzbzZCWkxhMnlydjBxbTYKSCtrdW5UWkVzMnAzUGR0SDJYeXVhVytrRDFmbmRyR2haRHErRkt2Qnc4ZDlmUERLMXBiVHU1RnprS1lrUU9CbwptajJtZVdJUjdMUlJ1UWFIbnJTd1BUQzNlbWtWRVpQMjBiaUNSclhpV3RLdWtaeEZyTmdrbXZwY0d1VWZPWlBUCkNmU0s1NzM4VXpUSVIzWWxHOXExdnVBbVcyQXNrYXNIbTE3M0ZLN2x2R3NwaE8wVTdRY3JFeEJiVmd0SUZ0Qk0KM0tJYktBZmg5VUs2aW1DNGpsazRlVFBicTZSTHlmNFJoK3Rwb3pWeTlmK295cDZ5eEVlUWwvMk5jNU1mQmxyOQp3MWtDUTczN2k0R1QzMXZmRDJST25JOU9ZZFMrV1VDSWs0dnlVL1l6eVdBawotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdW00M0NsVyswYjlFU0ZETUhkRnY0K2hnNXRUazJzMXNnRWt3My9yMVZ5cWV1L1RKCjNnaHhGaXRoSFRiYkxnNVB6MzB1NmJ6TnROOEx4NDR6S0NGVzJNQ21ndXlxQ2JZalJhb2VwS1lJS2NiTE91c3EKamVTd0h6dVUxc0paanJNYjlZSEhoT0tWYVU3UnNmVExOTHZwMlFZYTNLWmZwQ24vdGRhTC9RVGVkTnFLVmRPKwozZGlsa3d2eGdNQSsvYVlaQVpJZHBFUFhpZ29UWUtTUU5XZDlJZnhBMVRBcmJENzJrWG1Lam9Jbll5MGZLRWQ5CnJMdGxHbGI0ZXIvclZOZFF6bGNZYzdwbUdBWXJKcmVmS1hMRXFUSVFaUFU5VjNXUlk4ZXNJaFpucUhNLzZqQmoKdlphWXdVaW1hdExnc0tRTkloTUM2YnNYT0hSKzJ5QWh0cjVFNXdJREFRQUJBb0lCQUc4a0VaQUp1aTZVMWdJKwptTkVWOEp4d0JvVFdXbkRPa21hUU82RHJuYU9QZHY0YVd0WVJOa20vSnJBaDZkeTFENE5rMzdqY284MjJRdkYrCnBxUy82MlJneFdPNzcwckcySlJKYk9jL1RCS0x2dENyTGIxVm5tR2dSWVVhYkFXVVpaQ2hBKzhHbllnZ1F3YlMKSnVxVE5ELzdVYnhGT3pORkRucTdJczErUDVodFFzNlA2U1NFTEpMNG1hK3l2NGdETFIyZm5QbUZIZCtia0xlSwozb3Y5aE1nVjBRRHZCbVVVaFlnZS9icHJCc2ZMd2QxaXRlcHQxNXRGT1RpVWs2NnI1WlFkZlhDY1BmTGd3bExCCkc0MlZLSFovNkxEaTR2Q2U4cXpoVW9KYzExaFlnQnZWYks5WVk1MEJTL21tNllvZmROWjlvMmFKNDk5cjF6R1cKR1FHKzBTRUNnWUVBeGFvWlArZXU5OU1FZmVPU0FVRVV4Zy9udlJiOVhaSnBMazQ0N3RQd2lRbkRSVTUxZXZzVAo0dHhjeWxhYStBNFJNdlVPcURqVTNnUEdKN0lmckVjY3JJMXJZbkZFb2xXSVBiR0xCMWRTOWMzejhBYTJHdkVLCitLdFNTWVYvQ1B4MFlNUHRybXMydmdwQVluRTJGZWU0YjFvVlBiNDZNQTRRcWtnNWtkdzcrKzhDZ1lFQThYTmYKcC8xU2k0b1ZJT3ZseWxoSk52SjVKdXhTcmsxN0gvOFgvdWM1UngyS0J5SFNzRFNiQTEvMFk3Q29aSHJMYkQwTAo5OHJxekxGa1g5WHhENml1ZmU5MzE1OVo4L0Exb2w3OTMzSk1Vd2hTQXZTK1d4Uy9yVUczamdRMjJ4RWN3cThUCmwvTDZlR0dpM2tBU0R1SVRLUFFMemxlUTdXVVRHZnJndWZrWXJva0NnWUVBcHlSTGo0OGdrNnlhMnJ5cEJHaDgKNFhJbm1ld3J1SWtLYWI1NVEvSnhMZC9VZi9GMVE5VzFuaHFLV0FwZHBpMTIrNmplaVA3dGVRS2w5NEVXYVQ0RQprQ0JSVW4vRzhxSHl2NEEydUxGdGxDNWYvSElnWUsyOGdrT1VKRmsrNzJGU0kxVHAwWmdWUlNNMENFb0Uyd2NECkhSMkdZcHhOWmI4dTlsNTJWOUZyNDM4Q2dZRUF5cE02K1Uydm1NVmtUcmU4bHRVVnNGVWxVb1BLSnRWNDdQSncKWm53RzhXU1dMcit3N2dkazJ5TUJmelp6UWNKSXMrcFFCVGtwWUUyZzRrczBNaWdiSml2cEIyNTU0UkZ6WG1TRwphWmVTODhNeVU2cVZud004Z2hkMThtQVV5aDJFWE03WkNJNWltT2VKNXlBb1JuWmxEdUlhbWFlY1A2Q2lzeFJxCndYMTl1TWtDZ1lBaE1Dc2t3aWplbUtGcUd3SnBkeUJ5bWRsemhZcEhaYlN5cm96bEZ3bUpFeHhWVlViVTRSaUEKY1lQOUx4bFZFQ0dETnBCK3NXdnFBdmtEKzRyelRpMDk5OHhWYW93QkNzMVZ1VU9ZMUs4T0FWU3hBVys0dWh0dQpZUWtkN1dnUHB1RS9ybkhIdmNnV29nRnpSQVB0ZVFHRzNpM1dNODdPOVFsSk5PcXVGbDFWSGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-sp-validator-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "linkerd-sp-validator-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-policy-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-policy-validator-k8s-tls-linkerd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "inital-secretslinkerd-policy-validator-k8s-tlslinkerd9MZnbTkqWcSp8Ss
        "tls.key": "inital-secretslinkerd-policy-validator-k8s-tlslinkerdIhRv4otOYFSQr2g
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQUpxemFWRDJFQjluK3hzS3ZxSHV1MzB3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa2JHbHVhMlZ5WkMxd2IyeHBZM2t0ZG1Gc2FXUmhkRzl5TG14cGJtdGxjbVF1YzNaagpNQjRYRFRJeU1EZ3hNVEEyTkRNeU0xb1hEVEl6TURneE1UQTJORE15TTFvd0x6RXRNQ3NHQTFVRUF4TWtiR2x1CmEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeAp3MTRGRzA0di9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLCm9lTXdnN0IzV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnMKUnJqY1lpeXphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWApnWUFEUGloT1JVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrCkRuck5yUFFTaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJvM0F3YmpBT0JnTlYKSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdMd1lEVlIwUkJDZ3dKb0lrYkdsdWEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwCmJtdGxjbVF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ3VvelhFMWJZMkR1VHZLdzcya1NoQVE0c2YKeiszZGlYdEhSbGpiYjNKZWIyNFRWOUVqZ1RybmhsYlpFaG8rcFA5ME5kQlIvQTRvVHdXQjdVUFFienp5eHQ5aApCcHZmVXQ1N1pyQ3hQdGs5RXJVdXR2T3EvU2NqNkNDd1VBUjZ4b2pybnJWQzNqY3ZIZEp0TXBNNlA3QnlQVUtxCjZ6c1dVcVExT0p6Tjg0czV6TDRoMG9YZDA5T0RXOC8rNWRFUVBOY1JXM2pHallvdHFoUnYzVm5aSVVYejZlTVcKaXVveFlrTDZNc2NyNHhGZkROOXBDVnkyVWIvV0JUSGVQd2ZHOGduaTVlR3ErMjNUWGFCbm1xd2V2aFNZcXQ5eQpOcm9rMzVVZlFHamI2WUFRUVdyQlRxa1diSDZ2WVpYVUYrZGEwL2JrVnFwbDNDZGpJdHhHaWV4bnUxS1oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeHcxNEZHMDR2Ci9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLb2VNd2c3QjMKV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnNScmpjWWl5egphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWGdZQURQaWhPClJVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrRG5yTnJQUVMKaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJBb0lCQVFDcEorTEtuVmZHRGJWNAozbCtTWjE1aGRYQ3hTSUNEaUFsUGRwN3F2SHg3OGI4NkRiWW5qeTR2eUYwY09tY3lOK0xxM2NjU29FT0pTMXc2CndNeDJYempnbUdOWDVYalZ6RkhtNDNGZmpSZ2RkVWUzRDV3cU9wMEpMVit2cXBrZDl4V1AzdlRFUlhxQVU2Z2oKNkdteVIrQ2FlenZ1T09jN3M2WW9xaCs0cmZWTDNKU1F3ajZxQTZTbnAybERydmhsSXZ3ZFRNaEs2dnh5Y2xLego1a1o1ZkxUeWtZamxydW1kNEhkWU1BdDE5S2doRXBkYkEwRVlsT2hGRisxcDRjOWRtT3FLTW5oVmhHdVR0L010ClZxT09UN0pPU2tZRUpsWlUrZXBYSjVpeTV0bDA5UFpYOGRGSUZrVjNLSlN2c3NxdThnM0d6R2hUajZrVzFYU2wKT2tuMG9LZUpBb0dCQVAyNXUxQ3l3anJpc1Z5bThNMlRiNGxEejZ6YlVZVmJUc1VNL2lCRGJyYTFoYVlGM0ZqZQpzdEVuWXFHK3JtQ3B0dnhMT3Z6VUhKVyttSzJUY2o5VTNDeG1uYmpyWFd6QkNZWVBCbHExQWNvOW9NYy9UclE5ClhUS3BLSDNOcEdJZTBSYXFscDhrLzlnUm5nbEIyZzVSQ0U5LzVtQm5Tc2Z2STZzaDNCUlpWQkp2QW9HQkFOQXQKUm12blpTUHpLby9lcjNlajVWZGZCN1ZzWEhHRmVCWlVRRkwvL3Bia2gxY2FGQVBpUlJLUC9zaVlYcXBXVkNHZApBbThsSmNnRHpvcGw0NFZwQ0xUVDVvWktxUExDK2IzSDVkQVpRV1VXdm5oOEIxejNYemNDZlpybkpJT0FoZEp1CkE4dC9XQ0p6Vms5U1BHSEJyVHgvbnZyRUR0MGhSbGtPKzBTTWphRVBBb0dBSmpVcTVQc1dUcUhHamFwQ0J1TVYKMzdqTGREOU9wbU5hbUVmZG1PUXVydXJrNWx4cGt5UnVEeHI4T2xrcGp6cmZhRnkzMUV6b3hRLy9rOXZwVDJvcgpBYkN1UGFPTDNRMndyblJpdzVRUVlmRW4zZmxGazlUTnpRdzJJY091NW11M2xzODNnVjJqL1ZpaDBNa08yaXNQCnNsRVRVeDhhM3NLL1AwMEpCRE56ZXBjQ2dZRUFoTS9OdEx1Y3NCSEwzcHVRVUlEVXFTZ3NqOWRCSnYraXZJUWwKd1k0bWkzZml6SFFMdnVxVmJLRkhTQXpGb0dDUkxoeXdWOTVZTzBJS2ZBdEMyM05HSmE5bXk5aEg3eERyS2VPbApQMTFOZGtQTFlxeW1PZTVyNVhtR1R0UVdYSHNiWlVQZzBldzllMFVnRkZ6L3Z0SkVSbXVaTHB6MGFxbDI2d3grCnk1M3NJWXNDZ1lFQTJJVFVlZFQvdElucTJpTXNrR2s2ZExxWnZNWDFsVG4rb0o3ZUZFR2xkUGxuVGlzTFBvZ1AKVWRyTzU4Z2xPRHU2Mk9Qbm05YTJlVEJqTHhHa2o0bGdBK0xGT3g2R2U3V2NnR2MvTmt3UWNOTWUvNHFiUThPKwo4QTkxZGRqdzl1NXVZVFN5a0VqVHpxR2FOeVViQi8waHhheXZXY3BCUm1sZXFNOU0zc09LODRFPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy-validator-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "linkerd-policy-validator-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-proxy-injector-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-proxy-injector-k8s-tls-linkerd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "inital-secretslinkerd-proxy-injector-k8s-tlslinkerdtHV6Ye7vE0MqqZs
        "tls.key": "inital-secretslinkerd-proxy-injector-k8s-tlslinkerd5AYHYYUhlQS3h
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUxsUXVZVlBqeVo1N0dhcWgzWXFJM3d3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBNE1URXdOalF6TWpOYUZ3MHlNekE0TVRFd05qUXpNak5hTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRRGduL3ZacVo4NGdEVWhuRG9OdEQxYU1zZXBReFFhTnRDcWdWR3lIOFZSZm9ySwpXMTdRcko0M2lvd3JvVXUzaWpQY3JPZnlQdFZxOWZSMXNlSCtBenY1WlFpczRQYUlNUFZ1b1AxV3ArK3pPTVpyCmJydE01TzNIdUNCcmVXYTRaU2ZoeXRkNDhxMzhEdTVnQ1I4WFByKzUwQU5BN2FVaUYxaG9uK3MycUVMbHY3b0UKL01FblR5eUhIUWhzNWFkajVMdWR3bXpBTXI1cGo4ZGlXc2d4WThLc0owYU8zVGJIUmJXTkRZTU9MZFNzZ3pFKwoxRmsxdTdMSWljRG9GQm1oRENZZVZzTURLYTV4Znk4TVUrU1FxVEpKVHRiUXNBTzdiQU5KTW9mMnJEZUhTeTU3CnhSRFBTczZNTjU2MXNadVdHaHdJQmpzZHZCMU5UcXp3ZFo4ekhjNWpBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ0NHNaNlNnclRSK01xbExON3F3bW9kMXplTkF1dDh6Q3IKYkc3NEhpdktIZ1Zhb3JwOUp1SlJKU0VEUlVQLzdocmNMd0pjRUlMTllGZHhmalpKYllBMUFnSmZkdUt2WDM0Ygo1SC9hc05QRkVzSTdIOWw0cmY3TDVHbjJ6QWlBR1k4WFpKcXpxclE0eGIrdWE0V3p1VGQ2VHRoSm9pMU96UTBNCnh3UWRFbHVBWTNYVzJZV2VrYzJub0FiRlFvNCtQK3VVcHg1NE8wY0NCa0xCM2NuSmtzZ2RRejViektXVzFITUkKQmRQekN3c0xTK1dPK2doTWRWSkVuV3hWY1krNTZpRjNCM2FQWG9WL01RNU56WEs5c2FBNVZhYWJKbjVYd2FqRAplR1l4QlJvZ0R2ZTNnaWwwbERDbnVxMHZZZFp2aktDd2dwRUxhaVBWS1dnZmxYcVR1bFVWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNEovNzJhbWZPSUExSVp3NkRiUTlXakxIcVVNVUdqYlFxb0ZSc2gvRlVYNkt5bHRlCjBLeWVONHFNSzZGTHQ0b3ozS3puOGo3VmF2WDBkYkhoL2dNNytXVUlyT0QyaUREMWJxRDlWcWZ2c3pqR2EyNjcKVE9UdHg3Z2dhM2xtdUdVbjRjclhlUEt0L0E3dVlBa2ZGejYvdWRBRFFPMmxJaGRZYUovck5xaEM1Yis2QlB6QgpKMDhzaHgwSWJPV25ZK1M3bmNKc3dESythWS9IWWxySU1XUENyQ2RHanQwMngwVzFqUTJERGkzVXJJTXhQdFJaCk5idXl5SW5BNkJRWm9Rd21IbGJEQXltdWNYOHZERlBra0treVNVN1cwTEFEdTJ3RFNUS0g5cXczaDBzdWU4VVEKejByT2pEZWV0YkdibGhvY0NBWTdIYndkVFU2czhIV2ZNeDNPWXdJREFRQUJBb0lCQUFyYTBGSFpaNDlVYXJ6ZwpEdElndHFKSU4rdlBDUWFuUlhnbjNhbk03VDBkNzFrT0IwdndPNGtWa2VaOTJlblpyTjNxSVI5TXVBVitNejBJCnhwSCsyQVFhUk13TjV2djMyYlJwNVRRdDAyQ0d5dGZnTnY3bFJUUlVpb1NIRGxhMDFMT05tTklJY0MzeERzWG4KU3ZCVm9QQTZ4QjE4SG5IQ1RReHBSZldUTmdCaUowYzE4UmNxMUViR2wvQUZHckIrMTZCZEdWK2dpOTR6MDNHaQo5R0ZkZHNPQTdRdzFsSk9iaDZ3OVhqZFZOU0l6dC9FbSs4eEd3VHdpaC9IQkZVQ2hib1g3djhQMUZtT0wwN1B2CitBd2NBTWJiNDN2c2F0TFlJVDc0SDR6U2xWZ29raG5zVDlaellwRkV4WWxsTktFQ3pOVjlQQXdDWVBZYmJvc3gKYzFrQVdIRUNnWUVBL0ZxejFnSUVQT1Z2OEJ6YXJ5bFVIUnJWSEt6WTdyeWc5Q0VzZ2ZSRDhoRU5zN3l6aWtEQQpVaXI4U2czaXpONldzNldCMkxxTVBpWGlaMlc2ek8wZEFobTNUNVFtRkx6NGdSMUt0OURGZmVaSTlyeTAwNExDCjFtU01uMlJHRlFtTHBoL3U0Mk5KeWN2RGp1TjRUajhua1hmNlhCenljWlVKdU1JWDUvQ1dueXNDZ1lFQTQ5NjYKWW5KK3k1eVlHZlhvOWxJMHlFa25OZjBNRnhKbllHNzdMNmtNdWt4a241VHJ4YytxdGU3TGxveS9aS1lxWmNOeApUYkpabkFLZlFvZUZIR00wOSs0aERDYnNJWFJUcHo1Y01UQm40SFBJVlUxTTJjb0EzMTJnU2ZzUlU2aXRmRnIrCnNjUURoZDc3Sm9XZFNwTGtLbGpwamVoQ3d3cWJaS2FsblRIbXNha0NnWUVBNC9JU1M1ZGF1SjhPODdjOG1jZ2QKSUlVaVIxcWlRVlBGbDM5M3NwTXY1TEllekdJQlV6cVYvaUt4N1RxSnlVQ3VvK3MyVk14ODdZNU82ZExzWHpzMwpYclJYN3R3Rlllb29Gb2ljKzFqcmE0UGVHSEh3YkxYS3hObmlZLyt4aGtNdkQ0bjh3UXpvbEEwb3dpTWFncU50ClhHc2hqSjdoS0ZQVmlqeFlWN3ZzY2kwQ2dZRUE0c0hsRmt5NzB1RU5GMkI0S0k4YnlXZktwbFlmYnVJNGoyVkIKZjJjcHJFYVRKNTdwbFJxWDFaNUJhSnE5WjJwWDdKYTJMTXhia2YybUFHMmR6K2NGY2VlOWFUdGVaZGc5MnNNYQp1VFJqV3ArOWJ1MlNtWFFFdEVLV1hLaUUwSXlkdjQ5SnZ4ckJLcm4va1pFTE9vZThtRXVNZDFQM0ErS05TbmJ2CmZlT0huNmtDZ1lFQXcrU3hManc3OWpFUjBWRzJrSTBaZkRCaXF6cEVjMmVyRkZOaFBnZGszSWtHSkZEZkF5S00KTEE4dEdWNDNkaEtpNWJtUytzeVMwYy8vQWJVTXBwbDVWb0tZekRhMjN4RkpPU1dEOXZYUkdXcXBMVVRwaXpEaQppVDdyQ253V253WHJ0YURBaUk5RE1zRU9mT2hKc1E0SGF0N0ZhQ2FLY0o1ak9SVDYzZ2Z6cXJRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "linkerd-proxy-injector-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-viz-ingress-auth",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-linkerd-viz-ingress-auth-linkerd-viz.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "encryptedData": Object {
        "auth": "inital-secretslinkerd-viz-ingress-authlinkerd-vizkev7l1FeSniNIID****************************************************************************************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"auth\\":\\"YWRtaW46JDJiJDEwJEEwS2pIb2oydlNhMFhOeFVyU0RLbGUzcHk5SHE5c2xVbG51M3ZUeXJnWlZWa2d2cDJZMWUu\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-viz-ingress-auth\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
          },
          "name": "linkerd-viz-ingress-auth",
          "namespace": "linkerd-viz",
        },
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "tap-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-tap-k8s-tls-linkerd-viz.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "inital-secretstap-k8s-tlslinkerd-vizLeXyOxDu8XcIrh
        "tls.key": "inital-secretstap-k8s-tlslinkerd-vizmhMNbKKBcaQcZ4i
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRQzQyZlBjc3B1VXhUaE1DdDVhMTE5VEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURneE1UQTJORE15TTFvWApEVEl6TURneE1UQTJORE15TTFvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHJYb3dJNWdpbUtmbEVOdU9QMjA0MnkKbUJpV0tYQjl6R0pjdEU1RHNyV3pZMHFySkFsMHlOQ1p4aFZpRDFCWUFFd3hGODcxdnpPdjdpUXpVcVNLTjJ2ZQpmOFZZNkNUejZjbVVYa1dyWmZaMHNORVBnSzYwcjVIM1ZaT3V3eFZta3UzL3FXT2Q4UFVxYUN2MWk1eHg1R3hRCmNXZmFSVWdWbUZQRHB5bUhvcEcrZlBkdmZDMWRtc1lJdEloYllVNGw0YWNvbHlUM3RWOG1tcFpKVjVqdWdzR3QKUnVDWTlucE1vZ0E5aUwxOWM5V0dESFFTbWVlWlZsTE90NG5BLzhOWEhMZlpiZDc2TG9lUUF3dGVPaXJZaFU1dApLNHZHNlZHMnc0RWh3ekpBeUhFMkJ1NHRnNnNrN3huOUFqcjB1TjJwNlV5QjFnR3paOTd2cWNyMC9vSkFPMThDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBM3UxT1ZINEVPaEZSRU9PMEp1TzZEY2FJeDZqdnhXClRVR2ZQeS8rdTllcE9oY0pGSyszTnJFR2E4SDVwU0dvVWRVTitvUS9MTVZ0REh3ZnU3WnF2Y0NXWDk4bmtHaUMKOTVHYnRNeENpY2hjS2gwdkppcDdHT3VKeENQelpzRkJUTEwxWHJFalhIYmI3YzFtZnNzWTFGRFBtOWltSmVsUgpUb2lLQlZsV1o4akhaQWQyZ28yeCtlWHNFY3hQTVdFTFB5dnB1N1gweDkwaEtxRlp4OWRyR1RwZkdMd21nNXB0CkwydnIwM3FUVzJPdVdkMU5DMExDaWE2SFEzSlo4UnZJN2FDRUNVZkhqb0lsaGM4d0RkUytEbjdxM0RCQVh3SXUKRlREMlk4eGVZWlZqNzFKM3pRcjNMdGxScnd1TmlZbnhwSEkyYlRZbm90RkpwZjdkZ0w0ckVDaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdXRlakFqbUNLWXArVVEyNDQvYlRqYktZR0pZcGNIM01ZbHkwVGtPeXRiTmpTcXNrCkNYVEkwSm5HRldJUFVGZ0FUREVYenZXL002L3VKRE5TcElvM2E5NS94VmpvSlBQcHlaUmVSYXRsOW5TdzBRK0EKcnJTdmtmZFZrNjdERldhUzdmK3BZNTN3OVNwb0svV0xuSEhrYkZCeFo5cEZTQldZVThPbktZZWlrYjU4OTI5OApMVjJheGdpMGlGdGhUaVhocHlpWEpQZTFYeWFhbGtsWG1PNkN3YTFHNEpqMmVreWlBRDJJdlgxejFZWU1kQktaCjU1bFdVczYzaWNEL3cxY2N0OWx0M3ZvdWg1QURDMTQ2S3RpRlRtMHJpOGJwVWJiRGdTSERNa0RJY1RZRzdpMkQKcXlUdkdmMENPdlM0M2FucFRJSFdBYk5uM3UrcHl2VCtna0E3WHdJREFRQUJBb0lCQUhrbW43VXVrdjdhcFlOcgpFV3NIdmk5UUVaMUhxUUVmSU9yYXo3TTc1R0k3T25QTk91WEN5dit2NWlneFdGcXhaU2dDWVR5NlRrdDJsVVQxCjNtMkFqZVVzOWM2Q0VxejdWNmwwd2hnTXhtV2pUbytRck5FYnFnaE14em1taFNxWVEwZDlrbGxjclVSYlJnYlQKQmI3Z2Zzdlk4Vi8wd1IyM212a2RrWU8xUmkyWHFXODA5eGp3MDhLQnd4dHpCRTBRSE9UQ1ZnOGhzakIrTmQzbgpQQm9DVWQxdVNsTmh6QWw1MmJCc2dMR1JObUhOalloVWpkNDJSVUZybnhIWlNNZldkMXQ5ZFFVc2pjTjhjREJSCkgyTmdxckNnVWRQejBLUCtBMDJJT0ZNeTZyVGNQUmtiQWlEdkVKMnlDSGFhaFc1Y0RZaUpubGR3Zm5mZ3JJK2MKeFBwWlJ3a0NnWUVBeklrMEtveVpQSFRBSmJZeHY1SWgyVkFMQTVWbHJ1blB5bTFGTXQ5Q25tZWVMaHU2cEtZRgphakVjTFhPSSthc2pPTlpGSTc2Y2V4cUE0c2hwdUZyQmR3RTV4ejYrSm5PUVd5Q0JDWForWC9Bb3l5SFJDUEpNCmo3cXBrYjV3d0hMaEhvTWNpR0lHdmowdGdPOFNqZ1hHd3BGSWxqR2I2TEsvVzhKcFd0RVB3YnNDZ1lFQTZkcTcKV3k3Wlk0aFJWbWloR0F0Qmp2SlhONmlESWFIdkk4elFpakNuVlJqUFBEckt5dVdNNUxKeW4zUGxjL3dQWHU4RAp5d0E0aXFwcWQ2Ukx3MGpCekR1TXNJVWFtTy9NUENoSGZWMnVXNzlNcUQ3Sy9JQkVZVnQrZEFZUzJrYmh4RkdrCnRtcTRUOGxSZUpUZmkrNC9FZHdkZEVQN0piTEpraUs3R0VYQjhLMENnWUVBanZFQU5SQkhjem5BbzFwZUVCem4KYlFFRWdYK2lMWWlYd0VkM1NlTS9vb2FWeEhGNmtlQzQvZ3JPUDNGejg5QkhjRXhHeTRGRnlMNnYvazNEbktSSQplb3V2dm5BNTRaTjMra2VRQm5YNlFjQU1NbEl5elViUWZNNGQvWTRUTEZ2Y3VqODA3SmRkVVF4ZVJiSk96RlI3CklMVDUvb1V6Q1lBS1BlMXpSWlcvcGtzQ2dZRUFxTUJLaXRZWDBSZEJlcFV1Q21lMCt5NHRlZUNFSC9UMjJHS24KNmRDS0w0SWpxVmJUbCs1bDZYSkwvSHhwaTNUTXNyalBoK0cwNjN0bU1NZkNWRDFnZTd4TkhlUXUrVVd4bjRlQgpieG4zQkFYYmoxMGdwV3o1NnpkVzNPcTFHQVltVE1DTmw0VVRVNS8yeG9qSGQvYUlWSjcrTWpRTU8zdjBzUnVXCjMwRVhYbEVDZ1lFQWg3eFFhOFV1cW5QYmJ1TXlHVmRBenJITjYvYlorRm14R3FobXNHQ1dGK0EzeWtNeUprUWMKZi9HbkZ1ek1tSWRmYkhHM0pOUGMrNEYvL3N3azcyRi9rdFJtTE5Yc3hjUm96M0lNTitkeXE5dGUxeDJSN3NEbApZN3hORjdkTEVIQ2JXQTJuN2Nmc2RQQTJiaGJxNEhJU3VZcW0xWE1yVnF2THlETitjejZJT01NPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"tap-k8s-tls\\",\\"namespace\\":\\"linkerd-viz\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "tap-k8s-tls",
          "namespace": "linkerd-viz",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "tap-injector-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-tap-injector-k8s-tls-linkerd-viz.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "inital-secretstap-injector-k8s-tlslinkerd-vizJx2XrwZoftweJRz
        "tls.key": "inital-secretstap-injector-k8s-tlslinkerd-vizY74qk_ryJXUy4Qr
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU9aT2Q5cTlhYmJDZ3pya3dLMHRleEF3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBNApNVEV3TmpRek1qTmFGdzB5TXpBNE1URXdOalF6TWpOYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFETnZwOU1ZYUVobE9kY3BtSlZSSGJjbzUwSmFBNXA0bG9hVnV3UnU4Q1RjRndYOXlyc3lOUVpYV1VOR0lQMQpNMGJBR0kxL2RIMlRIY2R6d0RDdU9NRUtCVzJ5U1J4L1hDNFZ2OHJTcnQzSktiSXJkSVIxWUd2QW9uTHVpdFlGCkx6T1dFR1dzS1BjcjkxV1E2WmZIWDdicVl2a1YvUUpWVFluZDNPRkt0NjlFdUFjN09yOXRiNHhJV3JxRGVhTXgKN2RVajNnVE05SG9rcjVRclFIN1M1V3RrL2cvVEo3R0twRS9qeloxenhaN04zOFJOWVpGM2dLT1ozbHhBU3M3bQpKemxmcnlzbHhpc21kVUE3MlFoYWxWeG41RXZSc3Q0UURMNUI5MzA3VmtPNDJKZkFmcjNmbW5yV01IcHpTL0srCitUZmljdDEzT3p5c0lYNTZON1hwSnNUWkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUFVVU5DWWZ2cDhsWFdadnF4Vy8wd1RWQ2J6UGEzSzB5Nk1wOTFaZmRQd1lHS05NUFJkV0tJbEQwMnEKL1ZKM2ZBV1AzcEw4VE1vSCt5VWxxRWdESEtvUDlQZzFCM3Ayb2tFOHNaVDdjSHR4U0orTlNkTzJseEVSV2U0VAovMU5tNC8vWGw1cVhCZWVmbHo2enM0VmMvK0tPL0JnZnpncTViaUhwamVISDhRcVRnVmw1U2h3b1RvQTVidDdiCjN5bitZM25aVStsdThXajQ5MjYvd1d1L2UwUDY0Z3ZJdDhMWDlTMHBJNXZZM3E4clR1eWgyalZFRDVIdmE0TUMKenJGSm5razVWT0UyTVRSYlZ4T0pnb3RkMzYzdmV4TmZJZjNkWWNDRHhMMkNTZE1XZkNhWmdLSGlFeHJDMCtGcgpzVFducHdFZ0llazJBbmN4UFFlbmRwQWdPSlNpCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBemI2ZlRHR2hJWlRuWEtaaVZVUjIzS09kQ1dnT2FlSmFHbGJzRWJ2QWszQmNGL2NxCjdNalVHVjFsRFJpRDlUTkd3QmlOZjNSOWt4M0hjOEF3cmpqQkNnVnRza2tjZjF3dUZiL0swcTdkeVNteUszU0UKZFdCcndLSnk3b3JXQlM4emxoQmxyQ2ozSy9kVmtPbVh4MSsyNm1MNUZmMENWVTJKM2R6aFNyZXZSTGdIT3pxLwpiVytNU0ZxNmczbWpNZTNWSTk0RXpQUjZKSytVSzBCKzB1VnJaUDRQMHlleGlxUlA0ODJkYzhXZXpkL0VUV0dSCmQ0Q2ptZDVjUUVyTzVpYzVYNjhySmNZckpuVkFPOWtJV3BWY1orUkwwYkxlRUF5K1FmZDlPMVpEdU5pWHdINjkKMzVwNjFqQjZjMHZ5dnZrMzRuTGRkenM4ckNGK2VqZTE2U2JFMlFJREFRQUJBb0lCQUJSVW5kRWlaSlc0N1JQTwpyVERYenhjR1krSW1FaWFNWTNMdTIrejBySmJsSjNTR3pBc1IzVU9VWXdQa1JFWGFoMGM4SmQ5T1Y0cE9Dd041CkhsWlk3VnBjSnZiVEdxbkxKaEtvSFJhc2lPWHo1Tk0rZEVoVSt0RFNQS0V0dnZCTU5jRENaZ21aRXJPWmdTOE0KcGg3aGFtWEcyZTQrVGhpM3pNUExxOGVDVnlObkRseEg2MXA3QjJ0VEQrbno4TVBnMEkyNWtoazNMbHBia08zSQpxTElESVhBREQ2dE8xN1IxRmtselZDdXlLalB6ajB5Z2s3U1hUTlpuZTNrcmY0WHdOYjFPSnFBTGxsZkJqdnNUClZXRnlNZ2lrY1dhYmoxbHVScEFKRGJGaytTMWdaMnZuVjhWQ1pXdzBNRFZpanNBSm9EZVFBcDYwZHRrSWY2UWwKRmo4bHZYRUNnWUVBei8wQmJkdXluV2ZQV0RUUDU3ejV5aFJoMG5FRzg0VWV0RFhsSGRLN0ZLNVVFODEwcTY2dgpxRVZRZjJPWTRFNUZmT2tOamRCNVJmWVgyN1J0TVhjLzVFbStwV0JXM0lWU05DdU9pTUVuNHJJOU0wT2NCUFhmCkU4U2pIblBDZGZ4VVgyV0ZJcjlZM3pNM0p6bEVoT1R0NE5sNEpNWmhqV2J4UVpVSzZrOGM5RDhDZ1lFQS9UMEcKNUY2NmZIWXdMWFJOU0Fqa3NES3BsYlUzWXRPcm9DNkkwZlBXdHJwSDloUDlPS1RsMTBXUFpVRzduSk9kVUJUTQpMSTlaaUd4cmdmR1VPQVVoWUVDakM1MHZMRmZGcFpOSWJNQ0FKNGdzZUdvb1VvQkMyc2ljWjlxYTBVZkNmU0JjClNZTFd4UFk5bmgxTXJtdlJkUWdGaTYwLzdhdGNmRWJkbzc3aG9PY0NnWUFjWUFzSzN0YytiRVE0WjNRWnpJbFQKalhaUERJYURRSjBRdnUyVUpRVEs3SUdoOWZ5OTAyWTVrY05LcmQ3VWN6azlzbG5jQ0I0VGNtQ000OCtsMlB3SgpmQm9iVzhwZDZYNXVpYWEzZDRxbWZlU2xrc3E5VG9IeG8za1JsWDlwTTFTYmN6RTNyVjFGamlvdkdyd0RXV3d1CnFkeWZQOFZkVWpjRjJIeVZ2TmRaWndLQmdRRHhuMy9xK0NPUlM2ZU9SekRSc1lLYVI4eWRSa254WnF1VDY3S3EKT0xFK3FpQ3RQOGRWZTZpOXJPWTBJL0xoWThzdXRKbFhUdk9MZ245VmZlNEJRWXZsN2VaajEzZENKUUUxaVlFSwpHdVpzVWJhMHNmMkZNbElYdEYvZmk2bzZVdkRVT01NMWRMeDlNOEg1RWxXdStycmdvbVhBTHU4WFUzQ3NOMldVCnJqVlVNd0tCZ1FDZlhEOE1yMElIWGR6cFlYL1VnTDQ2REVCUjB4aGt4YTUvQUl4c3Frcjgzeldad01FQ1E1dFoKdk5QZW9KUWVrMXI4M3ZRNHVpVlVLRUk2NmErU05wbnhDbDh0SVIwdjFwcGkyYnRVdDdrdEFjZWtnN0EwL1R6agpkSHc0eDBoSVVTb2pEYTQ1OUNRMk0zcXRBeHdvYXNlNERyQ3lBbmpKN0QxdWJEQ1d5Uy9Icnc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap-injector-k8s-tls\\",\\"namespace\\":\\"linkerd-viz\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "tap-injector-k8s-tls",
          "namespace": "linkerd-viz",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-mongo",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/sealed-secrets/sealed-secret-graphql-mongo-applications.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "encryptedData": Object {
        "APP_ENVIRONMENT": "inital-secretsgraphql-mongoapplicationsvnOtq3hqIANuqop********",
        "APP_EXTERNAL_BASE_URL": "inital-secretsgraphql-mongoapplicationsCxYn3tIrlEqRm1H****************************",
        "APP_HOST": "inital-secretsgraphql-mongoapplicationsDtNHpy3FLVJkOWH************",
        "APP_PORT": "inital-secretsgraphql-mongoapplications9waoY2GbB4P2ou8********",
        "MONGODB_HOST": "inital-secretsgraphql-mongoapplicationsX6I4dvskc9MoPPC************************************************",
        "MONGODB_NAME": "inital-secretsgraphql-mongoapplications6xEkO9uQEF3eK31********************************",
        "MONGODB_PASSWORD": "inital-secretsgraphql-mongoapplicationspgbY88AmmUtLIic************",
        "MONGODB_PORT": "inital-secretsgraphql-mongoapplications9sYI3EO8VVguazP********",
        "MONGODB_ROOT_PASSWORD": "inital-secretsgraphql-mongoapplications6Y12BqewIBEkHTn****************",
        "MONGODB_ROOT_USERNAME": "inital-secretsgraphql-mongoapplicationsNCYukTCZW8F2FlF************",
        "MONGODB_SERVICE_NAME": "inital-secretsgraphql-mongoapplicationsbGK_5VxQbYHgPTU********************************",
        "MONGODB_STORAGE_CLASS": "inital-secretsgraphql-mongoapplicationscFydrs0b9zC7__L************************************",
        "MONGODB_USERNAME": "inital-secretsgraphql-mongoapplicationsj5PAwEXTOAUSFca************",
        "OAUTH_GITHUB_CLIENT_ID": "inital-secretsgraphql-mongoapplicationsMbVCP_ydYbWJg4i****************************",
        "OAUTH_GITHUB_CLIENT_SECRET": "inital-secretsgraphql-mongoapplicationsR1SidSUkmHjyiQx********************************************************",
        "OAUTH_GOOGLE_CLIENT_ID": "inital-secretsgraphql-mongoapplicationsiwYIpivgoJ55pEb************************************************************************************************",
        "OAUTH_GOOGLE_CLIENT_SECRET": "inital-secretsgraphql-mongoapplicationsyOABO9wYelLacur************************************************",
        "REDIS_HOST": "inital-secretsgraphql-mongoapplicationsjH1lpyqcRNFuuRK****************************************************",
        "REDIS_PASSWORD": "inital-secretsgraphql-mongoapplicationsDdWL7ZgTjfZ26Sj************",
        "REDIS_PORT": "inital-secretsgraphql-mongoapplicationsHvm5yY1CrwmyPwC********",
        "REDIS_SERVICE_NAME": "inital-secretsgraphql-mongoapplicationsGBuN2XPKzIiJqmq****************************",
        "REDIS_SERVICE_NAME_WITH_SUFFIX": "inital-secretsgraphql-mongoapplicationsunEzKFw6TKwZuTx************************************",
        "REDIS_USERNAME": "inital-secretsgraphql-mongoapplicationsbitDC5VA0MK023Y************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"APP_ENVIRONMENT\\":\\"bG9jYWw=\\",\\"APP_EXTERNAL_BASE_URL\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\",\\"APP_HOST\\":\\"MC4wLjAuMA==\\",\\"APP_PORT\\":\\"ODAwMA==\\",\\"MONGODB_HOST\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZS5hcHBsaWNhdGlvbnM=\\",\\"MONGODB_NAME\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==\\",\\"MONGODB_PASSWORD\\":\\"anVuZ2J1bnU=\\",\\"MONGODB_PORT\\":\\"MjcwMTc=\\",\\"MONGODB_ROOT_PASSWORD\\":\\"ZXhhcmVyZW1wbGU=\\",\\"MONGODB_ROOT_USERNAME\\":\\"ZXhhbXBsZQ==\\",\\"MONGODB_SERVICE_NAME\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==\\",\\"MONGODB_STORAGE_CLASS\\":\\"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu\\",\\"MONGODB_USERNAME\\":\\"ZXhhbXBsZW1t\\",\\"OAUTH_GITHUB_CLIENT_ID\\":\\"ODljMTkzNzRmN2U3YjViMzUxNjQ=\\",\\"OAUTH_GITHUB_CLIENT_SECRET\\":\\"MTI5NDg4Y2M5MmUyZDJmOTFlM2E1YTAyNDA4NjM5NmM0OGM2NTMzOQ==\\",\\"OAUTH_GOOGLE_CLIENT_ID\\":\\"ODU1MTc0MjA5NTQzLTZtMGYwODhlNTVkM21ldmhucjhiczBxamFwOGo2ZzBnLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29t\\",\\"OAUTH_GOOGLE_CLIENT_SECRET\\":\\"R09DU1BYLUNTMUpGaXNSSVNnZU4wSS13VGFWam8zNTJ6YlU=\\",\\"REDIS_HOST\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXIuYXBwbGljYXRpb25z\\",\\"REDIS_PASSWORD\\":\\"anVuZ2J1bnU=\\",\\"REDIS_PORT\\":\\"NjM3OQ==\\",\\"REDIS_SERVICE_NAME\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcw==\\",\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXI=\\",\\"REDIS_USERNAME\\":\\"anVuZ2J1bnU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"sealedsecrets.bitnami.com/managed\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"applications\\"}}
",
            "sealedsecrets.bitnami.com/managed": "true",
          },
          "name": "graphql-mongo",
          "namespace": "applications",
        },
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-mongo-database",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/sealed-secrets/sealed-secret-graphql-mongo-database-applications.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "encryptedData": Object {
        "mongodb-passwords": "inital-secretsgraphql-mongo-databaseapplicationsp3ynYabZO407LT3****************************************",
        "mongodb-replica-set-key": "inital-secretsgraphql-mongo-databaseapplicationsAOfsemTq2Icsk_J****************",
        "mongodb-root-password": "inital-secretsgraphql-mongo-databaseapplicationsXo4FSyuOsswrlaP****************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"mongodb-passwords\\":\\"anVuZ2J1bnUscGFzc3dvcmQxLHBhc3N3b3JkMg==\\",\\"mongodb-replica-set-key\\":\\"MkozZno3SlRmVA==\\",\\"mongodb-root-password\\":\\"ZXhhcmVyZW1wbGU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database\\",\\"namespace\\":\\"applications\\"},\\"type\\":\\"Opaque\\"}
",
          },
          "name": "graphql-mongo-database",
          "namespace": "applications",
        },
        "type": "Opaque",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-mongo-redis",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/sealed-secrets/sealed-secret-graphql-mongo-redis-applications.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "encryptedData": Object {
        "redis-password": "inital-secretsgraphql-mongo-redisapplicationsbjWHsr8ON4Rsk96************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"redis-password\\":\\"anVuZ2J1bnU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis\\",\\"namespace\\":\\"applications\\"},\\"type\\":\\"Opaque\\"}
",
          },
          "name": "graphql-mongo-redis",
          "namespace": "applications",
        },
        "type": "Opaque",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/react-web/sealed-secrets/sealed-secret-react-web-applications.yaml",
    "resourceBaseDir": "generatedManifests/test/services/react-web",
    "spec": Object {
      "encryptedData": Object {
        "APP_ENVIRONMENT": "inital-secretsreact-webapplications0uO9CYOEcOPTBA0********",
        "APP_EXTERNAL_BASE_URL": "inital-secretsreact-webapplicationsz4mzr2pyByPGrU2****************************",
        "APP_HOST": "inital-secretsreact-webapplicationsfJ2FOVeOb1_xJxx************",
        "APP_PORT": "inital-secretsreact-webapplicationsOMm9zF7bX1o6_yP********",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"APP_ENVIRONMENT\\":\\"bG9jYWw=\\",\\"APP_EXTERNAL_BASE_URL\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\",\\"APP_HOST\\":\\"MC4wLjAuMA==\\",\\"APP_PORT\\":\\"MzAwMA==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"sealedsecrets.bitnami.com/managed\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"}}
",
            "sealedsecrets.bitnami.com/managed": "true",
          },
          "name": "react-web",
          "namespace": "applications",
        },
      },
    },
  },
]
`;

exports[`KubeObject Can update sealed secrets after initial 2`] = `
Array [
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-applications-secret",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd-applications-parents/sealed-secrets/sealed-secret-argocd-applications-secret-argocd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd-applications-parents",
    "spec": Object {
      "encryptedData": Object {
        "ADMIN_PASSWORD": "inital-secretsargocd-applications-secretargocdvFPJE6PjioF2li3********",
        "password": "inital-secretsargocd-applications-secretargocd2iAZ5bEFEz_XIAH********",
        "type": "inital-secretsargocd-applications-secretargocdiGrQV5pcxUhfNBr***",
        "url": "inital-secretsargocd-applications-secretargocdzAOlTNv9Kt99FgU**********************************************************",
        "username": "inital-secretsargocd-applications-secretargocd5Prs76ECWRkDten*******",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"ADMIN_PASSWORD\\":\\"jungbunu\\",\\"password\\":\\"jungbunu\\",\\"type\\":\\"git\\",\\"url\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"username\\":\\"Oyelowo\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"argocd.argoproj.io/secret-type\\":\\"repository\\"},\\"name\\":\\"argocd-applications-secret\\",\\"namespace\\":\\"argocd\\"}}
",
          },
          "name": "argocd-applications-secret",
          "namespace": "argocd",
        },
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-redis",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/sealed-secrets/sealed-secret-argocd-redis-argocd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {
      "encryptedData": Object {
        "redis-password": "inital-secretsargocd-redisargocds_qo9K7QILsQMGj****************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"redis-password\\":\\"dGw0RVN2WTlrTA==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis\\",\\"namespace\\":\\"argocd\\"},\\"type\\":\\"Opaque\\"}
",
          },
          "name": "argocd-redis",
          "namespace": "argocd",
        },
        "type": "Opaque",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-secret",
      "namespace": "argocd",
    },
    "path": "generatedManifests/test/infrastructure/argocd/sealed-secrets/sealed-secret-argocd-secret-argocd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/argocd",
    "spec": Object {
      "encryptedData": Object {
        "admin.password": "inital-secretsargocd-secretargocdBOSdATU8hIzjNuh********************************************************************************",
        "admin.passwordMtime": "updated-secretsargocd-secretargocduAPqFJxMqS0pg3a****************************",
        "clearPassword": "updated-secretsargocd-secretargocdGU4kB83cAsatuUf************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"admin.password\\":\\"JDJhJDEwJDkwcG1lcUgvWlU1bTZ4TnR6b3NYQy5TdjAybm1OM3NlT3ZyQVFOSlg4a2JQTWpIM25ueExp\\",\\"admin.passwordMtime\\":\\"MjAyMi0wOC0xMVQwNjo0MzoyOFo=\\",\\"clearPassword\\":\\"b3llbG93bw==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"app.kubernetes.io/part-of\\":\\"argocd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-secret\\",\\"namespace\\":\\"argocd\\"},\\"type\\":\\"Opaque\\"}
",
          },
          "name": "argocd-secret",
          "namespace": "argocd",
        },
        "type": "Opaque",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-sp-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-sp-validator-k8s-tls-linkerd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "inital-secretslinkerd-sp-validator-k8s-tlslinkerdSp1COB7GzzdAv
        "tls.key": "inital-secretslinkerd-sp-validator-k8s-tlslinkerdy7oz_b9PsacZZPf
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUkrYUVCL0EzcmRkK0VDak5VYzhsYlF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3T0RFeE1EWTBNekl6V2hjTk1qTXdPREV4TURZME16SXpXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxwdU53cFZ2dEcvUkVoUXpCM1JiK1BvWU9iVTVOck5iSUJKTU4vNjlWY3FucnYweWQ0SQpjUllyWVIwMjJ5NE9UODk5THVtOHpiVGZDOGVPTXlnaFZ0akFwb0xzcWdtMkkwV3FIcVNtQ0NuR3l6cnJLbzNrCnNCODdsTmJDV1k2ekcvV0J4NFRpbFdsTzBiSDB5elM3NmRrR0d0eW1YNlFwLzdYV2kvMEUzblRhaWxYVHZ0M1kKcFpNTDhZREFQdjJtR1FHU0hhUkQxNG9LRTJDa2tEVm5mU0g4UU5Vd0sydys5cEY1aW82Q0oyTXRIeWhIZmF5NwpaUnBXK0hxLzYxVFhVTTVYR0hPNlpoZ0dLeWEzbnlseXhLa3lFR1QxUFZkMWtXUEhyQ0lXWjZoelArb3dZNzJXCm1NRklwbXJTNExDa0RTSVRBdW03RnpoMGZ0c2dJYmErUk9jQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBNVgvRnMwbXF0R1c4SjVhMVViTVFrTHpuazIzbzZCWkxhMnlydjBxbTYKSCtrdW5UWkVzMnAzUGR0SDJYeXVhVytrRDFmbmRyR2haRHErRkt2Qnc4ZDlmUERLMXBiVHU1RnprS1lrUU9CbwptajJtZVdJUjdMUlJ1UWFIbnJTd1BUQzNlbWtWRVpQMjBiaUNSclhpV3RLdWtaeEZyTmdrbXZwY0d1VWZPWlBUCkNmU0s1NzM4VXpUSVIzWWxHOXExdnVBbVcyQXNrYXNIbTE3M0ZLN2x2R3NwaE8wVTdRY3JFeEJiVmd0SUZ0Qk0KM0tJYktBZmg5VUs2aW1DNGpsazRlVFBicTZSTHlmNFJoK3Rwb3pWeTlmK295cDZ5eEVlUWwvMk5jNU1mQmxyOQp3MWtDUTczN2k0R1QzMXZmRDJST25JOU9ZZFMrV1VDSWs0dnlVL1l6eVdBawotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdW00M0NsVyswYjlFU0ZETUhkRnY0K2hnNXRUazJzMXNnRWt3My9yMVZ5cWV1L1RKCjNnaHhGaXRoSFRiYkxnNVB6MzB1NmJ6TnROOEx4NDR6S0NGVzJNQ21ndXlxQ2JZalJhb2VwS1lJS2NiTE91c3EKamVTd0h6dVUxc0paanJNYjlZSEhoT0tWYVU3UnNmVExOTHZwMlFZYTNLWmZwQ24vdGRhTC9RVGVkTnFLVmRPKwozZGlsa3d2eGdNQSsvYVlaQVpJZHBFUFhpZ29UWUtTUU5XZDlJZnhBMVRBcmJENzJrWG1Lam9Jbll5MGZLRWQ5CnJMdGxHbGI0ZXIvclZOZFF6bGNZYzdwbUdBWXJKcmVmS1hMRXFUSVFaUFU5VjNXUlk4ZXNJaFpucUhNLzZqQmoKdlphWXdVaW1hdExnc0tRTkloTUM2YnNYT0hSKzJ5QWh0cjVFNXdJREFRQUJBb0lCQUc4a0VaQUp1aTZVMWdJKwptTkVWOEp4d0JvVFdXbkRPa21hUU82RHJuYU9QZHY0YVd0WVJOa20vSnJBaDZkeTFENE5rMzdqY284MjJRdkYrCnBxUy82MlJneFdPNzcwckcySlJKYk9jL1RCS0x2dENyTGIxVm5tR2dSWVVhYkFXVVpaQ2hBKzhHbllnZ1F3YlMKSnVxVE5ELzdVYnhGT3pORkRucTdJczErUDVodFFzNlA2U1NFTEpMNG1hK3l2NGdETFIyZm5QbUZIZCtia0xlSwozb3Y5aE1nVjBRRHZCbVVVaFlnZS9icHJCc2ZMd2QxaXRlcHQxNXRGT1RpVWs2NnI1WlFkZlhDY1BmTGd3bExCCkc0MlZLSFovNkxEaTR2Q2U4cXpoVW9KYzExaFlnQnZWYks5WVk1MEJTL21tNllvZmROWjlvMmFKNDk5cjF6R1cKR1FHKzBTRUNnWUVBeGFvWlArZXU5OU1FZmVPU0FVRVV4Zy9udlJiOVhaSnBMazQ0N3RQd2lRbkRSVTUxZXZzVAo0dHhjeWxhYStBNFJNdlVPcURqVTNnUEdKN0lmckVjY3JJMXJZbkZFb2xXSVBiR0xCMWRTOWMzejhBYTJHdkVLCitLdFNTWVYvQ1B4MFlNUHRybXMydmdwQVluRTJGZWU0YjFvVlBiNDZNQTRRcWtnNWtkdzcrKzhDZ1lFQThYTmYKcC8xU2k0b1ZJT3ZseWxoSk52SjVKdXhTcmsxN0gvOFgvdWM1UngyS0J5SFNzRFNiQTEvMFk3Q29aSHJMYkQwTAo5OHJxekxGa1g5WHhENml1ZmU5MzE1OVo4L0Exb2w3OTMzSk1Vd2hTQXZTK1d4Uy9yVUczamdRMjJ4RWN3cThUCmwvTDZlR0dpM2tBU0R1SVRLUFFMemxlUTdXVVRHZnJndWZrWXJva0NnWUVBcHlSTGo0OGdrNnlhMnJ5cEJHaDgKNFhJbm1ld3J1SWtLYWI1NVEvSnhMZC9VZi9GMVE5VzFuaHFLV0FwZHBpMTIrNmplaVA3dGVRS2w5NEVXYVQ0RQprQ0JSVW4vRzhxSHl2NEEydUxGdGxDNWYvSElnWUsyOGdrT1VKRmsrNzJGU0kxVHAwWmdWUlNNMENFb0Uyd2NECkhSMkdZcHhOWmI4dTlsNTJWOUZyNDM4Q2dZRUF5cE02K1Uydm1NVmtUcmU4bHRVVnNGVWxVb1BLSnRWNDdQSncKWm53RzhXU1dMcit3N2dkazJ5TUJmelp6UWNKSXMrcFFCVGtwWUUyZzRrczBNaWdiSml2cEIyNTU0UkZ6WG1TRwphWmVTODhNeVU2cVZud004Z2hkMThtQVV5aDJFWE03WkNJNWltT2VKNXlBb1JuWmxEdUlhbWFlY1A2Q2lzeFJxCndYMTl1TWtDZ1lBaE1Dc2t3aWplbUtGcUd3SnBkeUJ5bWRsemhZcEhaYlN5cm96bEZ3bUpFeHhWVlViVTRSaUEKY1lQOUx4bFZFQ0dETnBCK3NXdnFBdmtEKzRyelRpMDk5OHhWYW93QkNzMVZ1VU9ZMUs4T0FWU3hBVys0dWh0dQpZUWtkN1dnUHB1RS9ybkhIdmNnV29nRnpSQVB0ZVFHRzNpM1dNODdPOVFsSk5PcXVGbDFWSGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-sp-validator-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "linkerd-sp-validator-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-policy-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-policy-validator-k8s-tls-linkerd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "updated-secretslinkerd-policy-validator-k8s-tlslinkerdwJryAnCmmHsi3mv
        "tls.key": "updated-secretslinkerd-policy-validator-k8s-tlslinkerdLrUuQ2bNa4Ro
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQUpxemFWRDJFQjluK3hzS3ZxSHV1MzB3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa2JHbHVhMlZ5WkMxd2IyeHBZM2t0ZG1Gc2FXUmhkRzl5TG14cGJtdGxjbVF1YzNaagpNQjRYRFRJeU1EZ3hNVEEyTkRNeU0xb1hEVEl6TURneE1UQTJORE15TTFvd0x6RXRNQ3NHQTFVRUF4TWtiR2x1CmEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeAp3MTRGRzA0di9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLCm9lTXdnN0IzV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnMKUnJqY1lpeXphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWApnWUFEUGloT1JVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrCkRuck5yUFFTaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJvM0F3YmpBT0JnTlYKSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdMd1lEVlIwUkJDZ3dKb0lrYkdsdWEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwCmJtdGxjbVF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ3VvelhFMWJZMkR1VHZLdzcya1NoQVE0c2YKeiszZGlYdEhSbGpiYjNKZWIyNFRWOUVqZ1RybmhsYlpFaG8rcFA5ME5kQlIvQTRvVHdXQjdVUFFienp5eHQ5aApCcHZmVXQ1N1pyQ3hQdGs5RXJVdXR2T3EvU2NqNkNDd1VBUjZ4b2pybnJWQzNqY3ZIZEp0TXBNNlA3QnlQVUtxCjZ6c1dVcVExT0p6Tjg0czV6TDRoMG9YZDA5T0RXOC8rNWRFUVBOY1JXM2pHallvdHFoUnYzVm5aSVVYejZlTVcKaXVveFlrTDZNc2NyNHhGZkROOXBDVnkyVWIvV0JUSGVQd2ZHOGduaTVlR3ErMjNUWGFCbm1xd2V2aFNZcXQ5eQpOcm9rMzVVZlFHamI2WUFRUVdyQlRxa1diSDZ2WVpYVUYrZGEwL2JrVnFwbDNDZGpJdHhHaWV4bnUxS1oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeHcxNEZHMDR2Ci9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLb2VNd2c3QjMKV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnNScmpjWWl5egphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWGdZQURQaWhPClJVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrRG5yTnJQUVMKaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJBb0lCQVFDcEorTEtuVmZHRGJWNAozbCtTWjE1aGRYQ3hTSUNEaUFsUGRwN3F2SHg3OGI4NkRiWW5qeTR2eUYwY09tY3lOK0xxM2NjU29FT0pTMXc2CndNeDJYempnbUdOWDVYalZ6RkhtNDNGZmpSZ2RkVWUzRDV3cU9wMEpMVit2cXBrZDl4V1AzdlRFUlhxQVU2Z2oKNkdteVIrQ2FlenZ1T09jN3M2WW9xaCs0cmZWTDNKU1F3ajZxQTZTbnAybERydmhsSXZ3ZFRNaEs2dnh5Y2xLego1a1o1ZkxUeWtZamxydW1kNEhkWU1BdDE5S2doRXBkYkEwRVlsT2hGRisxcDRjOWRtT3FLTW5oVmhHdVR0L010ClZxT09UN0pPU2tZRUpsWlUrZXBYSjVpeTV0bDA5UFpYOGRGSUZrVjNLSlN2c3NxdThnM0d6R2hUajZrVzFYU2wKT2tuMG9LZUpBb0dCQVAyNXUxQ3l3anJpc1Z5bThNMlRiNGxEejZ6YlVZVmJUc1VNL2lCRGJyYTFoYVlGM0ZqZQpzdEVuWXFHK3JtQ3B0dnhMT3Z6VUhKVyttSzJUY2o5VTNDeG1uYmpyWFd6QkNZWVBCbHExQWNvOW9NYy9UclE5ClhUS3BLSDNOcEdJZTBSYXFscDhrLzlnUm5nbEIyZzVSQ0U5LzVtQm5Tc2Z2STZzaDNCUlpWQkp2QW9HQkFOQXQKUm12blpTUHpLby9lcjNlajVWZGZCN1ZzWEhHRmVCWlVRRkwvL3Bia2gxY2FGQVBpUlJLUC9zaVlYcXBXVkNHZApBbThsSmNnRHpvcGw0NFZwQ0xUVDVvWktxUExDK2IzSDVkQVpRV1VXdm5oOEIxejNYemNDZlpybkpJT0FoZEp1CkE4dC9XQ0p6Vms5U1BHSEJyVHgvbnZyRUR0MGhSbGtPKzBTTWphRVBBb0dBSmpVcTVQc1dUcUhHamFwQ0J1TVYKMzdqTGREOU9wbU5hbUVmZG1PUXVydXJrNWx4cGt5UnVEeHI4T2xrcGp6cmZhRnkzMUV6b3hRLy9rOXZwVDJvcgpBYkN1UGFPTDNRMndyblJpdzVRUVlmRW4zZmxGazlUTnpRdzJJY091NW11M2xzODNnVjJqL1ZpaDBNa08yaXNQCnNsRVRVeDhhM3NLL1AwMEpCRE56ZXBjQ2dZRUFoTS9OdEx1Y3NCSEwzcHVRVUlEVXFTZ3NqOWRCSnYraXZJUWwKd1k0bWkzZml6SFFMdnVxVmJLRkhTQXpGb0dDUkxoeXdWOTVZTzBJS2ZBdEMyM05HSmE5bXk5aEg3eERyS2VPbApQMTFOZGtQTFlxeW1PZTVyNVhtR1R0UVdYSHNiWlVQZzBldzllMFVnRkZ6L3Z0SkVSbXVaTHB6MGFxbDI2d3grCnk1M3NJWXNDZ1lFQTJJVFVlZFQvdElucTJpTXNrR2s2ZExxWnZNWDFsVG4rb0o3ZUZFR2xkUGxuVGlzTFBvZ1AKVWRyTzU4Z2xPRHU2Mk9Qbm05YTJlVEJqTHhHa2o0bGdBK0xGT3g2R2U3V2NnR2MvTmt3UWNOTWUvNHFiUThPKwo4QTkxZGRqdzl1NXVZVFN5a0VqVHpxR2FOeVViQi8waHhheXZXY3BCUm1sZXFNOU0zc09LODRFPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy-validator-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "linkerd-policy-validator-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-proxy-injector-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "generatedManifests/test/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-proxy-injector-k8s-tls-linkerd.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "inital-secretslinkerd-proxy-injector-k8s-tlslinkerdtHV6Ye7vE0MqqZs
        "tls.key": "inital-secretslinkerd-proxy-injector-k8s-tlslinkerd5AYHYYUhlQS3h
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUxsUXVZVlBqeVo1N0dhcWgzWXFJM3d3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBNE1URXdOalF6TWpOYUZ3MHlNekE0TVRFd05qUXpNak5hTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRRGduL3ZacVo4NGdEVWhuRG9OdEQxYU1zZXBReFFhTnRDcWdWR3lIOFZSZm9ySwpXMTdRcko0M2lvd3JvVXUzaWpQY3JPZnlQdFZxOWZSMXNlSCtBenY1WlFpczRQYUlNUFZ1b1AxV3ArK3pPTVpyCmJydE01TzNIdUNCcmVXYTRaU2ZoeXRkNDhxMzhEdTVnQ1I4WFByKzUwQU5BN2FVaUYxaG9uK3MycUVMbHY3b0UKL01FblR5eUhIUWhzNWFkajVMdWR3bXpBTXI1cGo4ZGlXc2d4WThLc0owYU8zVGJIUmJXTkRZTU9MZFNzZ3pFKwoxRmsxdTdMSWljRG9GQm1oRENZZVZzTURLYTV4Znk4TVUrU1FxVEpKVHRiUXNBTzdiQU5KTW9mMnJEZUhTeTU3CnhSRFBTczZNTjU2MXNadVdHaHdJQmpzZHZCMU5UcXp3ZFo4ekhjNWpBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ0NHNaNlNnclRSK01xbExON3F3bW9kMXplTkF1dDh6Q3IKYkc3NEhpdktIZ1Zhb3JwOUp1SlJKU0VEUlVQLzdocmNMd0pjRUlMTllGZHhmalpKYllBMUFnSmZkdUt2WDM0Ygo1SC9hc05QRkVzSTdIOWw0cmY3TDVHbjJ6QWlBR1k4WFpKcXpxclE0eGIrdWE0V3p1VGQ2VHRoSm9pMU96UTBNCnh3UWRFbHVBWTNYVzJZV2VrYzJub0FiRlFvNCtQK3VVcHg1NE8wY0NCa0xCM2NuSmtzZ2RRejViektXVzFITUkKQmRQekN3c0xTK1dPK2doTWRWSkVuV3hWY1krNTZpRjNCM2FQWG9WL01RNU56WEs5c2FBNVZhYWJKbjVYd2FqRAplR1l4QlJvZ0R2ZTNnaWwwbERDbnVxMHZZZFp2aktDd2dwRUxhaVBWS1dnZmxYcVR1bFVWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNEovNzJhbWZPSUExSVp3NkRiUTlXakxIcVVNVUdqYlFxb0ZSc2gvRlVYNkt5bHRlCjBLeWVONHFNSzZGTHQ0b3ozS3puOGo3VmF2WDBkYkhoL2dNNytXVUlyT0QyaUREMWJxRDlWcWZ2c3pqR2EyNjcKVE9UdHg3Z2dhM2xtdUdVbjRjclhlUEt0L0E3dVlBa2ZGejYvdWRBRFFPMmxJaGRZYUovck5xaEM1Yis2QlB6QgpKMDhzaHgwSWJPV25ZK1M3bmNKc3dESythWS9IWWxySU1XUENyQ2RHanQwMngwVzFqUTJERGkzVXJJTXhQdFJaCk5idXl5SW5BNkJRWm9Rd21IbGJEQXltdWNYOHZERlBra0treVNVN1cwTEFEdTJ3RFNUS0g5cXczaDBzdWU4VVEKejByT2pEZWV0YkdibGhvY0NBWTdIYndkVFU2czhIV2ZNeDNPWXdJREFRQUJBb0lCQUFyYTBGSFpaNDlVYXJ6ZwpEdElndHFKSU4rdlBDUWFuUlhnbjNhbk03VDBkNzFrT0IwdndPNGtWa2VaOTJlblpyTjNxSVI5TXVBVitNejBJCnhwSCsyQVFhUk13TjV2djMyYlJwNVRRdDAyQ0d5dGZnTnY3bFJUUlVpb1NIRGxhMDFMT05tTklJY0MzeERzWG4KU3ZCVm9QQTZ4QjE4SG5IQ1RReHBSZldUTmdCaUowYzE4UmNxMUViR2wvQUZHckIrMTZCZEdWK2dpOTR6MDNHaQo5R0ZkZHNPQTdRdzFsSk9iaDZ3OVhqZFZOU0l6dC9FbSs4eEd3VHdpaC9IQkZVQ2hib1g3djhQMUZtT0wwN1B2CitBd2NBTWJiNDN2c2F0TFlJVDc0SDR6U2xWZ29raG5zVDlaellwRkV4WWxsTktFQ3pOVjlQQXdDWVBZYmJvc3gKYzFrQVdIRUNnWUVBL0ZxejFnSUVQT1Z2OEJ6YXJ5bFVIUnJWSEt6WTdyeWc5Q0VzZ2ZSRDhoRU5zN3l6aWtEQQpVaXI4U2czaXpONldzNldCMkxxTVBpWGlaMlc2ek8wZEFobTNUNVFtRkx6NGdSMUt0OURGZmVaSTlyeTAwNExDCjFtU01uMlJHRlFtTHBoL3U0Mk5KeWN2RGp1TjRUajhua1hmNlhCenljWlVKdU1JWDUvQ1dueXNDZ1lFQTQ5NjYKWW5KK3k1eVlHZlhvOWxJMHlFa25OZjBNRnhKbllHNzdMNmtNdWt4a241VHJ4YytxdGU3TGxveS9aS1lxWmNOeApUYkpabkFLZlFvZUZIR00wOSs0aERDYnNJWFJUcHo1Y01UQm40SFBJVlUxTTJjb0EzMTJnU2ZzUlU2aXRmRnIrCnNjUURoZDc3Sm9XZFNwTGtLbGpwamVoQ3d3cWJaS2FsblRIbXNha0NnWUVBNC9JU1M1ZGF1SjhPODdjOG1jZ2QKSUlVaVIxcWlRVlBGbDM5M3NwTXY1TEllekdJQlV6cVYvaUt4N1RxSnlVQ3VvK3MyVk14ODdZNU82ZExzWHpzMwpYclJYN3R3Rlllb29Gb2ljKzFqcmE0UGVHSEh3YkxYS3hObmlZLyt4aGtNdkQ0bjh3UXpvbEEwb3dpTWFncU50ClhHc2hqSjdoS0ZQVmlqeFlWN3ZzY2kwQ2dZRUE0c0hsRmt5NzB1RU5GMkI0S0k4YnlXZktwbFlmYnVJNGoyVkIKZjJjcHJFYVRKNTdwbFJxWDFaNUJhSnE5WjJwWDdKYTJMTXhia2YybUFHMmR6K2NGY2VlOWFUdGVaZGc5MnNNYQp1VFJqV3ArOWJ1MlNtWFFFdEVLV1hLaUUwSXlkdjQ5SnZ4ckJLcm4va1pFTE9vZThtRXVNZDFQM0ErS05TbmJ2CmZlT0huNmtDZ1lFQXcrU3hManc3OWpFUjBWRzJrSTBaZkRCaXF6cEVjMmVyRkZOaFBnZGszSWtHSkZEZkF5S00KTEE4dEdWNDNkaEtpNWJtUytzeVMwYy8vQWJVTXBwbDVWb0tZekRhMjN4RkpPU1dEOXZYUkdXcXBMVVRwaXpEaQppVDdyQ253V253WHJ0YURBaUk5RE1zRU9mT2hKc1E0SGF0N0ZhQ2FLY0o1ak9SVDYzZ2Z6cXJRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "linkerd-proxy-injector-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-viz-ingress-auth",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-linkerd-viz-ingress-auth-linkerd-viz.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "encryptedData": Object {
        "auth": "inital-secretslinkerd-viz-ingress-authlinkerd-vizkev7l1FeSniNIID****************************************************************************************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"auth\\":\\"YWRtaW46JDJiJDEwJEEwS2pIb2oydlNhMFhOeFVyU0RLbGUzcHk5SHE5c2xVbG51M3ZUeXJnWlZWa2d2cDJZMWUu\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-viz-ingress-auth\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
          },
          "name": "linkerd-viz-ingress-auth",
          "namespace": "linkerd-viz",
        },
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "tap-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-tap-k8s-tls-linkerd-viz.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "inital-secretstap-k8s-tlslinkerd-vizLeXyOxDu8XcIrh
        "tls.key": "inital-secretstap-k8s-tlslinkerd-vizmhMNbKKBcaQcZ4i
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRQzQyZlBjc3B1VXhUaE1DdDVhMTE5VEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURneE1UQTJORE15TTFvWApEVEl6TURneE1UQTJORE15TTFvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHJYb3dJNWdpbUtmbEVOdU9QMjA0MnkKbUJpV0tYQjl6R0pjdEU1RHNyV3pZMHFySkFsMHlOQ1p4aFZpRDFCWUFFd3hGODcxdnpPdjdpUXpVcVNLTjJ2ZQpmOFZZNkNUejZjbVVYa1dyWmZaMHNORVBnSzYwcjVIM1ZaT3V3eFZta3UzL3FXT2Q4UFVxYUN2MWk1eHg1R3hRCmNXZmFSVWdWbUZQRHB5bUhvcEcrZlBkdmZDMWRtc1lJdEloYllVNGw0YWNvbHlUM3RWOG1tcFpKVjVqdWdzR3QKUnVDWTlucE1vZ0E5aUwxOWM5V0dESFFTbWVlWlZsTE90NG5BLzhOWEhMZlpiZDc2TG9lUUF3dGVPaXJZaFU1dApLNHZHNlZHMnc0RWh3ekpBeUhFMkJ1NHRnNnNrN3huOUFqcjB1TjJwNlV5QjFnR3paOTd2cWNyMC9vSkFPMThDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBM3UxT1ZINEVPaEZSRU9PMEp1TzZEY2FJeDZqdnhXClRVR2ZQeS8rdTllcE9oY0pGSyszTnJFR2E4SDVwU0dvVWRVTitvUS9MTVZ0REh3ZnU3WnF2Y0NXWDk4bmtHaUMKOTVHYnRNeENpY2hjS2gwdkppcDdHT3VKeENQelpzRkJUTEwxWHJFalhIYmI3YzFtZnNzWTFGRFBtOWltSmVsUgpUb2lLQlZsV1o4akhaQWQyZ28yeCtlWHNFY3hQTVdFTFB5dnB1N1gweDkwaEtxRlp4OWRyR1RwZkdMd21nNXB0CkwydnIwM3FUVzJPdVdkMU5DMExDaWE2SFEzSlo4UnZJN2FDRUNVZkhqb0lsaGM4d0RkUytEbjdxM0RCQVh3SXUKRlREMlk4eGVZWlZqNzFKM3pRcjNMdGxScnd1TmlZbnhwSEkyYlRZbm90RkpwZjdkZ0w0ckVDaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdXRlakFqbUNLWXArVVEyNDQvYlRqYktZR0pZcGNIM01ZbHkwVGtPeXRiTmpTcXNrCkNYVEkwSm5HRldJUFVGZ0FUREVYenZXL002L3VKRE5TcElvM2E5NS94VmpvSlBQcHlaUmVSYXRsOW5TdzBRK0EKcnJTdmtmZFZrNjdERldhUzdmK3BZNTN3OVNwb0svV0xuSEhrYkZCeFo5cEZTQldZVThPbktZZWlrYjU4OTI5OApMVjJheGdpMGlGdGhUaVhocHlpWEpQZTFYeWFhbGtsWG1PNkN3YTFHNEpqMmVreWlBRDJJdlgxejFZWU1kQktaCjU1bFdVczYzaWNEL3cxY2N0OWx0M3ZvdWg1QURDMTQ2S3RpRlRtMHJpOGJwVWJiRGdTSERNa0RJY1RZRzdpMkQKcXlUdkdmMENPdlM0M2FucFRJSFdBYk5uM3UrcHl2VCtna0E3WHdJREFRQUJBb0lCQUhrbW43VXVrdjdhcFlOcgpFV3NIdmk5UUVaMUhxUUVmSU9yYXo3TTc1R0k3T25QTk91WEN5dit2NWlneFdGcXhaU2dDWVR5NlRrdDJsVVQxCjNtMkFqZVVzOWM2Q0VxejdWNmwwd2hnTXhtV2pUbytRck5FYnFnaE14em1taFNxWVEwZDlrbGxjclVSYlJnYlQKQmI3Z2Zzdlk4Vi8wd1IyM212a2RrWU8xUmkyWHFXODA5eGp3MDhLQnd4dHpCRTBRSE9UQ1ZnOGhzakIrTmQzbgpQQm9DVWQxdVNsTmh6QWw1MmJCc2dMR1JObUhOalloVWpkNDJSVUZybnhIWlNNZldkMXQ5ZFFVc2pjTjhjREJSCkgyTmdxckNnVWRQejBLUCtBMDJJT0ZNeTZyVGNQUmtiQWlEdkVKMnlDSGFhaFc1Y0RZaUpubGR3Zm5mZ3JJK2MKeFBwWlJ3a0NnWUVBeklrMEtveVpQSFRBSmJZeHY1SWgyVkFMQTVWbHJ1blB5bTFGTXQ5Q25tZWVMaHU2cEtZRgphakVjTFhPSSthc2pPTlpGSTc2Y2V4cUE0c2hwdUZyQmR3RTV4ejYrSm5PUVd5Q0JDWForWC9Bb3l5SFJDUEpNCmo3cXBrYjV3d0hMaEhvTWNpR0lHdmowdGdPOFNqZ1hHd3BGSWxqR2I2TEsvVzhKcFd0RVB3YnNDZ1lFQTZkcTcKV3k3Wlk0aFJWbWloR0F0Qmp2SlhONmlESWFIdkk4elFpakNuVlJqUFBEckt5dVdNNUxKeW4zUGxjL3dQWHU4RAp5d0E0aXFwcWQ2Ukx3MGpCekR1TXNJVWFtTy9NUENoSGZWMnVXNzlNcUQ3Sy9JQkVZVnQrZEFZUzJrYmh4RkdrCnRtcTRUOGxSZUpUZmkrNC9FZHdkZEVQN0piTEpraUs3R0VYQjhLMENnWUVBanZFQU5SQkhjem5BbzFwZUVCem4KYlFFRWdYK2lMWWlYd0VkM1NlTS9vb2FWeEhGNmtlQzQvZ3JPUDNGejg5QkhjRXhHeTRGRnlMNnYvazNEbktSSQplb3V2dm5BNTRaTjMra2VRQm5YNlFjQU1NbEl5elViUWZNNGQvWTRUTEZ2Y3VqODA3SmRkVVF4ZVJiSk96RlI3CklMVDUvb1V6Q1lBS1BlMXpSWlcvcGtzQ2dZRUFxTUJLaXRZWDBSZEJlcFV1Q21lMCt5NHRlZUNFSC9UMjJHS24KNmRDS0w0SWpxVmJUbCs1bDZYSkwvSHhwaTNUTXNyalBoK0cwNjN0bU1NZkNWRDFnZTd4TkhlUXUrVVd4bjRlQgpieG4zQkFYYmoxMGdwV3o1NnpkVzNPcTFHQVltVE1DTmw0VVRVNS8yeG9qSGQvYUlWSjcrTWpRTU8zdjBzUnVXCjMwRVhYbEVDZ1lFQWg3eFFhOFV1cW5QYmJ1TXlHVmRBenJITjYvYlorRm14R3FobXNHQ1dGK0EzeWtNeUprUWMKZi9HbkZ1ek1tSWRmYkhHM0pOUGMrNEYvL3N3azcyRi9rdFJtTE5Yc3hjUm96M0lNTitkeXE5dGUxeDJSN3NEbApZN3hORjdkTEVIQ2JXQTJuN2Nmc2RQQTJiaGJxNEhJU3VZcW0xWE1yVnF2THlETitjejZJT01NPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"tap-k8s-tls\\",\\"namespace\\":\\"linkerd-viz\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "tap-k8s-tls",
          "namespace": "linkerd-viz",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "tap-injector-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "generatedManifests/test/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-tap-injector-k8s-tls-linkerd-viz.yaml",
    "resourceBaseDir": "generatedManifests/test/infrastructure/linkerd-viz",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "inital-secretstap-injector-k8s-tlslinkerd-vizJx2XrwZoftweJRz
        "tls.key": "inital-secretstap-injector-k8s-tlslinkerd-vizY74qk_ryJXUy4Qr********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU9aT2Q5cTlhYmJDZ3pya3dLMHRleEF3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBNApNVEV3TmpRek1qTmFGdzB5TXpBNE1URXdOalF6TWpOYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFETnZwOU1ZYUVobE9kY3BtSlZSSGJjbzUwSmFBNXA0bG9hVnV3UnU4Q1RjRndYOXlyc3lOUVpYV1VOR0lQMQpNMGJBR0kxL2RIMlRIY2R6d0RDdU9NRUtCVzJ5U1J4L1hDNFZ2OHJTcnQzSktiSXJkSVIxWUd2QW9uTHVpdFlGCkx6T1dFR1dzS1BjcjkxV1E2WmZIWDdicVl2a1YvUUpWVFluZDNPRkt0NjlFdUFjN09yOXRiNHhJV3JxRGVhTXgKN2RVajNnVE05SG9rcjVRclFIN1M1V3RrL2cvVEo3R0twRS9qeloxenhaN04zOFJOWVpGM2dLT1ozbHhBU3M3bQpKemxmcnlzbHhpc21kVUE3MlFoYWxWeG41RXZSc3Q0UURMNUI5MzA3VmtPNDJKZkFmcjNmbW5yV01IcHpTL0srCitUZmljdDEzT3p5c0lYNTZON1hwSnNUWkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUFVVU5DWWZ2cDhsWFdadnF4Vy8wd1RWQ2J6UGEzSzB5Nk1wOTFaZmRQd1lHS05NUFJkV0tJbEQwMnEKL1ZKM2ZBV1AzcEw4VE1vSCt5VWxxRWdESEtvUDlQZzFCM3Ayb2tFOHNaVDdjSHR4U0orTlNkTzJseEVSV2U0VAovMU5tNC8vWGw1cVhCZWVmbHo2enM0VmMvK0tPL0JnZnpncTViaUhwamVISDhRcVRnVmw1U2h3b1RvQTVidDdiCjN5bitZM25aVStsdThXajQ5MjYvd1d1L2UwUDY0Z3ZJdDhMWDlTMHBJNXZZM3E4clR1eWgyalZFRDVIdmE0TUMKenJGSm5razVWT0UyTVRSYlZ4T0pnb3RkMzYzdmV4TmZJZjNkWWNDRHhMMkNTZE1XZkNhWmdLSGlFeHJDMCtGcgpzVFducHdFZ0llazJBbmN4UFFlbmRwQWdPSlNpCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBemI2ZlRHR2hJWlRuWEtaaVZVUjIzS09kQ1dnT2FlSmFHbGJzRWJ2QWszQmNGL2NxCjdNalVHVjFsRFJpRDlUTkd3QmlOZjNSOWt4M0hjOEF3cmpqQkNnVnRza2tjZjF3dUZiL0swcTdkeVNteUszU0UKZFdCcndLSnk3b3JXQlM4emxoQmxyQ2ozSy9kVmtPbVh4MSsyNm1MNUZmMENWVTJKM2R6aFNyZXZSTGdIT3pxLwpiVytNU0ZxNmczbWpNZTNWSTk0RXpQUjZKSytVSzBCKzB1VnJaUDRQMHlleGlxUlA0ODJkYzhXZXpkL0VUV0dSCmQ0Q2ptZDVjUUVyTzVpYzVYNjhySmNZckpuVkFPOWtJV3BWY1orUkwwYkxlRUF5K1FmZDlPMVpEdU5pWHdINjkKMzVwNjFqQjZjMHZ5dnZrMzRuTGRkenM4ckNGK2VqZTE2U2JFMlFJREFRQUJBb0lCQUJSVW5kRWlaSlc0N1JQTwpyVERYenhjR1krSW1FaWFNWTNMdTIrejBySmJsSjNTR3pBc1IzVU9VWXdQa1JFWGFoMGM4SmQ5T1Y0cE9Dd041CkhsWlk3VnBjSnZiVEdxbkxKaEtvSFJhc2lPWHo1Tk0rZEVoVSt0RFNQS0V0dnZCTU5jRENaZ21aRXJPWmdTOE0KcGg3aGFtWEcyZTQrVGhpM3pNUExxOGVDVnlObkRseEg2MXA3QjJ0VEQrbno4TVBnMEkyNWtoazNMbHBia08zSQpxTElESVhBREQ2dE8xN1IxRmtselZDdXlLalB6ajB5Z2s3U1hUTlpuZTNrcmY0WHdOYjFPSnFBTGxsZkJqdnNUClZXRnlNZ2lrY1dhYmoxbHVScEFKRGJGaytTMWdaMnZuVjhWQ1pXdzBNRFZpanNBSm9EZVFBcDYwZHRrSWY2UWwKRmo4bHZYRUNnWUVBei8wQmJkdXluV2ZQV0RUUDU3ejV5aFJoMG5FRzg0VWV0RFhsSGRLN0ZLNVVFODEwcTY2dgpxRVZRZjJPWTRFNUZmT2tOamRCNVJmWVgyN1J0TVhjLzVFbStwV0JXM0lWU05DdU9pTUVuNHJJOU0wT2NCUFhmCkU4U2pIblBDZGZ4VVgyV0ZJcjlZM3pNM0p6bEVoT1R0NE5sNEpNWmhqV2J4UVpVSzZrOGM5RDhDZ1lFQS9UMEcKNUY2NmZIWXdMWFJOU0Fqa3NES3BsYlUzWXRPcm9DNkkwZlBXdHJwSDloUDlPS1RsMTBXUFpVRzduSk9kVUJUTQpMSTlaaUd4cmdmR1VPQVVoWUVDakM1MHZMRmZGcFpOSWJNQ0FKNGdzZUdvb1VvQkMyc2ljWjlxYTBVZkNmU0JjClNZTFd4UFk5bmgxTXJtdlJkUWdGaTYwLzdhdGNmRWJkbzc3aG9PY0NnWUFjWUFzSzN0YytiRVE0WjNRWnpJbFQKalhaUERJYURRSjBRdnUyVUpRVEs3SUdoOWZ5OTAyWTVrY05LcmQ3VWN6azlzbG5jQ0I0VGNtQ000OCtsMlB3SgpmQm9iVzhwZDZYNXVpYWEzZDRxbWZlU2xrc3E5VG9IeG8za1JsWDlwTTFTYmN6RTNyVjFGamlvdkdyd0RXV3d1CnFkeWZQOFZkVWpjRjJIeVZ2TmRaWndLQmdRRHhuMy9xK0NPUlM2ZU9SekRSc1lLYVI4eWRSa254WnF1VDY3S3EKT0xFK3FpQ3RQOGRWZTZpOXJPWTBJL0xoWThzdXRKbFhUdk9MZ245VmZlNEJRWXZsN2VaajEzZENKUUUxaVlFSwpHdVpzVWJhMHNmMkZNbElYdEYvZmk2bzZVdkRVT01NMWRMeDlNOEg1RWxXdStycmdvbVhBTHU4WFUzQ3NOMldVCnJqVlVNd0tCZ1FDZlhEOE1yMElIWGR6cFlYL1VnTDQ2REVCUjB4aGt4YTUvQUl4c3Frcjgzeldad01FQ1E1dFoKdk5QZW9KUWVrMXI4M3ZRNHVpVlVLRUk2NmErU05wbnhDbDh0SVIwdjFwcGkyYnRVdDdrdEFjZWtnN0EwL1R6agpkSHc0eDBoSVVTb2pEYTQ1OUNRMk0zcXRBeHdvYXNlNERyQ3lBbmpKN0QxdWJEQ1d5Uy9Icnc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap-injector-k8s-tls\\",\\"namespace\\":\\"linkerd-viz\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "tap-injector-k8s-tls",
          "namespace": "linkerd-viz",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-mongo",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/sealed-secrets/sealed-secret-graphql-mongo-applications.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "encryptedData": Object {
        "APP_ENVIRONMENT": "updated-secretsgraphql-mongoapplicationso0D1zGgH9oXNF6a********",
        "APP_EXTERNAL_BASE_URL": "updated-secretsgraphql-mongoapplicationsi1VMunQGRDU3vqf****************************",
        "APP_HOST": "updated-secretsgraphql-mongoapplicationsGag7ZYhtx9iYzbt************",
        "APP_PORT": "updated-secretsgraphql-mongoapplicationsNg_0qg2GrfCsuTl********",
        "MONGODB_HOST": "updated-secretsgraphql-mongoapplicationsMZbHf1H3NtZpXqy************************************************",
        "MONGODB_NAME": "updated-secretsgraphql-mongoapplications_WeFEDvnBUKaU7A********************************",
        "MONGODB_PASSWORD": "updated-secretsgraphql-mongoapplications0jQWlbzvNzUp4rv************",
        "MONGODB_PORT": "updated-secretsgraphql-mongoapplicationsdvTSpY6Ik8qydKF********",
        "MONGODB_ROOT_PASSWORD": "updated-secretsgraphql-mongoapplicationsO97DqwzTX5zOhhL****************",
        "MONGODB_ROOT_USERNAME": "updated-secretsgraphql-mongoapplications5Soo7Edg7FiIvXC************",
        "MONGODB_SERVICE_NAME": "updated-secretsgraphql-mongoapplicationsV11bqj07tZCr4nx********************************",
        "MONGODB_STORAGE_CLASS": "updated-secretsgraphql-mongoapplicationslCnQrLyu9JyzSUR************************************",
        "MONGODB_USERNAME": "updated-secretsgraphql-mongoapplicationseDVSOr9t8Z5glkP************",
        "OAUTH_GITHUB_CLIENT_ID": "updated-secretsgraphql-mongoapplications8rjzSTgyQRF7EyO****************************",
        "OAUTH_GITHUB_CLIENT_SECRET": "updated-secretsgraphql-mongoapplicationsysF5g1Qm93HxDvS********************************************************",
        "OAUTH_GOOGLE_CLIENT_ID": "updated-secretsgraphql-mongoapplicationsvrZBIJNH6eMYfZE************************************************************************************************",
        "OAUTH_GOOGLE_CLIENT_SECRET": "updated-secretsgraphql-mongoapplicationse7ExyNUHVqZ5FPf************************************************",
        "REDIS_HOST": "updated-secretsgraphql-mongoapplicationsnmNARFBd2RSB038****************************************************",
        "REDIS_PASSWORD": "updated-secretsgraphql-mongoapplications5NMd1_Ke_zaq_wD************",
        "REDIS_PORT": "updated-secretsgraphql-mongoapplicationshHyNysN3UtNWche********",
        "REDIS_SERVICE_NAME": "updated-secretsgraphql-mongoapplicationsBx6pUsoqmWSlvjH****************************",
        "REDIS_SERVICE_NAME_WITH_SUFFIX": "updated-secretsgraphql-mongoapplicationsd80mvpCED7wgmeh************************************",
        "REDIS_USERNAME": "updated-secretsgraphql-mongoapplicationsLCXtS8UOF3jC8S_************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"APP_ENVIRONMENT\\":\\"bG9jYWw=\\",\\"APP_EXTERNAL_BASE_URL\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\",\\"APP_HOST\\":\\"MC4wLjAuMA==\\",\\"APP_PORT\\":\\"ODAwMA==\\",\\"MONGODB_HOST\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZS5hcHBsaWNhdGlvbnM=\\",\\"MONGODB_NAME\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==\\",\\"MONGODB_PASSWORD\\":\\"anVuZ2J1bnU=\\",\\"MONGODB_PORT\\":\\"MjcwMTc=\\",\\"MONGODB_ROOT_PASSWORD\\":\\"ZXhhcmVyZW1wbGU=\\",\\"MONGODB_ROOT_USERNAME\\":\\"ZXhhbXBsZQ==\\",\\"MONGODB_SERVICE_NAME\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==\\",\\"MONGODB_STORAGE_CLASS\\":\\"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu\\",\\"MONGODB_USERNAME\\":\\"ZXhhbXBsZW1t\\",\\"OAUTH_GITHUB_CLIENT_ID\\":\\"ODljMTkzNzRmN2U3YjViMzUxNjQ=\\",\\"OAUTH_GITHUB_CLIENT_SECRET\\":\\"MTI5NDg4Y2M5MmUyZDJmOTFlM2E1YTAyNDA4NjM5NmM0OGM2NTMzOQ==\\",\\"OAUTH_GOOGLE_CLIENT_ID\\":\\"ODU1MTc0MjA5NTQzLTZtMGYwODhlNTVkM21ldmhucjhiczBxamFwOGo2ZzBnLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29t\\",\\"OAUTH_GOOGLE_CLIENT_SECRET\\":\\"R09DU1BYLUNTMUpGaXNSSVNnZU4wSS13VGFWam8zNTJ6YlU=\\",\\"REDIS_HOST\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXIuYXBwbGljYXRpb25z\\",\\"REDIS_PASSWORD\\":\\"anVuZ2J1bnU=\\",\\"REDIS_PORT\\":\\"NjM3OQ==\\",\\"REDIS_SERVICE_NAME\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcw==\\",\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXI=\\",\\"REDIS_USERNAME\\":\\"anVuZ2J1bnU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"sealedsecrets.bitnami.com/managed\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"applications\\"}}
",
            "sealedsecrets.bitnami.com/managed": "true",
          },
          "name": "graphql-mongo",
          "namespace": "applications",
        },
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-mongo-database",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/sealed-secrets/sealed-secret-graphql-mongo-database-applications.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "encryptedData": Object {
        "mongodb-passwords": "inital-secretsgraphql-mongo-databaseapplicationsp3ynYabZO407LT3****************************************",
        "mongodb-replica-set-key": "inital-secretsgraphql-mongo-databaseapplicationsAOfsemTq2Icsk_J****************",
        "mongodb-root-password": "inital-secretsgraphql-mongo-databaseapplicationsXo4FSyuOsswrlaP****************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"mongodb-passwords\\":\\"anVuZ2J1bnUscGFzc3dvcmQxLHBhc3N3b3JkMg==\\",\\"mongodb-replica-set-key\\":\\"MkozZno3SlRmVA==\\",\\"mongodb-root-password\\":\\"ZXhhcmVyZW1wbGU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database\\",\\"namespace\\":\\"applications\\"},\\"type\\":\\"Opaque\\"}
",
          },
          "name": "graphql-mongo-database",
          "namespace": "applications",
        },
        "type": "Opaque",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-mongo-redis",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/graphql-mongo/sealed-secrets/sealed-secret-graphql-mongo-redis-applications.yaml",
    "resourceBaseDir": "generatedManifests/test/services/graphql-mongo",
    "spec": Object {
      "encryptedData": Object {
        "redis-password": "updated-secretsgraphql-mongo-redisapplicationsE5sevnTG88wad7j************",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"redis-password\\":\\"anVuZ2J1bnU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis\\",\\"namespace\\":\\"applications\\"},\\"type\\":\\"Opaque\\"}
",
          },
          "name": "graphql-mongo-redis",
          "namespace": "applications",
        },
        "type": "Opaque",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "generatedManifests/test/services/react-web/sealed-secrets/sealed-secret-react-web-applications.yaml",
    "resourceBaseDir": "generatedManifests/test/services/react-web",
    "spec": Object {
      "encryptedData": Object {
        "APP_ENVIRONMENT": "updated-secretsreact-webapplicationsNVUkX79De9R7_Ln********",
        "APP_EXTERNAL_BASE_URL": "updated-secretsreact-webapplicationsmJKVGtc2SVDwFqF****************************",
        "APP_HOST": "inital-secretsreact-webapplicationsfJ2FOVeOb1_xJxx************",
        "APP_PORT": "updated-secretsreact-webapplicationsnSPxCGD3GTIp6MO********",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"APP_ENVIRONMENT\\":\\"bG9jYWw=\\",\\"APP_EXTERNAL_BASE_URL\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\",\\"APP_HOST\\":\\"MC4wLjAuMA==\\",\\"APP_PORT\\":\\"MzAwMA==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"sealedsecrets.bitnami.com/managed\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"}}
",
            "sealedsecrets.bitnami.com/managed": "true",
          },
          "name": "react-web",
          "namespace": "applications",
        },
      },
    },
  },
]
`;
