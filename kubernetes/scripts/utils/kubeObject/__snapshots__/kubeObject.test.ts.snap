// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test of life 1`] = `
Array [
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-applications-secret",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd-applications-parents/sealed-secrets/sealed-secret-argocd-applications-secret-argocd.yaml",
    "spec": Object {
      "encryptedData": Object {
        "ADMIN_PASSWORD": "AgCZR3LnkvVriGRnNtEEniudrCfcGgHWdjFbtSpDMyyGiWmvFVmUdQx9kSbsyxkNiYI7GJhmrW2yTT1FlGI+vMHDLda1wQcecZTgp6YWFCCgxTc0OUaYcz6qnRhR07zr/GF/Frjp+AQgXHWfUUyfmx1XQRK9LfoJ7NjWLGLIr0meqGZ4k4/oVAuXHKcs/gY5jfHeweFIE+6zU3LJJ1tBmJlm1ivkWiQxDG6LmHpHMJzxEfAEWt+Kp+2E5mT8LMMhw7jq8/x5ab6zgVdXoBYJtGzUQnvTKzuI736sbLo9VlONwm8OUnxWe5Z8g2BakK7SWEixuB7EKcZ/PKq6B7a6oSuyH6Eq4h+J/EnRQqPzMRBDe7P7BFR+WuVBkv2BDLt7UsEk7wOwQxfSS42n79lAVj9ogC0na+fv9ldL5ao8MhPDFZlme3GTc8Gnmd9l8P+H+NAMfpO4rgWb8Rpp/ZJdwttmQpWUk931yznVmcGOntJwglc99RyUHscOQke2Fyg7pjIYtdje5CWpS/niHCmjxIpPZDxjBpuuMk0RD+vyele7nuewlyuYb7YvN3+n/UFr52OUdrbShg+Z4AYADdJshr5chf482dmYU7+V3DIWDuTxDmVH3RHBNCbE/RdvwqzrvolBgM+lwVcY0D9oF1135IJwdBNbu7itSIHobJdCBhyO+ugZ+yNV9iVZg3tjy4PdLCI2PLO2sCA=",
        "password": "AgCPy7KteKbxarYgBp+u+5Ds49XlgnDaj0KbJpcSsTCcDmsl+gPGsgfqovZl9enpCVzwloDrkYUS6Ssiu0hs51Vn41KmQzWELsE3xr2K8oXvOU6zuxBaxH8vRnC49OLW8fYnTuY3zvRMRPMEPFkRPRIBI11gSKAYQwwsK5+aN4GgXAGHpCiMtGV3RO7gxzH+K+r3cQiPVqnP0Abh5UI8+dXh62aVPJVD4QwnAOlb+05AThuttzS+8jbKOO6q8yURoZNy83b3e2HsEKVZTiE67sLx8sv4r+54ipCC2Lgzxd0e395PfvaX35hflNdiTXfsiC1bAZO+QaVwOfA15R6/8wqXfu3s9iWsbiB3yI/7PMeSl2mGJDWuwDJWMsJRNHHLaSdNLIqLWf0kEMA8sQernshRlg8fnFqCA7WrOQRzusPTV6i4qE/NwV3sMlOT5kClEC5UWGUknV0TOh3tVZZ2tun5nytqSFM96nvNa2f5W/s2kknBFY3MaZYFOZYXOuDjiJbyMrizgFczFoE5B5AzdFbH64bewxb8eTs+smIhpFv5oc7Skp/iTigkunMk5WH6M04TQ5sDDzISLo6fKVMpAshswS5ntkbTrLiPDUGUEcI4Gm6RFdKa1h31rHlSwj4/CJGnCat4He2/lZ6z84gS5CSNt9alw4EBJsw71LzwSsXpq0udkRCQ7KDnDtzEmUiH2afEIRFgaj4=",
        "type": "AgBkB1dZmbMbakmNVAFbG+5cmBJK1Hcc8/TJ6p8KxBznJ+z9RsSj3SWCffgfVAt3ONKvAA2W8cnrGIXNcar1OszzDkXYX/loCeyqlNTIzgdzTECn3W4/YkRud33ogtFix+yEHRcc5eouqBNahpVbablBsx74bWRpTPCqV68JEb+a17yP0uNdAvVJ8S/14nB50FMC388ePSpypaUHSBHR5IdHDDvy2WAmtmDsNt/Y1Pn4Wzq9q/WxjI2aEaGu76hWsidZEDIfIXn0vM67Kmwga+vWhUv2Oyr7Zf7ZWNJo3Yhp/5oBcvK2k7dJyEdOTKElT+i+qfmMfFDH9QhJ6kV96ETMe7ULedzroNpJeoTBqhGW+yn6k+T0aLarbtvfdjjdu8k58SuQLrA0XFRfx9ieWOfrLyGeHBCoUN4BOizq4vt3D/GX0b7cdIYjRWHcGSQvf331Q5RPcdGYtFtG4vbMYObqL0RuqQ5+QAP5TnuFCvxaRaOkNEYDPZpuSV2pkiSVjRLQfZBtG4fKy04y83/Mydc+JvaH8fJ5ygjoCYKglXeE2pOtnRtGviUgB4osOwRdT9ORpiYSFs8369E0gyOESX80rnUgrx4yqCTIIwGQK+zA8HWyO7pzzr6hnNGAGUKywLlEQTFDmytGwInn9bl+aS3IQB3tNatZJQhO/ZzZEm+ocZ7nycicF8oOb42lvNz8Mtg=",
        "url": "AgBjcI1T9d86+mKpcQJ2Hhxymf/DfPMZFvqLcpOaV8oJe8PmJr1LQ4cRy7+WfQU3HrRXw38DLkHSeTbIX5ZDmZifDO6Q75WhZvoCKkeUiRdRMGxt8c2QIC5SI0idMgjqbnBrapF+61brh8wVhXjJGVcLmDwiLSHH6igc4AglvNG68EZKY4u/Br8aG7rRw2IQh/DqStFqMhYmak1t9anpQO63G01EmVf4MtZ1gBkU8DVbi3jAvBAyMWgMMzbrJUtpEdKDi8r/qd9fI5J+eUcdBTtCQ6hUR3s6dki6ZXxkG410cJXrkgrzjrslVN51bQaPynypOKOY1RqRs1dfvi1CeuifaNJ2wxkupG1k3Z20FKBKFVAwUD2EveczQSoIksxqULhjVuAMzMk83HOUSiFLtj+zvjBrqcqRYivG/PS5mEW6wkEDNt1KoCuzX5ACSvutAKLxYEbNDqMreXwb8QmyO+LMce8TPX4fRmnq1ycSGVNQEXuGfZHdH4xDL0rUJ8PnBnchzDXEF0YxDrC9m6VTBFa6T2sZiRwMet+qIytkdvt2X/r4djZWhq+2JjdNiZA/lO8wwIje8eg/Zb/vyPPnTJnHNW8m6AFIbF4BztNnfjwB3gxLQWeWdRIpFXTQfRmqW12pIPdqOfdzoOiyZ0VBd6QfvP8Q7hBEWtfpJVnuzqTFgQ/f2FbmhCBJdn/38uJrX2o=",
        "username": "AgAG96U4txGNw5uUt4V0qycjfXZoNjMxqZak7pnwFf4UZ5l8dz7SdPRYvvv/N50CnhAT3izBgXvnk5Zy9qg5IS57m7IkPin4wumsmjLyuNiMwe/hLJBvhuJ4tpz/J2MfttdtdNn0gP5B3M9sljnETlgNYN5B2JeZW40vtGJHAZWvmCl9dp8MrjMjrx+B8fpWU0gfQZnY+++Zm6bnBZLb624fOZhmbGKv4/FTYzRlbn0I2GxfUBQHJ490OV78TG1P4E//2KpsJ79tMLdZe3GHFSyPKrr+u6WsUV6n4DMEX42M0axI+bSLqCHHAevwcK+mF2YBmTwZIlsn0vMKMXExYTxlhmWO0EIeNu3KM8If2mX8Jap+s6yWpXvXbWUOLFFV2gTUVRRAOblcEizgSiSqEXC6SzVN9fflPfapsM2n/XcOs28KLqpyAdS/Ws46/NCf0E20Bfr2Gd4UkSgU+IPYgxVX5Io2Ff46q9eFsybeyBGGREO7J4a9I0eFGvza8u74hV83vxdu1ZEyLjF8eKyM4W+smde/shweuogIlgqRIBi/jFAasV3WOgWWLdTCvx3/xdmtbRsOWd2xe02xIt64aZo2QEVFrnwANcYYgBMhljI54DtK5KYAVrr5ljn0hC1RSSOZy8dVT2GeoGfn7MmOhqhBMR4OdKLzuFGMovmdDJdIKPgYGDXcUpMkD8ZDot6LoAGgQfw=",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"ADMIN_PASSWORD\\":\\"jungbunu\\",\\"password\\":\\"jungbunu\\",\\"type\\":\\"git\\",\\"url\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"username\\":\\"Oyelowo\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"argocd.argoproj.io/secret-type\\":\\"repository\\"},\\"name\\":\\"argocd-applications-secret\\",\\"namespace\\":\\"argocd\\"}} ",
          },
          "name": "argocd-applications-secret",
          "namespace": "argocd",
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "ADMIN_PASSWORD": "jungbunu",
      "password": "jungbunu",
      "type": "git",
      "url": "https://github.com/Oyelowo/modern-distributed-app-template",
      "username": "Oyelowo",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"ADMIN_PASSWORD\\":\\"jungbunu\\",\\"password\\":\\"jungbunu\\",\\"type\\":\\"git\\",\\"url\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"username\\":\\"Oyelowo\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"argocd.argoproj.io/secret-type\\":\\"repository\\"},\\"name\\":\\"argocd-applications-secret\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-applications-secret",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd-applications-parents/1-manifest/v1-secret-argocd-argocd-applications-secret.yaml",
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"argocd-applications-children-infrastructure\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"argocd\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/infrastructure/argocd-applications-children-infrastructure\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "argocd-applications-children-infrastructure",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd-applications-parents/1-manifest/argoproj.io_v1alpha1-application-argocd-argocd-applications-children-infrastructure.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"argocd-applications-children-services\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"argocd\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/infrastructure/argocd-applications-children-services\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "argocd-applications-children-services",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd-applications-parents/1-manifest/argoproj.io_v1alpha1-application-argocd-argocd-applications-children-services.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "appprojects.argoproj.io",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-appprojects.argoproj.io.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "applications.argoproj.io",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-applications.argoproj.io.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "controller-gen.kubebuilder.io/version": "v0.3.0",
      },
      "name": "applicationsets.argoproj.io",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-applicationsets.argoproj.io.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-redis",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/sealed-secrets/sealed-secret-argocd-redis-argocd.yaml",
    "spec": Object {
      "encryptedData": Object {
        "redis-password": "AgBqgdr7VwQMnE5crJWfKOxivBXzAPQol74tsktx12XQFoS81RvvJ8gnHnxvYIDpozZ8wcanmxl3iBj6JRvKA2j55PJhwlIPudOKEFOjfEOm9T+IQvvw4cPnABC0vkREIv97GYj3ZyceUSrInPJ4+ELIJNzVjBU7r26DK01bdxM3ddSjxCRTEkT7SkW9xlOtxC6y0/Sv5JDn8c7kFcMV9RVUGKDc4uijYC+MHkYmORnk6/PndnuXHj7H7YGab2X2zkL9d+s0f7cFLTOxgSwSpoJrBj1almS/KLB4nUM/KQp6w9ZQ2QXafQV7PA6cmUBmOM8c4VkrzmYKLK+LiA9QJ6IRcg7zmStex/9xcdVskk0RubqIcjbo6O34sMyNsJFEKZuUEpDZEB/CYkCYAagZvdzxB9Y/H231i8ath9l467qKEeAWV8km2ITigCrzu4Iz75X/kpcyDZAHt6Ui37KK5NcljXS0tri6NfTqfQFkfX5tPKLssMwUA7JM7eNlT0UjboxHWRAyMV2UitgAfjhbZ56/sANamf98K7cbYz0zAnRRc69cHuF1w0a33TvyX4n0LBtxhV7kycw3uMmPYtbvg+lOvQnG7f1B248oYXzXbloZwd7Ws2deWUUosaJRNi7BkJgW2u3uTpo7Qls8Kgdty4ZCnA7INLEc1BA22sPCrWIwr0Xfmd4oXZjI+61TIVcnOL73z/D9PYzl+L5g",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"redis-password\\":\\"SklUc1E2TVFCTg==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis\\",\\"namespace\\":\\"argocd\\"},\\"type\\":\\"Opaque\\"} ",
          },
          "name": "argocd-redis",
          "namespace": "argocd",
        },
        "type": "Opaque",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-secret",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/sealed-secrets/sealed-secret-argocd-secret-argocd.yaml",
    "spec": Object {
      "encryptedData": Object {
        "admin.password": "AgBQvv3MTtd7HVw+FPvtjyGo/Eh6WVq9TqqRB+286FLgwN5z2ZSfndwerW5SMGEULSzo3G8K3t1U5o0J6X2ILGCWHyiN3F068ggc/UqgG2+5AJ2pQ39SYJ+q5gZfmzqfpRt9q/lX9RRdmFthif44oTmg0GKQ6a+LIraXC8b+/BH0n5p6NHZhe7tSwsYSZDa2CPBXMcKEV7kVpyN7ys2pZiIFfubBJbMrdy7OCr+73X5/uaLIcVj+Youz6VOmoLrsgnN5kpxcDQPylUQcN10h3rsGnQjlY575I/oNQvF+XwZ97vg+vqPQxJjQC90z7IYYtD6wolVhCWHhX0P3MltBUJpUGhI5whWAjQmkbpuxI+Tihq+/0gLcdFdtkfmP+x4N4wNYyx1h0YSFwbUz0x2HB/ybrig4tUAbdbauydMUQ6IexcuylNoas+x1N59JztNzBh2xR8585wPZSw+yZfcPNzMqDkUzAHFrD9D5xuqERl/RNF4DDkdIg/wvjtfw+DpAkYaF8VtuiJMhEJHk6YOetQeerIX3RyYJi0RIEd+AI5sh4zPU0M5qlwDLJBI1GwHR2XrZTDSzFedoOke5XKlo8CPLZYGEP2Bp8rqAmLYIXlLw/XtSkK1ZHTv1a7HBrPhLfMaN8sKHPwlHGcuVN61B2gLYYg8xb2m/wLS8oxmylvgYjOW4XK45bcJm3+Pp9hU5d+0gE3LcLcJDgrbRFshnJs1DNDEzYaV/7yVi3pi1Eo399hUG2hbI/j+NzRg/ibTmY3sVpYaYN7ikIfjuh/s=",
        "admin.passwordMtime": "AgADAJBLYQkLq0GCTHKC9uTNc6wCyYmjrSNo3rfZB6Je5n8Mhn67jQjAoN6phBQEzEqAPwUEl+X/iPu/s5JINjx9X7s/GskTXnI4aHHdB22RQOypvtyqF8nPBxMITXhMHguEQnj62QDbPYsM5TuP20cVpkuYojnMWybKz5Qnj5Q/OBqP7rYiwe2GRongbiylPstg0Td/9fy1qHv00Qpa9uwxtyCe/Xcfcm2FXWPww4Khe35oN2c0gaFUbXZLkqdKLSaGmFFMqsbgc4NNkfnYdtxz7xquIt5bJZYmu96lZvAs0ZJyw269kpHkjPGjErCnBXlm3br2+izALpttt91cz1cdSIMz81N7MDOq50hk57KvTRdsmICndYpyl+paWi+7Oz0o5Ymla2btXFkYZopVedBoto3LhDDpwCJZYd+4m3QvGZtVkyLYJdcbqwO/DKx7GAgt0jbVVdZVxnWpIdZeLtsOkfHu5NppP1YN7f78/wO5MdZCnJi7ewoJmiCrx33bPNiTjwpLiIGmgtzwfXWWV3yRCGpXyu/6/Ln72f2XMwwUm8O6nVSUPEWmPG/qWm+f7OeOQ6JOJS9Fgna9WWvzIVmtT9vEbyebkCYakFFtqbKBBdg/jFbRWI2WQBDbOEgU9Yl1WEmEOAN+wYkiucWHKNM12kc4Bvni77/GL/zrgK9dY1PcnKIQQDt4HTibApPO1A1EApPq8VTl2RvTS2R7jrRLMylS6Q==",
        "clearPassword": "AgAfBz2udMqscKORRPGphL0XcVufUyu1muShqszZnXiT7kmLcNjsMbqmqRw/IkjyxMzTxJ1nNa811DVDM87N413omXMA79THwfRTnRb4mr/gYDIpbXLVRaFKx4LThlcR8y3UP5sndL0xr2dna4sAg1AXd7O9ZDSuIxcLNk/zLFzZyI2ehfcNbTQoQpqB3bswFt7rrV4+OuQJdc6ECo+C1feGJpN85gk3BRvYOdzODm3JJevV/Pq17k4xw+HFah5k8AWlxk/Zg3z/R4T1E9wf2Ad8kM18HZ5JNItxl/Q1e0i4RTwjMwqqg+MpY0gVr2SZLZnREvmlTAHxfOOXRxswLqKyWx2vZsadvF6nGRbWI0zpOFjhHvDgpzcXP74ToxgzvTRn9FrXKR/9AxJeZE6Voo/o7oari06eGCmTfFIjRMMFS755wqxK+Kx/f57Z9MW01+aFRC3mP296LKkKq0IfhEAzV1r5oVzvQFJsxUxKjZ0Me+Mm4cCpgoFSmPAeK5/0QFd6KUOzxVNiQzYY6tR7g5ahJEKjhVetV05v3wlDtEpvM8XE6VvAqnsX/MyefXmumGVdahjjO6dOJGUKR+cwIDbmVIb9UvvF/h7IyA+KGSYDPRhje4wx3XCYYhTcpIsy68FdYHUoaimBAJQgGDbALNkmi07kxPpanryrt3DihWyOz5XNB+hTFiA75S792ilyCGKiH62eJdGd",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"admin.password\\":\\"JDJhJDEwJEhtQUlPbTRpNzRaUXdrdmJYNDRNOE9GOGRxR2ZYZmpWcmtwMmtWZVhyZUFpS3pvZ0ZlYWsu\\",\\"admin.passwordMtime\\":\\"MjAyMi0wOC0wOFQwOToxNTowN1o=\\",\\"clearPassword\\":\\"b3llbG93bw==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"app.kubernetes.io/part-of\\":\\"argocd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-secret\\",\\"namespace\\":\\"argocd\\"},\\"type\\":\\"Opaque\\"} ",
          },
          "name": "argocd-secret",
          "namespace": "argocd",
        },
        "type": "Opaque",
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "application.instanceLabelKey": "argocd.argoproj.io/instance",
      "dex.config": "",
      "url": "",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"application.instanceLabelKey\\":\\"argocd.argoproj.io/instance\\",\\"dex.config\\":\\"\\",\\"url\\":\\"\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"app.kubernetes.io/part-of\\":\\"argocd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-cm\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-cm",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-cm.yaml",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "admin.password": "JDJhJDEwJDkwcG1lcUgvWlU1bTZ4TnR6b3NYQy5TdjAybm1OM3NlT3ZyQVFOSlg4a2JQTWpIM25ueExp",
      "admin.passwordMtime": "MjAyMi0wOC0xMVQwNjo0MzoyOFo=",
      "clearPassword": "b3llbG93bw==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"admin.password\\":\\"JDJhJDEwJDkwcG1lcUgvWlU1bTZ4TnR6b3NYQy5TdjAybm1OM3NlT3ZyQVFOSlg4a2JQTWpIM25ueExp\\",\\"admin.passwordMtime\\":\\"MjAyMi0wOC0xMVQwNjo0MzoyOFo=\\",\\"clearPassword\\":\\"b3llbG93bw==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"app.kubernetes.io/part-of\\":\\"argocd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-secret\\",\\"namespace\\":\\"argocd\\"},\\"type\\":\\"Opaque\\"}
",
      },
      "name": "argocd-secret",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/v1-secret-argocd-argocd-secret.yaml",
    "type": "Opaque",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"argocd-argo-cd-server\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"argocd-argo-cd-argocd-server\\",\\"namespace\\":\\"argocd\\"}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-argocd-argocd-argo-cd-server.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"argocd-argo-cd-server\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"argocd-argo-cd-argocd-server\\"}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-argocd-argocd-argo-cd-server.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-repo-server\\",\\"namespace\\":\\"argocd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"argoproj.io\\"],\\"resources\\":[\\"applications\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]}]}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-role-argocd-argocd-argo-cd-repo-server.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-app-controller\\",\\"namespace\\":\\"argocd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\",\\"configmaps\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"argoproj.io\\"],\\"resources\\":[\\"applications\\",\\"appprojects\\"],\\"verbs\\":[\\"create\\",\\"get\\",\\"list\\",\\"watch\\",\\"update\\",\\"patch\\",\\"delete\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"list\\"]}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-role-argocd-argocd-argo-cd-app-controller.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-argocd-repo-server\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-argo-cd-argocd-repo-server",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-argo-cd-argocd-repo-server.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-argocd-server\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-argo-cd-argocd-server",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-argo-cd-argocd-server.yaml",
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"networking.k8s.io/v1\\",\\"kind\\":\\"Ingress\\",\\"metadata\\":{\\"annotations\\":{\\"nginx.ingress.kubernetes.io/ssl-redirect\\":\\"false\\",\\"nginx.ingress.kubernetes.io/use-regex\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"ingressClassName\\":\\"nginx\\",\\"rules\\":[{\\"host\\":\\"argocd.localhost:8080\\",\\"http\\":{\\"paths\\":[{\\"backend\\":{\\"service\\":{\\"name\\":\\"argocd-argo-cd-server\\",\\"port\\":{\\"name\\":\\"https\\"}}},\\"path\\":\\"/\\",\\"pathType\\":\\"Prefix\\"}]}}],\\"tls\\":[{\\"hosts\\":[\\"argocd.localhost:8080\\"],\\"secretName\\":\\"argocd.localhost:8080-tls\\"}]}}
",
        "nginx.ingress.kubernetes.io/ssl-redirect": "false",
        "nginx.ingress.kubernetes.io/use-regex": "true",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/networking.k8s.io_v1-ingress-argocd-argocd-argo-cd-server.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-app-controller\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"tcp-controller\\",\\"port\\":8082,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"controller\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"},\\"sessionAffinity\\":\\"None\\",\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-argo-cd-app-controller.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "ping_liveness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\\"$(< \\"\${REDIS_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h localhost \\\\
    -p $REDIS_PORT \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ \\"$response\\" != \\"PONG\\" ] && [ \\"$responseFirstWord\\" != \\"LOADING\\" ] && [ \\"$responseFirstWord\\" != \\"MASTERDOWN\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_liveness_local_and_master.sh": "script_dir=\\"$(dirname \\"$0\\")\\"
exit_status=0
\\"$script_dir/ping_liveness_local.sh\\" $1 || exit_status=$?
\\"$script_dir/ping_liveness_master.sh\\" $1 || exit_status=$?
exit $exit_status",
      "ping_liveness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\\"$(< \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h $REDIS_MASTER_HOST \\\\
    -p $REDIS_MASTER_PORT_NUMBER \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ \\"$response\\" != \\"PONG\\" ] && [ \\"$responseFirstWord\\" != \\"LOADING\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_readiness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\\"$(< \\"\${REDIS_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h localhost \\\\
    -p $REDIS_PORT \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
if [ \\"$response\\" != \\"PONG\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_readiness_local_and_master.sh": "script_dir=\\"$(dirname \\"$0\\")\\"
exit_status=0
\\"$script_dir/ping_readiness_local.sh\\" $1 || exit_status=$?
\\"$script_dir/ping_readiness_master.sh\\" $1 || exit_status=$?
exit $exit_status",
      "ping_readiness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\\"$(< \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h $REDIS_MASTER_HOST \\\\
    -p $REDIS_MASTER_PORT_NUMBER \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
if [ \\"$response\\" != \\"PONG\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"ping_liveness_local.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h localhost \\\\\\\\\\\\n    -p $REDIS_PORT \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ] \\\\u0026\\\\u0026 [ \\\\\\"$responseFirstWord\\\\\\" != \\\\\\"LOADING\\\\\\" ] \\\\u0026\\\\u0026 [ \\\\\\"$responseFirstWord\\\\\\" != \\\\\\"MASTERDOWN\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\",\\"ping_liveness_local_and_master.sh\\":\\"script_dir=\\\\\\"$(dirname \\\\\\"$0\\\\\\")\\\\\\"\\\\nexit_status=0\\\\n\\\\\\"$script_dir/ping_liveness_local.sh\\\\\\" $1 || exit_status=$?\\\\n\\\\\\"$script_dir/ping_liveness_master.sh\\\\\\" $1 || exit_status=$?\\\\nexit $exit_status\\",\\"ping_liveness_master.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_MASTER_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_MASTER_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_MASTER_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_MASTER_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h $REDIS_MASTER_HOST \\\\\\\\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ] \\\\u0026\\\\u0026 [ \\\\\\"$responseFirstWord\\\\\\" != \\\\\\"LOADING\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\",\\"ping_readiness_local.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h localhost \\\\\\\\\\\\n    -p $REDIS_PORT \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\",\\"ping_readiness_local_and_master.sh\\":\\"script_dir=\\\\\\"$(dirname \\\\\\"$0\\\\\\")\\\\\\"\\\\nexit_status=0\\\\n\\\\\\"$script_dir/ping_readiness_local.sh\\\\\\" $1 || exit_status=$?\\\\n\\\\\\"$script_dir/ping_readiness_master.sh\\\\\\" $1 || exit_status=$?\\\\nexit $exit_status\\",\\"ping_readiness_master.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_MASTER_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_MASTER_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_MASTER_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_MASTER_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h $REDIS_MASTER_HOST \\\\\\\\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis-health\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-redis-health",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-redis-health.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"*\\"],\\"resources\\":[\\"*\\"],\\"verbs\\":[\\"delete\\",\\"get\\",\\"patch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"pods\\",\\"pods/log\\"],\\"verbs\\":[\\"get\\"]}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-argocd-argocd-argo-cd-server.yaml",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "master.conf": "dir /data
# User-supplied master configuration:
rename-command FLUSHDB \\"\\"
rename-command FLUSHALL \\"\\"
# End of master configuration",
      "redis.conf": "# User-supplied common configuration:
# Enable AOF https://redis.io/topics/persistence#append-only-file
appendonly yes
# Disable RDB persistence, AOF persistence already enabled.
save \\"\\"
# End of common configuration",
      "replica.conf": "dir /data
slave-read-only yes
# User-supplied replica configuration:
rename-command FLUSHDB \\"\\"
rename-command FLUSHALL \\"\\"
# End of replica configuration",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"master.conf\\":\\"dir /data\\\\n# User-supplied master configuration:\\\\nrename-command FLUSHDB \\\\\\"\\\\\\"\\\\nrename-command FLUSHALL \\\\\\"\\\\\\"\\\\n# End of master configuration\\",\\"redis.conf\\":\\"# User-supplied common configuration:\\\\n# Enable AOF https://redis.io/topics/persistence#append-only-file\\\\nappendonly yes\\\\n# Disable RDB persistence, AOF persistence already enabled.\\\\nsave \\\\\\"\\\\\\"\\\\n# End of common configuration\\",\\"replica.conf\\":\\"dir /data\\\\nslave-read-only yes\\\\n# User-supplied replica configuration:\\\\nrename-command FLUSHDB \\\\\\"\\\\\\"\\\\nrename-command FLUSHALL \\\\\\"\\\\\\"\\\\n# End of replica configuration\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis-configuration\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-redis-configuration",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-redis-configuration.yaml",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"strategy\\":{\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"namespaces\\":[\\"argocd\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--staticassets\\",\\"/opt/bitnami/argo-cd/app\\",\\"--repo-server\\",\\"argocd-argo-cd-repo-server:8081\\",\\"--logformat\\",\\"text\\",\\"--loglevel\\",\\"info\\",\\"--redis\\",\\"argocd-redis-master:6379\\",\\"--insecure\\"],\\"command\\":[\\"argocd-server\\"],\\"env\\":[{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/argo-cd:2.3.3-debian-10-r25\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":8080},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"name\\":\\"argocd-server\\",\\"ports\\":[{\\"containerPort\\":8080,\\"name\\":\\"http\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":8080},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/app/config/ssh\\",\\"name\\":\\"ssh-known-hosts\\"},{\\"mountPath\\":\\"/app/config/server/tls\\",\\"name\\":\\"argocd-repo-server-tls\\"}]}],\\"initContainers\\":[{\\"args\\":[\\"-ec\\",\\"#!/bin/bash\\\\n\\\\nset -o errexit\\\\nset -o nounset\\\\nset -o pipefail\\\\n\\\\n. /opt/bitnami/scripts/libos.sh\\\\n. /opt/bitnami/scripts/liblog.sh\\\\n\\\\ncheck_redis_connection() {\\\\n  local result=\\\\\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\\\\\"\\\\n  if [[ \\\\\\"$result\\\\\\" != \\\\\\"PONG\\\\\\" ]]; then\\\\n    false\\\\n  fi\\\\n}\\\\n\\\\ninfo \\\\\\"Checking redis connection...\\\\\\"\\\\nif ! retry_while \\\\\\"check_redis_connection\\\\\\"; then\\\\n    error \\\\\\"Could not connect to the Redis server\\\\\\"\\\\n    return 1\\\\nelse\\\\n    info \\\\\\"Connected to the Redis instance\\\\\\"\\\\nfi\\\\n\\"],\\"command\\":[\\"/bin/bash\\"],\\"env\\":[{\\"name\\":\\"REDISCLI_AUTH\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/redis:6.2.7-debian-10-r2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"wait-for-redis\\"}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"argocd-argo-cd-argocd-server\\",\\"volumes\\":[{\\"configMap\\":{\\"name\\":\\"argocd-ssh-known-hosts-cm\\"},\\"name\\":\\"ssh-known-hosts\\"},{\\"name\\":\\"argocd-repo-server-tls\\",\\"secret\\":{\\"items\\":[{\\"key\\":\\"tls.crt\\",\\"path\\":\\"tls.crt\\"},{\\"key\\":\\"tls.key\\",\\"path\\":\\"tls.key\\"},{\\"key\\":\\"ca.crt\\",\\"path\\":\\"ca.crt\\"}],\\"optional\\":true,\\"secretName\\":\\"argocd-repo-server-tls\\"}}]}}}}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-server.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "server",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-3.1.16",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "server",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": Array [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--staticassets",
                "/opt/bitnami/argo-cd/app",
                "--repo-server",
                "argocd-argo-cd-repo-server:8081",
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
                "--insecure",
              ],
              "command": Array [
                "argocd-server",
              ],
              "env": Array [
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.3.3-debian-10-r25",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 8080,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "argocd-server",
              "ports": Array [
                Object {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 8080,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/app/config/ssh",
                  "name": "ssh-known-hosts",
                },
                Object {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result=\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\"
  if [[ \\"$result\\" != \\"PONG\\" ]]; then
    false
  fi
}

info \\"Checking redis connection...\\"
if ! retry_while \\"check_redis_connection\\"; then
    error \\"Could not connect to the Redis server\\"
    return 1
else
    info \\"Connected to the Redis instance\\"
fi
",
              ],
              "command": Array [
                "/bin/bash",
              ],
              "env": Array [
                Object {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r2",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-server",
          "volumes": Array [
            Object {
              "configMap": Object {
                "name": "argocd-ssh-known-hosts-cm",
              },
              "name": "ssh-known-hosts",
            },
            Object {
              "name": "argocd-repo-server-tls",
              "secret": Object {
                "items": Array [
                  Object {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  Object {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  Object {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis-master\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"tcp-redis\\",\\"port\\":6379,\\"targetPort\\":\\"redis\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"redis\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "argocd-redis-master",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-redis-master.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-app-controller\\",\\"namespace\\":\\"argocd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"argocd-argo-cd-app-controller\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"argocd-argo-cd-argocd-app-controller\\",\\"namespace\\":\\"argocd\\"}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-argocd-argocd-argo-cd-app-controller.yaml",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "ssh_known_hosts": "bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"ssh_known_hosts\\":\\"bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==\\\\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\\\\ngitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\\\\ngitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\\\\ngitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\\\\nssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\\\nvs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\\\n\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"app.kubernetes.io/part-of\\":\\"argocd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-ssh-known-hosts-cm\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-ssh-known-hosts-cm",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-ssh-known-hosts-cm.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-redis",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-redis.yaml",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-repo-server\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"strategy\\":{\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"namespaces\\":[\\"argocd\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--logformat\\",\\"text\\",\\"--loglevel\\",\\"info\\",\\"--redis\\",\\"argocd-redis-master:6379\\"],\\"command\\":[\\"argocd-repo-server\\"],\\"env\\":[{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/argo-cd:2.3.3-debian-10-r25\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"tcpSocket\\":{\\"port\\":8081},\\"timeoutSeconds\\":1},\\"name\\":\\"argocd-repo-server\\",\\"ports\\":[{\\"containerPort\\":8081,\\"name\\":\\"repo-server\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"tcpSocket\\":{\\"port\\":8081},\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/app/config/ssh\\",\\"name\\":\\"ssh-known-hosts\\"},{\\"mountPath\\":\\"/app/config/server/tls\\",\\"name\\":\\"argocd-repo-server-tls\\"},{\\"mountPath\\":\\"/app/config/gpg/keys\\",\\"name\\":\\"gpg-keyring\\"},{\\"mountPath\\":\\"/tmp\\",\\"name\\":\\"tmp-dir\\"}]}],\\"initContainers\\":[{\\"args\\":[\\"-ec\\",\\"#!/bin/bash\\\\n\\\\nset -o errexit\\\\nset -o nounset\\\\nset -o pipefail\\\\n\\\\n. /opt/bitnami/scripts/libos.sh\\\\n. /opt/bitnami/scripts/liblog.sh\\\\n\\\\ncheck_redis_connection() {\\\\n  local result=\\\\\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\\\\\"\\\\n  if [[ \\\\\\"$result\\\\\\" != \\\\\\"PONG\\\\\\" ]]; then\\\\n    false\\\\n  fi\\\\n}\\\\n\\\\ninfo \\\\\\"Checking redis connection...\\\\\\"\\\\nif ! retry_while \\\\\\"check_redis_connection\\\\\\"; then\\\\n    error \\\\\\"Could not connect to the Redis server\\\\\\"\\\\n    return 1\\\\nelse\\\\n    info \\\\\\"Connected to the Redis instance\\\\\\"\\\\nfi\\\\n\\"],\\"command\\":[\\"/bin/bash\\"],\\"env\\":[{\\"name\\":\\"REDISCLI_AUTH\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/redis:6.2.7-debian-10-r2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"wait-for-redis\\"}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"argocd-argo-cd-argocd-repo-server\\",\\"volumes\\":[{\\"configMap\\":{\\"name\\":\\"argocd-ssh-known-hosts-cm\\"},\\"name\\":\\"ssh-known-hosts\\"},{\\"name\\":\\"argocd-repo-server-tls\\",\\"secret\\":{\\"items\\":[{\\"key\\":\\"tls.crt\\",\\"path\\":\\"tls.crt\\"},{\\"key\\":\\"tls.key\\",\\"path\\":\\"tls.key\\"},{\\"key\\":\\"ca.crt\\",\\"path\\":\\"ca.crt\\"}],\\"optional\\":true,\\"secretName\\":\\"argocd-repo-server-tls\\"}},{\\"emptyDir\\":{},\\"name\\":\\"tmp-dir\\"},{\\"emptyDir\\":{},\\"name\\":\\"gpg-keyring\\"}]}}}}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-repo-server.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "repo-server",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-3.1.16",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "repo-server",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": Array [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
              ],
              "command": Array [
                "argocd-repo-server",
              ],
              "env": Array [
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.3.3-debian-10-r25",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": Object {
                  "port": 8081,
                },
                "timeoutSeconds": 1,
              },
              "name": "argocd-repo-server",
              "ports": Array [
                Object {
                  "containerPort": 8081,
                  "name": "repo-server",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": Object {
                  "port": 8081,
                },
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/app/config/ssh",
                  "name": "ssh-known-hosts",
                },
                Object {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
                Object {
                  "mountPath": "/app/config/gpg/keys",
                  "name": "gpg-keyring",
                },
                Object {
                  "mountPath": "/tmp",
                  "name": "tmp-dir",
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result=\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\"
  if [[ \\"$result\\" != \\"PONG\\" ]]; then
    false
  fi
}

info \\"Checking redis connection...\\"
if ! retry_while \\"check_redis_connection\\"; then
    error \\"Could not connect to the Redis server\\"
    return 1
else
    info \\"Connected to the Redis instance\\"
fi
",
              ],
              "command": Array [
                "/bin/bash",
              ],
              "env": Array [
                Object {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r2",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-repo-server",
          "volumes": Array [
            Object {
              "configMap": Object {
                "name": "argocd-ssh-known-hosts-cm",
              },
              "name": "ssh-known-hosts",
            },
            Object {
              "name": "argocd-repo-server-tls",
              "secret": Object {
                "items": Array [
                  Object {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  Object {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  Object {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
            Object {
              "emptyDir": Object {},
              "name": "tmp-dir",
            },
            Object {
              "emptyDir": Object {},
              "name": "gpg-keyring",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"http\\",\\"port\\":80,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"http\\"},{\\"name\\":\\"https\\",\\"port\\":443,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"http\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"},\\"sessionAffinity\\":\\"None\\",\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-argo-cd-server.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-repo-server\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"tcp-repo-server\\",\\"port\\":8081,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"repo-server\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"repo-server\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"},\\"sessionAffinity\\":\\"None\\",\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-argo-cd-repo-server.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-app-controller\\",\\"namespace\\":\\"argocd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"argocd-argo-cd-app-controller\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"argocd-argo-cd-argocd-app-controller\\"}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-argocd-argocd-argo-cd-app-controller.yaml",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "redis-password": "dGw0RVN2WTlrTA==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"redis-password\\":\\"dGw0RVN2WTlrTA==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis\\",\\"namespace\\":\\"argocd\\"},\\"type\\":\\"Opaque\\"}
",
      },
      "name": "argocd-redis",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/v1-secret-argocd-argocd-redis.yaml",
    "type": "Opaque",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-repo-server\\",\\"namespace\\":\\"argocd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"argocd-argo-cd-repo-server\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"argocd-argo-cd-argocd-repo-server\\"}]}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-argocd-argocd-argo-cd-repo-server.yaml",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-app-controller\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"strategy\\":{\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\"}},\\"namespaces\\":[\\"argocd\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--status-processors\\",\\"20\\",\\"--operation-processors\\",\\"10\\",\\"--app-resync\\",\\"180\\",\\"--self-heal-timeout-seconds\\",\\"5\\",\\"--repo-server\\",\\"argocd-argo-cd-repo-server:8081\\",\\"--logformat\\",\\"text\\",\\"--loglevel\\",\\"info\\",\\"--redis\\",\\"argocd-redis-master:6379\\"],\\"command\\":[\\"argocd-application-controller\\"],\\"env\\":[{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/argo-cd:2.3.3-debian-10-r25\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":8082},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"name\\":\\"controller\\",\\"ports\\":[{\\"containerPort\\":8082,\\"name\\":\\"controller\\",\\"protocol\\":\\"TCP\\"},{\\"containerPort\\":8082,\\"name\\":\\"metrics\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"tcpSocket\\":{\\"port\\":8082},\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/app/config/server/tls\\",\\"name\\":\\"argocd-repo-server-tls\\"}]}],\\"initContainers\\":[{\\"args\\":[\\"-ec\\",\\"#!/bin/bash\\\\n\\\\nset -o errexit\\\\nset -o nounset\\\\nset -o pipefail\\\\n\\\\n. /opt/bitnami/scripts/libos.sh\\\\n. /opt/bitnami/scripts/liblog.sh\\\\n\\\\ncheck_redis_connection() {\\\\n  local result=\\\\\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\\\\\"\\\\n  if [[ \\\\\\"$result\\\\\\" != \\\\\\"PONG\\\\\\" ]]; then\\\\n    false\\\\n  fi\\\\n}\\\\n\\\\ninfo \\\\\\"Checking redis connection...\\\\\\"\\\\nif ! retry_while \\\\\\"check_redis_connection\\\\\\"; then\\\\n    error \\\\\\"Could not connect to the Redis server\\\\\\"\\\\n    return 1\\\\nelse\\\\n    info \\\\\\"Connected to the Redis instance\\\\\\"\\\\nfi\\\\n\\"],\\"command\\":[\\"/bin/bash\\"],\\"env\\":[{\\"name\\":\\"REDISCLI_AUTH\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}}],\\"image\\":\\"docker.io/bitnami/redis:6.2.7-debian-10-r2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"wait-for-redis\\"}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"argocd-argo-cd-argocd-app-controller\\",\\"volumes\\":[{\\"name\\":\\"argocd-repo-server-tls\\",\\"secret\\":{\\"items\\":[{\\"key\\":\\"tls.crt\\",\\"path\\":\\"tls.crt\\"},{\\"key\\":\\"tls.key\\",\\"path\\":\\"tls.key\\"},{\\"key\\":\\"ca.crt\\",\\"path\\":\\"ca.crt\\"}],\\"optional\\":true,\\"secretName\\":\\"argocd-repo-server-tls\\"}}]}}}}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-app-controller.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-3.1.16",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "controller",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": Array [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--status-processors",
                "20",
                "--operation-processors",
                "10",
                "--app-resync",
                "180",
                "--self-heal-timeout-seconds",
                "5",
                "--repo-server",
                "argocd-argo-cd-repo-server:8081",
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
              ],
              "command": Array [
                "argocd-application-controller",
              ],
              "env": Array [
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.3.3-debian-10-r25",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 8082,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "controller",
              "ports": Array [
                Object {
                  "containerPort": 8082,
                  "name": "controller",
                  "protocol": "TCP",
                },
                Object {
                  "containerPort": 8082,
                  "name": "metrics",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": Object {
                  "port": 8082,
                },
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result=\\"$(redis-cli -h argocd-redis-master -p 6379 PING)\\"
  if [[ \\"$result\\" != \\"PONG\\" ]]; then
    false
  fi
}

info \\"Checking redis connection...\\"
if ! retry_while \\"check_redis_connection\\"; then
    error \\"Could not connect to the Redis server\\"
    return 1
else
    info \\"Connected to the Redis instance\\"
fi
",
              ],
              "command": Array [
                "/bin/bash",
              ],
              "env": Array [
                Object {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r2",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-app-controller",
          "volumes": Array [
            Object {
              "name": "argocd-repo-server-tls",
              "secret": Object {
                "items": Array [
                  Object {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  Object {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  Object {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-server\\",\\"namespace\\":\\"argocd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\",\\"configmaps\\"],\\"verbs\\":[\\"create\\",\\"get\\",\\"list\\",\\"watch\\",\\"update\\",\\"patch\\",\\"delete\\"]},{\\"apiGroups\\":[\\"argoproj.io\\"],\\"resources\\":[\\"applications\\",\\"appprojects\\"],\\"verbs\\":[\\"create\\",\\"get\\",\\"list\\",\\"watch\\",\\"update\\",\\"delete\\",\\"patch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"list\\"]}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-role-argocd-argocd-argo-cd-server.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-argocd-app-controller\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-argo-cd-argocd-app-controller",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-argo-cd-argocd-app-controller.yaml",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "start-master.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\\"$(< \\"\${REDIS_PASSWORD_FILE}\\")\\"
if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
fi
if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
fi
ARGS=(\\"--port\\" \\"\${REDIS_PORT}\\")
ARGS+=(\\"--requirepass\\" \\"\${REDIS_PASSWORD}\\")
ARGS+=(\\"--masterauth\\" \\"\${REDIS_PASSWORD}\\")
ARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/redis.conf\\")
ARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/master.conf\\")
exec redis-server \\"\${ARGS[@]}\\"
",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"start-master.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\nif [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then\\\\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\\\\nfi\\\\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\\\\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\\\\nfi\\\\nARGS=(\\\\\\"--port\\\\\\" \\\\\\"\${REDIS_PORT}\\\\\\")\\\\nARGS+=(\\\\\\"--requirepass\\\\\\" \\\\\\"\${REDIS_PASSWORD}\\\\\\")\\\\nARGS+=(\\\\\\"--masterauth\\\\\\" \\\\\\"\${REDIS_PASSWORD}\\\\\\")\\\\nARGS+=(\\\\\\"--include\\\\\\" \\\\\\"/opt/bitnami/redis/etc/redis.conf\\\\\\")\\\\nARGS+=(\\\\\\"--include\\\\\\" \\\\\\"/opt/bitnami/redis/etc/master.conf\\\\\\")\\\\nexec redis-server \\\\\\"\${ARGS[@]}\\\\\\"\\\\n\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis-scripts\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd-redis-scripts",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-redis-scripts.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis-headless\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"tcp-redis\\",\\"port\\":6379,\\"targetPort\\":\\"redis\\"}],\\"selector\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"redis\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "argocd-redis-headless",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-redis-headless.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"StatefulSet\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"argocd-redis-master\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"redis\\"}},\\"serviceName\\":\\"argocd-redis-headless\\",\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/configmap\\":\\"e613b74f64a1abb905aba4af7f0301b476819a3f6a306d9a3657086466a276f9\\",\\"checksum/health\\":\\"7bcc56d6b8dd9f33cae37e7b3fc8b726110f46a517de6d73f1451bf57187000e\\",\\"checksum/scripts\\":\\"3891447283e6d8c1c3eeec22f284bfa7d72558be1faee862ed78dcd1e275cf5d\\",\\"checksum/secret\\":\\"8d1472edc989e2f52d1566011b7554eb3143b444cfdd00159fc9646b121dca6b\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"redis\\"}},\\"namespaces\\":[\\"argocd\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"-c\\",\\"/opt/bitnami/scripts/start-scripts/start-master.sh\\"],\\"command\\":[\\"/bin/bash\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"REDIS_REPLICATION_MODE\\",\\"value\\":\\"master\\"},{\\"name\\":\\"ALLOW_EMPTY_PASSWORD\\",\\"value\\":\\"no\\"},{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"argocd-redis\\"}}},{\\"name\\":\\"REDIS_TLS_ENABLED\\",\\"value\\":\\"no\\"},{\\"name\\":\\"REDIS_PORT\\",\\"value\\":\\"6379\\"}],\\"image\\":\\"docker.io/bitnami/redis:6.2.7-debian-10-r2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"exec\\":{\\"command\\":[\\"sh\\",\\"-c\\",\\"/health/ping_liveness_local.sh 5\\"]},\\"failureThreshold\\":5,\\"initialDelaySeconds\\":20,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":6},\\"name\\":\\"redis\\",\\"ports\\":[{\\"containerPort\\":6379,\\"name\\":\\"redis\\"}],\\"readinessProbe\\":{\\"exec\\":{\\"command\\":[\\"sh\\",\\"-c\\",\\"/health/ping_readiness_local.sh 1\\"]},\\"failureThreshold\\":5,\\"initialDelaySeconds\\":20,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":2},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/opt/bitnami/scripts/start-scripts\\",\\"name\\":\\"start-scripts\\"},{\\"mountPath\\":\\"/health\\",\\"name\\":\\"health\\"},{\\"mountPath\\":\\"/data\\",\\"name\\":\\"redis-data\\"},{\\"mountPath\\":\\"/opt/bitnami/redis/mounted-etc\\",\\"name\\":\\"config\\"},{\\"mountPath\\":\\"/opt/bitnami/redis/etc/\\",\\"name\\":\\"redis-tmp-conf\\"},{\\"mountPath\\":\\"/tmp\\",\\"name\\":\\"tmp\\"}]}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"argocd-redis\\",\\"terminationGracePeriodSeconds\\":30,\\"volumes\\":[{\\"configMap\\":{\\"defaultMode\\":493,\\"name\\":\\"argocd-redis-scripts\\"},\\"name\\":\\"start-scripts\\"},{\\"configMap\\":{\\"defaultMode\\":493,\\"name\\":\\"argocd-redis-health\\"},\\"name\\":\\"health\\"},{\\"configMap\\":{\\"name\\":\\"argocd-redis-configuration\\"},\\"name\\":\\"config\\"},{\\"emptyDir\\":{},\\"name\\":\\"redis-tmp-conf\\"},{\\"emptyDir\\":{},\\"name\\":\\"tmp\\"}]}},\\"updateStrategy\\":{\\"rollingUpdate\\":{},\\"type\\":\\"RollingUpdate\\"},\\"volumeClaimTemplates\\":[{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/name\\":\\"redis\\"},\\"name\\":\\"redis-data\\"},\\"spec\\":{\\"accessModes\\":[\\"ReadWriteOnce\\"],\\"resources\\":{\\"requests\\":{\\"storage\\":\\"8Gi\\"}}}}]}}
",
      },
      "name": "argocd-redis-master",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/apps_v1-statefulset-argocd-argocd-redis-master.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/configmap": "e613b74f64a1abb905aba4af7f0301b476819a3f6a306d9a3657086466a276f9",
            "checksum/health": "7bcc56d6b8dd9f33cae37e7b3fc8b726110f46a517de6d73f1451bf57187000e",
            "checksum/scripts": "3891447283e6d8c1c3eeec22f284bfa7d72558be1faee862ed78dcd1e275cf5d",
            "checksum/secret": "8d1472edc989e2f52d1566011b7554eb3143b444cfdd00159fc9646b121dca6b",
          },
          "labels": Object {
            "app.kubernetes.io/component": "master",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "redis",
            "helm.sh/chart": "redis-16.8.9",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "master",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "redis",
                      },
                    },
                    "namespaces": Array [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-master.sh",
              ],
              "command": Array [
                "/bin/bash",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "REDIS_REPLICATION_MODE",
                  "value": "master",
                },
                Object {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no",
                },
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
                Object {
                  "name": "REDIS_TLS_ENABLED",
                  "value": "no",
                },
                Object {
                  "name": "REDIS_PORT",
                  "value": "6379",
                },
              ],
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "sh",
                    "-c",
                    "/health/ping_liveness_local.sh 5",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 6,
              },
              "name": "redis",
              "ports": Array [
                Object {
                  "containerPort": 6379,
                  "name": "redis",
                },
              ],
              "readinessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "sh",
                    "-c",
                    "/health/ping_readiness_local.sh 1",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/opt/bitnami/scripts/start-scripts",
                  "name": "start-scripts",
                },
                Object {
                  "mountPath": "/health",
                  "name": "health",
                },
                Object {
                  "mountPath": "/data",
                  "name": "redis-data",
                },
                Object {
                  "mountPath": "/opt/bitnami/redis/mounted-etc",
                  "name": "config",
                },
                Object {
                  "mountPath": "/opt/bitnami/redis/etc/",
                  "name": "redis-tmp-conf",
                },
                Object {
                  "mountPath": "/tmp",
                  "name": "tmp",
                },
              ],
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-redis",
          "terminationGracePeriodSeconds": 30,
          "volumes": Array [
            Object {
              "configMap": Object {
                "defaultMode": 493,
                "name": "argocd-redis-scripts",
              },
              "name": "start-scripts",
            },
            Object {
              "configMap": Object {
                "defaultMode": 493,
                "name": "argocd-redis-health",
              },
              "name": "health",
            },
            Object {
              "configMap": Object {
                "name": "argocd-redis-configuration",
              },
              "name": "config",
            },
            Object {
              "emptyDir": Object {},
              "name": "redis-tmp-conf",
            },
            Object {
              "emptyDir": Object {},
              "name": "tmp",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"argocd\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"argo-cd\\",\\"helm.sh/chart\\":\\"argo-cd-3.1.16\\"},\\"name\\":\\"argocd-argo-cd-app-controller\\",\\"namespace\\":\\"argocd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"*\\"],\\"resources\\":[\\"*\\"],\\"verbs\\":[\\"*\\"]},{\\"nonResourceURLs\\":[\\"*\\"],\\"verbs\\":[\\"*\\"]}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-argocd-argocd-argo-cd-app-controller.yaml",
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
      },
      "name": "issuers.cert-manager.io",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-issuers.cert-manager.io.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "challenges.acme.cert-manager.io",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-challenges.acme.cert-manager.io.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "certificates.cert-manager.io",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-certificates.cert-manager.io.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
      },
      "name": "orders.acme.cert-manager.io",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-orders.acme.cert-manager.io.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "controller-gen.kubebuilder.io/version": "v0.6.1",
      },
      "name": "bundles.trust.cert-manager.io",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-bundles.trust.cert-manager.io.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "certificaterequests.cert-manager.io",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-certificaterequests.cert-manager.io.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "clusterissuers.cert-manager.io",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-clusterissuers.cert-manager.io.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-trust\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-trust",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-trust.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-edit\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\",\\"certificaterequests\\",\\"issuers\\"],\\"verbs\\":[\\"create\\",\\"delete\\",\\"deletecollection\\",\\"patch\\",\\"update\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"challenges\\",\\"orders\\"],\\"verbs\\":[\\"create\\",\\"delete\\",\\"deletecollection\\",\\"patch\\",\\"update\\"]}]}
",
      },
      "name": "cert-manager-controller-edit",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-edit.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-metrics\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"controller\\",\\"port\\":9402,\\"protocol\\":\\"TCP\\",\\"targetPort\\":9402}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "cert-manager-controller-metrics",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-controller-metrics.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"strategy\\":{\\"rollingUpdate\\":{},\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"prometheus.io/path\\":\\"/metrics\\",\\"prometheus.io/port\\":\\"9402\\",\\"prometheus.io/scrape\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"namespaces\\":[\\"cert-manager\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--v=2\\",\\"--cluster-resource-namespace=$(POD_NAMESPACE)\\",\\"--leader-election-namespace=kube-system\\",\\"--acme-http01-solver-image=docker.io/bitnami/acmesolver:1.8.1-debian-11-r0\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}}],\\"image\\":\\"docker.io/bitnami/cert-manager:1.8.1-debian-11-r0\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"cert-manager\\",\\"ports\\":[{\\"containerPort\\":9402,\\"protocol\\":\\"TCP\\"}],\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001}}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"cert-manager-controller\\"}}}}
",
      },
      "name": "cert-manager-controller",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-controller.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "prometheus.io/path": "/metrics",
            "prometheus.io/port": "9402",
            "prometheus.io/scrape": "true",
          },
          "labels": Object {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.6.1",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": Array [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--v=2",
                "--cluster-resource-namespace=$(POD_NAMESPACE)",
                "--leader-election-namespace=kube-system",
                "--acme-http01-solver-image=docker.io/bitnami/acmesolver:1.8.1-debian-11-r0",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cert-manager:1.8.1-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "name": "cert-manager",
              "ports": Array [
                Object {
                  "containerPort": 9402,
                  "protocol": "TCP",
                },
              ],
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-controller",
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook-dynamic-serving\\",\\"namespace\\":\\"cert-manager\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"cert-manager-webhook-ca\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"create\\"]}]}
",
      },
      "name": "cert-manager-webhook-dynamic-serving",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-cert-manager-cert-manager-webhook-dynamic-serving.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook-subjectaccessreviews\\"},\\"rules\\":[{\\"apiGroups\\":[\\"authorization.k8s.io\\"],\\"resources\\":[\\"subjectaccessreviews\\"],\\"verbs\\":[\\"create\\"]}]}
",
      },
      "name": "cert-manager-webhook-subjectaccessreviews",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-webhook-subjectaccessreviews.yaml",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Certificate",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"Certificate\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"dnsNames\\":[\\"cert-manager-trust.cert-manager.svc\\"],\\"issuerRef\\":{\\"name\\":\\"cert-manager-trust\\"},\\"revisionHistoryLimit\\":1,\\"secretName\\":\\"cert-manager-trust-tls\\"}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-certificate-cert-manager-cert-manager-trust.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook\\",\\"namespace\\":\\"cert-manager\\"}}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-webhook.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-issuers\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"issuers\\",\\"issuers/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"issuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"create\\",\\"update\\",\\"patch\\",\\"delete\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-issuers",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-issuers.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-view\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\",\\"certificaterequests\\",\\"issuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"challenges\\",\\"orders\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]}]}
",
      },
      "name": "cert-manager-controller-view",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-view.yaml",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "ClusterIssuer",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"ClusterIssuer\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-trust-anchor\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"ca\\":{\\"secretName\\":\\"linkerd-identity-trust-roots\\"}}}
",
      },
      "name": "linkerd-trust-anchor",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-clusterissuer-cert-manager-linkerd-trust-anchor.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook-dynamic-serving\\",\\"namespace\\":\\"cert-manager\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"cert-manager-webhook-dynamic-serving\\"},\\"subjects\\":[{\\"apiGroup\\":\\"\\",\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-webhook\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-webhook-dynamic-serving",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-cert-manager-cert-manager-webhook-dynamic-serving.yaml",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app\\":\\"cert-manager-trust\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app\\":\\"cert-manager-trust\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"--log-level=1\\",\\"--metrics-port=9402\\",\\"--readiness-probe-port=6060\\",\\"--readiness-probe-path=/readyz\\",\\"--trust-namespace=cert-manager\\",\\"--webhook-host=0.0.0.0\\",\\"--webhook-port=6443\\",\\"--webhook-certificate-dir=/tls\\"],\\"command\\":[\\"cert-manager-trust\\"],\\"image\\":\\"quay.io/jetstack/cert-manager-trust:v0.1.0\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"cert-manager-trust\\",\\"ports\\":[{\\"containerPort\\":6443},{\\"containerPort\\":9402}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/readyz\\",\\"port\\":6060},\\"initialDelaySeconds\\":3,\\"periodSeconds\\":7},\\"resources\\":{},\\"volumeMounts\\":[{\\"mountPath\\":\\"/tls\\",\\"name\\":\\"tls\\",\\"readOnly\\":true}]}],\\"serviceAccountName\\":\\"cert-manager-trust\\",\\"volumes\\":[{\\"name\\":\\"tls\\",\\"secret\\":{\\"defaultMode\\":420,\\"secretName\\":\\"cert-manager-trust-tls\\"}}]}}}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-trust.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app": "cert-manager-trust",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "--log-level=1",
                "--metrics-port=9402",
                "--readiness-probe-port=6060",
                "--readiness-probe-path=/readyz",
                "--trust-namespace=cert-manager",
                "--webhook-host=0.0.0.0",
                "--webhook-port=6443",
                "--webhook-certificate-dir=/tls",
              ],
              "command": Array [
                "cert-manager-trust",
              ],
              "image": "quay.io/jetstack/cert-manager-trust:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "cert-manager-trust",
              "ports": Array [
                Object {
                  "containerPort": 6443,
                },
                Object {
                  "containerPort": 9402,
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/readyz",
                  "port": 6060,
                },
                "initialDelaySeconds": 3,
                "periodSeconds": 7,
              },
              "resources": Object {},
              "volumeMounts": Array [
                Object {
                  "mountPath": "/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "serviceAccountName": "cert-manager-trust",
          "volumes": Array [
            Object {
              "name": "tls",
              "secret": Object {
                "defaultMode": 420,
                "secretName": "cert-manager-trust-tls",
              },
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"https\\",\\"port\\":443,\\"targetPort\\":10250}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-webhook.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"strategy\\":{\\"rollingUpdate\\":{},\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"namespaces\\":[\\"cert-manager\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--v=2\\",\\"--secure-port=10250\\",\\"--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)\\",\\"--dynamic-serving-ca-secret-name=cert-manager-webhook-ca\\",\\"--dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}}],\\"image\\":\\"docker.io/bitnami/cert-manager-webhook:1.8.1-debian-11-r0\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/livez\\",\\"port\\":6080,\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":60,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"name\\":\\"cert-manager-webhook\\",\\"ports\\":[{\\"containerPort\\":10250,\\"name\\":\\"https\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":6080,\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":5,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001}}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"cert-manager-webhook\\"}}}}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-webhook.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "webhook",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.6.1",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": Array [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--v=2",
                "--secure-port=10250",
                "--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)",
                "--dynamic-serving-ca-secret-name=cert-manager-webhook-ca",
                "--dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cert-manager-webhook:1.8.1-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/livez",
                  "port": 6080,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "cert-manager-webhook",
              "ports": Array [
                Object {
                  "containerPort": 10250,
                  "name": "https",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 6080,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-webhook",
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"coordination.k8s.io\\"],\\"resources\\":[\\"leases\\"],\\"verbs\\":[\\"get\\",\\"create\\",\\"update\\",\\"watch\\",\\"list\\"]}]}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-cert-manager-cert-manager-trust.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}}
",
      },
      "name": "cert-manager-controller",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-controller.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cert-manager\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-approve\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resourceNames\\":[\\"issuers.cert-manager.io/*\\",\\"clusterissuers.cert-manager.io/*\\"],\\"resources\\":[\\"signers\\"],\\"verbs\\":[\\"approve\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-approve",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-approve.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-trust.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-orders\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-orders\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-orders",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-orders.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-certificates\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-certificates\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-certificates",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-certificates.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"webhook\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-webhook-subjectaccessreviews\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-webhook-subjectaccessreviews\\"},\\"subjects\\":[{\\"apiGroup\\":\\"\\",\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-webhook\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-webhook-subjectaccessreviews",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-webhook-subjectaccessreviews.yaml",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Issuer",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"Issuer\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"selfSigned\\":{}}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-issuer-cert-manager-cert-manager-trust.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-cainjector\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"get\\",\\"create\\",\\"update\\",\\"patch\\"]},{\\"apiGroups\\":[\\"admissionregistration.k8s.io\\"],\\"resources\\":[\\"validatingwebhookconfigurations\\",\\"mutatingwebhookconfigurations\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"update\\"]},{\\"apiGroups\\":[\\"apiregistration.k8s.io\\"],\\"resources\\":[\\"apiservices\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"update\\"]},{\\"apiGroups\\":[\\"apiextensions.k8s.io\\"],\\"resources\\":[\\"customresourcedefinitions\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"update\\"]},{\\"apiGroups\\":[\\"auditregistration.k8s.io\\"],\\"resources\\":[\\"auditsinks\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"update\\"]}]}
",
      },
      "name": "cert-manager-cainjector",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-cainjector.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-ingress-shim\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\",\\"certificaterequests\\"],\\"verbs\\":[\\"create\\",\\"update\\",\\"delete\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\",\\"certificaterequests\\",\\"issuers\\",\\"clusterissuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses/finalizers\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-ingress-shim",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-ingress-shim.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-leader-election\\",\\"namespace\\":\\"kube-system\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"cert-manager-controller\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"get\\",\\"update\\",\\"patch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"create\\"]},{\\"apiGroups\\":[\\"coordination.k8s.io\\"],\\"resourceNames\\":[\\"cert-manager-controller\\"],\\"resources\\":[\\"leases\\"],\\"verbs\\":[\\"get\\",\\"update\\",\\"patch\\"]},{\\"apiGroups\\":[\\"coordination.k8s.io\\"],\\"resources\\":[\\"leases\\"],\\"verbs\\":[\\"create\\"]}]}
",
      },
      "name": "cert-manager-controller-leader-election",
      "namespace": "kube-system",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-kube-system-cert-manager-controller-leader-election.yaml",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Certificate",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"Certificate\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-trust-anchor\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"commonName\\":\\"root.linkerd.cluster.local\\",\\"isCA\\":true,\\"issuerRef\\":{\\"group\\":\\"cert-manager.io\\",\\"kind\\":\\"ClusterIssuer\\",\\"name\\":\\"linkerd-self-signed-issuer\\"},\\"privateKey\\":{\\"algorithm\\":\\"ECDSA\\",\\"size\\":256},\\"secretName\\":\\"linkerd-identity-trust-roots\\"}}
",
      },
      "name": "linkerd-trust-anchor",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-certificate-cert-manager-linkerd-trust-anchor.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-issuers\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-issuers\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-issuers",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-issuers.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-cainjector-leader-election\\",\\"namespace\\":\\"kube-system\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"cert-manager-cainjector-leader-election\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-cainjector\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-cainjector-leader-election",
      "namespace": "kube-system",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-kube-system-cert-manager-cainjector-leader-election.yaml",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-cainjector\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"strategy\\":{\\"rollingUpdate\\":{},\\"type\\":\\"RollingUpdate\\"},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\"}},\\"namespaces\\":[\\"cert-manager\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"--v=2\\",\\"--leader-election-namespace=kube-system\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}}],\\"image\\":\\"docker.io/bitnami/cainjector:1.8.1-debian-11-r0\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"cainjector\\",\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001}}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"cert-manager-cainjector\\"}}}}
",
      },
      "name": "cert-manager-cainjector",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-cainjector.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "cainjector",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.6.1",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": Array [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "--v=2",
                "--leader-election-namespace=kube-system",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cainjector:1.8.1-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "name": "cainjector",
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-cainjector",
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-clusterissuers\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-clusterissuers\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-clusterissuers",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-clusterissuers.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-cainjector\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-cainjector\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-cainjector\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-cainjector",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-cainjector.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-clusterissuers\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"clusterissuers\\",\\"clusterissuers/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"clusterissuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"create\\",\\"update\\",\\"patch\\",\\"delete\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-clusterissuers",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-clusterissuers.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-challenges\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-challenges\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-challenges",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-challenges.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\"},\\"rules\\":[{\\"apiGroups\\":[\\"trust.cert-manager.io\\"],\\"resources\\":[\\"bundles\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"trust.cert-manager.io\\"],\\"resources\\":[\\"bundles/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"create\\",\\"update\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "cert-manager-trust",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-trust.yaml",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "ClusterIssuer",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"ClusterIssuer\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-self-signed-issuer\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"selfSigned\\":{}}}
",
      },
      "name": "linkerd-self-signed-issuer",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-clusterissuer-cert-manager-linkerd-self-signed-issuer.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust-metrics\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"metrics\\",\\"port\\":9402,\\"protocol\\":\\"TCP\\",\\"targetPort\\":9402}],\\"selector\\":{\\"app\\":\\"cert-manager-trust\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "cert-manager-trust-metrics",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-trust-metrics.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"webhook\\",\\"port\\":443,\\"protocol\\":\\"TCP\\",\\"targetPort\\":6443}],\\"selector\\":{\\"app\\":\\"cert-manager-trust\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-trust.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-cainjector\\",\\"namespace\\":\\"cert-manager\\"}}
",
      },
      "name": "cert-manager-cainjector",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-cainjector.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-certificates\\"},\\"rules\\":[{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\",\\"certificates/status\\",\\"certificaterequests\\",\\"certificaterequests/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates\\",\\"certificaterequests\\",\\"clusterissuers\\",\\"issuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"certificates/finalizers\\",\\"certificaterequests/finalizers\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"orders\\"],\\"verbs\\":[\\"create\\",\\"delete\\",\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"create\\",\\"update\\",\\"delete\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-certificates",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-certificates.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"cert-manager-trust\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-cert-manager-cert-manager-trust.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-orders\\"},\\"rules\\":[{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"orders\\",\\"orders/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"orders\\",\\"challenges\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"clusterissuers\\",\\"issuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"challenges\\"],\\"verbs\\":[\\"create\\",\\"delete\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"orders/finalizers\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-orders",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-orders.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cainjector\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-cainjector-leader-election\\",\\"namespace\\":\\"kube-system\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"cert-manager-cainjector-leader-election\\",\\"cert-manager-cainjector-leader-election-core\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"get\\",\\"update\\",\\"patch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"create\\"]},{\\"apiGroups\\":[\\"coordination.k8s.io\\"],\\"resourceNames\\":[\\"cert-manager-controller\\"],\\"resources\\":[\\"leases\\"],\\"verbs\\":[\\"get\\",\\"update\\",\\"patch\\"]},{\\"apiGroups\\":[\\"coordination.k8s.io\\"],\\"resources\\":[\\"leases\\"],\\"verbs\\":[\\"create\\",\\"get\\",\\"update\\"]}]}
",
      },
      "name": "cert-manager-cainjector-leader-election",
      "namespace": "kube-system",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-kube-system-cert-manager-cainjector-leader-election.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-challenges\\"},\\"rules\\":[{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"challenges\\",\\"challenges/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"challenges\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"cert-manager.io\\"],\\"resources\\":[\\"issuers\\",\\"clusterissuers\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"pods\\",\\"services\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"create\\",\\"delete\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\",\\"create\\",\\"delete\\",\\"update\\"]},{\\"apiGroups\\":[\\"route.openshift.io\\"],\\"resources\\":[\\"routes/custom-host\\"],\\"verbs\\":[\\"create\\"]},{\\"apiGroups\\":[\\"acme.cert-manager.io\\"],\\"resources\\":[\\"challenges/finalizers\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]}]}
",
      },
      "name": "cert-manager-controller-controller-challenges",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-challenges.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"cert-manager\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-approve\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-approve\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-approve",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-approve.yaml",
  },
  Object {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": Object {
      "annotations": Object {
        "cert-manager.io/inject-ca-from": "cert-manager/cert-manager-trust",
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"admissionregistration.k8s.io/v1\\",\\"kind\\":\\"ValidatingWebhookConfiguration\\",\\"metadata\\":{\\"annotations\\":{\\"cert-manager.io/inject-ca-from\\":\\"cert-manager/cert-manager-trust\\"},\\"labels\\":{\\"app\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/instance\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager-trust\\",\\"app.kubernetes.io/version\\":\\"v0.1.0\\",\\"helm.sh/chart\\":\\"cert-manager-trust-v0.1.1\\"},\\"name\\":\\"cert-manager-trust\\"},\\"webhooks\\":[{\\"admissionReviewVersions\\":[\\"v1\\",\\"v1beta1\\"],\\"clientConfig\\":{\\"service\\":{\\"name\\":\\"cert-manager-trust\\",\\"namespace\\":\\"cert-manager\\",\\"path\\":\\"/validate\\"}},\\"failurePolicy\\":\\"Fail\\",\\"name\\":\\"trust.cert-manager.io\\",\\"rules\\":[{\\"apiGroups\\":[\\"trust.cert-manager.io\\"],\\"apiVersions\\":[\\"*\\"],\\"operations\\":[\\"CREATE\\",\\"UPDATE\\"],\\"resources\\":[\\"*/*\\"]}],\\"sideEffects\\":\\"None\\",\\"timeoutSeconds\\":5}]}
",
      },
      "name": "cert-manager-trust",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/admissionregistration.k8s.io_v1-validatingwebhookconfiguration-default-cert-manager-trust.yaml",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "ClusterIssuer",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"ClusterIssuer\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"letsencrypt-cluster-issuer\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"acme\\":{\\"email\\":\\"oyelowooyedayo@gmail.com\\",\\"privateKeySecretRef\\":{\\"name\\":\\"letsencrypt-cluster-issuer-key\\"},\\"server\\":\\"https://acme-staging-v02.api.letsencrypt.org/directory\\",\\"solvers\\":[{\\"http01\\":{\\"ingress\\":{\\"class\\":\\"nginx\\"}}}]}}}
",
      },
      "name": "letsencrypt-cluster-issuer",
      "namespace": "default",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-clusterissuer-default-letsencrypt-cluster-issuer.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-leader-election\\",\\"namespace\\":\\"kube-system\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"cert-manager-controller-leader-election\\"},\\"subjects\\":[{\\"apiGroup\\":\\"\\",\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-leader-election",
      "namespace": "kube-system",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-kube-system-cert-manager-controller-leader-election.yaml",
  },
  Object {
    "apiVersion": "trust.cert-manager.io/v1alpha1",
    "kind": "Bundle",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"trust.cert-manager.io/v1alpha1\\",\\"kind\\":\\"Bundle\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-identity-trust-roots\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"sources\\":[{\\"secret\\":{\\"key\\":\\"ca.crt\\",\\"name\\":\\"linkerd-identity-trust-roots\\"}}],\\"target\\":{\\"configMap\\":{\\"key\\":\\"ca-bundle.crt\\"}}}}
",
      },
      "name": "linkerd-identity-trust-roots",
      "namespace": "default",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/trust.cert-manager.io_v1alpha1-bundle-default-linkerd-identity-trust-roots.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"cert-manager\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"cert-manager\\",\\"helm.sh/chart\\":\\"cert-manager-0.6.1\\"},\\"name\\":\\"cert-manager-controller-controller-ingress-shim\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"cert-manager-controller-controller-ingress-shim\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"cert-manager-controller\\",\\"namespace\\":\\"cert-manager\\"}]}
",
      },
      "name": "cert-manager-controller-controller-ingress-shim",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-ingress-shim.yaml",
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {},
      "name": "sealedsecrets.bitnami.com",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/sealed-secrets/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-sealedsecrets.bitnami.com.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\",\\"app.kubernetes.io/version\\":\\"v0.17.5\\",\\"helm.sh/chart\\":\\"sealed-secrets-2.1.7\\"},\\"name\\":\\"sealed-secrets-key-admin\\",\\"namespace\\":\\"kube-system\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"sealed-secrets-key-admin\\"},\\"subjects\\":[{\\"apiGroup\\":\\"\\",\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"sealed-secrets\\",\\"namespace\\":\\"kube-system\\"}]}
",
      },
      "name": "sealed-secrets-key-admin",
      "namespace": "kube-system",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/sealed-secrets/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-kube-system-sealed-secrets-key-admin.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\",\\"app.kubernetes.io/version\\":\\"v0.17.5\\",\\"helm.sh/chart\\":\\"sealed-secrets-2.1.7\\"},\\"name\\":\\"sealed-secrets-service-proxier\\",\\"namespace\\":\\"kube-system\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"services\\"],\\"verbs\\":[\\"get\\"]},{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"http:sealed-secrets:\\",\\"http:sealed-secrets:http\\",\\"sealed-secrets\\"],\\"resources\\":[\\"services/proxy\\"],\\"verbs\\":[\\"create\\",\\"get\\"]}]}
",
      },
      "name": "sealed-secrets-service-proxier",
      "namespace": "kube-system",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/sealed-secrets/1-manifest/rbac.authorization.k8s.io_v1-role-kube-system-sealed-secrets-service-proxier.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\",\\"app.kubernetes.io/version\\":\\"v0.17.5\\",\\"helm.sh/chart\\":\\"sealed-secrets-2.1.7\\"},\\"name\\":\\"sealed-secrets-service-proxier\\",\\"namespace\\":\\"kube-system\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"sealed-secrets-service-proxier\\"},\\"subjects\\":[{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Group\\",\\"name\\":\\"system:authenticated\\"}]}
",
      },
      "name": "sealed-secrets-service-proxier",
      "namespace": "kube-system",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/sealed-secrets/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-kube-system-sealed-secrets-service-proxier.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\",\\"app.kubernetes.io/version\\":\\"v0.17.5\\",\\"helm.sh/chart\\":\\"sealed-secrets-2.1.7\\"},\\"name\\":\\"secrets-unsealer\\"},\\"rules\\":[{\\"apiGroups\\":[\\"bitnami.com\\"],\\"resources\\":[\\"sealedsecrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"bitnami.com\\"],\\"resources\\":[\\"sealedsecrets/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"create\\",\\"update\\",\\"delete\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "secrets-unsealer",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/sealed-secrets/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-secrets-unsealer.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\",\\"app.kubernetes.io/version\\":\\"v0.17.5\\",\\"helm.sh/chart\\":\\"sealed-secrets-2.1.7\\"},\\"name\\":\\"sealed-secrets\\",\\"namespace\\":\\"kube-system\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"http\\",\\"port\\":8080,\\"targetPort\\":\\"http\\"}],\\"selector\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "sealed-secrets",
      "namespace": "kube-system",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/sealed-secrets/1-manifest/v1-service-kube-system-sealed-secrets.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\",\\"app.kubernetes.io/version\\":\\"v0.17.5\\",\\"helm.sh/chart\\":\\"sealed-secrets-2.1.7\\"},\\"name\\":\\"sealed-secrets\\",\\"namespace\\":\\"kube-system\\"},\\"spec\\":{\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"--update-status\\",\\"--key-prefix\\",\\"sealed-secrets-key\\"],\\"command\\":[\\"controller\\"],\\"image\\":\\"docker.io/bitnami/sealed-secrets-controller:v0.17.5\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":\\"http\\"},\\"initialDelaySeconds\\":0,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"name\\":\\"controller\\",\\"ports\\":[{\\"containerPort\\":8080,\\"name\\":\\"http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":\\"http\\"},\\"initialDelaySeconds\\":0,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"readOnlyRootFilesystem\\":true,\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/tmp\\",\\"name\\":\\"tmp\\"}]}],\\"securityContext\\":{\\"fsGroup\\":65534},\\"serviceAccountName\\":\\"sealed-secrets\\",\\"volumes\\":[{\\"emptyDir\\":{},\\"name\\":\\"tmp\\"}]}}}}
",
      },
      "name": "sealed-secrets",
      "namespace": "kube-system",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/sealed-secrets/1-manifest/apps_v1-deployment-kube-system-sealed-secrets.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/instance": "sealed-secrets",
            "app.kubernetes.io/name": "sealed-secrets",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "--update-status",
                "--key-prefix",
                "sealed-secrets-key",
              ],
              "command": Array [
                "controller",
              ],
              "image": "docker.io/bitnami/sealed-secrets-controller:v0.17.5",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": "http",
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "controller",
              "ports": Array [
                Object {
                  "containerPort": 8080,
                  "name": "http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": "http",
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/tmp",
                  "name": "tmp",
                },
              ],
            },
          ],
          "securityContext": Object {
            "fsGroup": 65534,
          },
          "serviceAccountName": "sealed-secrets",
          "volumes": Array [
            Object {
              "emptyDir": Object {},
              "name": "tmp",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\",\\"app.kubernetes.io/version\\":\\"v0.17.5\\",\\"helm.sh/chart\\":\\"sealed-secrets-2.1.7\\"},\\"name\\":\\"sealed-secrets\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"secrets-unsealer\\"},\\"subjects\\":[{\\"apiGroup\\":\\"\\",\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"sealed-secrets\\",\\"namespace\\":\\"kube-system\\"}]}
",
      },
      "name": "sealed-secrets",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/sealed-secrets/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-sealed-secrets.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\",\\"app.kubernetes.io/version\\":\\"v0.17.5\\",\\"helm.sh/chart\\":\\"sealed-secrets-2.1.7\\"},\\"name\\":\\"sealed-secrets-key-admin\\",\\"namespace\\":\\"kube-system\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"sealed-secrets-key\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"get\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"secrets\\"],\\"verbs\\":[\\"create\\",\\"list\\"]}]}
",
      },
      "name": "sealed-secrets-key-admin",
      "namespace": "kube-system",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/sealed-secrets/1-manifest/rbac.authorization.k8s.io_v1-role-kube-system-sealed-secrets-key-admin.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"sealed-secrets\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"sealed-secrets\\",\\"app.kubernetes.io/version\\":\\"v0.17.5\\",\\"helm.sh/chart\\":\\"sealed-secrets-2.1.7\\"},\\"name\\":\\"sealed-secrets\\",\\"namespace\\":\\"kube-system\\"}}
",
      },
      "name": "sealed-secrets",
      "namespace": "kube-system",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/sealed-secrets/1-manifest/v1-serviceaccount-kube-system-sealed-secrets.yaml",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"minReadySeconds\\":0,\\"replicas\\":1,\\"revisionHistoryLimit\\":10,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"}},\\"namespaces\\":[\\"default\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"/nginx-ingress-controller\\",\\"--default-backend-service=default/nginx-ingress-controller-default-backend\\",\\"--election-id=ingress-controller-leader\\",\\"--controller-class=k8s.io/ingress-nginx\\",\\"--configmap=default/nginx-ingress-controller\\"],\\"env\\":[{\\"name\\":\\"POD_NAME\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}}],\\"image\\":\\"docker.io/bitnami/nginx-ingress-controller:1.2.1-debian-11-r6\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":10254,\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"name\\":\\"controller\\",\\"ports\\":[{\\"containerPort\\":80,\\"name\\":\\"http\\",\\"protocol\\":\\"TCP\\"},{\\"containerPort\\":443,\\"name\\":\\"https\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":10254,\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":10,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":1},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":true,\\"capabilities\\":{\\"add\\":[\\"NET_BIND_SERVICE\\"],\\"drop\\":[\\"ALL\\"]},\\"runAsNonRoot\\":true,\\"runAsUser\\":1001}}],\\"dnsPolicy\\":\\"ClusterFirst\\",\\"hostNetwork\\":false,\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"nginx-ingress-controller\\",\\"terminationGracePeriodSeconds\\":60}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/nginx-ingress/1-manifest/apps_v1-deployment-default-nginx-ingress-controller.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "nginx-ingress-controller",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "nginx-ingress-controller",
            "helm.sh/chart": "nginx-ingress-controller-9.2.11",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "controller",
                        "app.kubernetes.io/instance": "nginx-ingress-controller",
                        "app.kubernetes.io/name": "nginx-ingress-controller",
                      },
                    },
                    "namespaces": Array [
                      "default",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "/nginx-ingress-controller",
                "--default-backend-service=default/nginx-ingress-controller-default-backend",
                "--election-id=ingress-controller-leader",
                "--controller-class=k8s.io/ingress-nginx",
                "--configmap=default/nginx-ingress-controller",
              ],
              "env": Array [
                Object {
                  "name": "POD_NAME",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/nginx-ingress-controller:1.2.1-debian-11-r6",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "controller",
              "ports": Array [
                Object {
                  "containerPort": 80,
                  "name": "http",
                  "protocol": "TCP",
                },
                Object {
                  "containerPort": 443,
                  "name": "https",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": true,
                "capabilities": Object {
                  "add": Array [
                    "NET_BIND_SERVICE",
                  ],
                  "drop": Array [
                    "ALL",
                  ],
                },
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "dnsPolicy": "ClusterFirst",
          "hostNetwork": false,
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "nginx-ingress-controller",
          "terminationGracePeriodSeconds": 60,
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "defaultBackend.conf": "location /healthz {
  return 200;
}

location / {
  return 404;
}",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"defaultBackend.conf\\":\\"location /healthz {\\\\n  return 200;\\\\n}\\\\n\\\\nlocation / {\\\\n  return 404;\\\\n}\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller-default-backend\\",\\"namespace\\":\\"default\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller-default-backend",
      "namespace": "default",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/nginx-ingress/1-manifest/v1-configmap-default-nginx-ingress-controller-default-backend.yaml",
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "IngressClass",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"networking.k8s.io/v1\\",\\"kind\\":\\"IngressClass\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx\\"},\\"spec\\":{\\"controller\\":\\"k8s.io/ingress-nginx\\"}}
",
      },
      "name": "nginx",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/nginx-ingress/1-manifest/networking.k8s.io_v1-ingressclass-default-nginx.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/nginx-ingress/1-manifest/v1-serviceaccount-default-nginx-ingress-controller.yaml",
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"networking.k8s.io/v1\\",\\"kind\\":\\"Ingress\\",\\"metadata\\":{\\"annotations\\":{\\"nginx.ingress.kubernetes.io/ssl-redirect\\":\\"false\\",\\"nginx.ingress.kubernetes.io/use-regex\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"oyelowo-ingress\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"ingressClassName\\":\\"nginx\\",\\"rules\\":[{\\"host\\":\\"localhost:8080\\",\\"http\\":{\\"paths\\":[{\\"backend\\":{\\"service\\":{\\"name\\":\\"graphql-mongo\\",\\"port\\":{\\"number\\":8000}}},\\"path\\":\\"/api\\",\\"pathType\\":\\"Prefix\\"},{\\"backend\\":{\\"service\\":{\\"name\\":\\"react-web\\",\\"port\\":{\\"number\\":3000}}},\\"path\\":\\"/\\",\\"pathType\\":\\"Prefix\\"}]}}],\\"tls\\":[]}}
",
        "nginx.ingress.kubernetes.io/ssl-redirect": "false",
        "nginx.ingress.kubernetes.io/use-regex": "true",
      },
      "name": "oyelowo-ingress",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/nginx-ingress/1-manifest/networking.k8s.io_v1-ingress-applications-oyelowo-ingress.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"nginx-ingress-controller\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-nginx-ingress-controller.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"configmaps\\",\\"endpoints\\",\\"nodes\\",\\"pods\\",\\"secrets\\"],\\"verbs\\":[\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"nodes\\"],\\"verbs\\":[\\"get\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"services\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"update\\",\\"watch\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingressclasses\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-nginx-ingress-controller.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"nginx-ingress-controller\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-default-nginx-ingress-controller.yaml",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller-default-backend\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"}},\\"namespaces\\":[\\"default\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"image\\":\\"docker.io/bitnami/nginx:1.21.6-debian-11-r6\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":3,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":\\"http\\",\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":30,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":5},\\"name\\":\\"default-backend\\",\\"ports\\":[{\\"containerPort\\":8080,\\"name\\":\\"http\\",\\"protocol\\":\\"TCP\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":6,\\"httpGet\\":{\\"path\\":\\"/healthz\\",\\"port\\":\\"http\\",\\"scheme\\":\\"HTTP\\"},\\"initialDelaySeconds\\":0,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":5},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/opt/bitnami/nginx/conf/bitnami/\\",\\"name\\":\\"nginx-config-volume\\",\\"readOnly\\":true}]}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"nginx-ingress-controller\\",\\"terminationGracePeriodSeconds\\":60,\\"volumes\\":[{\\"configMap\\":{\\"items\\":[{\\"key\\":\\"defaultBackend.conf\\",\\"path\\":\\"defaultBackend.conf\\"}],\\"name\\":\\"nginx-ingress-controller-default-backend\\"},\\"name\\":\\"nginx-config-volume\\"}]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller-default-backend",
      "namespace": "default",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/nginx-ingress/1-manifest/apps_v1-deployment-default-nginx-ingress-controller-default-backend.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "default-backend",
            "app.kubernetes.io/instance": "nginx-ingress-controller",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "nginx-ingress-controller",
            "helm.sh/chart": "nginx-ingress-controller-9.2.11",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "default-backend",
                        "app.kubernetes.io/instance": "nginx-ingress-controller",
                        "app.kubernetes.io/name": "nginx-ingress-controller",
                      },
                    },
                    "namespaces": Array [
                      "default",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "image": "docker.io/bitnami/nginx:1.21.6-debian-11-r6",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 3,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": "http",
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "name": "default-backend",
              "ports": Array [
                Object {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 6,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": "http",
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/opt/bitnami/nginx/conf/bitnami/",
                  "name": "nginx-config-volume",
                  "readOnly": true,
                },
              ],
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "nginx-ingress-controller",
          "terminationGracePeriodSeconds": 60,
          "volumes": Array [
            Object {
              "configMap": Object {
                "items": Array [
                  Object {
                    "key": "defaultBackend.conf",
                    "path": "defaultBackend.conf",
                  },
                ],
                "name": "nginx-ingress-controller-default-backend",
              },
              "name": "nginx-config-volume",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\"],\\"verbs\\":[\\"get\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"configmaps\\",\\"pods\\",\\"secrets\\",\\"endpoints\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"services\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"update\\",\\"watch\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"networking.k8s.io\\"],\\"resources\\":[\\"ingresses/status\\"],\\"verbs\\":[\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"ingress-controller-leader\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"get\\",\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"create\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"endpoints\\"],\\"verbs\\":[\\"create\\",\\"get\\",\\"update\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-role-default-nginx-ingress-controller.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller-default-backend\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"http\\",\\"port\\":80,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"http\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"default-backend\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller-default-backend",
      "namespace": "default",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/nginx-ingress/1-manifest/v1-service-default-nginx-ingress-controller-default-backend.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\",\\"helm.sh/chart\\":\\"nginx-ingress-controller-9.2.11\\"},\\"name\\":\\"nginx-ingress-controller\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"externalTrafficPolicy\\":\\"\\",\\"ports\\":[{\\"name\\":\\"http\\",\\"port\\":80,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"http\\"},{\\"name\\":\\"https\\",\\"port\\":443,\\"protocol\\":\\"TCP\\",\\"targetPort\\":\\"https\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"controller\\",\\"app.kubernetes.io/instance\\":\\"nginx-ingress-controller\\",\\"app.kubernetes.io/name\\":\\"nginx-ingress-controller\\"},\\"sessionAffinity\\":\\"None\\",\\"type\\":\\"LoadBalancer\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/nginx-ingress/1-manifest/v1-service-default-nginx-ingress-controller.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"applications\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/services/react-web\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "react-web",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd-applications-children-services/1-manifest/argoproj.io_v1alpha1-application-argocd-react-web.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"applications\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/services/graphql-mongo\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "graphql-mongo",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd-applications-children-services/1-manifest/argoproj.io_v1alpha1-application-argocd-graphql-mongo.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"\\"},\\"name\\":\\"applications\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "applications",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/namespaces/1-manifest/v1-namespace-applications-applications.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"\\"},\\"name\\":\\"linkerd-viz\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
      },
      "name": "linkerd-viz",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/namespaces/1-manifest/v1-namespace-linkerd-viz-linkerd-viz.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"\\"},\\"name\\":\\"argocd\\",\\"namespace\\":\\"argocd\\"}}
",
      },
      "name": "argocd",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/namespaces/1-manifest/v1-namespace-argocd-argocd.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"\\"},\\"name\\":\\"default\\",\\"namespace\\":\\"default\\"}}
",
      },
      "name": "default",
      "namespace": "default",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/namespaces/1-manifest/v1-namespace-default-default.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"disabled\\"},\\"name\\":\\"linkerd\\",\\"namespace\\":\\"linkerd\\"}}
",
      },
      "name": "linkerd",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/namespaces/1-manifest/v1-namespace-linkerd-linkerd.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"\\"},\\"name\\":\\"kube-system\\",\\"namespace\\":\\"kube-system\\"}}
",
      },
      "name": "kube-system",
      "namespace": "kube-system",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/namespaces/1-manifest/v1-namespace-kube-system-kube-system.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"\\"},\\"name\\":\\"cert-manager\\",\\"namespace\\":\\"cert-manager\\"}}
",
      },
      "name": "cert-manager",
      "namespace": "cert-manager",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/namespaces/1-manifest/v1-namespace-cert-manager-cert-manager.yaml",
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "trafficsplits.split.smi-spec.io",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-trafficsplits.split.smi-spec.io.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "serverauthorizations.policy.linkerd.io",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-serverauthorizations.policy.linkerd.io.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "servers.policy.linkerd.io",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-servers.policy.linkerd.io.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "serviceprofiles.linkerd.io",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-serviceprofiles.linkerd.io.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-sp-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-sp-validator-k8s-tls-linkerd.yaml",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "AgBQnzxgP+Qm+OGBqB+8vOhS8zkrJ257wQ/cBq6HTpEZUiXuqDonrAifr37LkwqqV2NXYlROWCb12fbQP6HTg2/YXGotRCoqMq+woJb69QGT+2OX1epkm/0MNpXJ3emyoSJY7JbPhvP1SyUNO2u8MDVF3orhhs4zp2HAkf92ofn7Q8EOIHMfzhq/pm6X1MJXSWA5B+dL84IAHcHNV6kMt04UCpE8bqPytkqibkdF/LLDISaK2SxjNYtYWK4cCSThZmEiVa6gXaG1pqegzoMSELjzQqwOGGDI27OPsRj/LbCbUGfpTBJyfLqFJRVjzadMCLxiguriVPoTEffrBDalG5qmArMyHGeawJ9oAQ9n5axhy7zStFSqKa+d9vwZ8e30CqfB628Ln2dF+Ki18iKE272v2S3gbob3Hb7ZfZZpg1+KiRs3ax0ZNESaxLYJBv20Q8u/dWIUhWcwZOmCIgaB6syuH2wV8Z/zwLCVEd2YCGqM+PnVT87rsjbO3/6psVGciO9gjehxI961z/tAC4c9DAtW4Cvhi6VskBAdDT8Yjfx9cTaa3xdP6+wmrIk/VMVXEBkkG11JMyMWf/abQnYfZ+VpsMTfxP4T7EOy4WA5kiDe+ErzGyEhodiZYN/rTzpvXmjjkKmMUDllaqFutSNKBMlp05psYRsidBDyxpeY54IWK0HwhjomgOYFUI61xe5b87PYaNT0bgugYyuynKanwyhIb1RCQxUrTiLmZJpPJxAHDA0Cj48oZDW10l+OhngPER6EY5nO1qqQP5G3juNJGM01Vj+jZjw7RxxaesUBnSZGqIAUwP6sU6pH5kYGUvIGL5HgZdyP1/lw58gD1pMIM+US7J52Tngwj4tOpdEIwJ2olumH3AvCKiqUUrUxojvFZzTZhQ3qU4dmvg7lXqw78BkzLGRUmbNAA50YAp3uOcPpe63AKQ2NbNLonyBSZD6mqFlpDjMI3MVKXA+WXDipQPgau2huwYZFmeihz3UcvVBdVf86DmMoep9T3GCkbYmV43HGCyAMmFSeR5oQTs8os94V0TSQnQoBAD6sSlOcs8msUvi947l53E2doZanO1rD5omy3xp7uslYaNacuDKdAIzCG1PPu5rQR032n3sNGoYXM+/FIUtybHqzgdPvK0QlGUhZn//tUuIDm2CEpbLHHd1Mvw6xFg5+Ou1pRi+26lD9hmQ5qXFra9JyOwBwJ4VHDy4jrL9sih79LLqIoyTudwB/fd8u1OZkEeyn9xjWYk2on3YVmPJHLGtmvVa8eg6nHOQ43Xc40Of10l5nYuuV9gZe9NQvGxUVOroKCqk8DllemjJM5BviuuzjNCE3z2yRWb4BEsieaOd89oPOGYeyp9zBBN2eC70IP4fTZYHDMI/ynNAH+XiN6jTNBJj5LxqrvYynib880e8zl47e1vZFWXiD+epRWzlzn3ysyvyi4PoA312te0FXpH4PbD5mCWkmnZSBR6f395uD6Fo/CgSDvVYzXGCAD2+kcPfvwf+17/rFDo2EqMM4fGS2KQZwun7D9+8KWcQYWnbC4XQT4C8KM56kVr3UFD6g3lBuGMsUDcLxVZ5zyvix1MjG8azikcBclXTOGFFJlloG/q/68LEcgpNxtQOLuS1yJ3D5y1Qz5wdbQAnOC8WDFDBrmRKUxPEQSzwHlNHtgD7NGA9i20YKVgq50g1w4AmiMtmM7/kzak55O3TRHdpA26LmYxwb0sQQ5N7WlRFoW/Xjjcvwe0BVT55DcIoEe4IXbb+m75So8wKRnfSkoRVqBNBfIM9spdkPh32qx5a6gqksrqRbSewP0DcqcJ7Ea34ionnMRn00G67c6pauhBsqm2NPa8DTKEDJoMrHnRVflVp6mrXwu6/vbfSnSVrfts1j9eGsESkAlcWK1911W9ISWl5Ao6nh4i99Y6jLEofMp8g2vS1YWQJhjxZmBRtrwayXB/Lrx1GH70pfzdMjVbt5KIARjDAggsUIFz+34n5hAqNYtxpdjw41AD7iM2iUWruY5DztvACLoswUPkURPEn93omVq1Hs+LFJrtkG1xNKYwpvKGZBNFJSXnYHLCF1MuC01LalDFnsWbBV9sDyikNuJ3OeEkVLblK8Djk6FPAaIz7srT6fp1jUDazGf1pdQW5L0XtyjImmMEVfShSU/LJJDTQiqc1IfFRNieIM0uXtpZSOnTbhkV9wt8NrxszZSjHMJMF55c1w2VKr3gGBzK2ZHJfEoUovvbaCPET84mRTWxbkZH8WdBK3iSbKJMrdbJ/TpauU5+BwBLeAgIFGHiI6fRumvI7EBX6528mlD2Q=",
        "tls.key": "AgAmwZqH4Bac+wpR+EWglCLJi//m4z0nrddAY5hmYXf10gpUsEZUmPZp5+RtpHLQiouVP8LeFLynPPLDl7rAzPmhoPD3hJIuxVldkBTnAsWst6176+WWgqyZihdBxPgEhh2da1657OXrNBFovym1xfQerlbqIyAzTzDtNRn9Y7gFQGcX43Aljl2xLVI+PMDdFM9UOe5xJMmBLJqelk0wPoZycu02i7Ubguve3oFzqZAjU3mGvOV73vdbET61+JRNd8/pyYBxJ8tVG6G6qpGGBJlca7YgQ16CYynjyuGOFBlgf+i0Q0l+LyN3KZ2Aj7xcS6Sx45cxCfqrqdX1Z/IwWZhy96ueqamP5MDdBGIwJvzUCAtpKiRjeDifOwDADkNOVpkSVoFA0LqH6svU/MdswEDR2ehC/8l464Mf8KnmF4NNA2AnRsYfIUEOLPxCgNWzTI/9U27CBIf4XJjJ07mJAfaFrAjPGZg3KCnPe2uMmlDPDG44FJMCTZwGBDPo43j4UY178bjXmky7XR8PZtI0p2WJY7w2ECp+nXyWtV+JE24rJXqz6mOymACNDowPIznCJ90SWF824T9SzhLEDEl5p8uhk+WvwE1YXK/uNwL8vFZ3TNBcOE5QnQXAKaPz4PmJ+uLLWA5auj1WzBzziBk5WtRl9EVxCdXz47MaMUUsmXhr6SQHd8o+IcRumrULbksoMT2GGDssITYocze581sh3JWrneN5eEOcArS/D5O8sFoCrmyCzTE8B6aeLCwDRK4X9pMoC1/8OYD7z3g89GYd1OpsCp90xvn4Qi1tfWyVZx6CyBT2xWzTogBlu26sq2RaE/2ExbNKUzdAzlO2e6OyFTnhoFJ2poru3vTKew0rPjiZNPgorxwbrhs1oajIsOk7mDkK3ar8B/ac29is04NPDnYot2PpzcEAe988R/d24boDW0jpsPp8t8u3CRZhSXgtAfX9N4mL3KCrV1VZ8SyIT+644JECyipeoAhCoqkGklyoARLe1gX4H3mAejqJhjGpNv7y80R9t7ftoFH4ovTDNV3/dapwvMWN9ECQfmWqLK2heXRrynIxae8e0XdghOsKGtLJAcdP3jSgvfir8gsSk7FioglD5lNtFbt7Y9jB2xFcyqzpmhfU4vR+0kpnHPwq8NCC4VuZb5QB5WCG0dXsx/1i2gLsOBQYlie8rsyHz+6l+W3c0zmMmBatFuaPCgyO9JeYlhfjXYhjjuiGMu0BT+vsLGYBSk43lQ8HbmZ0IhLqaxK6MG9HGmrzfTGgW4KgdtpRA7pkgGC1KT/ZUzulcrCjgRf9IoFy8fAYtyo/7q23R92noLExgN45CMnuJYEGLGLaMAvr0jukvIHmEVATLNwCtOjIRpSDrLxAk12/ZaqruFOaxmF8vbYnsPHc8xiBzNreLPetq6YG7kdDYTs944Q9HXTNg8PAkJVCEncG+bAMwFvyG7/ZUnwcsA4qod6BmaLbfWvT5LevGTXI7O+Af9ss13jjWOgKwC1xwuMOMY0CKEhlkPSXLRKSTGGzf7W1s9GhH6oecsqLhQDQrkPy8RS2eTMNFN1nT1eLb+noVBvq1jJi369ppbpCXgSGL0hFWdKU5EgLzm7SbIvjvRFj4gjXz/0t/1BenWI6/6SW3Fyn+tMEfg9crT76xNOXPeJlGqVsevAWJoj7JgatXfRgn4w1jDwW+1YD9myCRzQCI6Ew0jSE2eHbd0WT0ue1QKMaf8ZK2rLNXl5VxM12qYcEbe9g1GeUxRDxf7FdRUSVv3PVfjZu7L9Wvzmz+qz7QH/2tukPQN4DEUsz6DtCzo5xKgmoymKdez5YSN9+wSaopVeECSSTg6BvnSKN3vLtS550HSzPB/4Fp1oUFt6l6G3Lefii0hRfOSNSe9rssuwJQ6NWcaOqDlJhc4au0nGW7HtTWqILaD4DHD6hcOpAO8R6mDvfGl5WTzvdhZg7yK6IvIbqikJL/QPFO748QKxkObI8agzZDzeqouGtPdj30ZR7GxyC4LiOcT1KG1TS6oeowYAcM8gqNsrP1+OEOqv/L0uKmf5aJY31ralL8KtM6CSMt7a0oGuku8Eypo3BlfZeKUh71Ros4QypuZtnmY/bg4MAYEOPPoiGRgArAzU3dFNFdBj2tx7KVOOAwF98P859t4WHbqy1uDjh2Y9R0wmwUuS53Ld1A2mGjUQ+3wZdR+njvUCqgxR2e4sns+O0qegrVQ1QzGKyF08mHBLt+A2j3KfA+H//50VzFn4FBpiCH4ErjAGNFHyTp/EMtbpk7juAuVlym1BLgvdy+iWFp8eSYR0wlivYKRiLove1/SjMqqAhY9CThH/So0Jqh49XYz4f9i4NCm2OxJwL/LysQiqEadRJPKXiSWIy0RXH+jfWCUIjYQEZ4371XVG3tbLUzJ0wxHQnKbpVG9TC5n5Sltx0c4TRu1rZNoWLVP3aB9mQ+ZfUAOTh0yU2CMZF0tG7Nqz++utuAuXU8UAs6ivXrjuj17ePLkmGJDkyKtBMTt8HUZfJ1m/zfzvF4wMvST708PkQ25Pc1YkpwEr96IpBcvj8aZ7jCJUUO1wG8JKwGPndzSKGfLHTFb0j1nyiOTcby1BTUiuDmSWFK7jGcW3fPnd9/VC5YHXcLpdoDg6UNcbMe/HAMWcGF2swFBlLn/sTDoNUy/XbdI+12M74czIuNe0PvasbiDl6GjYzOfN2rty3k2aKVeqPoUTHazD5uh3yF6JESD/HoYgKJmTeef2qHmqwnsMDR7YeS9jXjU/rtijbehbBx0IekXtIHhPSA4xffWi9iCblUY+wfxKaMmlqjJcHb0HDB9FFjUhxvI4xPrRT8ZRQRVqMXvL/rI/P4KnVyvPbhNf06M6zTSkmwW/dnrJ4fPVFci1K54lX/ht3zDjNlq6fkzqPdd7TUlXymCUuPt7zGrGNjVyA6hgyUDi9XjI=",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQVBIMDZPTGZnbnk4bWREOVhOeGdMUFV3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3T0RBNE1Ea3hOVEF5V2hjTk1qTXdPREE0TURreE5UQXlXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUsrMzl1aGp0ZDBETkFmMXBQd3VWZW9sNzRsZHh5ZDZQM2xzL1NRbUhYS2N4blg3dDJVSwo4em9uL2xXUy82Z3dXeHJQbUVTVkRKMWZnR2l2U0FuTFFRQ2FYOGRvRnZyWHBQQXlmcVVxVUVnZ0dGczFucGpsCnl4WmRXM2RmNCtMRW9sSGt2MHBSRTA4UnhyVkhFU0trZk9VaG5MUmFmYzlLQTQ4TlhwZDhiUVFVSEh3WkdDV2YKbVQ2Z1BmVEYvQzVTajZBRzBpY2lmNW14Rjl2ZWlmYlk2QS91aWpabHFMajBnOHlMcXRDRW4xWGg0VlRHZGJGcgpTU2tIWUZZa1NaRzF4R3ByYXhCMERYRSt3dkhaYTU0dGx3TUdNZHR5RWFTbVZzWXZDOS9CS01wNUN5V3JSWlEvCmZBMlN2VHN2VzYyYVNneEsyVzM3MXlDTjlaelYxN2xwWFdVQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBY24wRWUwQTFzZlBQYXl1dncvdUozMWE3MVFDdFZkNHNsZHU2Z3lIMlAKRmVLbG5ud2JZMVNMLzFQTEltYUx5TEk2VUhnOEtSV1NHVlZMT2swR3hIVzRjZkNhSDMxWmx0WWU3a2ZlVWVYOApWVVFLK0VpUk5kWTJ3c1VoWmJodVRvOVg2d0dJSnFxTFlmU3lvZmQxczU1Nzl4K09kTkVhbGdaUmF1NkZndXF1CjNXYzZDU3V2d2pzNzF1djhaWW9laUtzY2dKb0xGZ3p1V2FaODFjelBURkhnOXFEYjlrMEpLVFRNUk14ZlpNeEEKSUIrc3JyRlpWOVRqd3Z0L0RjRE5NdFRVZ0lPa2tqZkdQZXpFTFVQYzdtWkpqRndsWGxSL1k4STNlaDVSbHRkeQpxZS80VWVuVEZvVFRhL0YzV3JHc2pESE1WR3NYSHRTanB2UlRnZ2tPYmRwbQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcjdmMjZHTzEzUU0wQi9Xay9DNVY2aVh2aVYzSEozby9lV3o5SkNZZGNwekdkZnUzClpRcnpPaWYrVlpML3FEQmJHcytZUkpVTW5WK0FhSzlJQ2N0QkFKcGZ4MmdXK3RlazhESitwU3BRU0NBWVd6V2UKbU9YTEZsMWJkMS9qNHNTaVVlUy9TbEVUVHhIR3RVY1JJcVI4NVNHY3RGcDl6MG9EancxZWwzeHRCQlFjZkJrWQpKWitaUHFBOTlNWDhMbEtQb0FiU0p5Si9tYkVYMjk2Sjl0am9EKzZLTm1Xb3VQU0R6SXVxMElTZlZlSGhWTVoxCnNXdEpLUWRnVmlSSmtiWEVhbXRyRUhRTmNUN0M4ZGxybmkyWEF3WXgyM0lScEtaV3hpOEwzOEVveW5rTEphdEYKbEQ5OERaSzlPeTliclpwS0RFclpiZnZYSUkzMW5OWFh1V2xkWlFJREFRQUJBb0lCQUFMMXhtTUR5dngrSVZKQgpBUlorY1ZRUWI0aVEyOW4rWlROV2NxMDVOeVhISGxDK2ZNaG05dEh6K29UV2hSZ0FPSWlyRnBXUkxUVTVkcUJNCjA1bldvckd2NkEwajQ3ODJBc0ZKR0hrUHpXcHBuLzlwVjlLYmpHQkVFbFpnZHlaS3liRTNlVUYzUEN3STBLQWQKSWx6RENKZVRpV0JBWmY0bjhRZG40a0FMQ0lzWkJId0tkTEEvY2crOExaM2gyU3ppdTVxVVp0Mk9yR2VDRzE5Uwo4bkNIRlhIU29XY2lHdTFNcEYrdU15anpSSnpGSi9raXdwdVEwWHZoaU5lamVIa1JKOWFzaUM2WTVEcWhBTUR5CjRWL01XWFV6ei9IUjQzVFlJeWVWSmowOEFyUkR1WXhId1h3S2ZTRGpCNU00VFZiQXkvTE1OMmxuNVlBQnRyT2UKQnNBa21jRUNnWUVBejFmN3ZJamZwK3RIQ2pxT0FvVGNPQU95MnVGTkpWTjRqQlhEMjNvNUFvRjVKU1htODNZLwpyTExiYWFQRThHNUZXbmQ3MTR4d0psV21PS2t2cmZWZGpkaWZGSUQxa1lYaFZ1a2hkS2l1RFVQS2ptakJVaVRECkYxbktxKzRNdEtENk1HN1cybThaRk1CY21LSHdvQlNEdTFrdHFpbmloU0Z5THhIcSt1SlJ4WU1DZ1lFQTJQUWcKNWgybGI2a1hDSlU5d2syb1VOQkV5a3Y0Sk9ZYU1tWUh1TSsvNXpPSzZGMllNNHNuZDMxRUFISEFQNWR1NTdscApTVE1HODF2MGR5djBsUDVKS1orZ0ZPaEo0dnl6MDNjdUpwSGFKVGFYTXRad2M3eEZrUnlOc1FPNzQyY1R4SE8rCnJRd2MyMk52aXdpVDc4SlZBT0Z6M0ZiUFh3RWxXYlpYdzBzdlJQY0NnWUVBc1BNTFdYa09Ob1lxR0dha2J5M24KcXI0dFUzTFhuYlZBdVh5UnE2c0JJRXhTa1F0cHIva0ltbUFCdElRWlBIOC9ITmUvanRMQm0xV1pCOTRMWE5CNwp5T1JIenYzSGxTdkdoWjlyOTkxRXZQbFAwbjFBRHRSazBuYkU2am04Q2lNZm9WbldicEJGdlZuMUxDVjM3NFhTCmJuN0s0OS9lKzNMeHVZMzNGYWt6MC9VQ2dZQUdHUVo3c1VXZkY4K1A3REhxTGlpVzdPT2lFL1NMaFBRamluNloKRVMzQm44ODlyTFBFYnhyUzN2QjBXcjRlaTNFUWprT0pUU2ZhMnpESjBMQjFKNWlDMVB1NDJyYUk3TFZaTWpaWAoyeTJZY2lwWndYRXpyNHo5QVNKeVlUcDhyNzc4Zkl4VmJNdTYxdGFodjhINHNTdVdkTCsrNTZtNGI5M080Yk1oCnlCRXlEUUtCZ0g2Yy9OdlQySm81L1JxbGFrK0gyYllSOEZxenBncTUzcUhLdC96VlJ4em5aZHFlcFZvMktOWUgKRlNXdmRDZm9FR0pPU1J2eWVVWXNDY3dxS3lTRmFJd2o1d0FSYmMyaDdGeENYenMreVExVGZ6WnA0a29haFdjdApMWExDUG9peDl0ZUxvWDRVaGlxYlh2UEFOUC9iK0p5NWp5Vlg1d0dCOGNoV0pXZ21sVUwzCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-sp-validator-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"} ",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "linkerd-sp-validator-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-policy-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-policy-validator-k8s-tls-linkerd.yaml",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "AgBn7spOHxqaCcurQzyg68Sw/a3P/COh6Tglz6QgFTEP5NucDbmvYpKmBiBa1Vu8+vVG6p+J1TC+4c0pAuUXYDfK1EzDnUYyNaz72nH5fJTXrGaf27Ye5SE8Efs+nCfgDVcfJbXOalwhYBxN70ID27b3gG8MCRMG9K5tjJ91rXOMUmixNMa2ZffmTnN9F1vHCto+HlrrAfbrYHDj+ioVi2FgGgq4SkpBXgBesomXiIm/+2cHHTNhMBLQHrJunaOTvjpUV/KF6XDDLFIXbTk4dDrGJjBzN3RB7OfqZCpGd+imYnVDhVyrNuYfWE6JW9YNJF8PxY+fBMh/B/oxZ9hzsJ1WKW2f21KM996iSlTONCsPwqIgPW/gM07Kv19keeyxIrcy+3tuviMxsLxu+4MFwI73r28U7UwyO6W35N63Ilj62VoEyRv0SFiXuCBM/UyCFpjj2Dk0L9YSzdih+7r5d7Pl5SqZHA55SqQTfSNI3qKfz1HW5BxdUP4Y8uphLSDYcQFIXyNrysi6DCrxA3aOBQbwJ/VoPt4M6qjrCW3jhrjTYs1uFzS2CvuLi7q4arr7RuTQF69vfDHJjOguZ4qBcbrTKCTjt0i3+OrMX6RG0XEQj9Q4hvEwLn0S2DMIRzH8tkytI3IgR0bhFAYwCHXkZQ2Gz6EeJ1ua43PPnI2j4E421PDWAnGuLfDpNL8y/7nu9kOM2yJ6DaYmjenznU/4Sx8kWEaQAzjbWfoiC9PNMqp2EwfnBdQA44Eyq+vGdOEUoz3mbmQ4JfjxWdSUd9X22ogznePONtEcP6BNjdMs0G2kFXAPpmBoNuQhof+OzSJzsu+HM6DwQbUfLsqoZ+tlKWaMFeFWxCuBEhQV1ND5EDc5qxo2albJ/RP1rXui4BLLUWlBsQT5BIh9Ec4mPMu504JQL9lFE0SX9qehwMOQvxcDbb6WElkQ2bJ2vBsTvuFFv4MjSO1K++0KP5UM9f34CamcN4y/j95F+gi9bG1l4mwzbZef5AUFw8DyC+8+Uw6F6HODlPVpxgsZhy7Eqvf1xIcUX0UNss4GS7mJUuLNH7ve6kkft4hiJanYbeYP9SX0w4qudb6K6Ul1CJUNLhpA/VvJAcSMknIkBUiaiLNO0w/HHSgXtJOgX+JxUo4v088tu7PgpM1CRsPDfnP7PCDc/L4qrpOx2PvXKmaHn32RoYLg9GePvAJE65sWJbnt48BKp4cfcGqoqTsHJigXjxwUK2AkXsh0XGR6DAP4PMo/edMJD02M3gCguFYmLZBS0DHjQp7DiAZ2LXiSzfDIMe88jdqHDvuzqRcTBDt7ak0VYild1jeYp13eP47qsOLmCGMhB5Jw5frHJa8SRwW552ldDxFlzvrD8vnp+5NCzludP6mPSHo1CdfzKQDnhIlhYCyZBhZEswZZkX2ov7qdOUV+JLbF27KGEOmUZR+qydRT1/Z16lCF2AJih2wkS1FGeGKJOMxo85TJ0nfnuFPjtFIlnQH+wpSWOCwKo6csuvIInJPTcczFA6IGVtsnJBHYPCkgfKWfD5vmmtV1Td+JdBgwzhdoLM0UWV5UbOh9XJ4J4iUQr0Fx6aiUPCY/I6YdpeFfSkyC2yfISuZjxp2/LZq4GKxJANw7LDS3/+Usb6T20QavpGZQuajvN1R4p8tlhl60N8rysgmfuYZb6ee+nVpwWSnizj9MjQEX1pXzNCONMoLzs5Ut9B5eUNyovZXQA5qunD0uuzU7eFjV3RVFnToPRkrfcPRNQtT7fChOw6GFb6cJX33KMDzwk7bMSU2dWCi7H2fc8b3IzmmiXdGOKKqE1y4IWuol+SsDQNqtSmCbQfKuroClTKQE7REiZHwss3J+4OZ0VkmE2RExOG6zb5ljh/KB0owEyqcEZ8N2b+iKy94emf1b9PnuE6VINXYfwoxiKOjjNa1eqW4tjWQEH14U1N+1MUBZq3JBuCtYTFfe3Ai9dMrRomuOR42rnE872kztpL+cmoeEpKGD58LwCHSqWkdhFplyYRfLf4qXLxtkqRF3S3tQr8rP1amTJLdu37Wea4P40XBgu1FicHF44pEHJPBTNhTSgwDxSVRrX2saLJs//fM2kAQVG8+tdHaK+ngWA4TsTVycMvfRRb655D42oyWzo/y4jY+x4OupJ/90kCYM46T090NN8MURa8w6O2xpno1EsHK3iEFIzkfwIVT5itiXhEWzBe0zYw8r5y0OMGD95SmUpdmNOXFsumZFQx3wb7CZZzTXhrTBg8SlvrEHlJb+aibMhwRoj85fVQ3SrRfPJ/ewZ/2m8gq2B5wtIlnLFMNJOXCU/FjgCIcMj3lnPL9bDR5z",
        "tls.key": "AgALchqey22YKse7FETtWqLX8hI0M5aMh6qCQKpHOiZ5wZOOnTMPvOH/sJmYHdtfj8LPdhmPpzcoJPmVf/f3Lel6SqRr+AYAV5N3zTtNu8XMphG6khdBEDlE90QFvduWTpzAfxeSzRHlPqRA+xo1/oKcE1Psq5FqM2ff5wO42zrGyXDmRFWlZf51k10e1AFR40RUX1siyYmGJQZ96ZXyayz2Mrp3wh/ZewVQ6KOb70fzYD5A2+QmRyK2xeROO3S+Q2KSMNou1RM4TwU5jYNoKapZ9+l2xZnzwjwBFXO56FX0wRnuXOcAW3ANe4fNpddb+gtz8eGZTKtj/J/qY5EjwSW/oiWU70f6bsUP+pBrJdrvKH9dn84VCvJSHrlsKGA/e3rqb1Sn9U7uI941t/LHkG0sYYkhkgNHPBMFKAaJ1j0mLsZtUOXHhlRGbUFW6l4aGW650RPdMKyW228ORMzvVUtuoEQR6h8e3eJSktOaSKe9NCwYWijKgq0EyMrZnSHBSBKtb9QAkPK5fGmW0cqxNGsCYwlWxfAm07ZB82NcvQLJa8/q+/5xUehRNsRGKUwibwlWbFJDEPaXodtxBbBmQjLCyNpUaWreqd1tgtYMWGq5dRe5Og/X2Ejp7pl/eqWXZ/LOvxk9+KlR3eAiIN6aAWXBseySR1VTRjTut8ARkoWfdTH5Gw7iebddWRj1MnCE34f7mvKyUlXWivdxe6aTxgQE4R5Az3C71gGxVfSZR+Ea+XpWLwTlssbDFFRD15p5klqrK4ZM5Y7n6JmvsdcXvoYU8A0LlHyzjPWJPte8SyCr7LiDarqeIBS2nH8egYUtezXF/ZjIrmhOU5mcCWIuJC6R0aCfQ6dqGIBuQktAEKehoo3cEvCI0ZTANQpkPi0SYnGBPLKlfoKYIMiKq6eAB2449foMiAop3KL3MaGhVH57V/PbBBfTRtbZDnAqN7O7pVizDTDhDcL9U7JoVzXpod54av/dokIbOrGJl9w65bgY+1sXnxADnXcsffzs2VuExDuezNLoyWOTfnQKrEU0XgQxdFguLqRb4sKgGm0kAIUcRMl6IhcdxOL5mExc0+P0aJ8mHfZbW6xWUMaNzxRlV44KMG52ZZw7FxgRWvnf/h+e8nzmktv61QVG0R9RQmoHMHYpccK7+OsEFIZela1x9qqvx+H5THf1yErmrpEBSQ5EyzWkRoP+t8RzBLCmBlHGSXa2veQsHyG/GmVQ+XlotYq+dC8W4DriFETplmzKWAVZiHZcE3qnDm+ZxEXh0V8w4oq53d20EgcdddQ31ZByoVKLOxCMUEsgRn36jCCVwoJFeRtLIU72I5R+CT1aQDKB4+a3y2ZSMfLH5EDVEaZGzpzo6x1Djcg/yYPn4LBcencnes73ykIShhwqoLoumCcD5EP0iy11SMw+yQkMjAI2J8gQAxRkjHijv1vOdb6x6prkre0M+DoVFfbPjgjamhDe9dMatwEqX4zyGt8GM8Exad3n6cw4b/QZxXwX4c03MIUzajQYSAxu1C5yjgYGQpy7SzAjTBhce6HfwgJOoUXkcW9CwM22ICt3FrxlwvqiLxyA6G0sTcc18YzcKGKmcelPLVsagK4vvvO0jWTTq5ivRG0/ZZY/irfChfKGw0TCt5eeIJckiG9lYFSaA4bKRebtCNPinjk/qOF5xaiqGViLvt/J1xvloWc7uHHdQVMFnlv/LxaItXj4Npp5/ZPiNdgoOLVskGQNyjHAiW6TFARpUkRe5CluLB1imaEAj5auCGYYt8tJO+ehrKKeTOUdzexHsca6gkRc9rSCTLeOdfIwr1Hj/nagFAfE7FYaKdHOOENMYgrZou1jVjlTwN9jwWZsHgmgqhsCyR1DGvzWDCsYft/Jy61wa+37M7NggW/BA4gjA3hUk839mjcvKULTtUqhFdoI1fQaDBOfGg3LiM7eVXUbQ39pXtzH3BDkA7tzo6CSK+TvaciwLD5u0pdcvpMG++P0orJkayTkcJJRKk3Jb+oIxGElRGqBVW1Zt0DjAFmj3Fnbs5pgBKKsoZbpidGnBFyNl2tUdtW4lHuyfO725vBjMMVyITcqwwI5SXLQfAHCMBI6FbUujTPvRRyodnPE9DEucTK1Q8oAzLypW7vfabWqI2w1UXuwAQ4PblU88Jc/KKmG3uY2eSlYWIBST7pAH+TO76/b207062123niCK3PBhnPpwpWkBjVxBNRVD/GKelyt2lNgGJrtUj9tvGtPJEZFhQLJVIhKuK2LKxB3w/GTAb4Q+eqE6wTtwAXaSpPVOgdl7vO4W027mmCiBAWrlgqKYcPFot5ciRATWNFWS8wOyBwauRhPbvrHVfvBJTa+HPTHOG6SNOM6fx+bD2jKeU4YPfgCSUi7Hr5YLYyGUzfQSAbyq8wPl9xoeo+V6+jHvQgUTG6WJ5pxclcQ8bpVVp7Gxlhh6tdyo9qHGCBxxen4PayS6iegG+QACyBPaermtAZtrcwiG5/8mSux2/bSdGbmrDvsMkyd+hfa/XMxQWxs22W4fOk3ISmBrXny1s4kRUn9gxalNK7OwY0lxDj/LMdgBhqT8gx5od8EEf1zp81usqMpMcaJAqyakuxMM5NJ5auqb7qylfbzC7Zf8OI1EUY4HlmvkWgDhVY4iYbB1kzlbzKFPfQQmeGPzZvYJAFejYH1p0tQzFW5GqBN7d9cW8uPkeZUgKzohRxtdzpyq91rv+UvzYWfGMCoQuYMm3w5hbQClyf4an3FcUJqJI/hSakVdUBzOaKHgOkY3+tCFYTS9F5+JeamVlvLLwpJaGPc41qgbsNHDGqzHDSNZiWxrabI9RKUgqsGjFEKxJWGVX0inQ8uN+dIq9j4xbNZK1xeFZKLIo1F1I0BbgE+vgq8oTrlUZwZ6LPZTNUhCHRRfzAB4xnp4jrlsUddCQQjYc5M+f8gT3//dWPoMJwyR/NM",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRRUNwNHRVNW1xbXJwS0ZOVkp6eDNIREFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpJd09EQTRNRGt4TlRBeVdoY05Nak13T0RBNE1Ea3hOVEF5V2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURIbXJuSTN4MUt5aFJ6OXp2TWFmUUcwVjUvcGNuSml6ODZxL1JyVFYyMAp5eXV2Uno2c3ZXTlJhU1k4cExwSWNEMlVQMUpUMHdYNnJ1NUltTkhHNDU3aXNtMHNlNzFpTHZMb3dtV0pqRElpCi9ubURSc2lETnpQSVh3Mk9JYWtXd0NVM3FiMDVzaXBlWENrRU1WN2phdjk2MURFRHpFOWNjRy9YMzhjSHp0eDEKR1FWa0d2cXNRSE9jNURNK2Nja05sb1BaWlUraFd6K2tRbU5BSHBOZ0Q0ekJjc3oxRDE4RDhnUmgzRCtmQjFZdApybkhTV0pJNWo4Rm5vN0VIUWdLV09TRzBIRFBBWlRFY1I0NC9wMWptRVVnNlhnUC93b2NVU1dDbXlqRDBqby9DCnRrZXNTVzVxaFZ2bmdTcWNjQnA5ckRSa3VYMHNxbzlQaWZaV1VCRDJRSi9sQWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFHTEh4b2ZXekwweXRZdlYzVFQ5WnZseHRaR20KZENoQy9FdkJjdFBBQVlXdjRMTExFbzNEaEpkQmg3Um1JQjN0SXhCU1VKdnd3cWtGdm9Wa1EybEZNbjlFclZqWApzQU1KRzFvekhZRTU2SXdhVkdFbGY0QzgvOUpIWnA3UnV4RHgwODVqUEJpWnVwMWdWRDZxK3FYM0RyZ3J2SmlFCmNqMTRJaXQ5OHVrcFJMLyt5dDU5MkFqMEJEc2hPMGFTZll3SWsrRDdsWGZHSHFVd2J4NEltRU5yaVBSSnhaZlcKaHE4MVdsN1JDcFVuZ1NRSy9zeEFFSFJNZW0zSHZyOUZiNjJtYjRiTFRtUzZnSDZkOXlPeHBwelY4SlRrRDR5OApYMSszNkdWRnM4SVZhVTZhbnI5OU44TmdWM09zT3F6NVZkcmhYZFE1aTBkcjJCa3FKRGM2RjlnTHBOWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBeDVxNXlOOGRTc29VYy9jN3pHbjBCdEZlZjZYSnlZcy9PcXYwYTAxZHRNc3JyMGMrCnJMMWpVV2ttUEtTNlNIQTlsRDlTVTlNRitxN3VTSmpSeHVPZTRySnRMSHU5WWk3eTZNSmxpWXd5SXY1NWcwYkkKZ3pjenlGOE5qaUdwRnNBbE42bTlPYklxWGx3cEJERmU0MnIvZXRReEE4eFBYSEJ2MTkvSEI4N2NkUmtGWkJyNgpyRUJ6bk9RelBuSEpEWmFEMldWUG9Wcy9wRUpqUUI2VFlBK013WExNOVE5ZkEvSUVZZHcvbndkV0xhNXgwbGlTCk9ZL0JaNk94QjBJQ2xqa2h0Qnd6d0dVeEhFZU9QNmRZNWhGSU9sNEQvOEtIRkVsZ3Bzb3c5STZQd3JaSHJFbHUKYW9WYjU0RXFuSEFhZmF3MFpMbDlMS3FQVDRuMlZsQVE5a0NmNVFJREFRQUJBb0lCQVFEQUpVSVRERFMyZWpHVwpNTGx2M2M3N2dURG0wRUdmc2x2N3J1eHJIdDdGMjQ4Qi9DTnBSaWNGaDZNM1hadTFmOWJIanUxQnBESnRUMWd5CnFtbkdlL2ZIWXR1VnBzaDRhNW1LVnhoSGdKNEM4ZFVuZWt3cmhFaGs2cHV4NXRWUEFValNmS09ibHRjU1hzVmQKTSttVUlyd3RFWGJkb1NBRWJIZzk1ejFCVnZFQ0JwQlBtTUtrVm45WHFZVGcvWVRwMnlnYkw0UkZYTnZCYzNpKwpGelhYRnp5SUlvK3N5UTZUSEtTR3g5U2Y5ZHA0QzFBQXpwQTA3ZzFuZDFFZ2hOempSYzBDbjdGMC9PeWZaWkxFCk9JblJsVEd2MDFGZTJJTGN6NkxHUzNrOTBUOFd6eHVDUXo5cEpveWJFMy91aFhBUDIwaTdxL003UTVUaVpPTUUKTzB1V3k3Z0JBb0dCQU80QUVreU9uNytMQ1hpREJPZGladXZLd0FiOUJaeE5jdjNoeFBiaUo2QVhwVzJCK2JYVQpPS0VHbmJiSVI2UGxJaVpTVThKbzdCM0lkdkt4QlN0Rkt3VU5tL20zZ2xPaDZRaGdtOWp3Nll6T2N3bGZydVNlCm5lNXhsNWpKRkZSRGxScFR4UG85OXdsZyt6cUlxWnhqVXovTjkzSkd1RStZNFZrdlQySXQ0dWRGQW9HQkFOYXoKUlUrcFQwVzBVNEVaMFJvZnFWSWJaNndGeUZzMnpoNzd1cGYwTmlVRldiV2JvSjZlZ1lWK1FQU1ZRdjlzVEdBNgpHYVlOemtrWCt6eFRLWEJnajdPUk9BTnA1QmVaMlZwRVNFY2JabS9EYXE2VzBUV08rdnN0QmkvOS9MNmMzMllGCkYvVUFEdG5TcmhUeVVTMjBQVEtRY1BTWmdHODI2VUhsUFlTejRwQWhBb0dBWXk1V2NkN3h4Wkc4WmFNNzlPejEKOVFjdUZQdDJUaGVjZHg2UnhVeWp0THlGN09mQVZ6elVTSTZJUlBhYm5EcE5pK2k5RFFSS2VYTGoxdWxjUFJiNwpBWVVWWGZCU2VHVzl4Z2IwaTJpQiszTEJUOE8zRDREbVVjcTJvUzRTc2Jia09POTE0ODdVMXV5NlpUODBaMzZnCjM3TUdqbkhZTnh0L3RYbll2QkpoUDMwQ2dZRUFob1htN01YeDVJUGJPbTNacFp1bTlNbzFDQVRMaDlOc0ROKy8KQjB5OXpDNXhDaWhMMkhjS1FvRmI0NlBPU2NvcWhMU0NzNWU4NC9HQnVrZUZGR044Um8rNzMrK3VPZGRzNTNFWApORzZIbllsOHc0Mjk0ZWdIZSsrM0M4VUJZdEZaN0V0T3VuVGgyVHQzVmFxS2tLOTVGTUNKOWNoa1A4clJGamV6CmR2MWEvT0VDZ1lFQWpmV0ZYU1huakIyUm5mVjVYUXNGaEI5RysyalI4eFFiVHl5emI3Y0NUSDZUZTM1bmdCVDMKNHoyUjhXU3BzSHZrWDgzZnc2N1NVdmxWWTlIWDJVV2NTMllZbDBlbXZjOUxDY3Jlam85WUtVZVpzTkRDTnRRMQpOS3VobnZvNWlwZEFNQzNmak1KUHpQUWZoUmcwd1RjU1JkbXR1NXEvanBOczIvYjlibkxNWGUwPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy-validator-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"} ",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "linkerd-policy-validator-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-proxy-injector-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-proxy-injector-k8s-tls-linkerd.yaml",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "AgADCelet8XZ0nwpMHuaRNUQNEjKRjBxrQkxn79jpO+51uGquQ23xSJWwBCKwPYqSa6HxQ5xn4i/iAl/AMnMLlBr9ofx4EXwBaikxXjNN1oBkZtCvGaTJFs7C/EaFb7ml47hM2qzplYTF0AYH/VrrFjXiPUVIJZFrkI2wvWTypcu9LT9/eY/TwLBAD96KlAppo2Eeox7zTGh1lecLC/72Cv6+3Uv7E22tTHzvHFZMePBALo8V/ZRMiY2StowCieerrRlD+WiclpfdFFZaiaKPDQ53FUfpi2098X8GA6jmZthNIPcangsczFfhLAXMlKgI6b3719q+4sKIPUVIz5NoEB6crJm+QyOQYo/RpF97qj4s9/JYtV3snrqRnHzWX6BOwyISN5aoKJBOhrr6g0P55vOg2tyXisjRBBjRupklQRQX8iLYXjw4BZCV/Cvh5hOojQ0O5fZ1+7sEo03ReYcwlaX/RK5ZGFg5SJDgb1K7Opbl2WR39yvFaQKpvDeEr2UBwXwSGC3ytnTZ8MRsGuHX9Oi68xTVSvEikLqADYijuIG2QrzmgrE+JSZ8lidx7RtgJCwPSaRCkmt6vZseA7sJ9yLhYIR0oIVB1asiww/ZqibChWQTCYKjnBbxTsga+KLtDwzUzWRLiHy3UXVv11MsTr1uWpZpv9Fp+O4XoC4XBSBWUeZmDWBpPSUoivJ0oq3ImUaNvxnA77icXtZ4ymH30vlzvZl0Brqxs1WLI/rfSSHLl6mvmbetVE/pQ3HtInAzkhgsraq53Q9bcFdvRRU7Qs8oqHxMlLeeOSe8j66czda9+Wd8FH1sp7LrxS8OlBXCC3273oPZMkwGxvyG9HrQYQXyf0ZrSZqyjZ72bUOjUc9NIcNHiDdOdOE/s0QK4fMLJcLrojID3wA8/512jhflAt5FKP4CQWA5wRDCl3+qlJ7g3TZ5D3zhxn2zTbHGK+xIYa1AGmP0UYs6t3Wan8X0/7GdGaPSOOCqtFy2f/vK8ybkAOQCSF3BuGmtmWo34I4CPUMKmS65wa2DvsO7y3OOBXPPmY47jRWSo/s/IGbj5pp76uNHqGKtc2R2SRGBlCXLcCaosd2Zo449DBQa6BFmclr/7K0AYFVoqhluRWVhfH/tHHQVOj/MQfV5+LVC2wTGUmKPnTTpSPBgVzg+pO52QdYR3ErLqdIPvQSBtbkO806EWhHy4SJ1uHcD//hvVm+RkBHJNYWQgxjPlBeYr5vWhcv9nBePzxKKU6K8Dl3qwXKENWPp1THL9pn3T4QSD0ohzBicrqJ6u8yA3NEYxyv/48Y6BIi/M8YcA7Cb4gM2riKsJzfAVw5cBp99biyXZ0D2as9/1YDd0HvGsgGxMWKPB85zT3zKSfPNmJ0d1BkiyaCNSYksHt87DzPyqAKB88a984v6UvkQ+9i6m0rmgxxvAHNscZ3oZbSzQtTib86ooWif14h/q1zGu8yWWBsOUwE5fEreE5+Lz4kEX9w1l+hd6txeK+gsSlpbcAQHracJOZFaU0MmNyPqgwEHtwAb9rbAr4lFa+sMeE5c6Wgd8yRqcvIEXFZgWlV6pl0s6e95cJbjPsiUIOdqd8UhmyHLB4wtUM6Ui7GN8S5SKwa/rUL4BRD7N0coOMz4wQOAS1EO8CmmspFgst4xQClfzL200YWL8fOdsoDO3072HeplD0ygbxtB/mE9L6ZA0QGGya8L4/SLkRvLR7Bse4C9g3n+16ZqHiAao+D2/nuMnFyUSxQutU1ZeP3ZiWjUhLnhY4BCOvSv8yyyr39QjqKD3xroLPVNG8aFi2LMBvm+ckSvn5yAEfKjO2507k4JbEl1TVfp48+EbLMXv+Ni2iMphfffBToE3pArRl3xsKVVbfhdkmnlngpXWxM5kgr5/ldwk20f50XacuLs6pP5wMa62NQt+/EYRkOVzrv0gltwUV6MjfFg32GhfpOMDKPWq+yjLLbLUPVEj44x6VATX6RyLMthKRh1UEnkSxBRpy2wT+gm0nKcWGvxTXX4Ohrcuoya5Mspiy8TV5oi3vyTwCC/RBo9IeJPhZZGdgzafU6NHxfZofluBgtltdZlPAPZYdoz9x0tvqXwb/9R/ys3ywHeHfuBhmrkEWVJRo9LZU9xtGlzkfJYBj4y4b45/hRc4B7ORaespgeQQg3Xn0zqbKffiZIciwgtBN1vqCdfuqwPhQuNYDJc+eYmfzUnmxeNXDpFF1L6L/+5WcEFC5ZQX2uEWuDdiEUYqZCmKNVNA9Mk7HcE2ZDbO4MKnUOy3mvZfRME5QrOaf0cJwF7nWSWWxFVCIBUqk9N3eoBFe0xnllHa9/cw==",
        "tls.key": "AgAQb726Msm6dnsk/sfkihWr6ZmoSr9TlDta7hlp9AQDteGmiHOH7XbMldtmqepvzpekEj0HEEwoTo1W8JmIctt8fx3ch/CHfw7ijW8xhYlvdmPe4Emy2DMGO1pPR3LkIkTElD3giklY3uOXmxhX6b9yagtSv+7uHMz4qQTn8pA8NZreSvtbDaGacgXQuWWtzlysgwMWQZq7gOj26X0Z0+jzt+dXXa0Fe+A7B2HTBfUrAbneUassuacAhsIhji8DowKtQXMOGiFvgX4wI33DgzaVqpqgRh3FaOsF7+1tU7AxKHOwYRe41hYdyCpVk8caIJcHdMqtiCtIVRDv2m+tMQFVCHOQTrOd5EmsEH3d5DTZJCbIq4qzLGkFEfjDZuJh7NkfPGm5zb56keT3gt1B9YZT0sG3DPTv9giLMVuviYneDdK+OzX5CF5hLHnFTTWtGMAjs5+h33FI3dzlMBiQaW8vT4JmtaLrar8rmfAwgZpCUkIlhNsiAWhajokroyF68iQcoHkx7KpkjWsc0d1at2NIVi+I7dg2XfKKjPjTWEqMwHG9IhTnhWL29bkX86ciB5Qb+52dIXYN514vCTGttUEwRx+c+Ccr+ShkjrD53VkCi5LQc9PTwGCl2avwSqBTmBntnTO6n+oBjbpDt3ntVrImVn5THGXNND6C0RrjC3VbZRnQjVAJFT1p7q1mpN3uFgAuo35F/NQ4sIxFCFiGG0xG+5W8DOA2iSn48M7KTBrhrhbA/rKCSwvFzuRojrOP7lBKbP1Cne/A/8vAFSr/iUttQypM+LebOV9xWMT8WbOxQhUfRegcR6FjeXfBSIXkPpJrkndi5qF57cAs8qJ4FFmBhjjRrReNDZ6+Llx63kA+G6eip25J3koVjq4HzjzO5taTecVSAQCfE6Jn5Cr3eMNHmQ23HA6X8FI+pyk51CwZei0gqyBakfXGi9O05k/fYVZCI/G3khuUEhx+ZrLrFdjM3hnRD+TS2BCmO9BEf4114OkIu85FIvZXoOcF5LX3sHciddNN72hKnZCtqIp2qMT28OpDwrgKnXBaEfSJigUF51zEgOTFeRr7E1lTx/cqeVHCLVJu390G34QX8xDylNhQbM5Hrtb6sOIzZQuvt1FtN691mej6hu6oU0IyYYJNtYKE8RIalxDDVsg6GcgGym+VJcuxZ3M3tTCBq2d33C+9ZlK87cWpqvrMgOw74LnqDQOeNXNtvZ84TMqEtDokYPdNTJvc9kUcS8eNi8VM+e1t7GDQJ741fJNG5fFecRh57vTgr4Qwr/GocYxfv4khZorCmUDe20po6YsIn6rwPHxODqwwx9is7IGq1KBmeb7CyEG66OSwIi/KWUHDMWhtqE5IO83YclefJGoPLfhCUiuinuTmu3s62QCW5r/qZA1v3/Samqrv561MnA2Qh6F/rf/Djf19vreXAvHHuBpbzw8OZWmUs5qMmyQAHibqrUglBEaKBP5s2ndms64Jxv4XgLUJ4bD29ygZMQhY5WnzGAVSWqyayFVak7oPoqkDKyGwDYG9btNRsAndLkU1R692pOqe3oDldAFxjb9wE4aZAhd6qFp3CMVY2FbJGNne+LFRSspHZJOIsuwyD68u6kC9jkFuQvcwuQzJ5mXJUCLHCsYCul1bvab3JmdpjmTZj+AH46vUMgEYtV9kN9d8etwdQPX5yEp+CIBtTIf3ry0u6XNnZZ9dDe1KNzycElM12QTMfaTKbyfkD74vmBC+C+mTm5YRhcb2OQQccl4OQPq/2GI3lWRL3/tvmYb+pot38tJaIEbXqF3c/Ln63cmNUt1+YxxUqllvqRw01INFbyECWSXKQqdEk+TJND5VxTEmQoTVo8iq4VthzT8k8Ikq6pANeEtMAwvAYcHDr1QzcMHDJkRdFrkH9og68WS7kuSwP7eOBDFw6i7VW5JERNMi+pplI0B169bWyZcLkq+ajOaBWfrX9DgvZVxYaQNq9jmRun0tLyg/vciPBzmk0aT45cdKm7wmTAwgqx9F06YW1At83YZRxnL75OOrGgg4eJ4gA7iWnnu4c9bZG0pxAOUio7HgvYos2qr62rfvp0j7qjzebt0QaYbbooo72G5sKqfySXgELnb4XsbMIa9Q76wqgVX0pvDRD0j5A+SnRNhdDnjHKB6E92+oLdOFcUMlE24RcezWdaFjYFZeozZFkVMgRLN6nqHL9ymOOk5osTnakgaSf8E5XnF3IQOAqaNHvH2GUPf7MrLdWTDI2rrUcjaswKpYZiMHqodPp96omnggnelQaNjzuQMb7afOskd0CuVYiex739ldw/EBLWRN7DNSm64+qEAlHEwE0m5hKmb+1TVdwJhSQqnpo/T6Rd+UbCiOZeUhRzZWeAn7TC05hxYikSxSoigp2CPMScdw5C37QPG3EW8Hqv5yum5Bu2j03snYL1q33nG7P8I8VXEhmZarKQg0Fn0OAi6ds9BQ4jxX+84ygXbxwFXWauU6M0IOoiULXfFhqV2oQxDJUUeeEhAb4HpAuCEyAbNlH/mnhzsLck0pKbgs2mR+XiB7v0199jqM4+x67hQJnMLdNINOgoZJ0RqHNwyz559GIjMevM7r6Rqw4J08o5qXVxgzymmflkKDCA5f+MS3I7FBaKZWvqYGS+HO47S8DZOZm7f95RxiC+md8Az6uxMkLIHqRgztBRIBhmTeJSU+qMRObfcM53pVBSCVFESoU/EVitE3wyjf3Q2fcGBXF3x660IZFL4w29ukk0qax/QHa/hAzmUXYBRwhsmnACkl3Se+0eI4f/cjWunAkPVRPwLrrbze3y61offKOrnQcJKG5EGtmbBhuZJzZAcIS/ZmXOfCCfMGucqD/752SMaGemyJA7izV52NZWkxOtwdogOHpqU27FutkDlcl2J65IrxmIbuCofbXMbPylncDksak2md8hmnVxTTTrg=",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUxOK0c2SC8xTE1rNDRyNkd4QXk5WW93RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBNE1EZ3dPVEUxTURKYUZ3MHlNekE0TURnd09URTFNREphTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRREQ5cWFaT2t6UGVHV2hPSDUvQTF5Y1B0SndEYmI5SkFNZmpaL3gxRGhSM3dJcwppUzBrc0xLMU5NNDNBNnNyUmYzK1BHY2VJbmQxNzZnSDN2OG5GV2ZFVE5TK2dDT3VJcjM1SlBLZGN4OGtxeEFBCndYVU9EMTRHVVh6K0xYUHV4aXhuMmo4c2JGY1hDVk83dVlxR2Vrb3VSdlViSldpdnVPUDZ2QTk2dGZUUUdidEcKMmMwTy8xaStwV2Y0RUdqZVIweUpTb3pnUG9WWENJcWRoK09ITmxCNVFoWG84Z1U0VFBBOGZZL0NCSkhyRjFnMQo5S1dOQTVpOWxibUl1c0s0K1ZQQlVYM3RVbktZR2JRcUhsQzBtckV3TUI3TzhKandSMHNQRGRwOXduaXBNdjBkCm55SGhoY1dYdTExbk9jRDU0RFlSRHp6cXFmSWxPL3pHYVFTSDYybFZBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFwaGM0bE02TUliWXB5N0wvYVNBR0gvWlIxN00zVCt1dVcKTXZzbnVEd25zSzVMSFgzTmg0Ri9WZUZuZE9mTFRiZVRvczloM25lekJuQUNEekJsem5sclBvbHFHQmhOYXBLNQpVSVgrRytNK01vY0oxMFg5eFI4bGI3SkcrUnA2cngyMU0vV1AzWnZMM3RHV1FUOVBkVG5OaXh5L1FoNmUxckdFCnMzSW0rUHFHZjVPUXVpdFB5aEpnZmtxMXhmaENRRFdCUUVVWGNUOThPZWk1Ui9odXRnODJjZXJHWTY2OUF2eksKZjFuVDRuWUpXQzV2N3VsaUw5WkN5eFZOb2F6a2JINm9uVmxXMzd1cFJNWk1IeUVVZFEyQXVKRTFWdnlKdWd0VQpqRGZZNm5LaUc2OFNWczZUZ1piOEcyWWQ4SkkzemRTWEQ4Rmhub3RmWFZKS0lxcFNJa2xVCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdy9hbW1UcE16M2hsb1RoK2Z3TmNuRDdTY0EyMi9TUURINDJmOGRRNFVkOENMSWt0CkpMQ3l0VFRPTndPckswWDkvanhuSGlKM2RlK29COTcvSnhWbnhFelV2b0FqcmlLOStTVHluWE1mSktzUUFNRjEKRGc5ZUJsRjgvaTF6N3NZc1o5by9MR3hYRndsVHU3bUtobnBLTGtiMUd5Vm9yN2pqK3J3UGVyWDAwQm03UnRuTgpEdjlZdnFWbitCQm8za2RNaVVxTTRENkZWd2lLbllmamh6WlFlVUlWNlBJRk9FendQSDJQd2dTUjZ4ZFlOZlNsCmpRT1l2Wlc1aUxyQ3VQbFR3VkY5N1ZKeW1CbTBLaDVRdEpxeE1EQWV6dkNZOEVkTER3M2FmY0o0cVRMOUhaOGgKNFlYRmw3dGRaem5BK2VBMkVRODg2cW55SlR2OHhta0VoK3RwVlFJREFRQUJBb0lCQUc3ZFd4RnpOME5sRlBJcAorUDY0a3l0ZUswWHpyR1A0ZkwvY0t2SHdvMUJHUDMrY3QrcDdBUStkYVZFY2hUazlKdDR2cEJNYllzUlpLcElSCmFmN2RrRkF4TzJidkxjQjFyVTZIeGE2b0U2VjJGZDZubENhNU1QT1lKSVBVaVRNNzhLRnNpck1DTkI4M1NxVDQKNmxMOFduMWw3WU5ISGJ2VWVUNUFLTzIraFZzNVJINmo0SzE2TW53cG9xOUlMUUFhUGVOWmNxL0VVbDIvQjgvRgpiV1YrQ0JCdEpOaTFXcWdVbXNKYWdwYkUrYW1HKzZhc3JCaWZJVUllelAzVjhhd05vekxzWjZKVGFRMFI1dHdRCm5OZkZDR0pIMGgxdmVZZ1l1UmNHemRXZFcvTVRFdWxKdGJFaTYvOGUzNzFrMytjcDgwajBqcDZQamZKalY3clUKbnF2aFhxRUNnWUVBeUN3MWVEejJkVmtGRlBzRWFXVlhVQTFkRXhmem1CckxQWlh5N3FMNzdNWnpValdpSVFzbwowdldsN0NjdVVjTE1ENjV1MU9ZYU0wYWRyd1FkS2tydDk4V2dnRWdyN2dXYUErV0REWjlhTG0yQzdZQ2pXM3lLCndBYWhlVEdhVUFjUkpwK1oyTmlUM1pWTUxPNXp5enNid3RUQmdvUzlYaDdFVDFUdS9kem9iM2tDZ1lFQStwM3EKWWZpZVF2WGF4YkcvTHRDaktwTWxNN3Yzenc0WDl0SWVSN0VCMWx2eWJuVTMwNUZoS0ptNUFzbjl1SS8zNVZXRwpUbzN2dHYrekJiNGFkQ3lRL3NFS09tOUVYUmEyM3NVMjIxR2N5RG1YbVc1K1dqTGQwbDJUOGJCLzFmRUNkTzkxClJ2aTNDMGpaQzBFZ0ViVldOMFVyajNqRDlJdGJmRVNTN3llUnhiMENnWUFYaDlyaFA0bFpVaFdlMmNNekFJNjcKQWxjbW4zSXJOenNkQ2p0OGdmeExZU2k5U1VDOTBhb0M0bzJXclNSc3lCRms1b1J3MG52UiswTWVCOFhGNnZqKwpYMlQycjRVNmZiNFZKeTI0dERyTnFtSHh1V1Y2bzdGTDBYdTUyM0xnWlhSR3JneFB5V1hZYm14OSs2bnhBZ25KClpXazZCcENjTjlHcjRiZ1diNW1EUVFLQmdRQ205aitvNTJZZ1BBUjB3bmNZN0R4WDU5SFlCbmtRZzFZcHhGQVIKK1BXOVptSTdmbklqeSszTGk2WDdHckNpblo5TU5NOFdWRzhJSG8rWTJzNXE2U25yM3BVKzJ0UFRwSWRPSUZycwpnQkdRUHZZbGJMeFd3UjZRd0hFSWlrcVFNRkV2c0R3VWZTd05JNG9kZWxTd0Yzd0p0RlpSN2VXMmJJVVZZK1h6CjJBdkFqUUtCZ0cyWGJSd1RkNzN4eWozWGJ2ZDNuTTNqaUplTjVRT3dDMHNhR2paT0FlZjk1SG1ReUVPQWFIMngKZGxpMklBV2RMS25DY3pHQVNGNnV5N3R1NTR2VEo0MksyMlFqN0pVT1VOQTJVOHhIbGRBWkw2NjZOK2wvS2xrUgpVMk9XRDMwTEl2SUxvMGFCMmZ5Z1l3Q0h4dkprVWlLcEg2a3ZSelNBYXVhc0I1dm5zK05qCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"} ",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "linkerd-proxy-injector-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-identity\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"grpc\\",\\"port\\":8080,\\"targetPort\\":8080}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"identity\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-identity",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-identity.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"grpc\\",\\"port\\":8090,\\"targetPort\\":8090}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-policy",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-policy.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-dst-headless\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"grpc\\",\\"port\\":8086,\\"targetPort\\":8086}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-dst-headless",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-dst-headless.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"proxy-injector\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/config\\":\\"173ab73deb21ded56701835d0405fe9b6b152e8003f0a23857a20c3cf5165dbd\\",\\"config.linkerd.io/default-inbound-policy\\":\\"all-unauthenticated\\",\\"config.linkerd.io/opaque-ports\\":\\"8443\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\",\\"linkerd.io/identity-mode\\":\\"default\\",\\"linkerd.io/proxy-version\\":\\"stable-2.11.2\\"},\\"labels\\":{\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-proxy-injector\\",\\"linkerd.io/workload-ns\\":\\"linkerd\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"_pod_name\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"_pod_ns\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}},{\\"name\\":\\"_pod_nodeName\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.nodeName\\"}}},{\\"name\\":\\"LINKERD2_PROXY_LOG\\",\\"value\\":\\"warn,linkerd=info\\"},{\\"name\\":\\"LINKERD2_PROXY_LOG_FORMAT\\",\\"value\\":\\"plain\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_ADDR\\",\\"value\\":\\"linkerd-dst-headless.linkerd.svc.cluster.local.:8086\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_ADDR\\",\\"value\\":\\"linkerd-policy.linkerd.svc.cluster.local.:8090\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_WORKLOAD\\",\\"value\\":\\"$(_pod_ns):$(_pod_name)\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY\\",\\"value\\":\\"all-unauthenticated\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"100ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"1000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_CONTROL_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4190\\"},{\\"name\\":\\"LINKERD2_PROXY_ADMIN_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4191\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR\\",\\"value\\":\\"127.0.0.1:4140\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4143\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_IPS\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"status.podIPs\\"}}},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS\\",\\"value\\":\\"8443,9995\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES\\",\\"value\\":\\"svc.cluster.local.\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION\\",\\"value\\":\\"25,587,3306,4444,5432,6379,9300,11211\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_CONTEXT\\",\\"value\\":\\"{\\\\\\"ns\\\\\\":\\\\\\"$(_pod_ns)\\\\\\", \\\\\\"nodeName\\\\\\":\\\\\\"$(_pod_nodeName)\\\\\\"}\\\\n\\"},{\\"name\\":\\"_pod_sa\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.serviceAccountName\\"}}},{\\"name\\":\\"_l5d_ns\\",\\"value\\":\\"linkerd\\"},{\\"name\\":\\"_l5d_trustdomain\\",\\"value\\":\\"cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_DIR\\",\\"value\\":\\"/var/run/linkerd/identity/end-entity\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS\\",\\"valueFrom\\":{\\"configMapKeyRef\\":{\\"key\\":\\"ca-bundle.crt\\",\\"name\\":\\"linkerd-identity-trust-roots\\"}}},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TOKEN_FILE\\",\\"value\\":\\"/var/run/secrets/kubernetes.io/serviceaccount/token\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_ADDR\\",\\"value\\":\\"linkerd-identity-headless.linkerd.svc.cluster.local.:8080\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_LOCAL_NAME\\",\\"value\\":\\"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_NAME\\",\\"value\\":\\"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"}],\\"image\\":\\"cr.l5d.io/linkerd/proxy:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"lifecycle\\":{\\"postStart\\":{\\"exec\\":{\\"command\\":[\\"/usr/lib/linkerd/linkerd-await\\",\\"--timeout=2m\\"]}}},\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/live\\",\\"port\\":4191},\\"initialDelaySeconds\\":10},\\"name\\":\\"linkerd-proxy\\",\\"ports\\":[{\\"containerPort\\":4143,\\"name\\":\\"linkerd-proxy\\"},{\\"containerPort\\":4191,\\"name\\":\\"linkerd-admin\\"}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":4191},\\"initialDelaySeconds\\":2},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsUser\\":2102},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/identity/end-entity\\",\\"name\\":\\"linkerd-identity-end-entity\\"}]},{\\"args\\":[\\"proxy-injector\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9995},\\"initialDelaySeconds\\":10},\\"name\\":\\"proxy-injector\\",\\"ports\\":[{\\"containerPort\\":8443,\\"name\\":\\"proxy-injector\\"},{\\"containerPort\\":9995,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9995}},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/config\\",\\"name\\":\\"config\\"},{\\"mountPath\\":\\"/var/run/linkerd/identity/trust-roots\\",\\"name\\":\\"trust-roots\\"},{\\"mountPath\\":\\"/var/run/linkerd/tls\\",\\"name\\":\\"tls\\",\\"readOnly\\":true}]}],\\"initContainers\\":[{\\"args\\":[\\"--incoming-proxy-port\\",\\"4143\\",\\"--outgoing-proxy-port\\",\\"4140\\",\\"--proxy-uid\\",\\"2102\\",\\"--inbound-ports-to-ignore\\",\\"4190,4191,4567,4568\\",\\"--outbound-ports-to-ignore\\",\\"4567,4568\\"],\\"image\\":\\"cr.l5d.io/linkerd/proxy-init:v1.5.3\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"linkerd-init\\",\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"50Mi\\"},\\"requests\\":{\\"cpu\\":\\"10m\\",\\"memory\\":\\"10Mi\\"}},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":true,\\"capabilities\\":{\\"add\\":[\\"NET_ADMIN\\",\\"NET_RAW\\"]},\\"privileged\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsNonRoot\\":false,\\"runAsUser\\":0},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/run\\",\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"linkerd-proxy-injector\\",\\"volumes\\":[{\\"configMap\\":{\\"name\\":\\"linkerd-config\\"},\\"name\\":\\"config\\"},{\\"configMap\\":{\\"name\\":\\"linkerd-identity-trust-roots\\"},\\"name\\":\\"trust-roots\\"},{\\"name\\":\\"tls\\",\\"secret\\":{\\"secretName\\":\\"linkerd-proxy-injector-k8s-tls\\"}},{\\"emptyDir\\":{},\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"},{\\"emptyDir\\":{\\"medium\\":\\"Memory\\"},\\"name\\":\\"linkerd-identity-end-entity\\"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-proxy-injector",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-proxy-injector.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/config": "173ab73deb21ded56701835d0405fe9b6b152e8003f0a23857a20c3cf5165dbd",
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "config.linkerd.io/opaque-ports": "8443",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
            "linkerd.io/identity-mode": "default",
            "linkerd.io/proxy-version": "stable-2.11.2",
          },
          "labels": Object {
            "linkerd.io/control-plane-component": "proxy-injector",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-proxy-injector",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "_pod_name",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "_pod_ns",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                Object {
                  "name": "_pod_nodeName",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "linkerd-dst-headless.linkerd.svc.cluster.local.:8086",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "linkerd-policy.linkerd.svc.cluster.local.:8090",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                Object {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8443,9995",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}
",
                },
                Object {
                  "name": "_pod_sa",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                Object {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                Object {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": Object {
                    "configMapKeyRef": Object {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "linkerd-identity-headless.linkerd.svc.cluster.local.:8080",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": Object {
                "postStart": Object {
                  "exec": Object {
                    "command": Array [
                      "/usr/lib/linkerd/linkerd-await",
                      "--timeout=2m",
                    ],
                  },
                },
              },
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": Array [
                Object {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                Object {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
              ],
            },
            Object {
              "args": Array [
                "proxy-injector",
                "-log-level=info",
                "-log-format=plain",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9995,
                },
                "initialDelaySeconds": 10,
              },
              "name": "proxy-injector",
              "ports": Array [
                Object {
                  "containerPort": 8443,
                  "name": "proxy-injector",
                },
                Object {
                  "containerPort": 9995,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9995,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/config",
                  "name": "config",
                },
                Object {
                  "mountPath": "/var/run/linkerd/identity/trust-roots",
                  "name": "trust-roots",
                },
                Object {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "4567,4568",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v1.5.3",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": Object {
                "limits": Object {
                  "cpu": "100m",
                  "memory": "50Mi",
                },
                "requests": Object {
                  "cpu": "10m",
                  "memory": "10Mi",
                },
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": true,
                "capabilities": Object {
                  "add": Array [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": false,
                "runAsUser": 0,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-proxy-injector",
          "volumes": Array [
            Object {
              "configMap": Object {
                "name": "linkerd-config",
              },
              "name": "config",
            },
            Object {
              "configMap": Object {
                "name": "linkerd-identity-trust-roots",
              },
              "name": "trust-roots",
            },
            Object {
              "name": "tls",
              "secret": Object {
                "secretName": "linkerd-proxy-injector-k8s-tls",
              },
            },
            Object {
              "emptyDir": Object {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            Object {
              "emptyDir": Object {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"admissionregistration.k8s.io/v1\\",\\"kind\\":\\"ValidatingWebhookConfiguration\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy-validator-webhook-config\\"},\\"webhooks\\":[{\\"admissionReviewVersions\\":[\\"v1\\",\\"v1beta1\\"],\\"clientConfig\\":{\\"caBundle\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQUpxemFWRDJFQjluK3hzS3ZxSHV1MzB3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa2JHbHVhMlZ5WkMxd2IyeHBZM2t0ZG1Gc2FXUmhkRzl5TG14cGJtdGxjbVF1YzNaagpNQjRYRFRJeU1EZ3hNVEEyTkRNeU0xb1hEVEl6TURneE1UQTJORE15TTFvd0x6RXRNQ3NHQTFVRUF4TWtiR2x1CmEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeAp3MTRGRzA0di9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLCm9lTXdnN0IzV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnMKUnJqY1lpeXphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWApnWUFEUGloT1JVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrCkRuck5yUFFTaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJvM0F3YmpBT0JnTlYKSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdMd1lEVlIwUkJDZ3dKb0lrYkdsdWEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwCmJtdGxjbVF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ3VvelhFMWJZMkR1VHZLdzcya1NoQVE0c2YKeiszZGlYdEhSbGpiYjNKZWIyNFRWOUVqZ1RybmhsYlpFaG8rcFA5ME5kQlIvQTRvVHdXQjdVUFFienp5eHQ5aApCcHZmVXQ1N1pyQ3hQdGs5RXJVdXR2T3EvU2NqNkNDd1VBUjZ4b2pybnJWQzNqY3ZIZEp0TXBNNlA3QnlQVUtxCjZ6c1dVcVExT0p6Tjg0czV6TDRoMG9YZDA5T0RXOC8rNWRFUVBOY1JXM2pHallvdHFoUnYzVm5aSVVYejZlTVcKaXVveFlrTDZNc2NyNHhGZkROOXBDVnkyVWIvV0JUSGVQd2ZHOGduaTVlR3ErMjNUWGFCbm1xd2V2aFNZcXQ5eQpOcm9rMzVVZlFHamI2WUFRUVdyQlRxa1diSDZ2WVpYVUYrZGEwL2JrVnFwbDNDZGpJdHhHaWV4bnUxS1oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"service\\":{\\"name\\":\\"linkerd-policy-validator\\",\\"namespace\\":\\"linkerd\\",\\"path\\":\\"/\\"}},\\"failurePolicy\\":\\"Ignore\\",\\"name\\":\\"linkerd-policy-validator.linkerd.io\\",\\"namespaceSelector\\":{\\"matchExpressions\\":[{\\"key\\":\\"config.linkerd.io/admission-webhooks\\",\\"operator\\":\\"NotIn\\",\\"values\\":[\\"disabled\\"]}]},\\"rules\\":[{\\"apiGroups\\":[\\"policy.linkerd.io\\"],\\"apiVersions\\":[\\"v1alpha1\\",\\"v1beta1\\"],\\"operations\\":[\\"CREATE\\",\\"UPDATE\\"],\\"resources\\":[\\"serverauthorizations\\",\\"servers\\"]}],\\"sideEffects\\":\\"None\\"}]}
",
      },
      "name": "linkerd-policy-validator-webhook-config",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/admissionregistration.k8s.io_v1-validatingwebhookconfiguration-default-linkerd-policy-validator-webhook-config.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-linkerd-destination\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-destination\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"linkerd-destination\\",\\"namespace\\":\\"linkerd\\"}]}
",
      },
      "name": "linkerd-linkerd-destination",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-destination.yaml",
  },
  Object {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Certificate",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"cert-manager.io/v1\\",\\"kind\\":\\"Certificate\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-identity-issuer\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"commonName\\":\\"identity.linkerd.cluster.local\\",\\"dnsNames\\":[\\"identity.linkerd.cluster.local\\"],\\"duration\\":\\"48h\\",\\"isCA\\":true,\\"issuerRef\\":{\\"kind\\":\\"ClusterIssuer\\",\\"name\\":\\"linkerd-trust-anchor\\"},\\"privateKey\\":{\\"algorithm\\":\\"ECDSA\\"},\\"renewBefore\\":\\"25h\\",\\"secretName\\":\\"linkerd-identity-issuer\\",\\"usages\\":[\\"cert sign\\",\\"crl sign\\",\\"server auth\\",\\"client auth\\"]}}
",
      },
      "name": "linkerd-identity-issuer",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/cert-manager.io_v1-certificate-linkerd-linkerd-identity-issuer.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy-validator\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"policy-https\\",\\"port\\":443,\\"targetPort\\":\\"policy-https\\"}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-policy-validator",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-policy-validator.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-linkerd-proxy-injector\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-proxy-injector\\"},\\"subjects\\":[{\\"apiGroup\\":\\"\\",\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"linkerd-proxy-injector\\",\\"namespace\\":\\"linkerd\\"}]}
",
      },
      "name": "linkerd-linkerd-proxy-injector",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-proxy-injector.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-linkerd-identity\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-identity\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"linkerd-identity\\",\\"namespace\\":\\"linkerd\\"}]}
",
      },
      "name": "linkerd-linkerd-identity",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-identity.yaml",
  },
  Object {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "MutatingWebhookConfiguration",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"admissionregistration.k8s.io/v1\\",\\"kind\\":\\"MutatingWebhookConfiguration\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector-webhook-config\\"},\\"webhooks\\":[{\\"admissionReviewVersions\\":[\\"v1\\",\\"v1beta1\\"],\\"clientConfig\\":{\\"caBundle\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUxsUXVZVlBqeVo1N0dhcWgzWXFJM3d3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBNE1URXdOalF6TWpOYUZ3MHlNekE0TVRFd05qUXpNak5hTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRRGduL3ZacVo4NGdEVWhuRG9OdEQxYU1zZXBReFFhTnRDcWdWR3lIOFZSZm9ySwpXMTdRcko0M2lvd3JvVXUzaWpQY3JPZnlQdFZxOWZSMXNlSCtBenY1WlFpczRQYUlNUFZ1b1AxV3ArK3pPTVpyCmJydE01TzNIdUNCcmVXYTRaU2ZoeXRkNDhxMzhEdTVnQ1I4WFByKzUwQU5BN2FVaUYxaG9uK3MycUVMbHY3b0UKL01FblR5eUhIUWhzNWFkajVMdWR3bXpBTXI1cGo4ZGlXc2d4WThLc0owYU8zVGJIUmJXTkRZTU9MZFNzZ3pFKwoxRmsxdTdMSWljRG9GQm1oRENZZVZzTURLYTV4Znk4TVUrU1FxVEpKVHRiUXNBTzdiQU5KTW9mMnJEZUhTeTU3CnhSRFBTczZNTjU2MXNadVdHaHdJQmpzZHZCMU5UcXp3ZFo4ekhjNWpBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ0NHNaNlNnclRSK01xbExON3F3bW9kMXplTkF1dDh6Q3IKYkc3NEhpdktIZ1Zhb3JwOUp1SlJKU0VEUlVQLzdocmNMd0pjRUlMTllGZHhmalpKYllBMUFnSmZkdUt2WDM0Ygo1SC9hc05QRkVzSTdIOWw0cmY3TDVHbjJ6QWlBR1k4WFpKcXpxclE0eGIrdWE0V3p1VGQ2VHRoSm9pMU96UTBNCnh3UWRFbHVBWTNYVzJZV2VrYzJub0FiRlFvNCtQK3VVcHg1NE8wY0NCa0xCM2NuSmtzZ2RRejViektXVzFITUkKQmRQekN3c0xTK1dPK2doTWRWSkVuV3hWY1krNTZpRjNCM2FQWG9WL01RNU56WEs5c2FBNVZhYWJKbjVYd2FqRAplR1l4QlJvZ0R2ZTNnaWwwbERDbnVxMHZZZFp2aktDd2dwRUxhaVBWS1dnZmxYcVR1bFVWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"service\\":{\\"name\\":\\"linkerd-proxy-injector\\",\\"namespace\\":\\"linkerd\\",\\"path\\":\\"/\\"}},\\"failurePolicy\\":\\"Ignore\\",\\"name\\":\\"linkerd-proxy-injector.linkerd.io\\",\\"namespaceSelector\\":{\\"matchExpressions\\":[{\\"key\\":\\"config.linkerd.io/admission-webhooks\\",\\"operator\\":\\"NotIn\\",\\"values\\":[\\"disabled\\"]}]},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"apiVersions\\":[\\"v1\\"],\\"operations\\":[\\"CREATE\\"],\\"resources\\":[\\"pods\\",\\"services\\"]}],\\"sideEffects\\":\\"None\\"}]}
",
      },
      "name": "linkerd-proxy-injector-webhook-config",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/admissionregistration.k8s.io_v1-mutatingwebhookconfiguration-default-linkerd-proxy-injector-webhook-config.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-linkerd-identity\\"},\\"rules\\":[{\\"apiGroups\\":[\\"authentication.k8s.io\\"],\\"resources\\":[\\"tokenreviews\\"],\\"verbs\\":[\\"create\\"]},{\\"apiGroups\\":[\\"apps\\"],\\"resources\\":[\\"deployments\\"],\\"verbs\\":[\\"get\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]}]}
",
      },
      "name": "linkerd-linkerd-identity",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-identity.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-destination\\",\\"namespace\\":\\"linkerd\\"}}
",
      },
      "name": "linkerd-destination",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-destination.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-heartbeat\\",\\"namespace\\":\\"linkerd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"linkerd-config\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"get\\"]}]}
",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-role-linkerd-linkerd-heartbeat.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-sp-validator\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"sp-validator\\",\\"port\\":443,\\"targetPort\\":\\"sp-validator\\"}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-sp-validator",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-sp-validator.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"admissionregistration.k8s.io/v1\\",\\"kind\\":\\"ValidatingWebhookConfiguration\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-sp-validator-webhook-config\\"},\\"webhooks\\":[{\\"admissionReviewVersions\\":[\\"v1\\",\\"v1beta1\\"],\\"clientConfig\\":{\\"caBundle\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUkrYUVCL0EzcmRkK0VDak5VYzhsYlF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3T0RFeE1EWTBNekl6V2hjTk1qTXdPREV4TURZME16SXpXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxwdU53cFZ2dEcvUkVoUXpCM1JiK1BvWU9iVTVOck5iSUJKTU4vNjlWY3FucnYweWQ0SQpjUllyWVIwMjJ5NE9UODk5THVtOHpiVGZDOGVPTXlnaFZ0akFwb0xzcWdtMkkwV3FIcVNtQ0NuR3l6cnJLbzNrCnNCODdsTmJDV1k2ekcvV0J4NFRpbFdsTzBiSDB5elM3NmRrR0d0eW1YNlFwLzdYV2kvMEUzblRhaWxYVHZ0M1kKcFpNTDhZREFQdjJtR1FHU0hhUkQxNG9LRTJDa2tEVm5mU0g4UU5Vd0sydys5cEY1aW82Q0oyTXRIeWhIZmF5NwpaUnBXK0hxLzYxVFhVTTVYR0hPNlpoZ0dLeWEzbnlseXhLa3lFR1QxUFZkMWtXUEhyQ0lXWjZoelArb3dZNzJXCm1NRklwbXJTNExDa0RTSVRBdW03RnpoMGZ0c2dJYmErUk9jQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBNVgvRnMwbXF0R1c4SjVhMVViTVFrTHpuazIzbzZCWkxhMnlydjBxbTYKSCtrdW5UWkVzMnAzUGR0SDJYeXVhVytrRDFmbmRyR2haRHErRkt2Qnc4ZDlmUERLMXBiVHU1RnprS1lrUU9CbwptajJtZVdJUjdMUlJ1UWFIbnJTd1BUQzNlbWtWRVpQMjBiaUNSclhpV3RLdWtaeEZyTmdrbXZwY0d1VWZPWlBUCkNmU0s1NzM4VXpUSVIzWWxHOXExdnVBbVcyQXNrYXNIbTE3M0ZLN2x2R3NwaE8wVTdRY3JFeEJiVmd0SUZ0Qk0KM0tJYktBZmg5VUs2aW1DNGpsazRlVFBicTZSTHlmNFJoK3Rwb3pWeTlmK295cDZ5eEVlUWwvMk5jNU1mQmxyOQp3MWtDUTczN2k0R1QzMXZmRDJST25JOU9ZZFMrV1VDSWs0dnlVL1l6eVdBawotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t\\",\\"service\\":{\\"name\\":\\"linkerd-sp-validator\\",\\"namespace\\":\\"linkerd\\",\\"path\\":\\"/\\"}},\\"failurePolicy\\":\\"Ignore\\",\\"name\\":\\"linkerd-sp-validator.linkerd.io\\",\\"namespaceSelector\\":{\\"matchExpressions\\":[{\\"key\\":\\"config.linkerd.io/admission-webhooks\\",\\"operator\\":\\"NotIn\\",\\"values\\":[\\"disabled\\"]}]},\\"rules\\":[{\\"apiGroups\\":[\\"linkerd.io\\"],\\"apiVersions\\":[\\"v1alpha1\\",\\"v1alpha2\\"],\\"operations\\":[\\"CREATE\\",\\"UPDATE\\"],\\"resources\\":[\\"serviceprofiles\\"]}],\\"sideEffects\\":\\"None\\"}]}
",
      },
      "name": "linkerd-sp-validator-webhook-config",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/admissionregistration.k8s.io_v1-validatingwebhookconfiguration-default-linkerd-sp-validator-webhook-config.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-heartbeat\\",\\"namespace\\":\\"linkerd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"linkerd-heartbeat\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"linkerd-heartbeat\\",\\"namespace\\":\\"linkerd\\"}]}
",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-linkerd-linkerd-heartbeat.yaml",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"identity\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-identity\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-identity\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"config.linkerd.io/default-inbound-policy\\":\\"all-unauthenticated\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\",\\"linkerd.io/identity-mode\\":\\"default\\",\\"linkerd.io/proxy-version\\":\\"stable-2.11.2\\"},\\"labels\\":{\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-identity\\",\\"linkerd.io/workload-ns\\":\\"linkerd\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"identity\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-controller-namespace=linkerd\\",\\"-identity-trust-domain=cluster.local\\",\\"-identity-issuance-lifetime=24h0m0s\\",\\"-identity-clock-skew-allowance=20s\\",\\"-identity-scheme=kubernetes.io/tls\\",\\"-enable-pprof=false\\"],\\"env\\":[{\\"name\\":\\"LINKERD_DISABLED\\",\\"value\\":\\"linkerd-await cannot block the identity controller\\"}],\\"image\\":\\"cr.l5d.io/linkerd/controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9990},\\"initialDelaySeconds\\":10},\\"name\\":\\"identity\\",\\"ports\\":[{\\"containerPort\\":8080,\\"name\\":\\"grpc\\"},{\\"containerPort\\":9990,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9990}},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/identity/issuer\\",\\"name\\":\\"identity-issuer\\"},{\\"mountPath\\":\\"/var/run/linkerd/identity/trust-roots/\\",\\"name\\":\\"trust-roots\\"}]},{\\"env\\":[{\\"name\\":\\"_pod_name\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"_pod_ns\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}},{\\"name\\":\\"_pod_nodeName\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.nodeName\\"}}},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS\\",\\"value\\":\\"8080\\"},{\\"name\\":\\"LINKERD2_PROXY_LOG\\",\\"value\\":\\"warn,linkerd=info\\"},{\\"name\\":\\"LINKERD2_PROXY_LOG_FORMAT\\",\\"value\\":\\"plain\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_ADDR\\",\\"value\\":\\"linkerd-dst-headless.linkerd.svc.cluster.local.:8086\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_ADDR\\",\\"value\\":\\"linkerd-policy.linkerd.svc.cluster.local.:8090\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_WORKLOAD\\",\\"value\\":\\"$(_pod_ns):$(_pod_name)\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY\\",\\"value\\":\\"all-unauthenticated\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"100ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"1000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_CONTROL_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4190\\"},{\\"name\\":\\"LINKERD2_PROXY_ADMIN_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4191\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR\\",\\"value\\":\\"127.0.0.1:4140\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4143\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_IPS\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"status.podIPs\\"}}},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS\\",\\"value\\":\\"8080,9990\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES\\",\\"value\\":\\"svc.cluster.local.\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION\\",\\"value\\":\\"25,587,3306,4444,5432,6379,9300,11211\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_CONTEXT\\",\\"value\\":\\"{\\\\\\"ns\\\\\\":\\\\\\"$(_pod_ns)\\\\\\", \\\\\\"nodeName\\\\\\":\\\\\\"$(_pod_nodeName)\\\\\\"}\\\\n\\"},{\\"name\\":\\"_pod_sa\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.serviceAccountName\\"}}},{\\"name\\":\\"_l5d_ns\\",\\"value\\":\\"linkerd\\"},{\\"name\\":\\"_l5d_trustdomain\\",\\"value\\":\\"cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_DIR\\",\\"value\\":\\"/var/run/linkerd/identity/end-entity\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS\\",\\"valueFrom\\":{\\"configMapKeyRef\\":{\\"key\\":\\"ca-bundle.crt\\",\\"name\\":\\"linkerd-identity-trust-roots\\"}}},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TOKEN_FILE\\",\\"value\\":\\"/var/run/secrets/kubernetes.io/serviceaccount/token\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_ADDR\\",\\"value\\":\\"localhost.:8080\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_LOCAL_NAME\\",\\"value\\":\\"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_NAME\\",\\"value\\":\\"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"}],\\"image\\":\\"cr.l5d.io/linkerd/proxy:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/live\\",\\"port\\":4191},\\"initialDelaySeconds\\":10},\\"name\\":\\"linkerd-proxy\\",\\"ports\\":[{\\"containerPort\\":4143,\\"name\\":\\"linkerd-proxy\\"},{\\"containerPort\\":4191,\\"name\\":\\"linkerd-admin\\"}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":4191},\\"initialDelaySeconds\\":2},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsUser\\":2102},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/identity/end-entity\\",\\"name\\":\\"linkerd-identity-end-entity\\"}]}],\\"initContainers\\":[{\\"args\\":[\\"--incoming-proxy-port\\",\\"4143\\",\\"--outgoing-proxy-port\\",\\"4140\\",\\"--proxy-uid\\",\\"2102\\",\\"--inbound-ports-to-ignore\\",\\"4190,4191,4567,4568\\",\\"--outbound-ports-to-ignore\\",\\"443\\"],\\"image\\":\\"cr.l5d.io/linkerd/proxy-init:v1.5.3\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"linkerd-init\\",\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"50Mi\\"},\\"requests\\":{\\"cpu\\":\\"10m\\",\\"memory\\":\\"10Mi\\"}},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":true,\\"capabilities\\":{\\"add\\":[\\"NET_ADMIN\\",\\"NET_RAW\\"]},\\"privileged\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsNonRoot\\":false,\\"runAsUser\\":0},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/run\\",\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"linkerd-identity\\",\\"volumes\\":[{\\"name\\":\\"identity-issuer\\",\\"secret\\":{\\"secretName\\":\\"linkerd-identity-issuer\\"}},{\\"configMap\\":{\\"name\\":\\"linkerd-identity-trust-roots\\"},\\"name\\":\\"trust-roots\\"},{\\"emptyDir\\":{},\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"},{\\"emptyDir\\":{\\"medium\\":\\"Memory\\"},\\"name\\":\\"linkerd-identity-end-entity\\"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-identity",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-identity.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
            "linkerd.io/identity-mode": "default",
            "linkerd.io/proxy-version": "stable-2.11.2",
          },
          "labels": Object {
            "linkerd.io/control-plane-component": "identity",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-identity",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "identity",
                "-log-level=info",
                "-log-format=plain",
                "-controller-namespace=linkerd",
                "-identity-trust-domain=cluster.local",
                "-identity-issuance-lifetime=24h0m0s",
                "-identity-clock-skew-allowance=20s",
                "-identity-scheme=kubernetes.io/tls",
                "-enable-pprof=false",
              ],
              "env": Array [
                Object {
                  "name": "LINKERD_DISABLED",
                  "value": "linkerd-await cannot block the identity controller",
                },
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9990,
                },
                "initialDelaySeconds": 10,
              },
              "name": "identity",
              "ports": Array [
                Object {
                  "containerPort": 8080,
                  "name": "grpc",
                },
                Object {
                  "containerPort": 9990,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9990,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/identity/issuer",
                  "name": "identity-issuer",
                },
                Object {
                  "mountPath": "/var/run/linkerd/identity/trust-roots/",
                  "name": "trust-roots",
                },
              ],
            },
            Object {
              "env": Array [
                Object {
                  "name": "_pod_name",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "_pod_ns",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                Object {
                  "name": "_pod_nodeName",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS",
                  "value": "8080",
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "linkerd-dst-headless.linkerd.svc.cluster.local.:8086",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "linkerd-policy.linkerd.svc.cluster.local.:8090",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                Object {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8080,9990",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}
",
                },
                Object {
                  "name": "_pod_sa",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                Object {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                Object {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": Object {
                    "configMapKeyRef": Object {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "localhost.:8080",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": Array [
                Object {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                Object {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "443",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v1.5.3",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": Object {
                "limits": Object {
                  "cpu": "100m",
                  "memory": "50Mi",
                },
                "requests": Object {
                  "cpu": "10m",
                  "memory": "10Mi",
                },
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": true,
                "capabilities": Object {
                  "add": Array [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": false,
                "runAsUser": 0,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-identity",
          "volumes": Array [
            Object {
              "name": "identity-issuer",
              "secret": Object {
                "secretName": "linkerd-identity-issuer",
              },
            },
            Object {
              "configMap": Object {
                "name": "linkerd-identity-trust-roots",
              },
              "name": "trust-roots",
            },
            Object {
              "emptyDir": Object {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            Object {
              "emptyDir": Object {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUkrYUVCL0EzcmRkK0VDak5VYzhsYlF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3T0RFeE1EWTBNekl6V2hjTk1qTXdPREV4TURZME16SXpXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxwdU53cFZ2dEcvUkVoUXpCM1JiK1BvWU9iVTVOck5iSUJKTU4vNjlWY3FucnYweWQ0SQpjUllyWVIwMjJ5NE9UODk5THVtOHpiVGZDOGVPTXlnaFZ0akFwb0xzcWdtMkkwV3FIcVNtQ0NuR3l6cnJLbzNrCnNCODdsTmJDV1k2ekcvV0J4NFRpbFdsTzBiSDB5elM3NmRrR0d0eW1YNlFwLzdYV2kvMEUzblRhaWxYVHZ0M1kKcFpNTDhZREFQdjJtR1FHU0hhUkQxNG9LRTJDa2tEVm5mU0g4UU5Vd0sydys5cEY1aW82Q0oyTXRIeWhIZmF5NwpaUnBXK0hxLzYxVFhVTTVYR0hPNlpoZ0dLeWEzbnlseXhLa3lFR1QxUFZkMWtXUEhyQ0lXWjZoelArb3dZNzJXCm1NRklwbXJTNExDa0RTSVRBdW03RnpoMGZ0c2dJYmErUk9jQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBNVgvRnMwbXF0R1c4SjVhMVViTVFrTHpuazIzbzZCWkxhMnlydjBxbTYKSCtrdW5UWkVzMnAzUGR0SDJYeXVhVytrRDFmbmRyR2haRHErRkt2Qnc4ZDlmUERLMXBiVHU1RnprS1lrUU9CbwptajJtZVdJUjdMUlJ1UWFIbnJTd1BUQzNlbWtWRVpQMjBiaUNSclhpV3RLdWtaeEZyTmdrbXZwY0d1VWZPWlBUCkNmU0s1NzM4VXpUSVIzWWxHOXExdnVBbVcyQXNrYXNIbTE3M0ZLN2x2R3NwaE8wVTdRY3JFeEJiVmd0SUZ0Qk0KM0tJYktBZmg5VUs2aW1DNGpsazRlVFBicTZSTHlmNFJoK3Rwb3pWeTlmK295cDZ5eEVlUWwvMk5jNU1mQmxyOQp3MWtDUTczN2k0R1QzMXZmRDJST25JOU9ZZFMrV1VDSWs0dnlVL1l6eVdBawotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdW00M0NsVyswYjlFU0ZETUhkRnY0K2hnNXRUazJzMXNnRWt3My9yMVZ5cWV1L1RKCjNnaHhGaXRoSFRiYkxnNVB6MzB1NmJ6TnROOEx4NDR6S0NGVzJNQ21ndXlxQ2JZalJhb2VwS1lJS2NiTE91c3EKamVTd0h6dVUxc0paanJNYjlZSEhoT0tWYVU3UnNmVExOTHZwMlFZYTNLWmZwQ24vdGRhTC9RVGVkTnFLVmRPKwozZGlsa3d2eGdNQSsvYVlaQVpJZHBFUFhpZ29UWUtTUU5XZDlJZnhBMVRBcmJENzJrWG1Lam9Jbll5MGZLRWQ5CnJMdGxHbGI0ZXIvclZOZFF6bGNZYzdwbUdBWXJKcmVmS1hMRXFUSVFaUFU5VjNXUlk4ZXNJaFpucUhNLzZqQmoKdlphWXdVaW1hdExnc0tRTkloTUM2YnNYT0hSKzJ5QWh0cjVFNXdJREFRQUJBb0lCQUc4a0VaQUp1aTZVMWdJKwptTkVWOEp4d0JvVFdXbkRPa21hUU82RHJuYU9QZHY0YVd0WVJOa20vSnJBaDZkeTFENE5rMzdqY284MjJRdkYrCnBxUy82MlJneFdPNzcwckcySlJKYk9jL1RCS0x2dENyTGIxVm5tR2dSWVVhYkFXVVpaQ2hBKzhHbllnZ1F3YlMKSnVxVE5ELzdVYnhGT3pORkRucTdJczErUDVodFFzNlA2U1NFTEpMNG1hK3l2NGdETFIyZm5QbUZIZCtia0xlSwozb3Y5aE1nVjBRRHZCbVVVaFlnZS9icHJCc2ZMd2QxaXRlcHQxNXRGT1RpVWs2NnI1WlFkZlhDY1BmTGd3bExCCkc0MlZLSFovNkxEaTR2Q2U4cXpoVW9KYzExaFlnQnZWYks5WVk1MEJTL21tNllvZmROWjlvMmFKNDk5cjF6R1cKR1FHKzBTRUNnWUVBeGFvWlArZXU5OU1FZmVPU0FVRVV4Zy9udlJiOVhaSnBMazQ0N3RQd2lRbkRSVTUxZXZzVAo0dHhjeWxhYStBNFJNdlVPcURqVTNnUEdKN0lmckVjY3JJMXJZbkZFb2xXSVBiR0xCMWRTOWMzejhBYTJHdkVLCitLdFNTWVYvQ1B4MFlNUHRybXMydmdwQVluRTJGZWU0YjFvVlBiNDZNQTRRcWtnNWtkdzcrKzhDZ1lFQThYTmYKcC8xU2k0b1ZJT3ZseWxoSk52SjVKdXhTcmsxN0gvOFgvdWM1UngyS0J5SFNzRFNiQTEvMFk3Q29aSHJMYkQwTAo5OHJxekxGa1g5WHhENml1ZmU5MzE1OVo4L0Exb2w3OTMzSk1Vd2hTQXZTK1d4Uy9yVUczamdRMjJ4RWN3cThUCmwvTDZlR0dpM2tBU0R1SVRLUFFMemxlUTdXVVRHZnJndWZrWXJva0NnWUVBcHlSTGo0OGdrNnlhMnJ5cEJHaDgKNFhJbm1ld3J1SWtLYWI1NVEvSnhMZC9VZi9GMVE5VzFuaHFLV0FwZHBpMTIrNmplaVA3dGVRS2w5NEVXYVQ0RQprQ0JSVW4vRzhxSHl2NEEydUxGdGxDNWYvSElnWUsyOGdrT1VKRmsrNzJGU0kxVHAwWmdWUlNNMENFb0Uyd2NECkhSMkdZcHhOWmI4dTlsNTJWOUZyNDM4Q2dZRUF5cE02K1Uydm1NVmtUcmU4bHRVVnNGVWxVb1BLSnRWNDdQSncKWm53RzhXU1dMcit3N2dkazJ5TUJmelp6UWNKSXMrcFFCVGtwWUUyZzRrczBNaWdiSml2cEIyNTU0UkZ6WG1TRwphWmVTODhNeVU2cVZud004Z2hkMThtQVV5aDJFWE03WkNJNWltT2VKNXlBb1JuWmxEdUlhbWFlY1A2Q2lzeFJxCndYMTl1TWtDZ1lBaE1Dc2t3aWplbUtGcUd3SnBkeUJ5bWRsemhZcEhaYlN5cm96bEZ3bUpFeHhWVlViVTRSaUEKY1lQOUx4bFZFQ0dETnBCK3NXdnFBdmtEKzRyelRpMDk5OHhWYW93QkNzMVZ1VU9ZMUs4T0FWU3hBVys0dWh0dQpZUWtkN1dnUHB1RS9ybkhIdmNnV29nRnpSQVB0ZVFHRzNpM1dNODdPOVFsSk5PcXVGbDFWSGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUkrYUVCL0EzcmRkK0VDak5VYzhsYlF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3T0RFeE1EWTBNekl6V2hjTk1qTXdPREV4TURZME16SXpXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxwdU53cFZ2dEcvUkVoUXpCM1JiK1BvWU9iVTVOck5iSUJKTU4vNjlWY3FucnYweWQ0SQpjUllyWVIwMjJ5NE9UODk5THVtOHpiVGZDOGVPTXlnaFZ0akFwb0xzcWdtMkkwV3FIcVNtQ0NuR3l6cnJLbzNrCnNCODdsTmJDV1k2ekcvV0J4NFRpbFdsTzBiSDB5elM3NmRrR0d0eW1YNlFwLzdYV2kvMEUzblRhaWxYVHZ0M1kKcFpNTDhZREFQdjJtR1FHU0hhUkQxNG9LRTJDa2tEVm5mU0g4UU5Vd0sydys5cEY1aW82Q0oyTXRIeWhIZmF5NwpaUnBXK0hxLzYxVFhVTTVYR0hPNlpoZ0dLeWEzbnlseXhLa3lFR1QxUFZkMWtXUEhyQ0lXWjZoelArb3dZNzJXCm1NRklwbXJTNExDa0RTSVRBdW03RnpoMGZ0c2dJYmErUk9jQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBNVgvRnMwbXF0R1c4SjVhMVViTVFrTHpuazIzbzZCWkxhMnlydjBxbTYKSCtrdW5UWkVzMnAzUGR0SDJYeXVhVytrRDFmbmRyR2haRHErRkt2Qnc4ZDlmUERLMXBiVHU1RnprS1lrUU9CbwptajJtZVdJUjdMUlJ1UWFIbnJTd1BUQzNlbWtWRVpQMjBiaUNSclhpV3RLdWtaeEZyTmdrbXZwY0d1VWZPWlBUCkNmU0s1NzM4VXpUSVIzWWxHOXExdnVBbVcyQXNrYXNIbTE3M0ZLN2x2R3NwaE8wVTdRY3JFeEJiVmd0SUZ0Qk0KM0tJYktBZmg5VUs2aW1DNGpsazRlVFBicTZSTHlmNFJoK3Rwb3pWeTlmK295cDZ5eEVlUWwvMk5jNU1mQmxyOQp3MWtDUTczN2k0R1QzMXZmRDJST25JOU9ZZFMrV1VDSWs0dnlVL1l6eVdBawotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdW00M0NsVyswYjlFU0ZETUhkRnY0K2hnNXRUazJzMXNnRWt3My9yMVZ5cWV1L1RKCjNnaHhGaXRoSFRiYkxnNVB6MzB1NmJ6TnROOEx4NDR6S0NGVzJNQ21ndXlxQ2JZalJhb2VwS1lJS2NiTE91c3EKamVTd0h6dVUxc0paanJNYjlZSEhoT0tWYVU3UnNmVExOTHZwMlFZYTNLWmZwQ24vdGRhTC9RVGVkTnFLVmRPKwozZGlsa3d2eGdNQSsvYVlaQVpJZHBFUFhpZ29UWUtTUU5XZDlJZnhBMVRBcmJENzJrWG1Lam9Jbll5MGZLRWQ5CnJMdGxHbGI0ZXIvclZOZFF6bGNZYzdwbUdBWXJKcmVmS1hMRXFUSVFaUFU5VjNXUlk4ZXNJaFpucUhNLzZqQmoKdlphWXdVaW1hdExnc0tRTkloTUM2YnNYT0hSKzJ5QWh0cjVFNXdJREFRQUJBb0lCQUc4a0VaQUp1aTZVMWdJKwptTkVWOEp4d0JvVFdXbkRPa21hUU82RHJuYU9QZHY0YVd0WVJOa20vSnJBaDZkeTFENE5rMzdqY284MjJRdkYrCnBxUy82MlJneFdPNzcwckcySlJKYk9jL1RCS0x2dENyTGIxVm5tR2dSWVVhYkFXVVpaQ2hBKzhHbllnZ1F3YlMKSnVxVE5ELzdVYnhGT3pORkRucTdJczErUDVodFFzNlA2U1NFTEpMNG1hK3l2NGdETFIyZm5QbUZIZCtia0xlSwozb3Y5aE1nVjBRRHZCbVVVaFlnZS9icHJCc2ZMd2QxaXRlcHQxNXRGT1RpVWs2NnI1WlFkZlhDY1BmTGd3bExCCkc0MlZLSFovNkxEaTR2Q2U4cXpoVW9KYzExaFlnQnZWYks5WVk1MEJTL21tNllvZmROWjlvMmFKNDk5cjF6R1cKR1FHKzBTRUNnWUVBeGFvWlArZXU5OU1FZmVPU0FVRVV4Zy9udlJiOVhaSnBMazQ0N3RQd2lRbkRSVTUxZXZzVAo0dHhjeWxhYStBNFJNdlVPcURqVTNnUEdKN0lmckVjY3JJMXJZbkZFb2xXSVBiR0xCMWRTOWMzejhBYTJHdkVLCitLdFNTWVYvQ1B4MFlNUHRybXMydmdwQVluRTJGZWU0YjFvVlBiNDZNQTRRcWtnNWtkdzcrKzhDZ1lFQThYTmYKcC8xU2k0b1ZJT3ZseWxoSk52SjVKdXhTcmsxN0gvOFgvdWM1UngyS0J5SFNzRFNiQTEvMFk3Q29aSHJMYkQwTAo5OHJxekxGa1g5WHhENml1ZmU5MzE1OVo4L0Exb2w3OTMzSk1Vd2hTQXZTK1d4Uy9yVUczamdRMjJ4RWN3cThUCmwvTDZlR0dpM2tBU0R1SVRLUFFMemxlUTdXVVRHZnJndWZrWXJva0NnWUVBcHlSTGo0OGdrNnlhMnJ5cEJHaDgKNFhJbm1ld3J1SWtLYWI1NVEvSnhMZC9VZi9GMVE5VzFuaHFLV0FwZHBpMTIrNmplaVA3dGVRS2w5NEVXYVQ0RQprQ0JSVW4vRzhxSHl2NEEydUxGdGxDNWYvSElnWUsyOGdrT1VKRmsrNzJGU0kxVHAwWmdWUlNNMENFb0Uyd2NECkhSMkdZcHhOWmI4dTlsNTJWOUZyNDM4Q2dZRUF5cE02K1Uydm1NVmtUcmU4bHRVVnNGVWxVb1BLSnRWNDdQSncKWm53RzhXU1dMcit3N2dkazJ5TUJmelp6UWNKSXMrcFFCVGtwWUUyZzRrczBNaWdiSml2cEIyNTU0UkZ6WG1TRwphWmVTODhNeVU2cVZud004Z2hkMThtQVV5aDJFWE03WkNJNWltT2VKNXlBb1JuWmxEdUlhbWFlY1A2Q2lzeFJxCndYMTl1TWtDZ1lBaE1Dc2t3aWplbUtGcUd3SnBkeUJ5bWRsemhZcEhaYlN5cm96bEZ3bUpFeHhWVlViVTRSaUEKY1lQOUx4bFZFQ0dETnBCK3NXdnFBdmtEKzRyelRpMDk5OHhWYW93QkNzMVZ1VU9ZMUs4T0FWU3hBVys0dWh0dQpZUWtkN1dnUHB1RS9ybkhIdmNnV29nRnpSQVB0ZVFHRzNpM1dNODdPOVFsSk5PcXVGbDFWSGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-sp-validator-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-sp-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-sp-validator-k8s-tls.yaml",
    "type": "kubernetes.io/tls",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"heartbeat\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-heartbeat\\",\\"namespace\\":\\"linkerd\\"}}
",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-heartbeat.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "config.linkerd.io/opaque-ports": "443",
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"config.linkerd.io/opaque-ports\\":\\"443\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"proxy-injector\\",\\"port\\":443,\\"targetPort\\":\\"proxy-injector\\"}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-proxy-injector",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-proxy-injector.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-identity-headless\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"grpc\\",\\"port\\":8080,\\"targetPort\\":8080}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"identity\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-identity-headless",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-identity-headless.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-linkerd-destination\\"},\\"rules\\":[{\\"apiGroups\\":[\\"apps\\"],\\"resources\\":[\\"replicasets\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"batch\\"],\\"resources\\":[\\"jobs\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"pods\\",\\"endpoints\\",\\"services\\",\\"nodes\\",\\"namespaces\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"linkerd.io\\"],\\"resources\\":[\\"serviceprofiles\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"split.smi-spec.io\\"],\\"resources\\":[\\"trafficsplits\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]}]}
",
      },
      "name": "linkerd-linkerd-destination",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-destination.yaml",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQUpxemFWRDJFQjluK3hzS3ZxSHV1MzB3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa2JHbHVhMlZ5WkMxd2IyeHBZM2t0ZG1Gc2FXUmhkRzl5TG14cGJtdGxjbVF1YzNaagpNQjRYRFRJeU1EZ3hNVEEyTkRNeU0xb1hEVEl6TURneE1UQTJORE15TTFvd0x6RXRNQ3NHQTFVRUF4TWtiR2x1CmEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeAp3MTRGRzA0di9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLCm9lTXdnN0IzV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnMKUnJqY1lpeXphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWApnWUFEUGloT1JVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrCkRuck5yUFFTaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJvM0F3YmpBT0JnTlYKSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdMd1lEVlIwUkJDZ3dKb0lrYkdsdWEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwCmJtdGxjbVF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ3VvelhFMWJZMkR1VHZLdzcya1NoQVE0c2YKeiszZGlYdEhSbGpiYjNKZWIyNFRWOUVqZ1RybmhsYlpFaG8rcFA5ME5kQlIvQTRvVHdXQjdVUFFienp5eHQ5aApCcHZmVXQ1N1pyQ3hQdGs5RXJVdXR2T3EvU2NqNkNDd1VBUjZ4b2pybnJWQzNqY3ZIZEp0TXBNNlA3QnlQVUtxCjZ6c1dVcVExT0p6Tjg0czV6TDRoMG9YZDA5T0RXOC8rNWRFUVBOY1JXM2pHallvdHFoUnYzVm5aSVVYejZlTVcKaXVveFlrTDZNc2NyNHhGZkROOXBDVnkyVWIvV0JUSGVQd2ZHOGduaTVlR3ErMjNUWGFCbm1xd2V2aFNZcXQ5eQpOcm9rMzVVZlFHamI2WUFRUVdyQlRxa1diSDZ2WVpYVUYrZGEwL2JrVnFwbDNDZGpJdHhHaWV4bnUxS1oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeHcxNEZHMDR2Ci9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLb2VNd2c3QjMKV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnNScmpjWWl5egphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWGdZQURQaWhPClJVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrRG5yTnJQUVMKaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJBb0lCQVFDcEorTEtuVmZHRGJWNAozbCtTWjE1aGRYQ3hTSUNEaUFsUGRwN3F2SHg3OGI4NkRiWW5qeTR2eUYwY09tY3lOK0xxM2NjU29FT0pTMXc2CndNeDJYempnbUdOWDVYalZ6RkhtNDNGZmpSZ2RkVWUzRDV3cU9wMEpMVit2cXBrZDl4V1AzdlRFUlhxQVU2Z2oKNkdteVIrQ2FlenZ1T09jN3M2WW9xaCs0cmZWTDNKU1F3ajZxQTZTbnAybERydmhsSXZ3ZFRNaEs2dnh5Y2xLego1a1o1ZkxUeWtZamxydW1kNEhkWU1BdDE5S2doRXBkYkEwRVlsT2hGRisxcDRjOWRtT3FLTW5oVmhHdVR0L010ClZxT09UN0pPU2tZRUpsWlUrZXBYSjVpeTV0bDA5UFpYOGRGSUZrVjNLSlN2c3NxdThnM0d6R2hUajZrVzFYU2wKT2tuMG9LZUpBb0dCQVAyNXUxQ3l3anJpc1Z5bThNMlRiNGxEejZ6YlVZVmJUc1VNL2lCRGJyYTFoYVlGM0ZqZQpzdEVuWXFHK3JtQ3B0dnhMT3Z6VUhKVyttSzJUY2o5VTNDeG1uYmpyWFd6QkNZWVBCbHExQWNvOW9NYy9UclE5ClhUS3BLSDNOcEdJZTBSYXFscDhrLzlnUm5nbEIyZzVSQ0U5LzVtQm5Tc2Z2STZzaDNCUlpWQkp2QW9HQkFOQXQKUm12blpTUHpLby9lcjNlajVWZGZCN1ZzWEhHRmVCWlVRRkwvL3Bia2gxY2FGQVBpUlJLUC9zaVlYcXBXVkNHZApBbThsSmNnRHpvcGw0NFZwQ0xUVDVvWktxUExDK2IzSDVkQVpRV1VXdm5oOEIxejNYemNDZlpybkpJT0FoZEp1CkE4dC9XQ0p6Vms5U1BHSEJyVHgvbnZyRUR0MGhSbGtPKzBTTWphRVBBb0dBSmpVcTVQc1dUcUhHamFwQ0J1TVYKMzdqTGREOU9wbU5hbUVmZG1PUXVydXJrNWx4cGt5UnVEeHI4T2xrcGp6cmZhRnkzMUV6b3hRLy9rOXZwVDJvcgpBYkN1UGFPTDNRMndyblJpdzVRUVlmRW4zZmxGazlUTnpRdzJJY091NW11M2xzODNnVjJqL1ZpaDBNa08yaXNQCnNsRVRVeDhhM3NLL1AwMEpCRE56ZXBjQ2dZRUFoTS9OdEx1Y3NCSEwzcHVRVUlEVXFTZ3NqOWRCSnYraXZJUWwKd1k0bWkzZml6SFFMdnVxVmJLRkhTQXpGb0dDUkxoeXdWOTVZTzBJS2ZBdEMyM05HSmE5bXk5aEg3eERyS2VPbApQMTFOZGtQTFlxeW1PZTVyNVhtR1R0UVdYSHNiWlVQZzBldzllMFVnRkZ6L3Z0SkVSbXVaTHB6MGFxbDI2d3grCnk1M3NJWXNDZ1lFQTJJVFVlZFQvdElucTJpTXNrR2s2ZExxWnZNWDFsVG4rb0o3ZUZFR2xkUGxuVGlzTFBvZ1AKVWRyTzU4Z2xPRHU2Mk9Qbm05YTJlVEJqTHhHa2o0bGdBK0xGT3g2R2U3V2NnR2MvTmt3UWNOTWUvNHFiUThPKwo4QTkxZGRqdzl1NXVZVFN5a0VqVHpxR2FOeVViQi8waHhheXZXY3BCUm1sZXFNOU0zc09LODRFPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQUpxemFWRDJFQjluK3hzS3ZxSHV1MzB3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa2JHbHVhMlZ5WkMxd2IyeHBZM2t0ZG1Gc2FXUmhkRzl5TG14cGJtdGxjbVF1YzNaagpNQjRYRFRJeU1EZ3hNVEEyTkRNeU0xb1hEVEl6TURneE1UQTJORE15TTFvd0x6RXRNQ3NHQTFVRUF4TWtiR2x1CmEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeAp3MTRGRzA0di9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLCm9lTXdnN0IzV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnMKUnJqY1lpeXphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWApnWUFEUGloT1JVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrCkRuck5yUFFTaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJvM0F3YmpBT0JnTlYKSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdMd1lEVlIwUkJDZ3dKb0lrYkdsdWEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwCmJtdGxjbVF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ3VvelhFMWJZMkR1VHZLdzcya1NoQVE0c2YKeiszZGlYdEhSbGpiYjNKZWIyNFRWOUVqZ1RybmhsYlpFaG8rcFA5ME5kQlIvQTRvVHdXQjdVUFFienp5eHQ5aApCcHZmVXQ1N1pyQ3hQdGs5RXJVdXR2T3EvU2NqNkNDd1VBUjZ4b2pybnJWQzNqY3ZIZEp0TXBNNlA3QnlQVUtxCjZ6c1dVcVExT0p6Tjg0czV6TDRoMG9YZDA5T0RXOC8rNWRFUVBOY1JXM2pHallvdHFoUnYzVm5aSVVYejZlTVcKaXVveFlrTDZNc2NyNHhGZkROOXBDVnkyVWIvV0JUSGVQd2ZHOGduaTVlR3ErMjNUWGFCbm1xd2V2aFNZcXQ5eQpOcm9rMzVVZlFHamI2WUFRUVdyQlRxa1diSDZ2WVpYVUYrZGEwL2JrVnFwbDNDZGpJdHhHaWV4bnUxS1oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBemxQSG96bWRiWVo3ZUw0cVZRT0ovc2VIOXd4ZUtzQVN0bnVDUXBZeHcxNEZHMDR2Ci9xYzV0b1lGbXg5UnlwMExvUTRhVWtWMVpaRFNSNkExb0QvMHQzWDE5U2prbWF3Vng2SFF1eEdLb2VNd2c3QjMKV2Y4dFQxeExNSlN5UEVnL1lmMlFSdDZKa2pKVngzVHdoeXNyMFE4Sjl3SXJpQ3pvL1JoUGhqNnNScmpjWWl5egphR1RuT1BGNVFOci9ycjlqOThkYW5mMnVtTTZVdmRMMnBsMHVra3ZjQWQrbEY5aUVFMXBPRTUrWGdZQURQaWhPClJVWHFScUZidDRFT1JuVVRRSlQ1R3UxNmpPdVVjV3JhQ0NYNHRXUVFCKzdabWF0d0tqbFNJWTYrRG5yTnJQUVMKaTNPU283NUpXaTA1UjRONWlPVEpRbHA2RnhGcjdaazk5cWZqZ1FJREFRQUJBb0lCQVFDcEorTEtuVmZHRGJWNAozbCtTWjE1aGRYQ3hTSUNEaUFsUGRwN3F2SHg3OGI4NkRiWW5qeTR2eUYwY09tY3lOK0xxM2NjU29FT0pTMXc2CndNeDJYempnbUdOWDVYalZ6RkhtNDNGZmpSZ2RkVWUzRDV3cU9wMEpMVit2cXBrZDl4V1AzdlRFUlhxQVU2Z2oKNkdteVIrQ2FlenZ1T09jN3M2WW9xaCs0cmZWTDNKU1F3ajZxQTZTbnAybERydmhsSXZ3ZFRNaEs2dnh5Y2xLego1a1o1ZkxUeWtZamxydW1kNEhkWU1BdDE5S2doRXBkYkEwRVlsT2hGRisxcDRjOWRtT3FLTW5oVmhHdVR0L010ClZxT09UN0pPU2tZRUpsWlUrZXBYSjVpeTV0bDA5UFpYOGRGSUZrVjNLSlN2c3NxdThnM0d6R2hUajZrVzFYU2wKT2tuMG9LZUpBb0dCQVAyNXUxQ3l3anJpc1Z5bThNMlRiNGxEejZ6YlVZVmJUc1VNL2lCRGJyYTFoYVlGM0ZqZQpzdEVuWXFHK3JtQ3B0dnhMT3Z6VUhKVyttSzJUY2o5VTNDeG1uYmpyWFd6QkNZWVBCbHExQWNvOW9NYy9UclE5ClhUS3BLSDNOcEdJZTBSYXFscDhrLzlnUm5nbEIyZzVSQ0U5LzVtQm5Tc2Z2STZzaDNCUlpWQkp2QW9HQkFOQXQKUm12blpTUHpLby9lcjNlajVWZGZCN1ZzWEhHRmVCWlVRRkwvL3Bia2gxY2FGQVBpUlJLUC9zaVlYcXBXVkNHZApBbThsSmNnRHpvcGw0NFZwQ0xUVDVvWktxUExDK2IzSDVkQVpRV1VXdm5oOEIxejNYemNDZlpybkpJT0FoZEp1CkE4dC9XQ0p6Vms5U1BHSEJyVHgvbnZyRUR0MGhSbGtPKzBTTWphRVBBb0dBSmpVcTVQc1dUcUhHamFwQ0J1TVYKMzdqTGREOU9wbU5hbUVmZG1PUXVydXJrNWx4cGt5UnVEeHI4T2xrcGp6cmZhRnkzMUV6b3hRLy9rOXZwVDJvcgpBYkN1UGFPTDNRMndyblJpdzVRUVlmRW4zZmxGazlUTnpRdzJJY091NW11M2xzODNnVjJqL1ZpaDBNa08yaXNQCnNsRVRVeDhhM3NLL1AwMEpCRE56ZXBjQ2dZRUFoTS9OdEx1Y3NCSEwzcHVRVUlEVXFTZ3NqOWRCSnYraXZJUWwKd1k0bWkzZml6SFFMdnVxVmJLRkhTQXpGb0dDUkxoeXdWOTVZTzBJS2ZBdEMyM05HSmE5bXk5aEg3eERyS2VPbApQMTFOZGtQTFlxeW1PZTVyNVhtR1R0UVdYSHNiWlVQZzBldzllMFVnRkZ6L3Z0SkVSbXVaTHB6MGFxbDI2d3grCnk1M3NJWXNDZ1lFQTJJVFVlZFQvdElucTJpTXNrR2s2ZExxWnZNWDFsVG4rb0o3ZUZFR2xkUGxuVGlzTFBvZ1AKVWRyTzU4Z2xPRHU2Mk9Qbm05YTJlVEJqTHhHa2o0bGdBK0xGT3g2R2U3V2NnR2MvTmt3UWNOTWUvNHFiUThPKwo4QTkxZGRqdzl1NXVZVFN5a0VqVHpxR2FOeVViQi8waHhheXZXY3BCUm1sZXFNOU0zc09LODRFPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy-validator-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-policy-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-policy-validator-k8s-tls.yaml",
    "type": "kubernetes.io/tls",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-heartbeat\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"linkerd.io\\"],\\"resources\\":[\\"serviceprofiles\\"],\\"verbs\\":[\\"list\\"]}]}
",
      },
      "name": "linkerd-heartbeat",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-heartbeat.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-dst\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"grpc\\",\\"port\\":8086,\\"targetPort\\":8086}],\\"selector\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-dst",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-dst.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-linkerd-proxy-injector\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"events\\"],\\"verbs\\":[\\"create\\",\\"patch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\",\\"replicationcontrollers\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"pods\\"],\\"verbs\\":[\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"extensions\\",\\"apps\\"],\\"resources\\":[\\"deployments\\",\\"replicasets\\",\\"daemonsets\\",\\"statefulsets\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"extensions\\",\\"batch\\"],\\"resources\\":[\\"cronjobs\\",\\"jobs\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]}]}
",
      },
      "name": "linkerd-linkerd-proxy-injector",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-proxy-injector.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-destination-policy\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-policy\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"linkerd-destination\\",\\"namespace\\":\\"linkerd\\"}]}
",
      },
      "name": "linkerd-destination-policy",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-destination-policy.yaml",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"destination\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-destination\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-destination\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/config\\":\\"57f3ff6f5e13221b17df161b5575fa043a6a89b6cb522983674b6a476513f8a0\\",\\"config.linkerd.io/default-inbound-policy\\":\\"all-unauthenticated\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\",\\"linkerd.io/identity-mode\\":\\"default\\",\\"linkerd.io/proxy-version\\":\\"stable-2.11.2\\"},\\"labels\\":{\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/proxy-deployment\\":\\"linkerd-destination\\",\\"linkerd.io/workload-ns\\":\\"linkerd\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"_pod_name\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"_pod_ns\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}},{\\"name\\":\\"_pod_nodeName\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.nodeName\\"}}},{\\"name\\":\\"LINKERD2_PROXY_LOG\\",\\"value\\":\\"warn,linkerd=info\\"},{\\"name\\":\\"LINKERD2_PROXY_LOG_FORMAT\\",\\"value\\":\\"plain\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_ADDR\\",\\"value\\":\\"localhost.:8086\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_ADDR\\",\\"value\\":\\"localhost.:8090\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_WORKLOAD\\",\\"value\\":\\"$(_pod_ns):$(_pod_name)\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY\\",\\"value\\":\\"all-unauthenticated\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS\\",\\"value\\":\\"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"100ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT\\",\\"value\\":\\"1000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_CONTROL_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4190\\"},{\\"name\\":\\"LINKERD2_PROXY_ADMIN_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4191\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR\\",\\"value\\":\\"127.0.0.1:4140\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_LISTEN_ADDR\\",\\"value\\":\\"0.0.0.0:4143\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_IPS\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"status.podIPs\\"}}},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS\\",\\"value\\":\\"8086,8090,8443,9443,9990,9996,9997\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES\\",\\"value\\":\\"svc.cluster.local.\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE\\",\\"value\\":\\"10000ms\\"},{\\"name\\":\\"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION\\",\\"value\\":\\"25,587,3306,4444,5432,6379,9300,11211\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_CONTEXT\\",\\"value\\":\\"{\\\\\\"ns\\\\\\":\\\\\\"$(_pod_ns)\\\\\\", \\\\\\"nodeName\\\\\\":\\\\\\"$(_pod_nodeName)\\\\\\"}\\\\n\\"},{\\"name\\":\\"_pod_sa\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"spec.serviceAccountName\\"}}},{\\"name\\":\\"_l5d_ns\\",\\"value\\":\\"linkerd\\"},{\\"name\\":\\"_l5d_trustdomain\\",\\"value\\":\\"cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_DIR\\",\\"value\\":\\"/var/run/linkerd/identity/end-entity\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS\\",\\"valueFrom\\":{\\"configMapKeyRef\\":{\\"key\\":\\"ca-bundle.crt\\",\\"name\\":\\"linkerd-identity-trust-roots\\"}}},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_TOKEN_FILE\\",\\"value\\":\\"/var/run/secrets/kubernetes.io/serviceaccount/token\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_ADDR\\",\\"value\\":\\"linkerd-identity-headless.linkerd.svc.cluster.local.:8080\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_LOCAL_NAME\\",\\"value\\":\\"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_IDENTITY_SVC_NAME\\",\\"value\\":\\"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_DESTINATION_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"},{\\"name\\":\\"LINKERD2_PROXY_POLICY_SVC_NAME\\",\\"value\\":\\"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local\\"}],\\"image\\":\\"cr.l5d.io/linkerd/proxy:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"lifecycle\\":{\\"postStart\\":{\\"exec\\":{\\"command\\":[\\"/usr/lib/linkerd/linkerd-await\\",\\"--timeout=2m\\"]}}},\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/live\\",\\"port\\":4191},\\"initialDelaySeconds\\":10},\\"name\\":\\"linkerd-proxy\\",\\"ports\\":[{\\"containerPort\\":4143,\\"name\\":\\"linkerd-proxy\\"},{\\"containerPort\\":4191,\\"name\\":\\"linkerd-admin\\"}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":4191},\\"initialDelaySeconds\\":2},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsUser\\":2102},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/identity/end-entity\\",\\"name\\":\\"linkerd-identity-end-entity\\"}]},{\\"args\\":[\\"destination\\",\\"-addr=:8086\\",\\"-controller-namespace=linkerd\\",\\"-enable-h2-upgrade=true\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-enable-endpoint-slices=false\\",\\"-cluster-domain=cluster.local\\",\\"-identity-trust-domain=cluster.local\\",\\"-default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9996},\\"initialDelaySeconds\\":10},\\"name\\":\\"destination\\",\\"ports\\":[{\\"containerPort\\":8086,\\"name\\":\\"grpc\\"},{\\"containerPort\\":9996,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9996}},\\"securityContext\\":{\\"runAsUser\\":2103}},{\\"args\\":[\\"sp-validator\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9997},\\"initialDelaySeconds\\":10},\\"name\\":\\"sp-validator\\",\\"ports\\":[{\\"containerPort\\":8443,\\"name\\":\\"sp-validator\\"},{\\"containerPort\\":9997,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9997}},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/tls\\",\\"name\\":\\"sp-tls\\",\\"readOnly\\":true}]},{\\"args\\":[\\"--admin-addr=0.0.0.0:9990\\",\\"--control-plane-namespace=linkerd\\",\\"--grpc-addr=0.0.0.0:8090\\",\\"--server-addr=0.0.0.0:9443\\",\\"--server-tls-key=/var/run/linkerd/tls/tls.key\\",\\"--server-tls-certs=/var/run/linkerd/tls/tls.crt\\",\\"--cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\",\\"--identity-domain=cluster.local\\",\\"--default-policy=all-unauthenticated\\",\\"--log-level=linkerd=info,warn\\",\\"--log-format=plain\\"],\\"image\\":\\"cr.l5d.io/linkerd/policy-controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/live\\",\\"port\\":\\"admin\\"}},\\"name\\":\\"policy\\",\\"ports\\":[{\\"containerPort\\":8090,\\"name\\":\\"grpc\\"},{\\"containerPort\\":9990,\\"name\\":\\"admin\\"},{\\"containerPort\\":9443,\\"name\\":\\"policy-https\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":\\"admin\\"},\\"initialDelaySeconds\\":10},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/tls\\",\\"name\\":\\"policy-tls\\",\\"readOnly\\":true}]}],\\"initContainers\\":[{\\"args\\":[\\"--incoming-proxy-port\\",\\"4143\\",\\"--outgoing-proxy-port\\",\\"4140\\",\\"--proxy-uid\\",\\"2102\\",\\"--inbound-ports-to-ignore\\",\\"4190,4191,4567,4568\\",\\"--outbound-ports-to-ignore\\",\\"443\\"],\\"image\\":\\"cr.l5d.io/linkerd/proxy-init:v1.5.3\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"linkerd-init\\",\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"50Mi\\"},\\"requests\\":{\\"cpu\\":\\"10m\\",\\"memory\\":\\"10Mi\\"}},\\"securityContext\\":{\\"allowPrivilegeEscalation\\":true,\\"capabilities\\":{\\"add\\":[\\"NET_ADMIN\\",\\"NET_RAW\\"]},\\"privileged\\":false,\\"readOnlyRootFilesystem\\":true,\\"runAsNonRoot\\":false,\\"runAsUser\\":0},\\"terminationMessagePolicy\\":\\"FallbackToLogsOnError\\",\\"volumeMounts\\":[{\\"mountPath\\":\\"/run\\",\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"linkerd-destination\\",\\"volumes\\":[{\\"name\\":\\"sp-tls\\",\\"secret\\":{\\"secretName\\":\\"linkerd-sp-validator-k8s-tls\\"}},{\\"name\\":\\"policy-tls\\",\\"secret\\":{\\"secretName\\":\\"linkerd-policy-validator-k8s-tls\\"}},{\\"emptyDir\\":{},\\"name\\":\\"linkerd-proxy-init-xtables-lock\\"},{\\"emptyDir\\":{\\"medium\\":\\"Memory\\"},\\"name\\":\\"linkerd-identity-end-entity\\"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-destination",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-destination.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/config": "57f3ff6f5e13221b17df161b5575fa043a6a89b6cb522983674b6a476513f8a0",
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
            "linkerd.io/identity-mode": "default",
            "linkerd.io/proxy-version": "stable-2.11.2",
          },
          "labels": Object {
            "linkerd.io/control-plane-component": "destination",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-destination",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "_pod_name",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "_pod_ns",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                Object {
                  "name": "_pod_nodeName",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                Object {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "localhost.:8086",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "localhost.:8090",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                Object {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8086,8090,8443,9443,9990,9996,9997",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                Object {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}
",
                },
                Object {
                  "name": "_pod_sa",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                Object {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                Object {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": Object {
                    "configMapKeyRef": Object {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "linkerd-identity-headless.linkerd.svc.cluster.local.:8080",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                Object {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": Object {
                "postStart": Object {
                  "exec": Object {
                    "command": Array [
                      "/usr/lib/linkerd/linkerd-await",
                      "--timeout=2m",
                    ],
                  },
                },
              },
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": Array [
                Object {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                Object {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
              ],
            },
            Object {
              "args": Array [
                "destination",
                "-addr=:8086",
                "-controller-namespace=linkerd",
                "-enable-h2-upgrade=true",
                "-log-level=info",
                "-log-format=plain",
                "-enable-endpoint-slices=false",
                "-cluster-domain=cluster.local",
                "-identity-trust-domain=cluster.local",
                "-default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9996,
                },
                "initialDelaySeconds": 10,
              },
              "name": "destination",
              "ports": Array [
                Object {
                  "containerPort": 8086,
                  "name": "grpc",
                },
                Object {
                  "containerPort": 9996,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9996,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
            },
            Object {
              "args": Array [
                "sp-validator",
                "-log-level=info",
                "-log-format=plain",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9997,
                },
                "initialDelaySeconds": 10,
              },
              "name": "sp-validator",
              "ports": Array [
                Object {
                  "containerPort": 8443,
                  "name": "sp-validator",
                },
                Object {
                  "containerPort": 9997,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9997,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "sp-tls",
                  "readOnly": true,
                },
              ],
            },
            Object {
              "args": Array [
                "--admin-addr=0.0.0.0:9990",
                "--control-plane-namespace=linkerd",
                "--grpc-addr=0.0.0.0:8090",
                "--server-addr=0.0.0.0:9443",
                "--server-tls-key=/var/run/linkerd/tls/tls.key",
                "--server-tls-certs=/var/run/linkerd/tls/tls.crt",
                "--cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                "--identity-domain=cluster.local",
                "--default-policy=all-unauthenticated",
                "--log-level=linkerd=info,warn",
                "--log-format=plain",
              ],
              "image": "cr.l5d.io/linkerd/policy-controller:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/live",
                  "port": "admin",
                },
              },
              "name": "policy",
              "ports": Array [
                Object {
                  "containerPort": 8090,
                  "name": "grpc",
                },
                Object {
                  "containerPort": 9990,
                  "name": "admin",
                },
                Object {
                  "containerPort": 9443,
                  "name": "policy-https",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": "admin",
                },
                "initialDelaySeconds": 10,
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "policy-tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "initContainers": Array [
            Object {
              "args": Array [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "443",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v1.5.3",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": Object {
                "limits": Object {
                  "cpu": "100m",
                  "memory": "50Mi",
                },
                "requests": Object {
                  "cpu": "10m",
                  "memory": "10Mi",
                },
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": true,
                "capabilities": Object {
                  "add": Array [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": false,
                "runAsUser": 0,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-destination",
          "volumes": Array [
            Object {
              "name": "sp-tls",
              "secret": Object {
                "secretName": "linkerd-sp-validator-k8s-tls",
              },
            },
            Object {
              "name": "policy-tls",
              "secret": Object {
                "secretName": "linkerd-policy-validator-k8s-tls",
              },
            },
            Object {
              "emptyDir": Object {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            Object {
              "emptyDir": Object {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"linkerd.io/control-plane-component\\":\\"destination\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-policy\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"pods\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]},{\\"apiGroups\\":[\\"policy.linkerd.io\\"],\\"resources\\":[\\"servers\\",\\"serverauthorizations\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]}]}
",
      },
      "name": "linkerd-policy",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-policy.yaml",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUxsUXVZVlBqeVo1N0dhcWgzWXFJM3d3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBNE1URXdOalF6TWpOYUZ3MHlNekE0TVRFd05qUXpNak5hTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRRGduL3ZacVo4NGdEVWhuRG9OdEQxYU1zZXBReFFhTnRDcWdWR3lIOFZSZm9ySwpXMTdRcko0M2lvd3JvVXUzaWpQY3JPZnlQdFZxOWZSMXNlSCtBenY1WlFpczRQYUlNUFZ1b1AxV3ArK3pPTVpyCmJydE01TzNIdUNCcmVXYTRaU2ZoeXRkNDhxMzhEdTVnQ1I4WFByKzUwQU5BN2FVaUYxaG9uK3MycUVMbHY3b0UKL01FblR5eUhIUWhzNWFkajVMdWR3bXpBTXI1cGo4ZGlXc2d4WThLc0owYU8zVGJIUmJXTkRZTU9MZFNzZ3pFKwoxRmsxdTdMSWljRG9GQm1oRENZZVZzTURLYTV4Znk4TVUrU1FxVEpKVHRiUXNBTzdiQU5KTW9mMnJEZUhTeTU3CnhSRFBTczZNTjU2MXNadVdHaHdJQmpzZHZCMU5UcXp3ZFo4ekhjNWpBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ0NHNaNlNnclRSK01xbExON3F3bW9kMXplTkF1dDh6Q3IKYkc3NEhpdktIZ1Zhb3JwOUp1SlJKU0VEUlVQLzdocmNMd0pjRUlMTllGZHhmalpKYllBMUFnSmZkdUt2WDM0Ygo1SC9hc05QRkVzSTdIOWw0cmY3TDVHbjJ6QWlBR1k4WFpKcXpxclE0eGIrdWE0V3p1VGQ2VHRoSm9pMU96UTBNCnh3UWRFbHVBWTNYVzJZV2VrYzJub0FiRlFvNCtQK3VVcHg1NE8wY0NCa0xCM2NuSmtzZ2RRejViektXVzFITUkKQmRQekN3c0xTK1dPK2doTWRWSkVuV3hWY1krNTZpRjNCM2FQWG9WL01RNU56WEs5c2FBNVZhYWJKbjVYd2FqRAplR1l4QlJvZ0R2ZTNnaWwwbERDbnVxMHZZZFp2aktDd2dwRUxhaVBWS1dnZmxYcVR1bFVWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNEovNzJhbWZPSUExSVp3NkRiUTlXakxIcVVNVUdqYlFxb0ZSc2gvRlVYNkt5bHRlCjBLeWVONHFNSzZGTHQ0b3ozS3puOGo3VmF2WDBkYkhoL2dNNytXVUlyT0QyaUREMWJxRDlWcWZ2c3pqR2EyNjcKVE9UdHg3Z2dhM2xtdUdVbjRjclhlUEt0L0E3dVlBa2ZGejYvdWRBRFFPMmxJaGRZYUovck5xaEM1Yis2QlB6QgpKMDhzaHgwSWJPV25ZK1M3bmNKc3dESythWS9IWWxySU1XUENyQ2RHanQwMngwVzFqUTJERGkzVXJJTXhQdFJaCk5idXl5SW5BNkJRWm9Rd21IbGJEQXltdWNYOHZERlBra0treVNVN1cwTEFEdTJ3RFNUS0g5cXczaDBzdWU4VVEKejByT2pEZWV0YkdibGhvY0NBWTdIYndkVFU2czhIV2ZNeDNPWXdJREFRQUJBb0lCQUFyYTBGSFpaNDlVYXJ6ZwpEdElndHFKSU4rdlBDUWFuUlhnbjNhbk03VDBkNzFrT0IwdndPNGtWa2VaOTJlblpyTjNxSVI5TXVBVitNejBJCnhwSCsyQVFhUk13TjV2djMyYlJwNVRRdDAyQ0d5dGZnTnY3bFJUUlVpb1NIRGxhMDFMT05tTklJY0MzeERzWG4KU3ZCVm9QQTZ4QjE4SG5IQ1RReHBSZldUTmdCaUowYzE4UmNxMUViR2wvQUZHckIrMTZCZEdWK2dpOTR6MDNHaQo5R0ZkZHNPQTdRdzFsSk9iaDZ3OVhqZFZOU0l6dC9FbSs4eEd3VHdpaC9IQkZVQ2hib1g3djhQMUZtT0wwN1B2CitBd2NBTWJiNDN2c2F0TFlJVDc0SDR6U2xWZ29raG5zVDlaellwRkV4WWxsTktFQ3pOVjlQQXdDWVBZYmJvc3gKYzFrQVdIRUNnWUVBL0ZxejFnSUVQT1Z2OEJ6YXJ5bFVIUnJWSEt6WTdyeWc5Q0VzZ2ZSRDhoRU5zN3l6aWtEQQpVaXI4U2czaXpONldzNldCMkxxTVBpWGlaMlc2ek8wZEFobTNUNVFtRkx6NGdSMUt0OURGZmVaSTlyeTAwNExDCjFtU01uMlJHRlFtTHBoL3U0Mk5KeWN2RGp1TjRUajhua1hmNlhCenljWlVKdU1JWDUvQ1dueXNDZ1lFQTQ5NjYKWW5KK3k1eVlHZlhvOWxJMHlFa25OZjBNRnhKbllHNzdMNmtNdWt4a241VHJ4YytxdGU3TGxveS9aS1lxWmNOeApUYkpabkFLZlFvZUZIR00wOSs0aERDYnNJWFJUcHo1Y01UQm40SFBJVlUxTTJjb0EzMTJnU2ZzUlU2aXRmRnIrCnNjUURoZDc3Sm9XZFNwTGtLbGpwamVoQ3d3cWJaS2FsblRIbXNha0NnWUVBNC9JU1M1ZGF1SjhPODdjOG1jZ2QKSUlVaVIxcWlRVlBGbDM5M3NwTXY1TEllekdJQlV6cVYvaUt4N1RxSnlVQ3VvK3MyVk14ODdZNU82ZExzWHpzMwpYclJYN3R3Rlllb29Gb2ljKzFqcmE0UGVHSEh3YkxYS3hObmlZLyt4aGtNdkQ0bjh3UXpvbEEwb3dpTWFncU50ClhHc2hqSjdoS0ZQVmlqeFlWN3ZzY2kwQ2dZRUE0c0hsRmt5NzB1RU5GMkI0S0k4YnlXZktwbFlmYnVJNGoyVkIKZjJjcHJFYVRKNTdwbFJxWDFaNUJhSnE5WjJwWDdKYTJMTXhia2YybUFHMmR6K2NGY2VlOWFUdGVaZGc5MnNNYQp1VFJqV3ArOWJ1MlNtWFFFdEVLV1hLaUUwSXlkdjQ5SnZ4ckJLcm4va1pFTE9vZThtRXVNZDFQM0ErS05TbmJ2CmZlT0huNmtDZ1lFQXcrU3hManc3OWpFUjBWRzJrSTBaZkRCaXF6cEVjMmVyRkZOaFBnZGszSWtHSkZEZkF5S00KTEE4dEdWNDNkaEtpNWJtUytzeVMwYy8vQWJVTXBwbDVWb0tZekRhMjN4RkpPU1dEOXZYUkdXcXBMVVRwaXpEaQppVDdyQ253V253WHJ0YURBaUk5RE1zRU9mT2hKc1E0SGF0N0ZhQ2FLY0o1ak9SVDYzZ2Z6cXJRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUxsUXVZVlBqeVo1N0dhcWgzWXFJM3d3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBNE1URXdOalF6TWpOYUZ3MHlNekE0TVRFd05qUXpNak5hTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRRGduL3ZacVo4NGdEVWhuRG9OdEQxYU1zZXBReFFhTnRDcWdWR3lIOFZSZm9ySwpXMTdRcko0M2lvd3JvVXUzaWpQY3JPZnlQdFZxOWZSMXNlSCtBenY1WlFpczRQYUlNUFZ1b1AxV3ArK3pPTVpyCmJydE01TzNIdUNCcmVXYTRaU2ZoeXRkNDhxMzhEdTVnQ1I4WFByKzUwQU5BN2FVaUYxaG9uK3MycUVMbHY3b0UKL01FblR5eUhIUWhzNWFkajVMdWR3bXpBTXI1cGo4ZGlXc2d4WThLc0owYU8zVGJIUmJXTkRZTU9MZFNzZ3pFKwoxRmsxdTdMSWljRG9GQm1oRENZZVZzTURLYTV4Znk4TVUrU1FxVEpKVHRiUXNBTzdiQU5KTW9mMnJEZUhTeTU3CnhSRFBTczZNTjU2MXNadVdHaHdJQmpzZHZCMU5UcXp3ZFo4ekhjNWpBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ0NHNaNlNnclRSK01xbExON3F3bW9kMXplTkF1dDh6Q3IKYkc3NEhpdktIZ1Zhb3JwOUp1SlJKU0VEUlVQLzdocmNMd0pjRUlMTllGZHhmalpKYllBMUFnSmZkdUt2WDM0Ygo1SC9hc05QRkVzSTdIOWw0cmY3TDVHbjJ6QWlBR1k4WFpKcXpxclE0eGIrdWE0V3p1VGQ2VHRoSm9pMU96UTBNCnh3UWRFbHVBWTNYVzJZV2VrYzJub0FiRlFvNCtQK3VVcHg1NE8wY0NCa0xCM2NuSmtzZ2RRejViektXVzFITUkKQmRQekN3c0xTK1dPK2doTWRWSkVuV3hWY1krNTZpRjNCM2FQWG9WL01RNU56WEs5c2FBNVZhYWJKbjVYd2FqRAplR1l4QlJvZ0R2ZTNnaWwwbERDbnVxMHZZZFp2aktDd2dwRUxhaVBWS1dnZmxYcVR1bFVWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNEovNzJhbWZPSUExSVp3NkRiUTlXakxIcVVNVUdqYlFxb0ZSc2gvRlVYNkt5bHRlCjBLeWVONHFNSzZGTHQ0b3ozS3puOGo3VmF2WDBkYkhoL2dNNytXVUlyT0QyaUREMWJxRDlWcWZ2c3pqR2EyNjcKVE9UdHg3Z2dhM2xtdUdVbjRjclhlUEt0L0E3dVlBa2ZGejYvdWRBRFFPMmxJaGRZYUovck5xaEM1Yis2QlB6QgpKMDhzaHgwSWJPV25ZK1M3bmNKc3dESythWS9IWWxySU1XUENyQ2RHanQwMngwVzFqUTJERGkzVXJJTXhQdFJaCk5idXl5SW5BNkJRWm9Rd21IbGJEQXltdWNYOHZERlBra0treVNVN1cwTEFEdTJ3RFNUS0g5cXczaDBzdWU4VVEKejByT2pEZWV0YkdibGhvY0NBWTdIYndkVFU2czhIV2ZNeDNPWXdJREFRQUJBb0lCQUFyYTBGSFpaNDlVYXJ6ZwpEdElndHFKSU4rdlBDUWFuUlhnbjNhbk03VDBkNzFrT0IwdndPNGtWa2VaOTJlblpyTjNxSVI5TXVBVitNejBJCnhwSCsyQVFhUk13TjV2djMyYlJwNVRRdDAyQ0d5dGZnTnY3bFJUUlVpb1NIRGxhMDFMT05tTklJY0MzeERzWG4KU3ZCVm9QQTZ4QjE4SG5IQ1RReHBSZldUTmdCaUowYzE4UmNxMUViR2wvQUZHckIrMTZCZEdWK2dpOTR6MDNHaQo5R0ZkZHNPQTdRdzFsSk9iaDZ3OVhqZFZOU0l6dC9FbSs4eEd3VHdpaC9IQkZVQ2hib1g3djhQMUZtT0wwN1B2CitBd2NBTWJiNDN2c2F0TFlJVDc0SDR6U2xWZ29raG5zVDlaellwRkV4WWxsTktFQ3pOVjlQQXdDWVBZYmJvc3gKYzFrQVdIRUNnWUVBL0ZxejFnSUVQT1Z2OEJ6YXJ5bFVIUnJWSEt6WTdyeWc5Q0VzZ2ZSRDhoRU5zN3l6aWtEQQpVaXI4U2czaXpONldzNldCMkxxTVBpWGlaMlc2ek8wZEFobTNUNVFtRkx6NGdSMUt0OURGZmVaSTlyeTAwNExDCjFtU01uMlJHRlFtTHBoL3U0Mk5KeWN2RGp1TjRUajhua1hmNlhCenljWlVKdU1JWDUvQ1dueXNDZ1lFQTQ5NjYKWW5KK3k1eVlHZlhvOWxJMHlFa25OZjBNRnhKbllHNzdMNmtNdWt4a241VHJ4YytxdGU3TGxveS9aS1lxWmNOeApUYkpabkFLZlFvZUZIR00wOSs0aERDYnNJWFJUcHo1Y01UQm40SFBJVlUxTTJjb0EzMTJnU2ZzUlU2aXRmRnIrCnNjUURoZDc3Sm9XZFNwTGtLbGpwamVoQ3d3cWJaS2FsblRIbXNha0NnWUVBNC9JU1M1ZGF1SjhPODdjOG1jZ2QKSUlVaVIxcWlRVlBGbDM5M3NwTXY1TEllekdJQlV6cVYvaUt4N1RxSnlVQ3VvK3MyVk14ODdZNU82ZExzWHpzMwpYclJYN3R3Rlllb29Gb2ljKzFqcmE0UGVHSEh3YkxYS3hObmlZLyt4aGtNdkQ0bjh3UXpvbEEwb3dpTWFncU50ClhHc2hqSjdoS0ZQVmlqeFlWN3ZzY2kwQ2dZRUE0c0hsRmt5NzB1RU5GMkI0S0k4YnlXZktwbFlmYnVJNGoyVkIKZjJjcHJFYVRKNTdwbFJxWDFaNUJhSnE5WjJwWDdKYTJMTXhia2YybUFHMmR6K2NGY2VlOWFUdGVaZGc5MnNNYQp1VFJqV3ArOWJ1MlNtWFFFdEVLV1hLaUUwSXlkdjQ5SnZ4ckJLcm4va1pFTE9vZThtRXVNZDFQM0ErS05TbmJ2CmZlT0huNmtDZ1lFQXcrU3hManc3OWpFUjBWRzJrSTBaZkRCaXF6cEVjMmVyRkZOaFBnZGszSWtHSkZEZkF5S00KTEE4dEdWNDNkaEtpNWJtUytzeVMwYy8vQWJVTXBwbDVWb0tZekRhMjN4RkpPU1dEOXZYUkdXcXBMVVRwaXpEaQppVDdyQ253V253WHJ0YURBaUk5RE1zRU9mT2hKc1E0SGF0N0ZhQ2FLY0o1ak9SVDYzZ2Z6cXJRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector-k8s-tls\\",\\"namespace\\":\\"linkerd\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-proxy-injector-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-proxy-injector-k8s-tls.yaml",
    "type": "kubernetes.io/tls",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-heartbeat\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-heartbeat\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"linkerd-heartbeat\\",\\"namespace\\":\\"linkerd\\"}]}
",
      },
      "name": "linkerd-heartbeat",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-heartbeat.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"proxy-injector\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-proxy-injector\\",\\"namespace\\":\\"linkerd\\"}}
",
      },
      "name": "linkerd-proxy-injector",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-proxy-injector.yaml",
  },
  Object {
    "apiVersion": "batch/v1beta1",
    "kind": "CronJob",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"batch/v1beta1\\",\\"kind\\":\\"CronJob\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"heartbeat\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"linkerd.io/control-plane-component\\":\\"heartbeat\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-heartbeat\\",\\"namespace\\":\\"linkerd\\"},\\"spec\\":{\\"concurrencyPolicy\\":\\"Replace\\",\\"jobTemplate\\":{\\"spec\\":{\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"linkerd.io/control-plane-component\\":\\"heartbeat\\",\\"linkerd.io/workload-ns\\":\\"linkerd\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"heartbeat\\",\\"-controller-namespace=linkerd\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090\\"],\\"env\\":[{\\"name\\":\\"LINKERD_DISABLED\\",\\"value\\":\\"the heartbeat controller does not use the proxy\\"}],\\"image\\":\\"cr.l5d.io/linkerd/controller:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"name\\":\\"heartbeat\\",\\"securityContext\\":{\\"runAsUser\\":2103}}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"restartPolicy\\":\\"Never\\",\\"serviceAccountName\\":\\"linkerd-heartbeat\\"}}}},\\"schedule\\":\\"53 06 * * *\\",\\"successfulJobsHistoryLimit\\":0}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/batch_v1beta1-cronjob-linkerd-linkerd-heartbeat.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"identity\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-identity\\",\\"namespace\\":\\"linkerd\\"}}
",
      },
      "name": "linkerd-identity",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-identity.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"disabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"config.linkerd.io/admission-webhooks\\":\\"disabled\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\",\\"linkerd.io/is-control-plane\\":\\"true\\"},\\"name\\":\\"linkerd\\"}}
",
        "linkerd.io/inject": "disabled",
      },
      "name": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/v1-namespace-default-linkerd.yaml",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "values": "clusterDomain: cluster.local
clusterNetworks: 10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
cniEnabled: false
controlPlaneTracing: false
controlPlaneTracingNamespace: linkerd-jaeger
controllerImage: cr.l5d.io/linkerd/controller
controllerLogFormat: plain
controllerLogLevel: info
controllerReplicas: 1
controllerUID: 2103
debugContainer:
  image:
    name: cr.l5d.io/linkerd/debug
    pullPolicy: \\"\\"
    version: \\"\\"
disableHeartBeat: false
enableEndpointSlices: false
enableH2Upgrade: true
enablePSP: false
enablePprof: false
identity:
  externalCA: true
  issuer:
    clockSkewAllowance: 20s
    issuanceLifetime: 24h0m0s
    scheme: kubernetes.io/tls
    tls:
      crtPEM: \\"\\"
identityTrustAnchorsPEM: \\"\\"
identityTrustDomain: cluster.local
imagePullPolicy: IfNotPresent
imagePullSecrets: []
installNamespace: true
linkerdVersion: stable-2.11.2
namespace: linkerd
nodeSelector:
  kubernetes.io/os: linux
podAnnotations: {}
podLabels: {}
policyController:
  defaultAllowPolicy: all-unauthenticated
  image:
    name: cr.l5d.io/linkerd/policy-controller
    pullPolicy: \\"\\"
    version: \\"\\"
  logLevel: linkerd=info,warn
  resources:
    cpu:
      limit: \\"\\"
      request: \\"\\"
    memory:
      limit: \\"\\"
      request: \\"\\"
policyValidator:
  caBundle: \\"\\"
  crtPEM: \\"\\"
  externalSecret: false
  keyPEM: \\"\\"
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
profileValidator:
  caBundle: \\"\\"
  crtPEM: \\"\\"
  externalSecret: false
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
proxy:
  await: true
  cores: 0
  enableExternalProfiles: false
  image:
    name: cr.l5d.io/linkerd/proxy
    pullPolicy: \\"\\"
    version: \\"\\"
  inboundConnectTimeout: 100ms
  logFormat: plain
  logLevel: warn,linkerd=info
  opaquePorts: 25,587,3306,4444,5432,6379,9300,11211
  outboundConnectTimeout: 1000ms
  ports:
    admin: 4191
    control: 4190
    inbound: 4143
    outbound: 4140
  requireIdentityOnInboundPorts: \\"\\"
  resources:
    cpu:
      limit: \\"\\"
      request: \\"\\"
    memory:
      limit: \\"\\"
      request: \\"\\"
  uid: 2102
  waitBeforeExitSeconds: 0
proxyInit:
  closeWaitTimeoutSecs: 0
  ignoreInboundPorts: 4567,4568
  ignoreOutboundPorts: 4567,4568
  image:
    name: cr.l5d.io/linkerd/proxy-init
    pullPolicy: \\"\\"
    version: v1.5.3
  logFormat: \\"\\"
  logLevel: \\"\\"
  resources:
    cpu:
      limit: 100m
      request: 10m
    memory:
      limit: 50Mi
      request: 10Mi
  runAsRoot: true
  skipSubnets: \\"\\"
  xtMountPath:
    mountPath: /run
    name: linkerd-proxy-init-xtables-lock
proxyInjector:
  caBundle: \\"\\"
  crtPEM: \\"\\"
  externalSecret: false
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
webhookFailurePolicy: Ignore
",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"values\\":\\"clusterDomain: cluster.local\\\\nclusterNetworks: 10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\\\ncniEnabled: false\\\\ncontrolPlaneTracing: false\\\\ncontrolPlaneTracingNamespace: linkerd-jaeger\\\\ncontrollerImage: cr.l5d.io/linkerd/controller\\\\ncontrollerLogFormat: plain\\\\ncontrollerLogLevel: info\\\\ncontrollerReplicas: 1\\\\ncontrollerUID: 2103\\\\ndebugContainer:\\\\n  image:\\\\n    name: cr.l5d.io/linkerd/debug\\\\n    pullPolicy: \\\\\\"\\\\\\"\\\\n    version: \\\\\\"\\\\\\"\\\\ndisableHeartBeat: false\\\\nenableEndpointSlices: false\\\\nenableH2Upgrade: true\\\\nenablePSP: false\\\\nenablePprof: false\\\\nidentity:\\\\n  externalCA: true\\\\n  issuer:\\\\n    clockSkewAllowance: 20s\\\\n    issuanceLifetime: 24h0m0s\\\\n    scheme: kubernetes.io/tls\\\\n    tls:\\\\n      crtPEM: \\\\\\"\\\\\\"\\\\nidentityTrustAnchorsPEM: \\\\\\"\\\\\\"\\\\nidentityTrustDomain: cluster.local\\\\nimagePullPolicy: IfNotPresent\\\\nimagePullSecrets: []\\\\ninstallNamespace: true\\\\nlinkerdVersion: stable-2.11.2\\\\nnamespace: linkerd\\\\nnodeSelector:\\\\n  kubernetes.io/os: linux\\\\npodAnnotations: {}\\\\npodLabels: {}\\\\npolicyController:\\\\n  defaultAllowPolicy: all-unauthenticated\\\\n  image:\\\\n    name: cr.l5d.io/linkerd/policy-controller\\\\n    pullPolicy: \\\\\\"\\\\\\"\\\\n    version: \\\\\\"\\\\\\"\\\\n  logLevel: linkerd=info,warn\\\\n  resources:\\\\n    cpu:\\\\n      limit: \\\\\\"\\\\\\"\\\\n      request: \\\\\\"\\\\\\"\\\\n    memory:\\\\n      limit: \\\\\\"\\\\\\"\\\\n      request: \\\\\\"\\\\\\"\\\\npolicyValidator:\\\\n  caBundle: \\\\\\"\\\\\\"\\\\n  crtPEM: \\\\\\"\\\\\\"\\\\n  externalSecret: false\\\\n  keyPEM: \\\\\\"\\\\\\"\\\\n  namespaceSelector:\\\\n    matchExpressions:\\\\n    - key: config.linkerd.io/admission-webhooks\\\\n      operator: NotIn\\\\n      values:\\\\n      - disabled\\\\nprofileValidator:\\\\n  caBundle: \\\\\\"\\\\\\"\\\\n  crtPEM: \\\\\\"\\\\\\"\\\\n  externalSecret: false\\\\n  namespaceSelector:\\\\n    matchExpressions:\\\\n    - key: config.linkerd.io/admission-webhooks\\\\n      operator: NotIn\\\\n      values:\\\\n      - disabled\\\\nproxy:\\\\n  await: true\\\\n  cores: 0\\\\n  enableExternalProfiles: false\\\\n  image:\\\\n    name: cr.l5d.io/linkerd/proxy\\\\n    pullPolicy: \\\\\\"\\\\\\"\\\\n    version: \\\\\\"\\\\\\"\\\\n  inboundConnectTimeout: 100ms\\\\n  logFormat: plain\\\\n  logLevel: warn,linkerd=info\\\\n  opaquePorts: 25,587,3306,4444,5432,6379,9300,11211\\\\n  outboundConnectTimeout: 1000ms\\\\n  ports:\\\\n    admin: 4191\\\\n    control: 4190\\\\n    inbound: 4143\\\\n    outbound: 4140\\\\n  requireIdentityOnInboundPorts: \\\\\\"\\\\\\"\\\\n  resources:\\\\n    cpu:\\\\n      limit: \\\\\\"\\\\\\"\\\\n      request: \\\\\\"\\\\\\"\\\\n    memory:\\\\n      limit: \\\\\\"\\\\\\"\\\\n      request: \\\\\\"\\\\\\"\\\\n  uid: 2102\\\\n  waitBeforeExitSeconds: 0\\\\nproxyInit:\\\\n  closeWaitTimeoutSecs: 0\\\\n  ignoreInboundPorts: 4567,4568\\\\n  ignoreOutboundPorts: 4567,4568\\\\n  image:\\\\n    name: cr.l5d.io/linkerd/proxy-init\\\\n    pullPolicy: \\\\\\"\\\\\\"\\\\n    version: v1.5.3\\\\n  logFormat: \\\\\\"\\\\\\"\\\\n  logLevel: \\\\\\"\\\\\\"\\\\n  resources:\\\\n    cpu:\\\\n      limit: 100m\\\\n      request: 10m\\\\n    memory:\\\\n      limit: 50Mi\\\\n      request: 10Mi\\\\n  runAsRoot: true\\\\n  skipSubnets: \\\\\\"\\\\\\"\\\\n  xtMountPath:\\\\n    mountPath: /run\\\\n    name: linkerd-proxy-init-xtables-lock\\\\nproxyInjector:\\\\n  caBundle: \\\\\\"\\\\\\"\\\\n  crtPEM: \\\\\\"\\\\\\"\\\\n  externalSecret: false\\\\n  namespaceSelector:\\\\n    matchExpressions:\\\\n    - key: config.linkerd.io/admission-webhooks\\\\n      operator: NotIn\\\\n      values:\\\\n      - disabled\\\\nwebhookFailurePolicy: Ignore\\\\n\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/control-plane-component\\":\\"controller\\",\\"linkerd.io/control-plane-ns\\":\\"linkerd\\"},\\"name\\":\\"linkerd-config\\",\\"namespace\\":\\"linkerd\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "linkerd-config",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd/1-manifest/v1-configmap-linkerd-linkerd-config.yaml",
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"linkerd\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/infrastructure/linkerd\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "linkerd",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-linkerd.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"sealed-secrets\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"default\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/infrastructure/sealed-secrets\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "sealed-secrets",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-sealed-secrets.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"nginx-ingress\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"default\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/infrastructure/nginx-ingress\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "nginx-ingress",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-nginx-ingress.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-viz\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"linkerd-viz\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/infrastructure/linkerd-viz\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "linkerd-viz",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-linkerd-viz.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"namespaces\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"default\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/infrastructure/namespaces\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "namespaces",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-namespaces.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"argoproj.io/v1alpha1\\",\\"kind\\":\\"Application\\",\\"metadata\\":{\\"annotations\\":{\\"finalizers\\":[\\"resources-finalizer.argocd.argoproj.io\\"]},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"cert-manager\\",\\"namespace\\":\\"argocd\\"},\\"spec\\":{\\"destination\\":{\\"namespace\\":\\"cert-manager\\",\\"server\\":\\"https://kubernetes.default.svc\\"},\\"project\\":\\"default\\",\\"source\\":{\\"directory\\":{\\"recurse\\":true},\\"path\\":\\"kubernetes/generatedManifests/local/infrastructure/cert-manager\\",\\"repoURL\\":\\"https://github.com/Oyelowo/modern-distributed-app-template\\",\\"targetRevision\\":\\"HEAD\\"},\\"syncPolicy\\":{\\"automated\\":{\\"prune\\":true,\\"selfHeal\\":true}}}}
",
      },
      "name": "cert-manager",
      "namespace": "argocd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-cert-manager.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-viz-ingress-auth",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-linkerd-viz-ingress-auth-linkerd-viz.yaml",
    "spec": Object {
      "encryptedData": Object {
        "auth": "AgAeLwSiAtd7Vqp5eQkNwwIv3U7chI+buqGcHFL5nxjXOQZxZlr9iYrtFPtz8wE1/KzqmFz9Uc+9/C/mbkDF8Xn6QVnqldoSm46tdntYHbVyyzrbMrLWi/OBBTDd8kFl47gZ0BAWNOueOdpdJi4md0EqbcFyzejFJAQHzg3Nh1ASyLnOh7fxqVMWJ25pB4Ka5u5xRk5AO84qFSfHd4/L92uG65H4m+9Bd8l6WEYlT9hf6Psyn1K0GI7K+bA2hgEZZ6J3S2Cj2uZ1L+d9TCEk+yVSl7QYn5QqXA/3FeOK4vvnKyaza1w4sdTViJYjQQDw+v7JXeHUgr6bKk96+Sok/gbCvjDa1a/NsTbyYQnsJlxbTfQ8gA7pn22o6M3gpeQhRT2dBThzkfh3O4jt7hKF6cULt5MkZt1c6UvjDOhaKD7ADqo5yIhBwv4pDh11SfzhZXsOFgVpAzSRaQ4EPOD+5tzABwys83V2j6cih0QeXeO8ZOZAHPdGr0mZzXEUm5YJIQm0SpPyaO+NMP2yj+wlQUihSELC/koYtU24l9EOk2hwhX19o6ExOcYf+e0vCFqTOA/eOO3+EOexJKxOsI9PHOzQ5jIdWC23zSWPH4NHogR/5PVoIwSGWDSg1F8kem120ll8o4dx1mPRs4+iq4MYJXid5k2sSRN3OpaVclqdF9vi1KdbXXCWdff5IVrYU0hsQvdjMXsoXtrYZUsSokmAZO+tVJiZsl/gFYIdD0uuwH29eKJHeeVoIizxPUou7LP/RMur5sek+1w534//0uT7pCApw6E=",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"auth\\":\\"YWRtaW46JDJiJDEwJENFODY4azJveC43aUI4ZE5ERVBRZ2Vuck1DZnFrZDRXR0Izb25mSExoVlgzNXVULlE4VGdh\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-viz-ingress-auth\\",\\"namespace\\":\\"linkerd-viz\\"}} ",
          },
          "name": "linkerd-viz-ingress-auth",
          "namespace": "linkerd-viz",
        },
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "tap-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-tap-k8s-tls-linkerd-viz.yaml",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "AgBQBkF3FxOmdbDYs+UiZwlpBGYECwB6cTtPwrEijHyId69wlX9jg92J84MVVuSSa4djHt94t8YXk1czm88ZGAk3SXeuIqJxtJufZrdJWj++NJt2fp2aPDXOMD/oF9vVQK0ndYImLsCR3l4M9KZrNrs/unD4ux7fEHsWSCKLuJVgBLEAri0o4b4r22yzys+YtGVVwLQK2g3i3pU4zuqn3Jp0MtJWPPeN3eXaCGlHIaFm9RapB7PoQVKfl4iXWKUOs2gpI2CK4/iMR8xLxYpOuPRZIEJDvN3eezTDwBnChnca7nwiHFws4if/3HiupnS4atpxpX6yoxssFvkaaqoUE+5PONPkwB2eoXOzws1dYwTVj2Kx21PiW45PjdBzTik1IBph4CRIKR4qidyQQxgE8b/oiVQPvLOrBxuF0a2coTehmm5wQhUTgix3eBGAQorhhMfZ2DFSrh2KOdfwToR+KpK+gOE76OQEuzw8ka730nLwCkZB94O09/pfGHMy5J6Otw4OQXJM4kyYuO5iNM34kso9hANwN2NZhbPHWNjyjVX4t2WZtdyDSvFQMd13WenwoS8JaSQFaiJpFVKqrufiwJLY2c2zHVeOr+BKfeRNKF9TnPrJeR6T3vpLCOsYyRMEEgw+xRSvHwvyF9hz/SS1nSuFqgIHoHrycZfw4dmYkMsXOBrSy1IHDdsfiui2vZgiX3njzlWOYtpeaQZStXl+fsIWQ0TO0ERWTb1OWpw9agSgYGANwAF9VudaJu2W9x5OHPFDOLUjIHC+GX0JNHt22XBZjgjD6Qp+AUMaRXtMSSAqsaCg2AMVLlp2r88wZhM3gEUudxt+FZ+Oe0ukbSR5frdu8lbscDBQl7j84HKlbRxL+7nKgxn9vrfUg3AqaF7zbk28XeVSaZ7bEp/gHIEcBjBrdDbUpTK7VHUm5JsJ5/sjA0G8J4Jz0sT8Hk+uswhL8TEDVn0pPUYYVWJCfg6R2yBQCOLdvQDkq2CQwHSCHSzeQJ0By6b6eHEvfhvNjuJrBV32CVrOLlFAY4xDCT7kRenEop0Tvv8qYZl2Y0XFXr4DZVwVxGWy5Jkrff1uhDmGOaBR+1s8IUSw/GLkqVhAxFjZjew5igBhI4Wg5HzkH6kcm+elfHKugWVM9GDha54IXPXd82IIzpH1q+9Wm/Ik6hWz64EN4rznAYnUI/ox4w8GREXK6o6/0kmB/suhrtPdu4udEill/vz7d8AaqWO6bX1ExBvVRWcI/d5hKlS9ZhCrwwooHVEJALUclZgOVPxILFaPShT676ThHvSTPnscG/nrkAphvlQ8L2XKTPTKcs9pRoTaZEyRe3DKN2WedLkQLKOcMcMA/Di22ZpTa+/xG8MkE2Rxiq7lEqxfY9Tr2YcGgl1zE976qJDqf3H8T4NOIsvPIisjPqSJGwfwvbyHbG7VRStN26wyePwr/3KJP+25XUWc1XOLxInGFLjDQ7pqgZ3VCyBghtGlY1ky5N9ne+kcKdTe6/GD3fRtduAFZJewb12LZkovBQ3VMwHtn1B4YmSS1/RJslcRVylXi34SfQJkWi/TUEil325hzyP8/QFYUJ6izIqgk8zjVN6dFqB6AIhk1dzNGMmh40EZ6LoUwEEU0Bs+gXVeEG+L3Th0vHzTS4Shjt7gTMXb3O/KifIqaE5tCKUQ7wr5btcgCM66hqkbwURsy9hFV4QZmBd7SMeU8pMvySQm9yXxrToHvCMzehIsD0erVSv9IiQkexaeS5xvztjgthXunlpZdLRruOh1rLVzMrw39XuUXG78coeKvNv7Nfb1Jfd3t4Zt3YZBGjVxcqoPkHOReo612zldas8po9pnTWTcyt8dZSoawrQn0Vt7YOlSXIYXvtUGdCmEs/12uG2BHMUfz0TYu4R9VBLkpazy55LkW1YuAPnQbQptgVSAsJKTodUzivugOVXog/y2kCIDCYEGmtRnOL8gwngJaX8QrDLrS2OboGIA9YPMnoQT2QySUc0YMj497D7oV0KlS9r3umVI16tXzqXvC9KxjlqAcYupLWxCHZwHKEi6FKVKa4VROBa5+23jfd8Syxiqqi29uvDGihcigQ62QNNqGSTp1UMWpcBS7jrJVcnSTOtstB9uALDXCiRRJGUdUiAoyL3PX8/SX11VLF/f90L1tEieUY68MurBetIFdbVZxmDc/9nGZAPkuIjylue36d9KaWvXfUvc232hVCW0PlYK2g3f0xo1xBoNLQS8nZv2",
        "tls.key": "AgAL1xG0Czy0xevQyk2sELmA7/LQTqzNTUG1Q2ZMh17Cr3IrRkXwP0hZINYnUvCp/Awr+D1VVH5DVXKckc/sgnbZPWYyyMg6QZLHAPtSqAsP3nWYUHi423m6V2CkcGI0LqGMdbZhBVRtghgFlj3xhq+OxY/6/6TJAj8KmO9F33HwPwWICwhKMtLjLN1usbmkr3/EwABxyNkw7+jX3rq+jgSJ031v20bs1hUh7zwEH6UE4UcQFyUO5GctAmH+CoxWFX2I+r0cziQjQ4pS3+zD1Cv6oB+4986GLGYll/euBIQWl2s+jH9Il+5uQ+krIOzXovvcd+yENppR6IkqKfYZmsQgnWAwjuJ/X6rm1KdzN2Z30MfzZNVut8y8+nLlkFA3Ajj4QAIaGcP4zaqPwhBquq1d21Yo8b/zh+NGHGNeHvaECAgWARyPQWS6ZojXE7gTHCU3TiUU17FtridPWCQurD36Q9UgVI6Y4eP0PUXizAorzqWZSeep1Z/ynpY6TFyACgFTV98XvF+a801ZJBTRdVOu+gsUwF2wGcHg3nrVWJPfnyXEx+Ly9z0eEPJrE6if5ye41Qt/w54YrGqPTkzcA31mxMrl0TeYunJV17KqkAt9iaw0VLf6iJewGlBTjJa19PXijWbhtLKD9LdWRcjHPpDtFbDws2eTWYjOw60+ZVtm713nsHHx5HYXy+EaGTTb+mxsicEehmT09caGjqWctj1MskTWm1sT2fGlBn/rs5gi/QdYnVQueC+0ax5/li7RA1w8asheyoClqDQ7+pxN6zBTH9tW8adhVoJXiKDPPjTxWFo7LMkblJqmSyKJnoCub49sR/U9Ni2tId2OdujqI6W4JvSSPjOjWPdUbSQjxgWQbT9Z1+PEii9bNKJ7CtWyyQrRxM/YgdeLiHgjNXIUOqJbBEx1FWMMmz8HzGaeNvmWnWUCD3zByyuBgjsVyuJeo05eAreQwy7SSxXNv3pkyr8mnO4Ng2GHjd5GfwPq39WGUrkdF4cSmIeQVSbyPQnl8y4awfx3s7cX6cX/4illi+7tB2pNPgkZEBDjxykTzcN9wRoLPGxixYhebE3kc6/wJArXbjzUqnWy/+dnzQ8idS75k8IdYuC44bSFoxU2DchLqzhb2Btc2pXzOx7pvB/U35xR1rLCpwF1aImrO7agKfjvjprn2RnzWurDSm5qs1+5bhv5PhM8TseIQj9YljFoEiGaikaf9yVG+kYWKbrN0tZTtIvCkp0HrJKA8kEUrBu2LLhX2geMjsx14BClvf7MZatGU+i7p7c3Tdng2jRQPjdUezAfHx9oiNU7394U2IAxQPQrM4clpvMtGmG+7LXbS+teVJvamdXc28r1i+JTXM53ZDSVn6B0UL/ed1qILqiZYVVBXZrQhGPx+BdFEGNhp6IXah0slv81DUd1qAnVtY4q2TV4NmTa9rZRAxjKUORb9UpnwMJMYhHV9k8o0sHp8yKhL1bQi5kboYAOQf+y7/CyyW0HU771gMtGDanznVyeLMbXXyCoZvfN4eNAlLnFgMpJUm8b0rfGWuBgeA1mvgc0/MHqZpaKp87jsezsp0Az72bWQFExU91WJ5z4bnGamxj19WR9kMNa2FVxSoklo4YZB9jLiE3OYKPnFQH6jAE1h3O2uhBQX1JZVEw82loB/tX1E/NvuHNeOb9wKDt4pQFedkXa0uEc3YAtrm73lpnayIuPaNZ3aDjvUOnOaXWtx7+6JD8kpj9hIrdKNJpnjdoPgc4LQ8a/t69+q2q6Et2NhoG6TqFbR1dG6oSmDizmE1um+HrToYn7hrA3vUzYshNvEPe6yNErEGuP4iAlCdc8oqNY1oNJjlBVvb3KWxkpk00xRG/LeffHKmLn6K1MSNOlpgtZdy5rJJZ1p799DeISRQSfvnEz4OjdpelVa11MY4ZQKX1XROIr+UUI+742mdsgnX8PtcZDzAQCyax0wP4Lpw2cdCwZkPhRzJX1FEHM4DrROblXaPgHg7IpRlAth5VI2+iqL66Uhx9GofK8rIMnkuw9rugObWmk4NQk4gekn4koTUvJigPuUelx9fDOOvXdiumE78bAECNCa9LU/eIDuf5oiRdEyA1rJiLXuctGyxURQbExM9p5Pcsr+qQ9W1ziQfzn/Ebv9CV15n0NZe2KxUlv/uRTb1HaZWBa8RqLzfVidxUyzbggXGxOAzlkhWBeYoIPPy7JCcudfn9m9i2X0KTpQQI47zU7wgfZb7KLmb7GvPO8WwTRUC1kAHnFn0qPGVAaxCm6cGoDcdNeiRpnop45BmGVH8+DWwZPCO3Rmktk/zXNCCsu9uuqo83+hqki2gRLhFzBuC4vwr22FTnJ5Gh/wrdgEL9DhR9xTZ+VrRvE0xFOghizyE5NQFHkZ+RJCNtCaxfB6vaNqEYNVJXUEpbvBz/bbGpNPaWD+1b99wf7oCOXGCd3NmLuFnXxLNysQA/x44nl8KtXQUtKsDFDFqZIyl3GO7hAOGe8D1xA5j8SoIvvfkxNJDl802X2dXllfRw/5tSYxZ4Lz8hXqfVpJCtl2EDSAiY3dbuSDzGBiz7ONOxDDyMrKPhwslIGCPAJgBJTP9YpFV7DhagzRjp4asZWnOUyiFNa9dHVsGT4IEjGKiIqpbi6lKYFAnqNU1qxkeXFtL6ZsHU3f1lRDPQWmhMeQEDJwn6e67rzoITN1lO7cBj32xffHFqne9fB+zU/q0nhh20sILcdP6t575qKdSjbvJ+9YapR9bNUX5TDWStOKTxKUTWP5kvpx/ajsYbTMwvGFYo1dJcQEq1H9LO2ndFfDDd6/Ugm+/o0B5kX1aOuB/1619VGI7jve/nKyjJV5bicccVLTMD/rPE1UPcPVMnu3MbTOsag+5+g5P4uzQW97E8aJYF1vOuIKEnmTiFbay6ZQ+WezbyVQU0YtVqdeUUPF5wvWqI1alw=",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQU1IRk4rcU5rQkdOZzFpbEJETS9laG93RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBNE1EZ3dPVEUxTURKYQpGdzB5TXpBNE1EZ3dPVEUxTURKYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUN4L3dGL2I4T1BoS2J0YldUbTJqMTAKRHF2NkxkQ3lUdERwSlFDa0V6Q2pORHlCUHkraUdXTGF5SldUN3loTWVneUNmTVZKd3VqdGZ4WnU2K1JJUVN0NQpONmNJcHAzRnNIV2Z2Tnkvbk1DYnVoaXZWendwc3RsWjJrMlBqTDc5akxVQmJlT1M2Y1FvOTZWRURiMWJEVm9MCmtqU0UrYXNxdDRpL3NSUHkxcUQvKzlkdmZoYTdyLzY0VnhHM2J1ZW0ybjFOTDRUNTFxRjJZYlhDM0R4MWJHdXYKK242MWtaM3daaytTMi9NM0V3TXlEOHd2RlJZNEVoSVBvNzk4SndkeG1wVzhzSm55WStUV0FBdXJGVTZvMEVBSwpVRjhyM0RPcEc2QkluTlRrLzVNTUJmcUlhUmhMNWFNazVtOHpYRUg4eFg1TXFvZUtNeXljMHo4UlVSOHNleVVQCkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQjh4YXROZ0c5YnRSbHpOZExkL2EyakZUY3ZXbHhPCk5ydmdIS0s2Z2xtUkVtUXdOMmRZOHVvYzZqYnc1WlEyVGFCNXo5TlYzMlJvajJHdThETlp3ZlNGTmJObjdLTzAKUVBtOU51d243OTdSc0FYdVQwR0VRN0xrRGRoYmtxbDB1cFJyeXRnNmR0SmtUY0tUTk1PSnhvL3k0UTRMTjlFbAppZDFXdFprZU5VOGE1dUtWMnFaSUtxTGlUZUxDMFZjMTBWR09vbVdabFNIYm1ROGdHMVZTdFFTU1M2OFNMeTVSCkFjT2VoZXFwa01vTkhOUDh2cGhwZW1KcVVIK2pDODVsOGpaZTdlRllJWEx1NkdYQjBTMHhOWWVQYktFQkVxYS8KVnlPOFZkRWkwdDFGYnZJSlg2U2UrUnlWc1IrSzBrQkd2SkJ5VTBNTW9kaDl1Y3EzakE0em54SCsKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc2Y4QmYyL0RqNFNtN1cxazV0bzlkQTZyK2kzUXNrN1E2U1VBcEJNd296UThnVDh2Cm9obGkyc2lWays4b1RIb01nbnpGU2NMbzdYOFdidXZrU0VFcmVUZW5DS2FkeGJCMW43emN2NXpBbTdvWXIxYzgKS2JMWldkcE5qNHkrL1l5MUFXM2prdW5FS1BlbFJBMjlXdzFhQzVJMGhQbXJLcmVJdjdFVDh0YWcvL3ZYYjM0Vwp1Ni8rdUZjUnQyN25wdHA5VFMrRStkYWhkbUcxd3R3OGRXeHJyL3ArdFpHZDhHWlBrdHZ6TnhNRE1nL01MeFVXCk9CSVNENk8vZkNjSGNacVZ2TENaOG1QazFnQUxxeFZPcU5CQUNsQmZLOXd6cVJ1Z1NKelU1UCtUREFYNmlHa1kKUytXakpPWnZNMXhCL01WK1RLcUhpak1zbk5NL0VWRWZMSHNsRHdJREFRQUJBb0lCQUhibGtSbVFEWUNUcW5HVQpqajhLYnR4VVpKcGorakR4SnVsbHR5emlTSzNyMmJLNEExaHpQcTVJS0dvOTZaeFVOb0QvV1VXeE5haFhLU1FFCjNHTkxiUCsycGhQSVFFRnFZdGZGNzJyckNWbThrSHFuZWQrY3dVVWM1b3hLQnRZVkpGK0ZDT3Y4elBSVW9BZDYKYWc4bE53M2Rwc2xnZ082eTFGeS9xMFNlQzhPUlZ6alVjcyswczVJbU15Vzlub1RuenB2cUMrWjd3SEFQcVNqOQpsT21HMEY1NC8xb09xaHBtLzRsSEplcXVlMDN4VWRTZkt3ckgzajRhejlzQ1lNbWhmeHFMY2ZqV0RnN3g0OU5QCjlRYVN0ak94Y2JaQVpuSHZrUkJ1RmhNWXZxNWxSSDRRRHJGKzltaDFuMGRRWHdNL0hYSmxENHdJa3M2dUlzOG4KOXp1TjYxa0NnWUVBNTBmRVRlYXRqWkVrVjlKWkRXdWlRQU4yY29ZVTVoY2oweHdhc2tTY3pscjc5YjljK1hrQQpiL3JhVitlVDYxaENaK1FRRGxoSkc3YnBCcnNLRVAyajdGSVFtVFRnQ3RiQytYTTJ2VW43RS9ZZE5TaGFvSWJ5CjNrZXo2dG9QdGMvMGdXR01qdkZzZTc3UUFwZWVEdncvNjZSaWRVNTdNcTlRVXVEeGxuSDlOTnNDZ1lFQXhRVksKTXRFcUhpcm1zbWoxL2ZWY0Z1R1J4cHZUKzhIenpjdFViUWhsOSs0Nzk2WWhuOWlpaUlBbUpnaVQzdHgrbC81MApRNXdrMEZqK0FjYnhLZW5yRVM0U3oyT08wUnU4Tzd5UVJQaXZQUnI2dysrWmVmOWUxcVY0OFcxdFVCdS9abFppCkxCNU9teER4Y3pTQWN6K1llWTQyL3ZWVDUwb1BNUCtnaDhReXpOMENnWUJidWRMWk1vdlNnYVh3VHJTUzVnVkwKYmhRa0I1bHlSK3NsWnhnUGE3YmxBS0M5TGxBcGdSdnpUWUliS3ZVM2VhR2Nvbzdib1pnZExjWHRyWENvbkcvTwo0aDFESmYxVlR5ZTAxMFQyZmNqZWVkWExwMTJLSFB0bHZQcFdRblhJbmRsVEZ1VXdLLy9pZENMN1pEYURxdmVPCjlYczNHeEV4WU9aeWVGUllYbzBWMFFLQmdRQ0pwLzZGcnZyOGhRRVhHcHIxUzkrQjVTMFRWWUV4WC94V2g0Qi8KaGVTbzYvMWVOT2M5WmdGNTJmL05oeVM2Qzlrdm5ZdmlTVkMzZWRaUHE0Nkl1SFdUVlZ1ekoxNTc0Q01Pb2RzegpOWVpLN1hUVVBhNUFQUnNvWWdrMHRqNHdRSkxraitxYjVMa0xRelZRUnhpUWJaaTlKWTVyYVVHc1VtUjIyY1J4CjE3V2V5UUtCZ0V1QkkrMzhnTVllaDJDaVRpWURCWDBad3JiQ3g0UUxlZDUxS2JPeVJ6VG80NXVVdGNoVU1TUUUKbkJjVkFyYWNpT2lhYWVHVHg2WnllaVFyQVdtcVFIUlFIdVp0SmZ1OTZQTFFvQy92QWc4MjJCU2hUbUszOUZXKwpGMkFJK3hVNTRDVEd2cXlIQVVBVnMzN0g1M2lyNjFjYnVWMFZzbG1XbkZINlFhM3NTbnRaCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"tap-k8s-tls\\",\\"namespace\\":\\"linkerd-viz\\"},\\"type\\":\\"kubernetes.io/tls\\"} ",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "tap-k8s-tls",
          "namespace": "linkerd-viz",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "tap-injector-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-tap-injector-k8s-tls-linkerd-viz.yaml",
    "spec": Object {
      "encryptedData": Object {
        "tls.crt": "AgCcfOoOypB/vB5ECOVpVhVwR2MjP93+DinaObcsOyL62j3G4K/VHGiHmUr+3LL3QEjs0KHiMiXZD6TmeZl3kZjgBvYCMI4zXV7ux7BfIGd2yBM21K4dHAR+v7zeBunoXjetZOBfkjYZsrOwPJ+1QLHwaz6Xr4eINFEv5xGmk+oeLrMNuyRuc8a/sdzoQCAa+H0+nR+6imCDp+Vv2DAh4I03vjHq42sOLXjMapESn/oF9pgZ05Pqv7NX5TWakT8pasCTvvQLMjZMbQmLLkCaQHxQ1eFxLnaMngI1esVqt+CHbI6W5VLRPfcNC02W35GRAylRcgP93eOXLl0xWaptzupMML61PqYW6yWJUxAnhlTEgqYUhGWxY1ymbsYVKjiNcbwkN5/YYE8g9UFNvePmxV/UBlLji8pCW8xbf32F+wP4tYDjqTFrHgVG72JkUmD9BG0h9D16Lbp0O329/k4CaRhocX7hd7k/sNGHVq2JKKpFesaFbAmaPjrnuzdJ2Fl29VQnD9tqYioeMqCpeVrQgvsku0xSOezDBgsdaeRiGIG8NTDAd1x2zU5sqgfAEJAwYiLWio2eoS+xAFrptdJzWF+TLBLASL7aHUzC6w7i3e+dlyMQVOJ7BXY9uNFnULXo5doZjNbxuO4GZc9DDjV7ttQ2AXllgex6I8mj5TAA7v/kk9+OPeq1yYE+3ui5cw2CptgeGM8ALw2Z8geVAQefXVK/JBHa9TpTTKV5ehCUijKRXIYSJBSZLOFMkD5ZI6RCqUoBk6qtknCGjMwaCG8Ix6i/CT0vlrWQPcwjvAlvtmlPkCca09xM/DJr89o4j8Xqc2csQ+kT+9IJ6psjWs+LofXqc8f3Gx3bG6p2ceLG19CHun0lpC1JMOLKL9PJKELD7i95OXId/FDbwHwSiwK1rSx2sA0YI+VrG/86l2sdi/a4tw/SqwNqZYh/c3hvmVtsTwmdGlyFt6CrVIwPA38ddvygCPqFmM8W35w6Jn/1/fH0RBdMU5QE+/u0bYnSkX0mJ9vtXH8Mh85EoecIYXxAM0nXYYQlYfx6iXYQHhdvSqRjVMdw+Nbt9t61TIf2fbI8gi+pOgOWKWu+KfzvvQKK8ITJSGFDFun5Bd0IBPeRxj5bH7HdDljTaOlb/sG0K56z9u0yXTRUOz7p5wnHvlDpj4YJ6BrwgUFOYFY2KfxNN09ZOsHLXFc5qH1kHKb4ucTR2GSyL7/mhaeMqqCNEXkPSB0KJX7m0wYUC939nFk/wUUOfbopClXtRirMSM5JZIhRsbTZ3rPei4S+JqeEUL/0EqnlmYRKuvdyXhj5W5WGy4K2/3KUOV3hEnzbHKiU8mjz1cwgWUXxzxdtuufgCdJwHR2P6FhbzyMUxdOFpGZIZcU125+NxPT3UQluJ2iQsrGLtuE3ZugrGj5ykEqz/1EEtYKVbSvAM2VZwsJ2ZswcztBfXtUa0qOfSNrot6MGaxgtbPqNR3tvxV47X3pyHId5lLsyWYSE4ay2Ta3dEmWZvWwjkA3spF2RNT/ftDRH/rDcN8gtSpnDmS/ZUX11JVpF5hci1zNlT4xtDE35Gz3Z1L8ijw8pQfef7SaBFzQXUE1jQacVZuWLxm1LIfv/Br4+Y0qfXrCbUSu07c9nITzGrqyixkNjdcEqdvBu5IlVpxQu/4dsr9d9/zPZw4vwT60ROiXpl1cM9IQXpVx0PcdDh4xnsO+WWqhMtsPbllhJmmWhoH/YmadH7wy3yZYLk93zaetNpij4QcnyeSWZlvmHEulMBHFbXSNmP21KgObYpy+u66c1m8vCfzHfy91hHBx/1tUWupnYXSh8YFR2IW9YqiynLrh2oFxKV0Je0vohtkxmbBtTnt95ZsENDdqPIJNm64UbwsjWdNGvIhiWGmdJMuAbKOLMdPYNAOt5GCBRs82Rr9DV/90lxZUg5YoxVAdTlDf/ujPU4Cu0Ryh7p+6mdkBWqTlT1K0n7lo5a4BbeKL9vKDOhumlsdZFPFWpkrGj7A1/2YjY0bRSxBFls51F2W4ej7P8bljBNVKAi95DVBogG6FadRTwAj/limC/1FSOzemvku1auDYiM4WIjvPqbRUJFrKk6C7KSi5pfbOgUDKn4SnCs8KDVlZLajDvk9t22k2UL1TeUgoIY5pZjDuF/qRQ8bMI8hHN4nQl2ULdJkUHV3An1iRGlZo8A6KnGBPhAo7Elxv6d6PV0SUwH0WrtXDzfvNfptpUgnL8eIcnXa5WJLO8Y7nHy2FweAFRplxxBTSho+BdYc3QUYO4wjAtRnOrJivf9A==",
        "tls.key": "AgASEVk9d/G4xjlGHcSqPuxeCpOYYa0OZlp7jmLt+PaWhX/iW8WbRvasSnk01naDqO17ZPQEZVkmS3HgVJT0bxJq0lOSVcweZLqNo456bzoVjOVycarfiUOCNppw22suC/MgVwxid/2uvldoNpeHWpGOUe1m5rGEDg6mT3qETdIyu21WZOzbAgqQgUXcO8IW6pqCh8drfGb2ZXqwAmZiw6QtMfjk6lXIPuur2mx+kLIoGVu48SX5SYGJQJJDqZHEyZHPnet2NAv2ouytZXdFcKSdRNjVa2IGSmQOlHvEjEZGOFwhLn60/nMZPJTL24H2DG0sCG3n0K9dB8xi3Whh8sCsyQUqsvqaUqqmAgy1wMuztfoAW8cnbS4ZskSNkc+4jmxekCWGQsj7W9wEM7mPVSBtKjV86/HPbdx7FzgtCxwAG8qOky4jDqcdizYVuD+uiIqMNHuuQICoDOUGcPZn2CxEIzonGmp6MtlMt07TRIOgGxVlYTeIjx4updpwhnKFkuEkK4QSQwykwTpI45xb32A2/fmLAY3xfHjE+8IKVDYPoPbtYpUg+nyVyIJ46cB8Vc6PSDDix3gJNKGz+6PiQkCXgP53UTxEstbS2f0paLZKFfP2EQLe2+hlf/iLbKvXX9g9D7ir66FM45moOCGd9L/A0jtQ7o/3TnF8SQTLemVsT5mR6zwzFEm9gEPx2zGVbxzWExokCNnKez2o2UnSwWbK1Bk7Ne5fF8sRpSofPsplRSy47Stk9hP1uueYaQk2xI/7O/NZJs98FDhObi7krX91sUmZ3HgOAAvx2FkxebhQtlSgsCLliADT4ELokImCyExHNEDBpcuYOmi7qhezma6dGjy3vE/kOpppTGuuHk1RVYBxwa1pJxIPLz/i7bvnpjr6sTSz1ySlMX0jlyr7NqKUYH4qFMM1CSu1yRJV+g6lQE8w7CPdqIfnBS4Hqwn6xCb1Hn/mOALXrkOVnla28/vPMjovhL6PICzbwYFA/ETGb7zw28aLfQinAloDBrB4chT+4VWX0XtW79Phb+wvw6RhxjBxGX1/sZg0DjEIk2fBhRnvmTtpA4+2MMuTcc3Zy9s3Z+n1HJ4uvSQkAO48aX/MKNlDQlD1nMdYCVoS6G5O24iCpUlIId0viAjcGhkgQkvo874N+85GSLwu/iTf1sfEfG1fD8jdK092mCPDvJxOOY1BmaytkMeumO+aem/a21RRPd9JVnS8vmF8MGKY/PtHBclFo7xm+HQeNgdDiIHGHU9pvXBOdlsf5HaLpnpzX0mquGUhj9timEcALnP+kfFFRii5s3kDPFImJGpGBYtwbpeEUx06L1F1YEIrDOA3EialORONWTkQKlkskz3viJGRyH1WJHkCSJx5t3BPKOBa9478fGWxuXcPPLtuAPOq/udWnNsZXNurSlB6QTJRQ0xKw+ZvHmV0lWwgJUZoV82Idow4uGzOjHJQy7NJ3/SPA7hjS28GaxXPRk1znHsYY3VubkXbyDEw9i03D8K9yD/OccyEKybtrbXhP6ylzdjmoGptKEAT631JA5cz+INnDEI0ecxWeDMqCPNKB36oDc0vNLx+u9OWsVfhAxtEvFabxXF2nHt2WI+sJN1ausCs4nxEPGBVUMtwen1MVd2pkTJVouA1REVO0Y7VcS9cO9lI9jWcwhyOhHQT+8cCrmLOIaUqcem0oLQAFqvJEsnwT5o/NzmB8arJevKHG3/whu2K2PvNvPyjc29Tz2llft/gj8AF7WDZX4t4rRzsSFIzExmfxswtJZ2FFz7DEkCrslfMxUkdlOD/na6IyStoXzWGw8QO4ih+aAT6leN+Bsg+Q5hXUvpc3z8UJojSQJr5EZOVnhOLYdw5IRAVBcslFj6uqd2ogV4DtcpTGuA+6yRhvsK57IyammJaT3KuLmQNbtMT9smIkD2C5TPZxRt7BKZat8voUpCe5GYRh3ERaVO7ZuGY4YBOMiqqyPWs5zdmy178pADRcOxlJKK2FuoKeL+WiIKYHfkm2jjkuzNjsfOE1savZTvWLknDzLV8jnsm9CxLv5OoqSe4i0l+rtudkLKXoT8sHbAk5g1e/Jub0bmgolCObL8rogcB6FLvFhCxMQ/YPyGVjixil/zNdSIebef5JLzeyPFda2OsDx1ZNffILUQwnlJanaeMJKJhjX5T2eRUUCP/FdnpvSHTCifuUm6zlt9NQa7IXg2JJBsG7B9o/cMNsT3Xpv22JYPH7uUEr8cwDcKiLzN61V2XUkwdD3yJ3O4gQEUfJDY2WXwt+pFsBUVZcpf2LGjGs5NeU7puhtRvlQo3CXqmEBi6kDMc1mbaN8Ex1tXDacXdZT/uGHZMzoR3Mmry4W2NB2wOgdLz/oT6p3WfP36ymj7vzVM80cJ/MLODLrCZz4PW8igdt3oL+8mCXofXQvmpZr9krbvgAMVWU2O11+PJjZq0vb56lm5eUYVDS3Qg83NPEUpG8vzqK3S4hhimfFqQatj+HPu7Ok9sjIW0NXuPOT6bdf1v73JTqVKN9Jr8QXpTOMf9X0BIqTga1QBDqTBSG6aa8lVEnj/1NNoJ5nskWwB3+HR0W7UoWIcvz11uPG3kMnICJ8nF9VhYel8Lb87qIHLry6/hif5KyS5C+Bapuj/pRTIxmJzOxJf52BHPztRPUiByQd1iPfdOfpLxoZ3iSUXGtvxsF9Q2PXtyqRtcRLmXaqLvYJHP5ndLmFtSZ4jmFmh57ktxMsAz1p6Z+pxdE1lS5VbHl8gjS1Zc6z+D81OxFiH0nAve/kqw0NzoSl5SCNg+u3TC6J2kb/jWRq+Ns55yZP/v7vjSUSXEqdvhuT4gxqn/vKNi892MxIT1+peqO4CX3kvamlqjKgKMwIl8tOsbZOL68LvE1Q4K48/+fwS0+PA19BXgXsCxi4fTVrBeWwOhJKmDd5SuZeDHVz3xGaWOBUBdMSbq",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU93UHlyWnZvV2EwYkFWQjZpa09Db3N3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBNApNRGd3T1RFMU1ESmFGdzB5TXpBNE1EZ3dPVEUxTURKYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFETTVNcTZzQnI1b0JKTjhmZHpvVk5VRkZXVDVlaEJ1WmZlUjByamVySWgxM2IxMExSYlRnODlzMk4ySUpTQgpROXJtWlZocFNaZDFEa29kWnhYcmhHbHJGTkRDdlFZSHlMTEpYcitlU1ZYYmFrcDZCWTJLREcrSUdNZXI1b2F5CjVaM2V0WTBuVVc3RmRjT0N2MngxdHdwTHN6S2RPWUkzWmQ1OTJ5NkVaWUVHaWZmcHJnSjM0RjZJKzdJdFRxMWcKZWIxakdUQWNLcUVPSzVTRkZzUHBBL2QxNjdZSmdOVkFLNG5Zb0wwQmVwYmdkUk5sUlhUQ1k2UW51ZVdRTW5OZAplaXQ0d29YbmpGMTJ2R3dqK1dNcWJxbG9jTVRLYXNDUFFDbTNvZmo4MEl6VG5HTXdlTGFYNGozRTErYVBJRjA2Cm1kNmhnNXBlTmMxTVlqZmJIMHZQTW5NOUFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUNBMWR1TUFUVDlJdXptc1Y1Nk9adHNWVWpVaUlJS0QxZzJQeGQ2M1d1a0U4UXZPbzJYMEJpV2JQY3IKa3VuNTFjRC8veERVdVFpVitLKzVTUEc2ZTFaeXliR1NYSFE4aU1TVm9iVUt3NE1zMjcvL1dGcEpEKy9BMGJGZgpvTTJBcGowL1Z3SDNHZ1U2RGlKVithOWNHZU1OTG9HMStOTGZRYlgzRTdieUVPUGlEQnZLTzF4R0owMWhCdlF2CmN4OGkyeVR1ZHBOWEVrM1NpVnJDSlMrSFYxdWpkSlFxR0xicXh4WnZ3R2p4RUdBazl2bzQrZ25qMXY0ejRPVmMKTXlvcWhndHpEVlc1Q2tPRkVNcWVHbi9TVUNHRWt4V3hYWVNua1gwOW93RXRuTWJNNncxZnZyWjhIWFpvSDc3bQpuUkx4Z0t4MUh2elZUNXJCWXI5eUwrQ0dzZXRDCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBek9US3VyQWErYUFTVGZIM2M2RlRWQlJWaytYb1FibVgza2RLNDNxeUlkZDI5ZEMwClcwNFBQYk5qZGlDVWdVUGE1bVZZYVVtWGRRNUtIV2NWNjRScGF4VFF3cjBHQjhpeXlWNi9ua2xWMjJwS2VnV04KaWd4dmlCakhxK2FHc3VXZDNyV05KMUZ1eFhYRGdyOXNkYmNLUzdNeW5UbUNOMlhlZmRzdWhHV0JCb24zNmE0QwpkK0JlaVB1eUxVNnRZSG05WXhrd0hDcWhEaXVVaFJiRDZRUDNkZXUyQ1lEVlFDdUoyS0M5QVhxVzRIVVRaVVYwCndtT2tKN25sa0RKelhYb3JlTUtGNTR4ZGRyeHNJL2xqS202cGFIREV5bXJBajBBcHQ2SDQvTkNNMDV4ak1IaTIKbCtJOXhOZm1qeUJkT3BuZW9ZT2FYalhOVEdJMzJ4OUx6ekp6UFFJREFRQUJBb0lCQURIRE80MmQ2ZDlJeGtsUwpCQ1I4UVEzQnBvczJJbk9jRE10Nml6QzJndjcvSXJCUEVRNi81YW01b09WMndqcW03VXBad09CSmRGU0V0UEZ4Ck1QeXpleHI3d2p3WnhwWXJZMmpPNzBFVlZKbm10ZEh1K1ZKVzlOdWNFUnFwOFhzUGs0a2NsUHpBcFdPbDEyY3cKOExtaVRBallxK2xOcDFlbkVTT0dFVVVzbGVxdE5kNzFob2trNjUyQzMwSlRxS3FOSmJ1Ky8yVkNGMG9qUTlCbQpMNW0xM0FVZnBZRVRZUWVNeHRMYlRPT1RvNGRaT0dMVCtsTUt2QkVBZ0trdGE5TXlLalBUSi9LblNCNjc3dytOCk55TjdWMmRHbktZQ0FORzE2L1dxR1ZQRGpHTmNnZ0gxSTFFZEFIeHQ2VzNxYTQ5em41azNPendjSWMyOHBJdjAKSGgrSWNLMENnWUVBMEY4UlpTRFBWeGlsM0hWWHExMUN3OFk3MnA3WDNLS2RGcmRqSFYwcytLQ0RtWVpxUTVHQgpxSmRFSDN1TXFaaThNTDZZUGY0WXpUSTdvYTMyU0NjaDZqcEpMa2k4U0UvdHBWVVNuTGNlQmMyaGlockEzSldlCnR6VGM1M2xLM3hnOEh2ekV5MkpyMEJOYVdCaUFUR3ZzNTBxc2tIazZGMTBYOUg4ckVJRyt2cmNDZ1lFQSs3bzYKZTB2NlNudlR2VmxZN0lXTzBYUkNIRWJUSndwQ1RoTERsdG01ZUhrUG5EZ1BraksyTVoweU9UWjRBRjhVVXUzQwpjUTJFN21tdjF2ak1mRU5LeFVITUtOWXpVakFlZ1daLzNMODRtS0E2dDA2R2VrTm8xc1A0bVpEVFB5Q3IwZ2pHCkZySEVMcWZKSnFHcXZNWUE4L3I1WXJmQUwvSWRGSWZlQU12d2Fhc0NnWUExU1pxeE9nck1RMGxuYjdyVDRDM0sKMDA5TFFZUUNzTE5yczhwdEgvNzRObFJ4VnFhbVVQZlBuWitXVFlwVGRQUHJvMUpieURlZmdsRXRyOGRqL0YzNApBSi9tYmtONFdyaHpwNlh5M2dHWGlsYmRjcW9QdjFPdmxwMUh0UVVvdUpIbmVzejVGbHBzQkFiK3NJVmZCZHEzCjY2amw2WnFwanUwcFlid3BwSVNiVVFLQmdRRGhtdFl2Q3JrWGFFTXN3SmJoNUJGTHgxWTQ0WUQ4ekVVQWsvQ1gKa2lxWHZtZ3ZLazlLU0FqaURuQ2t0aHgydU1BT1V1aWhTZXlKZ0U4SDY1UFpDclpJYzkvMStZT2xkVnJodm10NQovQ2ROSXMxODIvUEtRQUFGK3owaTVKbHZTbWl6cFFsajdZNVdBaXBWWlM4UVlLVWFCU1RkUkxJS1JvT3BrdHQwCisxSk1ZUUtCZ1FDMXZOL09FSE5tSGU5cXE2eWVhUnQ0Y0tlcUpmaUlma09xT21DYzZkeEh2NWR4bTY3MHgzL1AKeDhRNkE5aWVKeEV3NlQvRk5UV0RqVkh0TmJJNjY4UTg1MDFybnhTVWdpTXFXNGcxSDN4bE5makY5Qzk3UnZWOAozdFBTWVdGU3dnYzNMdWlBWS9LRGtraXRwaGJoelZuVHZocUlLRWw4dndhcm0rcXVpMUVmOVE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap-injector-k8s-tls\\",\\"namespace\\":\\"linkerd-viz\\"},\\"type\\":\\"kubernetes.io/tls\\"} ",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "name": "tap-injector-k8s-tls",
          "namespace": "linkerd-viz",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  Object {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "MutatingWebhookConfiguration",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"admissionregistration.k8s.io/v1\\",\\"kind\\":\\"MutatingWebhookConfiguration\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-tap-injector-webhook-config\\"},\\"webhooks\\":[{\\"admissionReviewVersions\\":[\\"v1\\",\\"v1beta1\\"],\\"clientConfig\\":{\\"caBundle\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU9aT2Q5cTlhYmJDZ3pya3dLMHRleEF3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBNApNVEV3TmpRek1qTmFGdzB5TXpBNE1URXdOalF6TWpOYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFETnZwOU1ZYUVobE9kY3BtSlZSSGJjbzUwSmFBNXA0bG9hVnV3UnU4Q1RjRndYOXlyc3lOUVpYV1VOR0lQMQpNMGJBR0kxL2RIMlRIY2R6d0RDdU9NRUtCVzJ5U1J4L1hDNFZ2OHJTcnQzSktiSXJkSVIxWUd2QW9uTHVpdFlGCkx6T1dFR1dzS1BjcjkxV1E2WmZIWDdicVl2a1YvUUpWVFluZDNPRkt0NjlFdUFjN09yOXRiNHhJV3JxRGVhTXgKN2RVajNnVE05SG9rcjVRclFIN1M1V3RrL2cvVEo3R0twRS9qeloxenhaN04zOFJOWVpGM2dLT1ozbHhBU3M3bQpKemxmcnlzbHhpc21kVUE3MlFoYWxWeG41RXZSc3Q0UURMNUI5MzA3VmtPNDJKZkFmcjNmbW5yV01IcHpTL0srCitUZmljdDEzT3p5c0lYNTZON1hwSnNUWkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUFVVU5DWWZ2cDhsWFdadnF4Vy8wd1RWQ2J6UGEzSzB5Nk1wOTFaZmRQd1lHS05NUFJkV0tJbEQwMnEKL1ZKM2ZBV1AzcEw4VE1vSCt5VWxxRWdESEtvUDlQZzFCM3Ayb2tFOHNaVDdjSHR4U0orTlNkTzJseEVSV2U0VAovMU5tNC8vWGw1cVhCZWVmbHo2enM0VmMvK0tPL0JnZnpncTViaUhwamVISDhRcVRnVmw1U2h3b1RvQTVidDdiCjN5bitZM25aVStsdThXajQ5MjYvd1d1L2UwUDY0Z3ZJdDhMWDlTMHBJNXZZM3E4clR1eWgyalZFRDVIdmE0TUMKenJGSm5razVWT0UyTVRSYlZ4T0pnb3RkMzYzdmV4TmZJZjNkWWNDRHhMMkNTZE1XZkNhWmdLSGlFeHJDMCtGcgpzVFducHdFZ0llazJBbmN4UFFlbmRwQWdPSlNpCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"service\\":{\\"name\\":\\"tap-injector\\",\\"namespace\\":\\"linkerd-viz\\",\\"path\\":\\"/\\"}},\\"failurePolicy\\":\\"Ignore\\",\\"name\\":\\"tap-injector.linkerd.io\\",\\"reinvocationPolicy\\":\\"IfNeeded\\",\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"apiVersions\\":[\\"v1\\"],\\"operations\\":[\\"CREATE\\"],\\"resources\\":[\\"pods\\"]}],\\"sideEffects\\":\\"None\\"}]}
",
      },
      "name": "linkerd-tap-injector-webhook-config",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/admissionregistration.k8s.io_v1-mutatingwebhookconfiguration-default-linkerd-tap-injector-webhook-config.yaml",
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "ServerAuthorization",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"ServerAuthorization\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap-injector\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap-injector\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"client\\":{\\"unauthenticated\\":true},\\"server\\":{\\"name\\":\\"tap-injector-webhook\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap-injector",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-serverauthorization-linkerd-viz-tap-injector.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"tap-injector\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"component\\":\\"tap-injector\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap-injector\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"component\\":\\"tap-injector\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/config\\":\\"179c1704366eac5276a9192f0692c7931db1e7e881d22eb572fe4336b98f4e7e\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"component\\":\\"tap-injector\\",\\"linkerd.io/extension\\":\\"viz\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"injector\\",\\"-tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/tap:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9995},\\"initialDelaySeconds\\":10},\\"name\\":\\"tap-injector\\",\\"ports\\":[{\\"containerPort\\":8443,\\"name\\":\\"tap-injector\\"},{\\"containerPort\\":9995,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9995}},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/tls\\",\\"name\\":\\"tls\\",\\"readOnly\\":true}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"tap-injector\\",\\"volumes\\":[{\\"name\\":\\"tls\\",\\"secret\\":{\\"secretName\\":\\"tap-injector-k8s-tls\\"}}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap-injector",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-tap-injector.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/config": "179c1704366eac5276a9192f0692c7931db1e7e881d22eb572fe4336b98f4e7e",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "labels": Object {
            "component": "tap-injector",
            "linkerd.io/extension": "viz",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "injector",
                "-tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local",
                "-log-level=info",
                "-log-format=plain",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/tap:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9995,
                },
                "initialDelaySeconds": 10,
              },
              "name": "tap-injector",
              "ports": Array [
                Object {
                  "containerPort": 8443,
                  "name": "tap-injector",
                },
                Object {
                  "containerPort": 9995,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9995,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "tap-injector",
          "volumes": Array [
            Object {
              "name": "tls",
              "secret": Object {
                "secretName": "tap-injector-k8s-tls",
              },
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"prometheus\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
      },
      "name": "prometheus",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/v1-serviceaccount-linkerd-viz-prometheus.yaml",
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "Server",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"Server\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"grafana\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"podSelector\\":{\\"matchLabels\\":{\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\"}},\\"port\\":\\"http\\",\\"proxyProtocol\\":\\"HTTP/1\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "grafana",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-server-linkerd-viz-grafana.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU9aT2Q5cTlhYmJDZ3pya3dLMHRleEF3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBNApNVEV3TmpRek1qTmFGdzB5TXpBNE1URXdOalF6TWpOYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFETnZwOU1ZYUVobE9kY3BtSlZSSGJjbzUwSmFBNXA0bG9hVnV3UnU4Q1RjRndYOXlyc3lOUVpYV1VOR0lQMQpNMGJBR0kxL2RIMlRIY2R6d0RDdU9NRUtCVzJ5U1J4L1hDNFZ2OHJTcnQzSktiSXJkSVIxWUd2QW9uTHVpdFlGCkx6T1dFR1dzS1BjcjkxV1E2WmZIWDdicVl2a1YvUUpWVFluZDNPRkt0NjlFdUFjN09yOXRiNHhJV3JxRGVhTXgKN2RVajNnVE05SG9rcjVRclFIN1M1V3RrL2cvVEo3R0twRS9qeloxenhaN04zOFJOWVpGM2dLT1ozbHhBU3M3bQpKemxmcnlzbHhpc21kVUE3MlFoYWxWeG41RXZSc3Q0UURMNUI5MzA3VmtPNDJKZkFmcjNmbW5yV01IcHpTL0srCitUZmljdDEzT3p5c0lYNTZON1hwSnNUWkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUFVVU5DWWZ2cDhsWFdadnF4Vy8wd1RWQ2J6UGEzSzB5Nk1wOTFaZmRQd1lHS05NUFJkV0tJbEQwMnEKL1ZKM2ZBV1AzcEw4VE1vSCt5VWxxRWdESEtvUDlQZzFCM3Ayb2tFOHNaVDdjSHR4U0orTlNkTzJseEVSV2U0VAovMU5tNC8vWGw1cVhCZWVmbHo2enM0VmMvK0tPL0JnZnpncTViaUhwamVISDhRcVRnVmw1U2h3b1RvQTVidDdiCjN5bitZM25aVStsdThXajQ5MjYvd1d1L2UwUDY0Z3ZJdDhMWDlTMHBJNXZZM3E4clR1eWgyalZFRDVIdmE0TUMKenJGSm5razVWT0UyTVRSYlZ4T0pnb3RkMzYzdmV4TmZJZjNkWWNDRHhMMkNTZE1XZkNhWmdLSGlFeHJDMCtGcgpzVFducHdFZ0llazJBbmN4UFFlbmRwQWdPSlNpCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBemI2ZlRHR2hJWlRuWEtaaVZVUjIzS09kQ1dnT2FlSmFHbGJzRWJ2QWszQmNGL2NxCjdNalVHVjFsRFJpRDlUTkd3QmlOZjNSOWt4M0hjOEF3cmpqQkNnVnRza2tjZjF3dUZiL0swcTdkeVNteUszU0UKZFdCcndLSnk3b3JXQlM4emxoQmxyQ2ozSy9kVmtPbVh4MSsyNm1MNUZmMENWVTJKM2R6aFNyZXZSTGdIT3pxLwpiVytNU0ZxNmczbWpNZTNWSTk0RXpQUjZKSytVSzBCKzB1VnJaUDRQMHlleGlxUlA0ODJkYzhXZXpkL0VUV0dSCmQ0Q2ptZDVjUUVyTzVpYzVYNjhySmNZckpuVkFPOWtJV3BWY1orUkwwYkxlRUF5K1FmZDlPMVpEdU5pWHdINjkKMzVwNjFqQjZjMHZ5dnZrMzRuTGRkenM4ckNGK2VqZTE2U2JFMlFJREFRQUJBb0lCQUJSVW5kRWlaSlc0N1JQTwpyVERYenhjR1krSW1FaWFNWTNMdTIrejBySmJsSjNTR3pBc1IzVU9VWXdQa1JFWGFoMGM4SmQ5T1Y0cE9Dd041CkhsWlk3VnBjSnZiVEdxbkxKaEtvSFJhc2lPWHo1Tk0rZEVoVSt0RFNQS0V0dnZCTU5jRENaZ21aRXJPWmdTOE0KcGg3aGFtWEcyZTQrVGhpM3pNUExxOGVDVnlObkRseEg2MXA3QjJ0VEQrbno4TVBnMEkyNWtoazNMbHBia08zSQpxTElESVhBREQ2dE8xN1IxRmtselZDdXlLalB6ajB5Z2s3U1hUTlpuZTNrcmY0WHdOYjFPSnFBTGxsZkJqdnNUClZXRnlNZ2lrY1dhYmoxbHVScEFKRGJGaytTMWdaMnZuVjhWQ1pXdzBNRFZpanNBSm9EZVFBcDYwZHRrSWY2UWwKRmo4bHZYRUNnWUVBei8wQmJkdXluV2ZQV0RUUDU3ejV5aFJoMG5FRzg0VWV0RFhsSGRLN0ZLNVVFODEwcTY2dgpxRVZRZjJPWTRFNUZmT2tOamRCNVJmWVgyN1J0TVhjLzVFbStwV0JXM0lWU05DdU9pTUVuNHJJOU0wT2NCUFhmCkU4U2pIblBDZGZ4VVgyV0ZJcjlZM3pNM0p6bEVoT1R0NE5sNEpNWmhqV2J4UVpVSzZrOGM5RDhDZ1lFQS9UMEcKNUY2NmZIWXdMWFJOU0Fqa3NES3BsYlUzWXRPcm9DNkkwZlBXdHJwSDloUDlPS1RsMTBXUFpVRzduSk9kVUJUTQpMSTlaaUd4cmdmR1VPQVVoWUVDakM1MHZMRmZGcFpOSWJNQ0FKNGdzZUdvb1VvQkMyc2ljWjlxYTBVZkNmU0JjClNZTFd4UFk5bmgxTXJtdlJkUWdGaTYwLzdhdGNmRWJkbzc3aG9PY0NnWUFjWUFzSzN0YytiRVE0WjNRWnpJbFQKalhaUERJYURRSjBRdnUyVUpRVEs3SUdoOWZ5OTAyWTVrY05LcmQ3VWN6azlzbG5jQ0I0VGNtQ000OCtsMlB3SgpmQm9iVzhwZDZYNXVpYWEzZDRxbWZlU2xrc3E5VG9IeG8za1JsWDlwTTFTYmN6RTNyVjFGamlvdkdyd0RXV3d1CnFkeWZQOFZkVWpjRjJIeVZ2TmRaWndLQmdRRHhuMy9xK0NPUlM2ZU9SekRSc1lLYVI4eWRSa254WnF1VDY3S3EKT0xFK3FpQ3RQOGRWZTZpOXJPWTBJL0xoWThzdXRKbFhUdk9MZ245VmZlNEJRWXZsN2VaajEzZENKUUUxaVlFSwpHdVpzVWJhMHNmMkZNbElYdEYvZmk2bzZVdkRVT01NMWRMeDlNOEg1RWxXdStycmdvbVhBTHU4WFUzQ3NOMldVCnJqVlVNd0tCZ1FDZlhEOE1yMElIWGR6cFlYL1VnTDQ2REVCUjB4aGt4YTUvQUl4c3Frcjgzeldad01FQ1E1dFoKdk5QZW9KUWVrMXI4M3ZRNHVpVlVLRUk2NmErU05wbnhDbDh0SVIwdjFwcGkyYnRVdDdrdEFjZWtnN0EwL1R6agpkSHc0eDBoSVVTb2pEYTQ1OUNRMk0zcXRBeHdvYXNlNERyQ3lBbmpKN0QxdWJEQ1d5Uy9Icnc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU9aT2Q5cTlhYmJDZ3pya3dLMHRleEF3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBNApNVEV3TmpRek1qTmFGdzB5TXpBNE1URXdOalF6TWpOYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFETnZwOU1ZYUVobE9kY3BtSlZSSGJjbzUwSmFBNXA0bG9hVnV3UnU4Q1RjRndYOXlyc3lOUVpYV1VOR0lQMQpNMGJBR0kxL2RIMlRIY2R6d0RDdU9NRUtCVzJ5U1J4L1hDNFZ2OHJTcnQzSktiSXJkSVIxWUd2QW9uTHVpdFlGCkx6T1dFR1dzS1BjcjkxV1E2WmZIWDdicVl2a1YvUUpWVFluZDNPRkt0NjlFdUFjN09yOXRiNHhJV3JxRGVhTXgKN2RVajNnVE05SG9rcjVRclFIN1M1V3RrL2cvVEo3R0twRS9qeloxenhaN04zOFJOWVpGM2dLT1ozbHhBU3M3bQpKemxmcnlzbHhpc21kVUE3MlFoYWxWeG41RXZSc3Q0UURMNUI5MzA3VmtPNDJKZkFmcjNmbW5yV01IcHpTL0srCitUZmljdDEzT3p5c0lYNTZON1hwSnNUWkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUFVVU5DWWZ2cDhsWFdadnF4Vy8wd1RWQ2J6UGEzSzB5Nk1wOTFaZmRQd1lHS05NUFJkV0tJbEQwMnEKL1ZKM2ZBV1AzcEw4VE1vSCt5VWxxRWdESEtvUDlQZzFCM3Ayb2tFOHNaVDdjSHR4U0orTlNkTzJseEVSV2U0VAovMU5tNC8vWGw1cVhCZWVmbHo2enM0VmMvK0tPL0JnZnpncTViaUhwamVISDhRcVRnVmw1U2h3b1RvQTVidDdiCjN5bitZM25aVStsdThXajQ5MjYvd1d1L2UwUDY0Z3ZJdDhMWDlTMHBJNXZZM3E4clR1eWgyalZFRDVIdmE0TUMKenJGSm5razVWT0UyTVRSYlZ4T0pnb3RkMzYzdmV4TmZJZjNkWWNDRHhMMkNTZE1XZkNhWmdLSGlFeHJDMCtGcgpzVFducHdFZ0llazJBbmN4UFFlbmRwQWdPSlNpCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBemI2ZlRHR2hJWlRuWEtaaVZVUjIzS09kQ1dnT2FlSmFHbGJzRWJ2QWszQmNGL2NxCjdNalVHVjFsRFJpRDlUTkd3QmlOZjNSOWt4M0hjOEF3cmpqQkNnVnRza2tjZjF3dUZiL0swcTdkeVNteUszU0UKZFdCcndLSnk3b3JXQlM4emxoQmxyQ2ozSy9kVmtPbVh4MSsyNm1MNUZmMENWVTJKM2R6aFNyZXZSTGdIT3pxLwpiVytNU0ZxNmczbWpNZTNWSTk0RXpQUjZKSytVSzBCKzB1VnJaUDRQMHlleGlxUlA0ODJkYzhXZXpkL0VUV0dSCmQ0Q2ptZDVjUUVyTzVpYzVYNjhySmNZckpuVkFPOWtJV3BWY1orUkwwYkxlRUF5K1FmZDlPMVpEdU5pWHdINjkKMzVwNjFqQjZjMHZ5dnZrMzRuTGRkenM4ckNGK2VqZTE2U2JFMlFJREFRQUJBb0lCQUJSVW5kRWlaSlc0N1JQTwpyVERYenhjR1krSW1FaWFNWTNMdTIrejBySmJsSjNTR3pBc1IzVU9VWXdQa1JFWGFoMGM4SmQ5T1Y0cE9Dd041CkhsWlk3VnBjSnZiVEdxbkxKaEtvSFJhc2lPWHo1Tk0rZEVoVSt0RFNQS0V0dnZCTU5jRENaZ21aRXJPWmdTOE0KcGg3aGFtWEcyZTQrVGhpM3pNUExxOGVDVnlObkRseEg2MXA3QjJ0VEQrbno4TVBnMEkyNWtoazNMbHBia08zSQpxTElESVhBREQ2dE8xN1IxRmtselZDdXlLalB6ajB5Z2s3U1hUTlpuZTNrcmY0WHdOYjFPSnFBTGxsZkJqdnNUClZXRnlNZ2lrY1dhYmoxbHVScEFKRGJGaytTMWdaMnZuVjhWQ1pXdzBNRFZpanNBSm9EZVFBcDYwZHRrSWY2UWwKRmo4bHZYRUNnWUVBei8wQmJkdXluV2ZQV0RUUDU3ejV5aFJoMG5FRzg0VWV0RFhsSGRLN0ZLNVVFODEwcTY2dgpxRVZRZjJPWTRFNUZmT2tOamRCNVJmWVgyN1J0TVhjLzVFbStwV0JXM0lWU05DdU9pTUVuNHJJOU0wT2NCUFhmCkU4U2pIblBDZGZ4VVgyV0ZJcjlZM3pNM0p6bEVoT1R0NE5sNEpNWmhqV2J4UVpVSzZrOGM5RDhDZ1lFQS9UMEcKNUY2NmZIWXdMWFJOU0Fqa3NES3BsYlUzWXRPcm9DNkkwZlBXdHJwSDloUDlPS1RsMTBXUFpVRzduSk9kVUJUTQpMSTlaaUd4cmdmR1VPQVVoWUVDakM1MHZMRmZGcFpOSWJNQ0FKNGdzZUdvb1VvQkMyc2ljWjlxYTBVZkNmU0JjClNZTFd4UFk5bmgxTXJtdlJkUWdGaTYwLzdhdGNmRWJkbzc3aG9PY0NnWUFjWUFzSzN0YytiRVE0WjNRWnpJbFQKalhaUERJYURRSjBRdnUyVUpRVEs3SUdoOWZ5OTAyWTVrY05LcmQ3VWN6azlzbG5jQ0I0VGNtQ000OCtsMlB3SgpmQm9iVzhwZDZYNXVpYWEzZDRxbWZlU2xrc3E5VG9IeG8za1JsWDlwTTFTYmN6RTNyVjFGamlvdkdyd0RXV3d1CnFkeWZQOFZkVWpjRjJIeVZ2TmRaWndLQmdRRHhuMy9xK0NPUlM2ZU9SekRSc1lLYVI4eWRSa254WnF1VDY3S3EKT0xFK3FpQ3RQOGRWZTZpOXJPWTBJL0xoWThzdXRKbFhUdk9MZ245VmZlNEJRWXZsN2VaajEzZENKUUUxaVlFSwpHdVpzVWJhMHNmMkZNbElYdEYvZmk2bzZVdkRVT01NMWRMeDlNOEg1RWxXdStycmdvbVhBTHU4WFUzQ3NOMldVCnJqVlVNd0tCZ1FDZlhEOE1yMElIWGR6cFlYL1VnTDQ2REVCUjB4aGt4YTUvQUl4c3Frcjgzeldad01FQ1E1dFoKdk5QZW9KUWVrMXI4M3ZRNHVpVlVLRUk2NmErU05wbnhDbDh0SVIwdjFwcGkyYnRVdDdrdEFjZWtnN0EwL1R6agpkSHc0eDBoSVVTb2pEYTQ1OUNRMk0zcXRBeHdvYXNlNERyQ3lBbmpKN0QxdWJEQ1d5Uy9Icnc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap-injector-k8s-tls\\",\\"namespace\\":\\"linkerd-viz\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap-injector-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/v1-secret-linkerd-viz-tap-injector-k8s-tls.yaml",
    "type": "kubernetes.io/tls",
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "ServerAuthorization",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"ServerAuthorization\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"grafana\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"client\\":{\\"unauthenticated\\":true},\\"server\\":{\\"name\\":\\"grafana\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "grafana",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-serverauthorization-linkerd-viz-grafana.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "ServerAuthorization",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"ServerAuthorization\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"proxy-admin\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"client\\":{\\"unauthenticated\\":true},\\"server\\":{\\"name\\":\\"proxy-admin\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "proxy-admin",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-serverauthorization-linkerd-viz-proxy-admin.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "dashboards.yaml": "apiVersion: 1
providers:
- name: 'default'
  orgId: 1
  folder: ''
  type: file
  disableDeletion: true
  editable: true
  options:
    path: /var/lib/grafana/dashboards
    homeDashboardId: linkerd-top-line",
      "datasources.yaml": "apiVersion: 1
datasources:
- name: prometheus
  type: prometheus
  access: proxy
  orgId: 1
  url: http://prometheus.linkerd-viz.svc.cluster.local:9090
  isDefault: true
  jsonData:
    timeInterval: \\"5s\\"
  version: 1
  editable: true",
      "grafana.ini": "instance_name = grafana
[server]
root_url = %(protocol)s://%(domain)s:/grafana/
[auth]
disable_login_form = true
[auth.anonymous]
enabled = true
org_role = Editor
[auth.basic]
enabled = false
[analytics]
check_for_updates = false
[panels]
disable_sanitize_html = true
[log]
mode = console
[log.console]
format = text
level = info",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"dashboards.yaml\\":\\"apiVersion: 1\\\\nproviders:\\\\n- name: 'default'\\\\n  orgId: 1\\\\n  folder: ''\\\\n  type: file\\\\n  disableDeletion: true\\\\n  editable: true\\\\n  options:\\\\n    path: /var/lib/grafana/dashboards\\\\n    homeDashboardId: linkerd-top-line\\",\\"datasources.yaml\\":\\"apiVersion: 1\\\\ndatasources:\\\\n- name: prometheus\\\\n  type: prometheus\\\\n  access: proxy\\\\n  orgId: 1\\\\n  url: http://prometheus.linkerd-viz.svc.cluster.local:9090\\\\n  isDefault: true\\\\n  jsonData:\\\\n    timeInterval: \\\\\\"5s\\\\\\"\\\\n  version: 1\\\\n  editable: true\\",\\"grafana.ini\\":\\"instance_name = grafana\\\\n[server]\\\\nroot_url = %(protocol)s://%(domain)s:/grafana/\\\\n[auth]\\\\ndisable_login_form = true\\\\n[auth.anonymous]\\\\nenabled = true\\\\norg_role = Editor\\\\n[auth.basic]\\\\nenabled = false\\\\n[analytics]\\\\ncheck_for_updates = false\\\\n[panels]\\\\ndisable_sanitize_html = true\\\\n[log]\\\\nmode = console\\\\n[log.console]\\\\nformat = text\\\\nlevel = info\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"grafana-config\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "grafana-config",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/v1-configmap-linkerd-viz-grafana-config.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"web\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"http\\",\\"port\\":8084,\\"targetPort\\":8084},{\\"name\\":\\"admin-http\\",\\"port\\":9994,\\"targetPort\\":9994}],\\"selector\\":{\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "web",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/v1-service-linkerd-viz-web.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"tap\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"tap\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/config\\":\\"1977e32926f655a5a4752905449a934b15c31ee0a061b57ebff5aa2a586d7ff6\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"api\\",\\"-api-namespace=linkerd\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-identity-trust-domain=cluster.local\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/tap:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9998},\\"initialDelaySeconds\\":10},\\"name\\":\\"tap\\",\\"ports\\":[{\\"containerPort\\":8088,\\"name\\":\\"grpc\\"},{\\"containerPort\\":8089,\\"name\\":\\"apiserver\\"},{\\"containerPort\\":9998,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9998}},\\"securityContext\\":{\\"runAsUser\\":2103},\\"volumeMounts\\":[{\\"mountPath\\":\\"/var/run/linkerd/tls\\",\\"name\\":\\"tls\\",\\"readOnly\\":true}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"tap\\",\\"volumes\\":[{\\"name\\":\\"tls\\",\\"secret\\":{\\"secretName\\":\\"tap-k8s-tls\\"}}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-tap.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/config": "1977e32926f655a5a4752905449a934b15c31ee0a061b57ebff5aa2a586d7ff6",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "labels": Object {
            "component": "tap",
            "linkerd.io/extension": "viz",
            "namespace": "linkerd-viz",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "api",
                "-api-namespace=linkerd",
                "-log-level=info",
                "-log-format=plain",
                "-identity-trust-domain=cluster.local",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/tap:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9998,
                },
                "initialDelaySeconds": 10,
              },
              "name": "tap",
              "ports": Array [
                Object {
                  "containerPort": 8088,
                  "name": "grpc",
                },
                Object {
                  "containerPort": 8089,
                  "name": "apiserver",
                },
                Object {
                  "containerPort": 9998,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9998,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "tap",
          "volumes": Array [
            Object {
              "name": "tls",
              "secret": Object {
                "secretName": "tap-k8s-tls",
              },
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"grafana\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"http\\",\\"port\\":3000,\\"targetPort\\":3000}],\\"selector\\":{\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "grafana",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/v1-service-linkerd-viz-grafana.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRQzQyZlBjc3B1VXhUaE1DdDVhMTE5VEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURneE1UQTJORE15TTFvWApEVEl6TURneE1UQTJORE15TTFvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHJYb3dJNWdpbUtmbEVOdU9QMjA0MnkKbUJpV0tYQjl6R0pjdEU1RHNyV3pZMHFySkFsMHlOQ1p4aFZpRDFCWUFFd3hGODcxdnpPdjdpUXpVcVNLTjJ2ZQpmOFZZNkNUejZjbVVYa1dyWmZaMHNORVBnSzYwcjVIM1ZaT3V3eFZta3UzL3FXT2Q4UFVxYUN2MWk1eHg1R3hRCmNXZmFSVWdWbUZQRHB5bUhvcEcrZlBkdmZDMWRtc1lJdEloYllVNGw0YWNvbHlUM3RWOG1tcFpKVjVqdWdzR3QKUnVDWTlucE1vZ0E5aUwxOWM5V0dESFFTbWVlWlZsTE90NG5BLzhOWEhMZlpiZDc2TG9lUUF3dGVPaXJZaFU1dApLNHZHNlZHMnc0RWh3ekpBeUhFMkJ1NHRnNnNrN3huOUFqcjB1TjJwNlV5QjFnR3paOTd2cWNyMC9vSkFPMThDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBM3UxT1ZINEVPaEZSRU9PMEp1TzZEY2FJeDZqdnhXClRVR2ZQeS8rdTllcE9oY0pGSyszTnJFR2E4SDVwU0dvVWRVTitvUS9MTVZ0REh3ZnU3WnF2Y0NXWDk4bmtHaUMKOTVHYnRNeENpY2hjS2gwdkppcDdHT3VKeENQelpzRkJUTEwxWHJFalhIYmI3YzFtZnNzWTFGRFBtOWltSmVsUgpUb2lLQlZsV1o4akhaQWQyZ28yeCtlWHNFY3hQTVdFTFB5dnB1N1gweDkwaEtxRlp4OWRyR1RwZkdMd21nNXB0CkwydnIwM3FUVzJPdVdkMU5DMExDaWE2SFEzSlo4UnZJN2FDRUNVZkhqb0lsaGM4d0RkUytEbjdxM0RCQVh3SXUKRlREMlk4eGVZWlZqNzFKM3pRcjNMdGxScnd1TmlZbnhwSEkyYlRZbm90RkpwZjdkZ0w0ckVDaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdXRlakFqbUNLWXArVVEyNDQvYlRqYktZR0pZcGNIM01ZbHkwVGtPeXRiTmpTcXNrCkNYVEkwSm5HRldJUFVGZ0FUREVYenZXL002L3VKRE5TcElvM2E5NS94VmpvSlBQcHlaUmVSYXRsOW5TdzBRK0EKcnJTdmtmZFZrNjdERldhUzdmK3BZNTN3OVNwb0svV0xuSEhrYkZCeFo5cEZTQldZVThPbktZZWlrYjU4OTI5OApMVjJheGdpMGlGdGhUaVhocHlpWEpQZTFYeWFhbGtsWG1PNkN3YTFHNEpqMmVreWlBRDJJdlgxejFZWU1kQktaCjU1bFdVczYzaWNEL3cxY2N0OWx0M3ZvdWg1QURDMTQ2S3RpRlRtMHJpOGJwVWJiRGdTSERNa0RJY1RZRzdpMkQKcXlUdkdmMENPdlM0M2FucFRJSFdBYk5uM3UrcHl2VCtna0E3WHdJREFRQUJBb0lCQUhrbW43VXVrdjdhcFlOcgpFV3NIdmk5UUVaMUhxUUVmSU9yYXo3TTc1R0k3T25QTk91WEN5dit2NWlneFdGcXhaU2dDWVR5NlRrdDJsVVQxCjNtMkFqZVVzOWM2Q0VxejdWNmwwd2hnTXhtV2pUbytRck5FYnFnaE14em1taFNxWVEwZDlrbGxjclVSYlJnYlQKQmI3Z2Zzdlk4Vi8wd1IyM212a2RrWU8xUmkyWHFXODA5eGp3MDhLQnd4dHpCRTBRSE9UQ1ZnOGhzakIrTmQzbgpQQm9DVWQxdVNsTmh6QWw1MmJCc2dMR1JObUhOalloVWpkNDJSVUZybnhIWlNNZldkMXQ5ZFFVc2pjTjhjREJSCkgyTmdxckNnVWRQejBLUCtBMDJJT0ZNeTZyVGNQUmtiQWlEdkVKMnlDSGFhaFc1Y0RZaUpubGR3Zm5mZ3JJK2MKeFBwWlJ3a0NnWUVBeklrMEtveVpQSFRBSmJZeHY1SWgyVkFMQTVWbHJ1blB5bTFGTXQ5Q25tZWVMaHU2cEtZRgphakVjTFhPSSthc2pPTlpGSTc2Y2V4cUE0c2hwdUZyQmR3RTV4ejYrSm5PUVd5Q0JDWForWC9Bb3l5SFJDUEpNCmo3cXBrYjV3d0hMaEhvTWNpR0lHdmowdGdPOFNqZ1hHd3BGSWxqR2I2TEsvVzhKcFd0RVB3YnNDZ1lFQTZkcTcKV3k3Wlk0aFJWbWloR0F0Qmp2SlhONmlESWFIdkk4elFpakNuVlJqUFBEckt5dVdNNUxKeW4zUGxjL3dQWHU4RAp5d0E0aXFwcWQ2Ukx3MGpCekR1TXNJVWFtTy9NUENoSGZWMnVXNzlNcUQ3Sy9JQkVZVnQrZEFZUzJrYmh4RkdrCnRtcTRUOGxSZUpUZmkrNC9FZHdkZEVQN0piTEpraUs3R0VYQjhLMENnWUVBanZFQU5SQkhjem5BbzFwZUVCem4KYlFFRWdYK2lMWWlYd0VkM1NlTS9vb2FWeEhGNmtlQzQvZ3JPUDNGejg5QkhjRXhHeTRGRnlMNnYvazNEbktSSQplb3V2dm5BNTRaTjMra2VRQm5YNlFjQU1NbEl5elViUWZNNGQvWTRUTEZ2Y3VqODA3SmRkVVF4ZVJiSk96RlI3CklMVDUvb1V6Q1lBS1BlMXpSWlcvcGtzQ2dZRUFxTUJLaXRZWDBSZEJlcFV1Q21lMCt5NHRlZUNFSC9UMjJHS24KNmRDS0w0SWpxVmJUbCs1bDZYSkwvSHhwaTNUTXNyalBoK0cwNjN0bU1NZkNWRDFnZTd4TkhlUXUrVVd4bjRlQgpieG4zQkFYYmoxMGdwV3o1NnpkVzNPcTFHQVltVE1DTmw0VVRVNS8yeG9qSGQvYUlWSjcrTWpRTU8zdjBzUnVXCjMwRVhYbEVDZ1lFQWg3eFFhOFV1cW5QYmJ1TXlHVmRBenJITjYvYlorRm14R3FobXNHQ1dGK0EzeWtNeUprUWMKZi9HbkZ1ek1tSWRmYkhHM0pOUGMrNEYvL3N3azcyRi9rdFJtTE5Yc3hjUm96M0lNTitkeXE5dGUxeDJSN3NEbApZN3hORjdkTEVIQ2JXQTJuN2Nmc2RQQTJiaGJxNEhJU3VZcW0xWE1yVnF2THlETitjejZJT01NPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"tls.crt\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRQzQyZlBjc3B1VXhUaE1DdDVhMTE5VEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURneE1UQTJORE15TTFvWApEVEl6TURneE1UQTJORE15TTFvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHJYb3dJNWdpbUtmbEVOdU9QMjA0MnkKbUJpV0tYQjl6R0pjdEU1RHNyV3pZMHFySkFsMHlOQ1p4aFZpRDFCWUFFd3hGODcxdnpPdjdpUXpVcVNLTjJ2ZQpmOFZZNkNUejZjbVVYa1dyWmZaMHNORVBnSzYwcjVIM1ZaT3V3eFZta3UzL3FXT2Q4UFVxYUN2MWk1eHg1R3hRCmNXZmFSVWdWbUZQRHB5bUhvcEcrZlBkdmZDMWRtc1lJdEloYllVNGw0YWNvbHlUM3RWOG1tcFpKVjVqdWdzR3QKUnVDWTlucE1vZ0E5aUwxOWM5V0dESFFTbWVlWlZsTE90NG5BLzhOWEhMZlpiZDc2TG9lUUF3dGVPaXJZaFU1dApLNHZHNlZHMnc0RWh3ekpBeUhFMkJ1NHRnNnNrN3huOUFqcjB1TjJwNlV5QjFnR3paOTd2cWNyMC9vSkFPMThDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBM3UxT1ZINEVPaEZSRU9PMEp1TzZEY2FJeDZqdnhXClRVR2ZQeS8rdTllcE9oY0pGSyszTnJFR2E4SDVwU0dvVWRVTitvUS9MTVZ0REh3ZnU3WnF2Y0NXWDk4bmtHaUMKOTVHYnRNeENpY2hjS2gwdkppcDdHT3VKeENQelpzRkJUTEwxWHJFalhIYmI3YzFtZnNzWTFGRFBtOWltSmVsUgpUb2lLQlZsV1o4akhaQWQyZ28yeCtlWHNFY3hQTVdFTFB5dnB1N1gweDkwaEtxRlp4OWRyR1RwZkdMd21nNXB0CkwydnIwM3FUVzJPdVdkMU5DMExDaWE2SFEzSlo4UnZJN2FDRUNVZkhqb0lsaGM4d0RkUytEbjdxM0RCQVh3SXUKRlREMlk4eGVZWlZqNzFKM3pRcjNMdGxScnd1TmlZbnhwSEkyYlRZbm90RkpwZjdkZ0w0ckVDaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"tls.key\\":\\"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdXRlakFqbUNLWXArVVEyNDQvYlRqYktZR0pZcGNIM01ZbHkwVGtPeXRiTmpTcXNrCkNYVEkwSm5HRldJUFVGZ0FUREVYenZXL002L3VKRE5TcElvM2E5NS94VmpvSlBQcHlaUmVSYXRsOW5TdzBRK0EKcnJTdmtmZFZrNjdERldhUzdmK3BZNTN3OVNwb0svV0xuSEhrYkZCeFo5cEZTQldZVThPbktZZWlrYjU4OTI5OApMVjJheGdpMGlGdGhUaVhocHlpWEpQZTFYeWFhbGtsWG1PNkN3YTFHNEpqMmVreWlBRDJJdlgxejFZWU1kQktaCjU1bFdVczYzaWNEL3cxY2N0OWx0M3ZvdWg1QURDMTQ2S3RpRlRtMHJpOGJwVWJiRGdTSERNa0RJY1RZRzdpMkQKcXlUdkdmMENPdlM0M2FucFRJSFdBYk5uM3UrcHl2VCtna0E3WHdJREFRQUJBb0lCQUhrbW43VXVrdjdhcFlOcgpFV3NIdmk5UUVaMUhxUUVmSU9yYXo3TTc1R0k3T25QTk91WEN5dit2NWlneFdGcXhaU2dDWVR5NlRrdDJsVVQxCjNtMkFqZVVzOWM2Q0VxejdWNmwwd2hnTXhtV2pUbytRck5FYnFnaE14em1taFNxWVEwZDlrbGxjclVSYlJnYlQKQmI3Z2Zzdlk4Vi8wd1IyM212a2RrWU8xUmkyWHFXODA5eGp3MDhLQnd4dHpCRTBRSE9UQ1ZnOGhzakIrTmQzbgpQQm9DVWQxdVNsTmh6QWw1MmJCc2dMR1JObUhOalloVWpkNDJSVUZybnhIWlNNZldkMXQ5ZFFVc2pjTjhjREJSCkgyTmdxckNnVWRQejBLUCtBMDJJT0ZNeTZyVGNQUmtiQWlEdkVKMnlDSGFhaFc1Y0RZaUpubGR3Zm5mZ3JJK2MKeFBwWlJ3a0NnWUVBeklrMEtveVpQSFRBSmJZeHY1SWgyVkFMQTVWbHJ1blB5bTFGTXQ5Q25tZWVMaHU2cEtZRgphakVjTFhPSSthc2pPTlpGSTc2Y2V4cUE0c2hwdUZyQmR3RTV4ejYrSm5PUVd5Q0JDWForWC9Bb3l5SFJDUEpNCmo3cXBrYjV3d0hMaEhvTWNpR0lHdmowdGdPOFNqZ1hHd3BGSWxqR2I2TEsvVzhKcFd0RVB3YnNDZ1lFQTZkcTcKV3k3Wlk0aFJWbWloR0F0Qmp2SlhONmlESWFIdkk4elFpakNuVlJqUFBEckt5dVdNNUxKeW4zUGxjL3dQWHU4RAp5d0E0aXFwcWQ2Ukx3MGpCekR1TXNJVWFtTy9NUENoSGZWMnVXNzlNcUQ3Sy9JQkVZVnQrZEFZUzJrYmh4RkdrCnRtcTRUOGxSZUpUZmkrNC9FZHdkZEVQN0piTEpraUs3R0VYQjhLMENnWUVBanZFQU5SQkhjem5BbzFwZUVCem4KYlFFRWdYK2lMWWlYd0VkM1NlTS9vb2FWeEhGNmtlQzQvZ3JPUDNGejg5QkhjRXhHeTRGRnlMNnYvazNEbktSSQplb3V2dm5BNTRaTjMra2VRQm5YNlFjQU1NbEl5elViUWZNNGQvWTRUTEZ2Y3VqODA3SmRkVVF4ZVJiSk96RlI3CklMVDUvb1V6Q1lBS1BlMXpSWlcvcGtzQ2dZRUFxTUJLaXRZWDBSZEJlcFV1Q21lMCt5NHRlZUNFSC9UMjJHS24KNmRDS0w0SWpxVmJUbCs1bDZYSkwvSHhwaTNUTXNyalBoK0cwNjN0bU1NZkNWRDFnZTd4TkhlUXUrVVd4bjRlQgpieG4zQkFYYmoxMGdwV3o1NnpkVzNPcTFHQVltVE1DTmw0VVRVNS8yeG9qSGQvYUlWSjcrTWpRTU8zdjBzUnVXCjMwRVhYbEVDZ1lFQWg3eFFhOFV1cW5QYmJ1TXlHVmRBenJITjYvYlorRm14R3FobXNHQ1dGK0EzeWtNeUprUWMKZi9HbkZ1ek1tSWRmYkhHM0pOUGMrNEYvL3N3azcyRi9rdFJtTE5Yc3hjUm96M0lNTitkeXE5dGUxeDJSN3NEbApZN3hORjdkTEVIQ2JXQTJuN2Nmc2RQQTJiaGJxNEhJU3VZcW0xWE1yVnF2THlETitjejZJT01NPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"tap-k8s-tls\\",\\"namespace\\":\\"linkerd-viz\\"},\\"type\\":\\"kubernetes.io/tls\\"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/v1-secret-linkerd-viz-tap-k8s-tls.yaml",
    "type": "kubernetes.io/tls",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-tap-auth-delegator\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"system:auth-delegator\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"tap\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "linkerd-linkerd-viz-tap-auth-delegator",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-tap-auth-delegator.yaml",
  },
  Object {
    "apiVersion": "apiregistration.k8s.io/v1",
    "kind": "APIService",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apiregistration.k8s.io/v1\\",\\"kind\\":\\"APIService\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"v1alpha1.tap.linkerd.io\\"},\\"spec\\":{\\"caBundle\\":\\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRQzQyZlBjc3B1VXhUaE1DdDVhMTE5VEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURneE1UQTJORE15TTFvWApEVEl6TURneE1UQTJORE15TTFvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHJYb3dJNWdpbUtmbEVOdU9QMjA0MnkKbUJpV0tYQjl6R0pjdEU1RHNyV3pZMHFySkFsMHlOQ1p4aFZpRDFCWUFFd3hGODcxdnpPdjdpUXpVcVNLTjJ2ZQpmOFZZNkNUejZjbVVYa1dyWmZaMHNORVBnSzYwcjVIM1ZaT3V3eFZta3UzL3FXT2Q4UFVxYUN2MWk1eHg1R3hRCmNXZmFSVWdWbUZQRHB5bUhvcEcrZlBkdmZDMWRtc1lJdEloYllVNGw0YWNvbHlUM3RWOG1tcFpKVjVqdWdzR3QKUnVDWTlucE1vZ0E5aUwxOWM5V0dESFFTbWVlWlZsTE90NG5BLzhOWEhMZlpiZDc2TG9lUUF3dGVPaXJZaFU1dApLNHZHNlZHMnc0RWh3ekpBeUhFMkJ1NHRnNnNrN3huOUFqcjB1TjJwNlV5QjFnR3paOTd2cWNyMC9vSkFPMThDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBM3UxT1ZINEVPaEZSRU9PMEp1TzZEY2FJeDZqdnhXClRVR2ZQeS8rdTllcE9oY0pGSyszTnJFR2E4SDVwU0dvVWRVTitvUS9MTVZ0REh3ZnU3WnF2Y0NXWDk4bmtHaUMKOTVHYnRNeENpY2hjS2gwdkppcDdHT3VKeENQelpzRkJUTEwxWHJFalhIYmI3YzFtZnNzWTFGRFBtOWltSmVsUgpUb2lLQlZsV1o4akhaQWQyZ28yeCtlWHNFY3hQTVdFTFB5dnB1N1gweDkwaEtxRlp4OWRyR1RwZkdMd21nNXB0CkwydnIwM3FUVzJPdVdkMU5DMExDaWE2SFEzSlo4UnZJN2FDRUNVZkhqb0lsaGM4d0RkUytEbjdxM0RCQVh3SXUKRlREMlk4eGVZWlZqNzFKM3pRcjNMdGxScnd1TmlZbnhwSEkyYlRZbm90RkpwZjdkZ0w0ckVDaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\\",\\"group\\":\\"tap.linkerd.io\\",\\"groupPriorityMinimum\\":1000,\\"service\\":{\\"name\\":\\"tap\\",\\"namespace\\":\\"linkerd-viz\\"},\\"version\\":\\"v1alpha1\\",\\"versionPriority\\":100}}
",
      },
      "name": "v1alpha1.tap.linkerd.io",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/apiregistration.k8s.io_v1-apiservice-default-v1alpha1.tap.linkerd.io.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "Server",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"Server\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"metrics-api\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"podSelector\\":{\\"matchLabels\\":{\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"}},\\"port\\":\\"http\\",\\"proxyProtocol\\":\\"HTTP/1\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "metrics-api",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-server-linkerd-viz-metrics-api.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "linkerd.io/v1alpha2",
    "kind": "ServiceProfile",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"linkerd.io/v1alpha2\\",\\"kind\\":\\"ServiceProfile\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"grafana.linkerd-viz.svc.cluster.local\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"routes\\":[{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/api/annotations\\"},\\"name\\":\\"GET /api/annotations\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/api/dashboards/tags\\"},\\"name\\":\\"GET /api/dashboards/tags\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/api/dashboards/uid/.*\\"},\\"name\\":\\"GET /api/dashboards/uid/{uid}\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/api/dashboard/.*\\"},\\"name\\":\\"GET /api/dashboard/{dashboard}\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/api/datasources/proxy/1/api/v1/series\\"},\\"name\\":\\"GET /api/datasources/proxy/1/api/v1/series\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/api/datasources/proxy/1/api/v1/query_range\\"},\\"name\\":\\"GET /api/datasources/proxy/1/api/v1/query_range\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/api/search\\"},\\"name\\":\\"GET /api/search\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/d/[^/]*/.*\\"},\\"name\\":\\"GET /d/{uid}/{dashboard-name}\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/public/build/.*\\\\\\\\.css\\"},\\"name\\":\\"GET /public/build/{style}.css\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/public/fonts/.*\\"},\\"name\\":\\"GET /public/fonts/{font}\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/public/img/.*\\"},\\"name\\":\\"GET /public/img/{img}\\"}]}}
",
      },
      "name": "grafana.linkerd-viz.svc.cluster.local",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/linkerd.io_v1alpha2-serviceprofile-linkerd-viz-grafana.linkerd-viz.svc.cluster.local.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"linkerd-linkerd-viz-tap-auth-reader\\",\\"namespace\\":\\"kube-system\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"extension-apiserver-authentication-reader\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"tap\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "linkerd-linkerd-viz-tap-auth-reader",
      "namespace": "kube-system",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-kube-system-linkerd-linkerd-viz-tap-auth-reader.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-metrics-api\\"},\\"rules\\":[{\\"apiGroups\\":[\\"extensions\\",\\"apps\\"],\\"resources\\":[\\"daemonsets\\",\\"deployments\\",\\"replicasets\\",\\"statefulsets\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"extensions\\",\\"batch\\"],\\"resources\\":[\\"cronjobs\\",\\"jobs\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"pods\\",\\"endpoints\\",\\"services\\",\\"replicationcontrollers\\",\\"namespaces\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"linkerd.io\\"],\\"resources\\":[\\"serviceprofiles\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"split.smi-spec.io\\"],\\"resources\\":[\\"trafficsplits\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"policy.linkerd.io\\"],\\"resources\\":[\\"servers\\",\\"serverauthorizations\\"],\\"verbs\\":[\\"list\\",\\"get\\"]}]}
",
      },
      "name": "linkerd-linkerd-viz-metrics-api",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-viz-metrics-api.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"tap\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
      },
      "name": "tap",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/v1-serviceaccount-linkerd-viz-tap.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-web-check\\"},\\"rules\\":[{\\"apiGroups\\":[\\"rbac.authorization.k8s.io\\"],\\"resources\\":[\\"clusterroles\\",\\"clusterrolebindings\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"apiextensions.k8s.io\\"],\\"resources\\":[\\"customresourcedefinitions\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"admissionregistration.k8s.io\\"],\\"resources\\":[\\"mutatingwebhookconfigurations\\",\\"validatingwebhookconfigurations\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"linkerd.io\\"],\\"resources\\":[\\"serviceprofiles\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"nodes\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"apiregistration.k8s.io\\"],\\"resources\\":[\\"apiservices\\"],\\"verbs\\":[\\"get\\"]}]}
",
      },
      "name": "linkerd-linkerd-viz-web-check",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-viz-web-check.yaml",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "auth": "YWRtaW46JDJiJDEwJEEwS2pIb2oydlNhMFhOeFVyU0RLbGUzcHk5SHE5c2xVbG51M3ZUeXJnWlZWa2d2cDJZMWUu",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"auth\\":\\"YWRtaW46JDJiJDEwJEEwS2pIb2oydlNhMFhOeFVyU0RLbGUzcHk5SHE5c2xVbG51M3ZUeXJnWlZWa2d2cDJZMWUu\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-viz-ingress-auth\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
      },
      "name": "linkerd-viz-ingress-auth",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/v1-secret-linkerd-viz-linkerd-viz-ingress-auth.yaml",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "prometheus.yml": "global:
  evaluation_interval: 10s
  scrape_interval: 10s
  scrape_timeout: 10s

rule_files:
- /etc/prometheus/*_rules.yml
- /etc/prometheus/*_rules.yaml

scrape_configs:
- job_name: 'prometheus'
  static_configs:
  - targets: ['localhost:9090']

- job_name: 'grafana'
  kubernetes_sd_configs:
  - role: pod
    namespaces:
      names: ['linkerd-viz']
  relabel_configs:
  - source_labels:
    - __meta_kubernetes_pod_container_name
    action: keep
    regex: ^grafana$

#  Required for: https://grafana.com/grafana/dashboards/315
- job_name: 'kubernetes-nodes-cadvisor'
  scheme: https
  tls_config:
    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    insecure_skip_verify: true
  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  kubernetes_sd_configs:
  - role: node
  relabel_configs:
  - action: labelmap
    regex: __meta_kubernetes_node_label_(.+)
  - target_label: __address__
    replacement: kubernetes.default.svc:443
  - source_labels: [__meta_kubernetes_node_name]
    regex: (.+)
    target_label: __metrics_path__
    replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
  metric_relabel_configs:
  - source_labels: [__name__]
    regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
    action: keep
  - source_labels: [__name__]
    regex: 'container_memory_failures_total' # unneeded large metric
    action: drop

- job_name: 'linkerd-controller'
  kubernetes_sd_configs:
  - role: pod
    namespaces:
      names:
      - 'linkerd'
      - 'linkerd-viz'
  relabel_configs:
  - source_labels:
    - __meta_kubernetes_pod_container_port_name
    action: keep
    regex: admin-http
  - source_labels: [__meta_kubernetes_pod_container_name]
    action: replace
    target_label: component

- job_name: 'linkerd-service-mirror'
  kubernetes_sd_configs:
  - role: pod
  relabel_configs:
  - source_labels:
    - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
    - __meta_kubernetes_pod_container_port_name
    action: keep
    regex: linkerd-service-mirror;admin-http$
  - source_labels: [__meta_kubernetes_pod_container_name]
    action: replace
    target_label: component

- job_name: 'linkerd-proxy'
  kubernetes_sd_configs:
  - role: pod
  relabel_configs:
  - source_labels:
    - __meta_kubernetes_pod_container_name
    - __meta_kubernetes_pod_container_port_name
    - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
    action: keep
    regex: ^linkerd-proxy;linkerd-admin;linkerd$
  - source_labels: [__meta_kubernetes_namespace]
    action: replace
    target_label: namespace
  - source_labels: [__meta_kubernetes_pod_name]
    action: replace
    target_label: pod
  # special case k8s' \\"job\\" label, to not interfere with prometheus' \\"job\\"
  # label
  # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
  # k8s_job=foo
  - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
    action: replace
    target_label: k8s_job
  # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
  - action: labeldrop
    regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
  # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
  # deployment=foo
  - action: labelmap
    regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
  # drop all labels that we just made copies of in the previous labelmap
  - action: labeldrop
    regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
  # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
  # foo=bar
  - action: labelmap
    regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
  # Copy all pod labels to tmp labels
  - action: labelmap
    regex: __meta_kubernetes_pod_label_(.+)
    replacement: __tmp_pod_label_$1
  # Take \`linkerd_io_\` prefixed labels and copy them without the prefix
  - action: labelmap
    regex: __tmp_pod_label_linkerd_io_(.+)
    replacement:  __tmp_pod_label_$1
  # Drop the \`linkerd_io_\` originals
  - action: labeldrop
    regex: __tmp_pod_label_linkerd_io_(.+)
  # Copy tmp labels into real labels
  - action: labelmap
    regex: __tmp_pod_label_(.+)",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"prometheus.yml\\":\\"global:\\\\n  evaluation_interval: 10s\\\\n  scrape_interval: 10s\\\\n  scrape_timeout: 10s\\\\n\\\\nrule_files:\\\\n- /etc/prometheus/*_rules.yml\\\\n- /etc/prometheus/*_rules.yaml\\\\n\\\\nscrape_configs:\\\\n- job_name: 'prometheus'\\\\n  static_configs:\\\\n  - targets: ['localhost:9090']\\\\n\\\\n- job_name: 'grafana'\\\\n  kubernetes_sd_configs:\\\\n  - role: pod\\\\n    namespaces:\\\\n      names: ['linkerd-viz']\\\\n  relabel_configs:\\\\n  - source_labels:\\\\n    - __meta_kubernetes_pod_container_name\\\\n    action: keep\\\\n    regex: ^grafana$\\\\n\\\\n#  Required for: https://grafana.com/grafana/dashboards/315\\\\n- job_name: 'kubernetes-nodes-cadvisor'\\\\n  scheme: https\\\\n  tls_config:\\\\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\\\\n    insecure_skip_verify: true\\\\n  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\\\\n  kubernetes_sd_configs:\\\\n  - role: node\\\\n  relabel_configs:\\\\n  - action: labelmap\\\\n    regex: __meta_kubernetes_node_label_(.+)\\\\n  - target_label: __address__\\\\n    replacement: kubernetes.default.svc:443\\\\n  - source_labels: [__meta_kubernetes_node_name]\\\\n    regex: (.+)\\\\n    target_label: __metrics_path__\\\\n    replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor\\\\n  metric_relabel_configs:\\\\n  - source_labels: [__name__]\\\\n    regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'\\\\n    action: keep\\\\n  - source_labels: [__name__]\\\\n    regex: 'container_memory_failures_total' # unneeded large metric\\\\n    action: drop\\\\n\\\\n- job_name: 'linkerd-controller'\\\\n  kubernetes_sd_configs:\\\\n  - role: pod\\\\n    namespaces:\\\\n      names:\\\\n      - 'linkerd'\\\\n      - 'linkerd-viz'\\\\n  relabel_configs:\\\\n  - source_labels:\\\\n    - __meta_kubernetes_pod_container_port_name\\\\n    action: keep\\\\n    regex: admin-http\\\\n  - source_labels: [__meta_kubernetes_pod_container_name]\\\\n    action: replace\\\\n    target_label: component\\\\n\\\\n- job_name: 'linkerd-service-mirror'\\\\n  kubernetes_sd_configs:\\\\n  - role: pod\\\\n  relabel_configs:\\\\n  - source_labels:\\\\n    - __meta_kubernetes_pod_label_linkerd_io_control_plane_component\\\\n    - __meta_kubernetes_pod_container_port_name\\\\n    action: keep\\\\n    regex: linkerd-service-mirror;admin-http$\\\\n  - source_labels: [__meta_kubernetes_pod_container_name]\\\\n    action: replace\\\\n    target_label: component\\\\n\\\\n- job_name: 'linkerd-proxy'\\\\n  kubernetes_sd_configs:\\\\n  - role: pod\\\\n  relabel_configs:\\\\n  - source_labels:\\\\n    - __meta_kubernetes_pod_container_name\\\\n    - __meta_kubernetes_pod_container_port_name\\\\n    - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns\\\\n    action: keep\\\\n    regex: ^linkerd-proxy;linkerd-admin;linkerd$\\\\n  - source_labels: [__meta_kubernetes_namespace]\\\\n    action: replace\\\\n    target_label: namespace\\\\n  - source_labels: [__meta_kubernetes_pod_name]\\\\n    action: replace\\\\n    target_label: pod\\\\n  # special case k8s' \\\\\\"job\\\\\\" label, to not interfere with prometheus' \\\\\\"job\\\\\\"\\\\n  # label\\\\n  # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =\\\\u003e\\\\n  # k8s_job=foo\\\\n  - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]\\\\n    action: replace\\\\n    target_label: k8s_job\\\\n  # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job\\\\n  - action: labeldrop\\\\n    regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job\\\\n  # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =\\\\u003e\\\\n  # deployment=foo\\\\n  - action: labelmap\\\\n    regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)\\\\n  # drop all labels that we just made copies of in the previous labelmap\\\\n  - action: labeldrop\\\\n    regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)\\\\n  # __meta_kubernetes_pod_label_linkerd_io_foo=bar =\\\\u003e\\\\n  # foo=bar\\\\n  - action: labelmap\\\\n    regex: __meta_kubernetes_pod_label_linkerd_io_(.+)\\\\n  # Copy all pod labels to tmp labels\\\\n  - action: labelmap\\\\n    regex: __meta_kubernetes_pod_label_(.+)\\\\n    replacement: __tmp_pod_label_$1\\\\n  # Take \`linkerd_io_\` prefixed labels and copy them without the prefix\\\\n  - action: labelmap\\\\n    regex: __tmp_pod_label_linkerd_io_(.+)\\\\n    replacement:  __tmp_pod_label_$1\\\\n  # Drop the \`linkerd_io_\` originals\\\\n  - action: labeldrop\\\\n    regex: __tmp_pod_label_linkerd_io_(.+)\\\\n  # Copy tmp labels into real labels\\\\n  - action: labelmap\\\\n    regex: __tmp_pod_label_(.+)\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"prometheus-config\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "prometheus-config",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/v1-configmap-linkerd-viz-prometheus-config.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-prometheus\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-viz-prometheus\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"prometheus\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "linkerd-linkerd-viz-prometheus",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-prometheus.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap-injector\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap-injector\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"tap-injector\\",\\"port\\":443,\\"targetPort\\":\\"tap-injector\\"}],\\"selector\\":{\\"component\\":\\"tap-injector\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap-injector",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/v1-service-linkerd-viz-tap-injector.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "Server",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"Server\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"admin\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"podSelector\\":{\\"matchLabels\\":{\\"linkerd.io/extension\\":\\"viz\\"}},\\"port\\":\\"admin-http\\",\\"proxyProtocol\\":\\"HTTP/1\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "admin",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-server-linkerd-viz-admin.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-web-api\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\"],\\"verbs\\":[\\"list\\"]}]}
",
      },
      "name": "linkerd-linkerd-viz-web-api",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-viz-web-api.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": Object {
      "annotations": Object {
        "config.linkerd.io/proxy-await": "enabled",
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Namespace\\",\\"metadata\\":{\\"annotations\\":{\\"config.linkerd.io/proxy-await\\":\\"enabled\\",\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-viz\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/v1-namespace-default-linkerd-viz.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"prometheus\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"admin-http\\",\\"port\\":9090,\\"targetPort\\":9090}],\\"selector\\":{\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "prometheus",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/v1-service-linkerd-viz-prometheus.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "Server",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"Server\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap-api\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"podSelector\\":{\\"matchLabels\\":{\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\"}},\\"port\\":\\"apiserver\\",\\"proxyProtocol\\":\\"TLS\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap-api",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-server-linkerd-viz-tap-api.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": Object {
      "annotations": Object {
        "cert-manager.io/cluster-issuer": "letsencrypt-cluster-issuer",
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"networking.k8s.io/v1\\",\\"kind\\":\\"Ingress\\",\\"metadata\\":{\\"annotations\\":{\\"cert-manager.io/cluster-issuer\\":\\"letsencrypt-cluster-issuer\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"linkerd-viz-ingress\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"ingressClassName\\":\\"nginx\\",\\"rules\\":[{\\"host\\":\\"linkerd.localhost:8080\\",\\"http\\":{\\"paths\\":[{\\"backend\\":{\\"service\\":{\\"name\\":\\"web\\",\\"port\\":{\\"number\\":8084}}},\\"path\\":\\"/\\",\\"pathType\\":\\"Prefix\\"}]}}],\\"tls\\":[{\\"hosts\\":[\\"linkerd.localhost:8080\\"],\\"secretName\\":\\"linkerd-nginx-ingress-tls\\"}]}}
",
      },
      "name": "linkerd-viz-ingress",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/networking.k8s.io_v1-ingress-linkerd-viz-linkerd-viz-ingress.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-web-admin\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-viz-tap-admin\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"web\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "linkerd-linkerd-viz-web-admin",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-web-admin.yaml",
  },
  Object {
    "apiVersion": "linkerd.io/v1alpha2",
    "kind": "ServiceProfile",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"linkerd.io/v1alpha2\\",\\"kind\\":\\"ServiceProfile\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"prometheus.linkerd-viz.svc.cluster.local\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"routes\\":[{\\"condition\\":{\\"method\\":\\"POST\\",\\"pathRegex\\":\\"/api/v1/query\\"},\\"name\\":\\"POST /api/v1/query\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/api/v1/query_range\\"},\\"name\\":\\"GET /api/v1/query_range\\"},{\\"condition\\":{\\"method\\":\\"GET\\",\\"pathRegex\\":\\"/api/v1/series\\"},\\"name\\":\\"GET /api/v1/series\\"}]}}
",
      },
      "name": "prometheus.linkerd-viz.svc.cluster.local",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/linkerd.io_v1alpha2-serviceprofile-linkerd-viz-prometheus.linkerd-viz.svc.cluster.local.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"tap-injector\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
      },
      "name": "tap-injector",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/v1-serviceaccount-linkerd-viz-tap-injector.yaml",
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "Server",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"Server\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap-injector\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap-injector-webhook\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"podSelector\\":{\\"matchLabels\\":{\\"component\\":\\"tap-injector\\",\\"linkerd.io/extension\\":\\"viz\\"}},\\"port\\":\\"tap-injector\\",\\"proxyProtocol\\":\\"TLS\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap-injector-webhook",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-server-linkerd-viz-tap-injector-webhook.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"metrics-api\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
      },
      "name": "metrics-api",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/v1-serviceaccount-linkerd-viz-metrics-api.yaml",
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "ServerAuthorization",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"ServerAuthorization\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"tap\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"client\\":{\\"unauthenticated\\":true},\\"server\\":{\\"name\\":\\"tap-api\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-serverauthorization-linkerd-viz-tap.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"Role\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd\\"},\\"name\\":\\"web\\",\\"namespace\\":\\"linkerd\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resourceNames\\":[\\"linkerd-config\\"],\\"resources\\":[\\"configmaps\\"],\\"verbs\\":[\\"get\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\",\\"configmaps\\"],\\"verbs\\":[\\"get\\"]},{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"serviceaccounts\\",\\"pods\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"apps\\"],\\"resources\\":[\\"replicasets\\"],\\"verbs\\":[\\"list\\"]}]}
",
      },
      "name": "web",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-role-linkerd-web.yaml",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"metrics-api\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"metrics-api\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/config\\":\\"951a7b61ff59229914ca604c671353e5fdc0eda710bde2bfbb50c9225225babe\\",\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"-controller-namespace=linkerd\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-cluster-domain=cluster.local\\",\\"-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/metrics-api:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9995},\\"initialDelaySeconds\\":10},\\"name\\":\\"metrics-api\\",\\"ports\\":[{\\"containerPort\\":8085,\\"name\\":\\"http\\"},{\\"containerPort\\":9995,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9995}},\\"securityContext\\":{\\"runAsUser\\":2103}}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"metrics-api\\"}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "metrics-api",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-metrics-api.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/config": "951a7b61ff59229914ca604c671353e5fdc0eda710bde2bfbb50c9225225babe",
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "labels": Object {
            "component": "metrics-api",
            "linkerd.io/extension": "viz",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "-controller-namespace=linkerd",
                "-log-level=info",
                "-log-format=plain",
                "-cluster-domain=cluster.local",
                "-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/metrics-api:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9995,
                },
                "initialDelaySeconds": 10,
              },
              "name": "metrics-api",
              "ports": Array [
                Object {
                  "containerPort": 8085,
                  "name": "http",
                },
                Object {
                  "containerPort": 9995,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9995,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "metrics-api",
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"web\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
      },
      "name": "web",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/v1-serviceaccount-linkerd-viz-web.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-prometheus\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"nodes\\",\\"nodes/proxy\\",\\"pods\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]}]}
",
      },
      "name": "linkerd-linkerd-viz-prometheus",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-viz-prometheus.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"tap\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"grpc\\",\\"port\\":8088,\\"targetPort\\":8088},{\\"name\\":\\"apiserver\\",\\"port\\":443,\\"targetPort\\":\\"apiserver\\"}],\\"selector\\":{\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "tap",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/v1-service-linkerd-viz-tap.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"web\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"web\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"-linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085\\",\\"-cluster-domain=cluster.local\\",\\"-grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000\\",\\"-controller-namespace=linkerd\\",\\"-viz-namespace=linkerd-viz\\",\\"-log-level=info\\",\\"-log-format=plain\\",\\"-enforced-host=^(localhost|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|web\\\\\\\\.linkerd-viz\\\\\\\\.svc\\\\\\\\.cluster\\\\\\\\.local|web\\\\\\\\.linkerd-viz\\\\\\\\.svc|\\\\\\\\[::1\\\\\\\\])(:\\\\\\\\d+)?$\\",\\"-enable-pprof=false\\"],\\"image\\":\\"cr.l5d.io/linkerd/web:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/ping\\",\\"port\\":9994},\\"initialDelaySeconds\\":10},\\"name\\":\\"web\\",\\"ports\\":[{\\"containerPort\\":8084,\\"name\\":\\"http\\"},{\\"containerPort\\":9994,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/ready\\",\\"port\\":9994}},\\"securityContext\\":{\\"runAsUser\\":2103}}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"web\\"}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "web",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-web.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "labels": Object {
            "component": "web",
            "linkerd.io/extension": "viz",
            "namespace": "linkerd-viz",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "-linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085",
                "-cluster-domain=cluster.local",
                "-grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000",
                "-controller-namespace=linkerd",
                "-viz-namespace=linkerd-viz",
                "-log-level=info",
                "-log-format=plain",
                "-enforced-host=^(localhost|127\\\\.0\\\\.0\\\\.1|web\\\\.linkerd-viz\\\\.svc\\\\.cluster\\\\.local|web\\\\.linkerd-viz\\\\.svc|\\\\[::1\\\\])(:\\\\d+)?$",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/web:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/ping",
                  "port": 9994,
                },
                "initialDelaySeconds": 10,
              },
              "name": "web",
              "ports": Array [
                Object {
                  "containerPort": 8084,
                  "name": "http",
                },
                Object {
                  "containerPort": 9994,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/ready",
                  "port": 9994,
                },
              },
              "securityContext": Object {
                "runAsUser": 2103,
              },
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "web",
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"metrics-api\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"http\\",\\"port\\":8085,\\"targetPort\\":8085}],\\"selector\\":{\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "metrics-api",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/v1-service-linkerd-viz-metrics-api.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-tap-injector\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-tap-injector\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"tap-injector\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "linkerd-tap-injector",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-tap-injector.yaml",
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "Server",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"Server\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"proxy-admin\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"podSelector\\":{\\"matchLabels\\":{\\"linkerd.io/extension\\":\\"viz\\"}},\\"port\\":\\"linkerd-admin\\",\\"proxyProtocol\\":\\"HTTP/1\\"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "proxy-admin",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-server-linkerd-viz-proxy-admin.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-web-check\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-viz-web-check\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"web\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "linkerd-linkerd-viz-web-check",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-web-check.yaml",
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "ServerAuthorization",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"ServerAuthorization\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"metrics-api\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"client\\":{\\"meshTLS\\":{\\"serviceAccounts\\":[{\\"name\\":\\"web\\"},{\\"name\\":\\"prometheus\\"}]}},\\"server\\":{\\"name\\":\\"metrics-api\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "metrics-api",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-serverauthorization-linkerd-viz-metrics-api.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"RoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd\\"},\\"name\\":\\"web\\",\\"namespace\\":\\"linkerd\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"Role\\",\\"name\\":\\"web\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"web\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "web",
      "namespace": "linkerd",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-linkerd-web.yaml",
  },
  Object {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "ServerAuthorization",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"policy.linkerd.io/v1beta1\\",\\"kind\\":\\"ServerAuthorization\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"admin\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"client\\":{\\"unauthenticated\\":true},\\"server\\":{\\"name\\":\\"admin\\"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "admin",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-serverauthorization-linkerd-viz-admin.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-tap\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-viz-tap\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"tap\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "linkerd-linkerd-viz-tap",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-tap.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-tap-admin\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\"],\\"verbs\\":[\\"list\\"]},{\\"apiGroups\\":[\\"tap.linkerd.io\\"],\\"resources\\":[\\"*\\"],\\"verbs\\":[\\"watch\\"]}]}
",
      },
      "name": "linkerd-linkerd-viz-tap-admin",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-viz-tap-admin.yaml",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"prometheus\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"prometheus\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"component\\":\\"prometheus\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"--log.level=info\\",\\"--log.format=logfmt\\",\\"--config.file=/etc/prometheus/prometheus.yml\\",\\"--storage.tsdb.path=/data\\",\\"--storage.tsdb.retention.time=6h\\"],\\"image\\":\\"prom/prometheus:v2.19.3\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/-/healthy\\",\\"port\\":9090},\\"initialDelaySeconds\\":30,\\"timeoutSeconds\\":30},\\"name\\":\\"prometheus\\",\\"ports\\":[{\\"containerPort\\":9090,\\"name\\":\\"admin-http\\"}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/-/ready\\",\\"port\\":9090},\\"initialDelaySeconds\\":30,\\"timeoutSeconds\\":30},\\"securityContext\\":{\\"runAsGroup\\":65534,\\"runAsNonRoot\\":true,\\"runAsUser\\":65534},\\"volumeMounts\\":[{\\"mountPath\\":\\"/data\\",\\"name\\":\\"data\\"},{\\"mountPath\\":\\"/etc/prometheus/prometheus.yml\\",\\"name\\":\\"prometheus-config\\",\\"readOnly\\":true,\\"subPath\\":\\"prometheus.yml\\"}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"securityContext\\":{\\"fsGroup\\":65534},\\"serviceAccountName\\":\\"prometheus\\",\\"volumes\\":[{\\"emptyDir\\":{},\\"name\\":\\"data\\"},{\\"configMap\\":{\\"name\\":\\"prometheus-config\\"},\\"name\\":\\"prometheus-config\\"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "prometheus",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-prometheus.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "labels": Object {
            "component": "prometheus",
            "linkerd.io/extension": "viz",
            "namespace": "linkerd-viz",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "--log.level=info",
                "--log.format=logfmt",
                "--config.file=/etc/prometheus/prometheus.yml",
                "--storage.tsdb.path=/data",
                "--storage.tsdb.retention.time=6h",
              ],
              "image": "prom/prometheus:v2.19.3",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/-/healthy",
                  "port": 9090,
                },
                "initialDelaySeconds": 30,
                "timeoutSeconds": 30,
              },
              "name": "prometheus",
              "ports": Array [
                Object {
                  "containerPort": 9090,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/-/ready",
                  "port": 9090,
                },
                "initialDelaySeconds": 30,
                "timeoutSeconds": 30,
              },
              "securityContext": Object {
                "runAsGroup": 65534,
                "runAsNonRoot": true,
                "runAsUser": 65534,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/data",
                  "name": "data",
                },
                Object {
                  "mountPath": "/etc/prometheus/prometheus.yml",
                  "name": "prometheus-config",
                  "readOnly": true,
                  "subPath": "prometheus.yml",
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "securityContext": Object {
            "fsGroup": 65534,
          },
          "serviceAccountName": "prometheus",
          "volumes": Array [
            Object {
              "emptyDir": Object {},
              "name": "data",
            },
            Object {
              "configMap": Object {
                "name": "prometheus-config",
              },
              "name": "prometheus-config",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"grafana\\",\\"namespace\\":\\"linkerd-viz\\"}}
",
      },
      "name": "grafana",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/v1-serviceaccount-linkerd-viz-grafana.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"metrics-api\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-metrics-api\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-viz-metrics-api\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"metrics-api\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "linkerd-linkerd-viz-metrics-api",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-metrics-api.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRoleBinding\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"web\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-web-api\\"},\\"roleRef\\":{\\"apiGroup\\":\\"rbac.authorization.k8s.io\\",\\"kind\\":\\"ClusterRole\\",\\"name\\":\\"linkerd-linkerd-viz-web-api\\"},\\"subjects\\":[{\\"kind\\":\\"ServiceAccount\\",\\"name\\":\\"web\\",\\"namespace\\":\\"linkerd-viz\\"}]}
",
      },
      "name": "linkerd-linkerd-viz-web-api",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-web-api.yaml",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"grafana\\",\\"app.kubernetes.io/part-of\\":\\"Linkerd\\",\\"app.kubernetes.io/version\\":\\"stable-2.11.2\\",\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"},\\"name\\":\\"grafana\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/created-by\\":\\"linkerd/helm stable-2.11.2\\"},\\"labels\\":{\\"component\\":\\"grafana\\",\\"linkerd.io/extension\\":\\"viz\\",\\"namespace\\":\\"linkerd-viz\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"GF_PATHS_DATA\\",\\"value\\":\\"/data\\"},{\\"name\\":\\"GODEBUG\\",\\"value\\":\\"netdns=go\\"}],\\"image\\":\\"cr.l5d.io/linkerd/grafana:stable-2.11.2\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/api/health\\",\\"port\\":3000},\\"initialDelaySeconds\\":30},\\"name\\":\\"grafana\\",\\"ports\\":[{\\"containerPort\\":3000,\\"name\\":\\"http\\"}],\\"readinessProbe\\":{\\"httpGet\\":{\\"path\\":\\"/api/health\\",\\"port\\":3000}},\\"securityContext\\":{\\"runAsUser\\":472},\\"volumeMounts\\":[{\\"mountPath\\":\\"/data\\",\\"name\\":\\"data\\"},{\\"mountPath\\":\\"/etc/grafana\\",\\"name\\":\\"grafana-config\\",\\"readOnly\\":true}]}],\\"nodeSelector\\":{\\"kubernetes.io/os\\":\\"linux\\"},\\"serviceAccountName\\":\\"grafana\\",\\"volumes\\":[{\\"emptyDir\\":{},\\"name\\":\\"data\\"},{\\"configMap\\":{\\"items\\":[{\\"key\\":\\"grafana.ini\\",\\"path\\":\\"grafana.ini\\"},{\\"key\\":\\"datasources.yaml\\",\\"path\\":\\"provisioning/datasources/datasources.yaml\\"},{\\"key\\":\\"dashboards.yaml\\",\\"path\\":\\"provisioning/dashboards/dashboards.yaml\\"}],\\"name\\":\\"grafana-config\\"},\\"name\\":\\"grafana-config\\"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
      },
      "name": "grafana",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-grafana.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "linkerd.io/created-by": "linkerd/helm stable-2.11.2",
          },
          "labels": Object {
            "component": "grafana",
            "linkerd.io/extension": "viz",
            "namespace": "linkerd-viz",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "GF_PATHS_DATA",
                  "value": "/data",
                },
                Object {
                  "name": "GODEBUG",
                  "value": "netdns=go",
                },
              ],
              "image": "cr.l5d.io/linkerd/grafana:stable-2.11.2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "httpGet": Object {
                  "path": "/api/health",
                  "port": 3000,
                },
                "initialDelaySeconds": 30,
              },
              "name": "grafana",
              "ports": Array [
                Object {
                  "containerPort": 3000,
                  "name": "http",
                },
              ],
              "readinessProbe": Object {
                "httpGet": Object {
                  "path": "/api/health",
                  "port": 3000,
                },
              },
              "securityContext": Object {
                "runAsUser": 472,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/data",
                  "name": "data",
                },
                Object {
                  "mountPath": "/etc/grafana",
                  "name": "grafana-config",
                  "readOnly": true,
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "grafana",
          "volumes": Array [
            Object {
              "emptyDir": Object {},
              "name": "data",
            },
            Object {
              "configMap": Object {
                "items": Array [
                  Object {
                    "key": "grafana.ini",
                    "path": "grafana.ini",
                  },
                  Object {
                    "key": "datasources.yaml",
                    "path": "provisioning/datasources/datasources.yaml",
                  },
                  Object {
                    "key": "dashboards.yaml",
                    "path": "provisioning/dashboards/dashboards.yaml",
                  },
                ],
                "name": "grafana-config",
              },
              "name": "grafana-config",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "linkerd.io/v1alpha2",
    "kind": "ServiceProfile",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"linkerd.io/v1alpha2\\",\\"kind\\":\\"ServiceProfile\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"metrics-api.linkerd-viz.svc.cluster.local\\",\\"namespace\\":\\"linkerd-viz\\"},\\"spec\\":{\\"routes\\":[{\\"condition\\":{\\"method\\":\\"POST\\",\\"pathRegex\\":\\"/api/v1/StatSummary\\"},\\"name\\":\\"POST /api/v1/StatSummary\\"},{\\"condition\\":{\\"method\\":\\"POST\\",\\"pathRegex\\":\\"/api/v1/TopRoutes\\"},\\"name\\":\\"POST /api/v1/TopRoutes\\"},{\\"condition\\":{\\"method\\":\\"POST\\",\\"pathRegex\\":\\"/api/v1/ListPods\\"},\\"name\\":\\"POST /api/v1/ListPods\\"},{\\"condition\\":{\\"method\\":\\"POST\\",\\"pathRegex\\":\\"/api/v1/ListServices\\"},\\"name\\":\\"POST /api/v1/ListServices\\"},{\\"condition\\":{\\"method\\":\\"POST\\",\\"pathRegex\\":\\"/api/v1/SelfCheck\\"},\\"name\\":\\"POST /api/v1/SelfCheck\\"},{\\"condition\\":{\\"method\\":\\"POST\\",\\"pathRegex\\":\\"/api/v1/Gateways\\"},\\"name\\":\\"POST /api/v1/Gateways\\"},{\\"condition\\":{\\"method\\":\\"POST\\",\\"pathRegex\\":\\"/api/v1/Edges\\"},\\"name\\":\\"POST /api/v1/Edges\\"}]}}
",
      },
      "name": "metrics-api.linkerd-viz.svc.cluster.local",
      "namespace": "linkerd-viz",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/linkerd.io_v1alpha2-serviceprofile-linkerd-viz-metrics-api.linkerd-viz.svc.cluster.local.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-tap-injector\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"namespaces\\"],\\"verbs\\":[\\"get\\",\\"list\\",\\"watch\\"]}]}
",
      },
      "name": "linkerd-tap-injector",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-tap-injector.yaml",
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"rbac.authorization.k8s.io/v1\\",\\"kind\\":\\"ClusterRole\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"component\\":\\"tap\\",\\"linkerd.io/extension\\":\\"viz\\"},\\"name\\":\\"linkerd-linkerd-viz-tap\\"},\\"rules\\":[{\\"apiGroups\\":[\\"\\"],\\"resources\\":[\\"pods\\",\\"services\\",\\"replicationcontrollers\\",\\"namespaces\\",\\"nodes\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"extensions\\",\\"apps\\"],\\"resources\\":[\\"daemonsets\\",\\"deployments\\",\\"replicasets\\",\\"statefulsets\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]},{\\"apiGroups\\":[\\"extensions\\",\\"batch\\"],\\"resources\\":[\\"cronjobs\\",\\"jobs\\"],\\"verbs\\":[\\"list\\",\\"get\\",\\"watch\\"]}]}
",
      },
      "name": "linkerd-linkerd-viz-tap",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-viz-tap.yaml",
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-mongo",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/sealed-secrets/sealed-secret-graphql-mongo-applications.yaml",
    "spec": Object {
      "encryptedData": Object {
        "APP_ENVIRONMENT": "AgBp1lGk4cl1JBNsXeIWIctEdXwO1mPGjd7FsatxMvR8PDmIH88iBAqylpMNaUw0UZ6K2B16NUv+Q30TxhxrZHjYpdhXaSLTuMrn9QILoOoda2nIOuPSUbtQRyEV4X8byXfpttbJFS7A4QCOu2JHrm33bZwT4FDfKAsIO7xKqDc4eOKgYu2Bc5aak4cZbAbW3F4PS2UcunwnG9MgnkuS4sctGIv7uRVwQ/my4+CSYHGbB8cMEbDaong4fwmhT1jaDJpWeoZqssswYqFR9PDGLTykE2FH3fF5yZTiKgPpYBmlnbcuA4HNhaOfgcI5ZQRFiHS1++HTfiPxIGgy2vKPfJ1q+X+s74eArdgAKzjq6Uay5Ugq6wDaiTOPu6uq2xCYqpj56gzKyZrGIjy+2a+GTphobLgyn4ycpV86mXTofBnFr3YEQtBlrWbcamjbRApH2zNZ1fmfoy+jQfP0j+Yq58VDnjHfEazqDchBgMj229A+fQ68HlYqciJn4dVXF2WdLFiFKHXyWGjeWUAtgy6ejVafUEa11f15HivNloSLSjs3Wq7w50f4y5TZjhNZSow4bzIQci42/15SjpokjOnivNJU2nH6EUao8G/08iKtM7yQIch04izRZWa1FsR3N0xuIom4kpPALAKTGELWHtnMFNxnRdQAhuPbRC4aLIJ17x6F9fVNTb9FzUdHrJuG10nSzJNKAUPInw==",
        "APP_EXTERNAL_BASE_URL": "AgBSBA6Lmq+IOPdGHFfHPgtvpc3/CVw75bZMe0HQhwrtfJgkx7aS5pY3YNcg+ERKIYMZlaO1cpn1I4ZF9l2y/7VgtoqGlwlQfZLRSM/82DWRfC0SSgk4rmN9xe2SD6+OLBuPKCR5k5gUQ5el2YorS2WsGGr+exE1DzD93PKB+nzy0wDrsT/Y8PSy591ZcQX0doGRqMrORJFUf7Tkrbn7T7osihldQVfhoLUc4x7WHXQ1CD3ENynAwelj4hqy1zVg6BsKWnWxI00+NaKl/9wEZwb/ltMSLrWfCGbwr4eQI620+pT0PPPRqSdkLZIbf7hduF3pqJqs0N2EkVIGuV5xFoS8b3XPBecaQC/Wo8/e3jamZECurj4irj7A0+cAqPoL+X1YVKjiqPXtpMsJwE96MeoI/CrexRMAllUeVmAci7Z1WehIsRdwwiDUj56x0i1Os9oPVU9wSRqVnErCRg11AEzZH6Op4/MWi+h6b3Tv9F+VQJUXlWU9rvMLxoQ+N9RdsH7kTgKDp72MnMxguxiSRBD8Ad/G/k0SgtHyFt6vREvHQFOvPzvfNPkCXRNUWs6WKUx9IeI0HQSKl21qwkAI1JIVHTqlWbO7d0VWRvHcintYF34hj7G4Q7i17+vhL1haMzmftZK8dDKRqjS4Yg6Z/r1JZBREyOFUZ1LIomnIyST0Swq7bubaNBhuLBnsRGYBkwC+2E9IZxAdYajYCI5YJIcuZUwEiKs=",
        "APP_HOST": "AgA6bKnuTyN43ULVcp/Owy8D97ZGNWFu0Ml9FknvjTDcX8cT3G20rlRctZ9DfRTr6xebemx1UX1Srt9eoLGTjHsKeME4oZfrf99vSB2dpWRbLIbowbMHdfXONqpH3VDZom79qVcwSr51DsE8u7J/pVPUOq7nVBoJ9NI32JZ5nWRLTJnaFTi+hMbWodhC1pmE0mNiXsh0P12Idpr0riJiRKEkCtbLL9NbGbQtSMLqIcpSxLBLhutbbO6sOOZy3uNPeZh8lGnUc+jKMRWS6LExhmQCELljGywM2asN2HV9vLKzIXGM+CzyY8XxWSyzExbZS1WzgZim3K8DSshjZHcoMjiutg4ZxlIjqXGF2OCCm5PO4AVIp0CkFxyup6GbGYDOr+3YbMMFe0b+qhhrtA7tkTkKw2eXsIduKuwspEbZ6aOQ1BoKcGMPWvDrkDvb3aRnPxzYL310kx9SD803jcALc30PW7TSAWyW7AbkGaMSqCxn/a7P4NmE8RE6FDUwNu8ZZw3/O7SBTKOK1AJ3IBLl8N/djK42cUCFF8dcrnwlgnkU+4xEcI4qD66Z2jcRN1p2E1xnzmVtIiyvtrBsC0+1Y+OHVky1bdk7/ghIV0teymhjEV3x3QzOGIKwdicTDV1a2zlKcj7Y/4qJYffuVIB5Yt0dJ0zLn+HTs2pbWHF/Qz5Eol+e00cHLNREAn4De6q8ubpVOumCXosg",
        "APP_PORT": "AgCi4ieUSrzzmJ0xtrFxNW5j2kE++VFrnD7tPYk+KFou2Be5b3tkKD4/hFvb2tF7jlM0xE/W3OkZH4DUJyfvzWT4xfUaUfd3l6on2nDYaxXy005CyvAvfBJAJnmpBWVf/QfO9gU8LLoMFHBynNn104/xZyX1lXwKfKgnHvDwlKrKxu2rqxkC8ksxB1vVFw3aT1Byv17oKT5nPiLP36YJ2AULNV5Lo8+Wyob0PtxhwMvmvfPluHB8ORAY8AUSbGQ+XTZRDVL6FRdfsCJtxD+YTKysXsG5aiwC883hSkS4nzrrXh/CZ2mZXqOifQIt+2qSVzICf0QEl+5E9eaCX45xtKlljZMZ4HxgeeT8B7ZHLbZ92nc0sxJP2WAmHMVqBrfeBqmdsEKya3cdWcbcg0iPjkc7aN2m4H7qjjqv/AsSdbDBIDY/rIkClyhSzKWfz6FcfCLPx7xdDTnYkMKT51DpBEMlcZBpwTnQltTSEOxlcPo0FMaQhymOJuF6+17gQpN44YDPeWCtpQCB2hzDch17EGSlCnalZY8r4UEV1hR1bYcjLNx1dzNeYzyR9WEB9fIAW+pRhgCYji/FRR80HPG0fmk4NHMTWWIM9h/6qgC019lVRhOM917gq3mVHsO0o02kj4A0R5oRfMXEJ34kAD/DhW+EQgZYSAIwcz/HlW4jv9EovsjmVfPR4CH634RI2Zoq9m2i+3zo",
        "MONGODB_HOST": "AgBKakPRrz/7NUeDzUFYZgPqB/aNzFDUrqale6go8isoHSxliD7IicMI9WalyEuojvSxDgoWLL3mYJ9/hVOFkvhl6XqE/M8uL4ESR6/GePYTG2s3iMD3T/PpnELgdC/thhRU/CkcxavMVSdLEQ2zKiZuTGRLumTw+6Sts4k2B2REgJ0UVFWSEqPQD2N8sUChXTZTxCv8LokN9ZscoWcvg/7NvpKsIdLZPioqg4l5FTTrTok0b96q7+Gx8AopoQ8t/jlsZwd2py2L6+FHNJdV5aon+EVMPqUcBAKxAvd1vYtyES/LF9WvOnk/bs+rFcx/iPlnTWtlD/FQDr1RY7sFaqBiTeax7VI/B7aYSY7tJRBfch3nW7dkxrJts32H6ocCn7Pkjwl03x+isc2oT9u/3S+ywzq5lIK9UeK3kr2HW6Eu1KbJ6PyAUvoncwiK6Sx9YnZlCW4LflKMcTl+b0W6GioYCtSBPhFswpX58FF8RVbi689Gcco+5Qnn+nWP4KKHjgNu3P+2woAkqQirwWc6jU8o6h3Cqi8KFOcVGEAE8wAUR6LtVVMLQlDLRTkTPGVHICEvPJ1gfYbBOdT3/WKUHmvRVyc/DAh5NynKRJIh4JXgnfM33DYXtH+VHaLPk5Ix74wuuqxXyweDwQLBo0DDx1u+h2PCfks40UfVyScnoOXaxPM5fq+dKChbXmoLuxqqkzllNNpC2QjYMsyIiKPU1lzZMs0M8x2Rv8juwqJ+etaBa8IlUg==",
        "MONGODB_NAME": "AgAEmleg5/mVtjuNsDtnB7qKqDOLFXhhcKI2ehDdFft6OxwmW2ftMThneeeZtlTqXksu3jmlI71e27aNw4yLEtpmuZcRUOZYiujS2hpGUN93zTdzZKfT4aEtOc9sI2+0HROIpzKV/8OqOcnka246gJfUaDLfNhRyMUHGJcpAw/3qht9Z+inwvNI99lCxt7TduqKEMPLUvEhefH+RyJi94/HL+gf67QN/vZaHGnF4kOlGvSfGxBLcfjyvCWxoJFcBCaV95wzVfuaOQv0rg2ZjMhX4CCYIu5nnUW4w5Ztd7iS1c+t8K8a4LCzVXBXt4+bMQxcfHO6xUi7LsiQXNtXZSMpk4lWEEOF7YSPWoiBe13kJutBHKwNhFyoJpKCd3w7RJm3BgqPCvYD4S7ncgb8tSAuE+TORecq17eoFsQ832ikZ9Q7xHjUnT9rXf88GaPf1++QOXPRUUb1EH9Ntaz7DnFCSXweFT6FOS5OxOjlEA/KMOROWc0ZM0Q8J2zRR1icD+lEaIy58LhpjGzP0l9dDqsRjCiF3aQYZZr9gN/mwh0bgOUdvWTL8zhiR7n9T11uZ9o6WTYPKcgz5zJu+QsV0zKs5ACfylMCcJJxQBHJYjW+5teX4By7FfeAFm/SAqxKVNQ13KgzSG6nIVWJf58PLWXmT4axxs82JgstH4gTMmkNRh+PmPUWkpxaah3ZtyTVGoBmAg5PmD+iWyQ67FKPOMEPkQ4NeOEzV",
        "MONGODB_PASSWORD": "AgCOHfQmNd4jb1uOVRII34UOFRGxP2D+5VgWQXC3jKG6vvrTWW7Uim/6O1dhsyRFT1C0MS9RtYcp62yAVZMSPSc8g5/gxHIqYUGHCRhNnbHo9dBPZjIylOnHOkrT58iigIgBG3uP/BAmdn+rXlQ7+4wPmxQ+Abj0ebrDgLevkttH0is2Bx03cTOZ5cg03ns5dzJWbPTMApooRGfcURakMcHQvomccZpR/KQRJ9ebcqBT6v2u3feU4oBihLXZKWLa2ykJE0qbP7Y4RRcrWffuoI697/IDa6ucDTrLA5+ilbwZjWjeKZTubkx8j88wmmnDnXQLSQ0Hkq0zgqujgXJ8vZzlNtX2HEoYUiwFrQOcxCMfhyR+3k46vSJQ9YJluk/1i4zOTDgYYP12MD4utbvFopM4bkXNOR4C+ytEIpntTkbmXoE50Gzl80uoOM/Odrt20DjDHOh/DRp02A0XWGu4ASlcKnkmrLHHLv+APAWodZJPSotX9B1usIBOs2+uQMYVgvQp6JWG+LvD+3/UlRRiIrvC275e7YGRlJOVTulwcAc3VlA/sLx+3JuXqu0kijJSmaZ7LtEBTHgwKUdX7Ktff0PHYPlO7Tba/HeBpFf/hDE2Iok/7iR5X08brKFjc0A3y7XtajQ1sgCFzMUacBeLwCdq3Nm3sZl40Xhy1IwvqgPuKCxsFnAb2c5Qth7m2aLcoXPpbXMCeBKgEQ==",
        "MONGODB_PORT": "AgBgej4toImPYHryizq48UBiN6kTgnS3TuY1wcME5L2KuFTr2OYboUFFWL3I+x+kgK0LRXVJcZFe1dbbB811aEesHdNvZlyVNqd5RbnkJyKenPC91uHRAIkWm9LvMbEKh7fTv6Kaad/u6zCVIrlYXlzRx20nSw0l8u/0rrbYEzsf6ULxp0sZ+8wxM2JF4Cp5tWnsQdrVggPDOhUje3kL7p3Rvx8IlqVen7Goi47JUuJtnON6VJ845Kc1hLyjiYp+6tYTd/GksXW5Acq+4grvHPiyUh76H5t5DrxiBRp/niC3rxnJGjMOy6crNPuz7Cf5YyQDYuuSWEZKp8SbGenSHi+kPyPhQi6ztp02JCxElwnrSbRtjsCElUo1CEeXoJRdYWffdi7E3ZzZ+s/FaWRubRBMt7peUadN0eTrXr5iKWnjr4BBrnFa24n1W9G4EXWZCxob4GWaeIwOp2l/D3VH4QDv7nmilLEq+PvZU5bq6/Bu1RQsgKvzdaog5lvShDZD1Tf0BlnY7JKGaX7zL7hm5Bf1e6ty2d/KDhTekvqRSr/13tf1NJQA51KD0/y/5qTYvjC40eRGF5rRYNL1niG5/BZUwiAhuVKhjVFsfZR13TU/erB+3doNyQnYpFeVbw8aGcDLAIcA7dGadveH30r2zXYSqcLNSsf0ANylh9DmRlQEMBXB9srqa47K2iH+psgpOmYeOkNv3Q==",
        "MONGODB_ROOT_PASSWORD": "AgCh97f1qYlv2R6Qcjzi1ecJfam+LZ7l/uLxwCJMkIH0meMxGNbMKI0wj3G8hiTx5LuTX4qY6TRndj+kUDAwYULe49VQAQnh7xHLM3ZOkFxzyApTvAr/yA9WJP5jzM1tNM82IAMYglN4QqCfgk+uwCpz5jfjZMa9nokaqPOpF1eily/hfNavUyQKtctqM6oZ+LZpuNUpt6nhomE7LnuzMtAWPdwxmAlMv+YhwI7LW35J6zGTazteujCls2hupS6J8mqzc6SCKo+U518+xwSs0inoFPSmC4++M0riK9Lql05hwyOVwpu3wRGsAOU2Sp30otsvJbhefjNSRm3Acw0GsV11bNY2dynfeq6YSWVo3qB2tj3OY4KyrYOvWZFjedmc4ssw+BHMsvNEul79zJsMSYsOLkJyhhRf7fpqm19T59+CrMtlA0EAZdd3+ZD2fMiUkQSRajvhnnSCGukhQG4WW6NzNZAZs7NCuGh3ss4MhPmDWz2NsCE3Kl/7K75G0H7cqs9Syd17qXKKMnC35k7p78Zaf6eOCMGyUoJ2GEEo4r0r1PnPITwtoJgqMjt6y9TZ4/9CwVLY9YJ3KyresIYUOoInka9e9PazAjecc79edq1Ej9GzTVTRFTpoLvKuvAFK2ZaEu/Fwlej42kThKcWFQs0YIlzAyVNJuJ4DmHV6hpZ+ZDgzdKDAwRqBgYkK9NsncfU30aeOLzFCQg==",
        "MONGODB_ROOT_USERNAME": "AgADIqyY/yoQAt6vKtMbvMYohjkSqH4UrbrxtIT8SJ6dFDHXU6lo6DvTAG4u5lO9pm9fr1DQrRILVEpDyOa8CgHHd1AYU/cCY2QSqJO4mBcbD7mQ6lCApkDNIlnEIuZ0qf74LGNxIb9zO9RKf4v9ygnJeExvJNHzABUCZGo9kYLsadfD8wrlP/fu5zdcBGO0udOBg4j6aOSD4TOnOUSYA8uw5q1mWOIezp9fufENssXmUGMk8xDdnCAj+Wy3Jfm3iJR1kHEndrwTkAIq4Mtgov3Q/UWux6IcsEHii9VVIhsbGnddRxhPSmHl5e4VEMe82ST1zLfFXlDmV9U0W/DO/F3jx5ynA8g0uXHO/8KeUiiQrTiesRsXE2txqgwv87pitW8hKkr2oLviRF3Edy6zlC5vW0DNXpPUmzAMt3hvSF9DA3O+I4vuQ7+nG35tg+AKP/eZxbsUVYAsWAL2472p6lcxNRHKPW5gL+LMXJJw+VIr5Sh0fUfZm658i3Uq2ZIv/yRGRm4/i03OtvMEeclkC700JzLZJx5IhHj7A0ls2SwKesNh417MH2d9/mMaP1AsS2x5elQ+a1eN/ttoErzScfmjSQ6zB73TJuRe9cuxU7TiMlJDDtdi5C1Lz6h9T8Bjy2mS6gqVhQI91Q1341UTnJv0YLEFslOmKF6I6FzXij89MgAdif9XeXPXy72NMESYKGYdYrWnSBbP+A==",
        "MONGODB_SERVICE_NAME": "AgBumZhfynlj69WhlRZniOLFxjec3ZqjTFMvSyjgCmcrB/IDq4Y9INXuvOKe5cTXuH7QV3i39AoElWj+/oW3g1n240WeFpb4kZfd2k0ozDVXdgXX7K7zoEXv5R3W1S/h/498YJulLS59Za434q+ITvd0FbMIZWZGcBJ2y/r//OkOzTpbAScSZIMY9jB0eD0njV586eJAgEXvDXsLzg7kp3Z/kt5ezMXePFupJkXo2AqqXtMxDhDN9cPG0gzpZg3XAKO2zeGFLkoOpkUJeTY3o48s/LNDyto93JN1/j8/0gwSZvV8LjE7vq23CZSDmCF60qTnHo8AdOvtOQqN1dOn6DLIGQ2EWtJ5ppN6TRIgu7xGbBYaDoNbwuKAgnHa7ZlN+MR2WBdiwvwlw2FiUNsPa+j4mhuspmlOeoMw04P5CIRDWdzhpwe/Iu9DBwsYlDtjusazLM04aUf9XL1arXQ7iXu0iKOH1A8LHpdeG6tzMKyUBGoJLUeeU/APYeJqMlU8xWdOHDcxoCXu+UbZDMCNcR/oF5tCK8248bLUBi99m6jMR6cgpq5fYNkobGO7K1mP6lK4rdA3iW15LhbMWLb3UAd373GFCaOH4g4Hc7xalpI4pZGLm7mGYI71PhxM80rmCNzx7IpFuuYB3k2XwNK5YuKKR962ZcHCfU42umZmAEnAbUzRDIdatKsE6yDGaPj6SYEHH98CCzZTqTsSX0Y+8A7bp2BviQ8c",
        "MONGODB_STORAGE_CLASS": "AgBh0B00GQOivwvc1bMiu4M2eoYDWSptuo+IYUiSFfOYCJtUhO/M00OKzX2xW7oVJ9kfBlvZrTRIH7mQP+RW+pNg/sBSEDASDrdE99YpytqoAE6CwjHtHN5kEhsSmZF7TnbOb2zqkthby9vX/rkuHdxJQjeTbV9PT64RS2zoOSeVR9ZJULX6nEcK86k+cUiGHwBG13rL7DJHDqC3Y/yv6OTKM45boCVbnWvhOcecsATMBMByR6/WbASE2D3c7j5iEez/h+FC3RTKXOYCzLrE7ZSqxQliEXnJQwL84Vuq6gK3iy7A4F0JtaRNAt7gkP/vDAMJeQ3h33e+S739zip33C3qG7e+bhd1LPLSGF8qP+FPqErh15VM9XPn7Cnqx44aD0sEX24hSXOpte7e476uK/zbR5xDoNPpOiXpU1cksOtjuWYPhxm5JMeTBXIfblMyTm+UZCa+bMjndoa2xojkKzrvFsDQP0NAWagzVKd+q+O3rt01tendmPH9ST5XaYsMjNhgO6f4ugX4htVRjZfXQsP/29TP9pU8pYknCDzEl6KFEMvJi8OyB9eLC/9s7DfUGmX+RoP1P9gDHmxd5IKrWHh+Jz+e/r1ev+FoHjS2kaEzkKjWBUEvVpbfVEtAjQDQS18fnPb9MexEUa97UQWHtUn63GpPUKpc5NLdUmx+JhHDryI1l7x+wgqs9nHoU6V1AIYizdmtXyxtgzJcYsEyzbmYQ9Oo62fZ9efviVw=",
        "MONGODB_USERNAME": "AgA9dmtiLUGOQrAGkdvn819hy+0OwWzLMTsf/8lWmsIV4wYpm6jBfGiiCYY4Pr6vj1f8fYHiFVEcDgp7DYfZciVxh6gLO9/0FGAc0ayir3H6tGIZntotWSlPyTvyRvLjGeWaf/rLjin2p3KYYS5U6SZQTLC99UedtTxg8VyOBMWNNnhC+Mom/ptBzePu91v6D31N/iTvPV2Eus7ngX492cerCDVVPse0ZFzv/xBwB0qGP7cy6kMRFAd+JgpVnYjT724p9whsq+Niqf2uUSp0ubiSG+XgRqbb+YIwo7SqOSMprqa8+doXLytVZfBlo5qORX6HK4MnNssNpU+/QNuL6XUThbcWLJOi2oefXjR0N82wLscqdxev/7AWQItKLZdbGuFH3Xj2e1kgcaHW9s2DCcOIyCkZFm4ubL2zQIv1J9zo3YL6XmEuhTTuTtVTUUaM5TA3LtS7Wf/gu/qZQ0lXhBEYqIg8jIQ2YqRjdbUBs/u4xF2uOMea9aRVSNJmicwieQd59/7c7g8/CzmOrgTprpfCMIQpWDPn3EV9v0S1SOEpvVjp8aAJVsOdPchrfyjVksWpfXNWYkOc55Uxal+1Q0O1HVCr1g93z9dhEFFkssSPhaHr/MZkDBkf7pg8KzLZwgJ6p42cfHVcIdvQaJtkIdJ4gydVW66AE4yX5mGSehd03xJBqbn+jJf9TsFtLN9MobXVRlmDCncdbA==",
        "OAUTH_GITHUB_CLIENT_ID": "AgBICGC0VuU/MdtcKznXKQkcNaSbH9IXIa/LWCZYDxLiBpvcEtRZcLcjVeglLM04Zpp+OAgkctzeHIzTgJ8IJMuEyCHGNH1HfVLEY6461a6q9CU7TDsG3fv6SrqrxDaoF84Ex8OU4T9HxbDFDpx1CojmJzxMMO76rQZ45uHyGdojtUQyEO/t4MVjgcdnBQo4SWK+GpCpfDh6PVAU1FqzjrRaG4XpWEoZy2LcYVRkTK3hnkxe8ePTA8Yyb5ub7Nt0hpfPXwcYKcoDxd7NIUG5EIZquU3vmSiQ9qTjprm/FjaVbWlLS7jjkl+ve7NwoY8V4Ku9u3HV/Zdkk9BbbV+T9ZiV3uNVNjxYG5hJtXz/SW7qP9QjUXdTWfBtnzUKQxjeI5HJkfXfNpZIgxzXVo+y023rvk2QYaZM4AOtnjkoYzHOMNNWdDCshL2sh2+aKpAIsqyd6ao5uihX/klLNs/CilXvSYnZDiOIyZXYlTO51kxqSw6lJ9ZPFEcRzgOuoLp9oMbqH5YvxhSkcTwH19fOEZBkxljwkV83idnvPTOJWv6NPtqxTMNLAU6iVGs8MBkJ0c4j2IMqR+cEH9c4s+ZwxRIJRHjdyjpnwCXvtiTbsa5Z1ML/3qSMQzF/4cVoSDEmZXRU+LRdOdlZk5XB/CZQlMlrkpkT3xa+rYLl30pSPJFA+c5eT2HxYg3ZH/aDjkH85dMCe83ZRdTj5ptXNEanCGs8thGeqA==",
        "OAUTH_GITHUB_CLIENT_SECRET": "AgAOFOzHGXjx2x5ab5GACnM1yt7sLpCA/Xg0Vi26gJpZn004b9ba7W5pfI4REou1mYbF292t4sJXA8Ur9jgr6/BTPBGINmstlDoEOrSH+V+4FfIx/xuL6CPqlrg21cHMLMI9zSaOYBbbkgOkPto8tLWhDJhXINmBqx8HOmVWklK9VoWNeDsbEaPtggBiblY3qsa5ajmXDG20d/3Clgl0Y5A4fR/lbAdTbn4tV35j4OmhUMee8fx0LLxgpu+VLevOytiiml0H4ATwcqPXuePiPQScGwS7asTrBCKEz3H3XHAbu4gM8tzBSM5Mtwskkx6dXCW7uJzMYt6HN5UVtXm+jmoJGLsSHi1+yVBraUwaF2G1Am89HhJEMnQP4RQBFV9UVKbkdDqxPQ9a6Df6Pj/K9TV16BURBqkm+kfwXOm6xu5FNFbe8T0AG/Nbdunj2fZSLy6dibCpvgodOuWcGMKOO2RuxKiwVoquCmeBkp0pxeJj9lxMa6IIC0vbu/sxRyAcu7fRH1cM/iIfdwPQ2mbPTpBZ8fTuW6al+9etstxbUQqlIhn2P9xccgCPdn/lJXgDtZkTxsoVcksa3+oPfhK0elMxQtp7u70SZ0sQU/ouRoDjz+CEK1zsyfDP6cux/p84bih8RsE03UbTnQXbuRsmTn0faw705h9foAD2py+ddsx1A+pEZa9dTtjvJYijW4X+wQYO0hlE/TOVn0rmtWemF885Q49LyBNHzcb71L6ucjY5Z85hl8H2XOQV",
        "OAUTH_GOOGLE_CLIENT_ID": "AgARjwDZjlF58R9l2Q6y8RCCi8V0dg9KtBZam7MSzwiJ0NjBr600G5rquEmn1Ojg12cl2iJD2FniGvHolzjy7kIBrZjrtt/WyzfOR27HBcOsLKg02qWquES5TCtptf9dxl5ImU3tfSvrNYGy8ioJsgesNbY5ELQ24Z5KgKmz+ISE7xZEMzrJBvGASS/ZdeCbvXg1eXoMIzbUscSfX9mfU58rYeLw3yt2ayjnlBaGv54s88lusdRkJs9ac1TBEzIZxWDkzMpjBOuFurk3VR0GKLqy89lOlMdzCSsQo04VASTSulF6Md9k+jmqv7DWKeVU8bNnXMT/qxbqox327h6ZG/405sS6zE9zvrbUQV1EzCphiPqMC+hcd5h5+Vb9pntQi2i5oXeJ4Nwt9AhN9hClw1R43l/JY69VA7mPwM0mdVZYtHRyFMIvrldogyja+pyKO8zjsfPdn7W2g/mAjM/JP4el9TuF/UtjqiX0cs/jW8eEMst1EBO+7s+dV2iO5A3RD9gK2BY15PHrBC/frOgMsn+9GMAGUDODomwdQhij+vbBu25B9OwDYq6eJeDfq/0lxuZDeAQni75PJRh82MRp3e6iQLzaViv5o6Bu7PoDUKL/WWGGPTPskQ0k8gTEzfrg/op6rLLvALhv/C6UhBQtWL3CXPk5x61Gy2epMwdjiDFCV4R61aEe0NUbAhIuhsrotprsc5Y3b5+XZ6XffzW2xlHkBbls2Y8usuDxq9pVUnpNwZieuC/dtjWnRuGqzRjsPCdF7b3aetQ7pmRBnd97ZbMU7bPUbAeQC9o=",
        "OAUTH_GOOGLE_CLIENT_SECRET": "AgA9LNloCXnFSb54GZIhxAjK2dv7ExjdBPFJa2NIcOYt8DVXZVUuSDP7W39HWC5dXQ7+MnlLxFrFlZ24xuQ0Kga9FCgQzrwdzEAbydHvH9F7gEM9uzCX7y/KuvI0cN25+eg8oCmuK1UQqSna+gb4Ak4oQGyxElzDbd1vPCDXR9DfQHMgQPUAKvaO5Sr3i4W+9VT1ZfKNLZ1pTEVL5R1fnBKwugkedyqcAl8Psk2kmW5T/cDP3l6PTrE92aQ1MHQtZufJVQoq5sqr/6Y7E4UknLLUsWhhwcoAyQe/lFt5m2BYSwARU+lkgwi62SZ2L/1uFWfAX/6rjkxPXmSLJCLDXQptspGKd+kvtM7cqUkvce5w7A9p9xyagcJLYV5e3kcRftgmQYzz7Y9L7Eb4K8um/wQvgzsndlBBBG0/3r7TPvTpQZMx5l1d+2vinofafB/UJc/swxBZkG2NelxyE5yN9j37SqDOPlXdl7zZOgH88LzpU7x6t/2S3qRyeXDa+BNOl25Y1cS/G4TIlwnF3aP2uEU/cI8sBN/p4+I/9ppeJ3owA23/6/c+ePIwlGLVbbGfSsInzUFIaEwE3JsVwl5Hf9vu5ToEF6d1lhmSFJ4xhXdf3AmsDO4PqaKlaHCVnhGD1SAln3H2YD+JjBz4SDRRjeu0xmx0eDX2kivCi6aS8GPYV6fzlV+nkgcm9NnS9iDtD/Fdn9MLoi9HNEURiyQYRSijqobHnAlb7a9VeGuCCd66Y2R8tA==",
        "REDIS_HOST": "AgBBTo38OZaKTe5/awyJnfHyvDjZr+cJtD9XLInO46wXY+2O2LLvFvWaFvTcOLHG2FpHf/as6hHcg2AOPY652qlUSTy1sJQFYYKmar77BfnKV4GVHol73sJF/3T2hJVypru+gsxpAWqQbTvdIC0NnSq/3Ra+uCAF5ncHHT5GBBYqycQgdNSSd7LmChyTcvQ3ccgCLCXwtr/kSRQICPTGzS3fbegUH/BdjME6NkZbTeVALukTToI8QrJ7OJgDc5f7piXe6HUNGMh4JZiBodUkMXaiu7ZdE9bok5Go6yWlLMdSvmA/LBM0+du7p3v/KDUuJ1OGKPVcV+zWhyASgoRQFc8Zay83SnBNssx3pvIIrKUhFClsmedEDX6hYbYk9hHjPkDP55Tfyh/tRBp6x/LZfKCFCNJwIZQWC4nAleJE3vqqpPTokt81T1Um4BkaHYKgZJ9UrdYubxMNeggXKBKo9ryE5NBXXfkiHHbvGkzrW+7Rmp5OmcLJW3hIO2z2g/dTBZSu7zWY3U3ugG9tMhPADskSvPcR/V5Kdlasgbi1qtGLqLuX4foAByvwl1aAU6p2zxOc8i91xcl5KdMN1Y2yN3DQx+jEAlu1KnsmCmNBebrvNLGs+O1X+cvSIZ9F49XZPMyl7ZWLnIjGQtBJEI8dAog+hiMutL4nXJIMnAZ1kFtCwHCVmQ0mhHL8uxJ6iE/jVHc96Toh1w6ULHJw4mZChE+evFKXkaNJW5Xj5vr4CzHbpz1h9e84jTo=",
        "REDIS_PASSWORD": "AgAXCvRPaOEM63pnPNyZsJorvdDKF1cHsM92XR5M7d9WreOOwzlxCB+P3cV2IgS6/4dDVdeIxk4Vp/wEIhYTWIbkM/ItNauLR/Zq1wuhvkEWgPAxQ+YhDPuhjlRuc3AjMRWyVdoRSvwLC/IMVDVF9OFLrd9/Enqwa9vaDld6vP3pG2iMeeHo1V0C1XsRb0ARpGcwrzIEEyoxWaRRgYdml4sjO9+ihI/Nnj9EwIrfJj0V/s5aVAQxx4mUk/QXUtSSYAUa53fL28sJzPG5bo46YIrvURBUstcjADhbj9RcWhF+b3JWV0hAy7vyjs1pelYES/ZakyW+aSHoreNyQ2dYyuhQF7CDg7rHWjPDF4VjY5vkdqZGI9g6zfYfTxgSfjAT3VtLALt/ZxSzjYfTLvp3yQOo1xFZ7IW23Ef4f3ofibabahjYVMNbzHaSvMGaJjH3fMV8Tg//CA3DXfP/j+rfVy3ZjaOQLInfY9cQcZzzKbT9KQ/S5LAOS9ReJNAolC9LOJF3wQZEgBScQdvo/THcfOYRqvxCmYtWNJzhAwjWIie8lQOISvzaRvuvKmCEOFNlw28hsJFSCDP4jTTtqANY0TGGigs8reMXNk1NoxIT72jIAS6FX5/j++lH7XA2kvwXFeVAX2SlLN4w2FW3N4Lsw3QEAGxz5bbjbm811r8wFTHp/V6VVCO/EwUy9gs4vXRyMjt8lxHxDuf4kQ==",
        "REDIS_PORT": "AgCO2Eo8yQxU/LBBRrwjIxVYRfcIBCRw/tqCnsbfgCax6BuuTYfw25fM6wkRvGoC0lCMTAYIdWxSSDLK4HOyzFFhWeFIrl0HfVF8IOoqv9rR/XlOQoehbBU71qOGLvkVpGruCvyTo/jj0IIRwOEpi+mCEHTNgomuaSH6OMapalJpA7gz2Nr0QS8+7VzOqDe8nCPNp8k9Z77Q2FvOkt3yQeMS1dl19BZ2+Su5jNyimWSzKw8jbAVsVkz/G5Mo/hc++YTtbrR9PabJYZx1jVWwYcQBCBfwysaSa8GdPILhwiln8owhODhWxfvTJuDTAEaHWuHcIszxnaBIyinD66/BlvrRIEzhaPWyfxy6pkd0U3nkBJjul/Afdyw5XjxlyrSi9HDCEcqoj2YdkuA7cHSh7UriMERw5W44bSzUGX0zGL8PcMILJt006DL71WBpdBeP+8QvFOdztTQg9SZEqjYq0/I2qgusQjnUx19zqbfmLwcz6l09fR/XJkD4pEDztQgorDNtsNpfIX9lf7qnuEraD3VfweX37eVavHaVkEMfMYlOP/i+hjmU4ElyiMgRID6va1aOMPKNViHCJv8LgUx+qIZ07XOYYjQEEZOj471kFbF9hIfw6b2XMpcO+qqfUdwafvlydbVPDP2PozAkEVUlWFTVuOZ6PjqR9ZnOn8Uc6v+sTtc37KCcjV4pT0QxbAivgVmy+Dq2",
        "REDIS_SERVICE_NAME": "AgArib3aSgO/r9nvhukIVllE2RqDO8x3j4OGGuX+Rw7rSUS0Wi5tNmep2aVYw6Hp9m2PFRoftSDv72z3Q0iRNf20Lxl/EWbqVHEcgLnt5M6wOmr7ypl+gHr5MIFwldtF/KM2rErz5gjU01cWbNshUbQZSY9p4A8uljIpLCVExr/UDxlZSKmezjgf/cdBPxeHNaBfksosEVsHVXTfC7rlTWRcwP8TylWSQ/YhVPHIxHCgwWuuhBc3lB5de561arT7jU4NNp5YKknXXQpLqXSGDW513rFvp3cE34KmIyagKVY6IamFAznyWGTDYmE3CNhAA4m60f+Q8s0KjkSxbRzjP6iQGaFBw3xnnEFzYA7Tflq0F4AXDbgHSAWNhKpK8igVqysnW2NWDAxoBbdOIt4htH6TTHc7EMGaDRNJ23249TYb/YlLI7rl/mJ25nAvdtbxpUZe/HwB3qEuUx4ylNcSamoDUzmUxDDPYJr/WCR4Pp6JZ4WNz6wDhyvu88JeDaasSKMwPiMAZmkzq9oRNAW9thnw1ZcUUKFlBCYsm5jc2XC2EunAhl4DwChe6m5Gdhwy2v6QlyyUOqoi46mEOXMRUsyDsh+FSoRAyCuhXV7lkkyIm63MGiKB/M1vgtc0/r0nv3uHcrivj1nJXzpbSYOQYLfmaObxkAZCz560ncRgiNwMFhmh8M6EBZ9aCn2vmN0r41eu8vk7/eEUP3qEYC+NeVT2jZZ8",
        "REDIS_SERVICE_NAME_WITH_SUFFIX": "AgCIQzLaft+u3Z1Wp7IWw6oQ70lqdRbNgCUNWTzZHfJqbI78Jad8YYnwhXq9eHqb/3vmvWdum7GtWimf0/PLMxmNWohpnFlyka/idaf12pvcbLekIuYmOoakFgbDUwXD95CrgODSM1WHqgGxv/GeoTWvTOuJWFQvQWw4y+X4yIUD7uQzxm0CETP69gvK+zIUEFhC9fzYrItBIroZXtzWgMzWOP7HiA53IgOK7TOZMKZSzfEQU7w1b3pivrZ8x+Afzw/EmwToMEb9B10GNBPc3aF6M4h8BGkLQWJS+rK9CmjObtJ/NmXJiWOef2lCgvgFj7gIOSvnTb4h9CG2PuYPSnAvcMRrEBGRzU1xoGuvezq3YpDbNwzTAMWA5M+e65lhUbC77GhPyhwNX85hu717NC+LYLCzKFfL6WcKpKHCaxuWz07YvPFfuv0hYgnXCHcZE+5hENuAEyKNb7lkULFDCIXr/7gQTxwIUZZynAMhpp75M8znILK1gQM7RVg7HWbj+h9MOhW3pWG5IhUA6tPMi99rMNRyneeb1kIaDkaWBskJFm1fGWvWPS9/SRgX54uTJh0UsNGrtG4ZbGaTesGEQ/dY7Hz8Q4lsFvq9KRiZznYCwQHkldOGtr1rCt2M8AjpUiH/3+8ZP4l2a2aJ4gh0MSmo1VZhzOtM/qpkotvxUJ3XtwDU05UzcYdMtLyDVzvewkuWdnOo4QLP8BucTKdFGpa6bfXzNS+2PINL7Q==",
        "REDIS_USERNAME": "AgAbAUiOHXn2NczKW1z/ypT7pEFOzDr3OjE5V6/M6fIenFyc2oTMn4Y5qMr54wgJsJw4Ov8pWOU3o754KY/q8zfLBXOhOSbABIZSTiim8XOGDeCTqcT63elIEPnh8hAT2Oj7MZ9bcLOZQQCM/RtQRTtc6zum+QJbErEval4z//BwtIetyz46sEjaWX5ZGgYJMbG6UYkRj5PYzaiyDHpIVWiGpKNAAfGYJqrLRRBzaDRCo4VnjQtngELK146cjwhz/JcSv5syLJLD4DttgBY6E7e9PuaIj6y1JWMABhJn29RlII7V0LZZqlg4PJJ9skp5eB1DedTstfj5eEytin07YLAMyViwT3GZL8tK2wqSdT0TaxCXt/tvRQTYJl9lsfLrAoSkI8TrApUdiIrmNlHQspf1sg6F+2PlpzjJvGkPP7orFem2k3UenNXvyd7cYUc+7OlxG2qe/Y/3OPR0BXwNZzfjc/v1AEXcbxfkRFWvNOr6novZtvq1TxXOPmIlG6sczIWNSBDAe1eheOoEjBWoHY+iwGQi2ZPRhfePdoeoAI7eRknU43i2oHFBb9Ht4kkDwkK5gklTNxDJVIP3fV/iOEMbXSvE5ZaNgfB8nlw78MZDd0CN150gopjxO0PY9yH5uEplqn2kqmxFxRDUkc7uWg5zCyTgVQrcWd3HuDuLNTnR/p+tBJR+/PPaDFA/WBtKLg9s7KipYBss1w==",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"APP_ENVIRONMENT\\":\\"bG9jYWw=\\",\\"APP_EXTERNAL_BASE_URL\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgx\\",\\"APP_HOST\\":\\"MC4wLjAuMA==\\",\\"APP_PORT\\":\\"ODAwMA==\\",\\"MONGODB_HOST\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZS5hcHBsaWNhdGlvbnM=\\",\\"MONGODB_NAME\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==\\",\\"MONGODB_PASSWORD\\":\\"anVuZ2J1bnU=\\",\\"MONGODB_PORT\\":\\"MjcwMTc=\\",\\"MONGODB_ROOT_PASSWORD\\":\\"anVuZ2J1bnU=\\",\\"MONGODB_ROOT_USERNAME\\":\\"anVuZ2J1bnU=\\",\\"MONGODB_SERVICE_NAME\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==\\",\\"MONGODB_STORAGE_CLASS\\":\\"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu\\",\\"MONGODB_USERNAME\\":\\"anVuZ2J1bnU=\\",\\"OAUTH_GITHUB_CLIENT_ID\\":\\"ODljMTkzNzRmN2U3YjViMzUxNjQ=\\",\\"OAUTH_GITHUB_CLIENT_SECRET\\":\\"MTI5NDg4Y2M5MmUyZDJmOTFlM2E1YTAyNDA4NjM5NmM0OGM2NTMzOQ==\\",\\"OAUTH_GOOGLE_CLIENT_ID\\":\\"ODU1MTc0MjA5NTQzLTZtMGYwODhlNTVkM21ldmhucjhiczBxamFwOGo2ZzBnLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29t\\",\\"OAUTH_GOOGLE_CLIENT_SECRET\\":\\"R09DU1BYLUNTMUpGaXNSSVNnZU4wSS13VGFWam8zNTJ6YlU=\\",\\"REDIS_HOST\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXIuYXBwbGljYXRpb25z\\",\\"REDIS_PASSWORD\\":\\"anVuZ2J1bnU=\\",\\"REDIS_PORT\\":\\"NjM3OQ==\\",\\"REDIS_SERVICE_NAME\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcw==\\",\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXI=\\",\\"REDIS_USERNAME\\":\\"anVuZ2J1bnU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"sealedsecrets.bitnami.com/managed\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"applications\\"}} ",
            "sealedsecrets.bitnami.com/managed": "true",
          },
          "name": "graphql-mongo",
          "namespace": "applications",
        },
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-mongo-database",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/sealed-secrets/sealed-secret-graphql-mongo-database-applications.yaml",
    "spec": Object {
      "encryptedData": Object {
        "mongodb-passwords": "AgCTXCQFPMxqd/CL0lr3iE21c1Wbg+s0pwkgWH3eIdaOAHfSFjNVuBD06ieQMj7vK/oSRDWfaKnzEtXGI4oiU47/3UXhOgAcJT9DdtFts89rt7pgFvcwZA57RFegNVneBvNyAPwbuKevDxoYDjHdnkuXppcCQTYCdvGLWtkmQjCfGlaC3i3xeKYvD/9DT9RmqGH0uSbc5b60tcTckaLY6xqvPdFhFdyOKc5Bf4/PGWkKsCDbbfrO08Rz/qdNqPq75+naWeoH/m1Yr3OPIjZby823pDOTxjQwFSfqWg4/z9qXpzzF53P0CIJ+pCjNIcOHrLP/pC9DFFnsdmWrsDP4kbSp6IfzdrgkxAWnGZlmQdXulZIN5Zq2NPyaVjMaZCYgDvx35ZW1WLEoIUYfH4yrTgpWW5jBYJmwsw2Wp0ALC71LlC80i1wkoGfnbYGNpN9ivML4Ydu/jnttc1ojilh/cZ9kyWEiJysq+Uiolu0gnzj5LeI2tw9RdnXcjCPtApjw88FGRX0hAAGDZrzfM5+tPSPvBj/bnKCzLhLsuKjYkuKlxWCP+6mveyRam6Jqd13ft+8H01f2nkaEq0hKWmwxry6LgJOuUYa1nav0xZo4zVZ5C4YhxPCkiCsI35QT9jSrNZX/Hitq3AWATOeEWlR/9mVX1GL+SBl6jq8mu407V9NbhtAZrIabnJan8bWaPhiuadHhA98MIch/xi4LyXbkZJ4UfWy16n9kjq8ZrNGR",
        "mongodb-replica-set-key": "AgCM9MFnei4dGoVEqTKyAFlZQ7z+kdQ9dcRIZ8aR0ZJhqau0X8o72LcBn75hslnBMI3bCqLWmT+UgUiyQTFfMt1x/PaC5cRN6QdkuVb34UjAW+09HVBRoSX2XOHd1/7c6CTZHrJqDwws5J6mLmaeKUb2jWjHMcZdzX5bwPOLHhgobuKpuSH2dVME1ID4C6gDaHWYBrpsj9C03rIsd8Sc6ZYIPYg9XmgGWN6IG1tlPMrdufnR6zmEiH3ZdZWD54W/VL4W+425sK/oM+yGb9dsiT/aQyxe3bVA2+ZQQXXO8+rbJgwj+m9TmFNtJZXaDOvb6p/XJIPspSjMRkmI9K+XySdXrtyAnG5tTC0kki6+lXqdVnvNSLHl3pVIAdLrCKGjGog5BYWdri58fICkXcliuRW+l9eTd9oTCICP1ly63wSJD6zDiF/mE+NEFrnefUsuTGwsHPcOo2mpdljPkxT28DCNhhxEraLlVH6FN3stJusvkRozGsFJg3op1iq7H3UvHGWj0DTPlF5QJTFYNBaMldD/Hiot3vDH3DyMbJzgAOWCSBshyJTvOWfV+GyI+zNRS5VYR/6jwc8/2DXC/acm8t3JLYVxPEOxfNL00kMvQbH8zsQQ0z581LmCjdAKLBfev+LRZxVHm5ilEO6GHsGq7zI9oUTsfwREUnSKmv5sprddcG4gJAT0F78YCdjcaXaLp0RidqMlefgwy+Lt",
        "mongodb-root-password": "AgAeHyaIdjH4n2hyN7JOH8/SKgf5SVSdj9sndU2PFyRxop3HUFWdwVaBIU4kmDBLmjkylXyJ4qvkcum+RPvkjNFf93pBGwaCkUzkU4WE3f+3KAO4jbLlolEkHBnjsSWyq+iW0b9Ka/Nyara/9fG4ClbzoJktsjd7zp/v3qmC0+n+VNn56WMEZGyGbxfMFgEG7A91d3YfhRjWuGOg7Cqqx7UYjohIKp0aAvlV2AcQo+7c75XOvmj4MnQ296/r35CuesJvt3d33HiMBE6yl5zdoZwqLQhRwnLvpP4fHiDmCuTBnDhWR7ymw9FrFlQRFTPWnruc0PDvkwSgSX1xDHLS3CkhMLT0L1NDp0klAMuy5ts3M69vIdnow2kGHW5QTYEEJsUHD9g1xk8qXEmXP+0G1KE+UpHR/3bLdK2FYRtM8NQ0Ft7QwPggF+qOX422JJ3vCUaczg8+XzrsNW098QHrp2pLd+ppVOoRfeQfz7bgovg4K+jmaMyXWEFvhHPhs8T05u7FrHfAfS1mlBy/TO/9rEn1D1EmzzYHJwdn+TmMyFsmYEeN6eNIvPMu8BETEvs0aOkJMCVyV9UJOnGmfk/KzDnN5iV4+lIvKyMWy0Zjlts/WvmFrK5FTbePvCmutHtnvM2CFakX23uOMsWL7OQpZRBBSSZ33aGBDH5C6GLii5IATs8Dt2ttal9ZuT3YQKAMiYOaK3cmIZbl8w==",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"mongodb-passwords\\":\\"anVuZ2J1bnUscGFzc3dvcmQxLHBhc3N3b3JkMg==\\",\\"mongodb-replica-set-key\\":\\"Q1BWUmN6VUdkVg==\\",\\"mongodb-root-password\\":\\"anVuZ2J1bnU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database\\",\\"namespace\\":\\"applications\\"},\\"type\\":\\"Opaque\\"} ",
          },
          "name": "graphql-mongo-database",
          "namespace": "applications",
        },
        "type": "Opaque",
      },
    },
  },
  Object {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": Object {
      "annotations": Object {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-mongo-redis",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/sealed-secrets/sealed-secret-graphql-mongo-redis-applications.yaml",
    "spec": Object {
      "encryptedData": Object {
        "redis-password": "AgCN9YOjBx6TCSR88BT2FJkwHhBNraQqFZiDqajcyyqfbqmTbqwTF37mDVMhlYz/UB/1OSS4e64LIgPjoYP2K0OhUVtuutfP0C3u0Px+O/QgRv/tQ00uVpQCK9cOZXSAGj3E64YNy6G9Sh0UJJM8gbZgkvkG6w9AQ9Up3KtQ9VzqxQ0Yups56JUJWaHLUfvd7EFsiNCKjWn9/EXsKZ9Qe2vmaAjrd2LjkmSYA62E0LzVMLQDBWuhMvVrKXp2kCRqYsb+xQReOcNUHsKmj8O3i1IKO0CPlkskDdAWOBeQ79wGERkZoxde3yEEUM+g9Ss5NcVQ+Mx1gw7AxYvVQEGNaYm3ouB6h3KJSSOkBu8B0cTyppLJfYsgP1x8AfeollChJXjlSnk4ocjnvt/8A87zbWev9XAHPzB/b+WBru6xBoHk7Z0gtact3x/x5cEKOCZyhLVso6rZJ4Nw1VccwzZlgW5U5AJ0vO2d5lSTEsddwomSHyJocll4AKJPxSYBzy4/jkZr6XzffQ5wzoc0go2I2sVQ2Ex2I34bIB1FVzWafJ2xTlCdZ2YyWhmmHN0qLrtIIeHCbCfX4vRQQhSG/vjDnUJGaLQ2ut5WM1nnlfPpxABWexr6dxhXIdxkfb9757mRjpDCcChDp5eBs+hQ3CAMOGcZJmcZoWrDwF8lFrfaq/g0laW7E0ZzokLk448BCNhpfaDz/kHRF/KFcQ==",
      },
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"redis-password\\":\\"anVuZ2J1bnU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis\\",\\"namespace\\":\\"applications\\"},\\"type\\":\\"Opaque\\"} ",
          },
          "name": "graphql-mongo-redis",
          "namespace": "applications",
        },
        "type": "Opaque",
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database\\",\\"namespace\\":\\"applications\\"},\\"secrets\\":[{\\"name\\":\\"graphql-mongo-database\\"}]}
",
      },
      "name": "graphql-mongo-database",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/1-manifest/v1-serviceaccount-applications-graphql-mongo-database.yaml",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "ping_liveness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\\"$(< \\"\${REDIS_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h localhost \\\\
    -p $REDIS_PORT \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ \\"$response\\" != \\"PONG\\" ] && [ \\"$responseFirstWord\\" != \\"LOADING\\" ] && [ \\"$responseFirstWord\\" != \\"MASTERDOWN\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_liveness_local_and_master.sh": "script_dir=\\"$(dirname \\"$0\\")\\"
exit_status=0
\\"$script_dir/ping_liveness_local.sh\\" $1 || exit_status=$?
\\"$script_dir/ping_liveness_master.sh\\" $1 || exit_status=$?
exit $exit_status",
      "ping_liveness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\\"$(< \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h $REDIS_MASTER_HOST \\\\
    -p $REDIS_MASTER_PORT_NUMBER \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ \\"$response\\" != \\"PONG\\" ] && [ \\"$responseFirstWord\\" != \\"LOADING\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_readiness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\\"$(< \\"\${REDIS_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h localhost \\\\
    -p $REDIS_PORT \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
if [ \\"$response\\" != \\"PONG\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
      "ping_readiness_local_and_master.sh": "script_dir=\\"$(dirname \\"$0\\")\\"
exit_status=0
\\"$script_dir/ping_readiness_local.sh\\" $1 || exit_status=$?
\\"$script_dir/ping_readiness_master.sh\\" $1 || exit_status=$?
exit $exit_status",
      "ping_readiness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\\"$(< \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"
[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] && export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"
response=$(
  timeout -s 3 $1 \\\\
  redis-cli \\\\
    -h $REDIS_MASTER_HOST \\\\
    -p $REDIS_MASTER_PORT_NUMBER \\\\
    ping
)
if [ \\"$?\\" -eq \\"124\\" ]; then
  echo \\"Timed out\\"
  exit 1
fi
if [ \\"$response\\" != \\"PONG\\" ]; then
  echo \\"$response\\"
  exit 1
fi",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"ping_liveness_local.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h localhost \\\\\\\\\\\\n    -p $REDIS_PORT \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ] \\\\u0026\\\\u0026 [ \\\\\\"$responseFirstWord\\\\\\" != \\\\\\"LOADING\\\\\\" ] \\\\u0026\\\\u0026 [ \\\\\\"$responseFirstWord\\\\\\" != \\\\\\"MASTERDOWN\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\",\\"ping_liveness_local_and_master.sh\\":\\"script_dir=\\\\\\"$(dirname \\\\\\"$0\\\\\\")\\\\\\"\\\\nexit_status=0\\\\n\\\\\\"$script_dir/ping_liveness_local.sh\\\\\\" $1 || exit_status=$?\\\\n\\\\\\"$script_dir/ping_liveness_master.sh\\\\\\" $1 || exit_status=$?\\\\nexit $exit_status\\",\\"ping_liveness_master.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_MASTER_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_MASTER_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_MASTER_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_MASTER_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h $REDIS_MASTER_HOST \\\\\\\\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ] \\\\u0026\\\\u0026 [ \\\\\\"$responseFirstWord\\\\\\" != \\\\\\"LOADING\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\",\\"ping_readiness_local.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h localhost \\\\\\\\\\\\n    -p $REDIS_PORT \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\",\\"ping_readiness_local_and_master.sh\\":\\"script_dir=\\\\\\"$(dirname \\\\\\"$0\\\\\\")\\\\\\"\\\\nexit_status=0\\\\n\\\\\\"$script_dir/ping_readiness_local.sh\\\\\\" $1 || exit_status=$?\\\\n\\\\\\"$script_dir/ping_readiness_master.sh\\\\\\" $1 || exit_status=$?\\\\nexit $exit_status\\",\\"ping_readiness_master.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_MASTER_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_MASTER_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\n[[ -n \\\\\\"$REDIS_MASTER_PASSWORD\\\\\\" ]] \\\\u0026\\\\u0026 export REDISCLI_AUTH=\\\\\\"$REDIS_MASTER_PASSWORD\\\\\\"\\\\nresponse=$(\\\\n  timeout -s 3 $1 \\\\\\\\\\\\n  redis-cli \\\\\\\\\\\\n    -h $REDIS_MASTER_HOST \\\\\\\\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\\\\\\\n    ping\\\\n)\\\\nif [ \\\\\\"$?\\\\\\" -eq \\\\\\"124\\\\\\" ]; then\\\\n  echo \\\\\\"Timed out\\\\\\"\\\\n  exit 1\\\\nfi\\\\nif [ \\\\\\"$response\\\\\\" != \\\\\\"PONG\\\\\\" ]; then\\\\n  echo \\\\\\"$response\\\\\\"\\\\n  exit 1\\\\nfi\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis-health\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "graphql-mongo-redis-health",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/1-manifest/v1-configmap-applications-graphql-mongo-redis-health.yaml",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "mongodb-passwords": "anVuZ2J1bnUscGFzc3dvcmQxLHBhc3N3b3JkMg==",
      "mongodb-replica-set-key": "MkozZno3SlRmVA==",
      "mongodb-root-password": "ZXhhcmVyZW1wbGU=",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"mongodb-passwords\\":\\"anVuZ2J1bnUscGFzc3dvcmQxLHBhc3N3b3JkMg==\\",\\"mongodb-replica-set-key\\":\\"MkozZno3SlRmVA==\\",\\"mongodb-root-password\\":\\"ZXhhcmVyZW1wbGU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database\\",\\"namespace\\":\\"applications\\"},\\"type\\":\\"Opaque\\"}
",
      },
      "name": "graphql-mongo-database",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/1-manifest/v1-secret-applications-graphql-mongo-database.yaml",
    "type": "Opaque",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"StatefulSet\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"arbiter\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database-arbiter\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"arbiter\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/name\\":\\"mongodb\\"}},\\"serviceName\\":\\"graphql-mongo-database-arbiter-headless\\",\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"arbiter\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"arbiter\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/name\\":\\"mongodb\\"}},\\"namespaces\\":[\\"applications\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"MY_POD_NAME\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"MY_POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}},{\\"name\\":\\"K8S_SERVICE_NAME\\",\\"value\\":\\"graphql-mongo-database-arbiter-headless\\"},{\\"name\\":\\"MONGODB_REPLICA_SET_MODE\\",\\"value\\":\\"arbiter\\"},{\\"name\\":\\"MONGODB_INITIAL_PRIMARY_HOST\\",\\"value\\":\\"graphql-mongo-database-0.graphql-mongo-database.$(MY_POD_NAMESPACE).svc.cluster.local\\"},{\\"name\\":\\"MONGODB_REPLICA_SET_NAME\\",\\"value\\":\\"rs0\\"},{\\"name\\":\\"MONGODB_ADVERTISED_HOSTNAME\\",\\"value\\":\\"$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local\\"},{\\"name\\":\\"MONGODB_INITIAL_PRIMARY_ROOT_USER\\",\\"value\\":\\"example\\"},{\\"name\\":\\"MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"mongodb-root-password\\",\\"name\\":\\"graphql-mongo-database\\"}}},{\\"name\\":\\"MONGODB_REPLICA_SET_KEY\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"mongodb-replica-set-key\\",\\"name\\":\\"graphql-mongo-database\\"}}},{\\"name\\":\\"ALLOW_EMPTY_PASSWORD\\",\\"value\\":\\"no\\"}],\\"image\\":\\"docker.io/bitnami/mongodb:4.4.13-debian-10-r52\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"failureThreshold\\":6,\\"initialDelaySeconds\\":30,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"tcpSocket\\":{\\"port\\":\\"mongodb\\"},\\"timeoutSeconds\\":5},\\"name\\":\\"mongodb-arbiter\\",\\"ports\\":[{\\"containerPort\\":27017,\\"name\\":\\"mongodb\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":6,\\"initialDelaySeconds\\":5,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"tcpSocket\\":{\\"port\\":\\"mongodb\\"},\\"timeoutSeconds\\":5},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsUser\\":1001}}],\\"securityContext\\":{\\"fsGroup\\":1001,\\"sysctls\\":[]},\\"serviceAccountName\\":\\"graphql-mongo-database\\"}}}}
",
      },
      "name": "graphql-mongo-database-arbiter",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/1-manifest/apps_v1-statefulset-applications-graphql-mongo-database-arbiter.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "arbiter",
            "app.kubernetes.io/instance": "graphql-mongo-database",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "mongodb",
            "helm.sh/chart": "mongodb-11.1.10",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "arbiter",
                        "app.kubernetes.io/instance": "graphql-mongo-database",
                        "app.kubernetes.io/name": "mongodb",
                      },
                    },
                    "namespaces": Array [
                      "applications",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "MY_POD_NAME",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "MY_POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                Object {
                  "name": "K8S_SERVICE_NAME",
                  "value": "graphql-mongo-database-arbiter-headless",
                },
                Object {
                  "name": "MONGODB_REPLICA_SET_MODE",
                  "value": "arbiter",
                },
                Object {
                  "name": "MONGODB_INITIAL_PRIMARY_HOST",
                  "value": "graphql-mongo-database-0.graphql-mongo-database.$(MY_POD_NAMESPACE).svc.cluster.local",
                },
                Object {
                  "name": "MONGODB_REPLICA_SET_NAME",
                  "value": "rs0",
                },
                Object {
                  "name": "MONGODB_ADVERTISED_HOSTNAME",
                  "value": "$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local",
                },
                Object {
                  "name": "MONGODB_INITIAL_PRIMARY_ROOT_USER",
                  "value": "example",
                },
                Object {
                  "name": "MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "mongodb-root-password",
                      "name": "graphql-mongo-database",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_REPLICA_SET_KEY",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "mongodb-replica-set-key",
                      "name": "graphql-mongo-database",
                    },
                  },
                },
                Object {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no",
                },
              ],
              "image": "docker.io/bitnami/mongodb:4.4.13-debian-10-r52",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": Object {
                  "port": "mongodb",
                },
                "timeoutSeconds": 5,
              },
              "name": "mongodb-arbiter",
              "ports": Array [
                Object {
                  "containerPort": 27017,
                  "name": "mongodb",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 6,
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": Object {
                  "port": "mongodb",
                },
                "timeoutSeconds": 5,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
            "sysctls": Array [],
          },
          "serviceAccountName": "graphql-mongo-database",
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"arbiter\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database-arbiter-headless\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"tcp-mongodb\\",\\"port\\":27017,\\"targetPort\\":\\"mongodb\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"arbiter\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/name\\":\\"mongodb\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "graphql-mongo-database-arbiter-headless",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/1-manifest/v1-service-applications-graphql-mongo-database-arbiter-headless.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"automountServiceAccountToken\\":true,\\"kind\\":\\"ServiceAccount\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "graphql-mongo-redis",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/1-manifest/v1-serviceaccount-applications-graphql-mongo-redis.yaml",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "APP_ENVIRONMENT": "bG9jYWw=",
      "APP_EXTERNAL_BASE_URL": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
      "APP_HOST": "MC4wLjAuMA==",
      "APP_PORT": "ODAwMA==",
      "MONGODB_HOST": "Z3JhcGhxbC1tb25nby1kYXRhYmFzZS5hcHBsaWNhdGlvbnM=",
      "MONGODB_NAME": "Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==",
      "MONGODB_PASSWORD": "anVuZ2J1bnU=",
      "MONGODB_PORT": "MjcwMTc=",
      "MONGODB_ROOT_PASSWORD": "ZXhhcmVyZW1wbGU=",
      "MONGODB_ROOT_USERNAME": "ZXhhbXBsZQ==",
      "MONGODB_SERVICE_NAME": "Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==",
      "MONGODB_STORAGE_CLASS": "bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu",
      "MONGODB_USERNAME": "ZXhhbXBsZW1t",
      "OAUTH_GITHUB_CLIENT_ID": "ODljMTkzNzRmN2U3YjViMzUxNjQ=",
      "OAUTH_GITHUB_CLIENT_SECRET": "MTI5NDg4Y2M5MmUyZDJmOTFlM2E1YTAyNDA4NjM5NmM0OGM2NTMzOQ==",
      "OAUTH_GOOGLE_CLIENT_ID": "ODU1MTc0MjA5NTQzLTZtMGYwODhlNTVkM21ldmhucjhiczBxamFwOGo2ZzBnLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29t",
      "OAUTH_GOOGLE_CLIENT_SECRET": "R09DU1BYLUNTMUpGaXNSSVNnZU4wSS13VGFWam8zNTJ6YlU=",
      "REDIS_HOST": "Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXIuYXBwbGljYXRpb25z",
      "REDIS_PASSWORD": "anVuZ2J1bnU=",
      "REDIS_PORT": "NjM3OQ==",
      "REDIS_SERVICE_NAME": "Z3JhcGhxbC1tb25nby1yZWRpcw==",
      "REDIS_SERVICE_NAME_WITH_SUFFIX": "Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXI=",
      "REDIS_USERNAME": "anVuZ2J1bnU=",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"APP_ENVIRONMENT\\":\\"bG9jYWw=\\",\\"APP_EXTERNAL_BASE_URL\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\",\\"APP_HOST\\":\\"MC4wLjAuMA==\\",\\"APP_PORT\\":\\"ODAwMA==\\",\\"MONGODB_HOST\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZS5hcHBsaWNhdGlvbnM=\\",\\"MONGODB_NAME\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==\\",\\"MONGODB_PASSWORD\\":\\"anVuZ2J1bnU=\\",\\"MONGODB_PORT\\":\\"MjcwMTc=\\",\\"MONGODB_ROOT_PASSWORD\\":\\"ZXhhcmVyZW1wbGU=\\",\\"MONGODB_ROOT_USERNAME\\":\\"ZXhhbXBsZQ==\\",\\"MONGODB_SERVICE_NAME\\":\\"Z3JhcGhxbC1tb25nby1kYXRhYmFzZQ==\\",\\"MONGODB_STORAGE_CLASS\\":\\"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu\\",\\"MONGODB_USERNAME\\":\\"ZXhhbXBsZW1t\\",\\"OAUTH_GITHUB_CLIENT_ID\\":\\"ODljMTkzNzRmN2U3YjViMzUxNjQ=\\",\\"OAUTH_GITHUB_CLIENT_SECRET\\":\\"MTI5NDg4Y2M5MmUyZDJmOTFlM2E1YTAyNDA4NjM5NmM0OGM2NTMzOQ==\\",\\"OAUTH_GOOGLE_CLIENT_ID\\":\\"ODU1MTc0MjA5NTQzLTZtMGYwODhlNTVkM21ldmhucjhiczBxamFwOGo2ZzBnLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29t\\",\\"OAUTH_GOOGLE_CLIENT_SECRET\\":\\"R09DU1BYLUNTMUpGaXNSSVNnZU4wSS13VGFWam8zNTJ6YlU=\\",\\"REDIS_HOST\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXIuYXBwbGljYXRpb25z\\",\\"REDIS_PASSWORD\\":\\"anVuZ2J1bnU=\\",\\"REDIS_PORT\\":\\"NjM3OQ==\\",\\"REDIS_SERVICE_NAME\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcw==\\",\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\":\\"Z3JhcGhxbC1tb25nby1yZWRpcy1tYXN0ZXI=\\",\\"REDIS_USERNAME\\":\\"anVuZ2J1bnU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"sealedsecrets.bitnami.com/managed\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"applications\\"}}
",
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-mongo",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/1-manifest/v1-secret-applications-graphql-mongo.yaml",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"StatefulSet\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis-master\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"replicas\\":1,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/name\\":\\"redis\\"}},\\"serviceName\\":\\"graphql-mongo-redis-headless\\",\\"template\\":{\\"metadata\\":{\\"annotations\\":{\\"checksum/configmap\\":\\"6f57cf9208511916e80bd8064d393590a176097d1ff524e72b1f95587da02513\\",\\"checksum/health\\":\\"b1f770fa15f8bb15ac0176ba7a31391b52d924d5361b52cc3efee627e050e973\\",\\"checksum/scripts\\":\\"7f5a69f15dcba18a677b168f00b5496b0bef29e6d64ab5ced7c6f7e8ab8ee813\\",\\"checksum/secret\\":\\"cd0142dd7139f7c45a3bd1a57eccb67804d27c013d7e1e685fe35f610ae114f1\\"},\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/name\\":\\"redis\\"}},\\"namespaces\\":[\\"applications\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"args\\":[\\"-c\\",\\"/opt/bitnami/scripts/start-scripts/start-master.sh\\"],\\"command\\":[\\"/bin/bash\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"REDIS_REPLICATION_MODE\\",\\"value\\":\\"master\\"},{\\"name\\":\\"ALLOW_EMPTY_PASSWORD\\",\\"value\\":\\"no\\"},{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"redis-password\\",\\"name\\":\\"graphql-mongo-redis\\"}}},{\\"name\\":\\"REDIS_TLS_ENABLED\\",\\"value\\":\\"no\\"},{\\"name\\":\\"REDIS_PORT\\",\\"value\\":\\"6379\\"}],\\"image\\":\\"docker.io/bitnami/redis:6.2.7-debian-10-r0\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"exec\\":{\\"command\\":[\\"sh\\",\\"-c\\",\\"/health/ping_liveness_local.sh 5\\"]},\\"failureThreshold\\":5,\\"initialDelaySeconds\\":20,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":6},\\"name\\":\\"redis\\",\\"ports\\":[{\\"containerPort\\":6379,\\"name\\":\\"redis\\"}],\\"readinessProbe\\":{\\"exec\\":{\\"command\\":[\\"sh\\",\\"-c\\",\\"/health/ping_readiness_local.sh 1\\"]},\\"failureThreshold\\":5,\\"initialDelaySeconds\\":20,\\"periodSeconds\\":5,\\"successThreshold\\":1,\\"timeoutSeconds\\":2},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/opt/bitnami/scripts/start-scripts\\",\\"name\\":\\"start-scripts\\"},{\\"mountPath\\":\\"/health\\",\\"name\\":\\"health\\"},{\\"mountPath\\":\\"/data\\",\\"name\\":\\"redis-data\\"},{\\"mountPath\\":\\"/opt/bitnami/redis/mounted-etc\\",\\"name\\":\\"config\\"},{\\"mountPath\\":\\"/opt/bitnami/redis/etc/\\",\\"name\\":\\"redis-tmp-conf\\"},{\\"mountPath\\":\\"/tmp\\",\\"name\\":\\"tmp\\"}]}],\\"securityContext\\":{\\"fsGroup\\":1001},\\"serviceAccountName\\":\\"graphql-mongo-redis\\",\\"terminationGracePeriodSeconds\\":30,\\"volumes\\":[{\\"configMap\\":{\\"defaultMode\\":493,\\"name\\":\\"graphql-mongo-redis-scripts\\"},\\"name\\":\\"start-scripts\\"},{\\"configMap\\":{\\"defaultMode\\":493,\\"name\\":\\"graphql-mongo-redis-health\\"},\\"name\\":\\"health\\"},{\\"configMap\\":{\\"name\\":\\"graphql-mongo-redis-configuration\\"},\\"name\\":\\"config\\"},{\\"emptyDir\\":{},\\"name\\":\\"redis-tmp-conf\\"},{\\"emptyDir\\":{},\\"name\\":\\"tmp\\"}]}},\\"updateStrategy\\":{\\"rollingUpdate\\":{},\\"type\\":\\"RollingUpdate\\"},\\"volumeClaimTemplates\\":[{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/name\\":\\"redis\\"},\\"name\\":\\"redis-data\\"},\\"spec\\":{\\"accessModes\\":[\\"ReadWriteOnce\\"],\\"resources\\":{\\"requests\\":{\\"storage\\":\\"8Gi\\"}}}}]}}
",
      },
      "name": "graphql-mongo-redis-master",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/1-manifest/apps_v1-statefulset-applications-graphql-mongo-redis-master.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "annotations": Object {
            "checksum/configmap": "6f57cf9208511916e80bd8064d393590a176097d1ff524e72b1f95587da02513",
            "checksum/health": "b1f770fa15f8bb15ac0176ba7a31391b52d924d5361b52cc3efee627e050e973",
            "checksum/scripts": "7f5a69f15dcba18a677b168f00b5496b0bef29e6d64ab5ced7c6f7e8ab8ee813",
            "checksum/secret": "cd0142dd7139f7c45a3bd1a57eccb67804d27c013d7e1e685fe35f610ae114f1",
          },
          "labels": Object {
            "app.kubernetes.io/component": "master",
            "app.kubernetes.io/instance": "redis",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "redis",
            "helm.sh/chart": "redis-16.8.9",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "master",
                        "app.kubernetes.io/instance": "redis",
                        "app.kubernetes.io/name": "redis",
                      },
                    },
                    "namespaces": Array [
                      "applications",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "args": Array [
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-master.sh",
              ],
              "command": Array [
                "/bin/bash",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "REDIS_REPLICATION_MODE",
                  "value": "master",
                },
                Object {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no",
                },
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "redis-password",
                      "name": "graphql-mongo-redis",
                    },
                  },
                },
                Object {
                  "name": "REDIS_TLS_ENABLED",
                  "value": "no",
                },
                Object {
                  "name": "REDIS_PORT",
                  "value": "6379",
                },
              ],
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "sh",
                    "-c",
                    "/health/ping_liveness_local.sh 5",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 6,
              },
              "name": "redis",
              "ports": Array [
                Object {
                  "containerPort": 6379,
                  "name": "redis",
                },
              ],
              "readinessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "sh",
                    "-c",
                    "/health/ping_readiness_local.sh 1",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/opt/bitnami/scripts/start-scripts",
                  "name": "start-scripts",
                },
                Object {
                  "mountPath": "/health",
                  "name": "health",
                },
                Object {
                  "mountPath": "/data",
                  "name": "redis-data",
                },
                Object {
                  "mountPath": "/opt/bitnami/redis/mounted-etc",
                  "name": "config",
                },
                Object {
                  "mountPath": "/opt/bitnami/redis/etc/",
                  "name": "redis-tmp-conf",
                },
                Object {
                  "mountPath": "/tmp",
                  "name": "tmp",
                },
              ],
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
          },
          "serviceAccountName": "graphql-mongo-redis",
          "terminationGracePeriodSeconds": 30,
          "volumes": Array [
            Object {
              "configMap": Object {
                "defaultMode": 493,
                "name": "graphql-mongo-redis-scripts",
              },
              "name": "start-scripts",
            },
            Object {
              "configMap": Object {
                "defaultMode": 493,
                "name": "graphql-mongo-redis-health",
              },
              "name": "health",
            },
            Object {
              "configMap": Object {
                "name": "graphql-mongo-redis-configuration",
              },
              "name": "config",
            },
            Object {
              "emptyDir": Object {},
              "name": "redis-tmp-conf",
            },
            Object {
              "emptyDir": Object {},
              "name": "tmp",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "master.conf": "dir /data
# User-supplied master configuration:
rename-command FLUSHDB \\"\\"
rename-command FLUSHALL \\"\\"
# End of master configuration",
      "redis.conf": "# User-supplied common configuration:
# Enable AOF https://redis.io/topics/persistence#append-only-file
appendonly yes
# Disable RDB persistence, AOF persistence already enabled.
save \\"\\"
# End of common configuration",
      "replica.conf": "dir /data
slave-read-only yes
# User-supplied replica configuration:
rename-command FLUSHDB \\"\\"
rename-command FLUSHALL \\"\\"
# End of replica configuration",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"master.conf\\":\\"dir /data\\\\n# User-supplied master configuration:\\\\nrename-command FLUSHDB \\\\\\"\\\\\\"\\\\nrename-command FLUSHALL \\\\\\"\\\\\\"\\\\n# End of master configuration\\",\\"redis.conf\\":\\"# User-supplied common configuration:\\\\n# Enable AOF https://redis.io/topics/persistence#append-only-file\\\\nappendonly yes\\\\n# Disable RDB persistence, AOF persistence already enabled.\\\\nsave \\\\\\"\\\\\\"\\\\n# End of common configuration\\",\\"replica.conf\\":\\"dir /data\\\\nslave-read-only yes\\\\n# User-supplied replica configuration:\\\\nrename-command FLUSHDB \\\\\\"\\\\\\"\\\\nrename-command FLUSHALL \\\\\\"\\\\\\"\\\\n# End of replica configuration\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis-configuration\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "graphql-mongo-redis-configuration",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/1-manifest/v1-configmap-applications-graphql-mongo-redis-configuration.yaml",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "start-master.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\\"$(< \\"\${REDIS_PASSWORD_FILE}\\")\\"
if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
fi
if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
fi
ARGS=(\\"--port\\" \\"\${REDIS_PORT}\\")
ARGS+=(\\"--requirepass\\" \\"\${REDIS_PASSWORD}\\")
ARGS+=(\\"--masterauth\\" \\"\${REDIS_PASSWORD}\\")
ARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/redis.conf\\")
ARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/master.conf\\")
exec redis-server \\"\${ARGS[@]}\\"
",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"start-master.sh\\":\\"#!/bin/bash\\\\n\\\\n[[ -f $REDIS_PASSWORD_FILE ]] \\\\u0026\\\\u0026 export REDIS_PASSWORD=\\\\\\"$(\\\\u003c \\\\\\"\${REDIS_PASSWORD_FILE}\\\\\\")\\\\\\"\\\\nif [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then\\\\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\\\\nfi\\\\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\\\\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\\\\nfi\\\\nARGS=(\\\\\\"--port\\\\\\" \\\\\\"\${REDIS_PORT}\\\\\\")\\\\nARGS+=(\\\\\\"--requirepass\\\\\\" \\\\\\"\${REDIS_PASSWORD}\\\\\\")\\\\nARGS+=(\\\\\\"--masterauth\\\\\\" \\\\\\"\${REDIS_PASSWORD}\\\\\\")\\\\nARGS+=(\\\\\\"--include\\\\\\" \\\\\\"/opt/bitnami/redis/etc/redis.conf\\\\\\")\\\\nARGS+=(\\\\\\"--include\\\\\\" \\\\\\"/opt/bitnami/redis/etc/master.conf\\\\\\")\\\\nexec redis-server \\\\\\"\${ARGS[@]}\\\\\\"\\\\n\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis-scripts\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "graphql-mongo-redis-scripts",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/1-manifest/v1-configmap-applications-graphql-mongo-redis-scripts.yaml",
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "setup-hidden.sh": "#!/bin/bash

. /opt/bitnami/scripts/mongodb-env.sh

echo \\"Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME\\"
echo \\"Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER\\"
echo \\"Configuring node as a hidden node\\"
export MONGODB_REPLICA_SET_MODE=\\"hidden\\"
export MONGODB_INITIAL_PRIMARY_ROOT_USER=\\"$MONGODB_ROOT_USER\\"
export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=\\"$MONGODB_ROOT_PASSWORD\\"
export MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\\"$MONGODB_PORT_NUMBER\\"
export MONGODB_ROOT_PASSWORD=\\"\\"
export MONGODB_EXTRA_USERNAMES=\\"\\"
export MONGODB_EXTRA_DATABASES=\\"\\"
export MONGODB_EXTRA_PASSWORDS=\\"\\"
export MONGODB_ROOT_PASSWORD_FILE=\\"\\"
export MONGODB_EXTRA_USERNAMES_FILE=\\"\\"
export MONGODB_EXTRA_DATABASES_FILE=\\"\\"
export MONGODB_EXTRA_PASSWORDS_FILE=\\"\\"
exec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh",
      "setup.sh": "#!/bin/bash

. /opt/bitnami/scripts/mongodb-env.sh
. /opt/bitnami/scripts/libfs.sh
. /opt/bitnami/scripts/liblog.sh
. /opt/bitnami/scripts/libvalidations.sh

if is_empty_value \\"$MONGODB_ADVERTISED_PORT_NUMBER\\"; then
  export MONGODB_ADVERTISED_PORT_NUMBER=\\"$MONGODB_PORT_NUMBER\\"
fi

info \\"Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME\\"
info \\"Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER\\"

# Check for existing replica set in case there is no data in the PVC
# This is for cases where the PVC is lost or for MongoDB caches without
# persistence
current_primary=\\"\\"
if is_dir_empty \\"\${MONGODB_DATA_DIR}/db\\"; then
  info \\"Data dir empty, checking if the replica set already exists\\"
  current_primary=$(mongo admin --host \\"graphql-mongo-database-0.graphql-mongo-database-headless.applications.svc.cluster.local:27017,graphql-mongo-database-1.graphql-mongo-database-headless.applications.svc.cluster.local:27017,graphql-mongo-database-2.graphql-mongo-database-headless.applications.svc.cluster.local:27017\\" --authenticationDatabase admin -u root -p $MONGODB_ROOT_PASSWORD --eval 'db.runCommand(\\"ismaster\\")' | awk -F\\\\\\" '/primary/ {print $4}')

  if ! is_empty_value \\"$current_primary\\"; then
    info \\"Detected existing primary: \${current_primary}\\"
  fi
fi

if ! is_empty_value \\"$current_primary\\" && [[ \\"$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER\\" == \\"$current_primary\\" ]]; then
    info \\"Advertised name matches current primary, configuring node as a primary\\"
    export MONGODB_REPLICA_SET_MODE=\\"primary\\"
elif ! is_empty_value \\"$current_primary\\" && [[ \\"$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER\\" != \\"$current_primary\\" ]]; then
    info \\"Current primary is different from this node. Configuring the node as replica of \${current_primary}\\"
    export MONGODB_REPLICA_SET_MODE=\\"secondary\\"
    export MONOGDB_INITIAL_PRIMARY_HOST=\\"\${current_primary%:*}\\"
    export MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\\"\${current_primary#*:}\\"
    export MONGODB_SET_SECONDARY_OK=\\"yes\\"
elif [[ \\"$MY_POD_NAME\\" = \\"graphql-mongo-database-0\\" ]]; then
    info \\"Pod name matches initial primary pod name, configuring node as a primary\\"
    export MONGODB_REPLICA_SET_MODE=\\"primary\\"
else
    info \\"Pod name doesn't match initial primary pod name, configuring node as a secondary\\"
    export MONGODB_REPLICA_SET_MODE=\\"secondary\\"
    export MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\\"$MONGODB_PORT_NUMBER\\"
fi

if [[ \\"$MONGODB_REPLICA_SET_MODE\\" == \\"secondary\\" ]]; then
    export MONGODB_INITIAL_PRIMARY_ROOT_USER=\\"$MONGODB_ROOT_USER\\"
    export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=\\"$MONGODB_ROOT_PASSWORD\\"
    export MONGODB_ROOT_PASSWORD=\\"\\"
    export MONGODB_EXTRA_USERNAMES=\\"\\"
    export MONGODB_EXTRA_DATABASES=\\"\\"
    export MONGODB_EXTRA_PASSWORDS=\\"\\"
    export MONGODB_ROOT_PASSWORD_FILE=\\"\\"
    export MONGODB_EXTRA_USERNAMES_FILE=\\"\\"
    export MONGODB_EXTRA_DATABASES_FILE=\\"\\"
    export MONGODB_EXTRA_PASSWORDS_FILE=\\"\\"
fi

exec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"setup-hidden.sh\\":\\"#!/bin/bash\\\\n\\\\n. /opt/bitnami/scripts/mongodb-env.sh\\\\n\\\\necho \\\\\\"Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME\\\\\\"\\\\necho \\\\\\"Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER\\\\\\"\\\\necho \\\\\\"Configuring node as a hidden node\\\\\\"\\\\nexport MONGODB_REPLICA_SET_MODE=\\\\\\"hidden\\\\\\"\\\\nexport MONGODB_INITIAL_PRIMARY_ROOT_USER=\\\\\\"$MONGODB_ROOT_USER\\\\\\"\\\\nexport MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=\\\\\\"$MONGODB_ROOT_PASSWORD\\\\\\"\\\\nexport MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\\\\\\"$MONGODB_PORT_NUMBER\\\\\\"\\\\nexport MONGODB_ROOT_PASSWORD=\\\\\\"\\\\\\"\\\\nexport MONGODB_EXTRA_USERNAMES=\\\\\\"\\\\\\"\\\\nexport MONGODB_EXTRA_DATABASES=\\\\\\"\\\\\\"\\\\nexport MONGODB_EXTRA_PASSWORDS=\\\\\\"\\\\\\"\\\\nexport MONGODB_ROOT_PASSWORD_FILE=\\\\\\"\\\\\\"\\\\nexport MONGODB_EXTRA_USERNAMES_FILE=\\\\\\"\\\\\\"\\\\nexport MONGODB_EXTRA_DATABASES_FILE=\\\\\\"\\\\\\"\\\\nexport MONGODB_EXTRA_PASSWORDS_FILE=\\\\\\"\\\\\\"\\\\nexec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh\\",\\"setup.sh\\":\\"#!/bin/bash\\\\n\\\\n. /opt/bitnami/scripts/mongodb-env.sh\\\\n. /opt/bitnami/scripts/libfs.sh\\\\n. /opt/bitnami/scripts/liblog.sh\\\\n. /opt/bitnami/scripts/libvalidations.sh\\\\n\\\\nif is_empty_value \\\\\\"$MONGODB_ADVERTISED_PORT_NUMBER\\\\\\"; then\\\\n  export MONGODB_ADVERTISED_PORT_NUMBER=\\\\\\"$MONGODB_PORT_NUMBER\\\\\\"\\\\nfi\\\\n\\\\ninfo \\\\\\"Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME\\\\\\"\\\\ninfo \\\\\\"Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER\\\\\\"\\\\n\\\\n# Check for existing replica set in case there is no data in the PVC\\\\n# This is for cases where the PVC is lost or for MongoDB caches without\\\\n# persistence\\\\ncurrent_primary=\\\\\\"\\\\\\"\\\\nif is_dir_empty \\\\\\"\${MONGODB_DATA_DIR}/db\\\\\\"; then\\\\n  info \\\\\\"Data dir empty, checking if the replica set already exists\\\\\\"\\\\n  current_primary=$(mongo admin --host \\\\\\"graphql-mongo-database-0.graphql-mongo-database-headless.applications.svc.cluster.local:27017,graphql-mongo-database-1.graphql-mongo-database-headless.applications.svc.cluster.local:27017,graphql-mongo-database-2.graphql-mongo-database-headless.applications.svc.cluster.local:27017\\\\\\" --authenticationDatabase admin -u root -p $MONGODB_ROOT_PASSWORD --eval 'db.runCommand(\\\\\\"ismaster\\\\\\")' | awk -F\\\\\\\\\\\\\\" '/primary/ {print $4}')\\\\n\\\\n  if ! is_empty_value \\\\\\"$current_primary\\\\\\"; then\\\\n    info \\\\\\"Detected existing primary: \${current_primary}\\\\\\"\\\\n  fi\\\\nfi\\\\n\\\\nif ! is_empty_value \\\\\\"$current_primary\\\\\\" \\\\u0026\\\\u0026 [[ \\\\\\"$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER\\\\\\" == \\\\\\"$current_primary\\\\\\" ]]; then\\\\n    info \\\\\\"Advertised name matches current primary, configuring node as a primary\\\\\\"\\\\n    export MONGODB_REPLICA_SET_MODE=\\\\\\"primary\\\\\\"\\\\nelif ! is_empty_value \\\\\\"$current_primary\\\\\\" \\\\u0026\\\\u0026 [[ \\\\\\"$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER\\\\\\" != \\\\\\"$current_primary\\\\\\" ]]; then\\\\n    info \\\\\\"Current primary is different from this node. Configuring the node as replica of \${current_primary}\\\\\\"\\\\n    export MONGODB_REPLICA_SET_MODE=\\\\\\"secondary\\\\\\"\\\\n    export MONOGDB_INITIAL_PRIMARY_HOST=\\\\\\"\${current_primary%:*}\\\\\\"\\\\n    export MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\\\\\\"\${current_primary#*:}\\\\\\"\\\\n    export MONGODB_SET_SECONDARY_OK=\\\\\\"yes\\\\\\"\\\\nelif [[ \\\\\\"$MY_POD_NAME\\\\\\" = \\\\\\"graphql-mongo-database-0\\\\\\" ]]; then\\\\n    info \\\\\\"Pod name matches initial primary pod name, configuring node as a primary\\\\\\"\\\\n    export MONGODB_REPLICA_SET_MODE=\\\\\\"primary\\\\\\"\\\\nelse\\\\n    info \\\\\\"Pod name doesn't match initial primary pod name, configuring node as a secondary\\\\\\"\\\\n    export MONGODB_REPLICA_SET_MODE=\\\\\\"secondary\\\\\\"\\\\n    export MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\\\\\\"$MONGODB_PORT_NUMBER\\\\\\"\\\\nfi\\\\n\\\\nif [[ \\\\\\"$MONGODB_REPLICA_SET_MODE\\\\\\" == \\\\\\"secondary\\\\\\" ]]; then\\\\n    export MONGODB_INITIAL_PRIMARY_ROOT_USER=\\\\\\"$MONGODB_ROOT_USER\\\\\\"\\\\n    export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=\\\\\\"$MONGODB_ROOT_PASSWORD\\\\\\"\\\\n    export MONGODB_ROOT_PASSWORD=\\\\\\"\\\\\\"\\\\n    export MONGODB_EXTRA_USERNAMES=\\\\\\"\\\\\\"\\\\n    export MONGODB_EXTRA_DATABASES=\\\\\\"\\\\\\"\\\\n    export MONGODB_EXTRA_PASSWORDS=\\\\\\"\\\\\\"\\\\n    export MONGODB_ROOT_PASSWORD_FILE=\\\\\\"\\\\\\"\\\\n    export MONGODB_EXTRA_USERNAMES_FILE=\\\\\\"\\\\\\"\\\\n    export MONGODB_EXTRA_DATABASES_FILE=\\\\\\"\\\\\\"\\\\n    export MONGODB_EXTRA_PASSWORDS_FILE=\\\\\\"\\\\\\"\\\\nfi\\\\n\\\\nexec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database-scripts\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "graphql-mongo-database-scripts",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/1-manifest/v1-configmap-applications-graphql-mongo-database-scripts.yaml",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"StatefulSet\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"podManagementPolicy\\":\\"OrderedReady\\",\\"replicas\\":3,\\"selector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/name\\":\\"mongodb\\"}},\\"serviceName\\":\\"graphql-mongo-database\\",\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"Helm\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"}},\\"spec\\":{\\"affinity\\":{\\"podAntiAffinity\\":{\\"preferredDuringSchedulingIgnoredDuringExecution\\":[{\\"podAffinityTerm\\":{\\"labelSelector\\":{\\"matchLabels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/name\\":\\"mongodb\\"}},\\"namespaces\\":[\\"applications\\"],\\"topologyKey\\":\\"kubernetes.io/hostname\\"},\\"weight\\":1}]}},\\"containers\\":[{\\"command\\":[\\"/scripts/setup.sh\\"],\\"env\\":[{\\"name\\":\\"BITNAMI_DEBUG\\",\\"value\\":\\"false\\"},{\\"name\\":\\"MY_POD_NAME\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.name\\"}}},{\\"name\\":\\"MY_POD_NAMESPACE\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"metadata.namespace\\"}}},{\\"name\\":\\"MY_POD_HOST_IP\\",\\"valueFrom\\":{\\"fieldRef\\":{\\"fieldPath\\":\\"status.hostIP\\"}}},{\\"name\\":\\"K8S_SERVICE_NAME\\",\\"value\\":\\"graphql-mongo-database\\"},{\\"name\\":\\"MONGODB_INITIAL_PRIMARY_HOST\\",\\"value\\":\\"graphql-mongo-database-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local\\"},{\\"name\\":\\"MONGODB_REPLICA_SET_NAME\\",\\"value\\":\\"rs0\\"},{\\"name\\":\\"MONGODB_ADVERTISED_HOSTNAME\\",\\"value\\":\\"$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local\\"},{\\"name\\":\\"MONGODB_EXTRA_USERNAMES\\",\\"value\\":\\"examplemm,username1,username2\\"},{\\"name\\":\\"MONGODB_EXTRA_DATABASES\\",\\"value\\":\\"graphql-mongo-database,db1,db2\\"},{\\"name\\":\\"MONGODB_EXTRA_PASSWORDS\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"mongodb-passwords\\",\\"name\\":\\"graphql-mongo-database\\"}}},{\\"name\\":\\"MONGODB_ROOT_USER\\",\\"value\\":\\"example\\"},{\\"name\\":\\"MONGODB_ROOT_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"mongodb-root-password\\",\\"name\\":\\"graphql-mongo-database\\"}}},{\\"name\\":\\"MONGODB_REPLICA_SET_KEY\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"mongodb-replica-set-key\\",\\"name\\":\\"graphql-mongo-database\\"}}},{\\"name\\":\\"ALLOW_EMPTY_PASSWORD\\",\\"value\\":\\"no\\"},{\\"name\\":\\"MONGODB_SYSTEM_LOG_VERBOSITY\\",\\"value\\":\\"0\\"},{\\"name\\":\\"MONGODB_DISABLE_SYSTEM_LOG\\",\\"value\\":\\"no\\"},{\\"name\\":\\"MONGODB_DISABLE_JAVASCRIPT\\",\\"value\\":\\"no\\"},{\\"name\\":\\"MONGODB_ENABLE_JOURNAL\\",\\"value\\":\\"yes\\"},{\\"name\\":\\"MONGODB_ENABLE_IPV6\\",\\"value\\":\\"no\\"},{\\"name\\":\\"MONGODB_ENABLE_DIRECTORY_PER_DB\\",\\"value\\":\\"no\\"}],\\"image\\":\\"docker.io/bitnami/mongodb:4.4.13-debian-10-r52\\",\\"imagePullPolicy\\":\\"IfNotPresent\\",\\"livenessProbe\\":{\\"exec\\":{\\"command\\":[\\"mongo\\",\\"--disableImplicitSessions\\",\\"--eval\\",\\"db.adminCommand('ping')\\"]},\\"failureThreshold\\":6,\\"initialDelaySeconds\\":30,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":5},\\"name\\":\\"mongodb\\",\\"ports\\":[{\\"containerPort\\":27017,\\"name\\":\\"mongodb\\"}],\\"readinessProbe\\":{\\"exec\\":{\\"command\\":[\\"bash\\",\\"-ec\\",\\"# Run the proper check depending on the version\\\\n[[ $(mongo --version | grep \\\\\\"MongoDB shell\\\\\\") =~ ([0-9]+\\\\\\\\.[0-9]+\\\\\\\\.[0-9]+) ]] \\\\u0026\\\\u0026 VERSION=\${BASH_REMATCH[1]}\\\\n. /opt/bitnami/scripts/libversion.sh\\\\nVERSION_MAJOR=\\\\\\"$(get_sematic_version \\\\\\"$VERSION\\\\\\" 1)\\\\\\"\\\\nVERSION_MINOR=\\\\\\"$(get_sematic_version \\\\\\"$VERSION\\\\\\" 2)\\\\\\"\\\\nVERSION_PATCH=\\\\\\"$(get_sematic_version \\\\\\"$VERSION\\\\\\" 3)\\\\\\"\\\\nif [[ \\\\\\"$VERSION_MAJOR\\\\\\" -ge 4 ]] \\\\u0026\\\\u0026 [[ \\\\\\"$VERSION_MINOR\\\\\\" -ge 4 ]] \\\\u0026\\\\u0026 [[ \\\\\\"$VERSION_PATCH\\\\\\" -ge 2 ]]; then\\\\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'\\\\nelse\\\\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'\\\\nfi\\\\n\\"]},\\"failureThreshold\\":6,\\"initialDelaySeconds\\":5,\\"periodSeconds\\":10,\\"successThreshold\\":1,\\"timeoutSeconds\\":5},\\"resources\\":{\\"limits\\":{},\\"requests\\":{}},\\"securityContext\\":{\\"runAsNonRoot\\":true,\\"runAsUser\\":1001},\\"volumeMounts\\":[{\\"mountPath\\":\\"/bitnami/mongodb\\",\\"name\\":\\"datadir\\"},{\\"mountPath\\":\\"/scripts/setup.sh\\",\\"name\\":\\"scripts\\",\\"subPath\\":\\"setup.sh\\"}]}],\\"securityContext\\":{\\"fsGroup\\":1001,\\"sysctls\\":[]},\\"serviceAccountName\\":\\"graphql-mongo-database\\",\\"volumes\\":[{\\"configMap\\":{\\"defaultMode\\":493,\\"name\\":\\"graphql-mongo-database-scripts\\"},\\"name\\":\\"scripts\\"}]}},\\"updateStrategy\\":{\\"type\\":\\"RollingUpdate\\"},\\"volumeClaimTemplates\\":[{\\"metadata\\":{\\"name\\":\\"datadir\\"},\\"spec\\":{\\"accessModes\\":[\\"ReadWriteOnce\\"],\\"resources\\":{\\"requests\\":{\\"storage\\":\\"10Gi\\"}}}}]}}
",
      },
      "name": "graphql-mongo-database",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/1-manifest/apps_v1-statefulset-applications-graphql-mongo-database.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "mongodb",
            "app.kubernetes.io/instance": "graphql-mongo-database",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "mongodb",
            "helm.sh/chart": "mongodb-11.1.10",
          },
        },
        "spec": Object {
          "affinity": Object {
            "podAntiAffinity": Object {
              "preferredDuringSchedulingIgnoredDuringExecution": Array [
                Object {
                  "podAffinityTerm": Object {
                    "labelSelector": Object {
                      "matchLabels": Object {
                        "app.kubernetes.io/component": "mongodb",
                        "app.kubernetes.io/instance": "graphql-mongo-database",
                        "app.kubernetes.io/name": "mongodb",
                      },
                    },
                    "namespaces": Array [
                      "applications",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": Array [
            Object {
              "command": Array [
                "/scripts/setup.sh",
              ],
              "env": Array [
                Object {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                Object {
                  "name": "MY_POD_NAME",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                Object {
                  "name": "MY_POD_NAMESPACE",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                Object {
                  "name": "MY_POD_HOST_IP",
                  "valueFrom": Object {
                    "fieldRef": Object {
                      "fieldPath": "status.hostIP",
                    },
                  },
                },
                Object {
                  "name": "K8S_SERVICE_NAME",
                  "value": "graphql-mongo-database",
                },
                Object {
                  "name": "MONGODB_INITIAL_PRIMARY_HOST",
                  "value": "graphql-mongo-database-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local",
                },
                Object {
                  "name": "MONGODB_REPLICA_SET_NAME",
                  "value": "rs0",
                },
                Object {
                  "name": "MONGODB_ADVERTISED_HOSTNAME",
                  "value": "$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local",
                },
                Object {
                  "name": "MONGODB_EXTRA_USERNAMES",
                  "value": "examplemm,username1,username2",
                },
                Object {
                  "name": "MONGODB_EXTRA_DATABASES",
                  "value": "graphql-mongo-database,db1,db2",
                },
                Object {
                  "name": "MONGODB_EXTRA_PASSWORDS",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "mongodb-passwords",
                      "name": "graphql-mongo-database",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_ROOT_USER",
                  "value": "example",
                },
                Object {
                  "name": "MONGODB_ROOT_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "mongodb-root-password",
                      "name": "graphql-mongo-database",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_REPLICA_SET_KEY",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "mongodb-replica-set-key",
                      "name": "graphql-mongo-database",
                    },
                  },
                },
                Object {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no",
                },
                Object {
                  "name": "MONGODB_SYSTEM_LOG_VERBOSITY",
                  "value": "0",
                },
                Object {
                  "name": "MONGODB_DISABLE_SYSTEM_LOG",
                  "value": "no",
                },
                Object {
                  "name": "MONGODB_DISABLE_JAVASCRIPT",
                  "value": "no",
                },
                Object {
                  "name": "MONGODB_ENABLE_JOURNAL",
                  "value": "yes",
                },
                Object {
                  "name": "MONGODB_ENABLE_IPV6",
                  "value": "no",
                },
                Object {
                  "name": "MONGODB_ENABLE_DIRECTORY_PER_DB",
                  "value": "no",
                },
              ],
              "image": "docker.io/bitnami/mongodb:4.4.13-debian-10-r52",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "mongo",
                    "--disableImplicitSessions",
                    "--eval",
                    "db.adminCommand('ping')",
                  ],
                },
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "name": "mongodb",
              "ports": Array [
                Object {
                  "containerPort": 27017,
                  "name": "mongodb",
                },
              ],
              "readinessProbe": Object {
                "exec": Object {
                  "command": Array [
                    "bash",
                    "-ec",
                    "# Run the proper check depending on the version
[[ $(mongo --version | grep \\"MongoDB shell\\") =~ ([0-9]+\\\\.[0-9]+\\\\.[0-9]+) ]] && VERSION=\${BASH_REMATCH[1]}
. /opt/bitnami/scripts/libversion.sh
VERSION_MAJOR=\\"$(get_sematic_version \\"$VERSION\\" 1)\\"
VERSION_MINOR=\\"$(get_sematic_version \\"$VERSION\\" 2)\\"
VERSION_PATCH=\\"$(get_sematic_version \\"$VERSION\\" 3)\\"
if [[ \\"$VERSION_MAJOR\\" -ge 4 ]] && [[ \\"$VERSION_MINOR\\" -ge 4 ]] && [[ \\"$VERSION_PATCH\\" -ge 2 ]]; then
    mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
else
    mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'
fi
",
                  ],
                },
                "failureThreshold": 6,
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "resources": Object {
                "limits": Object {},
                "requests": Object {},
              },
              "securityContext": Object {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/bitnami/mongodb",
                  "name": "datadir",
                },
                Object {
                  "mountPath": "/scripts/setup.sh",
                  "name": "scripts",
                  "subPath": "setup.sh",
                },
              ],
            },
          ],
          "securityContext": Object {
            "fsGroup": 1001,
            "sysctls": Array [],
          },
          "serviceAccountName": "graphql-mongo-database",
          "volumes": Array [
            Object {
              "configMap": Object {
                "defaultMode": 493,
                "name": "graphql-mongo-database-scripts",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"kubectl.kubernetes.io/last-applied-configuration\\":\\"{\\\\\\"apiVersion\\\\\\":\\\\\\"apps/v1\\\\\\",\\\\\\"kind\\\\\\":\\\\\\"Deployment\\\\\\",\\\\\\"metadata\\\\\\":{\\\\\\"annotations\\\\\\":{\\\\\\"linkerd.io/inject\\\\\\":\\\\\\"enabled\\\\\\"},\\\\\\"labels\\\\\\":{\\\\\\"app.kubernetes.io/managed-by\\\\\\":\\\\\\"pulumi\\\\\\"},\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\",\\\\\\"namespace\\\\\\":\\\\\\"applications\\\\\\"},\\\\\\"spec\\\\\\":{\\\\\\"replicas\\\\\\":2,\\\\\\"selector\\\\\\":{\\\\\\"matchLabels\\\\\\":{\\\\\\"app\\\\\\":\\\\\\"graphql\\\\\\"}},\\\\\\"template\\\\\\":{\\\\\\"metadata\\\\\\":{\\\\\\"labels\\\\\\":{\\\\\\"app\\\\\\":\\\\\\"graphql\\\\\\"}},\\\\\\"spec\\\\\\":{\\\\\\"containers\\\\\\":[{\\\\\\"env\\\\\\":[{\\\\\\"name\\\\\\":\\\\\\"APP_ENVIRONMENT\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_ENVIRONMENT\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"APP_HOST\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_HOST\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"APP_PORT\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_PORT\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"APP_EXTERNAL_BASE_URL\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_EXTERNAL_BASE_URL\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"OAUTH_GITHUB_CLIENT_ID\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"OAUTH_GITHUB_CLIENT_ID\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"OAUTH_GITHUB_CLIENT_SECRET\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"OAUTH_GITHUB_CLIENT_SECRET\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"OAUTH_GOOGLE_CLIENT_ID\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"OAUTH_GOOGLE_CLIENT_ID\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"OAUTH_GOOGLE_CLIENT_SECRET\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"OAUTH_GOOGLE_CLIENT_SECRET\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_NAME\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_NAME\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_USERNAME\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_USERNAME\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_PASSWORD\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_PASSWORD\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_ROOT_USERNAME\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_ROOT_USERNAME\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_ROOT_PASSWORD\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_ROOT_PASSWORD\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_HOST\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_HOST\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_SERVICE_NAME\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_SERVICE_NAME\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_STORAGE_CLASS\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_STORAGE_CLASS\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"MONGODB_PORT\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"MONGODB_PORT\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"REDIS_USERNAME\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"REDIS_USERNAME\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"REDIS_PASSWORD\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"REDIS_PASSWORD\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"REDIS_HOST\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"REDIS_HOST\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"REDIS_SERVICE_NAME\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"REDIS_SERVICE_NAME\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"REDIS_PORT\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"REDIS_PORT\\\\\\",\\\\\\"name\\\\\\":\\\\\\"graphql-mongo\\\\\\"}}}],\\\\\\"image\\\\\\":\\\\\\"ghcr.io/oyelowo/graphql-mongo:master-f21d07e5b52e5fdc859482d526310efc78d9efea\\\\\\",\\\\\\"livenessProbe\\\\\\":{\\\\\\"failureThreshold\\\\\\":7,\\\\\\"httpGet\\\\\\":{\\\\\\"path\\\\\\":\\\\\\"/api/liveness\\\\\\",\\\\\\"port\\\\\\":8000},\\\\\\"initialDelaySeconds\\\\\\":300,\\\\\\"periodSeconds\\\\\\":10},\\\\\\"name\\\\\\":\\\\\\"graphql\\\\\\",\\\\\\"ports\\\\\\":[{\\\\\\"containerPort\\\\\\":8000,\\\\\\"name\\\\\\":\\\\\\"http\\\\\\"}],\\\\\\"readinessProbe\\\\\\":{\\\\\\"failureThreshold\\\\\\":7,\\\\\\"httpGet\\\\\\":{\\\\\\"path\\\\\\":\\\\\\"/api/healthz\\\\\\",\\\\\\"port\\\\\\":8000},\\\\\\"initialDelaySeconds\\\\\\":60,\\\\\\"periodSeconds\\\\\\":10},\\\\\\"resources\\\\\\":{\\\\\\"limits\\\\\\":{\\\\\\"cpu\\\\\\":\\\\\\"100m\\\\\\",\\\\\\"memory\\\\\\":\\\\\\"200Mi\\\\\\"},\\\\\\"requests\\\\\\":{\\\\\\"cpu\\\\\\":\\\\\\"100m\\\\\\",\\\\\\"memory\\\\\\":\\\\\\"70Mi\\\\\\"}},\\\\\\"volumeMounts\\\\\\":[]}],\\\\\\"imagePullSecrets\\\\\\":[{\\\\\\"name\\\\\\":\\\\\\"my-registry-key\\\\\\"}],\\\\\\"initContainers\\\\\\":[],\\\\\\"volumes\\\\\\":[]}}}}\\\\n\\",\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"graphql-mongo-http\\",\\"port\\":8000,\\"protocol\\":\\"TCP\\",\\"targetPort\\":8000}],\\"selector\\":{\\"app\\":\\"graphql\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "graphql-mongo",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/1-manifest/v1-service-applications-graphql-mongo.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"replicas\\":2,\\"selector\\":{\\"matchLabels\\":{\\"app\\":\\"graphql\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app\\":\\"graphql\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"APP_ENVIRONMENT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_ENVIRONMENT\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"APP_HOST\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_HOST\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"APP_PORT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_PORT\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"APP_EXTERNAL_BASE_URL\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_EXTERNAL_BASE_URL\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"OAUTH_GITHUB_CLIENT_ID\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"OAUTH_GITHUB_CLIENT_ID\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"OAUTH_GITHUB_CLIENT_SECRET\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"OAUTH_GITHUB_CLIENT_SECRET\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"OAUTH_GOOGLE_CLIENT_ID\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"OAUTH_GOOGLE_CLIENT_ID\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"OAUTH_GOOGLE_CLIENT_SECRET\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"OAUTH_GOOGLE_CLIENT_SECRET\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_NAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_NAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_USERNAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_USERNAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_PASSWORD\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_ROOT_USERNAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_ROOT_USERNAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_ROOT_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_ROOT_PASSWORD\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_HOST\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_HOST\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_SERVICE_NAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_SERVICE_NAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_STORAGE_CLASS\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_STORAGE_CLASS\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"MONGODB_PORT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"MONGODB_PORT\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_USERNAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_USERNAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_PASSWORD\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_PASSWORD\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_HOST\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_HOST\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_SERVICE_NAME\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_SERVICE_NAME\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_SERVICE_NAME_WITH_SUFFIX\\",\\"name\\":\\"graphql-mongo\\"}}},{\\"name\\":\\"REDIS_PORT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"REDIS_PORT\\",\\"name\\":\\"graphql-mongo\\"}}}],\\"image\\":\\"ghcr.io/oyelowo/graphql-mongo:master-f21d07e5b52e5fdc859482d526310efc78d9efea\\",\\"livenessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/api/liveness\\",\\"port\\":8000},\\"initialDelaySeconds\\":300,\\"periodSeconds\\":10},\\"name\\":\\"graphql\\",\\"ports\\":[{\\"containerPort\\":8000,\\"name\\":\\"http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/api/healthz\\",\\"port\\":8000},\\"initialDelaySeconds\\":60,\\"periodSeconds\\":10},\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"200Mi\\"},\\"requests\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"70Mi\\"}},\\"volumeMounts\\":[]}],\\"imagePullSecrets\\":[{\\"name\\":\\"my-registry-key\\"}],\\"initContainers\\":[],\\"volumes\\":[]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "graphql-mongo",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/1-manifest/apps_v1-deployment-applications-graphql-mongo.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app": "graphql",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "APP_ENVIRONMENT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_ENVIRONMENT",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "APP_HOST",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_HOST",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "APP_PORT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_PORT",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "APP_EXTERNAL_BASE_URL",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_EXTERNAL_BASE_URL",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "OAUTH_GITHUB_CLIENT_ID",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "OAUTH_GITHUB_CLIENT_ID",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "OAUTH_GITHUB_CLIENT_SECRET",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "OAUTH_GITHUB_CLIENT_SECRET",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "OAUTH_GOOGLE_CLIENT_ID",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "OAUTH_GOOGLE_CLIENT_ID",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "OAUTH_GOOGLE_CLIENT_SECRET",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "OAUTH_GOOGLE_CLIENT_SECRET",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_NAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_NAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_USERNAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_USERNAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_PASSWORD",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_ROOT_USERNAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_ROOT_USERNAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_ROOT_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_ROOT_PASSWORD",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_HOST",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_HOST",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_SERVICE_NAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_SERVICE_NAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_STORAGE_CLASS",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_STORAGE_CLASS",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "MONGODB_PORT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "MONGODB_PORT",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_USERNAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_USERNAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_PASSWORD",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_HOST",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_HOST",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_SERVICE_NAME",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_SERVICE_NAME",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_SERVICE_NAME_WITH_SUFFIX",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_SERVICE_NAME_WITH_SUFFIX",
                      "name": "graphql-mongo",
                    },
                  },
                },
                Object {
                  "name": "REDIS_PORT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "REDIS_PORT",
                      "name": "graphql-mongo",
                    },
                  },
                },
              ],
              "image": "ghcr.io/oyelowo/graphql-mongo:master-f21d07e5b52e5fdc859482d526310efc78d9efea",
              "livenessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/api/liveness",
                  "port": 8000,
                },
                "initialDelaySeconds": 300,
                "periodSeconds": 10,
              },
              "name": "graphql",
              "ports": Array [
                Object {
                  "containerPort": 8000,
                  "name": "http",
                },
              ],
              "readinessProbe": Object {
                "failureThreshold": 7,
                "httpGet": Object {
                  "path": "/api/healthz",
                  "port": 8000,
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
              },
              "resources": Object {
                "limits": Object {
                  "cpu": "100m",
                  "memory": "200Mi",
                },
                "requests": Object {
                  "cpu": "100m",
                  "memory": "70Mi",
                },
              },
              "volumeMounts": Array [],
            },
          ],
          "imagePullSecrets": Array [
            Object {
              "name": "my-registry-key",
            },
          ],
          "initContainers": Array [],
          "volumes": Array [],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"mongodb\\",\\"helm.sh/chart\\":\\"mongodb-11.1.10\\"},\\"name\\":\\"graphql-mongo-database\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"mongodb\\",\\"port\\":27017,\\"targetPort\\":\\"mongodb\\"}],\\"publishNotReadyAddresses\\":true,\\"selector\\":{\\"app.kubernetes.io/component\\":\\"mongodb\\",\\"app.kubernetes.io/instance\\":\\"graphql-mongo-database\\",\\"app.kubernetes.io/name\\":\\"mongodb\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "graphql-mongo-database",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/1-manifest/v1-service-applications-graphql-mongo-database.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "config": "very important data",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"config\\":\\"very important data\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-mongo\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "graphql-mongo",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/1-manifest/v1-configmap-applications-graphql-mongo.yaml",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis-headless\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"clusterIP\\":\\"None\\",\\"ports\\":[{\\"name\\":\\"tcp-redis\\",\\"port\\":6379,\\"targetPort\\":\\"redis\\"}],\\"selector\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/name\\":\\"redis\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "graphql-mongo-redis-headless",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/1-manifest/v1-service-applications-graphql-mongo-redis-headless.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "redis-password": "anVuZ2J1bnU=",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"redis-password\\":\\"anVuZ2J1bnU=\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis\\",\\"namespace\\":\\"applications\\"},\\"type\\":\\"Opaque\\"}
",
      },
      "name": "graphql-mongo-redis",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/1-manifest/v1-secret-applications-graphql-mongo-redis.yaml",
    "type": "Opaque",
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/managed-by\\":\\"pulumi\\",\\"app.kubernetes.io/name\\":\\"redis\\",\\"helm.sh/chart\\":\\"redis-16.8.9\\"},\\"name\\":\\"graphql-mongo-redis-master\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"tcp-redis\\",\\"port\\":6379,\\"targetPort\\":\\"redis\\"}],\\"selector\\":{\\"app.kubernetes.io/component\\":\\"master\\",\\"app.kubernetes.io/instance\\":\\"redis\\",\\"app.kubernetes.io/name\\":\\"redis\\"},\\"type\\":\\"ClusterIP\\"}}
",
      },
      "name": "graphql-mongo-redis-master",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/graphql-mongo/1-manifest/v1-service-applications-graphql-mongo-redis-master.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"kind\\":\\"Service\\",\\"metadata\\":{\\"annotations\\":{\\"kubectl.kubernetes.io/last-applied-configuration\\":\\"{\\\\\\"apiVersion\\\\\\":\\\\\\"apps/v1\\\\\\",\\\\\\"kind\\\\\\":\\\\\\"Deployment\\\\\\",\\\\\\"metadata\\\\\\":{\\\\\\"annotations\\\\\\":{\\\\\\"linkerd.io/inject\\\\\\":\\\\\\"enabled\\\\\\"},\\\\\\"labels\\\\\\":{\\\\\\"app.kubernetes.io/managed-by\\\\\\":\\\\\\"pulumi\\\\\\"},\\\\\\"name\\\\\\":\\\\\\"react-web\\\\\\",\\\\\\"namespace\\\\\\":\\\\\\"applications\\\\\\"},\\\\\\"spec\\\\\\":{\\\\\\"replicas\\\\\\":2,\\\\\\"selector\\\\\\":{\\\\\\"matchLabels\\\\\\":{\\\\\\"app\\\\\\":\\\\\\"react\\\\\\"}},\\\\\\"template\\\\\\":{\\\\\\"metadata\\\\\\":{\\\\\\"labels\\\\\\":{\\\\\\"app\\\\\\":\\\\\\"react\\\\\\"}},\\\\\\"spec\\\\\\":{\\\\\\"containers\\\\\\":[{\\\\\\"env\\\\\\":[{\\\\\\"name\\\\\\":\\\\\\"APP_ENVIRONMENT\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_ENVIRONMENT\\\\\\",\\\\\\"name\\\\\\":\\\\\\"react-web\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"APP_HOST\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_HOST\\\\\\",\\\\\\"name\\\\\\":\\\\\\"react-web\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"APP_PORT\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_PORT\\\\\\",\\\\\\"name\\\\\\":\\\\\\"react-web\\\\\\"}}},{\\\\\\"name\\\\\\":\\\\\\"APP_EXTERNAL_BASE_URL\\\\\\",\\\\\\"valueFrom\\\\\\":{\\\\\\"secretKeyRef\\\\\\":{\\\\\\"key\\\\\\":\\\\\\"APP_EXTERNAL_BASE_URL\\\\\\",\\\\\\"name\\\\\\":\\\\\\"react-web\\\\\\"}}}],\\\\\\"image\\\\\\":\\\\\\"ghcr.io/oyelowo/react-web:master-6fe87cdb17db051e707efbaaae6fc0dc83844ebe\\\\\\",\\\\\\"name\\\\\\":\\\\\\"react\\\\\\",\\\\\\"ports\\\\\\":[{\\\\\\"containerPort\\\\\\":3000,\\\\\\"name\\\\\\":\\\\\\"http\\\\\\"}],\\\\\\"resources\\\\\\":{\\\\\\"limits\\\\\\":{\\\\\\"cpu\\\\\\":\\\\\\"700m\\\\\\",\\\\\\"memory\\\\\\":\\\\\\"2Gi\\\\\\"},\\\\\\"requests\\\\\\":{\\\\\\"cpu\\\\\\":\\\\\\"500m\\\\\\",\\\\\\"memory\\\\\\":\\\\\\"1.3Gi\\\\\\"}},\\\\\\"volumeMounts\\\\\\":[]}],\\\\\\"imagePullSecrets\\\\\\":[{\\\\\\"name\\\\\\":\\\\\\"my-registry-key\\\\\\"}],\\\\\\"initContainers\\\\\\":[],\\\\\\"volumes\\\\\\":[]}}}}\\\\n\\",\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"ports\\":[{\\"name\\":\\"react-web-http\\",\\"port\\":3000,\\"protocol\\":\\"TCP\\",\\"targetPort\\":3000}],\\"selector\\":{\\"app\\":\\"react\\"},\\"type\\":\\"ClusterIP\\"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/react-web/1-manifest/v1-service-applications-react-web.yaml",
    "spec": Object {},
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "APP_ENVIRONMENT": "bG9jYWw=",
      "APP_EXTERNAL_BASE_URL": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
      "APP_HOST": "MC4wLjAuMA==",
      "APP_PORT": "MzAwMA==",
    },
    "kind": "Secret",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"APP_ENVIRONMENT\\":\\"bG9jYWw=\\",\\"APP_EXTERNAL_BASE_URL\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\",\\"APP_HOST\\":\\"MC4wLjAuMA==\\",\\"APP_PORT\\":\\"MzAwMA==\\"},\\"kind\\":\\"Secret\\",\\"metadata\\":{\\"annotations\\":{\\"sealedsecrets.bitnami.com/managed\\":\\"true\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"}}
",
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/react-web/1-manifest/v1-secret-applications-react-web.yaml",
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"replicas\\":2,\\"selector\\":{\\"matchLabels\\":{\\"app\\":\\"react\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app\\":\\"react\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"APP_ENVIRONMENT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_ENVIRONMENT\\",\\"name\\":\\"react-web\\"}}},{\\"name\\":\\"APP_HOST\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_HOST\\",\\"name\\":\\"react-web\\"}}},{\\"name\\":\\"APP_PORT\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_PORT\\",\\"name\\":\\"react-web\\"}}},{\\"name\\":\\"APP_EXTERNAL_BASE_URL\\",\\"valueFrom\\":{\\"secretKeyRef\\":{\\"key\\":\\"APP_EXTERNAL_BASE_URL\\",\\"name\\":\\"react-web\\"}}}],\\"image\\":\\"ghcr.io/oyelowo/react-web:master-6fe87cdb17db051e707efbaaae6fc0dc83844ebe\\",\\"name\\":\\"react\\",\\"ports\\":[{\\"containerPort\\":3000,\\"name\\":\\"http\\"}],\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"700m\\",\\"memory\\":\\"2Gi\\"},\\"requests\\":{\\"cpu\\":\\"500m\\",\\"memory\\":\\"1.3Gi\\"}},\\"volumeMounts\\":[]}],\\"imagePullSecrets\\":[{\\"name\\":\\"my-registry-key\\"}],\\"initContainers\\":[],\\"volumes\\":[]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/react-web/1-manifest/apps_v1-deployment-applications-react-web.yaml",
    "spec": Object {
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app": "react",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "APP_ENVIRONMENT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_ENVIRONMENT",
                      "name": "react-web",
                    },
                  },
                },
                Object {
                  "name": "APP_HOST",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_HOST",
                      "name": "react-web",
                    },
                  },
                },
                Object {
                  "name": "APP_PORT",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_PORT",
                      "name": "react-web",
                    },
                  },
                },
                Object {
                  "name": "APP_EXTERNAL_BASE_URL",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "APP_EXTERNAL_BASE_URL",
                      "name": "react-web",
                    },
                  },
                },
              ],
              "image": "ghcr.io/oyelowo/react-web:master-6fe87cdb17db051e707efbaaae6fc0dc83844ebe",
              "name": "react",
              "ports": Array [
                Object {
                  "containerPort": 3000,
                  "name": "http",
                },
              ],
              "resources": Object {
                "limits": Object {
                  "cpu": "700m",
                  "memory": "2Gi",
                },
                "requests": Object {
                  "cpu": "500m",
                  "memory": "1.3Gi",
                },
              },
              "volumeMounts": Array [],
            },
          ],
          "imagePullSecrets": Array [
            Object {
              "name": "my-registry-key",
            },
          ],
          "initContainers": Array [],
          "volumes": Array [],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "config": "very important data",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "annotations": Object {
        "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"v1\\",\\"data\\":{\\"config\\":\\"very important data\\"},\\"kind\\":\\"ConfigMap\\",\\"metadata\\":{\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"}}
",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "/scripts/utils/__tests__/generatedManifests/local/services/react-web/1-manifest/v1-configmap-applications-react-web.yaml",
  },
]
`;
