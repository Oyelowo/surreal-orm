// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`KubeObject Can create sealed secrets from selected secrets 1`] = `
[
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-applications-secret",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-parents/sealed-secrets/sealed-secret-argocd-applications-secret-argocd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-parents",
    "spec": {
      "encryptedData": {
        "password": "lowo-testargocd-applications-secretargocd************",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"ADMIN_PASSWORD":"ZXhhbXBsZQ==","password":"ZXhhbXBsZQ==","type":"Z2l0","url":"aHR0cHM6Ly9naXRodWIuY29tL095ZWxvd28vbW9kZXJuLWRpc3RyaWJ1dGVkLWFwcC10ZW1wbGF0ZQ==","username":"ZXhhbXBsZQ=="},"kind":"Secret","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","argocd.argoproj.io/secret-type":"repository"},"name":"argocd-applications-secret","namespace":"argocd"}}
",
          },
          "name": "argocd-applications-secret",
          "namespace": "argocd",
        },
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-secret",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/sealed-secrets/sealed-secret-argocd-secret-argocd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {
      "encryptedData": {
        "admin.password": "lowo-testargocd-secretargocd********************************************************************************",
        "admin.passwordMtime": "lowo-testargocd-secretargocd****************************",
        "clearPassword": "lowo-testargocd-secretargocd************",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"admin.password":"JDJhJDEwJFJ3TGtBcENPNkdKSDFRVXJUTGNlVGVFODkwWjlDeU5jS2p4RkNQSmxWOEVwNDBBejgwNG91","admin.passwordMtime":"MjAyMi0xMC0xMlQwNjo1NjoxMlo=","clearPassword":"ZXhhbXBsZQ=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","app.kubernetes.io/part-of":"argocd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-secret","namespace":"argocd"},"type":"Opaque"}
",
          },
          "name": "argocd-secret",
          "namespace": "argocd",
        },
        "type": "Opaque",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "meilisearch-master-key",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/sealed-secrets/sealed-secret-meilisearch-master-key-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {
      "encryptedData": {
        "MEILI_MASTER_KEY": "lowo-testmeilisearch-master-keyapplications****************************",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"MEILI_MASTER_KEY":"UG5vbU1DU3RkaGxuN1lIWDRidFM="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/component":"search-engine","app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"meilisearch","app.kubernetes.io/part-of":"meilisearch","app.kubernetes.io/version":"v0.29.0","helm.sh/chart":"meilisearch-0.1.41"},"name":"meilisearch-master-key","namespace":"applications"}}
",
          },
          "name": "meilisearch-master-key",
          "namespace": "applications",
        },
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/sealed-secrets/sealed-secret-graphql-surrealdb-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {
      "encryptedData": {
        "APP_ENVIRONMENT": "lowo-testgraphql-surrealdbapplications********",
        "APP_EXTERNAL_BASE_URL": "lowo-testgraphql-surrealdbapplications****************************",
        "APP_HOST": "lowo-testgraphql-surrealdbapplications************",
        "APP_PORT": "lowo-testgraphql-surrealdbapplications********",
        "OAUTH_GITHUB_CLIENT_ID": "lowo-testgraphql-surrealdbapplications********",
        "OAUTH_GITHUB_CLIENT_SECRET": "lowo-testgraphql-surrealdbapplications********",
        "OAUTH_GOOGLE_CLIENT_ID": "lowo-testgraphql-surrealdbapplications********",
        "OAUTH_GOOGLE_CLIENT_SECRET": "lowo-testgraphql-surrealdbapplications********",
        "REDIS_HOST": "lowo-testgraphql-surrealdbapplications************************************",
        "REDIS_PASSWORD": "lowo-testgraphql-surrealdbapplications********",
        "REDIS_PORT": "lowo-testgraphql-surrealdbapplications********",
        "REDIS_SERVICE_NAME": "lowo-testgraphql-surrealdbapplications********",
        "REDIS_SERVICE_NAME_MASTER": "lowo-testgraphql-surrealdbapplications****************",
        "REDIS_USERNAME": "lowo-testgraphql-surrealdbapplications********",
        "SURREALDB_HOST": "lowo-testgraphql-surrealdbapplications********************************",
        "SURREALDB_NAME": "lowo-testgraphql-surrealdbapplications************",
        "SURREALDB_PORT": "lowo-testgraphql-surrealdbapplications********",
        "SURREALDB_ROOT_PASSWORD": "lowo-testgraphql-surrealdbapplications********",
        "SURREALDB_ROOT_USERNAME": "lowo-testgraphql-surrealdbapplications********",
        "SURREALDB_SERVICE_NAME": "lowo-testgraphql-surrealdbapplications************",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"APP_ENVIRONMENT":"bG9jYWw=","APP_EXTERNAL_BASE_URL":"aHR0cDovL2xvY2FsaG9zdDo4MDgw","APP_HOST":"MC4wLjAuMA==","APP_PORT":"ODAwMA==","OAUTH_GITHUB_CLIENT_ID":"dGVzdA==","OAUTH_GITHUB_CLIENT_SECRET":"dGVzdA==","OAUTH_GOOGLE_CLIENT_ID":"dGVzdA==","OAUTH_GOOGLE_CLIENT_SECRET":"dGVzdA==","REDIS_HOST":"cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==","REDIS_PASSWORD":"dGVzdA==","REDIS_PORT":"NjM3OQ==","REDIS_SERVICE_NAME":"cmVkaXM=","REDIS_SERVICE_NAME_MASTER":"cmVkaXMtbWFzdGVy","REDIS_USERNAME":"dGVzdA==","SURREALDB_HOST":"c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==","SURREALDB_NAME":"c3VycmVhbGRi","SURREALDB_PORT":"ODAwMA==","SURREALDB_ROOT_PASSWORD":"dGVzdA==","SURREALDB_ROOT_USERNAME":"dGVzdA==","SURREALDB_SERVICE_NAME":"c3VycmVhbGRi"},"kind":"Secret","metadata":{"annotations":{"sealedsecrets.bitnami.com/managed":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"graphql-surrealdb","namespace":"applications"}}
",
            "sealedsecrets.bitnami.com/managed": "true",
          },
          "name": "graphql-surrealdb",
          "namespace": "applications",
        },
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "redis",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/sealed-secrets/sealed-secret-redis-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {
      "encryptedData": {
        "redis-password": "lowo-testredisapplications********",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"redis-password":"dGVzdA=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis","namespace":"applications"},"type":"Opaque"}
",
          },
          "name": "redis",
          "namespace": "applications",
        },
        "type": "Opaque",
      },
    },
  },
]
`;

exports[`KubeObject Can sync resources 1`] = `
[
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "spus.fluvio.infinyon.com",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/fluvio-sys/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-spus.fluvio.infinyon.com.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/fluvio-sys",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "managedconnectors.fluvio.infinyon.com",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/fluvio-sys/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-managedconnectors.fluvio.infinyon.com.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/fluvio-sys",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "spugroups.fluvio.infinyon.com",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/fluvio-sys/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-spugroups.fluvio.infinyon.com.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/fluvio-sys",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "tableformats.fluvio.infinyon.com",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/fluvio-sys/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-tableformats.fluvio.infinyon.com.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/fluvio-sys",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "smartmodules.fluvio.infinyon.com",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/fluvio-sys/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-smartmodules.fluvio.infinyon.com.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/fluvio-sys",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "derivedstreams.fluvio.infinyon.com",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/fluvio-sys/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-derivedstreams.fluvio.infinyon.com.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/fluvio-sys",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "topics.fluvio.infinyon.com",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/fluvio-sys/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-topics.fluvio.infinyon.com.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/fluvio-sys",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "partitions.fluvio.infinyon.com",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/fluvio-sys/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-partitions.fluvio.infinyon.com.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/fluvio-sys",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "data": {
      "ADMIN_PASSWORD": "ZXhhbXBsZQ==",
      "password": "ZXhhbXBsZQ==",
      "type": "Z2l0",
      "url": "aHR0cHM6Ly9naXRodWIuY29tL095ZWxvd28vbW9kZXJuLWRpc3RyaWJ1dGVkLWFwcC10ZW1wbGF0ZQ==",
      "username": "ZXhhbXBsZQ==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"ADMIN_PASSWORD":"ZXhhbXBsZQ==","password":"ZXhhbXBsZQ==","type":"Z2l0","url":"aHR0cHM6Ly9naXRodWIuY29tL095ZWxvd28vbW9kZXJuLWRpc3RyaWJ1dGVkLWFwcC10ZW1wbGF0ZQ==","username":"ZXhhbXBsZQ=="},"kind":"Secret","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","argocd.argoproj.io/secret-type":"repository"},"name":"argocd-applications-secret","namespace":"argocd"}}
",
      },
      "name": "argocd-applications-secret",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-parents/1-manifest/v1-secret-argocd-argocd-applications-secret.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-parents",
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"argoproj.io/v1alpha1","kind":"Application","metadata":{"annotations":{"finalizers":["resources-finalizer.argocd.argoproj.io"]},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"argocd-applications-children-infrastructure","namespace":"argocd"},"spec":{"destination":{"namespace":"argocd","server":"https://kubernetes.default.svc"},"project":"default","source":{"directory":{"recurse":true},"path":"generatedManifests/local/infrastructure/argocd-applications-children-infrastructure","repoURL":"https://github.com/Oyelowo/modern-distributed-app-template","targetRevision":"HEAD"},"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}
",
      },
      "name": "argocd-applications-children-infrastructure",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-parents/1-manifest/argoproj.io_v1alpha1-application-argocd-argocd-applications-children-infrastructure.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-parents",
    "spec": {},
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"argoproj.io/v1alpha1","kind":"Application","metadata":{"annotations":{"finalizers":["resources-finalizer.argocd.argoproj.io"]},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"argocd-applications-children-services","namespace":"argocd"},"spec":{"destination":{"namespace":"argocd","server":"https://kubernetes.default.svc"},"project":"default","source":{"directory":{"recurse":true},"path":"generatedManifests/local/infrastructure/argocd-applications-children-services","repoURL":"https://github.com/Oyelowo/modern-distributed-app-template","targetRevision":"HEAD"},"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}
",
      },
      "name": "argocd-applications-children-services",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-parents/1-manifest/argoproj.io_v1alpha1-application-argocd-argocd-applications-children-services.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-parents",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "appprojects.argoproj.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-appprojects.argoproj.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "applications.argoproj.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-applications.argoproj.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.3.0",
      },
      "name": "applicationsets.argoproj.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-applicationsets.argoproj.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "data": {
      "application.instanceLabelKey": "argocd.argoproj.io/instance",
      "dex.config": "",
      "url": "",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"application.instanceLabelKey":"argocd.argoproj.io/instance","dex.config":"","url":""},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","app.kubernetes.io/part-of":"argocd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-cm","namespace":"argocd"}}
",
      },
      "name": "argocd-cm",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-cm.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "data": {
      "admin.password": "JDJhJDEwJFJ3TGtBcENPNkdKSDFRVXJUTGNlVGVFODkwWjlDeU5jS2p4RkNQSmxWOEVwNDBBejgwNG91",
      "admin.passwordMtime": "MjAyMi0xMC0xMlQwNjo1NjoxMlo=",
      "clearPassword": "ZXhhbXBsZQ==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"admin.password":"JDJhJDEwJFJ3TGtBcENPNkdKSDFRVXJUTGNlVGVFODkwWjlDeU5jS2p4RkNQSmxWOEVwNDBBejgwNG91","admin.passwordMtime":"MjAyMi0xMC0xMlQwNjo1NjoxMlo=","clearPassword":"ZXhhbXBsZQ=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","app.kubernetes.io/part-of":"argocd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-secret","namespace":"argocd"},"type":"Opaque"}
",
      },
      "name": "argocd-secret",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-secret-argocd-argocd-secret.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "type": "Opaque",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-server","namespace":"argocd"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"argocd-argo-cd-server"},"subjects":[{"kind":"ServiceAccount","name":"argocd-argo-cd-argocd-server","namespace":"argocd"}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-server","namespace":"argocd"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"argocd-argo-cd-server"},"subjects":[{"kind":"ServiceAccount","name":"argocd-argo-cd-argocd-server"}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-repo-server","namespace":"argocd"},"rules":[{"apiGroups":["argoproj.io"],"resources":["applications"],"verbs":["get","list","watch"]}]}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-role-argocd-argocd-argo-cd-repo-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-app-controller","namespace":"argocd"},"rules":[{"apiGroups":[""],"resources":["secrets","configmaps"],"verbs":["get","list","watch"]},{"apiGroups":["argoproj.io"],"resources":["applications","appprojects"],"verbs":["create","get","list","watch","update","patch","delete"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","list"]}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-role-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","automountServiceAccountToken":true,"kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-argocd-repo-server","namespace":"argocd"}}
",
      },
      "name": "argocd-argo-cd-argocd-repo-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-argo-cd-argocd-repo-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","automountServiceAccountToken":true,"kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-argocd-server","namespace":"argocd"}}
",
      },
      "name": "argocd-argo-cd-argocd-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-argo-cd-argocd-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "annotations": {
        "cert-manager.io/cluster-issuer": "letsencrypt-cluster-issuer",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"networking.k8s.io/v1","kind":"Ingress","metadata":{"annotations":{"cert-manager.io/cluster-issuer":"letsencrypt-cluster-issuer","nginx.ingress.kubernetes.io/ssl-redirect":"false","nginx.ingress.kubernetes.io/use-regex":"true"},"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-server","namespace":"argocd"},"spec":{"ingressClassName":"nginx","rules":[{"host":"argocd.localhost:8080","http":{"paths":[{"backend":{"service":{"name":"argocd-argo-cd-server","port":{"name":"https"}}},"path":"/","pathType":"Prefix"}]}}],"tls":[{"hosts":["argocd.localhost:8080"],"secretName":"argocd.localhost:8080-tls"}]}}
",
        "nginx.ingress.kubernetes.io/ssl-redirect": "false",
        "nginx.ingress.kubernetes.io/use-regex": "true",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/networking.k8s.io_v1-ingress-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-app-controller","namespace":"argocd"},"spec":{"ports":[{"name":"tcp-controller","port":8082,"protocol":"TCP","targetPort":"controller"}],"selector":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"},"sessionAffinity":"None","type":"ClusterIP"}}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "data": {
      "ping_liveness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "\${REDIS_PASSWORD_FILE}")"
[[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
response=$(
  timeout -s 3 $1 \\
  redis-cli \\
    -h localhost \\
    -p $REDIS_PORT \\
    ping
)
if [ "$?" -eq "124" ]; then
  echo "Timed out"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
  echo "$response"
  exit 1
fi",
      "ping_liveness_local_and_master.sh": "script_dir="$(dirname "$0")"
exit_status=0
"$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
"$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
exit $exit_status",
      "ping_liveness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "\${REDIS_MASTER_PASSWORD_FILE}")"
[[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
response=$(
  timeout -s 3 $1 \\
  redis-cli \\
    -h $REDIS_MASTER_HOST \\
    -p $REDIS_MASTER_PORT_NUMBER \\
    ping
)
if [ "$?" -eq "124" ]; then
  echo "Timed out"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
  echo "$response"
  exit 1
fi",
      "ping_readiness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "\${REDIS_PASSWORD_FILE}")"
[[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
response=$(
  timeout -s 3 $1 \\
  redis-cli \\
    -h localhost \\
    -p $REDIS_PORT \\
    ping
)
if [ "$?" -eq "124" ]; then
  echo "Timed out"
  exit 1
fi
if [ "$response" != "PONG" ]; then
  echo "$response"
  exit 1
fi",
      "ping_readiness_local_and_master.sh": "script_dir="$(dirname "$0")"
exit_status=0
"$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
"$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
exit $exit_status",
      "ping_readiness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "\${REDIS_MASTER_PASSWORD_FILE}")"
[[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
response=$(
  timeout -s 3 $1 \\
  redis-cli \\
    -h $REDIS_MASTER_HOST \\
    -p $REDIS_MASTER_PORT_NUMBER \\
    ping
)
if [ "$?" -eq "124" ]; then
  echo "Timed out"
  exit 1
fi
if [ "$response" != "PONG" ]; then
  echo "$response"
  exit 1
fi",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"ping_liveness_local.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_PASSWORD=\\"$(\\u003c \\"\${REDIS_PASSWORD_FILE}\\")\\"\\n[[ -n \\"$REDIS_PASSWORD\\" ]] \\u0026\\u0026 export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"\\nresponse=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -h localhost \\\\\\n    -p $REDIS_PORT \\\\\\n    ping\\n)\\nif [ \\"$?\\" -eq \\"124\\" ]; then\\n  echo \\"Timed out\\"\\n  exit 1\\nfi\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\nif [ \\"$response\\" != \\"PONG\\" ] \\u0026\\u0026 [ \\"$responseFirstWord\\" != \\"LOADING\\" ] \\u0026\\u0026 [ \\"$responseFirstWord\\" != \\"MASTERDOWN\\" ]; then\\n  echo \\"$response\\"\\n  exit 1\\nfi","ping_liveness_local_and_master.sh":"script_dir=\\"$(dirname \\"$0\\")\\"\\nexit_status=0\\n\\"$script_dir/ping_liveness_local.sh\\" $1 || exit_status=$?\\n\\"$script_dir/ping_liveness_master.sh\\" $1 || exit_status=$?\\nexit $exit_status","ping_liveness_master.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_MASTER_PASSWORD=\\"$(\\u003c \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"\\n[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] \\u0026\\u0026 export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"\\nresponse=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -h $REDIS_MASTER_HOST \\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\n    ping\\n)\\nif [ \\"$?\\" -eq \\"124\\" ]; then\\n  echo \\"Timed out\\"\\n  exit 1\\nfi\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\nif [ \\"$response\\" != \\"PONG\\" ] \\u0026\\u0026 [ \\"$responseFirstWord\\" != \\"LOADING\\" ]; then\\n  echo \\"$response\\"\\n  exit 1\\nfi","ping_readiness_local.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_PASSWORD=\\"$(\\u003c \\"\${REDIS_PASSWORD_FILE}\\")\\"\\n[[ -n \\"$REDIS_PASSWORD\\" ]] \\u0026\\u0026 export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"\\nresponse=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -h localhost \\\\\\n    -p $REDIS_PORT \\\\\\n    ping\\n)\\nif [ \\"$?\\" -eq \\"124\\" ]; then\\n  echo \\"Timed out\\"\\n  exit 1\\nfi\\nif [ \\"$response\\" != \\"PONG\\" ]; then\\n  echo \\"$response\\"\\n  exit 1\\nfi","ping_readiness_local_and_master.sh":"script_dir=\\"$(dirname \\"$0\\")\\"\\nexit_status=0\\n\\"$script_dir/ping_readiness_local.sh\\" $1 || exit_status=$?\\n\\"$script_dir/ping_readiness_master.sh\\" $1 || exit_status=$?\\nexit $exit_status","ping_readiness_master.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_MASTER_PASSWORD=\\"$(\\u003c \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"\\n[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] \\u0026\\u0026 export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"\\nresponse=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -h $REDIS_MASTER_HOST \\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\n    ping\\n)\\nif [ \\"$?\\" -eq \\"124\\" ]; then\\n  echo \\"Timed out\\"\\n  exit 1\\nfi\\nif [ \\"$response\\" != \\"PONG\\" ]; then\\n  echo \\"$response\\"\\n  exit 1\\nfi"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis-health","namespace":"argocd"}}
",
      },
      "name": "argocd-redis-health",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-redis-health.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-server","namespace":"argocd"},"rules":[{"apiGroups":["*"],"resources":["*"],"verbs":["delete","get","patch"]},{"apiGroups":[""],"resources":["events"],"verbs":["list"]},{"apiGroups":[""],"resources":["pods","pods/log"],"verbs":["get"]}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "data": {
      "master.conf": "dir /data
# User-supplied master configuration:
rename-command FLUSHDB ""
rename-command FLUSHALL ""
# End of master configuration",
      "redis.conf": "# User-supplied common configuration:
# Enable AOF https://redis.io/topics/persistence#append-only-file
appendonly yes
# Disable RDB persistence, AOF persistence already enabled.
save ""
# End of common configuration",
      "replica.conf": "dir /data
# User-supplied replica configuration:
rename-command FLUSHDB ""
rename-command FLUSHALL ""
# End of replica configuration",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"master.conf":"dir /data\\n# User-supplied master configuration:\\nrename-command FLUSHDB \\"\\"\\nrename-command FLUSHALL \\"\\"\\n# End of master configuration","redis.conf":"# User-supplied common configuration:\\n# Enable AOF https://redis.io/topics/persistence#append-only-file\\nappendonly yes\\n# Disable RDB persistence, AOF persistence already enabled.\\nsave \\"\\"\\n# End of common configuration","replica.conf":"dir /data\\n# User-supplied replica configuration:\\nrename-command FLUSHDB \\"\\"\\nrename-command FLUSHALL \\"\\"\\n# End of replica configuration"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis-configuration","namespace":"argocd"}}
",
      },
      "name": "argocd-redis-configuration",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-redis-configuration.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-server","namespace":"argocd"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"}},"strategy":{"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"}},"namespaces":["argocd"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["argocd-server","--staticassets","/opt/bitnami/argo-cd/app","--repo-server","argocd-argo-cd-repo-server:8081","--logformat","text","--loglevel","info","--redis","argocd-redis-master:6379","--insecure"],"env":[{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}}],"image":"docker.io/bitnami/argo-cd:2.4.14-debian-11-r0","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":8080},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"argocd-server","ports":[{"containerPort":8080,"name":"http","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":8080},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"resources":{"limits":{},"requests":{}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["all"]},"readOnlyRootFilesystem":false,"runAsNonRoot":true,"runAsUser":1001},"volumeMounts":[{"mountPath":"/app/config/ssh","name":"ssh-known-hosts"},{"mountPath":"/app/config/server/tls","name":"argocd-repo-server-tls"}]}],"initContainers":[{"args":["-ec","#!/bin/bash\\n\\nset -o errexit\\nset -o nounset\\nset -o pipefail\\n\\n. /opt/bitnami/scripts/libos.sh\\n. /opt/bitnami/scripts/liblog.sh\\n\\ncheck_redis_connection() {\\n  local result=\\"$(redis-cli -h argocd-redis-master -p 6379  PING)\\"\\n  if [[ \\"$result\\" != \\"PONG\\" ]]; then\\n    false\\n  fi\\n}\\n\\ninfo \\"Checking redis connection...\\"\\nif ! retry_while \\"check_redis_connection\\"; then\\n    error \\"Could not connect to the Redis server\\"\\n    return 1\\nelse\\n    info \\"Connected to the Redis instance\\"\\nfi\\n"],"command":["/bin/bash"],"env":[{"name":"REDISCLI_AUTH","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}}],"image":"docker.io/bitnami/redis:7.0.5-debian-11-r5","imagePullPolicy":"IfNotPresent","name":"wait-for-redis"}],"securityContext":{"fsGroup":1001},"serviceAccountName":"argocd-argo-cd-argocd-server","volumes":[{"configMap":{"name":"argocd-ssh-known-hosts-cm"},"name":"ssh-known-hosts"},{"name":"argocd-repo-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-repo-server-tls"}}]}}}}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "server",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-4.2.3",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "server",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "argocd-server",
                "--staticassets",
                "/opt/bitnami/argo-cd/app",
                "--repo-server",
                "argocd-argo-cd-repo-server:8081",
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
                "--insecure",
              ],
              "env": [
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.4.14-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 8080,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "argocd-server",
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 8080,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "all",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": [
                {
                  "mountPath": "/app/config/ssh",
                  "name": "ssh-known-hosts",
                },
                {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result="$(redis-cli -h argocd-redis-master -p 6379  PING)"
  if [[ "$result" != "PONG" ]]; then
    false
  fi
}

info "Checking redis connection..."
if ! retry_while "check_redis_connection"; then
    error "Could not connect to the Redis server"
    return 1
else
    info "Connected to the Redis instance"
fi
",
              ],
              "command": [
                "/bin/bash",
              ],
              "env": [
                {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:7.0.5-debian-11-r5",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-server",
          "volumes": [
            {
              "configMap": {
                "name": "argocd-ssh-known-hosts-cm",
              },
              "name": "ssh-known-hosts",
            },
            {
              "name": "argocd-repo-server-tls",
              "secret": {
                "items": [
                  {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis-master","namespace":"argocd"},"spec":{"internalTrafficPolicy":"Cluster","ports":[{"name":"tcp-redis","port":6379,"targetPort":"redis"}],"selector":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"redis"},"sessionAffinity":"None","type":"ClusterIP"}}
",
      },
      "name": "argocd-redis-master",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-redis-master.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-app-controller","namespace":"argocd"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"argocd-argo-cd-app-controller"},"subjects":[{"kind":"ServiceAccount","name":"argocd-argo-cd-argocd-app-controller","namespace":"argocd"}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "data": {
      "ssh_known_hosts": "bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"ssh_known_hosts":"bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==\\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\\ngitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\\ngitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\\ngitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\\nssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\nvs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\n"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","app.kubernetes.io/part-of":"argocd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-ssh-known-hosts-cm","namespace":"argocd"}}
",
      },
      "name": "argocd-ssh-known-hosts-cm",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-ssh-known-hosts-cm.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","automountServiceAccountToken":true,"kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis","namespace":"argocd"}}
",
      },
      "name": "argocd-redis",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-redis.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-repo-server","namespace":"argocd"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"}},"strategy":{"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"}},"namespaces":["argocd"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["argocd-repo-server","--logformat","text","--loglevel","info","--redis","argocd-redis-master:6379"],"env":[{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}}],"image":"docker.io/bitnami/argo-cd:2.4.14-debian-11-r0","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"tcpSocket":{"port":8081},"timeoutSeconds":1},"name":"argocd-repo-server","ports":[{"containerPort":8081,"name":"repo-server","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"tcpSocket":{"port":8081},"timeoutSeconds":1},"resources":{"limits":{},"requests":{}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["all"]},"readOnlyRootFilesystem":false,"runAsNonRoot":true,"runAsUser":1001},"volumeMounts":[{"mountPath":"/app/config/ssh","name":"ssh-known-hosts"},{"mountPath":"/app/config/server/tls","name":"argocd-repo-server-tls"},{"mountPath":"/app/config/gpg/keys","name":"gpg-keyring"},{"mountPath":"/tmp","name":"tmp-dir"}]}],"initContainers":[{"args":["-ec","#!/bin/bash\\n\\nset -o errexit\\nset -o nounset\\nset -o pipefail\\n\\n. /opt/bitnami/scripts/libos.sh\\n. /opt/bitnami/scripts/liblog.sh\\n\\ncheck_redis_connection() {\\n  local result=\\"$(redis-cli -h argocd-redis-master -p 6379  PING)\\"\\n  if [[ \\"$result\\" != \\"PONG\\" ]]; then\\n    false\\n  fi\\n}\\n\\ninfo \\"Checking redis connection...\\"\\nif ! retry_while \\"check_redis_connection\\"; then\\n    error \\"Could not connect to the Redis server\\"\\n    return 1\\nelse\\n    info \\"Connected to the Redis instance\\"\\nfi\\n"],"command":["/bin/bash"],"env":[{"name":"REDISCLI_AUTH","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}}],"image":"docker.io/bitnami/redis:7.0.5-debian-11-r5","imagePullPolicy":"IfNotPresent","name":"wait-for-redis"}],"securityContext":{"fsGroup":1001},"serviceAccountName":"argocd-argo-cd-argocd-repo-server","volumes":[{"configMap":{"name":"argocd-ssh-known-hosts-cm"},"name":"ssh-known-hosts"},{"name":"argocd-repo-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-repo-server-tls"}},{"emptyDir":{},"name":"tmp-dir"},{"emptyDir":{},"name":"gpg-keyring"}]}}}}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-repo-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "repo-server",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-4.2.3",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "repo-server",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "argocd-repo-server",
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
              ],
              "env": [
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.4.14-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": {
                  "port": 8081,
                },
                "timeoutSeconds": 1,
              },
              "name": "argocd-repo-server",
              "ports": [
                {
                  "containerPort": 8081,
                  "name": "repo-server",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": {
                  "port": 8081,
                },
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "all",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": [
                {
                  "mountPath": "/app/config/ssh",
                  "name": "ssh-known-hosts",
                },
                {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
                {
                  "mountPath": "/app/config/gpg/keys",
                  "name": "gpg-keyring",
                },
                {
                  "mountPath": "/tmp",
                  "name": "tmp-dir",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result="$(redis-cli -h argocd-redis-master -p 6379  PING)"
  if [[ "$result" != "PONG" ]]; then
    false
  fi
}

info "Checking redis connection..."
if ! retry_while "check_redis_connection"; then
    error "Could not connect to the Redis server"
    return 1
else
    info "Connected to the Redis instance"
fi
",
              ],
              "command": [
                "/bin/bash",
              ],
              "env": [
                {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:7.0.5-debian-11-r5",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-repo-server",
          "volumes": [
            {
              "configMap": {
                "name": "argocd-ssh-known-hosts-cm",
              },
              "name": "ssh-known-hosts",
            },
            {
              "name": "argocd-repo-server-tls",
              "secret": {
                "items": [
                  {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
            {
              "emptyDir": {},
              "name": "tmp-dir",
            },
            {
              "emptyDir": {},
              "name": "gpg-keyring",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-server","namespace":"argocd"},"spec":{"ports":[{"name":"http","port":80,"protocol":"TCP","targetPort":"http"},{"name":"https","port":443,"protocol":"TCP","targetPort":"http"}],"selector":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"},"sessionAffinity":"None","type":"ClusterIP"}}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-repo-server","namespace":"argocd"},"spec":{"ports":[{"name":"tcp-repo-server","port":8081,"protocol":"TCP","targetPort":"repo-server"}],"selector":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"},"sessionAffinity":"None","type":"ClusterIP"}}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-argo-cd-repo-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-app-controller","namespace":"argocd"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"argocd-argo-cd-app-controller"},"subjects":[{"kind":"ServiceAccount","name":"argocd-argo-cd-argocd-app-controller"}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "data": {
      "redis-password": "aERVUjNMdlc4ZQ==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"redis-password":"aERVUjNMdlc4ZQ=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis","namespace":"argocd"},"type":"Opaque"}
",
      },
      "name": "argocd-redis",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-secret-argocd-argocd-redis.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "type": "Opaque",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-repo-server","namespace":"argocd"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"argocd-argo-cd-repo-server"},"subjects":[{"kind":"ServiceAccount","name":"argocd-argo-cd-argocd-repo-server"}]}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-argocd-argocd-argo-cd-repo-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-app-controller","namespace":"argocd"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"}},"strategy":{"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"}},"namespaces":["argocd"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["argocd-application-controller","--status-processors","20","--operation-processors","10","--app-resync","180","--self-heal-timeout-seconds","5","--repo-server","argocd-argo-cd-repo-server:8081","--logformat","text","--loglevel","info","--redis","argocd-redis-master:6379"],"env":[{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}}],"image":"docker.io/bitnami/argo-cd:2.4.14-debian-11-r0","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":8082},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"controller","ports":[{"containerPort":8082,"name":"controller","protocol":"TCP"},{"containerPort":8082,"name":"metrics","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"tcpSocket":{"port":8082},"timeoutSeconds":1},"resources":{"limits":{},"requests":{}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["all"]},"readOnlyRootFilesystem":false,"runAsNonRoot":true,"runAsUser":1001},"volumeMounts":[{"mountPath":"/app/config/server/tls","name":"argocd-repo-server-tls"}]}],"initContainers":[{"args":["-ec","#!/bin/bash\\n\\nset -o errexit\\nset -o nounset\\nset -o pipefail\\n\\n. /opt/bitnami/scripts/libos.sh\\n. /opt/bitnami/scripts/liblog.sh\\n\\ncheck_redis_connection() {\\n  local result=\\"$(redis-cli -h argocd-redis-master -p 6379  PING)\\"\\n  if [[ \\"$result\\" != \\"PONG\\" ]]; then\\n    false\\n  fi\\n}\\n\\ninfo \\"Checking redis connection...\\"\\nif ! retry_while \\"check_redis_connection\\"; then\\n    error \\"Could not connect to the Redis server\\"\\n    return 1\\nelse\\n    info \\"Connected to the Redis instance\\"\\nfi\\n"],"command":["/bin/bash"],"env":[{"name":"REDISCLI_AUTH","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}}],"image":"docker.io/bitnami/redis:7.0.5-debian-11-r5","imagePullPolicy":"IfNotPresent","name":"wait-for-redis"}],"securityContext":{"fsGroup":1001},"serviceAccountName":"argocd-argo-cd-argocd-app-controller","volumes":[{"name":"argocd-repo-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-repo-server-tls"}}]}}}}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-4.2.3",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "controller",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "argocd-application-controller",
                "--status-processors",
                "20",
                "--operation-processors",
                "10",
                "--app-resync",
                "180",
                "--self-heal-timeout-seconds",
                "5",
                "--repo-server",
                "argocd-argo-cd-repo-server:8081",
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
              ],
              "env": [
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.4.14-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 8082,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "controller",
              "ports": [
                {
                  "containerPort": 8082,
                  "name": "controller",
                  "protocol": "TCP",
                },
                {
                  "containerPort": 8082,
                  "name": "metrics",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": {
                  "port": 8082,
                },
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "all",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": [
                {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result="$(redis-cli -h argocd-redis-master -p 6379  PING)"
  if [[ "$result" != "PONG" ]]; then
    false
  fi
}

info "Checking redis connection..."
if ! retry_while "check_redis_connection"; then
    error "Could not connect to the Redis server"
    return 1
else
    info "Connected to the Redis instance"
fi
",
              ],
              "command": [
                "/bin/bash",
              ],
              "env": [
                {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:7.0.5-debian-11-r5",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-app-controller",
          "volumes": [
            {
              "name": "argocd-repo-server-tls",
              "secret": {
                "items": [
                  {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-server","namespace":"argocd"},"rules":[{"apiGroups":[""],"resources":["secrets","configmaps"],"verbs":["create","get","list","watch","update","patch","delete"]},{"apiGroups":["argoproj.io"],"resources":["applications","appprojects"],"verbs":["create","get","list","watch","update","delete","patch"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","list"]}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-role-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","automountServiceAccountToken":true,"kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-argocd-app-controller","namespace":"argocd"}}
",
      },
      "name": "argocd-argo-cd-argocd-app-controller",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-argo-cd-argocd-app-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "data": {
      "start-master.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "\${REDIS_PASSWORD_FILE}")"
if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
fi
if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
fi
ARGS=("--port" "\${REDIS_PORT}")
ARGS+=("--requirepass" "\${REDIS_PASSWORD}")
ARGS+=("--masterauth" "\${REDIS_PASSWORD}")
ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
exec redis-server "\${ARGS[@]}"
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"start-master.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_PASSWORD=\\"$(\\u003c \\"\${REDIS_PASSWORD_FILE}\\")\\"\\nif [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then\\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\\nfi\\nif [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then\\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\\nfi\\nARGS=(\\"--port\\" \\"\${REDIS_PORT}\\")\\nARGS+=(\\"--requirepass\\" \\"\${REDIS_PASSWORD}\\")\\nARGS+=(\\"--masterauth\\" \\"\${REDIS_PASSWORD}\\")\\nARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/redis.conf\\")\\nARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/master.conf\\")\\nexec redis-server \\"\${ARGS[@]}\\"\\n"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis-scripts","namespace":"argocd"}}
",
      },
      "name": "argocd-redis-scripts",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-redis-scripts.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis-headless","namespace":"argocd"},"spec":{"clusterIP":"None","ports":[{"name":"tcp-redis","port":6379,"targetPort":"redis"}],"selector":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"redis"},"type":"ClusterIP"}}
",
      },
      "name": "argocd-redis-headless",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-redis-headless.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {},
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"labels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis-master","namespace":"argocd"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"redis"}},"serviceName":"argocd-redis-headless","template":{"metadata":{"annotations":{"checksum/configmap":"81855d627a0d05558b450d425a35f0133fd4d18fbc56b9cd3f19bc6acc6f3446","checksum/health":"afe6e7ca35f057c61dd91d3f5a8608db5883d22e4837ccd9e1a659a88c891cbb","checksum/scripts":"950530432292d9fc6b1e10b86dc72653d3e054b278e3d53abd53810f61fc5b44","checksum/secret":"165ea263f34f0021dcbd3787f2e040eb6d085508bd1e16c33d8c91ae61e8c1c2"},"labels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"redis"}},"namespaces":["argocd"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["-c","/opt/bitnami/scripts/start-scripts/start-master.sh"],"command":["/bin/bash"],"env":[{"name":"BITNAMI_DEBUG","value":"false"},{"name":"REDIS_REPLICATION_MODE","value":"master"},{"name":"ALLOW_EMPTY_PASSWORD","value":"no"},{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}},{"name":"REDIS_TLS_ENABLED","value":"no"},{"name":"REDIS_PORT","value":"6379"}],"image":"docker.io/bitnami/redis:7.0.5-debian-11-r5","imagePullPolicy":"IfNotPresent","livenessProbe":{"exec":{"command":["sh","-c","/health/ping_liveness_local.sh 5"]},"failureThreshold":5,"initialDelaySeconds":20,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":6},"name":"redis","ports":[{"containerPort":6379,"name":"redis"}],"readinessProbe":{"exec":{"command":["sh","-c","/health/ping_readiness_local.sh 1"]},"failureThreshold":5,"initialDelaySeconds":20,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":2},"resources":{"limits":{},"requests":{}},"securityContext":{"runAsUser":1001},"volumeMounts":[{"mountPath":"/opt/bitnami/scripts/start-scripts","name":"start-scripts"},{"mountPath":"/health","name":"health"},{"mountPath":"/data","name":"redis-data"},{"mountPath":"/opt/bitnami/redis/mounted-etc","name":"config"},{"mountPath":"/opt/bitnami/redis/etc/","name":"redis-tmp-conf"},{"mountPath":"/tmp","name":"tmp"}]}],"securityContext":{"fsGroup":1001},"serviceAccountName":"argocd-redis","terminationGracePeriodSeconds":30,"volumes":[{"configMap":{"defaultMode":493,"name":"argocd-redis-scripts"},"name":"start-scripts"},{"configMap":{"defaultMode":493,"name":"argocd-redis-health"},"name":"health"},{"configMap":{"name":"argocd-redis-configuration"},"name":"config"},{"emptyDir":{},"name":"redis-tmp-conf"},{"emptyDir":{},"name":"tmp"}]}},"updateStrategy":{"rollingUpdate":{},"type":"RollingUpdate"},"volumeClaimTemplates":[{"metadata":{"labels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"redis"},"name":"redis-data"},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"8Gi"}}}}]}}
",
      },
      "name": "argocd-redis-master",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-statefulset-argocd-argocd-redis-master.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "checksum/configmap": "81855d627a0d05558b450d425a35f0133fd4d18fbc56b9cd3f19bc6acc6f3446",
            "checksum/health": "afe6e7ca35f057c61dd91d3f5a8608db5883d22e4837ccd9e1a659a88c891cbb",
            "checksum/scripts": "950530432292d9fc6b1e10b86dc72653d3e054b278e3d53abd53810f61fc5b44",
            "checksum/secret": "165ea263f34f0021dcbd3787f2e040eb6d085508bd1e16c33d8c91ae61e8c1c2",
          },
          "labels": {
            "app.kubernetes.io/component": "master",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "redis",
            "helm.sh/chart": "redis-17.3.2",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "master",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "redis",
                      },
                    },
                    "namespaces": [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-master.sh",
              ],
              "command": [
                "/bin/bash",
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                {
                  "name": "REDIS_REPLICATION_MODE",
                  "value": "master",
                },
                {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no",
                },
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
                {
                  "name": "REDIS_TLS_ENABLED",
                  "value": "no",
                },
                {
                  "name": "REDIS_PORT",
                  "value": "6379",
                },
              ],
              "image": "docker.io/bitnami/redis:7.0.5-debian-11-r5",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_liveness_local.sh 5",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 6,
              },
              "name": "redis",
              "ports": [
                {
                  "containerPort": 6379,
                  "name": "redis",
                },
              ],
              "readinessProbe": {
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_readiness_local.sh 1",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "runAsUser": 1001,
              },
              "volumeMounts": [
                {
                  "mountPath": "/opt/bitnami/scripts/start-scripts",
                  "name": "start-scripts",
                },
                {
                  "mountPath": "/health",
                  "name": "health",
                },
                {
                  "mountPath": "/data",
                  "name": "redis-data",
                },
                {
                  "mountPath": "/opt/bitnami/redis/mounted-etc",
                  "name": "config",
                },
                {
                  "mountPath": "/opt/bitnami/redis/etc/",
                  "name": "redis-tmp-conf",
                },
                {
                  "mountPath": "/tmp",
                  "name": "tmp",
                },
              ],
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-redis",
          "terminationGracePeriodSeconds": 30,
          "volumes": [
            {
              "configMap": {
                "defaultMode": 493,
                "name": "argocd-redis-scripts",
              },
              "name": "start-scripts",
            },
            {
              "configMap": {
                "defaultMode": 493,
                "name": "argocd-redis-health",
              },
              "name": "health",
            },
            {
              "configMap": {
                "name": "argocd-redis-configuration",
              },
              "name": "config",
            },
            {
              "emptyDir": {},
              "name": "redis-tmp-conf",
            },
            {
              "emptyDir": {},
              "name": "tmp",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-app-controller","namespace":"argocd"},"rules":[{"apiGroups":["*"],"resources":["*"],"verbs":["*"]},{"nonResourceURLs":["*"],"verbs":["*"]}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
      },
      "name": "issuers.cert-manager.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-issuers.cert-manager.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "challenges.acme.cert-manager.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-challenges.acme.cert-manager.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "certificates.cert-manager.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-certificates.cert-manager.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
      },
      "name": "orders.acme.cert-manager.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-orders.acme.cert-manager.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.8.0",
      },
      "name": "bundles.trust.cert-manager.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-bundles.trust.cert-manager.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "certificaterequests.cert-manager.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-certificaterequests.cert-manager.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "clusterissuers.cert-manager.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-clusterissuers.cert-manager.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-trust"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-trust","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-trust",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-edit"},"rules":[{"apiGroups":["cert-manager.io"],"resources":["certificates","certificaterequests","issuers"],"verbs":["create","delete","deletecollection","patch","update"]},{"apiGroups":["acme.cert-manager.io"],"resources":["challenges","orders"],"verbs":["create","delete","deletecollection","patch","update"]}]}
",
      },
      "name": "cert-manager-controller-edit",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-edit.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-metrics","namespace":"cert-manager"},"spec":{"ports":[{"name":"controller","port":9402,"protocol":"TCP","targetPort":9402}],"selector":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"},"type":"ClusterIP"}}
",
      },
      "name": "cert-manager-controller-metrics",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-controller-metrics.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"strategy":{"rollingUpdate":{},"type":"RollingUpdate"},"template":{"metadata":{"annotations":{"prometheus.io/path":"/metrics","prometheus.io/port":"9402","prometheus.io/scrape":"true"},"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"namespaces":["cert-manager"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["--v=2","--cluster-resource-namespace=$(POD_NAMESPACE)","--leader-election-namespace=kube-system","--acme-http01-solver-image=docker.io/bitnami/acmesolver:1.9.1-debian-11-r16"],"env":[{"name":"BITNAMI_DEBUG","value":"false"},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"docker.io/bitnami/cert-manager:1.9.1-debian-11-r15","imagePullPolicy":"IfNotPresent","name":"cert-manager","ports":[{"containerPort":9402,"protocol":"TCP"}],"resources":{"limits":{},"requests":{}},"securityContext":{"runAsNonRoot":true,"runAsUser":1001}}],"securityContext":{"fsGroup":1001},"serviceAccountName":"cert-manager-controller"}}}}
",
      },
      "name": "cert-manager-controller",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "prometheus.io/path": "/metrics",
            "prometheus.io/port": "9402",
            "prometheus.io/scrape": "true",
          },
          "labels": {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.8.4",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "--v=2",
                "--cluster-resource-namespace=$(POD_NAMESPACE)",
                "--leader-election-namespace=kube-system",
                "--acme-http01-solver-image=docker.io/bitnami/acmesolver:1.9.1-debian-11-r16",
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cert-manager:1.9.1-debian-11-r15",
              "imagePullPolicy": "IfNotPresent",
              "name": "cert-manager",
              "ports": [
                {
                  "containerPort": 9402,
                  "protocol": "TCP",
                },
              ],
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-controller",
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-webhook-dynamic-serving","namespace":"cert-manager"},"rules":[{"apiGroups":[""],"resourceNames":["cert-manager-webhook-ca"],"resources":["secrets"],"verbs":["get","list","watch","update"]},{"apiGroups":[""],"resources":["secrets"],"verbs":["create"]}]}
",
      },
      "name": "cert-manager-webhook-dynamic-serving",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-cert-manager-cert-manager-webhook-dynamic-serving.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-webhook-subjectaccessreviews"},"rules":[{"apiGroups":["authorization.k8s.io"],"resources":["subjectaccessreviews"],"verbs":["create"]}]}
",
      },
      "name": "cert-manager-webhook-subjectaccessreviews",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-webhook-subjectaccessreviews.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Certificate",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"labels":{"app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust","namespace":"cert-manager"},"spec":{"dnsNames":["cert-manager-trust.cert-manager.svc"],"issuerRef":{"name":"cert-manager-trust"},"revisionHistoryLimit":1,"secretName":"cert-manager-trust-tls"}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-certificate-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","automountServiceAccountToken":true,"kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-webhook","namespace":"cert-manager"}}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-webhook.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-issuers"},"rules":[{"apiGroups":["cert-manager.io"],"resources":["issuers","issuers/status"],"verbs":["update"]},{"apiGroups":["cert-manager.io"],"resources":["issuers"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["secrets"],"verbs":["get","list","watch","create","update","patch","delete"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]}]}
",
      },
      "name": "cert-manager-controller-controller-issuers",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-issuers.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-view"},"rules":[{"apiGroups":["cert-manager.io"],"resources":["certificates","certificaterequests","issuers"],"verbs":["get","list","watch"]},{"apiGroups":["acme.cert-manager.io"],"resources":["challenges","orders"],"verbs":["get","list","watch"]}]}
",
      },
      "name": "cert-manager-controller-view",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-view.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "cert-manager.io/v1",
    "kind": "ClusterIssuer",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"cert-manager.io/v1","kind":"ClusterIssuer","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"linkerd-trust-anchor","namespace":"cert-manager"},"spec":{"ca":{"secretName":"linkerd-identity-trust-roots"}}}
",
      },
      "name": "linkerd-trust-anchor",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-clusterissuer-cert-manager-linkerd-trust-anchor.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-webhook-dynamic-serving","namespace":"cert-manager"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"cert-manager-webhook-dynamic-serving"},"subjects":[{"apiGroup":"","kind":"ServiceAccount","name":"cert-manager-webhook","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-webhook-dynamic-serving",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-cert-manager-cert-manager-webhook-dynamic-serving.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"cert-manager-trust"}},"template":{"metadata":{"labels":{"app":"cert-manager-trust"}},"spec":{"containers":[{"args":["--log-level=1","--metrics-port=9402","--readiness-probe-port=6060","--readiness-probe-path=/readyz","--trust-namespace=cert-manager","--webhook-host=0.0.0.0","--webhook-port=6443","--webhook-certificate-dir=/tls"],"command":["cert-manager-trust"],"image":"quay.io/jetstack/cert-manager-trust:v0.2.0","imagePullPolicy":"IfNotPresent","name":"cert-manager-trust","ports":[{"containerPort":6443},{"containerPort":9402}],"readinessProbe":{"httpGet":{"path":"/readyz","port":6060},"initialDelaySeconds":3,"periodSeconds":7},"resources":{},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/tls","name":"tls","readOnly":true}]}],"serviceAccountName":"cert-manager-trust","volumes":[{"name":"tls","secret":{"defaultMode":420,"secretName":"cert-manager-trust-tls"}}]}}}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app": "cert-manager-trust",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "--log-level=1",
                "--metrics-port=9402",
                "--readiness-probe-port=6060",
                "--readiness-probe-path=/readyz",
                "--trust-namespace=cert-manager",
                "--webhook-host=0.0.0.0",
                "--webhook-port=6443",
                "--webhook-certificate-dir=/tls",
              ],
              "command": [
                "cert-manager-trust",
              ],
              "image": "quay.io/jetstack/cert-manager-trust:v0.2.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "cert-manager-trust",
              "ports": [
                {
                  "containerPort": 6443,
                },
                {
                  "containerPort": 9402,
                },
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/readyz",
                  "port": 6060,
                },
                "initialDelaySeconds": 3,
                "periodSeconds": 7,
              },
              "resources": {},
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL",
                  ],
                },
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true,
                "seccompProfile": {
                  "type": "RuntimeDefault",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "serviceAccountName": "cert-manager-trust",
          "volumes": [
            {
              "name": "tls",
              "secret": {
                "defaultMode": 420,
                "secretName": "cert-manager-trust-tls",
              },
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-webhook","namespace":"cert-manager"},"spec":{"ports":[{"name":"https","port":443,"targetPort":10250}],"selector":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"},"type":"ClusterIP"}}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-webhook.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": {
      "annotations": {
        "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"admissionregistration.k8s.io/v1","kind":"ValidatingWebhookConfiguration","metadata":{"annotations":{"cert-manager.io/inject-ca-from-secret":"cert-manager/cert-manager-webhook-ca"},"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-webhook","namespace":"cert-manager"},"webhooks":[{"admissionReviewVersions":["v1"],"clientConfig":{"service":{"name":"cert-manager-webhook","namespace":"cert-manager","path":"/validate"}},"failurePolicy":"Fail","matchPolicy":"Equivalent","name":"webhook.cert-manager.io","namespaceSelector":{"matchExpressions":[{"key":"cert-manager.io/disable-validation","operator":"NotIn","values":["true"]},{"key":"name","operator":"NotIn","values":["cert-manager"]}]},"rules":[{"apiGroups":["cert-manager.io","acme.cert-manager.io"],"apiVersions":["v1"],"operations":["CREATE","UPDATE"],"resources":["*/*"]}],"sideEffects":"None","timeoutSeconds":10}]}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/admissionregistration.k8s.io_v1-validatingwebhookconfiguration-cert-manager-cert-manager-webhook.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-webhook","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"strategy":{"rollingUpdate":{},"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"namespaces":["cert-manager"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["--v=2","--secure-port=10250","--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)","--dynamic-serving-ca-secret-name=cert-manager-webhook-ca","--dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc"],"env":[{"name":"BITNAMI_DEBUG","value":"false"},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"docker.io/bitnami/cert-manager-webhook:1.9.1-debian-11-r13","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/livez","port":6080,"scheme":"HTTP"},"initialDelaySeconds":60,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"cert-manager-webhook","ports":[{"containerPort":10250,"name":"https"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":6080,"scheme":"HTTP"},"initialDelaySeconds":5,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":1},"resources":{"limits":{},"requests":{}},"securityContext":{"runAsNonRoot":true,"runAsUser":1001}}],"securityContext":{"fsGroup":1001},"serviceAccountName":"cert-manager-webhook"}}}}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-webhook.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "webhook",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.8.4",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "--v=2",
                "--secure-port=10250",
                "--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)",
                "--dynamic-serving-ca-secret-name=cert-manager-webhook-ca",
                "--dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc",
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cert-manager-webhook:1.9.1-debian-11-r13",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/livez",
                  "port": 6080,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "cert-manager-webhook",
              "ports": [
                {
                  "containerPort": 10250,
                  "name": "https",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 6080,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-webhook",
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust","namespace":"cert-manager"},"rules":[{"apiGroups":[""],"resources":["secrets"],"verbs":["get","list","watch"]},{"apiGroups":["coordination.k8s.io"],"resources":["leases"],"verbs":["get","create","update","watch","list"]}]}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","automountServiceAccountToken":true,"kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller","namespace":"cert-manager"}}
",
      },
      "name": "cert-manager-controller",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"cert-manager","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-approve"},"rules":[{"apiGroups":["cert-manager.io"],"resourceNames":["issuers.cert-manager.io/*","clusterissuers.cert-manager.io/*"],"resources":["signers"],"verbs":["approve"]}]}
",
      },
      "name": "cert-manager-controller-controller-approve",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-approve.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust","namespace":"cert-manager"}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-orders"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-controller-controller-orders"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-controller","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-controller-controller-orders",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-orders.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-certificates"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-controller-controller-certificates"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-controller","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-controller-controller-certificates",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-certificates.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-webhook-subjectaccessreviews"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-webhook-subjectaccessreviews"},"subjects":[{"apiGroup":"","kind":"ServiceAccount","name":"cert-manager-webhook","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-webhook-subjectaccessreviews",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-webhook-subjectaccessreviews.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Issuer",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"cert-manager.io/v1","kind":"Issuer","metadata":{"labels":{"app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust","namespace":"cert-manager"},"spec":{"selfSigned":{}}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-issuer-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-cainjector"},"rules":[{"apiGroups":["cert-manager.io"],"resources":["certificates"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["secrets"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["events"],"verbs":["get","create","update","patch"]},{"apiGroups":["admissionregistration.k8s.io"],"resources":["validatingwebhookconfigurations","mutatingwebhookconfigurations"],"verbs":["get","list","watch","update"]},{"apiGroups":["apiregistration.k8s.io"],"resources":["apiservices"],"verbs":["get","list","watch","update"]},{"apiGroups":["apiextensions.k8s.io"],"resources":["customresourcedefinitions"],"verbs":["get","list","watch","update"]},{"apiGroups":["auditregistration.k8s.io"],"resources":["auditsinks"],"verbs":["get","list","watch","update"]}]}
",
      },
      "name": "cert-manager-cainjector",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-cainjector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-ingress-shim"},"rules":[{"apiGroups":["cert-manager.io"],"resources":["certificates","certificaterequests"],"verbs":["create","update","delete"]},{"apiGroups":["cert-manager.io"],"resources":["certificates","certificaterequests","issuers","clusterissuers"],"verbs":["get","list","watch"]},{"apiGroups":["networking.k8s.io"],"resources":["ingresses"],"verbs":["get","list","watch"]},{"apiGroups":["networking.k8s.io"],"resources":["ingresses/finalizers"],"verbs":["update"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]}]}
",
      },
      "name": "cert-manager-controller-controller-ingress-shim",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-ingress-shim.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-leader-election","namespace":"kube-system"},"rules":[{"apiGroups":[""],"resourceNames":["cert-manager-controller"],"resources":["configmaps"],"verbs":["get","update","patch"]},{"apiGroups":[""],"resources":["configmaps"],"verbs":["create"]},{"apiGroups":["coordination.k8s.io"],"resourceNames":["cert-manager-controller"],"resources":["leases"],"verbs":["get","update","patch"]},{"apiGroups":["coordination.k8s.io"],"resources":["leases"],"verbs":["create"]}]}
",
      },
      "name": "cert-manager-controller-leader-election",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-kube-system-cert-manager-controller-leader-election.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Certificate",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"linkerd-trust-anchor","namespace":"cert-manager"},"spec":{"commonName":"root.linkerd.cluster.local","isCA":true,"issuerRef":{"group":"cert-manager.io","kind":"ClusterIssuer","name":"linkerd-self-signed-issuer"},"privateKey":{"algorithm":"ECDSA","size":256},"secretName":"linkerd-identity-trust-roots"}}
",
      },
      "name": "linkerd-trust-anchor",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-certificate-cert-manager-linkerd-trust-anchor.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-issuers"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-controller-controller-issuers"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-controller","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-controller-controller-issuers",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-issuers.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-cainjector-leader-election","namespace":"kube-system"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"cert-manager-cainjector-leader-election"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-cainjector","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-cainjector-leader-election",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-kube-system-cert-manager-cainjector-leader-election.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-cainjector","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"strategy":{"rollingUpdate":{},"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"namespaces":["cert-manager"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["--v=2","--leader-election-namespace=kube-system"],"env":[{"name":"BITNAMI_DEBUG","value":"false"},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"docker.io/bitnami/cainjector:1.9.1-debian-11-r14","imagePullPolicy":"IfNotPresent","name":"cainjector","resources":{"limits":{},"requests":{}},"securityContext":{"runAsNonRoot":true,"runAsUser":1001}}],"securityContext":{"fsGroup":1001},"serviceAccountName":"cert-manager-cainjector"}}}}
",
      },
      "name": "cert-manager-cainjector",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-cainjector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "cainjector",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.8.4",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "--v=2",
                "--leader-election-namespace=kube-system",
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cainjector:1.9.1-debian-11-r14",
              "imagePullPolicy": "IfNotPresent",
              "name": "cainjector",
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-cainjector",
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-clusterissuers"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-controller-controller-clusterissuers"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-controller","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-controller-controller-clusterissuers",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-clusterissuers.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-cainjector"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-cainjector"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-cainjector","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-cainjector",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-cainjector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-clusterissuers"},"rules":[{"apiGroups":["cert-manager.io"],"resources":["clusterissuers","clusterissuers/status"],"verbs":["update"]},{"apiGroups":["cert-manager.io"],"resources":["clusterissuers"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["secrets"],"verbs":["get","list","watch","create","update","patch","delete"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]}]}
",
      },
      "name": "cert-manager-controller-controller-clusterissuers",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-clusterissuers.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-challenges"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-controller-controller-challenges"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-controller","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-controller-controller-challenges",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-challenges.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust"},"rules":[{"apiGroups":["trust.cert-manager.io"],"resources":["bundles"],"verbs":["get","list","watch"]},{"apiGroups":["trust.cert-manager.io"],"resources":["bundles/status"],"verbs":["update"]},{"apiGroups":[""],"resources":["configmaps"],"verbs":["get","list","create","update","watch","delete"]},{"apiGroups":[""],"resources":["namespaces"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]}]}
",
      },
      "name": "cert-manager-trust",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "cert-manager.io/v1",
    "kind": "ClusterIssuer",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"cert-manager.io/v1","kind":"ClusterIssuer","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"linkerd-self-signed-issuer","namespace":"cert-manager"},"spec":{"selfSigned":{}}}
",
      },
      "name": "linkerd-self-signed-issuer",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-clusterissuer-cert-manager-linkerd-self-signed-issuer.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "MutatingWebhookConfiguration",
    "metadata": {
      "annotations": {
        "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"admissionregistration.k8s.io/v1","kind":"MutatingWebhookConfiguration","metadata":{"annotations":{"cert-manager.io/inject-ca-from-secret":"cert-manager/cert-manager-webhook-ca"},"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-webhook","namespace":"cert-manager"},"webhooks":[{"admissionReviewVersions":["v1"],"clientConfig":{"service":{"name":"cert-manager-webhook","namespace":"cert-manager","path":"/mutate"}},"failurePolicy":"Fail","matchPolicy":"Equivalent","name":"webhook.cert-manager.io","rules":[{"apiGroups":["cert-manager.io","acme.cert-manager.io"],"apiVersions":["v1"],"operations":["CREATE","UPDATE"],"resources":["*/*"]}],"sideEffects":"None","timeoutSeconds":10}]}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/admissionregistration.k8s.io_v1-mutatingwebhookconfiguration-cert-manager-cert-manager-webhook.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app":"cert-manager-trust","app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust-metrics","namespace":"cert-manager"},"spec":{"ports":[{"name":"metrics","port":9402,"protocol":"TCP","targetPort":9402}],"selector":{"app":"cert-manager-trust"},"type":"ClusterIP"}}
",
      },
      "name": "cert-manager-trust-metrics",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-trust-metrics.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app":"cert-manager-trust","app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust","namespace":"cert-manager"},"spec":{"ports":[{"name":"webhook","port":443,"protocol":"TCP","targetPort":6443}],"selector":{"app":"cert-manager-trust"},"type":"ClusterIP"}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","automountServiceAccountToken":true,"kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-cainjector","namespace":"cert-manager"}}
",
      },
      "name": "cert-manager-cainjector",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-cainjector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-certificates"},"rules":[{"apiGroups":["cert-manager.io"],"resources":["certificates","certificates/status","certificaterequests","certificaterequests/status"],"verbs":["update"]},{"apiGroups":["cert-manager.io"],"resources":["certificates","certificaterequests","clusterissuers","issuers"],"verbs":["get","list","watch"]},{"apiGroups":["cert-manager.io"],"resources":["certificates/finalizers","certificaterequests/finalizers"],"verbs":["update"]},{"apiGroups":["acme.cert-manager.io"],"resources":["orders"],"verbs":["create","delete","get","list","watch"]},{"apiGroups":[""],"resources":["secrets"],"verbs":["get","list","watch","create","update","delete"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]}]}
",
      },
      "name": "cert-manager-controller-controller-certificates",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-certificates.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust","namespace":"cert-manager"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"cert-manager-trust"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-trust","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-orders"},"rules":[{"apiGroups":["acme.cert-manager.io"],"resources":["orders","orders/status"],"verbs":["update"]},{"apiGroups":["acme.cert-manager.io"],"resources":["orders","challenges"],"verbs":["get","list","watch"]},{"apiGroups":["cert-manager.io"],"resources":["clusterissuers","issuers"],"verbs":["get","list","watch"]},{"apiGroups":["acme.cert-manager.io"],"resources":["challenges"],"verbs":["create","delete"]},{"apiGroups":["acme.cert-manager.io"],"resources":["orders/finalizers"],"verbs":["update"]},{"apiGroups":[""],"resources":["secrets"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]}]}
",
      },
      "name": "cert-manager-controller-controller-orders",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-orders.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-cainjector-leader-election","namespace":"kube-system"},"rules":[{"apiGroups":[""],"resourceNames":["cert-manager-cainjector-leader-election","cert-manager-cainjector-leader-election-core"],"resources":["configmaps"],"verbs":["get","update","patch"]},{"apiGroups":[""],"resources":["configmaps"],"verbs":["create"]},{"apiGroups":["coordination.k8s.io"],"resourceNames":["cert-manager-controller"],"resources":["leases"],"verbs":["get","update","patch"]},{"apiGroups":["coordination.k8s.io"],"resources":["leases"],"verbs":["create","get","update"]}]}
",
      },
      "name": "cert-manager-cainjector-leader-election",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-kube-system-cert-manager-cainjector-leader-election.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-challenges"},"rules":[{"apiGroups":["acme.cert-manager.io"],"resources":["challenges","challenges/status"],"verbs":["update"]},{"apiGroups":["acme.cert-manager.io"],"resources":["challenges"],"verbs":["get","list","watch"]},{"apiGroups":["cert-manager.io"],"resources":["issuers","clusterissuers"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["secrets"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]},{"apiGroups":[""],"resources":["pods","services"],"verbs":["get","list","watch","create","delete"]},{"apiGroups":["networking.k8s.io"],"resources":["ingresses"],"verbs":["get","list","watch","create","delete","update"]},{"apiGroups":["route.openshift.io"],"resources":["routes/custom-host"],"verbs":["create"]},{"apiGroups":["acme.cert-manager.io"],"resources":["challenges/finalizers"],"verbs":["update"]},{"apiGroups":[""],"resources":["secrets"],"verbs":["get","list","watch"]}]}
",
      },
      "name": "cert-manager-controller-controller-challenges",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-challenges.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"cert-manager","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-approve"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-controller-controller-approve"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-controller","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-controller-controller-approve",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-approve.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": {
      "annotations": {
        "cert-manager.io/inject-ca-from": "cert-manager/cert-manager-trust",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"admissionregistration.k8s.io/v1","kind":"ValidatingWebhookConfiguration","metadata":{"annotations":{"cert-manager.io/inject-ca-from":"cert-manager/cert-manager-trust"},"labels":{"app":"cert-manager-trust","app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust"},"webhooks":[{"admissionReviewVersions":["v1","v1beta1"],"clientConfig":{"service":{"name":"cert-manager-trust","namespace":"cert-manager","path":"/validate"}},"failurePolicy":"Fail","name":"trust.cert-manager.io","rules":[{"apiGroups":["trust.cert-manager.io"],"apiVersions":["*"],"operations":["CREATE","UPDATE"],"resources":["*/*"]}],"sideEffects":"None","timeoutSeconds":5}]}
",
      },
      "name": "cert-manager-trust",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/admissionregistration.k8s.io_v1-validatingwebhookconfiguration-default-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "cert-manager.io/v1",
    "kind": "ClusterIssuer",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"cert-manager.io/v1","kind":"ClusterIssuer","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"letsencrypt-cluster-issuer","namespace":"default"},"spec":{"selfSigned":{}}}
",
      },
      "name": "letsencrypt-cluster-issuer",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-clusterissuer-default-letsencrypt-cluster-issuer.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-leader-election","namespace":"kube-system"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"cert-manager-controller-leader-election"},"subjects":[{"apiGroup":"","kind":"ServiceAccount","name":"cert-manager-controller","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-controller-leader-election",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-kube-system-cert-manager-controller-leader-election.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "trust.cert-manager.io/v1alpha1",
    "kind": "Bundle",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"trust.cert-manager.io/v1alpha1","kind":"Bundle","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"linkerd-identity-trust-roots","namespace":"default"},"spec":{"sources":[{"secret":{"key":"ca.crt","name":"linkerd-identity-trust-roots"}}],"target":{"configMap":{"key":"ca-bundle.crt"}}}}
",
      },
      "name": "linkerd-identity-trust-roots",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/trust.cert-manager.io_v1alpha1-bundle-default-linkerd-identity-trust-roots.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-ingress-shim"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-controller-controller-ingress-shim"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-controller","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-controller-controller-ingress-shim",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-ingress-shim.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "sealedsecrets.bitnami.com",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-sealedsecrets.bitnami.com.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/instance":"sealed-secrets","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"sealed-secrets","helm.sh/chart":"sealed-secrets-1.1.5"},"name":"sealed-secrets-key-admin","namespace":"kube-system"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"sealed-secrets-key-admin"},"subjects":[{"kind":"ServiceAccount","name":"sealed-secrets","namespace":"kube-system"}]}
",
      },
      "name": "sealed-secrets-key-admin",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-kube-system-sealed-secrets-key-admin.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/instance":"sealed-secrets","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"sealed-secrets","helm.sh/chart":"sealed-secrets-1.1.5"},"name":"sealed-secrets-service-proxier","namespace":"kube-system"},"rules":[{"apiGroups":[""],"resourceNames":["http:sealed-secrets:","sealed-secrets"],"resources":["services/proxy"],"verbs":["create","get"]}]}
",
      },
      "name": "sealed-secrets-service-proxier",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets/1-manifest/rbac.authorization.k8s.io_v1-role-kube-system-sealed-secrets-service-proxier.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/instance":"sealed-secrets","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"sealed-secrets","helm.sh/chart":"sealed-secrets-1.1.5"},"name":"sealed-secrets-service-proxier","namespace":"kube-system"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"sealed-secrets-service-proxier"},"subjects":[{"apiGroup":"rbac.authorization.k8s.io","kind":"Group","name":"system:authenticated"}]}
",
      },
      "name": "sealed-secrets-service-proxier",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-kube-system-sealed-secrets-service-proxier.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/instance":"sealed-secrets","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"sealed-secrets","helm.sh/chart":"sealed-secrets-1.1.5"},"name":"sealed-secrets","namespace":"kube-system"},"spec":{"ports":[{"port":8080,"targetPort":"http"}],"selector":{"app.kubernetes.io/instance":"sealed-secrets","app.kubernetes.io/name":"sealed-secrets"},"sessionAffinity":"None","type":"ClusterIP"}}
",
      },
      "name": "sealed-secrets",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets/1-manifest/v1-service-kube-system-sealed-secrets.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/instance":"sealed-secrets","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"sealed-secrets","helm.sh/chart":"sealed-secrets-1.1.5"},"name":"sealed-secrets","namespace":"kube-system"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"sealed-secrets-unsealer"},"subjects":[{"kind":"ServiceAccount","name":"sealed-secrets","namespace":"kube-system"}]}
",
      },
      "name": "sealed-secrets",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-kube-system-sealed-secrets.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/instance":"sealed-secrets","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"sealed-secrets","helm.sh/chart":"sealed-secrets-1.1.5"},"name":"sealed-secrets","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"app.kubernetes.io/instance":"sealed-secrets","app.kubernetes.io/name":"sealed-secrets"}},"strategy":{"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app.kubernetes.io/instance":"sealed-secrets","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"sealed-secrets","helm.sh/chart":"sealed-secrets-1.1.5"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/instance":"sealed-secrets","app.kubernetes.io/name":"sealed-secrets"}},"namespaces":["kube-system"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["--key-prefix","sealed-secrets-key"],"command":["/controller"],"image":"docker.io/bitnami/sealed-secrets:0.18.5-scratch-r0","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":"http"},"initialDelaySeconds":5,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"sealed-secrets","ports":[{"containerPort":8080,"name":"http","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":"http"},"initialDelaySeconds":5,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"resources":{"limits":{},"requests":{}},"securityContext":{"readOnlyRootFilesystem":true,"runAsNonRoot":true,"runAsUser":1001},"volumeMounts":[{"mountPath":"/tmp","name":"tmp"}]}],"securityContext":{"fsGroup":1001},"serviceAccountName":"sealed-secrets","volumes":[{"emptyDir":{},"name":"tmp"}]}}}}
",
      },
      "name": "sealed-secrets",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets/1-manifest/apps_v1-deployment-kube-system-sealed-secrets.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/instance": "sealed-secrets",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "sealed-secrets",
            "helm.sh/chart": "sealed-secrets-1.1.5",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/instance": "sealed-secrets",
                        "app.kubernetes.io/name": "sealed-secrets",
                      },
                    },
                    "namespaces": [
                      "kube-system",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "--key-prefix",
                "sealed-secrets-key",
              ],
              "command": [
                "/controller",
              ],
              "image": "docker.io/bitnami/sealed-secrets:0.18.5-scratch-r0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": "http",
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "sealed-secrets",
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": "http",
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": [
                {
                  "mountPath": "/tmp",
                  "name": "tmp",
                },
              ],
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "sealed-secrets",
          "volumes": [
            {
              "emptyDir": {},
              "name": "tmp",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/instance":"sealed-secrets","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"sealed-secrets","helm.sh/chart":"sealed-secrets-1.1.5"},"name":"sealed-secrets-unsealer","namespace":"kube-system"},"rules":[{"apiGroups":["bitnami.com"],"resources":["sealedsecrets"],"verbs":["get","list","watch"]},{"apiGroups":["bitnami.com"],"resources":["sealedsecrets/status"],"verbs":["update"]},{"apiGroups":[""],"resources":["secrets"],"verbs":["get","create","update","delete"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]}]}
",
      },
      "name": "sealed-secrets-unsealer",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-kube-system-sealed-secrets-unsealer.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/instance":"sealed-secrets","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"sealed-secrets","helm.sh/chart":"sealed-secrets-1.1.5"},"name":"sealed-secrets-key-admin","namespace":"kube-system"},"rules":[{"apiGroups":[""],"resourceNames":["sealed-secrets-key"],"resources":["secrets"],"verbs":["get"]},{"apiGroups":[""],"resources":["secrets"],"verbs":["create","list"]}]}
",
      },
      "name": "sealed-secrets-key-admin",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets/1-manifest/rbac.authorization.k8s.io_v1-role-kube-system-sealed-secrets-key-admin.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","automountServiceAccountToken":true,"kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/instance":"sealed-secrets","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"sealed-secrets","helm.sh/chart":"sealed-secrets-1.1.5"},"name":"sealed-secrets","namespace":"kube-system"}}
",
      },
      "name": "sealed-secrets",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets/1-manifest/v1-serviceaccount-kube-system-sealed-secrets.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller","namespace":"default"},"spec":{"minReadySeconds":0,"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/name":"nginx-ingress-controller"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/name":"nginx-ingress-controller"}},"namespaces":["default"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["/nginx-ingress-controller","--default-backend-service=default/nginx-ingress-controller-default-backend","--election-id=ingress-controller-leader","--controller-class=k8s.io/ingress-nginx","--configmap=default/nginx-ingress-controller"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"docker.io/bitnami/nginx-ingress-controller:1.4.0-debian-11-r2","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":10254,"scheme":"HTTP"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"controller","ports":[{"containerPort":80,"name":"http","protocol":"TCP"},{"containerPort":443,"name":"https","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":10254,"scheme":"HTTP"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"resources":{"limits":{},"requests":{}},"securityContext":{"allowPrivilegeEscalation":true,"capabilities":{"add":["NET_BIND_SERVICE"],"drop":["ALL"]},"runAsNonRoot":true,"runAsUser":1001}}],"dnsPolicy":"ClusterFirst","hostNetwork":false,"securityContext":{"fsGroup":1001},"serviceAccountName":"nginx-ingress-controller","terminationGracePeriodSeconds":60}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/apps_v1-deployment-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "nginx-ingress-controller",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "nginx-ingress-controller",
            "helm.sh/chart": "nginx-ingress-controller-9.3.18",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "controller",
                        "app.kubernetes.io/instance": "nginx-ingress-controller",
                        "app.kubernetes.io/name": "nginx-ingress-controller",
                      },
                    },
                    "namespaces": [
                      "default",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "/nginx-ingress-controller",
                "--default-backend-service=default/nginx-ingress-controller-default-backend",
                "--election-id=ingress-controller-leader",
                "--controller-class=k8s.io/ingress-nginx",
                "--configmap=default/nginx-ingress-controller",
              ],
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/nginx-ingress-controller:1.4.0-debian-11-r2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "controller",
              "ports": [
                {
                  "containerPort": 80,
                  "name": "http",
                  "protocol": "TCP",
                },
                {
                  "containerPort": 443,
                  "name": "https",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": true,
                "capabilities": {
                  "add": [
                    "NET_BIND_SERVICE",
                  ],
                  "drop": [
                    "ALL",
                  ],
                },
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "dnsPolicy": "ClusterFirst",
          "hostNetwork": false,
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "nginx-ingress-controller",
          "terminationGracePeriodSeconds": 60,
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "defaultBackend.conf": "location /healthz {
  return 200;
}

location / {
  return 404;
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"defaultBackend.conf":"location /healthz {\\n  return 200;\\n}\\n\\nlocation / {\\n  return 404;\\n}"},"kind":"ConfigMap","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/component":"default-backend","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller-default-backend","namespace":"default"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller-default-backend",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/v1-configmap-default-nginx-ingress-controller-default-backend.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "IngressClass",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"networking.k8s.io/v1","kind":"IngressClass","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx"},"spec":{"controller":"k8s.io/ingress-nginx"}}
",
      },
      "name": "nginx",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/networking.k8s.io_v1-ingressclass-default-nginx.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","automountServiceAccountToken":true,"kind":"ServiceAccount","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller","namespace":"default"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/v1-serviceaccount-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "annotations": {
        "cert-manager.io/cluster-issuer": "letsencrypt-cluster-issuer",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"networking.k8s.io/v1","kind":"Ingress","metadata":{"annotations":{"cert-manager.io/cluster-issuer":"letsencrypt-cluster-issuer","nginx.ingress.kubernetes.io/ssl-redirect":"false","nginx.ingress.kubernetes.io/use-regex":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"oyelowo-ingress","namespace":"applications"},"spec":{"ingressClassName":"nginx","rules":[{"host":"localhost:8080","http":{"paths":[{"backend":{"service":{"name":"graphql-surrealdb","port":{"number":8000}}},"path":"/api","pathType":"Prefix"},{"backend":{"service":{"name":"react-web","port":{"number":3000}}},"path":"/","pathType":"Prefix"}]}}],"tls":[{"hosts":["localhost:8080"],"secretName":"nginx-ingress-tls"}]}}
",
        "nginx.ingress.kubernetes.io/ssl-redirect": "false",
        "nginx.ingress.kubernetes.io/use-regex": "true",
      },
      "name": "oyelowo-ingress",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/networking.k8s.io_v1-ingress-applications-oyelowo-ingress.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller","namespace":"default"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"nginx-ingress-controller"},"subjects":[{"kind":"ServiceAccount","name":"nginx-ingress-controller","namespace":"default"}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller","namespace":"default"},"rules":[{"apiGroups":[""],"resources":["configmaps","endpoints","nodes","pods","secrets","namespaces"],"verbs":["list","watch"]},{"apiGroups":["coordination.k8s.io"],"resources":["leases"],"verbs":["list","watch"]},{"apiGroups":[""],"resources":["nodes"],"verbs":["get"]},{"apiGroups":[""],"resources":["services"],"verbs":["get","list","update","watch"]},{"apiGroups":["networking.k8s.io"],"resources":["ingresses"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]},{"apiGroups":["networking.k8s.io"],"resources":["ingresses/status"],"verbs":["update"]},{"apiGroups":["networking.k8s.io"],"resources":["ingressclasses"],"verbs":["get","list","watch"]},{"apiGroups":["discovery.k8s.io"],"resources":["endpointslices"],"verbs":["list","watch","get"]}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller","namespace":"default"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"nginx-ingress-controller"},"subjects":[{"kind":"ServiceAccount","name":"nginx-ingress-controller","namespace":"default"}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/component":"default-backend","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller-default-backend","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"default-backend","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/name":"nginx-ingress-controller"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"default-backend","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"default-backend","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/name":"nginx-ingress-controller"}},"namespaces":["default"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"image":"docker.io/bitnami/nginx:1.22.0-debian-11-r44","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":"http","scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":5},"name":"default-backend","ports":[{"containerPort":8080,"name":"http","protocol":"TCP"}],"readinessProbe":{"failureThreshold":6,"httpGet":{"path":"/healthz","port":"http","scheme":"HTTP"},"initialDelaySeconds":0,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":5},"resources":{"limits":{},"requests":{}},"securityContext":{"runAsNonRoot":true,"runAsUser":1001},"volumeMounts":[{"mountPath":"/opt/bitnami/nginx/conf/bitnami/","name":"nginx-config-volume","readOnly":true}]}],"securityContext":{"fsGroup":1001},"serviceAccountName":"nginx-ingress-controller","terminationGracePeriodSeconds":60,"volumes":[{"configMap":{"items":[{"key":"defaultBackend.conf","path":"defaultBackend.conf"}],"name":"nginx-ingress-controller-default-backend"},"name":"nginx-config-volume"}]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller-default-backend",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/apps_v1-deployment-default-nginx-ingress-controller-default-backend.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "default-backend",
            "app.kubernetes.io/instance": "nginx-ingress-controller",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "nginx-ingress-controller",
            "helm.sh/chart": "nginx-ingress-controller-9.3.18",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "default-backend",
                        "app.kubernetes.io/instance": "nginx-ingress-controller",
                        "app.kubernetes.io/name": "nginx-ingress-controller",
                      },
                    },
                    "namespaces": [
                      "default",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "image": "docker.io/bitnami/nginx:1.22.0-debian-11-r44",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": "http",
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "name": "default-backend",
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 6,
                "httpGet": {
                  "path": "/healthz",
                  "port": "http",
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": [
                {
                  "mountPath": "/opt/bitnami/nginx/conf/bitnami/",
                  "name": "nginx-config-volume",
                  "readOnly": true,
                },
              ],
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "nginx-ingress-controller",
          "terminationGracePeriodSeconds": 60,
          "volumes": [
            {
              "configMap": {
                "items": [
                  {
                    "key": "defaultBackend.conf",
                    "path": "defaultBackend.conf",
                  },
                ],
                "name": "nginx-ingress-controller-default-backend",
              },
              "name": "nginx-config-volume",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller","namespace":"default"},"rules":[{"apiGroups":[""],"resources":["namespaces"],"verbs":["get"]},{"apiGroups":[""],"resources":["configmaps","pods","secrets","endpoints"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["services"],"verbs":["get","list","update","watch"]},{"apiGroups":["networking.k8s.io"],"resources":["ingresses"],"verbs":["get","list","watch"]},{"apiGroups":["networking.k8s.io"],"resources":["ingresses/status"],"verbs":["update"]},{"apiGroups":["networking.k8s.io"],"resources":["ingressclasses"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resourceNames":["ingress-controller-leader"],"resources":["configmaps"],"verbs":["get","update"]},{"apiGroups":[""],"resources":["configmaps"],"verbs":["create"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]},{"apiGroups":["discovery.k8s.io"],"resources":["endpointslices"],"verbs":["list","watch","get"]},{"apiGroups":["coordination.k8s.io"],"resources":["leases"],"verbs":["create"]},{"apiGroups":["coordination.k8s.io"],"resourceNames":["ingress-controller-leader"],"resources":["leases"],"verbs":["get","update"]}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-role-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/component":"default-backend","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller-default-backend","namespace":"default"},"spec":{"ports":[{"name":"http","port":80,"protocol":"TCP","targetPort":"http"}],"selector":{"app.kubernetes.io/component":"default-backend","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/name":"nginx-ingress-controller"},"type":"ClusterIP"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller-default-backend",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/v1-service-default-nginx-ingress-controller-default-backend.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller","namespace":"default"},"spec":{"externalTrafficPolicy":"","ports":[{"name":"http","port":80,"protocol":"TCP","targetPort":"http"},{"name":"https","port":443,"protocol":"TCP","targetPort":"https"}],"selector":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/name":"nginx-ingress-controller"},"sessionAffinity":"None","type":"LoadBalancer"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/v1-service-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
        "helm.sh/resource-policy": "keep",
      },
      "name": "cephclusters.ceph.rook.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-cephclusters.ceph.rook.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
        "helm.sh/resource-policy": "keep",
      },
      "name": "cephblockpoolradosnamespaces.ceph.rook.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-cephblockpoolradosnamespaces.ceph.rook.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
        "helm.sh/resource-policy": "keep",
      },
      "name": "cephblockpools.ceph.rook.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-cephblockpools.ceph.rook.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
        "helm.sh/resource-policy": "keep",
      },
      "name": "cephclients.ceph.rook.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-cephclients.ceph.rook.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
        "helm.sh/resource-policy": "keep",
      },
      "name": "cephobjectstores.ceph.rook.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-cephobjectstores.ceph.rook.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
        "helm.sh/resource-policy": "keep",
      },
      "name": "cephfilesystemmirrors.ceph.rook.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-cephfilesystemmirrors.ceph.rook.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
        "helm.sh/resource-policy": "keep",
      },
      "name": "cephobjectrealms.ceph.rook.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-cephobjectrealms.ceph.rook.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
        "helm.sh/resource-policy": "keep",
      },
      "name": "cephobjectzonegroups.ceph.rook.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-cephobjectzonegroups.ceph.rook.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
        "helm.sh/resource-policy": "keep",
      },
      "name": "cephobjectzones.ceph.rook.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-cephobjectzones.ceph.rook.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "helm.sh/resource-policy": "keep",
      },
      "name": "objectbuckets.objectbucket.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-objectbuckets.objectbucket.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "helm.sh/resource-policy": "keep",
      },
      "name": "objectbucketclaims.objectbucket.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-objectbucketclaims.objectbucket.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
        "helm.sh/resource-policy": "keep",
      },
      "name": "cephrbdmirrors.ceph.rook.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-cephrbdmirrors.ceph.rook.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
        "helm.sh/resource-policy": "keep",
      },
      "name": "cephfilesystems.ceph.rook.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-cephfilesystems.ceph.rook.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
        "helm.sh/resource-policy": "keep",
      },
      "name": "cephbucketnotifications.ceph.rook.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-cephbucketnotifications.ceph.rook.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
        "helm.sh/resource-policy": "keep",
      },
      "name": "cephnfses.ceph.rook.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-cephnfses.ceph.rook.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
        "helm.sh/resource-policy": "keep",
      },
      "name": "cephfilesystemsubvolumegroups.ceph.rook.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-cephfilesystemsubvolumegroups.ceph.rook.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
        "helm.sh/resource-policy": "keep",
      },
      "name": "cephobjectstoreusers.ceph.rook.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-cephobjectstoreusers.ceph.rook.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
        "helm.sh/resource-policy": "keep",
      },
      "name": "cephbuckettopics.ceph.rook.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-cephbuckettopics.ceph.rook.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "data": {
      "config": "
        [global]
        osd_pool_default_size = 1
        mon_warn_on_pool_no_redundancy = false
        bdev_flock_retry = 20
        bluefs_buffered_io = false
        mon_data_avail_warn = 500M
        ",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"config":"\\n        [global]\\n        osd_pool_default_size = 1\\n        mon_warn_on_pool_no_redundancy = false\\n        bdev_flock_retry = 20\\n        bluefs_buffered_io = false\\n        mon_data_avail_warn = 500M\\n        "},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-config-override","namespace":"rook-ceph"}}
",
      },
      "name": "rook-config-override",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/v1-configmap-rook-ceph-rook-config-override.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"rook-ceph-mgr","namespace":"rook-ceph"}}
",
      },
      "name": "rook-ceph-mgr",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/v1-serviceaccount-rook-ceph-rook-ceph-mgr.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-osd"},"rules":[{"apiGroups":[""],"resources":["nodes"],"verbs":["get","list"]}]}
",
      },
      "name": "rook-ceph-osd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-rook-ceph-osd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-osd"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"rook-ceph-osd"},"subjects":[{"kind":"ServiceAccount","name":"rook-ceph-osd","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-osd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-rook-ceph-osd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-csi-rbd-plugin-sa-psp"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"psp:rook"},"subjects":[{"kind":"ServiceAccount","name":"rook-csi-rbd-plugin-sa","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-csi-rbd-plugin-sa-psp",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-rook-csi-rbd-plugin-sa-psp.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-purge-osd","namespace":"rook-ceph"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"rook-ceph-purge-osd"},"subjects":[{"kind":"ServiceAccount","name":"rook-ceph-purge-osd","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-purge-osd",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-rook-ceph-rook-ceph-purge-osd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "ceph.rook.io/v1",
    "kind": "CephCluster",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"ceph.rook.io/v1","kind":"CephCluster","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph","namespace":"rook-ceph"},"spec":{"cephVersion":{"allowUnsupported":false,"image":"quay.io/ceph/ceph:v17.2.3"},"cleanupPolicy":{"allowUninstallWithVolumes":false,"confirmation":"","sanitizeDisks":{"dataSource":"zero","iteration":1,"method":"quick"}},"continueUpgradeAfterChecksEvenIfNotHealthy":false,"crashCollector":{"disable":false},"dashboard":{"enabled":true,"ssl":true},"dataDirHostPath":"/var/lib/rook","disruptionManagement":{"machineDisruptionBudgetNamespace":"openshift-machine-api","manageMachineDisruptionBudgets":false,"managePodBudgets":true,"osdMaintenanceTimeout":30,"pgHealthCheckTimeout":0},"healthCheck":{"daemonHealth":{"mon":{"disabled":false,"interval":"45s"},"osd":{"disabled":false,"interval":"60s"},"status":{"disabled":false,"interval":"60s"}},"livenessProbe":{"mgr":{"disabled":false},"mon":{"disabled":false},"osd":{"disabled":false}}},"mgr":{"allowMultiplePerNode":false,"count":2,"modules":[{"enabled":true,"name":"pg_autoscaler"}]},"mon":{"allowMultiplePerNode":false,"count":3},"monitoring":{"enabled":false},"priorityClassNames":{"mgr":"system-cluster-critical","mon":"system-node-critical","osd":"system-node-critical"},"removeOSDsIfOutAndSafeToRemove":false,"resources":{"cleanup":{"limits":{"cpu":"500m","memory":"1Gi"},"requests":{"cpu":"500m","memory":"100Mi"}},"crashcollector":{"limits":{"cpu":"500m","memory":"60Mi"},"requests":{"cpu":"100m","memory":"60Mi"}},"logcollector":{"limits":{"cpu":"500m","memory":"1Gi"},"requests":{"cpu":"100m","memory":"100Mi"}},"mgr":{"limits":{"cpu":"1000m","memory":"1Gi"},"requests":{"cpu":"500m","memory":"512Mi"}},"mgr-sidecar":{"limits":{"cpu":"500m","memory":"100Mi"},"requests":{"cpu":"100m","memory":"40Mi"}},"mon":{"limits":{"cpu":"2000m","memory":"2Gi"},"requests":{"cpu":"1000m","memory":"1Gi"}},"osd":{"limits":{"cpu":"2000m","memory":"4Gi"},"requests":{"cpu":"1000m","memory":"4Gi"}},"prepareosd":{"requests":{"cpu":"500m","memory":"50Mi"}}},"skipUpgradeChecks":false,"storage":{"useAllDevices":true,"useAllNodes":true},"waitTimeoutForHealthyOSDInMinutes":10}}
",
      },
      "name": "rook-ceph",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/ceph.rook.io_v1-cephcluster-rook-ceph-rook-ceph.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"rook-ceph-system","namespace":"rook-ceph"},"rules":[{"apiGroups":[""],"resources":["pods","configmaps","services"],"verbs":["get","list","watch","patch","create","update","delete"]},{"apiGroups":["apps","extensions"],"resources":["daemonsets","statefulsets","deployments"],"verbs":["get","list","watch","create","update","delete"]},{"apiGroups":["batch"],"resources":["cronjobs"],"verbs":["delete"]},{"apiGroups":["cert-manager.io"],"resources":["certificates","issuers"],"verbs":["get","create","delete"]}]}
",
      },
      "name": "rook-ceph-system",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-role-rook-ceph-rook-ceph-system.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"rook-ceph-default-psp","namespace":"rook-ceph"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"psp:rook"},"subjects":[{"kind":"ServiceAccount","name":"default","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-default-psp",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-rook-ceph-rook-ceph-default-psp.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rbd-csi-nodeplugin"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"rbd-csi-nodeplugin"},"subjects":[{"kind":"ServiceAccount","name":"rook-csi-rbd-plugin-sa","namespace":"rook-ceph"}]}
",
      },
      "name": "rbd-csi-nodeplugin",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-rbd-csi-nodeplugin.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-csi-rbd-plugin-sa","namespace":"rook-ceph"}}
",
      },
      "name": "rook-csi-rbd-plugin-sa",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/v1-serviceaccount-rook-ceph-rook-csi-rbd-plugin-sa.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"rook-ceph-system"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"rook-ceph-system"},"subjects":[{"kind":"ServiceAccount","name":"rook-ceph-system","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-rook-ceph-system.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"cephfs-csi-nodeplugin"},"rules":[{"apiGroups":[""],"resources":["nodes"],"verbs":["get"]}]}
",
      },
      "name": "cephfs-csi-nodeplugin",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cephfs-csi-nodeplugin.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"rook-ceph-system-psp"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"psp:rook"},"subjects":[{"kind":"ServiceAccount","name":"rook-ceph-system","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-system-psp",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-rook-ceph-system-psp.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-rgw","namespace":"rook-ceph"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"rook-ceph-rgw"},"subjects":[{"kind":"ServiceAccount","name":"rook-ceph-rgw","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-rgw",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-rook-ceph-rook-ceph-rgw.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"cephfs-external-provisioner-cfg","namespace":"rook-ceph"},"rules":[{"apiGroups":["coordination.k8s.io"],"resources":["leases"],"verbs":["get","watch","list","delete","update","create"]}]}
",
      },
      "name": "cephfs-external-provisioner-cfg",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-role-rook-ceph-cephfs-external-provisioner-cfg.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-csi-rbd-provisioner-sa","namespace":"rook-ceph"}}
",
      },
      "name": "rook-csi-rbd-provisioner-sa",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/v1-serviceaccount-rook-ceph-rook-csi-rbd-provisioner-sa.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-mgr-system"},"rules":[{"apiGroups":[""],"resources":["configmaps"],"verbs":["get","list","watch"]}]}
",
      },
      "name": "rook-ceph-mgr-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-rook-ceph-mgr-system.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-osd","namespace":"rook-ceph"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"rook-ceph-osd"},"subjects":[{"kind":"ServiceAccount","name":"rook-ceph-osd","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-osd",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-rook-ceph-rook-ceph-osd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-cluster-mgmt","namespace":"rook-ceph"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"rook-ceph-cluster-mgmt"},"subjects":[{"kind":"ServiceAccount","name":"rook-ceph-system","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-cluster-mgmt",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-rook-ceph-rook-ceph-cluster-mgmt.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "ceph.rook.io/v1",
    "kind": "CephCluster",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"ceph.rook.io/v1","kind":"CephCluster","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"test-cluster","namespace":"rook-ceph"},"spec":{"cephVersion":{"allowUnsupported":true,"image":"quay.io/ceph/ceph:v17"},"crashCollector":{"disable":true},"dashboard":{"enabled":true},"dataDirHostPath":"/var/lib/rook","disruptionManagement":{"managePodBudgets":true},"healthCheck":{"daemonHealth":{"mon":{"interval":"45s","timeout":"600s"}}},"mgr":{"allowMultiplePerNode":true,"count":1},"mon":{"allowMultiplePerNode":true,"count":1},"priorityClassNames":{"all":"system-node-critical","mgr":"system-cluster-critical"},"storage":{"useAllDevices":true,"useAllNodes":true}}}
",
      },
      "name": "test-cluster",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/ceph.rook.io_v1-cephcluster-rook-ceph-test-cluster.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-csi-cephfs-provisioner-sa-psp"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"psp:rook"},"subjects":[{"kind":"ServiceAccount","name":"rook-csi-cephfs-provisioner-sa","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-csi-cephfs-provisioner-sa-psp",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-rook-csi-cephfs-provisioner-sa-psp.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"rook-ceph-cmd-reporter","namespace":"rook-ceph"}}
",
      },
      "name": "rook-ceph-cmd-reporter",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/v1-serviceaccount-rook-ceph-rook-ceph-cmd-reporter.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "ceph.rook.io/v1",
    "kind": "CephBlockPool",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"ceph.rook.io/v1","kind":"CephBlockPool","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"replicapool","namespace":"rook-ceph"},"spec":{"failureDomain":"host","replicated":{"requireSafeReplicaSize":true,"size":3}}}
",
      },
      "name": "replicapool",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/ceph.rook.io_v1-cephblockpool-rook-ceph-replicapool.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-mgr","namespace":"rook-ceph"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"rook-ceph-mgr"},"subjects":[{"kind":"ServiceAccount","name":"rook-ceph-mgr","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-mgr",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-rook-ceph-rook-ceph-mgr.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "v1",
    "data": {
      "CSI_CEPHFS_FSGROUPPOLICY": "File",
      "CSI_CEPHFS_PLUGIN_RESOURCE": "- name : driver-registrar
  resource:
    requests:
      memory: 128Mi
      cpu: 50m
    limits:
      memory: 256Mi
      cpu: 100m
- name : csi-cephfsplugin
  resource:
    requests:
      memory: 512Mi
      cpu: 250m
    limits:
      memory: 1Gi
      cpu: 500m
- name : liveness-prometheus
  resource:
    requests:
      memory: 128Mi
      cpu: 50m
    limits:
      memory: 256Mi
      cpu: 100m
",
      "CSI_CEPHFS_PROVISIONER_RESOURCE": "- name : csi-provisioner
  resource:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 256Mi
      cpu: 200m
- name : csi-resizer
  resource:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 256Mi
      cpu: 200m
- name : csi-attacher
  resource:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 256Mi
      cpu: 200m
- name : csi-snapshotter
  resource:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 256Mi
      cpu: 200m
- name : csi-cephfsplugin
  resource:
    requests:
      memory: 512Mi
      cpu: 250m
    limits:
      memory: 1Gi
      cpu: 500m
- name : liveness-prometheus
  resource:
    requests:
      memory: 128Mi
      cpu: 50m
    limits:
      memory: 256Mi
      cpu: 100m
",
      "CSI_ENABLE_CEPHFS_SNAPSHOTTER": "true",
      "CSI_ENABLE_CSIADDONS": "false",
      "CSI_ENABLE_ENCRYPTION": "false",
      "CSI_ENABLE_HOST_NETWORK": "true",
      "CSI_ENABLE_METADATA": "false",
      "CSI_ENABLE_NFS_SNAPSHOTTER": "true",
      "CSI_ENABLE_OMAP_GENERATOR": "false",
      "CSI_ENABLE_RBD_SNAPSHOTTER": "true",
      "CSI_ENABLE_TOPOLOGY": "false",
      "CSI_FORCE_CEPHFS_KERNEL_CLIENT": "true",
      "CSI_GRPC_TIMEOUT_SECONDS": "150",
      "CSI_NFS_FSGROUPPOLICY": "File",
      "CSI_NFS_PLUGIN_RESOURCE": "- name : driver-registrar
  resource:
    requests:
      memory: 128Mi
      cpu: 50m
    limits:
      memory: 256Mi
      cpu: 100m
- name : csi-nfsplugin
  resource:
    requests:
      memory: 512Mi
      cpu: 250m
    limits:
      memory: 1Gi
      cpu: 500m
",
      "CSI_NFS_PROVISIONER_RESOURCE": "- name : csi-provisioner
  resource:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 256Mi
      cpu: 200m
- name : csi-nfsplugin
  resource:
    requests:
      memory: 512Mi
      cpu: 250m
    limits:
      memory: 1Gi
      cpu: 500m
",
      "CSI_PLUGIN_ENABLE_SELINUX_HOST_MOUNT": "false",
      "CSI_PLUGIN_PRIORITY_CLASSNAME": "system-node-critical",
      "CSI_PROVISIONER_PRIORITY_CLASSNAME": "system-cluster-critical",
      "CSI_PROVISIONER_REPLICAS": "2",
      "CSI_RBD_FSGROUPPOLICY": "File",
      "CSI_RBD_PLUGIN_RESOURCE": "- name : driver-registrar
  resource:
    requests:
      memory: 128Mi
      cpu: 50m
    limits:
      memory: 256Mi
      cpu: 100m
- name : csi-rbdplugin
  resource:
    requests:
      memory: 512Mi
      cpu: 250m
    limits:
      memory: 1Gi
      cpu: 500m
- name : liveness-prometheus
  resource:
    requests:
      memory: 128Mi
      cpu: 50m
    limits:
      memory: 256Mi
      cpu: 100m
",
      "CSI_RBD_PROVISIONER_RESOURCE": "- name : csi-provisioner
  resource:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 256Mi
      cpu: 200m
- name : csi-resizer
  resource:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 256Mi
      cpu: 200m
- name : csi-attacher
  resource:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 256Mi
      cpu: 200m
- name : csi-snapshotter
  resource:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 256Mi
      cpu: 200m
- name : csi-rbdplugin
  resource:
    requests:
      memory: 512Mi
      cpu: 250m
    limits:
      memory: 1Gi
      cpu: 500m
- name : csi-omap-generator
  resource:
    requests:
      memory: 512Mi
      cpu: 250m
    limits:
      memory: 1Gi
      cpu: 500m
- name : liveness-prometheus
  resource:
    requests:
      memory: 128Mi
      cpu: 50m
    limits:
      memory: 256Mi
      cpu: 100m
",
      "ROOK_CEPH_COMMANDS_TIMEOUT_SECONDS": "15",
      "ROOK_CSI_ENABLE_CEPHFS": "true",
      "ROOK_CSI_ENABLE_GRPC_METRICS": "false",
      "ROOK_CSI_ENABLE_NFS": "false",
      "ROOK_CSI_ENABLE_RBD": "true",
      "ROOK_LOG_LEVEL": "INFO",
      "ROOK_OBC_WATCH_OPERATOR_NAMESPACE": "true",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"CSI_CEPHFS_FSGROUPPOLICY":"File","CSI_CEPHFS_PLUGIN_RESOURCE":"- name : driver-registrar\\n  resource:\\n    requests:\\n      memory: 128Mi\\n      cpu: 50m\\n    limits:\\n      memory: 256Mi\\n      cpu: 100m\\n- name : csi-cephfsplugin\\n  resource:\\n    requests:\\n      memory: 512Mi\\n      cpu: 250m\\n    limits:\\n      memory: 1Gi\\n      cpu: 500m\\n- name : liveness-prometheus\\n  resource:\\n    requests:\\n      memory: 128Mi\\n      cpu: 50m\\n    limits:\\n      memory: 256Mi\\n      cpu: 100m\\n","CSI_CEPHFS_PROVISIONER_RESOURCE":"- name : csi-provisioner\\n  resource:\\n    requests:\\n      memory: 128Mi\\n      cpu: 100m\\n    limits:\\n      memory: 256Mi\\n      cpu: 200m\\n- name : csi-resizer\\n  resource:\\n    requests:\\n      memory: 128Mi\\n      cpu: 100m\\n    limits:\\n      memory: 256Mi\\n      cpu: 200m\\n- name : csi-attacher\\n  resource:\\n    requests:\\n      memory: 128Mi\\n      cpu: 100m\\n    limits:\\n      memory: 256Mi\\n      cpu: 200m\\n- name : csi-snapshotter\\n  resource:\\n    requests:\\n      memory: 128Mi\\n      cpu: 100m\\n    limits:\\n      memory: 256Mi\\n      cpu: 200m\\n- name : csi-cephfsplugin\\n  resource:\\n    requests:\\n      memory: 512Mi\\n      cpu: 250m\\n    limits:\\n      memory: 1Gi\\n      cpu: 500m\\n- name : liveness-prometheus\\n  resource:\\n    requests:\\n      memory: 128Mi\\n      cpu: 50m\\n    limits:\\n      memory: 256Mi\\n      cpu: 100m\\n","CSI_ENABLE_CEPHFS_SNAPSHOTTER":"true","CSI_ENABLE_CSIADDONS":"false","CSI_ENABLE_ENCRYPTION":"false","CSI_ENABLE_HOST_NETWORK":"true","CSI_ENABLE_METADATA":"false","CSI_ENABLE_NFS_SNAPSHOTTER":"true","CSI_ENABLE_OMAP_GENERATOR":"false","CSI_ENABLE_RBD_SNAPSHOTTER":"true","CSI_ENABLE_TOPOLOGY":"false","CSI_FORCE_CEPHFS_KERNEL_CLIENT":"true","CSI_GRPC_TIMEOUT_SECONDS":"150","CSI_NFS_FSGROUPPOLICY":"File","CSI_NFS_PLUGIN_RESOURCE":"- name : driver-registrar\\n  resource:\\n    requests:\\n      memory: 128Mi\\n      cpu: 50m\\n    limits:\\n      memory: 256Mi\\n      cpu: 100m\\n- name : csi-nfsplugin\\n  resource:\\n    requests:\\n      memory: 512Mi\\n      cpu: 250m\\n    limits:\\n      memory: 1Gi\\n      cpu: 500m\\n","CSI_NFS_PROVISIONER_RESOURCE":"- name : csi-provisioner\\n  resource:\\n    requests:\\n      memory: 128Mi\\n      cpu: 100m\\n    limits:\\n      memory: 256Mi\\n      cpu: 200m\\n- name : csi-nfsplugin\\n  resource:\\n    requests:\\n      memory: 512Mi\\n      cpu: 250m\\n    limits:\\n      memory: 1Gi\\n      cpu: 500m\\n","CSI_PLUGIN_ENABLE_SELINUX_HOST_MOUNT":"false","CSI_PLUGIN_PRIORITY_CLASSNAME":"system-node-critical","CSI_PROVISIONER_PRIORITY_CLASSNAME":"system-cluster-critical","CSI_PROVISIONER_REPLICAS":"2","CSI_RBD_FSGROUPPOLICY":"File","CSI_RBD_PLUGIN_RESOURCE":"- name : driver-registrar\\n  resource:\\n    requests:\\n      memory: 128Mi\\n      cpu: 50m\\n    limits:\\n      memory: 256Mi\\n      cpu: 100m\\n- name : csi-rbdplugin\\n  resource:\\n    requests:\\n      memory: 512Mi\\n      cpu: 250m\\n    limits:\\n      memory: 1Gi\\n      cpu: 500m\\n- name : liveness-prometheus\\n  resource:\\n    requests:\\n      memory: 128Mi\\n      cpu: 50m\\n    limits:\\n      memory: 256Mi\\n      cpu: 100m\\n","CSI_RBD_PROVISIONER_RESOURCE":"- name : csi-provisioner\\n  resource:\\n    requests:\\n      memory: 128Mi\\n      cpu: 100m\\n    limits:\\n      memory: 256Mi\\n      cpu: 200m\\n- name : csi-resizer\\n  resource:\\n    requests:\\n      memory: 128Mi\\n      cpu: 100m\\n    limits:\\n      memory: 256Mi\\n      cpu: 200m\\n- name : csi-attacher\\n  resource:\\n    requests:\\n      memory: 128Mi\\n      cpu: 100m\\n    limits:\\n      memory: 256Mi\\n      cpu: 200m\\n- name : csi-snapshotter\\n  resource:\\n    requests:\\n      memory: 128Mi\\n      cpu: 100m\\n    limits:\\n      memory: 256Mi\\n      cpu: 200m\\n- name : csi-rbdplugin\\n  resource:\\n    requests:\\n      memory: 512Mi\\n      cpu: 250m\\n    limits:\\n      memory: 1Gi\\n      cpu: 500m\\n- name : csi-omap-generator\\n  resource:\\n    requests:\\n      memory: 512Mi\\n      cpu: 250m\\n    limits:\\n      memory: 1Gi\\n      cpu: 500m\\n- name : liveness-prometheus\\n  resource:\\n    requests:\\n      memory: 128Mi\\n      cpu: 50m\\n    limits:\\n      memory: 256Mi\\n      cpu: 100m\\n","ROOK_CEPH_COMMANDS_TIMEOUT_SECONDS":"15","ROOK_CSI_ENABLE_CEPHFS":"true","ROOK_CSI_ENABLE_GRPC_METRICS":"false","ROOK_CSI_ENABLE_NFS":"false","ROOK_CSI_ENABLE_RBD":"true","ROOK_LOG_LEVEL":"INFO","ROOK_OBC_WATCH_OPERATOR_NAMESPACE":"true"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-operator-config","namespace":"rook-ceph"}}
",
      },
      "name": "rook-ceph-operator-config",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/v1-configmap-rook-ceph-rook-ceph-operator-config.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "storage.k8s.io/v1",
    "kind": "StorageClass",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"allowVolumeExpansion":true,"apiVersion":"storage.k8s.io/v1","kind":"StorageClass","metadata":{"annotations":{"storageclass.kubernetes.io/is-default-class":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"ceph-block"},"parameters":{"clusterID":"rook-ceph","csi.storage.k8s.io/controller-expand-secret-name":"rook-csi-rbd-provisioner","csi.storage.k8s.io/controller-expand-secret-namespace":"rook-ceph","csi.storage.k8s.io/fstype":"ext4","csi.storage.k8s.io/node-stage-secret-name":"rook-csi-rbd-node","csi.storage.k8s.io/node-stage-secret-namespace":"rook-ceph","csi.storage.k8s.io/provisioner-secret-name":"rook-csi-rbd-provisioner","csi.storage.k8s.io/provisioner-secret-namespace":"rook-ceph","imageFeatures":"layering","imageFormat":"2","pool":"ceph-blockpool"},"provisioner":"rook-ceph.rbd.csi.ceph.com","reclaimPolicy":"Delete"}
",
        "storageclass.kubernetes.io/is-default-class": "true",
      },
      "name": "ceph-block",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/storage.k8s.io_v1-storageclass-default-ceph-block.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-osd-psp","namespace":"rook-ceph"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"psp:rook"},"subjects":[{"kind":"ServiceAccount","name":"rook-ceph-osd","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-osd-psp",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-rook-ceph-rook-ceph-osd-psp.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-csi-cephfs-provisioner-sa","namespace":"rook-ceph"}}
",
      },
      "name": "rook-csi-cephfs-provisioner-sa",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/v1-serviceaccount-rook-ceph-rook-csi-cephfs-provisioner-sa.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "storage.k8s.io/v1",
    "kind": "StorageClass",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"storage.k8s.io/v1","kind":"StorageClass","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"ceph-bucket"},"parameters":{"objectStoreName":"ceph-objectstore","objectStoreNamespace":"rook-ceph","region":"us-east-1"},"provisioner":"rook-ceph.ceph.rook.io/bucket","reclaimPolicy":"Delete"}
",
      },
      "name": "ceph-bucket",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/storage.k8s.io_v1-storageclass-default-ceph-bucket.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"cephfs-csi-provisioner-role"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cephfs-external-provisioner-runner"},"subjects":[{"kind":"ServiceAccount","name":"rook-csi-cephfs-provisioner-sa","namespace":"rook-ceph"}]}
",
      },
      "name": "cephfs-csi-provisioner-role",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cephfs-csi-provisioner-role.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-cmd-reporter-psp","namespace":"rook-ceph"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"psp:rook"},"subjects":[{"kind":"ServiceAccount","name":"rook-ceph-cmd-reporter","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-cmd-reporter-psp",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-rook-ceph-rook-ceph-cmd-reporter-psp.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "ceph.rook.io/v1",
    "kind": "CephBlockPool",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"ceph.rook.io/v1","kind":"CephBlockPool","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"ceph-blockpool","namespace":"rook-ceph"},"spec":{"failureDomain":"host","replicated":{"size":3}}}
",
      },
      "name": "ceph-blockpool",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/ceph.rook.io_v1-cephblockpool-rook-ceph-ceph-blockpool.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"cephfs-external-provisioner-runner"},"rules":[{"apiGroups":[""],"resources":["secrets"],"verbs":["get","list"]},{"apiGroups":[""],"resources":["persistentvolumes"],"verbs":["get","list","watch","create","delete","patch"]},{"apiGroups":[""],"resources":["persistentvolumeclaims"],"verbs":["get","list","watch","patch"]},{"apiGroups":["storage.k8s.io"],"resources":["storageclasses"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["events"],"verbs":["list","watch","create","update","patch"]},{"apiGroups":["storage.k8s.io"],"resources":["volumeattachments"],"verbs":["get","list","watch","patch"]},{"apiGroups":["storage.k8s.io"],"resources":["volumeattachments/status"],"verbs":["patch"]},{"apiGroups":[""],"resources":["persistentvolumeclaims/status"],"verbs":["patch"]},{"apiGroups":["snapshot.storage.k8s.io"],"resources":["volumesnapshots"],"verbs":["get","list"]},{"apiGroups":["snapshot.storage.k8s.io"],"resources":["volumesnapshotclasses"],"verbs":["get","list","watch"]},{"apiGroups":["snapshot.storage.k8s.io"],"resources":["volumesnapshotcontents"],"verbs":["get","list","watch","patch","update"]},{"apiGroups":["snapshot.storage.k8s.io"],"resources":["volumesnapshotcontents/status"],"verbs":["update","patch"]}]}
",
      },
      "name": "cephfs-external-provisioner-runner",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cephfs-external-provisioner-runner.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rbd-external-provisioner-runner"},"rules":[{"apiGroups":[""],"resources":["secrets"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["persistentvolumes"],"verbs":["get","list","watch","create","delete","patch"]},{"apiGroups":[""],"resources":["persistentvolumeclaims"],"verbs":["get","list","watch","update"]},{"apiGroups":["storage.k8s.io"],"resources":["storageclasses"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["events"],"verbs":["list","watch","create","update","patch"]},{"apiGroups":["storage.k8s.io"],"resources":["volumeattachments"],"verbs":["get","list","watch","patch"]},{"apiGroups":["storage.k8s.io"],"resources":["volumeattachments/status"],"verbs":["patch"]},{"apiGroups":[""],"resources":["nodes"],"verbs":["get","list","watch"]},{"apiGroups":["storage.k8s.io"],"resources":["csinodes"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["persistentvolumeclaims/status"],"verbs":["patch"]},{"apiGroups":["snapshot.storage.k8s.io"],"resources":["volumesnapshots"],"verbs":["get","list","watch"]},{"apiGroups":["snapshot.storage.k8s.io"],"resources":["volumesnapshotclasses"],"verbs":["get","list","watch"]},{"apiGroups":["snapshot.storage.k8s.io"],"resources":["volumesnapshotcontents"],"verbs":["get","list","watch","patch","update"]},{"apiGroups":["snapshot.storage.k8s.io"],"resources":["volumesnapshotcontents/status"],"verbs":["update","patch"]},{"apiGroups":[""],"resources":["configmaps"],"verbs":["get"]},{"apiGroups":[""],"resources":["serviceaccounts"],"verbs":["get"]},{"apiGroups":[""],"resources":["serviceaccounts/token"],"verbs":["create"]},{"apiGroups":[""],"resources":["nodes"],"verbs":["get","list","watch\\""]},{"apiGroups":["storage.k8s.io"],"resources":["csinodes"],"verbs":["get","list","watch"]}]}
",
      },
      "name": "rbd-external-provisioner-runner",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-rbd-external-provisioner-runner.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"rook-ceph-system","namespace":"rook-ceph"}}
",
      },
      "name": "rook-ceph-system",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/v1-serviceaccount-rook-ceph-rook-ceph-system.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"rook-ceph-global"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"rook-ceph-global"},"subjects":[{"kind":"ServiceAccount","name":"rook-ceph-system","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-global",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-rook-ceph-global.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"rook-ceph-rgw","namespace":"rook-ceph"}}
",
      },
      "name": "rook-ceph-rgw",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/v1-serviceaccount-rook-ceph-rook-ceph-rgw.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"rook-ceph-system","namespace":"rook-ceph"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"rook-ceph-system"},"subjects":[{"kind":"ServiceAccount","name":"rook-ceph-system","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-system",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-rook-ceph-rook-ceph-system.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"psp:rook"},"rules":[{"apiGroups":["policy"],"resourceNames":["00-rook-privileged"],"resources":["podsecuritypolicies"],"verbs":["use"]}]}
",
      },
      "name": "psp:rook",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-psp:rook.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-purge-osd","namespace":"rook-ceph"},"rules":[{"apiGroups":[""],"resources":["configmaps"],"verbs":["get"]},{"apiGroups":["apps"],"resources":["deployments"],"verbs":["get","delete"]},{"apiGroups":["batch"],"resources":["jobs"],"verbs":["get","list","delete"]},{"apiGroups":[""],"resources":["persistentvolumeclaims"],"verbs":["get","update","delete","list"]}]}
",
      },
      "name": "rook-ceph-purge-osd",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-role-rook-ceph-rook-ceph-purge-osd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"rook-ceph-operator","namespace":"rook-ceph"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"rook-ceph-operator"}},"strategy":{"type":"Recreate"},"template":{"metadata":{"labels":{"app":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3"}},"spec":{"containers":[{"args":["ceph","operator"],"env":[{"name":"ROOK_CURRENT_NAMESPACE_ONLY","value":"false"},{"name":"ROOK_HOSTPATH_REQUIRES_PRIVILEGED","value":"false"},{"name":"ROOK_ENABLE_SELINUX_RELABELING","value":"true"},{"name":"ROOK_DISABLE_DEVICE_HOTPLUG","value":"false"},{"name":"ROOK_ENABLE_DISCOVERY_DAEMON","value":"false"},{"name":"ROOK_DISABLE_ADMISSION_CONTROLLER","value":"false"},{"name":"NODE_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"rook/ceph:v1.10.3","imagePullPolicy":"IfNotPresent","name":"rook-ceph-operator","ports":[{"containerPort":9443,"name":"https-webhook","protocol":"TCP"}],"resources":{"limits":{"cpu":"500m","memory":"512Mi"},"requests":{"cpu":"100m","memory":"128Mi"}},"securityContext":{"runAsGroup":2016,"runAsNonRoot":true,"runAsUser":2016},"volumeMounts":[{"mountPath":"/var/lib/rook","name":"rook-config"},{"mountPath":"/etc/ceph","name":"default-config-dir"},{"mountPath":"/etc/webhook","name":"webhook-cert"}]}],"serviceAccountName":"rook-ceph-system","volumes":[{"emptyDir":{},"name":"rook-config"},{"emptyDir":{},"name":"default-config-dir"},{"emptyDir":{},"name":"webhook-cert"}]}}}}
",
      },
      "name": "rook-ceph-operator",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/apps_v1-deployment-rook-ceph-rook-ceph-operator.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app": "rook-ceph-operator",
            "helm.sh/chart": "rook-ceph-v1.10.3",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "ceph",
                "operator",
              ],
              "env": [
                {
                  "name": "ROOK_CURRENT_NAMESPACE_ONLY",
                  "value": "false",
                },
                {
                  "name": "ROOK_HOSTPATH_REQUIRES_PRIVILEGED",
                  "value": "false",
                },
                {
                  "name": "ROOK_ENABLE_SELINUX_RELABELING",
                  "value": "true",
                },
                {
                  "name": "ROOK_DISABLE_DEVICE_HOTPLUG",
                  "value": "false",
                },
                {
                  "name": "ROOK_ENABLE_DISCOVERY_DAEMON",
                  "value": "false",
                },
                {
                  "name": "ROOK_DISABLE_ADMISSION_CONTROLLER",
                  "value": "false",
                },
                {
                  "name": "NODE_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "rook/ceph:v1.10.3",
              "imagePullPolicy": "IfNotPresent",
              "name": "rook-ceph-operator",
              "ports": [
                {
                  "containerPort": 9443,
                  "name": "https-webhook",
                  "protocol": "TCP",
                },
              ],
              "resources": {
                "limits": {
                  "cpu": "500m",
                  "memory": "512Mi",
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "128Mi",
                },
              },
              "securityContext": {
                "runAsGroup": 2016,
                "runAsNonRoot": true,
                "runAsUser": 2016,
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/lib/rook",
                  "name": "rook-config",
                },
                {
                  "mountPath": "/etc/ceph",
                  "name": "default-config-dir",
                },
                {
                  "mountPath": "/etc/webhook",
                  "name": "webhook-cert",
                },
              ],
            },
          ],
          "serviceAccountName": "rook-ceph-system",
          "volumes": [
            {
              "emptyDir": {},
              "name": "rook-config",
            },
            {
              "emptyDir": {},
              "name": "default-config-dir",
            },
            {
              "emptyDir": {},
              "name": "webhook-cert",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rbd-csi-provisioner-role-cfg","namespace":"rook-ceph"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"rbd-external-provisioner-cfg"},"subjects":[{"kind":"ServiceAccount","name":"rook-csi-rbd-provisioner-sa","namespace":"rook-ceph"}]}
",
      },
      "name": "rbd-csi-provisioner-role-cfg",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-rook-ceph-rbd-csi-provisioner-role-cfg.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"rook-ceph-osd","namespace":"rook-ceph"}}
",
      },
      "name": "rook-ceph-osd",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/v1-serviceaccount-rook-ceph-rook-ceph-osd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "storage.k8s.io/v1",
    "kind": "StorageClass",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"allowVolumeExpansion":true,"apiVersion":"storage.k8s.io/v1","kind":"StorageClass","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"replicapool"},"parameters":{"clusterID":"rook-ceph","csi.storage.k8s.io/controller-expand-secret-name":"rook-csi-rbd-provisioner","csi.storage.k8s.io/controller-expand-secret-namespace":"rook-ceph","csi.storage.k8s.io/fstype":"ext4","csi.storage.k8s.io/node-stage-secret-name":"rook-csi-rbd-node","csi.storage.k8s.io/node-stage-secret-namespace":"rook-ceph","csi.storage.k8s.io/provisioner-secret-name":"rook-csi-rbd-provisioner","csi.storage.k8s.io/provisioner-secret-namespace":"rook-ceph","imageFeatures":"layering","imageFormat":"2","pool":"replicapool"},"provisioner":"rook-ceph.rbd.csi.ceph.com","reclaimPolicy":"Retain"}
",
      },
      "name": "replicapool",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/storage.k8s.io_v1-storageclass-default-replicapool.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "ceph.rook.io/v1",
    "kind": "CephObjectStore",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"ceph.rook.io/v1","kind":"CephObjectStore","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"ceph-objectstore","namespace":"rook-ceph"},"spec":{"dataPool":{"erasureCoded":{"codingChunks":1,"dataChunks":2},"failureDomain":"host"},"gateway":{"instances":1,"port":80,"priorityClassName":"system-cluster-critical","resources":{"limits":{"cpu":"2000m","memory":"2Gi"},"requests":{"cpu":"1000m","memory":"1Gi"}}},"healthCheck":{"bucket":{"interval":"60s"}},"metadataPool":{"failureDomain":"host","replicated":{"size":3}},"preservePoolsOnDelete":true}}
",
      },
      "name": "ceph-objectstore",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/ceph.rook.io_v1-cephobjectstore-rook-ceph-ceph-objectstore.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-rgw","namespace":"rook-ceph"},"rules":[{"apiGroups":[""],"resources":["configmaps"],"verbs":["get"]}]}
",
      },
      "name": "rook-ceph-rgw",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-role-rook-ceph-rook-ceph-rgw.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-cmd-reporter","namespace":"rook-ceph"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"rook-ceph-cmd-reporter"},"subjects":[{"kind":"ServiceAccount","name":"rook-ceph-cmd-reporter","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-cmd-reporter",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-rook-ceph-rook-ceph-cmd-reporter.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"rook-ceph-object-bucket"},"rules":[{"apiGroups":[""],"resources":["secrets","configmaps"],"verbs":["get","create","update","delete"]},{"apiGroups":["storage.k8s.io"],"resources":["storageclasses"],"verbs":["get"]},{"apiGroups":["objectbucket.io"],"resources":["objectbucketclaims"],"verbs":["list","watch","get","update"]},{"apiGroups":["objectbucket.io"],"resources":["objectbuckets"],"verbs":["list","watch","get","create","update","delete"]},{"apiGroups":["objectbucket.io"],"resources":["objectbucketclaims/status","objectbuckets/status"],"verbs":["update"]},{"apiGroups":["objectbucket.io"],"resources":["objectbucketclaims/finalizers","objectbuckets/finalizers"],"verbs":["update"]}]}
",
      },
      "name": "rook-ceph-object-bucket",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-rook-ceph-object-bucket.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"rook-ceph-system"},"rules":[{"apiGroups":[""],"resources":["pods","pods/log"],"verbs":["get","list"]},{"apiGroups":[""],"resources":["pods/exec"],"verbs":["create"]},{"apiGroups":["admissionregistration.k8s.io"],"resources":["validatingwebhookconfigurations"],"verbs":["create","get","delete","update"]}]}
",
      },
      "name": "rook-ceph-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-rook-ceph-system.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-mgr-cluster"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"rook-ceph-mgr-cluster"},"subjects":[{"kind":"ServiceAccount","name":"rook-ceph-mgr","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-mgr-cluster",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-rook-ceph-mgr-cluster.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-osd","namespace":"rook-ceph"},"rules":[{"apiGroups":[""],"resources":["secrets"],"verbs":["get"]},{"apiGroups":[""],"resources":["configmaps"],"verbs":["get","list","watch","create","update","delete"]},{"apiGroups":["ceph.rook.io"],"resources":["cephclusters","cephclusters/finalizers"],"verbs":["get","list","create","update","delete"]}]}
",
      },
      "name": "rook-ceph-osd",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-role-rook-ceph-rook-ceph-osd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-csi-cephfs-plugin-sa","namespace":"rook-ceph"}}
",
      },
      "name": "rook-csi-cephfs-plugin-sa",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/v1-serviceaccount-rook-ceph-rook-csi-cephfs-plugin-sa.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rbd-external-provisioner-cfg","namespace":"rook-ceph"},"rules":[{"apiGroups":["coordination.k8s.io"],"resources":["leases"],"verbs":["get","watch","list","delete","update","create"]}]}
",
      },
      "name": "rbd-external-provisioner-cfg",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-role-rook-ceph-rbd-external-provisioner-cfg.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-rgw-psp","namespace":"rook-ceph"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"psp:rook"},"subjects":[{"kind":"ServiceAccount","name":"rook-ceph-rgw","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-rgw-psp",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-rook-ceph-rook-ceph-rgw-psp.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-purge-osd","namespace":"rook-ceph"}}
",
      },
      "name": "rook-ceph-purge-osd",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/v1-serviceaccount-rook-ceph-rook-ceph-purge-osd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "storage.k8s.io/v1",
    "kind": "StorageClass",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"allowVolumeExpansion":true,"apiVersion":"storage.k8s.io/v1","kind":"StorageClass","metadata":{"annotations":{"storageclass.kubernetes.io/is-default-class":"false"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"ceph-filesystem"},"parameters":{"clusterID":"rook-ceph","csi.storage.k8s.io/controller-expand-secret-name":"rook-csi-cephfs-provisioner","csi.storage.k8s.io/controller-expand-secret-namespace":"rook-ceph","csi.storage.k8s.io/fstype":"ext4","csi.storage.k8s.io/node-stage-secret-name":"rook-csi-cephfs-node","csi.storage.k8s.io/node-stage-secret-namespace":"rook-ceph","csi.storage.k8s.io/provisioner-secret-name":"rook-csi-cephfs-provisioner","csi.storage.k8s.io/provisioner-secret-namespace":"rook-ceph","fsName":"ceph-filesystem","pool":"ceph-filesystem-data0"},"provisioner":"rook-ceph.cephfs.csi.ceph.com","reclaimPolicy":"Delete"}
",
        "storageclass.kubernetes.io/is-default-class": "false",
      },
      "name": "ceph-filesystem",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/storage.k8s.io_v1-storageclass-default-ceph-filesystem.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-purge-osd-psp","namespace":"rook-ceph"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"psp:rook"},"subjects":[{"kind":"ServiceAccount","name":"rook-ceph-purge-osd","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-purge-osd-psp",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-rook-ceph-rook-ceph-purge-osd-psp.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-mgr-system","namespace":"rook-ceph"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"rook-ceph-mgr-system"},"subjects":[{"kind":"ServiceAccount","name":"rook-ceph-mgr","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-mgr-system",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-rook-ceph-rook-ceph-mgr-system.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-object-bucket"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"rook-ceph-object-bucket"},"subjects":[{"kind":"ServiceAccount","name":"rook-ceph-system","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-object-bucket",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-rook-ceph-object-bucket.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "ceph.rook.io/v1",
    "kind": "CephFilesystem",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"ceph.rook.io/v1","kind":"CephFilesystem","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"ceph-filesystem","namespace":"rook-ceph"},"spec":{"dataPools":[{"failureDomain":"host","name":"data0","replicated":{"size":3}}],"metadataPool":{"replicated":{"size":3}},"metadataServer":{"activeCount":1,"activeStandby":true,"priorityClassName":"system-cluster-critical","resources":{"limits":{"cpu":"2000m","memory":"4Gi"},"requests":{"cpu":"1000m","memory":"4Gi"}}}}}
",
      },
      "name": "ceph-filesystem",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/ceph.rook.io_v1-cephfilesystem-rook-ceph-ceph-filesystem.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-cmd-reporter","namespace":"rook-ceph"},"rules":[{"apiGroups":[""],"resources":["pods","configmaps"],"verbs":["get","list","watch","create","update","delete"]}]}
",
      },
      "name": "rook-ceph-cmd-reporter",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-role-rook-ceph-rook-ceph-cmd-reporter.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "policy/v1beta1",
    "kind": "PodSecurityPolicy",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"policy/v1beta1","kind":"PodSecurityPolicy","metadata":{"annotations":{"seccomp.security.alpha.kubernetes.io/allowedProfileNames":"runtime/default","seccomp.security.alpha.kubernetes.io/defaultProfileName":"runtime/default"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"00-rook-privileged"},"spec":{"allowedCapabilities":["SYS_ADMIN","MKNOD"],"fsGroup":{"rule":"RunAsAny"},"hostIPC":true,"hostNetwork":true,"hostPID":true,"hostPorts":[{"max":6790,"min":6789},{"max":3300,"min":3300},{"max":7300,"min":6800},{"max":8443,"min":8443},{"max":9283,"min":9283},{"max":9070,"min":9070}],"privileged":true,"runAsUser":{"rule":"RunAsAny"},"seLinux":{"rule":"RunAsAny"},"supplementalGroups":{"rule":"RunAsAny"},"volumes":["configMap","downwardAPI","emptyDir","persistentVolumeClaim","secret","projected","hostPath"]}}
",
        "seccomp.security.alpha.kubernetes.io/allowedProfileNames": "runtime/default",
        "seccomp.security.alpha.kubernetes.io/defaultProfileName": "runtime/default",
      },
      "name": "00-rook-privileged",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/policy_v1beta1-podsecuritypolicy-default-00-rook-privileged.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"rbd-csi-nodeplugin"},"rules":[{"apiGroups":[""],"resources":["secrets"],"verbs":["get","list"]},{"apiGroups":[""],"resources":["persistentvolumes"],"verbs":["get","list"]},{"apiGroups":["storage.k8s.io"],"resources":["volumeattachments"],"verbs":["get","list"]},{"apiGroups":[""],"resources":["configmaps"],"verbs":["get"]},{"apiGroups":[""],"resources":["serviceaccounts"],"verbs":["get"]},{"apiGroups":[""],"resources":["serviceaccounts/token"],"verbs":["create"]},{"apiGroups":[""],"resources":["nodes"],"verbs":["get"]}]}
",
      },
      "name": "rbd-csi-nodeplugin",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-rbd-csi-nodeplugin.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"rook-ceph-global"},"rules":[{"apiGroups":[""],"resources":["pods","nodes","nodes/proxy","services","secrets","configmaps"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["events","persistentvolumes","persistentvolumeclaims","endpoints"],"verbs":["get","list","watch","patch","create","update","delete"]},{"apiGroups":["storage.k8s.io"],"resources":["storageclasses"],"verbs":["get","list","watch"]},{"apiGroups":["batch"],"resources":["jobs","cronjobs"],"verbs":["get","list","watch","create","update","delete"]},{"apiGroups":["ceph.rook.io"],"resources":["cephclients","cephclusters","cephblockpools","cephfilesystems","cephnfses","cephobjectstores","cephobjectstoreusers","cephobjectrealms","cephobjectzonegroups","cephobjectzones","cephbuckettopics","cephbucketnotifications","cephrbdmirrors","cephfilesystemmirrors","cephfilesystemsubvolumegroups","cephblockpoolradosnamespaces"],"verbs":["get","list","watch","update"]},{"apiGroups":["ceph.rook.io"],"resources":["cephclients/status","cephclusters/status","cephblockpools/status","cephfilesystems/status","cephnfses/status","cephobjectstores/status","cephobjectstoreusers/status","cephobjectrealms/status","cephobjectzonegroups/status","cephobjectzones/status","cephbuckettopics/status","cephbucketnotifications/status","cephrbdmirrors/status","cephfilesystemmirrors/status","cephfilesystemsubvolumegroups/status","cephblockpoolradosnamespaces/status"],"verbs":["update"]},{"apiGroups":["ceph.rook.io"],"resources":["cephclients/finalizers","cephclusters/finalizers","cephblockpools/finalizers","cephfilesystems/finalizers","cephnfses/finalizers","cephobjectstores/finalizers","cephobjectstoreusers/finalizers","cephobjectrealms/finalizers","cephobjectzonegroups/finalizers","cephobjectzones/finalizers","cephbuckettopics/finalizers","cephbucketnotifications/finalizers","cephrbdmirrors/finalizers","cephfilesystemmirrors/finalizers","cephfilesystemsubvolumegroups/finalizers","cephblockpoolradosnamespaces/finalizers"],"verbs":["update"]},{"apiGroups":["policy","apps","extensions"],"resources":["poddisruptionbudgets","deployments","replicasets"],"verbs":["get","list","watch","create","update","delete","deletecollection"]},{"apiGroups":["healthchecking.openshift.io"],"resources":["machinedisruptionbudgets"],"verbs":["get","list","watch","create","update","delete"]},{"apiGroups":["machine.openshift.io"],"resources":["machines"],"verbs":["get","list","watch","create","update","delete"]},{"apiGroups":["storage.k8s.io"],"resources":["csidrivers"],"verbs":["create","delete","get","update"]},{"apiGroups":["k8s.cni.cncf.io"],"resources":["network-attachment-definitions"],"verbs":["get"]}]}
",
      },
      "name": "rook-ceph-global",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-rook-ceph-global.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-csi-rbd-provisioner-sa-psp"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"psp:rook"},"subjects":[{"kind":"ServiceAccount","name":"rook-csi-rbd-provisioner-sa","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-csi-rbd-provisioner-sa-psp",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-rook-csi-rbd-provisioner-sa-psp.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-mgr-psp","namespace":"rook-ceph"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"psp:rook"},"subjects":[{"kind":"ServiceAccount","name":"rook-ceph-mgr","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-ceph-mgr-psp",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-rook-ceph-rook-ceph-mgr-psp.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-csi-cephfs-plugin-sa-psp"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"psp:rook"},"subjects":[{"kind":"ServiceAccount","name":"rook-csi-cephfs-plugin-sa","namespace":"rook-ceph"}]}
",
      },
      "name": "rook-csi-cephfs-plugin-sa-psp",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-rook-csi-cephfs-plugin-sa-psp.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rbd-csi-provisioner-role"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"rbd-external-provisioner-runner"},"subjects":[{"kind":"ServiceAccount","name":"rook-csi-rbd-provisioner-sa","namespace":"rook-ceph"}]}
",
      },
      "name": "rbd-csi-provisioner-role",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-rbd-csi-provisioner-role.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph-mgr","namespace":"rook-ceph"},"rules":[{"apiGroups":[""],"resources":["pods","services","pods/log"],"verbs":["get","list","watch","create","update","delete"]},{"apiGroups":["batch"],"resources":["jobs"],"verbs":["get","list","watch","create","update","delete"]},{"apiGroups":["ceph.rook.io"],"resources":["cephclients","cephclusters","cephblockpools","cephfilesystems","cephnfses","cephobjectstores","cephobjectstoreusers","cephobjectrealms","cephobjectzonegroups","cephobjectzones","cephbuckettopics","cephbucketnotifications","cephrbdmirrors","cephfilesystemmirrors","cephfilesystemsubvolumegroups","cephblockpoolradosnamespaces"],"verbs":["get","list","watch","create","update","delete"]},{"apiGroups":["apps"],"resources":["deployments/scale","deployments"],"verbs":["patch","delete"]},{"apiGroups":[""],"resources":["persistentvolumeclaims"],"verbs":["delete"]}]}
",
      },
      "name": "rook-ceph-mgr",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-role-rook-ceph-rook-ceph-mgr.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"rook-ceph-cluster-mgmt"},"rules":[{"apiGroups":["","apps","extensions"],"resources":["secrets","pods","pods/log","services","configmaps","deployments","daemonsets"],"verbs":["get","list","watch","patch","create","update","delete"]}]}
",
      },
      "name": "rook-ceph-cluster-mgmt",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-rook-ceph-cluster-mgmt.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"cephfs-csi-provisioner-role-cfg","namespace":"rook-ceph"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"cephfs-external-provisioner-cfg"},"subjects":[{"kind":"ServiceAccount","name":"rook-csi-cephfs-provisioner-sa","namespace":"rook-ceph"}]}
",
      },
      "name": "cephfs-csi-provisioner-role-cfg",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-rook-ceph-cephfs-csi-provisioner-role-cfg.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"rook-ceph-mgr-cluster"},"rules":[{"apiGroups":[""],"resources":["configmaps","nodes","nodes/proxy","persistentvolumes"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch","list","get","watch"]},{"apiGroups":["storage.k8s.io"],"resources":["storageclasses"],"verbs":["get","list","watch"]}]}
",
      },
      "name": "rook-ceph-mgr-cluster",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-rook-ceph-mgr-cluster.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"argoproj.io/v1alpha1","kind":"Application","metadata":{"annotations":{"finalizers":["resources-finalizer.argocd.argoproj.io"]},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"react-web","namespace":"argocd"},"spec":{"destination":{"namespace":"applications","server":"https://kubernetes.default.svc"},"project":"default","source":{"directory":{"recurse":true},"path":"generatedManifests/local/services/react-web","repoURL":"https://github.com/Oyelowo/modern-distributed-app-template","targetRevision":"HEAD"},"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}
",
      },
      "name": "react-web",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-services/1-manifest/argoproj.io_v1alpha1-application-argocd-react-web.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-services",
    "spec": {},
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"argoproj.io/v1alpha1","kind":"Application","metadata":{"annotations":{"finalizers":["resources-finalizer.argocd.argoproj.io"]},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"graphql-surrealdb","namespace":"argocd"},"spec":{"destination":{"namespace":"applications","server":"https://kubernetes.default.svc"},"project":"default","source":{"directory":{"recurse":true},"path":"generatedManifests/local/services/graphql-surrealdb","repoURL":"https://github.com/Oyelowo/modern-distributed-app-template","targetRevision":"HEAD"},"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}
",
      },
      "name": "graphql-surrealdb",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-services/1-manifest/argoproj.io_v1alpha1-application-argocd-graphql-surrealdb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-services",
    "spec": {},
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"argoproj.io/v1alpha1","kind":"Application","metadata":{"annotations":{"finalizers":["resources-finalizer.argocd.argoproj.io"]},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"surrealdb","namespace":"argocd"},"spec":{"destination":{"namespace":"applications","server":"https://kubernetes.default.svc"},"project":"default","source":{"directory":{"recurse":true},"path":"generatedManifests/local/services/surrealdb","repoURL":"https://github.com/Oyelowo/modern-distributed-app-template","targetRevision":"HEAD"},"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}
",
      },
      "name": "surrealdb",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-services/1-manifest/argoproj.io_v1alpha1-application-argocd-surrealdb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-services",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"rook-ceph","namespace":"rook-ceph"}}
",
      },
      "name": "rook-ceph",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-rook-ceph-rook-ceph.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"tikv-admin","namespace":"tikv-admin"}}
",
      },
      "name": "tikv-admin",
      "namespace": "tikv-admin",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-tikv-admin-tikv-admin.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"fluvio-sys","namespace":"fluvio-sys"}}
",
      },
      "name": "fluvio-sys",
      "namespace": "fluvio-sys",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-fluvio-sys-fluvio-sys.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"applications","namespace":"applications"}}
",
      },
      "name": "applications",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-applications-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"linkerd-viz","namespace":"linkerd-viz"}}
",
      },
      "name": "linkerd-viz",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-linkerd-viz-linkerd-viz.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"argocd","namespace":"argocd"}}
",
      },
      "name": "argocd",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-argocd-argocd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"seaweedfs","namespace":"seaweedfs"}}
",
      },
      "name": "seaweedfs",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-seaweedfs-seaweedfs.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"metalb","namespace":"metalb"}}
",
      },
      "name": "metalb",
      "namespace": "metalb",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-metalb-metalb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"default","namespace":"default"}}
",
      },
      "name": "default",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-default-default.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":"disabled"},"name":"linkerd","namespace":"linkerd"}}
",
      },
      "name": "linkerd",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-linkerd-linkerd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"kube-system","namespace":"kube-system"}}
",
      },
      "name": "kube-system",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-kube-system-kube-system.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"cert-manager","namespace":"cert-manager"}}
",
      },
      "name": "cert-manager",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-cert-manager-cert-manager.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "linkerd.io/created-by": "linkerd/helm %!s(<nil>)",
      },
      "name": "serverauthorizations.policy.linkerd.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-serverauthorizations.policy.linkerd.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "linkerd.io/created-by": "linkerd/helm %!s(<nil>)",
      },
      "name": "meshtlsauthentications.policy.linkerd.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-meshtlsauthentications.policy.linkerd.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "linkerd.io/created-by": "linkerd/helm %!s(<nil>)",
      },
      "name": "httproutes.policy.linkerd.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-httproutes.policy.linkerd.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "linkerd.io/created-by": "linkerd/helm %!s(<nil>)",
      },
      "name": "authorizationpolicies.policy.linkerd.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-authorizationpolicies.policy.linkerd.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "linkerd.io/created-by": "linkerd/helm %!s(<nil>)",
      },
      "name": "servers.policy.linkerd.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-servers.policy.linkerd.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "linkerd.io/created-by": "linkerd/helm %!s(<nil>)",
      },
      "name": "networkauthentications.policy.linkerd.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-networkauthentications.policy.linkerd.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "linkerd.io/created-by": "linkerd/helm %!s(<nil>)",
      },
      "name": "serviceprofiles.linkerd.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-serviceprofiles.linkerd.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"identity","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-identity","namespace":"linkerd"},"spec":{"ports":[{"name":"grpc","port":8080,"targetPort":8080}],"selector":{"linkerd.io/control-plane-component":"identity"},"type":"ClusterIP"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-identity",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-policy","namespace":"linkerd"},"spec":{"clusterIP":"None","ports":[{"name":"grpc","port":8090,"targetPort":8090}],"selector":{"linkerd.io/control-plane-component":"destination"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-policy",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-policy.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-dst-headless","namespace":"linkerd"},"spec":{"clusterIP":"None","ports":[{"name":"grpc","port":8086,"targetPort":8086}],"selector":{"linkerd.io/control-plane-component":"destination"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-dst-headless",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-dst-headless.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"proxy-injector","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1","linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-proxy-injector","namespace":"linkerd"},"spec":{"replicas":1,"selector":{"matchLabels":{"linkerd.io/control-plane-component":"proxy-injector"}},"strategy":{"rollingUpdate":{"maxSurge":"25%","maxUnavailable":"25%"}},"template":{"metadata":{"annotations":{"cluster-autoscaler.kubernetes.io/safe-to-evict":"true","config.linkerd.io/default-inbound-policy":"all-unauthenticated","config.linkerd.io/opaque-ports":"8443","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/helm-release-version":"1","linkerd.io/proxy-version":"stable-2.12.1","linkerd.io/trust-root-sha256":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"labels":{"linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd","linkerd.io/proxy-deployment":"linkerd-proxy-injector","linkerd.io/workload-ns":"linkerd"}},"spec":{"containers":[{"env":[{"name":"_pod_name","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"_pod_ns","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"_pod_nodeName","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"LINKERD2_PROXY_LOG","value":"warn,linkerd=info"},{"name":"LINKERD2_PROXY_LOG_FORMAT","value":"plain"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_ADDR","value":"linkerd-dst-headless.linkerd.svc.cluster.local.:8086"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_POLICY_SVC_ADDR","value":"linkerd-policy.linkerd.svc.cluster.local.:8090"},{"name":"LINKERD2_PROXY_POLICY_WORKLOAD","value":"$(_pod_ns):$(_pod_name)"},{"name":"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY","value":"all-unauthenticated"},{"name":"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT","value":"100ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT","value":"1000ms"},{"name":"LINKERD2_PROXY_CONTROL_LISTEN_ADDR","value":"0.0.0.0:4190"},{"name":"LINKERD2_PROXY_ADMIN_LISTEN_ADDR","value":"0.0.0.0:4191"},{"name":"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR","value":"127.0.0.1:4140"},{"name":"LINKERD2_PROXY_INBOUND_LISTEN_ADDR","value":"0.0.0.0:4143"},{"name":"LINKERD2_PROXY_INBOUND_IPS","valueFrom":{"fieldRef":{"fieldPath":"status.podIPs"}}},{"name":"LINKERD2_PROXY_INBOUND_PORTS","value":"8443,9995"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES","value":"svc.cluster.local."},{"name":"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION","value":"25,587,3306,4444,5432,6379,9300,11211"},{"name":"LINKERD2_PROXY_DESTINATION_CONTEXT","value":"{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}\\n"},{"name":"_pod_sa","valueFrom":{"fieldRef":{"fieldPath":"spec.serviceAccountName"}}},{"name":"_l5d_ns","value":"linkerd"},{"name":"_l5d_trustdomain","value":"cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_DIR","value":"/var/run/linkerd/identity/end-entity"},{"name":"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS","valueFrom":{"configMapKeyRef":{"key":"ca-bundle.crt","name":"linkerd-identity-trust-roots"}}},{"name":"LINKERD2_PROXY_IDENTITY_TOKEN_FILE","value":"/var/run/secrets/tokens/linkerd-identity-token"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_ADDR","value":"linkerd-identity-headless.linkerd.svc.cluster.local.:8080"},{"name":"LINKERD2_PROXY_IDENTITY_LOCAL_NAME","value":"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_NAME","value":"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_POLICY_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"}],"image":"cr.l5d.io/linkerd/proxy:stable-2.12.1","imagePullPolicy":"IfNotPresent","lifecycle":{"postStart":{"exec":{"command":["/usr/lib/linkerd/linkerd-await","--timeout=2m"]}}},"livenessProbe":{"httpGet":{"path":"/live","port":4191},"initialDelaySeconds":10},"name":"linkerd-proxy","ports":[{"containerPort":4143,"name":"linkerd-proxy"},{"containerPort":4191,"name":"linkerd-admin"}],"readinessProbe":{"httpGet":{"path":"/ready","port":4191},"initialDelaySeconds":2},"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsUser":2102},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/var/run/linkerd/identity/end-entity","name":"linkerd-identity-end-entity"},{"mountPath":"/var/run/secrets/tokens","name":"linkerd-identity-token"}]},{"args":["proxy-injector","-log-level=info","-log-format=plain","-linkerd-namespace=linkerd","-enable-pprof=false"],"image":"cr.l5d.io/linkerd/controller:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9995},"initialDelaySeconds":10},"name":"proxy-injector","ports":[{"containerPort":8443,"name":"proxy-injector"},{"containerPort":9995,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9995}},"securityContext":{"allowPrivilegeEscalation":false,"runAsUser":2103},"volumeMounts":[{"mountPath":"/var/run/linkerd/config","name":"config"},{"mountPath":"/var/run/linkerd/identity/trust-roots","name":"trust-roots"},{"mountPath":"/var/run/linkerd/tls","name":"tls","readOnly":true}]}],"initContainers":[{"args":["--incoming-proxy-port","4143","--outgoing-proxy-port","4140","--proxy-uid","2102","--inbound-ports-to-ignore","4190,4191,4567,4568","--outbound-ports-to-ignore","4567,4568"],"image":"cr.l5d.io/linkerd/proxy-init:v2.0.0","imagePullPolicy":"IfNotPresent","name":"linkerd-init","resources":{"limits":{"cpu":"100m","memory":"20Mi"},"requests":{"cpu":"100m","memory":"20Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"add":["NET_ADMIN","NET_RAW"]},"privileged":false,"readOnlyRootFilesystem":true,"runAsNonRoot":true,"runAsUser":65534},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/run","name":"linkerd-proxy-init-xtables-lock"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"linkerd-proxy-injector","volumes":[{"configMap":{"name":"linkerd-config"},"name":"config"},{"configMap":{"name":"linkerd-identity-trust-roots"},"name":"trust-roots"},{"name":"tls","secret":{"secretName":"linkerd-proxy-injector-k8s-tls"}},{"emptyDir":{},"name":"linkerd-proxy-init-xtables-lock"},{"name":"linkerd-identity-token","projected":{"sources":[{"serviceAccountToken":{"audience":"identity.l5d.io","expirationSeconds":86400,"path":"linkerd-identity-token"}}]}},{"emptyDir":{"medium":"Memory"},"name":"linkerd-identity-end-entity"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-proxy-injector",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "true",
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "config.linkerd.io/opaque-ports": "8443",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/helm-release-version": "1",
            "linkerd.io/proxy-version": "stable-2.12.1",
            "linkerd.io/trust-root-sha256": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
          },
          "labels": {
            "linkerd.io/control-plane-component": "proxy-injector",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-proxy-injector",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "_pod_name",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                {
                  "name": "_pod_ns",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "_pod_nodeName",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "linkerd-dst-headless.linkerd.svc.cluster.local.:8086",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "linkerd-policy.linkerd.svc.cluster.local.:8090",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8443,9995",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
",
                },
                {
                  "name": "_pod_sa",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/tokens/linkerd-identity-token",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "linkerd-identity-headless.linkerd.svc.cluster.local.:8080",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "/usr/lib/linkerd/linkerd-await",
                      "--timeout=2m",
                    ],
                  },
                },
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": [
                {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
                {
                  "mountPath": "/var/run/secrets/tokens",
                  "name": "linkerd-identity-token",
                },
              ],
            },
            {
              "args": [
                "proxy-injector",
                "-log-level=info",
                "-log-format=plain",
                "-linkerd-namespace=linkerd",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9995,
                },
                "initialDelaySeconds": 10,
              },
              "name": "proxy-injector",
              "ports": [
                {
                  "containerPort": 8443,
                  "name": "proxy-injector",
                },
                {
                  "containerPort": 9995,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9995,
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 2103,
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/config",
                  "name": "config",
                },
                {
                  "mountPath": "/var/run/linkerd/identity/trust-roots",
                  "name": "trust-roots",
                },
                {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "4567,4568",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v2.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "20Mi",
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "20Mi",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "add": [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true,
                "runAsUser": 65534,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": [
                {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-proxy-injector",
          "volumes": [
            {
              "configMap": {
                "name": "linkerd-config",
              },
              "name": "config",
            },
            {
              "configMap": {
                "name": "linkerd-identity-trust-roots",
              },
              "name": "trust-roots",
            },
            {
              "name": "tls",
              "secret": {
                "secretName": "linkerd-proxy-injector-k8s-tls",
              },
            },
            {
              "emptyDir": {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            {
              "name": "linkerd-identity-token",
              "projected": {
                "sources": [
                  {
                    "serviceAccountToken": {
                      "audience": "identity.l5d.io",
                      "expirationSeconds": 86400,
                      "path": "linkerd-identity-token",
                    },
                  },
                ],
              },
            },
            {
              "emptyDir": {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"admissionregistration.k8s.io/v1","kind":"ValidatingWebhookConfiguration","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-policy-validator-webhook-config"},"webhooks":[{"admissionReviewVersions":["v1","v1beta1"],"clientConfig":{"caBundle":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRYnhKWXU4Z0xHV1l2TW8xRFloRFZsakFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpJeE1ERXlNRFkxTmpFeVdoY05Nak14TURFeU1EWTFOakV5V2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM1MXRDUHpXZHVKVHBSWFBiZklpSlFqZlQ2Z1FRMVJ4di9uV1J0YThuagpFbkNGTFl1YWtURTJLZEFlUndEenBRTldBdVBiTGlvSVA5RytRRHVpakRndjlKRlJNMVhhSDQwbytqenNFZ2FICm8vbi9LeStKb0hWbGtEcndoWDNRazlIOEIyNU1BT1dBNXNVaTdncEsxR2JzSmZOMzd5LzBlbENCNjY2U01WSncKMXlmSlVWbGxKVFg5RDVPR3VlaDdOcjVRVkVFbm9hTG5tOHlHMjZwQ3p5VkFmMnh3WGFUUTlWY3Q5RERRUEpXeQoycjl5ejV1VXk5WWV6eW9UNU1aOFVXNEZNeWo2cWNlSEtTc3gvM1BDZjc4UXpwR0xNRjJZM3grV0ZJeWpVZ2FkCmR2YmFxLzNidG5DNDdCcWx2RThPc3hvTG4vbU5ldnNSNjlzZWpRNCttUk1YQWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFWjdSay9haUp6aGJLem5Gb3pudEhmK2xmaVcKbU9VSmorV0QxY2JqMlhqdHZBcksvUjNYL1lYTTVCMWdNRDFJQjMrL2dsb1BEa1NqM0MrVWlDazh4WGh6b2VpdwpiSHhNdEdWVXVpQVpHSTdpc2NxOFZJaFQ3QjFWTFB4eUtSYzYvUytnMTlkRURWdDJRMGFvS012d2RkRDE4V3pICkdhWDFJUmNZUVgwYW55RXZpRzBhaEZRc1JvRytkVmZESzVDRVdkUzhXT3lET1ErNFhWOWR5d1h4ckpISDdXQlEKV09SSzVKV2pyUWg1bEdXaUh1NHQvcEFsalJKZWJ5NDU0T3l2dENWcTVkSElIOVl1QmRFc0d5cmROL0Y0VTBGMgpIM0NMZ3dTZlh2NXBUazdaUHZtSXdySHd0WHkxbE1ucHh6WVF3UmI5cTQweTZOUlNvZENjbnVXaVNkUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==","service":{"name":"linkerd-policy-validator","namespace":"linkerd","path":"/"}},"failurePolicy":"Ignore","name":"linkerd-policy-validator.linkerd.io","namespaceSelector":{"matchExpressions":[{"key":"config.linkerd.io/admission-webhooks","operator":"NotIn","values":["disabled"]}]},"rules":[{"apiGroups":["policy.linkerd.io"],"apiVersions":["v1alpha1","v1beta1"],"operations":["CREATE","UPDATE"],"resources":["authorizationpolicies","httproutes","networkauthentications","meshtlsauthentications","serverauthorizations","servers"]}],"sideEffects":"None"}]}
",
      },
      "name": "linkerd-policy-validator-webhook-config",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/admissionregistration.k8s.io_v1-validatingwebhookconfiguration-default-linkerd-policy-validator-webhook-config.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-linkerd-destination"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"linkerd-linkerd-destination"},"subjects":[{"kind":"ServiceAccount","name":"linkerd-destination","namespace":"linkerd"}]}
",
      },
      "name": "linkerd-linkerd-destination",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-destination.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Certificate",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"linkerd-identity-issuer","namespace":"linkerd"},"spec":{"commonName":"identity.linkerd.cluster.local","dnsNames":["identity.linkerd.cluster.local"],"duration":"48h","isCA":true,"issuerRef":{"kind":"ClusterIssuer","name":"linkerd-trust-anchor"},"privateKey":{"algorithm":"ECDSA"},"renewBefore":"25h","secretName":"linkerd-identity-issuer","usages":["cert sign","crl sign","server auth","client auth"]}}
",
      },
      "name": "linkerd-identity-issuer",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/cert-manager.io_v1-certificate-linkerd-linkerd-identity-issuer.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-policy-validator","namespace":"linkerd"},"spec":{"ports":[{"name":"policy-https","port":443,"targetPort":"policy-https"}],"selector":{"linkerd.io/control-plane-component":"destination"},"type":"ClusterIP"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-policy-validator",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-policy-validator.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-linkerd-proxy-injector"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"linkerd-linkerd-proxy-injector"},"subjects":[{"apiGroup":"","kind":"ServiceAccount","name":"linkerd-proxy-injector","namespace":"linkerd"}]}
",
      },
      "name": "linkerd-linkerd-proxy-injector",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"identity","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-linkerd-identity"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"linkerd-linkerd-identity"},"subjects":[{"kind":"ServiceAccount","name":"linkerd-identity","namespace":"linkerd"}]}
",
      },
      "name": "linkerd-linkerd-identity",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "MutatingWebhookConfiguration",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"admissionregistration.k8s.io/v1","kind":"MutatingWebhookConfiguration","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-proxy-injector-webhook-config"},"webhooks":[{"admissionReviewVersions":["v1","v1beta1"],"clientConfig":{"caBundle":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVakNDQWpxZ0F3SUJBZ0lRVVc0ZUcybUJzV2ErS2tFSFFyajhCREFOQmdrcWhraUc5dzBCQVFzRkFEQXQKTVNzd0tRWURWUVFERXlKc2FXNXJaWEprTFhCeWIzaDVMV2x1YW1WamRHOXlMbXhwYm10bGNtUXVjM1pqTUI0WApEVEl5TVRBeE1qQTJOVFl4TWxvWERUSXpNVEF4TWpBMk5UWXhNbG93TFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5ClpDMXdjbTk0ZVMxcGJtcGxZM1J2Y2k1c2FXNXJaWEprTG5OMll6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFNbEN5UUhUSVp1MWRUbnhZU1FpN3QwTWN2OTkrVEUydzFsMXBaUXBTV001U3FvaApaaS8xc0FpYTkrZ213cEc2c3BXNjFQeGwybE1TN0lRSHNqVnR2T2xKc2t5MXU1OU85bXdjLzdvWEYwVUtLRmFXClJNcWpwNmM1S3krRitkRlJlNUpnaW9kZ0F3QnB2dko1QzI1SldaZGVuMG05blhIZm5tYVlvYXlDVDdNcnVMWW4KVGt6Vm8rZWxHTWI0dVNMeGpuNnBUNjQwSUk4cUxqNHphalViOEZtOXR1TVBnT1hmd1NuUXo0a2JqOVI5QkxnTQpFZDNBaG5xaldnTElsdVA4QjMzUVFRUnBsN1VLM0ZRRk0zK3gzMHJrL0hMc21zK0tXa2pFRTczSHVTWHdLQWlLCmNQalRnUzNsK1lvUmd6N2VZVVFrUnJmUFJKWXdCUTUzNTJ6ZER4OENBd0VBQWFOdU1Hd3dEZ1lEVlIwUEFRSC8KQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RQpBakFBTUMwR0ExVWRFUVFtTUNTQ0lteHBibXRsY21RdGNISnZlSGt0YVc1cVpXTjBiM0l1YkdsdWEyVnlaQzV6CmRtTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSTJoMTNrcUVWR0kwSmw0bEIyVjEvaEZ0WGxrVmtOSVEzdDEKWjV5ajV0U0RyTFhoNCtLbnVpd0NNamg4VldaR2NESHp5ZjZYRUJBbFV5dzdUUWZ0OTY0UjYwRkFLWDdwUDhhRApYVUJCMTdZejB6T2VuM2tMQmVIc0ZoTGprOFA3NURmMEFmQUJTc2FkU2NMaWtMaWNOTWZCM1NoeXFjWHFIcGNUClVsNHJYRXl6ZWF1YTVTMFVEV2VMNHRkTkhWVTdRWDJ0Znp0d1lhcVpVV3hMQ2hiQlhEdW8yRTluWjVRYTlkT3cKMWhhQzFYSUhXcXVnTmtXRHJhYkJXTmVqZFY0Q3hQZ1lKTTRrWC8vRXFFRXAxTzFZNGt6bDBlcWV3anAwT1dGTAo3cDFEcVNZL05NeUVZZUhqbFpGQndnd2hYVzkxUWpiYVV0VUtPUDJUcFd2YzVRNnlEeGc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=","service":{"name":"linkerd-proxy-injector","namespace":"linkerd","path":"/"}},"failurePolicy":"Ignore","name":"linkerd-proxy-injector.linkerd.io","namespaceSelector":{"matchExpressions":[{"key":"config.linkerd.io/admission-webhooks","operator":"NotIn","values":["disabled"]},{"key":"kubernetes.io/metadata.name","operator":"NotIn","values":["kube-system","cert-manager"]}]},"objectSelector":{"matchExpressions":[{"key":"linkerd.io/control-plane-component","operator":"DoesNotExist"},{"key":"linkerd.io/cni-resource","operator":"DoesNotExist"}]},"rules":[{"apiGroups":[""],"apiVersions":["v1"],"operations":["CREATE"],"resources":["pods","services"]}],"sideEffects":"None"}]}
",
      },
      "name": "linkerd-proxy-injector-webhook-config",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/admissionregistration.k8s.io_v1-mutatingwebhookconfiguration-default-linkerd-proxy-injector-webhook-config.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"identity","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-linkerd-identity"},"rules":[{"apiGroups":["authentication.k8s.io"],"resources":["tokenreviews"],"verbs":["create"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]}]}
",
      },
      "name": "linkerd-linkerd-identity",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-destination","namespace":"linkerd"}}
",
      },
      "name": "linkerd-destination",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-destination.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-heartbeat","namespace":"linkerd"},"rules":[{"apiGroups":[""],"resourceNames":["linkerd-config"],"resources":["configmaps"],"verbs":["get"]}]}
",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-role-linkerd-linkerd-heartbeat.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-sp-validator","namespace":"linkerd"},"spec":{"ports":[{"name":"sp-validator","port":443,"targetPort":"sp-validator"}],"selector":{"linkerd.io/control-plane-component":"destination"},"type":"ClusterIP"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-sp-validator",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-sp-validator.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"admissionregistration.k8s.io/v1","kind":"ValidatingWebhookConfiguration","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-sp-validator-webhook-config"},"webhooks":[{"admissionReviewVersions":["v1","v1beta1"],"clientConfig":{"caBundle":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUxqcXlHVE9oMHZXMHNqNWZ4bCtEckF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl4TURFeU1EWTFOakV5V2hjTk1qTXhNREV5TURZMU5qRXlXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQU5nYnQzeUwzVWlneUFzb0xFVTlINjNZWFZKOEJ3UnNpYlk3SjlBVVpoaXI0WlMwanlHTwpFWDJjb1h5anZ0RzVZWUZEUkVKOEdKWm9mUitOV0hNc2ROSUVuU0dReGdnSUNQSjlBY1pqSGdWU0xxbTJUNzFjCkFVU0tUVWpQV3dNb3loK1c1UGVURS9YMGVtM1ozOFhtbTUxdEc1dmkyZndONGQ4V0gxc1lSV0w3cU9NRktLZUEKVElyV2k4b05GOVlwUjIrS0pwQndlditnU1NBem9BWmltSTY2b0ZpQTJkV0lta1gwNkpndEp3ZHpqa01oWXhYOQpIeU5MOEUwWHF2NDl5dWZUZUppOUxYSkdScC9idHpPTTFPRThxYWZJSFNFcHVJdEh1cDlpUms5aHFjSk5LWkZxCm1VajJzclBnd0hYODBjdnhhblRRa3lWQW4vam9DTDlYT2pjQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFDcnN5QTVISU9lSWFjakdJM1N1MHFGVjNLM0JWQ21YMC83VEpadFExdm0KVmZieXYvbEJrcmlzUmZWd0xkTjduRThidGllQkZvcWhrWGFielQrR3hjZlJNTEs5Wmt0K1pJb294MVZBK0tFZgpreGdRenpJSWpTSE85SVIvSzRGdDVKOS9KNzhDZnBQTlE2U2pDYkFVNVRkblVER1BJR3BZc2N6Z3AyQVZKcGtrCi9KY3orZE8yMUV6NnY0emxkSVk4ejFKMWoyZ1RBam5qZHp6cHdQaVkyNXRsL2hPSVVnT21NdE00clc3SGNQVWQKRFBhNUt4d0xqQ0NocGk3MlRLcEZiYWVFUnltQ1MvRkg4VGZFejBNQ04vcUZqWFp3dEoyUHVOSlpud1FvZ1hZaAorakgrcWVnek1iODMyVjRQSmkyZjRIakp6eWVCNFdwek5QeVdrN0xOOFN1QQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t","service":{"name":"linkerd-sp-validator","namespace":"linkerd","path":"/"}},"failurePolicy":"Ignore","name":"linkerd-sp-validator.linkerd.io","namespaceSelector":{"matchExpressions":[{"key":"config.linkerd.io/admission-webhooks","operator":"NotIn","values":["disabled"]}]},"rules":[{"apiGroups":["linkerd.io"],"apiVersions":["v1alpha1","v1alpha2"],"operations":["CREATE","UPDATE"],"resources":["serviceprofiles"]}],"sideEffects":"None"}]}
",
      },
      "name": "linkerd-sp-validator-webhook-config",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/admissionregistration.k8s.io_v1-validatingwebhookconfiguration-default-linkerd-sp-validator-webhook-config.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-heartbeat","namespace":"linkerd"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"linkerd-heartbeat"},"subjects":[{"kind":"ServiceAccount","name":"linkerd-heartbeat","namespace":"linkerd"}]}
",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-linkerd-linkerd-heartbeat.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"identity","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1","linkerd.io/control-plane-component":"identity","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-identity","namespace":"linkerd"},"spec":{"replicas":1,"selector":{"matchLabels":{"linkerd.io/control-plane-component":"identity","linkerd.io/control-plane-ns":"linkerd","linkerd.io/proxy-deployment":"linkerd-identity"}},"strategy":{"rollingUpdate":{"maxSurge":"25%","maxUnavailable":"25%"}},"template":{"metadata":{"annotations":{"cluster-autoscaler.kubernetes.io/safe-to-evict":"true","config.linkerd.io/default-inbound-policy":"all-unauthenticated","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/proxy-version":"stable-2.12.1","linkerd.io/trust-root-sha256":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"labels":{"linkerd.io/control-plane-component":"identity","linkerd.io/control-plane-ns":"linkerd","linkerd.io/proxy-deployment":"linkerd-identity","linkerd.io/workload-ns":"linkerd"}},"spec":{"containers":[{"args":["identity","-log-level=info","-log-format=plain","-controller-namespace=linkerd","-identity-trust-domain=cluster.local","-identity-issuance-lifetime=24h0m0s","-identity-clock-skew-allowance=20s","-identity-scheme=kubernetes.io/tls","-enable-pprof=false"],"env":[{"name":"LINKERD_DISABLED","value":"linkerd-await cannot block the identity controller"}],"image":"cr.l5d.io/linkerd/controller:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9990},"initialDelaySeconds":10},"name":"identity","ports":[{"containerPort":8080,"name":"grpc"},{"containerPort":9990,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9990}},"securityContext":{"allowPrivilegeEscalation":false,"runAsUser":2103},"volumeMounts":[{"mountPath":"/var/run/linkerd/identity/issuer","name":"identity-issuer"},{"mountPath":"/var/run/linkerd/identity/trust-roots/","name":"trust-roots"}]},{"env":[{"name":"_pod_name","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"_pod_ns","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"_pod_nodeName","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS","value":"8080"},{"name":"LINKERD2_PROXY_LOG","value":"warn,linkerd=info"},{"name":"LINKERD2_PROXY_LOG_FORMAT","value":"plain"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_ADDR","value":"linkerd-dst-headless.linkerd.svc.cluster.local.:8086"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_POLICY_SVC_ADDR","value":"linkerd-policy.linkerd.svc.cluster.local.:8090"},{"name":"LINKERD2_PROXY_POLICY_WORKLOAD","value":"$(_pod_ns):$(_pod_name)"},{"name":"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY","value":"all-unauthenticated"},{"name":"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT","value":"100ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT","value":"1000ms"},{"name":"LINKERD2_PROXY_CONTROL_LISTEN_ADDR","value":"0.0.0.0:4190"},{"name":"LINKERD2_PROXY_ADMIN_LISTEN_ADDR","value":"0.0.0.0:4191"},{"name":"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR","value":"127.0.0.1:4140"},{"name":"LINKERD2_PROXY_INBOUND_LISTEN_ADDR","value":"0.0.0.0:4143"},{"name":"LINKERD2_PROXY_INBOUND_IPS","valueFrom":{"fieldRef":{"fieldPath":"status.podIPs"}}},{"name":"LINKERD2_PROXY_INBOUND_PORTS","value":"8080,9990"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES","value":"svc.cluster.local."},{"name":"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION","value":"25,587,3306,4444,5432,6379,9300,11211"},{"name":"LINKERD2_PROXY_DESTINATION_CONTEXT","value":"{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}\\n"},{"name":"_pod_sa","valueFrom":{"fieldRef":{"fieldPath":"spec.serviceAccountName"}}},{"name":"_l5d_ns","value":"linkerd"},{"name":"_l5d_trustdomain","value":"cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_DIR","value":"/var/run/linkerd/identity/end-entity"},{"name":"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS","valueFrom":{"configMapKeyRef":{"key":"ca-bundle.crt","name":"linkerd-identity-trust-roots"}}},{"name":"LINKERD2_PROXY_IDENTITY_TOKEN_FILE","value":"/var/run/secrets/tokens/linkerd-identity-token"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_ADDR","value":"localhost.:8080"},{"name":"LINKERD2_PROXY_IDENTITY_LOCAL_NAME","value":"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_NAME","value":"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_POLICY_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"}],"image":"cr.l5d.io/linkerd/proxy:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/live","port":4191},"initialDelaySeconds":10},"name":"linkerd-proxy","ports":[{"containerPort":4143,"name":"linkerd-proxy"},{"containerPort":4191,"name":"linkerd-admin"}],"readinessProbe":{"httpGet":{"path":"/ready","port":4191},"initialDelaySeconds":2},"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsUser":2102},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/var/run/linkerd/identity/end-entity","name":"linkerd-identity-end-entity"},{"mountPath":"/var/run/secrets/tokens","name":"linkerd-identity-token"}]}],"initContainers":[{"args":["--incoming-proxy-port","4143","--outgoing-proxy-port","4140","--proxy-uid","2102","--inbound-ports-to-ignore","4190,4191,4567,4568","--outbound-ports-to-ignore","443"],"image":"cr.l5d.io/linkerd/proxy-init:v2.0.0","imagePullPolicy":"IfNotPresent","name":"linkerd-init","resources":{"limits":{"cpu":"100m","memory":"20Mi"},"requests":{"cpu":"100m","memory":"20Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"add":["NET_ADMIN","NET_RAW"]},"privileged":false,"readOnlyRootFilesystem":true,"runAsNonRoot":true,"runAsUser":65534},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/run","name":"linkerd-proxy-init-xtables-lock"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"linkerd-identity","volumes":[{"name":"identity-issuer","secret":{"secretName":"linkerd-identity-issuer"}},{"configMap":{"name":"linkerd-identity-trust-roots"},"name":"trust-roots"},{"emptyDir":{},"name":"linkerd-proxy-init-xtables-lock"},{"name":"linkerd-identity-token","projected":{"sources":[{"serviceAccountToken":{"audience":"identity.l5d.io","expirationSeconds":86400,"path":"linkerd-identity-token"}}]}},{"emptyDir":{"medium":"Memory"},"name":"linkerd-identity-end-entity"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-identity",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "true",
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/proxy-version": "stable-2.12.1",
            "linkerd.io/trust-root-sha256": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
          },
          "labels": {
            "linkerd.io/control-plane-component": "identity",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-identity",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "identity",
                "-log-level=info",
                "-log-format=plain",
                "-controller-namespace=linkerd",
                "-identity-trust-domain=cluster.local",
                "-identity-issuance-lifetime=24h0m0s",
                "-identity-clock-skew-allowance=20s",
                "-identity-scheme=kubernetes.io/tls",
                "-enable-pprof=false",
              ],
              "env": [
                {
                  "name": "LINKERD_DISABLED",
                  "value": "linkerd-await cannot block the identity controller",
                },
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9990,
                },
                "initialDelaySeconds": 10,
              },
              "name": "identity",
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "grpc",
                },
                {
                  "containerPort": 9990,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9990,
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 2103,
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/identity/issuer",
                  "name": "identity-issuer",
                },
                {
                  "mountPath": "/var/run/linkerd/identity/trust-roots/",
                  "name": "trust-roots",
                },
              ],
            },
            {
              "env": [
                {
                  "name": "_pod_name",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                {
                  "name": "_pod_ns",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "_pod_nodeName",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS",
                  "value": "8080",
                },
                {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "linkerd-dst-headless.linkerd.svc.cluster.local.:8086",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "linkerd-policy.linkerd.svc.cluster.local.:8090",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8080,9990",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
",
                },
                {
                  "name": "_pod_sa",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/tokens/linkerd-identity-token",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "localhost.:8080",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": [
                {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
                {
                  "mountPath": "/var/run/secrets/tokens",
                  "name": "linkerd-identity-token",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "443",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v2.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "20Mi",
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "20Mi",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "add": [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true,
                "runAsUser": 65534,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": [
                {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-identity",
          "volumes": [
            {
              "name": "identity-issuer",
              "secret": {
                "secretName": "linkerd-identity-issuer",
              },
            },
            {
              "configMap": {
                "name": "linkerd-identity-trust-roots",
              },
              "name": "trust-roots",
            },
            {
              "emptyDir": {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            {
              "name": "linkerd-identity-token",
              "projected": {
                "sources": [
                  {
                    "serviceAccountToken": {
                      "audience": "identity.l5d.io",
                      "expirationSeconds": 86400,
                      "path": "linkerd-identity-token",
                    },
                  },
                ],
              },
            },
            {
              "emptyDir": {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUxqcXlHVE9oMHZXMHNqNWZ4bCtEckF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl4TURFeU1EWTFOakV5V2hjTk1qTXhNREV5TURZMU5qRXlXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQU5nYnQzeUwzVWlneUFzb0xFVTlINjNZWFZKOEJ3UnNpYlk3SjlBVVpoaXI0WlMwanlHTwpFWDJjb1h5anZ0RzVZWUZEUkVKOEdKWm9mUitOV0hNc2ROSUVuU0dReGdnSUNQSjlBY1pqSGdWU0xxbTJUNzFjCkFVU0tUVWpQV3dNb3loK1c1UGVURS9YMGVtM1ozOFhtbTUxdEc1dmkyZndONGQ4V0gxc1lSV0w3cU9NRktLZUEKVElyV2k4b05GOVlwUjIrS0pwQndlditnU1NBem9BWmltSTY2b0ZpQTJkV0lta1gwNkpndEp3ZHpqa01oWXhYOQpIeU5MOEUwWHF2NDl5dWZUZUppOUxYSkdScC9idHpPTTFPRThxYWZJSFNFcHVJdEh1cDlpUms5aHFjSk5LWkZxCm1VajJzclBnd0hYODBjdnhhblRRa3lWQW4vam9DTDlYT2pjQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFDcnN5QTVISU9lSWFjakdJM1N1MHFGVjNLM0JWQ21YMC83VEpadFExdm0KVmZieXYvbEJrcmlzUmZWd0xkTjduRThidGllQkZvcWhrWGFielQrR3hjZlJNTEs5Wmt0K1pJb294MVZBK0tFZgpreGdRenpJSWpTSE85SVIvSzRGdDVKOS9KNzhDZnBQTlE2U2pDYkFVNVRkblVER1BJR3BZc2N6Z3AyQVZKcGtrCi9KY3orZE8yMUV6NnY0emxkSVk4ejFKMWoyZ1RBam5qZHp6cHdQaVkyNXRsL2hPSVVnT21NdE00clc3SGNQVWQKRFBhNUt4d0xqQ0NocGk3MlRLcEZiYWVFUnltQ1MvRkg4VGZFejBNQ04vcUZqWFp3dEoyUHVOSlpud1FvZ1hZaAorakgrcWVnek1iODMyVjRQSmkyZjRIakp6eWVCNFdwek5QeVdrN0xOOFN1QQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMkJ1M2ZJdmRTS0RJQ3lnc1JUMGZyZGhkVW53SEJHeUp0anNuMEJSbUdLdmhsTFNQCklZNFJmWnloZktPKzBibGhnVU5FUW53WWxtaDlINDFZY3l4MDBnU2RJWkRHQ0FnSThuMEJ4bU1lQlZJdXFiWlAKdlZ3QlJJcE5TTTliQXlqS0g1Yms5NU1UOWZSNmJkbmZ4ZWFiblcwYm0rTFovQTNoM3hZZld4aEZZdnVvNHdVbwpwNEJNaXRhTHlnMFgxaWxIYjRvbWtIQjYvNkJKSURPZ0JtS1lqcnFnV0lEWjFZaWFSZlRvbUMwbkIzT09ReUZqCkZmMGZJMHZ3VFJlcS9qM0s1OU40bUwwdGNrWkduOXUzTTR6VTRUeXBwOGdkSVNtNGkwZTZuMkpHVDJHcHdrMHAKa1dxWlNQYXlzK0RBZGZ6UnkvRnFkTkNUSlVDZitPZ0l2MWM2TndJREFRQUJBb0lCQUIybXIrWkd5blhNbWFYdQpQU1RDM2pYY0dmSFhVcDhveFR4Ym9YckxVYmJRM29Lb3czcTNJMjg0cm0rTGlBTCtqSUpQMkczRzJSakovV0QyCjQ4dnByWjJqUkd2MmtUVkk1UEZnZFgzaTI1dWZTd2UrRy9LL1RPMDZqS0FRMDB2N3JML28xRUdqekhsU3NmbWcKaXpOOEVKM28rb0RJLzErMkIrZTBBVmxlV3liWllDWGx5bFcwb0VqUnE1SUcrZndWaitnbmxiUEJXSjl5N3ZCWApxY1dneFM5WGpRN3MvTTB4NGtWTk1rNWV2ZGlVZWRtdlEvT2d1dXlwUENYMFdLd3hXOHkwaGVYUTQ4Z3htaU1sCnBRMGhVeUhrNmwyV2NYTHhaUXBPTUdHSEpab1dadmFtM2d1SmdkdnZyNE9OMkhmTUFkcmxoZWNaNEswbHM3ZEwKYUJDRjJRRUNnWUVBNkRGV1hrL1VpVjc4NDQwaVZnZWlnN0dkN0FIOVk2TkVrZVQ5bmxNMFdIemI0SnZ4NTRQcwpWcVpsSXV6SThVek42eFFJUjROZUh4NXF2VDhEdEhqbkZWczZEandtQlI0WVhFYXBRd0MyeEZ2QitrN1lXOFEvCi9weitvRmF1RlVCMEtEU0VGRlgxN3FUYml1ZjhEZENhaWE1dzdBN0RCbFVIWjBLajlHUWhLaHNDZ1lFQTdrUXcKbXhqVzNhbjQ5bnRBRFZYVDNHZWQ4T1ZBb2RDa01FNG5tUUlqNjh2UVJtS0pKWUNRNURkRGZBQ0xDVlhwY0t5UAptL0lsYXlPOGdlSGcrL2pCRW9lVVZLaDM2TURrOTJ4VndERFZKV0lzNWZBbEUvL29JZWt1MVlKWEVEbmNLcUpZCmI4KzlLdkVMVjRpTldoMkRRblBYQk44NStCMTZ5cEFIRHdHSXNoVUNnWUVBbjB3Sjl4Wkp1QjBrM25DYlYrNVEKL296Q3pZSG45NDJ4bzI0NDJZQTM3MlZwN0VUUXg0Ym9nK0lRak05cVpMSE9yRExJSTFmcklPcGJUSTZJMmk0QQpTOVNVbGVPS0tnU2xyZGtFa3VWUWZwSjlHRjh6YkhITmZiN3pxY2tPRWFKd2pvekkrTEtvMFJybFMvMHdIY0k1CjQ2OTc1VmVUVVNyUXMzVXl5cDVQYW5VQ2dZQUErVzVwYy9TTSs0RDFJUlBsK2cvZnV0eStlM0dFTitJMEFGM1IKRmwwblBiSWdWNDdRQkhLVFBGYWVUekpDVzRPVTNsL0g5M21Ic3FHMnRrSEJSZ2NrR0VIWEJzbFd2bE14WDlRSgo4U2t0K2ZUTkMrcGE1cFVBYm4rdWg5WHJUeEZEYTE2Sk5vUkRoTERUTHMvRktwRzYxOVp0UXF4dUExRFpPeldNCkxpbHM4UUtCZ1FDMHBMZ2l0eUc1NjdleHZkbFc3RithcWNldGU2RzFsREdjZEE5Q29PVDNYdTBUa1MrUzJpcWwKaWJxRFdaV0c5Q3BFN2VFK2l3cEdWMEx2MzVOS0JwUCtGUGF6Z1lhbFNLblBmdzRNaWUzZ0R4T0RXM2xCcTNxcQo5bEliMmNZU3E0ZDIvVUVPV3U1MXIxdG52QXZKUUwvN3ZJKysxdllyTnhwZ0lWU2dMMUtRR1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUxqcXlHVE9oMHZXMHNqNWZ4bCtEckF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl4TURFeU1EWTFOakV5V2hjTk1qTXhNREV5TURZMU5qRXlXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQU5nYnQzeUwzVWlneUFzb0xFVTlINjNZWFZKOEJ3UnNpYlk3SjlBVVpoaXI0WlMwanlHTwpFWDJjb1h5anZ0RzVZWUZEUkVKOEdKWm9mUitOV0hNc2ROSUVuU0dReGdnSUNQSjlBY1pqSGdWU0xxbTJUNzFjCkFVU0tUVWpQV3dNb3loK1c1UGVURS9YMGVtM1ozOFhtbTUxdEc1dmkyZndONGQ4V0gxc1lSV0w3cU9NRktLZUEKVElyV2k4b05GOVlwUjIrS0pwQndlditnU1NBem9BWmltSTY2b0ZpQTJkV0lta1gwNkpndEp3ZHpqa01oWXhYOQpIeU5MOEUwWHF2NDl5dWZUZUppOUxYSkdScC9idHpPTTFPRThxYWZJSFNFcHVJdEh1cDlpUms5aHFjSk5LWkZxCm1VajJzclBnd0hYODBjdnhhblRRa3lWQW4vam9DTDlYT2pjQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFDcnN5QTVISU9lSWFjakdJM1N1MHFGVjNLM0JWQ21YMC83VEpadFExdm0KVmZieXYvbEJrcmlzUmZWd0xkTjduRThidGllQkZvcWhrWGFielQrR3hjZlJNTEs5Wmt0K1pJb294MVZBK0tFZgpreGdRenpJSWpTSE85SVIvSzRGdDVKOS9KNzhDZnBQTlE2U2pDYkFVNVRkblVER1BJR3BZc2N6Z3AyQVZKcGtrCi9KY3orZE8yMUV6NnY0emxkSVk4ejFKMWoyZ1RBam5qZHp6cHdQaVkyNXRsL2hPSVVnT21NdE00clc3SGNQVWQKRFBhNUt4d0xqQ0NocGk3MlRLcEZiYWVFUnltQ1MvRkg4VGZFejBNQ04vcUZqWFp3dEoyUHVOSlpud1FvZ1hZaAorakgrcWVnek1iODMyVjRQSmkyZjRIakp6eWVCNFdwek5QeVdrN0xOOFN1QQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMkJ1M2ZJdmRTS0RJQ3lnc1JUMGZyZGhkVW53SEJHeUp0anNuMEJSbUdLdmhsTFNQCklZNFJmWnloZktPKzBibGhnVU5FUW53WWxtaDlINDFZY3l4MDBnU2RJWkRHQ0FnSThuMEJ4bU1lQlZJdXFiWlAKdlZ3QlJJcE5TTTliQXlqS0g1Yms5NU1UOWZSNmJkbmZ4ZWFiblcwYm0rTFovQTNoM3hZZld4aEZZdnVvNHdVbwpwNEJNaXRhTHlnMFgxaWxIYjRvbWtIQjYvNkJKSURPZ0JtS1lqcnFnV0lEWjFZaWFSZlRvbUMwbkIzT09ReUZqCkZmMGZJMHZ3VFJlcS9qM0s1OU40bUwwdGNrWkduOXUzTTR6VTRUeXBwOGdkSVNtNGkwZTZuMkpHVDJHcHdrMHAKa1dxWlNQYXlzK0RBZGZ6UnkvRnFkTkNUSlVDZitPZ0l2MWM2TndJREFRQUJBb0lCQUIybXIrWkd5blhNbWFYdQpQU1RDM2pYY0dmSFhVcDhveFR4Ym9YckxVYmJRM29Lb3czcTNJMjg0cm0rTGlBTCtqSUpQMkczRzJSakovV0QyCjQ4dnByWjJqUkd2MmtUVkk1UEZnZFgzaTI1dWZTd2UrRy9LL1RPMDZqS0FRMDB2N3JML28xRUdqekhsU3NmbWcKaXpOOEVKM28rb0RJLzErMkIrZTBBVmxlV3liWllDWGx5bFcwb0VqUnE1SUcrZndWaitnbmxiUEJXSjl5N3ZCWApxY1dneFM5WGpRN3MvTTB4NGtWTk1rNWV2ZGlVZWRtdlEvT2d1dXlwUENYMFdLd3hXOHkwaGVYUTQ4Z3htaU1sCnBRMGhVeUhrNmwyV2NYTHhaUXBPTUdHSEpab1dadmFtM2d1SmdkdnZyNE9OMkhmTUFkcmxoZWNaNEswbHM3ZEwKYUJDRjJRRUNnWUVBNkRGV1hrL1VpVjc4NDQwaVZnZWlnN0dkN0FIOVk2TkVrZVQ5bmxNMFdIemI0SnZ4NTRQcwpWcVpsSXV6SThVek42eFFJUjROZUh4NXF2VDhEdEhqbkZWczZEandtQlI0WVhFYXBRd0MyeEZ2QitrN1lXOFEvCi9weitvRmF1RlVCMEtEU0VGRlgxN3FUYml1ZjhEZENhaWE1dzdBN0RCbFVIWjBLajlHUWhLaHNDZ1lFQTdrUXcKbXhqVzNhbjQ5bnRBRFZYVDNHZWQ4T1ZBb2RDa01FNG5tUUlqNjh2UVJtS0pKWUNRNURkRGZBQ0xDVlhwY0t5UAptL0lsYXlPOGdlSGcrL2pCRW9lVVZLaDM2TURrOTJ4VndERFZKV0lzNWZBbEUvL29JZWt1MVlKWEVEbmNLcUpZCmI4KzlLdkVMVjRpTldoMkRRblBYQk44NStCMTZ5cEFIRHdHSXNoVUNnWUVBbjB3Sjl4Wkp1QjBrM25DYlYrNVEKL296Q3pZSG45NDJ4bzI0NDJZQTM3MlZwN0VUUXg0Ym9nK0lRak05cVpMSE9yRExJSTFmcklPcGJUSTZJMmk0QQpTOVNVbGVPS0tnU2xyZGtFa3VWUWZwSjlHRjh6YkhITmZiN3pxY2tPRWFKd2pvekkrTEtvMFJybFMvMHdIY0k1CjQ2OTc1VmVUVVNyUXMzVXl5cDVQYW5VQ2dZQUErVzVwYy9TTSs0RDFJUlBsK2cvZnV0eStlM0dFTitJMEFGM1IKRmwwblBiSWdWNDdRQkhLVFBGYWVUekpDVzRPVTNsL0g5M21Ic3FHMnRrSEJSZ2NrR0VIWEJzbFd2bE14WDlRSgo4U2t0K2ZUTkMrcGE1cFVBYm4rdWg5WHJUeEZEYTE2Sk5vUkRoTERUTHMvRktwRzYxOVp0UXF4dUExRFpPeldNCkxpbHM4UUtCZ1FDMHBMZ2l0eUc1NjdleHZkbFc3RithcWNldGU2RzFsREdjZEE5Q29PVDNYdTBUa1MrUzJpcWwKaWJxRFdaV0c5Q3BFN2VFK2l3cEdWMEx2MzVOS0JwUCtGUGF6Z1lhbFNLblBmdzRNaWUzZ0R4T0RXM2xCcTNxcQo5bEliMmNZU3E0ZDIvVUVPV3U1MXIxdG52QXZKUUwvN3ZJKysxdllyTnhwZ0lWU2dMMUtRR1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-sp-validator-k8s-tls","namespace":"linkerd"},"type":"kubernetes.io/tls"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-sp-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-sp-validator-k8s-tls.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "type": "kubernetes.io/tls",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"heartbeat","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-heartbeat","namespace":"linkerd"}}
",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-heartbeat.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "config.linkerd.io/opaque-ports": "443",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"config.linkerd.io/opaque-ports":"443","linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-proxy-injector","namespace":"linkerd"},"spec":{"ports":[{"name":"proxy-injector","port":443,"targetPort":"proxy-injector"}],"selector":{"linkerd.io/control-plane-component":"proxy-injector"},"type":"ClusterIP"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-proxy-injector",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"identity","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-identity-headless","namespace":"linkerd"},"spec":{"clusterIP":"None","ports":[{"name":"grpc","port":8080,"targetPort":8080}],"selector":{"linkerd.io/control-plane-component":"identity"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-identity-headless",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-identity-headless.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-linkerd-destination"},"rules":[{"apiGroups":["apps"],"resources":["replicasets"],"verbs":["list","get","watch"]},{"apiGroups":["batch"],"resources":["jobs"],"verbs":["list","get","watch"]},{"apiGroups":[""],"resources":["pods","endpoints","services","nodes","namespaces"],"verbs":["list","get","watch"]},{"apiGroups":["linkerd.io"],"resources":["serviceprofiles"],"verbs":["list","get","watch"]},{"apiGroups":["discovery.k8s.io"],"resources":["endpointslices"],"verbs":["list","get","watch"]}]}
",
      },
      "name": "linkerd-linkerd-destination",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-destination.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "v1",
    "data": {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRYnhKWXU4Z0xHV1l2TW8xRFloRFZsakFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpJeE1ERXlNRFkxTmpFeVdoY05Nak14TURFeU1EWTFOakV5V2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM1MXRDUHpXZHVKVHBSWFBiZklpSlFqZlQ2Z1FRMVJ4di9uV1J0YThuagpFbkNGTFl1YWtURTJLZEFlUndEenBRTldBdVBiTGlvSVA5RytRRHVpakRndjlKRlJNMVhhSDQwbytqenNFZ2FICm8vbi9LeStKb0hWbGtEcndoWDNRazlIOEIyNU1BT1dBNXNVaTdncEsxR2JzSmZOMzd5LzBlbENCNjY2U01WSncKMXlmSlVWbGxKVFg5RDVPR3VlaDdOcjVRVkVFbm9hTG5tOHlHMjZwQ3p5VkFmMnh3WGFUUTlWY3Q5RERRUEpXeQoycjl5ejV1VXk5WWV6eW9UNU1aOFVXNEZNeWo2cWNlSEtTc3gvM1BDZjc4UXpwR0xNRjJZM3grV0ZJeWpVZ2FkCmR2YmFxLzNidG5DNDdCcWx2RThPc3hvTG4vbU5ldnNSNjlzZWpRNCttUk1YQWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFWjdSay9haUp6aGJLem5Gb3pudEhmK2xmaVcKbU9VSmorV0QxY2JqMlhqdHZBcksvUjNYL1lYTTVCMWdNRDFJQjMrL2dsb1BEa1NqM0MrVWlDazh4WGh6b2VpdwpiSHhNdEdWVXVpQVpHSTdpc2NxOFZJaFQ3QjFWTFB4eUtSYzYvUytnMTlkRURWdDJRMGFvS012d2RkRDE4V3pICkdhWDFJUmNZUVgwYW55RXZpRzBhaEZRc1JvRytkVmZESzVDRVdkUzhXT3lET1ErNFhWOWR5d1h4ckpISDdXQlEKV09SSzVKV2pyUWg1bEdXaUh1NHQvcEFsalJKZWJ5NDU0T3l2dENWcTVkSElIOVl1QmRFc0d5cmROL0Y0VTBGMgpIM0NMZ3dTZlh2NXBUazdaUHZtSXdySHd0WHkxbE1ucHh6WVF3UmI5cTQweTZOUlNvZENjbnVXaVNkUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdWRiUWo4MW5iaVU2VVZ6MjN5SWlVSTMwK29FRU5VY2IvNTFrYld2SjR4SndoUzJMCm1wRXhOaW5RSGtjQTg2VURWZ0xqMnk0cUNEL1J2a0E3b293NEwvU1JVVE5WMmgrTktQbzg3QklHaDZQNS95c3YKaWFCMVpaQTY4SVY5MEpQUi9BZHVUQURsZ09iRkl1NEtTdFJtN0NYemQrOHY5SHBRZ2V1dWtqRlNjTmNueVZGWgpaU1UxL1ErVGhybm9lemErVUZSQko2R2k1NXZNaHR1cVFzOGxRSDlzY0YyazBQVlhMZlF3MER5VnN0cS9jcytiCmxNdldIczhxRStUR2ZGRnVCVE1vK3FuSGh5a3JNZjl6d24rL0VNNlJpekJkbU44ZmxoU01vMUlHblhiMjJxdjkKMjdad3VPd2FwYnhQRHJNYUM1LzVqWHI3RWV2YkhvME9QcGtURndJREFRQUJBb0lCQURMQ3YxTVlLdkZHRCtqYgplTDg0QnFGME5QOGJzSGVSQmMvTFFQdzJYZjI5TXFqZDZPeitUYS9hdWZNYk4rSlZKMVVlRXZqeVloN0F0OXk4CmxNMXdlWVIzekIyZTVRdGdaT0ZWZ01DR3ArdnkyVDFlb1d4NVBMZlNMcGMyRDBpaXA4K3NnKzhVcTV1SzdUdisKUXlkdlh2R1A2REhSVG9yN3dmUEsyWE1yTDdhTVJ5Yy9KSi82RXBnYytzaUNxakpRSkRMR09xM01MWmMybXdIVwpiZzF2NHo3VlBTWjBNRk1ka1BiNEYxV0d2TEJBQXVZVWtEa21mTTRPcVNDUm00TlVrSURNVHJRVllqcmRySmp6CjExSk1jMzhkTUdaNFF5UDc5VVNqajFBM3VSRFYvTGVYQjFvcld2SGYrc1hkUmVSdTd5cmRwemhwT25xOWVxWmMKMmQ4bWlXRUNnWUVBNEx4N1pMWVRqRzFVaWdiTjBWRkpva2M0RWVQaE5aT1dJdDNQUmRJM1dXUzJaZGtBbCsxZQovK1IxTHhqNmtQeWl6UVNwWi93Sm1ZVmR1VmEvTExFWjE3elJBa2xUUmtXbk5qdDJBRVNDT1lJdllFMDcwcmRyCkcxdnZMcmUySEJTNTlFczlrY2VwNE9PZmlTd3c2MnFFRUwwL1pxVTBWVUxzK3FXdWNsYkNqMmNDZ1lFQTA3RVgKWmdDV25BUVBYdkMvN3Y0d2RaYkJFVGZYVVRVRDErY3Q4WnNObU9GQmJORjkzOEJIcTdLUVdXMjR4UkswNUVHOQpCMCtkSjdvRGpNQkJBNjJyb0hJTGFMNHR5U3ZpMXJVczlxUzhFY3c0WUVEOTZrYyswL1FBcStmOWkwK1hYTGdUCisvaU5lNDBmcDN4dXY0QUU4TFlsbjlsRWx3V2NleklTdENqdUFORUNnWUVBZ0gyREZ6dTZ4WWtrMHAyOVF6WDAKb2FHU2Z6Z0k1VGJ5bWhDemx6bnZoMTY3b2xPRnNWZDMvMXBCWGFJc2NJVGhGOUxZZ0tsclc2a1N3d3JEMXV1UwoyUFFOay84VWE1TWJYVGgxNlFWQ1oxcjFkMXZ4SGpMY1BCSStHRG5WRncwS25KQUFMYjg0YzJueEp0NXJRYzN1Cm9CdHppbDVlSTNsV1FLQkZzdjNEMDNVQ2dZQmtBNUFOZGd1eURFMEN5dld6UVU2OXo0ckp5cnNrdDhwb0QrWHAKOXhxV2R4NEUvbmpjNUtnMzIzWk5lZ1JJdjR6TkpxM2JMV2NQWk5mV2dPSjJqVysvcndIcTY2Y1FHM2JoZjltTgpjY2tWRTRvekY2R2ZOU2ZlMWJJWGhkU0pKQUpjSU8vNEpMY2JmMUpNUEFMSzRQMzBoK29BdXBLb1UxTlo5UTlYCkpOdEZjUUtCZ0RCVjJKa1BNajdhSWMvL05pdGhmVEcrVDk4YktBUDhmQnRZZ1FEVmxuMVlmNS9XRmZ3SGVXRVcKUXROdXc5QmdtanhIUDRReFRxR0krVVNqTjJ1TzVyK0hNdUgrNlRydThSbVRRMkJad1ZEcnhDQXo5Uks1OTFuUgo0dWZpeFlQZGs5Ly9PU0lhdUgzYlp2RGhHbzcySFNCWjNVRm9KakxTamVJcUx4N25CdGFiCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRYnhKWXU4Z0xHV1l2TW8xRFloRFZsakFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpJeE1ERXlNRFkxTmpFeVdoY05Nak14TURFeU1EWTFOakV5V2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM1MXRDUHpXZHVKVHBSWFBiZklpSlFqZlQ2Z1FRMVJ4di9uV1J0YThuagpFbkNGTFl1YWtURTJLZEFlUndEenBRTldBdVBiTGlvSVA5RytRRHVpakRndjlKRlJNMVhhSDQwbytqenNFZ2FICm8vbi9LeStKb0hWbGtEcndoWDNRazlIOEIyNU1BT1dBNXNVaTdncEsxR2JzSmZOMzd5LzBlbENCNjY2U01WSncKMXlmSlVWbGxKVFg5RDVPR3VlaDdOcjVRVkVFbm9hTG5tOHlHMjZwQ3p5VkFmMnh3WGFUUTlWY3Q5RERRUEpXeQoycjl5ejV1VXk5WWV6eW9UNU1aOFVXNEZNeWo2cWNlSEtTc3gvM1BDZjc4UXpwR0xNRjJZM3grV0ZJeWpVZ2FkCmR2YmFxLzNidG5DNDdCcWx2RThPc3hvTG4vbU5ldnNSNjlzZWpRNCttUk1YQWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFWjdSay9haUp6aGJLem5Gb3pudEhmK2xmaVcKbU9VSmorV0QxY2JqMlhqdHZBcksvUjNYL1lYTTVCMWdNRDFJQjMrL2dsb1BEa1NqM0MrVWlDazh4WGh6b2VpdwpiSHhNdEdWVXVpQVpHSTdpc2NxOFZJaFQ3QjFWTFB4eUtSYzYvUytnMTlkRURWdDJRMGFvS012d2RkRDE4V3pICkdhWDFJUmNZUVgwYW55RXZpRzBhaEZRc1JvRytkVmZESzVDRVdkUzhXT3lET1ErNFhWOWR5d1h4ckpISDdXQlEKV09SSzVKV2pyUWg1bEdXaUh1NHQvcEFsalJKZWJ5NDU0T3l2dENWcTVkSElIOVl1QmRFc0d5cmROL0Y0VTBGMgpIM0NMZ3dTZlh2NXBUazdaUHZtSXdySHd0WHkxbE1ucHh6WVF3UmI5cTQweTZOUlNvZENjbnVXaVNkUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdWRiUWo4MW5iaVU2VVZ6MjN5SWlVSTMwK29FRU5VY2IvNTFrYld2SjR4SndoUzJMCm1wRXhOaW5RSGtjQTg2VURWZ0xqMnk0cUNEL1J2a0E3b293NEwvU1JVVE5WMmgrTktQbzg3QklHaDZQNS95c3YKaWFCMVpaQTY4SVY5MEpQUi9BZHVUQURsZ09iRkl1NEtTdFJtN0NYemQrOHY5SHBRZ2V1dWtqRlNjTmNueVZGWgpaU1UxL1ErVGhybm9lemErVUZSQko2R2k1NXZNaHR1cVFzOGxRSDlzY0YyazBQVlhMZlF3MER5VnN0cS9jcytiCmxNdldIczhxRStUR2ZGRnVCVE1vK3FuSGh5a3JNZjl6d24rL0VNNlJpekJkbU44ZmxoU01vMUlHblhiMjJxdjkKMjdad3VPd2FwYnhQRHJNYUM1LzVqWHI3RWV2YkhvME9QcGtURndJREFRQUJBb0lCQURMQ3YxTVlLdkZHRCtqYgplTDg0QnFGME5QOGJzSGVSQmMvTFFQdzJYZjI5TXFqZDZPeitUYS9hdWZNYk4rSlZKMVVlRXZqeVloN0F0OXk4CmxNMXdlWVIzekIyZTVRdGdaT0ZWZ01DR3ArdnkyVDFlb1d4NVBMZlNMcGMyRDBpaXA4K3NnKzhVcTV1SzdUdisKUXlkdlh2R1A2REhSVG9yN3dmUEsyWE1yTDdhTVJ5Yy9KSi82RXBnYytzaUNxakpRSkRMR09xM01MWmMybXdIVwpiZzF2NHo3VlBTWjBNRk1ka1BiNEYxV0d2TEJBQXVZVWtEa21mTTRPcVNDUm00TlVrSURNVHJRVllqcmRySmp6CjExSk1jMzhkTUdaNFF5UDc5VVNqajFBM3VSRFYvTGVYQjFvcld2SGYrc1hkUmVSdTd5cmRwemhwT25xOWVxWmMKMmQ4bWlXRUNnWUVBNEx4N1pMWVRqRzFVaWdiTjBWRkpva2M0RWVQaE5aT1dJdDNQUmRJM1dXUzJaZGtBbCsxZQovK1IxTHhqNmtQeWl6UVNwWi93Sm1ZVmR1VmEvTExFWjE3elJBa2xUUmtXbk5qdDJBRVNDT1lJdllFMDcwcmRyCkcxdnZMcmUySEJTNTlFczlrY2VwNE9PZmlTd3c2MnFFRUwwL1pxVTBWVUxzK3FXdWNsYkNqMmNDZ1lFQTA3RVgKWmdDV25BUVBYdkMvN3Y0d2RaYkJFVGZYVVRVRDErY3Q4WnNObU9GQmJORjkzOEJIcTdLUVdXMjR4UkswNUVHOQpCMCtkSjdvRGpNQkJBNjJyb0hJTGFMNHR5U3ZpMXJVczlxUzhFY3c0WUVEOTZrYyswL1FBcStmOWkwK1hYTGdUCisvaU5lNDBmcDN4dXY0QUU4TFlsbjlsRWx3V2NleklTdENqdUFORUNnWUVBZ0gyREZ6dTZ4WWtrMHAyOVF6WDAKb2FHU2Z6Z0k1VGJ5bWhDemx6bnZoMTY3b2xPRnNWZDMvMXBCWGFJc2NJVGhGOUxZZ0tsclc2a1N3d3JEMXV1UwoyUFFOay84VWE1TWJYVGgxNlFWQ1oxcjFkMXZ4SGpMY1BCSStHRG5WRncwS25KQUFMYjg0YzJueEp0NXJRYzN1Cm9CdHppbDVlSTNsV1FLQkZzdjNEMDNVQ2dZQmtBNUFOZGd1eURFMEN5dld6UVU2OXo0ckp5cnNrdDhwb0QrWHAKOXhxV2R4NEUvbmpjNUtnMzIzWk5lZ1JJdjR6TkpxM2JMV2NQWk5mV2dPSjJqVysvcndIcTY2Y1FHM2JoZjltTgpjY2tWRTRvekY2R2ZOU2ZlMWJJWGhkU0pKQUpjSU8vNEpMY2JmMUpNUEFMSzRQMzBoK29BdXBLb1UxTlo5UTlYCkpOdEZjUUtCZ0RCVjJKa1BNajdhSWMvL05pdGhmVEcrVDk4YktBUDhmQnRZZ1FEVmxuMVlmNS9XRmZ3SGVXRVcKUXROdXc5QmdtanhIUDRReFRxR0krVVNqTjJ1TzVyK0hNdUgrNlRydThSbVRRMkJad1ZEcnhDQXo5Uks1OTFuUgo0dWZpeFlQZGs5Ly9PU0lhdUgzYlp2RGhHbzcySFNCWjNVRm9KakxTamVJcUx4N25CdGFiCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-policy-validator-k8s-tls","namespace":"linkerd"},"type":"kubernetes.io/tls"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-policy-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-policy-validator-k8s-tls.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "type": "kubernetes.io/tls",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-heartbeat"},"rules":[{"apiGroups":[""],"resources":["namespaces"],"verbs":["list"]},{"apiGroups":["linkerd.io"],"resources":["serviceprofiles"],"verbs":["list"]}]}
",
      },
      "name": "linkerd-heartbeat",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-heartbeat.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-dst","namespace":"linkerd"},"spec":{"ports":[{"name":"grpc","port":8086,"targetPort":8086}],"selector":{"linkerd.io/control-plane-component":"destination"},"type":"ClusterIP"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-dst",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-dst.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-linkerd-proxy-injector"},"rules":[{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]},{"apiGroups":[""],"resources":["namespaces","replicationcontrollers"],"verbs":["list","get","watch"]},{"apiGroups":[""],"resources":["pods"],"verbs":["list","watch"]},{"apiGroups":["extensions","apps"],"resources":["deployments","replicasets","daemonsets","statefulsets"],"verbs":["list","get","watch"]},{"apiGroups":["extensions","batch"],"resources":["cronjobs","jobs"],"verbs":["list","get","watch"]}]}
",
      },
      "name": "linkerd-linkerd-proxy-injector",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"Linkerd","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-destination-policy"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"linkerd-policy"},"subjects":[{"kind":"ServiceAccount","name":"linkerd-destination","namespace":"linkerd"}]}
",
      },
      "name": "linkerd-destination-policy",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-destination-policy.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"destination","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-destination","namespace":"linkerd"},"spec":{"replicas":1,"selector":{"matchLabels":{"linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd","linkerd.io/proxy-deployment":"linkerd-destination"}},"strategy":{"rollingUpdate":{"maxSurge":"25%","maxUnavailable":"25%"}},"template":{"metadata":{"annotations":{"cluster-autoscaler.kubernetes.io/safe-to-evict":"true","config.linkerd.io/default-inbound-policy":"all-unauthenticated","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/helm-release-version":"1","linkerd.io/proxy-version":"stable-2.12.1","linkerd.io/trust-root-sha256":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"labels":{"linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd","linkerd.io/proxy-deployment":"linkerd-destination","linkerd.io/workload-ns":"linkerd"}},"spec":{"containers":[{"env":[{"name":"_pod_name","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"_pod_ns","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"_pod_nodeName","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"LINKERD2_PROXY_LOG","value":"warn,linkerd=info"},{"name":"LINKERD2_PROXY_LOG_FORMAT","value":"plain"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_ADDR","value":"localhost.:8086"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_POLICY_SVC_ADDR","value":"localhost.:8090"},{"name":"LINKERD2_PROXY_POLICY_WORKLOAD","value":"$(_pod_ns):$(_pod_name)"},{"name":"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY","value":"all-unauthenticated"},{"name":"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT","value":"100ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT","value":"1000ms"},{"name":"LINKERD2_PROXY_CONTROL_LISTEN_ADDR","value":"0.0.0.0:4190"},{"name":"LINKERD2_PROXY_ADMIN_LISTEN_ADDR","value":"0.0.0.0:4191"},{"name":"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR","value":"127.0.0.1:4140"},{"name":"LINKERD2_PROXY_INBOUND_LISTEN_ADDR","value":"0.0.0.0:4143"},{"name":"LINKERD2_PROXY_INBOUND_IPS","valueFrom":{"fieldRef":{"fieldPath":"status.podIPs"}}},{"name":"LINKERD2_PROXY_INBOUND_PORTS","value":"8086,8090,8443,9443,9990,9996,9997"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES","value":"svc.cluster.local."},{"name":"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION","value":"25,587,3306,4444,5432,6379,9300,11211"},{"name":"LINKERD2_PROXY_DESTINATION_CONTEXT","value":"{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}\\n"},{"name":"_pod_sa","valueFrom":{"fieldRef":{"fieldPath":"spec.serviceAccountName"}}},{"name":"_l5d_ns","value":"linkerd"},{"name":"_l5d_trustdomain","value":"cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_DIR","value":"/var/run/linkerd/identity/end-entity"},{"name":"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS","valueFrom":{"configMapKeyRef":{"key":"ca-bundle.crt","name":"linkerd-identity-trust-roots"}}},{"name":"LINKERD2_PROXY_IDENTITY_TOKEN_FILE","value":"/var/run/secrets/tokens/linkerd-identity-token"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_ADDR","value":"linkerd-identity-headless.linkerd.svc.cluster.local.:8080"},{"name":"LINKERD2_PROXY_IDENTITY_LOCAL_NAME","value":"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_NAME","value":"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_POLICY_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"}],"image":"cr.l5d.io/linkerd/proxy:stable-2.12.1","imagePullPolicy":"IfNotPresent","lifecycle":{"postStart":{"exec":{"command":["/usr/lib/linkerd/linkerd-await","--timeout=2m"]}}},"livenessProbe":{"httpGet":{"path":"/live","port":4191},"initialDelaySeconds":10},"name":"linkerd-proxy","ports":[{"containerPort":4143,"name":"linkerd-proxy"},{"containerPort":4191,"name":"linkerd-admin"}],"readinessProbe":{"httpGet":{"path":"/ready","port":4191},"initialDelaySeconds":2},"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsUser":2102},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/var/run/linkerd/identity/end-entity","name":"linkerd-identity-end-entity"},{"mountPath":"/var/run/secrets/tokens","name":"linkerd-identity-token"}]},{"args":["destination","-addr=:8086","-controller-namespace=linkerd","-enable-h2-upgrade=true","-log-level=info","-log-format=plain","-enable-endpoint-slices=true","-cluster-domain=cluster.local","-identity-trust-domain=cluster.local","-default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211","-enable-pprof=false"],"image":"cr.l5d.io/linkerd/controller:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9996},"initialDelaySeconds":10},"name":"destination","ports":[{"containerPort":8086,"name":"grpc"},{"containerPort":9996,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9996}},"securityContext":{"allowPrivilegeEscalation":false,"runAsUser":2103}},{"args":["sp-validator","-log-level=info","-log-format=plain","-enable-pprof=false"],"image":"cr.l5d.io/linkerd/controller:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9997},"initialDelaySeconds":10},"name":"sp-validator","ports":[{"containerPort":8443,"name":"sp-validator"},{"containerPort":9997,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9997}},"securityContext":{"allowPrivilegeEscalation":false,"runAsUser":2103},"volumeMounts":[{"mountPath":"/var/run/linkerd/tls","name":"sp-tls","readOnly":true}]},{"args":["--admin-addr=0.0.0.0:9990","--control-plane-namespace=linkerd","--grpc-addr=0.0.0.0:8090","--server-addr=0.0.0.0:9443","--server-tls-key=/var/run/linkerd/tls/tls.key","--server-tls-certs=/var/run/linkerd/tls/tls.crt","--cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16","--identity-domain=cluster.local","--default-policy=all-unauthenticated","--log-level=info","--log-format=plain","--probe-networks=0.0.0.0/0"],"image":"cr.l5d.io/linkerd/policy-controller:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/live","port":"admin"}},"name":"policy","ports":[{"containerPort":8090,"name":"grpc"},{"containerPort":9990,"name":"admin"},{"containerPort":9443,"name":"policy-https"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":"admin"},"initialDelaySeconds":10},"securityContext":{"allowPrivilegeEscalation":false,"runAsUser":2103},"volumeMounts":[{"mountPath":"/var/run/linkerd/tls","name":"policy-tls","readOnly":true}]}],"initContainers":[{"args":["--incoming-proxy-port","4143","--outgoing-proxy-port","4140","--proxy-uid","2102","--inbound-ports-to-ignore","4190,4191,4567,4568","--outbound-ports-to-ignore","443"],"image":"cr.l5d.io/linkerd/proxy-init:v2.0.0","imagePullPolicy":"IfNotPresent","name":"linkerd-init","resources":{"limits":{"cpu":"100m","memory":"20Mi"},"requests":{"cpu":"100m","memory":"20Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"add":["NET_ADMIN","NET_RAW"]},"privileged":false,"readOnlyRootFilesystem":true,"runAsNonRoot":true,"runAsUser":65534},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/run","name":"linkerd-proxy-init-xtables-lock"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"linkerd-destination","volumes":[{"name":"sp-tls","secret":{"secretName":"linkerd-sp-validator-k8s-tls"}},{"name":"policy-tls","secret":{"secretName":"linkerd-policy-validator-k8s-tls"}},{"emptyDir":{},"name":"linkerd-proxy-init-xtables-lock"},{"name":"linkerd-identity-token","projected":{"sources":[{"serviceAccountToken":{"audience":"identity.l5d.io","expirationSeconds":86400,"path":"linkerd-identity-token"}}]}},{"emptyDir":{"medium":"Memory"},"name":"linkerd-identity-end-entity"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-destination",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-destination.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "true",
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/helm-release-version": "1",
            "linkerd.io/proxy-version": "stable-2.12.1",
            "linkerd.io/trust-root-sha256": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
          },
          "labels": {
            "linkerd.io/control-plane-component": "destination",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-destination",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "_pod_name",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                {
                  "name": "_pod_ns",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "_pod_nodeName",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "localhost.:8086",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "localhost.:8090",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8086,8090,8443,9443,9990,9996,9997",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
",
                },
                {
                  "name": "_pod_sa",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/tokens/linkerd-identity-token",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "linkerd-identity-headless.linkerd.svc.cluster.local.:8080",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "/usr/lib/linkerd/linkerd-await",
                      "--timeout=2m",
                    ],
                  },
                },
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": [
                {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
                {
                  "mountPath": "/var/run/secrets/tokens",
                  "name": "linkerd-identity-token",
                },
              ],
            },
            {
              "args": [
                "destination",
                "-addr=:8086",
                "-controller-namespace=linkerd",
                "-enable-h2-upgrade=true",
                "-log-level=info",
                "-log-format=plain",
                "-enable-endpoint-slices=true",
                "-cluster-domain=cluster.local",
                "-identity-trust-domain=cluster.local",
                "-default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9996,
                },
                "initialDelaySeconds": 10,
              },
              "name": "destination",
              "ports": [
                {
                  "containerPort": 8086,
                  "name": "grpc",
                },
                {
                  "containerPort": 9996,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9996,
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 2103,
              },
            },
            {
              "args": [
                "sp-validator",
                "-log-level=info",
                "-log-format=plain",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9997,
                },
                "initialDelaySeconds": 10,
              },
              "name": "sp-validator",
              "ports": [
                {
                  "containerPort": 8443,
                  "name": "sp-validator",
                },
                {
                  "containerPort": 9997,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9997,
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 2103,
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "sp-tls",
                  "readOnly": true,
                },
              ],
            },
            {
              "args": [
                "--admin-addr=0.0.0.0:9990",
                "--control-plane-namespace=linkerd",
                "--grpc-addr=0.0.0.0:8090",
                "--server-addr=0.0.0.0:9443",
                "--server-tls-key=/var/run/linkerd/tls/tls.key",
                "--server-tls-certs=/var/run/linkerd/tls/tls.crt",
                "--cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                "--identity-domain=cluster.local",
                "--default-policy=all-unauthenticated",
                "--log-level=info",
                "--log-format=plain",
                "--probe-networks=0.0.0.0/0",
              ],
              "image": "cr.l5d.io/linkerd/policy-controller:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/live",
                  "port": "admin",
                },
              },
              "name": "policy",
              "ports": [
                {
                  "containerPort": 8090,
                  "name": "grpc",
                },
                {
                  "containerPort": 9990,
                  "name": "admin",
                },
                {
                  "containerPort": 9443,
                  "name": "policy-https",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": "admin",
                },
                "initialDelaySeconds": 10,
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 2103,
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "policy-tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "443",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v2.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "20Mi",
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "20Mi",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "add": [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true,
                "runAsUser": 65534,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": [
                {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-destination",
          "volumes": [
            {
              "name": "sp-tls",
              "secret": {
                "secretName": "linkerd-sp-validator-k8s-tls",
              },
            },
            {
              "name": "policy-tls",
              "secret": {
                "secretName": "linkerd-policy-validator-k8s-tls",
              },
            },
            {
              "emptyDir": {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            {
              "name": "linkerd-identity-token",
              "projected": {
                "sources": [
                  {
                    "serviceAccountToken": {
                      "audience": "identity.l5d.io",
                      "expirationSeconds": 86400,
                      "path": "linkerd-identity-token",
                    },
                  },
                ],
              },
            },
            {
              "emptyDir": {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"Linkerd","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-policy"},"rules":[{"apiGroups":[""],"resources":["pods"],"verbs":["get","list","watch"]},{"apiGroups":["policy.linkerd.io"],"resources":["authorizationpolicies","httproutes","meshtlsauthentications","networkauthentications","servers","serverauthorizations"],"verbs":["get","list","watch"]}]}
",
      },
      "name": "linkerd-policy",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-policy.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "v1",
    "data": {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVakNDQWpxZ0F3SUJBZ0lRVVc0ZUcybUJzV2ErS2tFSFFyajhCREFOQmdrcWhraUc5dzBCQVFzRkFEQXQKTVNzd0tRWURWUVFERXlKc2FXNXJaWEprTFhCeWIzaDVMV2x1YW1WamRHOXlMbXhwYm10bGNtUXVjM1pqTUI0WApEVEl5TVRBeE1qQTJOVFl4TWxvWERUSXpNVEF4TWpBMk5UWXhNbG93TFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5ClpDMXdjbTk0ZVMxcGJtcGxZM1J2Y2k1c2FXNXJaWEprTG5OMll6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFNbEN5UUhUSVp1MWRUbnhZU1FpN3QwTWN2OTkrVEUydzFsMXBaUXBTV001U3FvaApaaS8xc0FpYTkrZ213cEc2c3BXNjFQeGwybE1TN0lRSHNqVnR2T2xKc2t5MXU1OU85bXdjLzdvWEYwVUtLRmFXClJNcWpwNmM1S3krRitkRlJlNUpnaW9kZ0F3QnB2dko1QzI1SldaZGVuMG05blhIZm5tYVlvYXlDVDdNcnVMWW4KVGt6Vm8rZWxHTWI0dVNMeGpuNnBUNjQwSUk4cUxqNHphalViOEZtOXR1TVBnT1hmd1NuUXo0a2JqOVI5QkxnTQpFZDNBaG5xaldnTElsdVA4QjMzUVFRUnBsN1VLM0ZRRk0zK3gzMHJrL0hMc21zK0tXa2pFRTczSHVTWHdLQWlLCmNQalRnUzNsK1lvUmd6N2VZVVFrUnJmUFJKWXdCUTUzNTJ6ZER4OENBd0VBQWFOdU1Hd3dEZ1lEVlIwUEFRSC8KQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RQpBakFBTUMwR0ExVWRFUVFtTUNTQ0lteHBibXRsY21RdGNISnZlSGt0YVc1cVpXTjBiM0l1YkdsdWEyVnlaQzV6CmRtTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSTJoMTNrcUVWR0kwSmw0bEIyVjEvaEZ0WGxrVmtOSVEzdDEKWjV5ajV0U0RyTFhoNCtLbnVpd0NNamg4VldaR2NESHp5ZjZYRUJBbFV5dzdUUWZ0OTY0UjYwRkFLWDdwUDhhRApYVUJCMTdZejB6T2VuM2tMQmVIc0ZoTGprOFA3NURmMEFmQUJTc2FkU2NMaWtMaWNOTWZCM1NoeXFjWHFIcGNUClVsNHJYRXl6ZWF1YTVTMFVEV2VMNHRkTkhWVTdRWDJ0Znp0d1lhcVpVV3hMQ2hiQlhEdW8yRTluWjVRYTlkT3cKMWhhQzFYSUhXcXVnTmtXRHJhYkJXTmVqZFY0Q3hQZ1lKTTRrWC8vRXFFRXAxTzFZNGt6bDBlcWV3anAwT1dGTAo3cDFEcVNZL05NeUVZZUhqbFpGQndnd2hYVzkxUWpiYVV0VUtPUDJUcFd2YzVRNnlEeGc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeVVMSkFkTWhtN1YxT2ZGaEpDTHUzUXh5LzMzNU1UYkRXWFdsbENsSll6bEtxaUZtCkwvV3dDSnIzNkNiQ2ticXlsYnJVL0dYYVV4THNoQWV5TlcyODZVbXlUTFc3bjA3MmJCei91aGNYUlFvb1ZwWkUKeXFPbnB6a3JMNFg1MFZGN2ttQ0toMkFEQUdtKzhua0xia2xabDE2ZlNiMmRjZCtlWnBpaHJJSlBzeXU0dGlkTwpUTldqNTZVWXh2aTVJdkdPZnFsUHJqUWdqeW91UGpOcU5SdndXYjIyNHcrQTVkL0JLZERQaVJ1UDFIMEV1QXdSCjNjQ0dlcU5hQXNpVzQvd0hmZEJCQkdtWHRRcmNWQVV6ZjdIZlN1VDhjdXlhejRwYVNNUVR2Y2U1SmZBb0NJcHcKK05PQkxlWDVpaEdEUHQ1aFJDUkd0ODlFbGpBRkRuZm5iTjBQSHdJREFRQUJBb0lCQVFDaVJCVmFRa2E3aXU3TAoyOEJ0YVRqYXdobkp3bUJ5Zkd1K0tldG83R3k5OGtndnFTUUJrUDN2d2pvVVU0UFdDUWZKVHN3Ly8wS3FiZnlCCmFzOFU0cmhJQXVJZGxQeURzaDllQlhkdEt3Ylk1QnFuelJvRG96VWR6eXJ4Y3Z4NjlrNUNNMUlkV1p5eDdaQkYKWUxDRnA5L3kraGhGVlBxbkFCdHZMcXBUTXZGZFMzaTFNaEtOQ3dLbW11ekxGTHBFUUhydDhTNW5kZ21SdzVYbgpWM1NVdDN0dVduVlVLanhsdGx4VGk1bDdqUTg2L3BSV2xGMDhVang3eFdpZCtnTEpjT2ZnZXF1c3A4OEJVZ014CnRHVXpnRjZQZnVnMDVIQmh0SVR1VnN1TGs2akhMZWxPd0t1UjZkam5pTkdjM0hJY3lFN204UERCUWUxak5WY2EKR1Y4MDJtNVpBb0dCQVBZb29YQWZ6Sld0OGtwQ01URjJnMjkzL1ExaFR2N25keTV0YkxndklwczJPSXVlZ1hZWApYLzdnaXVselhwVVR4Q1dFUG5ieSszRHpHZktQa3hKaUpWL2pIOVJ5b2t6Zi9hMEV2YjVOWFlVOE1CYkgydG9sCmRPTXo1aXhVUzg5Y2hmVmllMGdrOXR1VjB4MVNJMlV4cktFdmpZT2dyaGk0MDlZZ20xc1pMZ3gxQW9HQkFORk8Kb3hreUxZM0JQeGdKQmdEYityTTZ6YlRmMjdqMlk3SFNsT0ZsWCt3NUhVNHlVTjRoeXpwVU5Ca3o2aHhoakx1eAplZ01VU0poZHVJc01iUmw1NWpEVzFnVVRhVXNIdm1GQjEyTEpWVENOUWhhK1JybTRqNWVzZzRJYzZnV053RmFCCjZCa3BRdE9wa3ljUzVuWnFxMy9lb3dWcWlVTFM5RjE3VWg5emVRckRBb0dBVzUzenVBK2R6WGZZWGRzVkJCdmYKLzNUaE1rR3RiU0lwTVpaNGlIVENwSklocVpWdENjN1pZN3VlK0JTQWQydkw3VXF6RlFLS294ZFg2UGVXL1ppWgo0SDVnTW1vWURoU3dEZDFkNFo1WjJHVDJZUVF4YUUvWW1WZVBxNkFVTnpGd2lrd0ZKbXpibEE3SGJIcE53alFpCjFEc21xSDc5VFNZOWNjemhCWjd4aktFQ2dZRUFvR29ZYmxNYXZxNEE0VGJwTnZkaHFNUEVySDkxTXNrRGwySEIKWVE0RStsSzd0eGF4QzgzeXAvMnBBRGZka1dyaUpXZmNEMGdZYTA1SkJhaThaTzRjRWdwVmRRWnZpR1dpNzM4Ngp5Q2R0OXd3TVBzb09Bb0VFN0VYM2RGMGNycXo1WUZPbndzRHd5ckFJYThYOGczMDFlNGJ5Z2xBb2F1S3JEb3BaClltbHB0MmtDZ1lCbmc4NWdINWV3WFd5Z3RKVktxdEJXazhlNWMwb2tPWk5wNDA0b3J5ek93RmdxNzFEWFdVVXcKUERxcWhObVZRK0QwN2dNMFlBQTJMUGJpYlo2L21WVE5MYjFMYTQrNm80Q3JCRjdsU2o5KzJyTE93QU5GSXZwLwpnVitRcGtsZVMxTXVIVXc2TmcwZzF2OU9sOGJlbFY0SDVMeHJPQUtnMTNIRWJWRGFoZmxsSmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVakNDQWpxZ0F3SUJBZ0lRVVc0ZUcybUJzV2ErS2tFSFFyajhCREFOQmdrcWhraUc5dzBCQVFzRkFEQXQKTVNzd0tRWURWUVFERXlKc2FXNXJaWEprTFhCeWIzaDVMV2x1YW1WamRHOXlMbXhwYm10bGNtUXVjM1pqTUI0WApEVEl5TVRBeE1qQTJOVFl4TWxvWERUSXpNVEF4TWpBMk5UWXhNbG93TFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5ClpDMXdjbTk0ZVMxcGJtcGxZM1J2Y2k1c2FXNXJaWEprTG5OMll6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFNbEN5UUhUSVp1MWRUbnhZU1FpN3QwTWN2OTkrVEUydzFsMXBaUXBTV001U3FvaApaaS8xc0FpYTkrZ213cEc2c3BXNjFQeGwybE1TN0lRSHNqVnR2T2xKc2t5MXU1OU85bXdjLzdvWEYwVUtLRmFXClJNcWpwNmM1S3krRitkRlJlNUpnaW9kZ0F3QnB2dko1QzI1SldaZGVuMG05blhIZm5tYVlvYXlDVDdNcnVMWW4KVGt6Vm8rZWxHTWI0dVNMeGpuNnBUNjQwSUk4cUxqNHphalViOEZtOXR1TVBnT1hmd1NuUXo0a2JqOVI5QkxnTQpFZDNBaG5xaldnTElsdVA4QjMzUVFRUnBsN1VLM0ZRRk0zK3gzMHJrL0hMc21zK0tXa2pFRTczSHVTWHdLQWlLCmNQalRnUzNsK1lvUmd6N2VZVVFrUnJmUFJKWXdCUTUzNTJ6ZER4OENBd0VBQWFOdU1Hd3dEZ1lEVlIwUEFRSC8KQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RQpBakFBTUMwR0ExVWRFUVFtTUNTQ0lteHBibXRsY21RdGNISnZlSGt0YVc1cVpXTjBiM0l1YkdsdWEyVnlaQzV6CmRtTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSTJoMTNrcUVWR0kwSmw0bEIyVjEvaEZ0WGxrVmtOSVEzdDEKWjV5ajV0U0RyTFhoNCtLbnVpd0NNamg4VldaR2NESHp5ZjZYRUJBbFV5dzdUUWZ0OTY0UjYwRkFLWDdwUDhhRApYVUJCMTdZejB6T2VuM2tMQmVIc0ZoTGprOFA3NURmMEFmQUJTc2FkU2NMaWtMaWNOTWZCM1NoeXFjWHFIcGNUClVsNHJYRXl6ZWF1YTVTMFVEV2VMNHRkTkhWVTdRWDJ0Znp0d1lhcVpVV3hMQ2hiQlhEdW8yRTluWjVRYTlkT3cKMWhhQzFYSUhXcXVnTmtXRHJhYkJXTmVqZFY0Q3hQZ1lKTTRrWC8vRXFFRXAxTzFZNGt6bDBlcWV3anAwT1dGTAo3cDFEcVNZL05NeUVZZUhqbFpGQndnd2hYVzkxUWpiYVV0VUtPUDJUcFd2YzVRNnlEeGc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeVVMSkFkTWhtN1YxT2ZGaEpDTHUzUXh5LzMzNU1UYkRXWFdsbENsSll6bEtxaUZtCkwvV3dDSnIzNkNiQ2ticXlsYnJVL0dYYVV4THNoQWV5TlcyODZVbXlUTFc3bjA3MmJCei91aGNYUlFvb1ZwWkUKeXFPbnB6a3JMNFg1MFZGN2ttQ0toMkFEQUdtKzhua0xia2xabDE2ZlNiMmRjZCtlWnBpaHJJSlBzeXU0dGlkTwpUTldqNTZVWXh2aTVJdkdPZnFsUHJqUWdqeW91UGpOcU5SdndXYjIyNHcrQTVkL0JLZERQaVJ1UDFIMEV1QXdSCjNjQ0dlcU5hQXNpVzQvd0hmZEJCQkdtWHRRcmNWQVV6ZjdIZlN1VDhjdXlhejRwYVNNUVR2Y2U1SmZBb0NJcHcKK05PQkxlWDVpaEdEUHQ1aFJDUkd0ODlFbGpBRkRuZm5iTjBQSHdJREFRQUJBb0lCQVFDaVJCVmFRa2E3aXU3TAoyOEJ0YVRqYXdobkp3bUJ5Zkd1K0tldG83R3k5OGtndnFTUUJrUDN2d2pvVVU0UFdDUWZKVHN3Ly8wS3FiZnlCCmFzOFU0cmhJQXVJZGxQeURzaDllQlhkdEt3Ylk1QnFuelJvRG96VWR6eXJ4Y3Z4NjlrNUNNMUlkV1p5eDdaQkYKWUxDRnA5L3kraGhGVlBxbkFCdHZMcXBUTXZGZFMzaTFNaEtOQ3dLbW11ekxGTHBFUUhydDhTNW5kZ21SdzVYbgpWM1NVdDN0dVduVlVLanhsdGx4VGk1bDdqUTg2L3BSV2xGMDhVang3eFdpZCtnTEpjT2ZnZXF1c3A4OEJVZ014CnRHVXpnRjZQZnVnMDVIQmh0SVR1VnN1TGs2akhMZWxPd0t1UjZkam5pTkdjM0hJY3lFN204UERCUWUxak5WY2EKR1Y4MDJtNVpBb0dCQVBZb29YQWZ6Sld0OGtwQ01URjJnMjkzL1ExaFR2N25keTV0YkxndklwczJPSXVlZ1hZWApYLzdnaXVselhwVVR4Q1dFUG5ieSszRHpHZktQa3hKaUpWL2pIOVJ5b2t6Zi9hMEV2YjVOWFlVOE1CYkgydG9sCmRPTXo1aXhVUzg5Y2hmVmllMGdrOXR1VjB4MVNJMlV4cktFdmpZT2dyaGk0MDlZZ20xc1pMZ3gxQW9HQkFORk8Kb3hreUxZM0JQeGdKQmdEYityTTZ6YlRmMjdqMlk3SFNsT0ZsWCt3NUhVNHlVTjRoeXpwVU5Ca3o2aHhoakx1eAplZ01VU0poZHVJc01iUmw1NWpEVzFnVVRhVXNIdm1GQjEyTEpWVENOUWhhK1JybTRqNWVzZzRJYzZnV053RmFCCjZCa3BRdE9wa3ljUzVuWnFxMy9lb3dWcWlVTFM5RjE3VWg5emVRckRBb0dBVzUzenVBK2R6WGZZWGRzVkJCdmYKLzNUaE1rR3RiU0lwTVpaNGlIVENwSklocVpWdENjN1pZN3VlK0JTQWQydkw3VXF6RlFLS294ZFg2UGVXL1ppWgo0SDVnTW1vWURoU3dEZDFkNFo1WjJHVDJZUVF4YUUvWW1WZVBxNkFVTnpGd2lrd0ZKbXpibEE3SGJIcE53alFpCjFEc21xSDc5VFNZOWNjemhCWjd4aktFQ2dZRUFvR29ZYmxNYXZxNEE0VGJwTnZkaHFNUEVySDkxTXNrRGwySEIKWVE0RStsSzd0eGF4QzgzeXAvMnBBRGZka1dyaUpXZmNEMGdZYTA1SkJhaThaTzRjRWdwVmRRWnZpR1dpNzM4Ngp5Q2R0OXd3TVBzb09Bb0VFN0VYM2RGMGNycXo1WUZPbndzRHd5ckFJYThYOGczMDFlNGJ5Z2xBb2F1S3JEb3BaClltbHB0MmtDZ1lCbmc4NWdINWV3WFd5Z3RKVktxdEJXazhlNWMwb2tPWk5wNDA0b3J5ek93RmdxNzFEWFdVVXcKUERxcWhObVZRK0QwN2dNMFlBQTJMUGJpYlo2L21WVE5MYjFMYTQrNm80Q3JCRjdsU2o5KzJyTE93QU5GSXZwLwpnVitRcGtsZVMxTXVIVXc2TmcwZzF2OU9sOGJlbFY0SDVMeHJPQUtnMTNIRWJWRGFoZmxsSmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-proxy-injector-k8s-tls","namespace":"linkerd"},"type":"kubernetes.io/tls"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-proxy-injector-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-proxy-injector-k8s-tls.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "type": "kubernetes.io/tls",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-heartbeat"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"linkerd-heartbeat"},"subjects":[{"kind":"ServiceAccount","name":"linkerd-heartbeat","namespace":"linkerd"}]}
",
      },
      "name": "linkerd-heartbeat",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-heartbeat.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-proxy-injector","namespace":"linkerd"}}
",
      },
      "name": "linkerd-proxy-injector",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"identity","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-identity","namespace":"linkerd"}}
",
      },
      "name": "linkerd-identity",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "v1",
    "data": {
      "linkerd-crds-chart-version": "linkerd-crds-1.0.0-edge",
      "values": "clusterDomain: cluster.local
clusterNetworks: 10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
cniEnabled: false
controlPlaneTracing: false
controlPlaneTracingNamespace: linkerd-jaeger
controllerImage: cr.l5d.io/linkerd/controller
controllerLogFormat: plain
controllerLogLevel: info
controllerReplicas: 1
controllerUID: 2103
debugContainer:
  image:
    name: cr.l5d.io/linkerd/debug
    pullPolicy: ""
    version: ""
deploymentStrategy:
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25%
disableHeartBeat: false
enableEndpointSlices: true
enableH2Upgrade: true
enablePSP: false
enablePodAntiAffinity: false
enablePodDisruptionBudget: false
enablePprof: false
identity:
  externalCA: true
  issuer:
    clockSkewAllowance: 20s
    issuanceLifetime: 24h0m0s
    scheme: kubernetes.io/tls
    tls:
      crtPEM: ""
  serviceAccountTokenProjection: true
identityTrustAnchorsPEM: ""
identityTrustDomain: cluster.local
imagePullPolicy: IfNotPresent
imagePullSecrets: []
linkerdVersion: stable-2.12.1
nodeSelector:
  kubernetes.io/os: linux
podAnnotations: {}
podLabels: {}
policyController:
  image:
    name: cr.l5d.io/linkerd/policy-controller
    pullPolicy: ""
    version: ""
  logLevel: info
  probeNetworks:
  - 0.0.0.0/0
  resources:
    cpu:
      limit: ""
      request: ""
    ephemeral-storage:
      limit: ""
      request: ""
    memory:
      limit: ""
      request: ""
policyValidator:
  caBundle: ""
  crtPEM: ""
  externalSecret: false
  injectCaFrom: ""
  injectCaFromSecret: ""
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
priorityClassName: ""
profileValidator:
  caBundle: ""
  crtPEM: ""
  externalSecret: false
  injectCaFrom: ""
  injectCaFromSecret: ""
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
proxy:
  await: true
  cores: 0
  defaultInboundPolicy: all-unauthenticated
  enableExternalProfiles: false
  image:
    name: cr.l5d.io/linkerd/proxy
    pullPolicy: ""
    version: ""
  inboundConnectTimeout: 100ms
  logFormat: plain
  logLevel: warn,linkerd=info
  opaquePorts: 25,587,3306,4444,5432,6379,9300,11211
  outboundConnectTimeout: 1000ms
  ports:
    admin: 4191
    control: 4190
    inbound: 4143
    outbound: 4140
  requireIdentityOnInboundPorts: ""
  resources:
    cpu:
      limit: ""
      request: ""
    ephemeral-storage:
      limit: ""
      request: ""
    memory:
      limit: ""
      request: ""
  shutdownGracePeriod: ""
  uid: 2102
  waitBeforeExitSeconds: 0
proxyInit:
  closeWaitTimeoutSecs: 0
  ignoreInboundPorts: 4567,4568
  ignoreOutboundPorts: 4567,4568
  image:
    name: cr.l5d.io/linkerd/proxy-init
    pullPolicy: ""
    version: v2.0.0
  iptablesMode: legacy
  logFormat: ""
  logLevel: ""
  resources:
    cpu:
      limit: 100m
      request: 100m
    ephemeral-storage:
      limit: ""
      request: ""
    memory:
      limit: 20Mi
      request: 20Mi
  runAsRoot: false
  runAsUser: 65534
  skipSubnets: ""
  xtMountPath:
    mountPath: /run
    name: linkerd-proxy-init-xtables-lock
proxyInjector:
  caBundle: ""
  crtPEM: ""
  externalSecret: false
  injectCaFrom: ""
  injectCaFromSecret: ""
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
    - key: kubernetes.io/metadata.name
      operator: NotIn
      values:
      - kube-system
      - cert-manager
  objectSelector:
    matchExpressions:
    - key: linkerd.io/control-plane-component
      operator: DoesNotExist
    - key: linkerd.io/cni-resource
      operator: DoesNotExist
runtimeClassName: ""
webhookFailurePolicy: Ignore
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"linkerd-crds-chart-version":"linkerd-crds-1.0.0-edge","values":"clusterDomain: cluster.local\\nclusterNetworks: 10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\ncniEnabled: false\\ncontrolPlaneTracing: false\\ncontrolPlaneTracingNamespace: linkerd-jaeger\\ncontrollerImage: cr.l5d.io/linkerd/controller\\ncontrollerLogFormat: plain\\ncontrollerLogLevel: info\\ncontrollerReplicas: 1\\ncontrollerUID: 2103\\ndebugContainer:\\n  image:\\n    name: cr.l5d.io/linkerd/debug\\n    pullPolicy: \\"\\"\\n    version: \\"\\"\\ndeploymentStrategy:\\n  rollingUpdate:\\n    maxSurge: 25%\\n    maxUnavailable: 25%\\ndisableHeartBeat: false\\nenableEndpointSlices: true\\nenableH2Upgrade: true\\nenablePSP: false\\nenablePodAntiAffinity: false\\nenablePodDisruptionBudget: false\\nenablePprof: false\\nidentity:\\n  externalCA: true\\n  issuer:\\n    clockSkewAllowance: 20s\\n    issuanceLifetime: 24h0m0s\\n    scheme: kubernetes.io/tls\\n    tls:\\n      crtPEM: \\"\\"\\n  serviceAccountTokenProjection: true\\nidentityTrustAnchorsPEM: \\"\\"\\nidentityTrustDomain: cluster.local\\nimagePullPolicy: IfNotPresent\\nimagePullSecrets: []\\nlinkerdVersion: stable-2.12.1\\nnodeSelector:\\n  kubernetes.io/os: linux\\npodAnnotations: {}\\npodLabels: {}\\npolicyController:\\n  image:\\n    name: cr.l5d.io/linkerd/policy-controller\\n    pullPolicy: \\"\\"\\n    version: \\"\\"\\n  logLevel: info\\n  probeNetworks:\\n  - 0.0.0.0/0\\n  resources:\\n    cpu:\\n      limit: \\"\\"\\n      request: \\"\\"\\n    ephemeral-storage:\\n      limit: \\"\\"\\n      request: \\"\\"\\n    memory:\\n      limit: \\"\\"\\n      request: \\"\\"\\npolicyValidator:\\n  caBundle: \\"\\"\\n  crtPEM: \\"\\"\\n  externalSecret: false\\n  injectCaFrom: \\"\\"\\n  injectCaFromSecret: \\"\\"\\n  namespaceSelector:\\n    matchExpressions:\\n    - key: config.linkerd.io/admission-webhooks\\n      operator: NotIn\\n      values:\\n      - disabled\\npriorityClassName: \\"\\"\\nprofileValidator:\\n  caBundle: \\"\\"\\n  crtPEM: \\"\\"\\n  externalSecret: false\\n  injectCaFrom: \\"\\"\\n  injectCaFromSecret: \\"\\"\\n  namespaceSelector:\\n    matchExpressions:\\n    - key: config.linkerd.io/admission-webhooks\\n      operator: NotIn\\n      values:\\n      - disabled\\nproxy:\\n  await: true\\n  cores: 0\\n  defaultInboundPolicy: all-unauthenticated\\n  enableExternalProfiles: false\\n  image:\\n    name: cr.l5d.io/linkerd/proxy\\n    pullPolicy: \\"\\"\\n    version: \\"\\"\\n  inboundConnectTimeout: 100ms\\n  logFormat: plain\\n  logLevel: warn,linkerd=info\\n  opaquePorts: 25,587,3306,4444,5432,6379,9300,11211\\n  outboundConnectTimeout: 1000ms\\n  ports:\\n    admin: 4191\\n    control: 4190\\n    inbound: 4143\\n    outbound: 4140\\n  requireIdentityOnInboundPorts: \\"\\"\\n  resources:\\n    cpu:\\n      limit: \\"\\"\\n      request: \\"\\"\\n    ephemeral-storage:\\n      limit: \\"\\"\\n      request: \\"\\"\\n    memory:\\n      limit: \\"\\"\\n      request: \\"\\"\\n  shutdownGracePeriod: \\"\\"\\n  uid: 2102\\n  waitBeforeExitSeconds: 0\\nproxyInit:\\n  closeWaitTimeoutSecs: 0\\n  ignoreInboundPorts: 4567,4568\\n  ignoreOutboundPorts: 4567,4568\\n  image:\\n    name: cr.l5d.io/linkerd/proxy-init\\n    pullPolicy: \\"\\"\\n    version: v2.0.0\\n  iptablesMode: legacy\\n  logFormat: \\"\\"\\n  logLevel: \\"\\"\\n  resources:\\n    cpu:\\n      limit: 100m\\n      request: 100m\\n    ephemeral-storage:\\n      limit: \\"\\"\\n      request: \\"\\"\\n    memory:\\n      limit: 20Mi\\n      request: 20Mi\\n  runAsRoot: false\\n  runAsUser: 65534\\n  skipSubnets: \\"\\"\\n  xtMountPath:\\n    mountPath: /run\\n    name: linkerd-proxy-init-xtables-lock\\nproxyInjector:\\n  caBundle: \\"\\"\\n  crtPEM: \\"\\"\\n  externalSecret: false\\n  injectCaFrom: \\"\\"\\n  injectCaFromSecret: \\"\\"\\n  namespaceSelector:\\n    matchExpressions:\\n    - key: config.linkerd.io/admission-webhooks\\n      operator: NotIn\\n      values:\\n      - disabled\\n    - key: kubernetes.io/metadata.name\\n      operator: NotIn\\n      values:\\n      - kube-system\\n      - cert-manager\\n  objectSelector:\\n    matchExpressions:\\n    - key: linkerd.io/control-plane-component\\n      operator: DoesNotExist\\n    - key: linkerd.io/cni-resource\\n      operator: DoesNotExist\\nruntimeClassName: \\"\\"\\nwebhookFailurePolicy: Ignore\\n"},"kind":"ConfigMap","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"controller","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-config","namespace":"linkerd"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-config",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-configmap-linkerd-linkerd-config.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "batch/v1",
    "kind": "CronJob",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"batch/v1","kind":"CronJob","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"heartbeat","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1","linkerd.io/control-plane-component":"heartbeat","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-heartbeat","namespace":"linkerd"},"spec":{"concurrencyPolicy":"Replace","jobTemplate":{"spec":{"template":{"metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"linkerd.io/control-plane-component":"heartbeat","linkerd.io/workload-ns":"linkerd"}},"spec":{"containers":[{"args":["heartbeat","-controller-namespace=linkerd","-log-level=info","-log-format=plain","-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090"],"env":[{"name":"LINKERD_DISABLED","value":"the heartbeat controller does not use the proxy"}],"image":"cr.l5d.io/linkerd/controller:stable-2.12.1","imagePullPolicy":"IfNotPresent","name":"heartbeat","securityContext":{"allowPrivilegeEscalation":false,"runAsUser":2103}}],"nodeSelector":{"kubernetes.io/os":"linux"},"restartPolicy":"Never","serviceAccountName":"linkerd-heartbeat"}}}},"schedule":"06 07 * * *","successfulJobsHistoryLimit":0}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/batch_v1-cronjob-linkerd-linkerd-heartbeat.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"argoproj.io/v1alpha1","kind":"Application","metadata":{"annotations":{"finalizers":["resources-finalizer.argocd.argoproj.io"]},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"fluvio-sys","namespace":"argocd"},"spec":{"destination":{"namespace":"fluvio-sys","server":"https://kubernetes.default.svc"},"project":"default","source":{"directory":{"recurse":true},"path":"generatedManifests/local/infrastructure/fluvio-sys","repoURL":"https://github.com/Oyelowo/modern-distributed-app-template","targetRevision":"HEAD"},"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}
",
      },
      "name": "fluvio-sys",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-fluvio-sys.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure",
    "spec": {},
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"argoproj.io/v1alpha1","kind":"Application","metadata":{"annotations":{"finalizers":["resources-finalizer.argocd.argoproj.io"]},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"linkerd","namespace":"argocd"},"spec":{"destination":{"namespace":"linkerd","server":"https://kubernetes.default.svc"},"project":"default","source":{"directory":{"recurse":true},"path":"generatedManifests/local/infrastructure/linkerd","repoURL":"https://github.com/Oyelowo/modern-distributed-app-template","targetRevision":"HEAD"},"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}
",
      },
      "name": "linkerd",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-linkerd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure",
    "spec": {},
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"argoproj.io/v1alpha1","kind":"Application","metadata":{"annotations":{"finalizers":["resources-finalizer.argocd.argoproj.io"]},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"sealed-secrets","namespace":"argocd"},"spec":{"destination":{"namespace":"default","server":"https://kubernetes.default.svc"},"project":"default","source":{"directory":{"recurse":true},"path":"generatedManifests/local/infrastructure/sealed-secrets","repoURL":"https://github.com/Oyelowo/modern-distributed-app-template","targetRevision":"HEAD"},"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}
",
      },
      "name": "sealed-secrets",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-sealed-secrets.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure",
    "spec": {},
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"argoproj.io/v1alpha1","kind":"Application","metadata":{"annotations":{"finalizers":["resources-finalizer.argocd.argoproj.io"]},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"nginx-ingress","namespace":"argocd"},"spec":{"destination":{"namespace":"default","server":"https://kubernetes.default.svc"},"project":"default","source":{"directory":{"recurse":true},"path":"generatedManifests/local/infrastructure/nginx-ingress","repoURL":"https://github.com/Oyelowo/modern-distributed-app-template","targetRevision":"HEAD"},"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}
",
      },
      "name": "nginx-ingress",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-nginx-ingress.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure",
    "spec": {},
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"argoproj.io/v1alpha1","kind":"Application","metadata":{"annotations":{"finalizers":["resources-finalizer.argocd.argoproj.io"]},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"linkerd-viz","namespace":"argocd"},"spec":{"destination":{"namespace":"linkerd-viz","server":"https://kubernetes.default.svc"},"project":"default","source":{"directory":{"recurse":true},"path":"generatedManifests/local/infrastructure/linkerd-viz","repoURL":"https://github.com/Oyelowo/modern-distributed-app-template","targetRevision":"HEAD"},"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}
",
      },
      "name": "linkerd-viz",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-linkerd-viz.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure",
    "spec": {},
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"argoproj.io/v1alpha1","kind":"Application","metadata":{"annotations":{"finalizers":["resources-finalizer.argocd.argoproj.io"]},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"seaweedfs","namespace":"argocd"},"spec":{"destination":{"namespace":"seaweedfs","server":"https://kubernetes.default.svc"},"project":"default","source":{"directory":{"recurse":true},"path":"generatedManifests/local/infrastructure/seaweedfs","repoURL":"https://github.com/Oyelowo/modern-distributed-app-template","targetRevision":"HEAD"},"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}
",
      },
      "name": "seaweedfs",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-seaweedfs.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure",
    "spec": {},
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"argoproj.io/v1alpha1","kind":"Application","metadata":{"annotations":{"finalizers":["resources-finalizer.argocd.argoproj.io"]},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"rook-ceph","namespace":"argocd"},"spec":{"destination":{"namespace":"rook-ceph","server":"https://kubernetes.default.svc"},"project":"default","source":{"directory":{"recurse":true},"path":"generatedManifests/local/infrastructure/rook-ceph","repoURL":"https://github.com/Oyelowo/modern-distributed-app-template","targetRevision":"HEAD"},"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}
",
      },
      "name": "rook-ceph",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-rook-ceph.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure",
    "spec": {},
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"argoproj.io/v1alpha1","kind":"Application","metadata":{"annotations":{"finalizers":["resources-finalizer.argocd.argoproj.io"]},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"namespaces","namespace":"argocd"},"spec":{"destination":{"namespace":"default","server":"https://kubernetes.default.svc"},"project":"default","source":{"directory":{"recurse":true},"path":"generatedManifests/local/infrastructure/namespaces","repoURL":"https://github.com/Oyelowo/modern-distributed-app-template","targetRevision":"HEAD"},"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}
",
      },
      "name": "namespaces",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-namespaces.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure",
    "spec": {},
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"argoproj.io/v1alpha1","kind":"Application","metadata":{"annotations":{"finalizers":["resources-finalizer.argocd.argoproj.io"]},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"cert-manager","namespace":"argocd"},"spec":{"destination":{"namespace":"cert-manager","server":"https://kubernetes.default.svc"},"project":"default","source":{"directory":{"recurse":true},"path":"generatedManifests/local/infrastructure/cert-manager","repoURL":"https://github.com/Oyelowo/modern-distributed-app-template","targetRevision":"HEAD"},"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}
",
      },
      "name": "cert-manager",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-cert-manager.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure",
    "spec": {},
  },
  {
    "apiVersion": "argoproj.io/v1alpha1",
    "kind": "Application",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"argoproj.io/v1alpha1","kind":"Application","metadata":{"annotations":{"finalizers":["resources-finalizer.argocd.argoproj.io"]},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"tikv-operator","namespace":"argocd"},"spec":{"destination":{"namespace":"tikv-admin","server":"https://kubernetes.default.svc"},"project":"default","source":{"directory":{"recurse":true},"path":"generatedManifests/local/infrastructure/tikv-operator","repoURL":"https://github.com/Oyelowo/modern-distributed-app-template","targetRevision":"HEAD"},"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}
",
      },
      "name": "tikv-operator",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure/1-manifest/argoproj.io_v1alpha1-application-argocd-tikv-operator.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-children-infrastructure",
    "spec": {},
  },
  {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "MutatingWebhookConfiguration",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"admissionregistration.k8s.io/v1","kind":"MutatingWebhookConfiguration","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/extension":"viz"},"name":"linkerd-tap-injector-webhook-config"},"webhooks":[{"admissionReviewVersions":["v1","v1beta1"],"clientConfig":{"caBundle":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRVjBUQjdVdWxQSWsvUXJUT0xMVFE2ekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TVRBeApNakEyTlRZeE1sb1hEVEl6TVRBeE1qQTJOVFl4TWxvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU0vcU5OVnFxOW10THBQQlhsd3gxZllWM3lDdk9KYUs4MkwwNENnMnduVG9RNDk0djhvTDlFM3RrZHJSVjIyeAp5U3BOcGdoNlRWTldEVnNzZmdVWHFuUHhib0lWRTdmNmVBalZDTlp3S0RWMWxjalZGYjIybVI3WGxhMHllTTA4CmdhdTZzSUNsUkdzVXQzT1JQUDJzdEorWjZ5bWs5V3d0V0FyOTdZWUVzUFJaRFBhMFNpRGdUeHVRNHlnYXVpWXIKRng1bUM3aVg0NVRIVTRPRWlKOCtTcUdvcWwxa3BUZTdMTW9haWpxZzVwS2phNGhuMVpQbGQ4QjZUZHNLaTFvNQpmUFRuMGhwc1VONGhLMDBCZ0VIa1Mwdm5ZU3B2dGI0eXd6VlgyL0pSNm85RDh1MjFYQmR1TGc2WGRyOTBxYmZICi9Ebmo5UkYzM2FCcmJuS2pQVytxa2VrQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSDQxV2tINGYzU0NteEtqU3J5eUJPTkFyNUVRY2E3TG1uNll6aytid3hKRk1ZSlcxZUw4alNJMU8rS2MKblRYZ0dpSUozMlB5bm8vdVNoNTNIOWtjZUgxMG5FRWdITDFRQkMwN3BJS1RYdGF1NmdLMXFraU1GTTBqZW8raQpQVC9iZkxycFpkRDJpd3JueWlpVEhWS3VCeDR4QWVZWGRFbUJLb1A1UjAzSGlEZFoybVBveElRQVMxd3MzKzY5Cm4wTE5hc1V0ZGx5eFlWeFhyOVovNzZGZENrM2JSZzVmVnRFMnJnNnJhTW0yS3hweTRLMU1VOVFTTU9Pa2gzL2YKNWNINzA1dHRIZ3pOL3BKNW81N0xtbVoyeDhPR1BQM1ZmOHZCd1FTa2s4RmZxSXQzMEJhK3hDdmdCV3kxLzlEcApFUlZkZ3FoYlNUejJoTEFSTXFWd2xzTXVSVU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=","service":{"name":"tap-injector","namespace":"linkerd-viz","path":"/"}},"failurePolicy":"Ignore","name":"tap-injector.linkerd.io","reinvocationPolicy":"IfNeeded","rules":[{"apiGroups":[""],"apiVersions":["v1"],"operations":["CREATE"],"resources":["pods"]}],"sideEffects":"None"}]}
",
      },
      "name": "linkerd-tap-injector-webhook-config",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/admissionregistration.k8s.io_v1-mutatingwebhookconfiguration-default-linkerd-tap-injector-webhook-config.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "config.linkerd.io/proxy-await": "enabled",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.linkerd.io/proxy-await":"enabled","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"tap-injector","app.kubernetes.io/part-of":"Linkerd","component":"tap-injector","linkerd.io/extension":"viz"},"name":"tap-injector","namespace":"linkerd-viz"},"spec":{"replicas":1,"selector":{"matchLabels":{"component":"tap-injector"}},"template":{"metadata":{"annotations":{"checksum/config":"cfd04d1231612586e990320c0bc6e1548f0d255b13326754efa28d3c216c1612","cluster-autoscaler.kubernetes.io/safe-to-evict":"true","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"component":"tap-injector","linkerd.io/extension":"viz"}},"spec":{"containers":[{"args":["injector","-tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local","-log-level=info","-log-format=plain","-enable-pprof=false"],"image":"cr.l5d.io/linkerd/tap:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9995},"initialDelaySeconds":10},"name":"tap-injector","ports":[{"containerPort":8443,"name":"tap-injector"},{"containerPort":9995,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9995}},"securityContext":{"runAsUser":2103},"volumeMounts":[{"mountPath":"/var/run/linkerd/tls","name":"tls","readOnly":true}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"tap-injector","volumes":[{"name":"tls","secret":{"secretName":"tap-injector-k8s-tls"}}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
        "linkerd.io/inject": "enabled",
      },
      "name": "tap-injector",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-tap-injector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "cfd04d1231612586e990320c0bc6e1548f0d255b13326754efa28d3c216c1612",
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "true",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/inject": "enabled",
          },
          "labels": {
            "component": "tap-injector",
            "linkerd.io/extension": "viz",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "injector",
                "-tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local",
                "-log-level=info",
                "-log-format=plain",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/tap:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9995,
                },
                "initialDelaySeconds": 10,
              },
              "name": "tap-injector",
              "ports": [
                {
                  "containerPort": 8443,
                  "name": "tap-injector",
                },
                {
                  "containerPort": 9995,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9995,
                },
              },
              "securityContext": {
                "runAsUser": 2103,
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "tap-injector",
          "volumes": [
            {
              "name": "tls",
              "secret": {
                "secretName": "tap-injector-k8s-tls",
              },
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"prometheus","linkerd.io/extension":"viz","namespace":"linkerd-viz"},"name":"prometheus","namespace":"linkerd-viz"}}
",
      },
      "name": "prometheus",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-serviceaccount-linkerd-viz-prometheus.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "v1",
    "data": {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRVjBUQjdVdWxQSWsvUXJUT0xMVFE2ekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TVRBeApNakEyTlRZeE1sb1hEVEl6TVRBeE1qQTJOVFl4TWxvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU0vcU5OVnFxOW10THBQQlhsd3gxZllWM3lDdk9KYUs4MkwwNENnMnduVG9RNDk0djhvTDlFM3RrZHJSVjIyeAp5U3BOcGdoNlRWTldEVnNzZmdVWHFuUHhib0lWRTdmNmVBalZDTlp3S0RWMWxjalZGYjIybVI3WGxhMHllTTA4CmdhdTZzSUNsUkdzVXQzT1JQUDJzdEorWjZ5bWs5V3d0V0FyOTdZWUVzUFJaRFBhMFNpRGdUeHVRNHlnYXVpWXIKRng1bUM3aVg0NVRIVTRPRWlKOCtTcUdvcWwxa3BUZTdMTW9haWpxZzVwS2phNGhuMVpQbGQ4QjZUZHNLaTFvNQpmUFRuMGhwc1VONGhLMDBCZ0VIa1Mwdm5ZU3B2dGI0eXd6VlgyL0pSNm85RDh1MjFYQmR1TGc2WGRyOTBxYmZICi9Ebmo5UkYzM2FCcmJuS2pQVytxa2VrQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSDQxV2tINGYzU0NteEtqU3J5eUJPTkFyNUVRY2E3TG1uNll6aytid3hKRk1ZSlcxZUw4alNJMU8rS2MKblRYZ0dpSUozMlB5bm8vdVNoNTNIOWtjZUgxMG5FRWdITDFRQkMwN3BJS1RYdGF1NmdLMXFraU1GTTBqZW8raQpQVC9iZkxycFpkRDJpd3JueWlpVEhWS3VCeDR4QWVZWGRFbUJLb1A1UjAzSGlEZFoybVBveElRQVMxd3MzKzY5Cm4wTE5hc1V0ZGx5eFlWeFhyOVovNzZGZENrM2JSZzVmVnRFMnJnNnJhTW0yS3hweTRLMU1VOVFTTU9Pa2gzL2YKNWNINzA1dHRIZ3pOL3BKNW81N0xtbVoyeDhPR1BQM1ZmOHZCd1FTa2s4RmZxSXQzMEJhK3hDdmdCV3kxLzlEcApFUlZkZ3FoYlNUejJoTEFSTXFWd2xzTXVSVU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeitvMDFXcXIyYTB1azhGZVhESFY5aFhmSUs4NGxvcnpZdlRnS0RiQ2RPaERqM2kvCnlndjBUZTJSMnRGWGJiSEpLazJtQ0hwTlUxWU5XeXgrQlJlcWMvRnVnaFVUdC9wNENOVUkxbkFvTlhXVnlOVVYKdmJhWkh0ZVZyVEo0elR5QnE3cXdnS1ZFYXhTM2M1RTgvYXkwbjVuckthVDFiQzFZQ3YzdGhnU3c5RmtNOXJSSwpJT0JQRzVEaktCcTZKaXNYSG1ZTHVKZmpsTWRUZzRTSW56NUtvYWlxWFdTbE43c3N5aHFLT3FEbWtxTnJpR2ZWCmsrVjN3SHBOMndxTFdqbDg5T2ZTR214UTNpRXJUUUdBUWVSTFMrZGhLbSsxdmpMRE5WZmI4bEhxajBQeTdiVmMKRjI0dURwZDJ2M1NwdDhmOE9lUDFFWGZkb0d0dWNxTTliNnFSNlFJREFRQUJBb0lCQUFaejdHUGJSYTRoMDlvKwpIQ0djWWxtYTRDdnhoRDRYM2VucVU3S3IwR2swZERSVnVRNGFST0RPU01LVDBMVFUyYnQ0WVhqTjR1eDlOVGpwCkxwZ1YzZkp2UWRERHVyTHhFUnlsRC9zbnkvZXN5Sk5OR2Jtam15ajc0K2RXTTYyYS9TTkpUZ1VRSEFsK3dSclQKSFNONllyaTVYRFVVcTVGSjd2dVlXZkRZNEcwVThDSDFUdFRHblFJM05rUVJjcEtYSnZaOWtxSkRLTCtVeDRKZQo1WVdTdFlza0VkalVQMlNzK0RiRzhoMGFxSEV1ZUxPT2xxTWpyd2hSNVFQdkJFeVV0OFpZbTNNWFR1bTI2OEt5CkU5NkdJWEgva1JyR1BjMTFaaVRzWk9rQXZyVlBSSmRDanRBMTNIdHVPcU9lSzF4cStJK05ESEVYaDUyeVQwZ1kKWnA0UHpra0NnWUVBNWpHZmtuV2hUTy9JVGNqNnpFRHc1eFQwN0ZucUg3Mks4TTJLSjdoeGhnd0ZkTVJ4UURUVwpOLzBRSGdMRzQzcXoxZk02RGZBbEZjc1lka1lZZGNqQUpUWUVnSzVRSDIxemhNdkp4ZzRFclQ3RjFmVHlXM0FQCmRENmZhdk5SUnRvRTQrQWQzVGRieUR0QStBV0JoRDhsQWh4M29RQjRxM0ROaWVFcTZUYUpvS01DZ1lFQTV6a3gKMFZWNnNZUWNHQnJ4eUtMT3dsVGtCSFRiTXdJV2ZZQVBDSDBNVUE2REhkS1ZPUmgvSml1S3NDMHVwYm10WllBZgpxTFpXbzJmTVoxWUM2NVRldmM5MEZVeU10amhRVS8wVnJJaTBFdFZmbEhyTGtMYjBTV0trRXEwOGxkdENWL3hVCmgxWkxzL0sycE1GbVQ2KzR3T2ljYUhBbW9JbDlqS3F1bkdpbWtBTUNnWUI4cCs3RC8xTmtPSTErSWhJK3ZnUTIKLzFCTEZiNEZoajFSZmQwTStZTHdsbDMyQjlOVWM4aDE5V0xlL1ozNjNoMjVCTWd4ZUJSOUlzaVNkQThXNmFtegovUGFmUU1ZKzNxU3FDem12T1RRckpVMDVPalpzY2RqTW1JVDRBOS9Gd0piWldDcVQrMENHeEIvQXNDcWRGUnpUCmNkc09veFMxc3BaN3ppWFF1U242aFFLQmdEcFMxL2tZbWFrN1RLYmI3UThSMmh0MHRFdFhlbzhrUUs0SlprRmEKNFljMEVlaXMzSTBaVzhFeURIcWgrdms4bTd0VmxTYkdUNVpLTVdvRGJSc2xZd1gzMVMwbU1Qd3B1a0ZsUGxsVgo1aTQxK2pVR3dHQlJkYzhvL1gva2lMcTRJc1QwMWhHSk4vRTlFTXNBS2FHQ0RwVkNWMm1VbUhtNEZKNHQwM3VLCmZqRW5Bb0dCQUxhMkdTNWExTUQ3WHdzY1pkQ05pU0JuYi9IVFc4VzZ0M1Q4eHIyQXArZkV2bEQvNVNHaC9NK1cKVEdFS25keTJlZXVQREs1ZTg1N3RxUnovcGsxeDFYR3lRMVRIbFVqK2V4aER5VWxDcE1xQkhTTFA2TjlzZDRkZApyRi9uVXR4ckJTY0pVc2Q0M2UwOTlGN0FJWVZJSGUwbVZudkQxUGs3bU80TWpyUnZucm5LCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRVjBUQjdVdWxQSWsvUXJUT0xMVFE2ekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TVRBeApNakEyTlRZeE1sb1hEVEl6TVRBeE1qQTJOVFl4TWxvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU0vcU5OVnFxOW10THBQQlhsd3gxZllWM3lDdk9KYUs4MkwwNENnMnduVG9RNDk0djhvTDlFM3RrZHJSVjIyeAp5U3BOcGdoNlRWTldEVnNzZmdVWHFuUHhib0lWRTdmNmVBalZDTlp3S0RWMWxjalZGYjIybVI3WGxhMHllTTA4CmdhdTZzSUNsUkdzVXQzT1JQUDJzdEorWjZ5bWs5V3d0V0FyOTdZWUVzUFJaRFBhMFNpRGdUeHVRNHlnYXVpWXIKRng1bUM3aVg0NVRIVTRPRWlKOCtTcUdvcWwxa3BUZTdMTW9haWpxZzVwS2phNGhuMVpQbGQ4QjZUZHNLaTFvNQpmUFRuMGhwc1VONGhLMDBCZ0VIa1Mwdm5ZU3B2dGI0eXd6VlgyL0pSNm85RDh1MjFYQmR1TGc2WGRyOTBxYmZICi9Ebmo5UkYzM2FCcmJuS2pQVytxa2VrQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSDQxV2tINGYzU0NteEtqU3J5eUJPTkFyNUVRY2E3TG1uNll6aytid3hKRk1ZSlcxZUw4alNJMU8rS2MKblRYZ0dpSUozMlB5bm8vdVNoNTNIOWtjZUgxMG5FRWdITDFRQkMwN3BJS1RYdGF1NmdLMXFraU1GTTBqZW8raQpQVC9iZkxycFpkRDJpd3JueWlpVEhWS3VCeDR4QWVZWGRFbUJLb1A1UjAzSGlEZFoybVBveElRQVMxd3MzKzY5Cm4wTE5hc1V0ZGx5eFlWeFhyOVovNzZGZENrM2JSZzVmVnRFMnJnNnJhTW0yS3hweTRLMU1VOVFTTU9Pa2gzL2YKNWNINzA1dHRIZ3pOL3BKNW81N0xtbVoyeDhPR1BQM1ZmOHZCd1FTa2s4RmZxSXQzMEJhK3hDdmdCV3kxLzlEcApFUlZkZ3FoYlNUejJoTEFSTXFWd2xzTXVSVU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeitvMDFXcXIyYTB1azhGZVhESFY5aFhmSUs4NGxvcnpZdlRnS0RiQ2RPaERqM2kvCnlndjBUZTJSMnRGWGJiSEpLazJtQ0hwTlUxWU5XeXgrQlJlcWMvRnVnaFVUdC9wNENOVUkxbkFvTlhXVnlOVVYKdmJhWkh0ZVZyVEo0elR5QnE3cXdnS1ZFYXhTM2M1RTgvYXkwbjVuckthVDFiQzFZQ3YzdGhnU3c5RmtNOXJSSwpJT0JQRzVEaktCcTZKaXNYSG1ZTHVKZmpsTWRUZzRTSW56NUtvYWlxWFdTbE43c3N5aHFLT3FEbWtxTnJpR2ZWCmsrVjN3SHBOMndxTFdqbDg5T2ZTR214UTNpRXJUUUdBUWVSTFMrZGhLbSsxdmpMRE5WZmI4bEhxajBQeTdiVmMKRjI0dURwZDJ2M1NwdDhmOE9lUDFFWGZkb0d0dWNxTTliNnFSNlFJREFRQUJBb0lCQUFaejdHUGJSYTRoMDlvKwpIQ0djWWxtYTRDdnhoRDRYM2VucVU3S3IwR2swZERSVnVRNGFST0RPU01LVDBMVFUyYnQ0WVhqTjR1eDlOVGpwCkxwZ1YzZkp2UWRERHVyTHhFUnlsRC9zbnkvZXN5Sk5OR2Jtam15ajc0K2RXTTYyYS9TTkpUZ1VRSEFsK3dSclQKSFNONllyaTVYRFVVcTVGSjd2dVlXZkRZNEcwVThDSDFUdFRHblFJM05rUVJjcEtYSnZaOWtxSkRLTCtVeDRKZQo1WVdTdFlza0VkalVQMlNzK0RiRzhoMGFxSEV1ZUxPT2xxTWpyd2hSNVFQdkJFeVV0OFpZbTNNWFR1bTI2OEt5CkU5NkdJWEgva1JyR1BjMTFaaVRzWk9rQXZyVlBSSmRDanRBMTNIdHVPcU9lSzF4cStJK05ESEVYaDUyeVQwZ1kKWnA0UHpra0NnWUVBNWpHZmtuV2hUTy9JVGNqNnpFRHc1eFQwN0ZucUg3Mks4TTJLSjdoeGhnd0ZkTVJ4UURUVwpOLzBRSGdMRzQzcXoxZk02RGZBbEZjc1lka1lZZGNqQUpUWUVnSzVRSDIxemhNdkp4ZzRFclQ3RjFmVHlXM0FQCmRENmZhdk5SUnRvRTQrQWQzVGRieUR0QStBV0JoRDhsQWh4M29RQjRxM0ROaWVFcTZUYUpvS01DZ1lFQTV6a3gKMFZWNnNZUWNHQnJ4eUtMT3dsVGtCSFRiTXdJV2ZZQVBDSDBNVUE2REhkS1ZPUmgvSml1S3NDMHVwYm10WllBZgpxTFpXbzJmTVoxWUM2NVRldmM5MEZVeU10amhRVS8wVnJJaTBFdFZmbEhyTGtMYjBTV0trRXEwOGxkdENWL3hVCmgxWkxzL0sycE1GbVQ2KzR3T2ljYUhBbW9JbDlqS3F1bkdpbWtBTUNnWUI4cCs3RC8xTmtPSTErSWhJK3ZnUTIKLzFCTEZiNEZoajFSZmQwTStZTHdsbDMyQjlOVWM4aDE5V0xlL1ozNjNoMjVCTWd4ZUJSOUlzaVNkQThXNmFtegovUGFmUU1ZKzNxU3FDem12T1RRckpVMDVPalpzY2RqTW1JVDRBOS9Gd0piWldDcVQrMENHeEIvQXNDcWRGUnpUCmNkc09veFMxc3BaN3ppWFF1U242aFFLQmdEcFMxL2tZbWFrN1RLYmI3UThSMmh0MHRFdFhlbzhrUUs0SlprRmEKNFljMEVlaXMzSTBaVzhFeURIcWgrdms4bTd0VmxTYkdUNVpLTVdvRGJSc2xZd1gzMVMwbU1Qd3B1a0ZsUGxsVgo1aTQxK2pVR3dHQlJkYzhvL1gva2lMcTRJc1QwMWhHSk4vRTlFTXNBS2FHQ0RwVkNWMm1VbUhtNEZKNHQwM3VLCmZqRW5Bb0dCQUxhMkdTNWExTUQ3WHdzY1pkQ05pU0JuYi9IVFc4VzZ0M1Q4eHIyQXArZkV2bEQvNVNHaC9NK1cKVEdFS25keTJlZXVQREs1ZTg1N3RxUnovcGsxeDFYR3lRMVRIbFVqK2V4aER5VWxDcE1xQkhTTFA2TjlzZDRkZApyRi9uVXR4ckJTY0pVc2Q0M2UwOTlGN0FJWVZJSGUwbVZudkQxUGs3bU80TWpyUnZucm5LCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/extension":"viz"},"name":"tap-injector-k8s-tls","namespace":"linkerd-viz"},"type":"kubernetes.io/tls"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "tap-injector-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-secret-linkerd-viz-tap-injector-k8s-tls.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "type": "kubernetes.io/tls",
  },
  {
    "apiVersion": "policy.linkerd.io/v1alpha1",
    "kind": "AuthorizationPolicy",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"policy.linkerd.io/v1alpha1","kind":"AuthorizationPolicy","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/extension":"viz"},"name":"admin","namespace":"linkerd-viz"},"spec":{"requiredAuthenticationRefs":[{"group":"policy.linkerd.io","kind":"NetworkAuthentication","name":"kubelet"}],"targetRef":{"group":"policy.linkerd.io","kind":"Server","name":"admin"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "admin",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1alpha1-authorizationpolicy-linkerd-viz-admin.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "policy.linkerd.io/v1alpha1",
    "kind": "MeshTLSAuthentication",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"policy.linkerd.io/v1alpha1","kind":"MeshTLSAuthentication","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"metrics-api","linkerd.io/extension":"viz"},"name":"metrics-api-web","namespace":"linkerd-viz"},"spec":{"identityRefs":[{"kind":"ServiceAccount","name":"web"}]}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "metrics-api-web",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1alpha1-meshtlsauthentication-linkerd-viz-metrics-api-web.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "policy.linkerd.io/v1alpha1",
    "kind": "AuthorizationPolicy",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"policy.linkerd.io/v1alpha1","kind":"AuthorizationPolicy","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"tap","linkerd.io/extension":"viz"},"name":"tap","namespace":"linkerd-viz"},"spec":{"requiredAuthenticationRefs":[{"group":"policy.linkerd.io","kind":"NetworkAuthentication","name":"kube-api-server"}],"targetRef":{"group":"policy.linkerd.io","kind":"Server","name":"tap-api"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "tap",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1alpha1-authorizationpolicy-linkerd-viz-tap.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"web","linkerd.io/extension":"viz","namespace":"linkerd-viz"},"name":"web","namespace":"linkerd-viz"},"spec":{"ports":[{"name":"http","port":8084,"targetPort":8084},{"name":"admin-http","port":9994,"targetPort":9994}],"selector":{"component":"web","linkerd.io/extension":"viz"},"type":"ClusterIP"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
        "linkerd.io/inject": "enabled",
      },
      "name": "web",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-service-linkerd-viz-web.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "config.linkerd.io/proxy-await": "enabled",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.linkerd.io/proxy-await":"enabled","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"tap","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1","component":"tap","linkerd.io/extension":"viz","namespace":"linkerd-viz"},"name":"tap","namespace":"linkerd-viz"},"spec":{"replicas":1,"selector":{"matchLabels":{"component":"tap","linkerd.io/extension":"viz","namespace":"linkerd-viz"}},"template":{"metadata":{"annotations":{"checksum/config":"c2a0e575aa8712adfb416c29b9939b360d11762d9cd1093fdbf4ea22ee39ab0d","cluster-autoscaler.kubernetes.io/safe-to-evict":"true","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"component":"tap","linkerd.io/extension":"viz","namespace":"linkerd-viz"}},"spec":{"containers":[{"args":["api","-api-namespace=linkerd","-log-level=info","-log-format=plain","-identity-trust-domain=cluster.local","-enable-pprof=false"],"image":"cr.l5d.io/linkerd/tap:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9998},"initialDelaySeconds":10},"name":"tap","ports":[{"containerPort":8088,"name":"grpc"},{"containerPort":8089,"name":"apiserver"},{"containerPort":9998,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9998}},"securityContext":{"runAsUser":2103},"volumeMounts":[{"mountPath":"/var/run/linkerd/tls","name":"tls","readOnly":true}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"tap","volumes":[{"name":"tls","secret":{"secretName":"tap-k8s-tls"}}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
        "linkerd.io/inject": "enabled",
      },
      "name": "tap",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-tap.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "c2a0e575aa8712adfb416c29b9939b360d11762d9cd1093fdbf4ea22ee39ab0d",
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "true",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/inject": "enabled",
          },
          "labels": {
            "component": "tap",
            "linkerd.io/extension": "viz",
            "namespace": "linkerd-viz",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "api",
                "-api-namespace=linkerd",
                "-log-level=info",
                "-log-format=plain",
                "-identity-trust-domain=cluster.local",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/tap:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9998,
                },
                "initialDelaySeconds": 10,
              },
              "name": "tap",
              "ports": [
                {
                  "containerPort": 8088,
                  "name": "grpc",
                },
                {
                  "containerPort": 8089,
                  "name": "apiserver",
                },
                {
                  "containerPort": 9998,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9998,
                },
              },
              "securityContext": {
                "runAsUser": 2103,
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "tap",
          "volumes": [
            {
              "name": "tls",
              "secret": {
                "secretName": "tap-k8s-tls",
              },
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQU9CZ01Yay9yZ1pxNFZ3a21NZ2krZ1l3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpFd01USXdOalUyTVRKYQpGdzB5TXpFd01USXdOalUyTVRKYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUMrdE1DYzBuaVd1eFhzYzRHU0tzZkIKNkt5ZkhCSVZrSG1Fc1c4WGlIWlVqa213NzgyVUcySWpXK2krNm0rcDBHQkNuc1JHU2x0ajBmTHlHekJKV2U0Mgord09zdi95NDF3c1hnNEJjY0wyWnRiVS9DNzRWNDZXUTgwcnFVbVRJVHg0enBxTWJ1YXVvMkRXdkNwVWV4L1k1Cm43WjBkeTY5QXNZMW9nK3dJUGRvbzNoRElIUlZOc0pjN0tjdFJ3QWk3MFRuUnNONWxoNGtkdjA0MWIxMHpuZDcKSFBpTm5IVmFOZFJwRGVZcXE0cytKTDFiWEJVeWNDVDV0NFVnK29mYTNraS9TNVFrQUxFUzNiMURhVE5hUnh3SgphWFBUS1JpVWFUQ1c4Mmxwa1FPTWIwSy8wT0toZk9YQkFVZ2Ztb2orWTBuK3hZRFFNc2tTZUNWTWpPUFVhNjNCCkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQmdTZ3JLVFJ1QXFCN1hxazBxQk5KeWx2eWo1SjNDCjJvbDA2K1FRNEdNa1I2QTJlZklaMDJTbzhUbE5sNVhMNTFkUGt3VFIvUWNBd3A5UmdaWHFvZFQvcGdZbnhnMVcKRnJvb1VsdVY2anNyYlJlZ0RaOGVwTnl6Wm9RM3pwU013K3UwZldRSmlsVzZxbEVTZ1hWeEF1N3lIZnZHRHpISQpMT3hrY3p2YzQvaytkNXNpc2IxdnFWWEdsUjFDOFNGYU85V2o0Y2VkZEUzaFBXN2o2M3BMV0NxZCtyWkoyVnRnCnorL0ZzMFVnbUlCVnh1YmhmWjd5UGhqYWJTcFd6U3hCRCtQSzgvb25FM3N6RWo4dktMQmljbXFaTEhHTENQUXUKckdZM1g5ajZ4UW1jdE0zQ2hvck5FWmFXV2I1WDBrNnVrajRxSlJRc21QV0xCRSszSlZMUkIycG8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdnJUQW5OSjRscnNWN0hPQmtpckh3ZWlzbnh3U0ZaQjVoTEZ2RjRoMlZJNUpzTy9OCmxCdGlJMXZvdnVwdnFkQmdRcDdFUmtwYlk5SHk4aHN3U1ZudU52c0RyTC84dU5jTEY0T0FYSEM5bWJXMVB3dSsKRmVPbGtQTks2bEpreUU4ZU02YWpHN21ycU5nMXJ3cVZIc2YyT1orMmRIY3V2UUxHTmFJUHNDRDNhS040UXlCMApWVGJDWE95bkxVY0FJdTlFNTBiRGVaWWVKSGI5T05XOWRNNTNleHo0alp4MVdqWFVhUTNtS3F1TFBpUzlXMXdWCk1uQWsrYmVGSVBxSDJ0NUl2MHVVSkFDeEV0MjlRMmt6V2tjY0NXbHoweWtZbEdrd2x2TnBhWkVEakc5Q3Y5RGkKb1h6bHdRRklINXFJL21OSi9zV0EwRExKRW5nbFRJemoxR3V0d1FJREFRQUJBb0lCQUVFU04rN0t1aTdrWTFTdApEUGNzOWNBcWZreEVMYitCN3BUaVhqK3Zab0R2bENGMWtiWUpxZkRhdVkzN1BHSzdJVDFhSXlyQTBISTgveUt4Ck9FYXZFdU5idnlOQTF5RFM3NHYwYU9ZaDZlLzYybjlLcUcrYm43RFg4eVlGT3pKR0hNNE8rL1RINDlUWEFXcGEKdUFzcXU4OXB1YjMvdE1qMW0yQk5qZ0RSSHRwcTVoL0RsTWxOVkIyUEVlRGJrN1p1SWVkbENJNUhmZ0ZmVTJKUwpyY3FEaVM3MnB3N1duVkFKYmZsZ2RMMUVTNmpVa3RNaU0xa09RY2dWbm0yV3pLTGZjQUVWaWJaZ1E0ZkFwMlB6CktkMHIxL3h3cmlKNmFEYUtpRG91cVUyaWFjM29QRTZzU0M4QkU2dmZmYnZoTDV4c1hKOHloNU1EMHFjY2o1QXYKYy95MVFZRUNnWUVBMzc3d0NqditqZjdrT2xHR3c3eVZGRUluVE1kM290bHFzdk5oTERLeHFhNVBCYTE2NFQvTQpwTFBKUUZLUzBNRE14TTlacEVTUmlCcy9UcTNic2hONGQyWmRrN2NPa3dhVkIrczFWVXJYelN3WE1OWDE2M2UxCjMyYk8zemtsMzdMQzczakQ5WXhsd1ZRbUZHZXByai9PK2d0ZHdlMHM0TE91aFpxTVZIMnp6YmtDZ1lFQTJqS0YKdzY0dDlDNEJwNHFvMmtSOXJNcmVIbnhFWk9RWHFTZ0NxSmszYjNaOURwWGlHL0FGbkpHNmliVklhUU5JVUdFWApPYVRWL29vVTgrWnU5K3VxQTgzZFhyd3daVUVhV3BQMGJMNkdFNG1zdDVYRnhYTjltQ2hOV0tsbmRkQnlFMUdUCmJpSGY5SW54bVVyVXVKeHJPWllqQU1saThCa3hXNWdZWHFqNEpFa0NnWUVBcEVlMlNWMXBkdXE2dWhNWUJ1bVUKOEEzdWV4Sk54aFVxb1gvUFRqdGVkUDZWNk01S1ZjNlpQQ2tCVUNnUXdoTjloZGZVc3FiaHovUnBsQ1JWRmJmMApFSDdwb0VhYy9kaXNYZWNWL3F6NExCMytYUTRNQlRxZElBMkZRU0xkcXhTK3lrTjZaZlVTMVZNcXJucTZmRVUvCmZCb1NXZ3dCa201N2FuOWlIN3MzNUlrQ2dZRUFzU21zYW9HV1ZsaTBoekNTZ1FaemRFVVRySFVCbzFsL3pKenIKNjdEYnplakxDWGl4S2pYc21IL0trZDFiZWNoc2dyY1NnSDlTTVdZME5RUzR2UnZmNDA3WG12LzUyM3pNeFJhMApzMGJPM2pZK3dxRWMvNEVTVE9VTVNCemtJRWlyRnZ4NVZFYTA3SHpFYWM3VWdVQ2YzeFlFUGJOR1hlUldxeVFIClJYUzBaZUVDZ1lFQXdXUDU1VnplWmdlTjFtZ1hqWVNNbjBIR0FaZmljYzRQN20rREF4cHFPTjBOOFJsYUFWblQKN3BHbjA4Q3NCRytiS0JhZk1qb2hWSFhOa2JMUWZENFdsU3BwWG5UUjRzUVlOQkVaUHViaW1TRkppN2h1VkJQUgppcHJ5VFZGcW0wbDljQ3UwdTkrSjR3SVB0TTNjbE9tZ0tHakg5ellFak1zZ0NnbHBaOUZjNmRNPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQU9CZ01Yay9yZ1pxNFZ3a21NZ2krZ1l3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpFd01USXdOalUyTVRKYQpGdzB5TXpFd01USXdOalUyTVRKYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUMrdE1DYzBuaVd1eFhzYzRHU0tzZkIKNkt5ZkhCSVZrSG1Fc1c4WGlIWlVqa213NzgyVUcySWpXK2krNm0rcDBHQkNuc1JHU2x0ajBmTHlHekJKV2U0Mgord09zdi95NDF3c1hnNEJjY0wyWnRiVS9DNzRWNDZXUTgwcnFVbVRJVHg0enBxTWJ1YXVvMkRXdkNwVWV4L1k1Cm43WjBkeTY5QXNZMW9nK3dJUGRvbzNoRElIUlZOc0pjN0tjdFJ3QWk3MFRuUnNONWxoNGtkdjA0MWIxMHpuZDcKSFBpTm5IVmFOZFJwRGVZcXE0cytKTDFiWEJVeWNDVDV0NFVnK29mYTNraS9TNVFrQUxFUzNiMURhVE5hUnh3SgphWFBUS1JpVWFUQ1c4Mmxwa1FPTWIwSy8wT0toZk9YQkFVZ2Ztb2orWTBuK3hZRFFNc2tTZUNWTWpPUFVhNjNCCkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQmdTZ3JLVFJ1QXFCN1hxazBxQk5KeWx2eWo1SjNDCjJvbDA2K1FRNEdNa1I2QTJlZklaMDJTbzhUbE5sNVhMNTFkUGt3VFIvUWNBd3A5UmdaWHFvZFQvcGdZbnhnMVcKRnJvb1VsdVY2anNyYlJlZ0RaOGVwTnl6Wm9RM3pwU013K3UwZldRSmlsVzZxbEVTZ1hWeEF1N3lIZnZHRHpISQpMT3hrY3p2YzQvaytkNXNpc2IxdnFWWEdsUjFDOFNGYU85V2o0Y2VkZEUzaFBXN2o2M3BMV0NxZCtyWkoyVnRnCnorL0ZzMFVnbUlCVnh1YmhmWjd5UGhqYWJTcFd6U3hCRCtQSzgvb25FM3N6RWo4dktMQmljbXFaTEhHTENQUXUKckdZM1g5ajZ4UW1jdE0zQ2hvck5FWmFXV2I1WDBrNnVrajRxSlJRc21QV0xCRSszSlZMUkIycG8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdnJUQW5OSjRscnNWN0hPQmtpckh3ZWlzbnh3U0ZaQjVoTEZ2RjRoMlZJNUpzTy9OCmxCdGlJMXZvdnVwdnFkQmdRcDdFUmtwYlk5SHk4aHN3U1ZudU52c0RyTC84dU5jTEY0T0FYSEM5bWJXMVB3dSsKRmVPbGtQTks2bEpreUU4ZU02YWpHN21ycU5nMXJ3cVZIc2YyT1orMmRIY3V2UUxHTmFJUHNDRDNhS040UXlCMApWVGJDWE95bkxVY0FJdTlFNTBiRGVaWWVKSGI5T05XOWRNNTNleHo0alp4MVdqWFVhUTNtS3F1TFBpUzlXMXdWCk1uQWsrYmVGSVBxSDJ0NUl2MHVVSkFDeEV0MjlRMmt6V2tjY0NXbHoweWtZbEdrd2x2TnBhWkVEakc5Q3Y5RGkKb1h6bHdRRklINXFJL21OSi9zV0EwRExKRW5nbFRJemoxR3V0d1FJREFRQUJBb0lCQUVFU04rN0t1aTdrWTFTdApEUGNzOWNBcWZreEVMYitCN3BUaVhqK3Zab0R2bENGMWtiWUpxZkRhdVkzN1BHSzdJVDFhSXlyQTBISTgveUt4Ck9FYXZFdU5idnlOQTF5RFM3NHYwYU9ZaDZlLzYybjlLcUcrYm43RFg4eVlGT3pKR0hNNE8rL1RINDlUWEFXcGEKdUFzcXU4OXB1YjMvdE1qMW0yQk5qZ0RSSHRwcTVoL0RsTWxOVkIyUEVlRGJrN1p1SWVkbENJNUhmZ0ZmVTJKUwpyY3FEaVM3MnB3N1duVkFKYmZsZ2RMMUVTNmpVa3RNaU0xa09RY2dWbm0yV3pLTGZjQUVWaWJaZ1E0ZkFwMlB6CktkMHIxL3h3cmlKNmFEYUtpRG91cVUyaWFjM29QRTZzU0M4QkU2dmZmYnZoTDV4c1hKOHloNU1EMHFjY2o1QXYKYy95MVFZRUNnWUVBMzc3d0NqditqZjdrT2xHR3c3eVZGRUluVE1kM290bHFzdk5oTERLeHFhNVBCYTE2NFQvTQpwTFBKUUZLUzBNRE14TTlacEVTUmlCcy9UcTNic2hONGQyWmRrN2NPa3dhVkIrczFWVXJYelN3WE1OWDE2M2UxCjMyYk8zemtsMzdMQzczakQ5WXhsd1ZRbUZHZXByai9PK2d0ZHdlMHM0TE91aFpxTVZIMnp6YmtDZ1lFQTJqS0YKdzY0dDlDNEJwNHFvMmtSOXJNcmVIbnhFWk9RWHFTZ0NxSmszYjNaOURwWGlHL0FGbkpHNmliVklhUU5JVUdFWApPYVRWL29vVTgrWnU5K3VxQTgzZFhyd3daVUVhV3BQMGJMNkdFNG1zdDVYRnhYTjltQ2hOV0tsbmRkQnlFMUdUCmJpSGY5SW54bVVyVXVKeHJPWllqQU1saThCa3hXNWdZWHFqNEpFa0NnWUVBcEVlMlNWMXBkdXE2dWhNWUJ1bVUKOEEzdWV4Sk54aFVxb1gvUFRqdGVkUDZWNk01S1ZjNlpQQ2tCVUNnUXdoTjloZGZVc3FiaHovUnBsQ1JWRmJmMApFSDdwb0VhYy9kaXNYZWNWL3F6NExCMytYUTRNQlRxZElBMkZRU0xkcXhTK3lrTjZaZlVTMVZNcXJucTZmRVUvCmZCb1NXZ3dCa201N2FuOWlIN3MzNUlrQ2dZRUFzU21zYW9HV1ZsaTBoekNTZ1FaemRFVVRySFVCbzFsL3pKenIKNjdEYnplakxDWGl4S2pYc21IL0trZDFiZWNoc2dyY1NnSDlTTVdZME5RUzR2UnZmNDA3WG12LzUyM3pNeFJhMApzMGJPM2pZK3dxRWMvNEVTVE9VTVNCemtJRWlyRnZ4NVZFYTA3SHpFYWM3VWdVQ2YzeFlFUGJOR1hlUldxeVFIClJYUzBaZUVDZ1lFQXdXUDU1VnplWmdlTjFtZ1hqWVNNbjBIR0FaZmljYzRQN20rREF4cHFPTjBOOFJsYUFWblQKN3BHbjA4Q3NCRytiS0JhZk1qb2hWSFhOa2JMUWZENFdsU3BwWG5UUjRzUVlOQkVaUHViaW1TRkppN2h1VkJQUgppcHJ5VFZGcW0wbDljQ3UwdTkrSjR3SVB0TTNjbE9tZ0tHakg5ellFak1zZ0NnbHBaOUZjNmRNPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"tap","linkerd.io/extension":"viz","namespace":"linkerd-viz"},"name":"tap-k8s-tls","namespace":"linkerd-viz"},"type":"kubernetes.io/tls"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "tap-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-secret-linkerd-viz-tap-k8s-tls.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "type": "kubernetes.io/tls",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"tap","linkerd.io/extension":"viz"},"name":"linkerd-linkerd-viz-tap-auth-delegator"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"system:auth-delegator"},"subjects":[{"kind":"ServiceAccount","name":"tap","namespace":"linkerd-viz"}]}
",
      },
      "name": "linkerd-linkerd-viz-tap-auth-delegator",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-tap-auth-delegator.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "apiregistration.k8s.io/v1",
    "kind": "APIService",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apiregistration.k8s.io/v1","kind":"APIService","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"tap","linkerd.io/extension":"viz"},"name":"v1alpha1.tap.linkerd.io"},"spec":{"caBundle":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQU9CZ01Yay9yZ1pxNFZ3a21NZ2krZ1l3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpFd01USXdOalUyTVRKYQpGdzB5TXpFd01USXdOalUyTVRKYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUMrdE1DYzBuaVd1eFhzYzRHU0tzZkIKNkt5ZkhCSVZrSG1Fc1c4WGlIWlVqa213NzgyVUcySWpXK2krNm0rcDBHQkNuc1JHU2x0ajBmTHlHekJKV2U0Mgord09zdi95NDF3c1hnNEJjY0wyWnRiVS9DNzRWNDZXUTgwcnFVbVRJVHg0enBxTWJ1YXVvMkRXdkNwVWV4L1k1Cm43WjBkeTY5QXNZMW9nK3dJUGRvbzNoRElIUlZOc0pjN0tjdFJ3QWk3MFRuUnNONWxoNGtkdjA0MWIxMHpuZDcKSFBpTm5IVmFOZFJwRGVZcXE0cytKTDFiWEJVeWNDVDV0NFVnK29mYTNraS9TNVFrQUxFUzNiMURhVE5hUnh3SgphWFBUS1JpVWFUQ1c4Mmxwa1FPTWIwSy8wT0toZk9YQkFVZ2Ztb2orWTBuK3hZRFFNc2tTZUNWTWpPUFVhNjNCCkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQmdTZ3JLVFJ1QXFCN1hxazBxQk5KeWx2eWo1SjNDCjJvbDA2K1FRNEdNa1I2QTJlZklaMDJTbzhUbE5sNVhMNTFkUGt3VFIvUWNBd3A5UmdaWHFvZFQvcGdZbnhnMVcKRnJvb1VsdVY2anNyYlJlZ0RaOGVwTnl6Wm9RM3pwU013K3UwZldRSmlsVzZxbEVTZ1hWeEF1N3lIZnZHRHpISQpMT3hrY3p2YzQvaytkNXNpc2IxdnFWWEdsUjFDOFNGYU85V2o0Y2VkZEUzaFBXN2o2M3BMV0NxZCtyWkoyVnRnCnorL0ZzMFVnbUlCVnh1YmhmWjd5UGhqYWJTcFd6U3hCRCtQSzgvb25FM3N6RWo4dktMQmljbXFaTEhHTENQUXUKckdZM1g5ajZ4UW1jdE0zQ2hvck5FWmFXV2I1WDBrNnVrajRxSlJRc21QV0xCRSszSlZMUkIycG8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==","group":"tap.linkerd.io","groupPriorityMinimum":1000,"service":{"name":"tap","namespace":"linkerd-viz"},"version":"v1alpha1","versionPriority":100}}
",
      },
      "name": "v1alpha1.tap.linkerd.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apiregistration.k8s.io_v1-apiservice-default-v1alpha1.tap.linkerd.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "Server",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"policy.linkerd.io/v1beta1","kind":"Server","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"metrics-api","linkerd.io/extension":"viz"},"name":"metrics-api","namespace":"linkerd-viz"},"spec":{"podSelector":{"matchLabels":{"component":"metrics-api","linkerd.io/extension":"viz"}},"port":"http","proxyProtocol":"HTTP/1"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "metrics-api",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-server-linkerd-viz-metrics-api.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"tap","linkerd.io/extension":"viz","namespace":"linkerd-viz"},"name":"linkerd-linkerd-viz-tap-auth-reader","namespace":"kube-system"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"extension-apiserver-authentication-reader"},"subjects":[{"kind":"ServiceAccount","name":"tap","namespace":"linkerd-viz"}]}
",
      },
      "name": "linkerd-linkerd-viz-tap-auth-reader",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-kube-system-linkerd-linkerd-viz-tap-auth-reader.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"metrics-api","linkerd.io/extension":"viz"},"name":"linkerd-linkerd-viz-metrics-api"},"rules":[{"apiGroups":["extensions","apps"],"resources":["daemonsets","deployments","replicasets","statefulsets"],"verbs":["list","get","watch"]},{"apiGroups":["extensions","batch"],"resources":["cronjobs","jobs"],"verbs":["list","get","watch"]},{"apiGroups":[""],"resources":["pods","endpoints","services","replicationcontrollers","namespaces"],"verbs":["list","get","watch"]},{"apiGroups":["linkerd.io"],"resources":["serviceprofiles"],"verbs":["list","get","watch"]},{"apiGroups":["policy.linkerd.io"],"resources":["servers","serverauthorizations","authorizationpolicies","httproutes"],"verbs":["list","get"]}]}
",
      },
      "name": "linkerd-linkerd-viz-metrics-api",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-viz-metrics-api.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"tap","linkerd.io/extension":"viz","namespace":"linkerd-viz"},"name":"tap","namespace":"linkerd-viz"}}
",
      },
      "name": "tap",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-serviceaccount-linkerd-viz-tap.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"web","linkerd.io/extension":"viz"},"name":"linkerd-linkerd-viz-web-check"},"rules":[{"apiGroups":["rbac.authorization.k8s.io"],"resources":["clusterroles","clusterrolebindings"],"verbs":["list"]},{"apiGroups":["apiextensions.k8s.io"],"resources":["customresourcedefinitions"],"verbs":["list"]},{"apiGroups":["admissionregistration.k8s.io"],"resources":["mutatingwebhookconfigurations","validatingwebhookconfigurations"],"verbs":["list"]},{"apiGroups":["linkerd.io"],"resources":["serviceprofiles"],"verbs":["list"]},{"apiGroups":[""],"resources":["nodes","pods"],"verbs":["list"]},{"apiGroups":["apiregistration.k8s.io"],"resources":["apiservices"],"verbs":["get"]}]}
",
      },
      "name": "linkerd-linkerd-viz-web-check",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-viz-web-check.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "v1",
    "data": {
      "auth": "YWRtaW46JDJiJDEwJHExSDZCbmN5NXkxQ2MvQ0hncS9UNS5LRnZyZFlwWE92bFJycVpxZHY5OUM4enAxVFI0WTF5",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"auth":"YWRtaW46JDJiJDEwJHExSDZCbmN5NXkxQ2MvQ0hncS9UNS5LRnZyZFlwWE92bFJycVpxZHY5OUM4enAxVFI0WTF5"},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"linkerd-viz-ingress-auth","namespace":"linkerd-viz"}}
",
      },
      "name": "linkerd-viz-ingress-auth",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-secret-linkerd-viz-linkerd-viz-ingress-auth.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "v1",
    "data": {
      "prometheus.yml": "global:
  evaluation_interval: 10s
  scrape_interval: 10s
  scrape_timeout: 10s

rule_files:
- /etc/prometheus/*_rules.yml
- /etc/prometheus/*_rules.yaml

scrape_configs:
- job_name: 'prometheus'
  static_configs:
  - targets: ['localhost:9090']

#  Required for: https://grafana.com/grafana/dashboards/315
- job_name: 'kubernetes-nodes-cadvisor'
  scheme: https
  tls_config:
    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    insecure_skip_verify: true
  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  kubernetes_sd_configs:
  - role: node
  relabel_configs:
  - action: labelmap
    regex: __meta_kubernetes_node_label_(.+)
  - target_label: __address__
    replacement: kubernetes.default.svc:443
  - source_labels: [__meta_kubernetes_node_name]
    regex: (.+)
    target_label: __metrics_path__
    replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
  metric_relabel_configs:
  - source_labels: [__name__]
    regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
    action: keep
  - source_labels: [__name__]
    regex: 'container_memory_failures_total' # unneeded large metric
    action: drop

- job_name: 'linkerd-controller'
  kubernetes_sd_configs:
  - role: pod
    namespaces:
      names:
      - 'linkerd'
      - 'linkerd-viz'
  relabel_configs:
  - source_labels:
    - __meta_kubernetes_pod_container_port_name
    action: keep
    regex: admin-http
  - source_labels: [__meta_kubernetes_pod_container_name]
    action: replace
    target_label: component

- job_name: 'linkerd-service-mirror'
  kubernetes_sd_configs:
  - role: pod
  relabel_configs:
  - source_labels:
    - __meta_kubernetes_pod_label_component
    - __meta_kubernetes_pod_container_port_name
    action: keep
    regex: linkerd-service-mirror;admin-http$
  - source_labels: [__meta_kubernetes_pod_container_name]
    action: replace
    target_label: component

- job_name: 'linkerd-proxy'
  kubernetes_sd_configs:
  - role: pod
  relabel_configs:
  - source_labels:
    - __meta_kubernetes_pod_container_name
    - __meta_kubernetes_pod_container_port_name
    - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
    action: keep
    regex: ^linkerd-proxy;linkerd-admin;linkerd$
  - source_labels: [__meta_kubernetes_namespace]
    action: replace
    target_label: namespace
  - source_labels: [__meta_kubernetes_pod_name]
    action: replace
    target_label: pod
  # special case k8s' "job" label, to not interfere with prometheus' "job"
  # label
  # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
  # k8s_job=foo
  - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
    action: replace
    target_label: k8s_job
  # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
  - action: labeldrop
    regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
  # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
  # deployment=foo
  - action: labelmap
    regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
  # drop all labels that we just made copies of in the previous labelmap
  - action: labeldrop
    regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
  # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
  # foo=bar
  - action: labelmap
    regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
  # Copy all pod labels to tmp labels
  - action: labelmap
    regex: __meta_kubernetes_pod_label_(.+)
    replacement: __tmp_pod_label_$1
  # Take \`linkerd_io_\` prefixed labels and copy them without the prefix
  - action: labelmap
    regex: __tmp_pod_label_linkerd_io_(.+)
    replacement:  __tmp_pod_label_$1
  # Drop the \`linkerd_io_\` originals
  - action: labeldrop
    regex: __tmp_pod_label_linkerd_io_(.+)
  # Copy tmp labels into real labels
  - action: labelmap
    regex: __tmp_pod_label_(.+)",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"prometheus.yml":"global:\\n  evaluation_interval: 10s\\n  scrape_interval: 10s\\n  scrape_timeout: 10s\\n\\nrule_files:\\n- /etc/prometheus/*_rules.yml\\n- /etc/prometheus/*_rules.yaml\\n\\nscrape_configs:\\n- job_name: 'prometheus'\\n  static_configs:\\n  - targets: ['localhost:9090']\\n\\n#  Required for: https://grafana.com/grafana/dashboards/315\\n- job_name: 'kubernetes-nodes-cadvisor'\\n  scheme: https\\n  tls_config:\\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\\n    insecure_skip_verify: true\\n  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\\n  kubernetes_sd_configs:\\n  - role: node\\n  relabel_configs:\\n  - action: labelmap\\n    regex: __meta_kubernetes_node_label_(.+)\\n  - target_label: __address__\\n    replacement: kubernetes.default.svc:443\\n  - source_labels: [__meta_kubernetes_node_name]\\n    regex: (.+)\\n    target_label: __metrics_path__\\n    replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor\\n  metric_relabel_configs:\\n  - source_labels: [__name__]\\n    regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'\\n    action: keep\\n  - source_labels: [__name__]\\n    regex: 'container_memory_failures_total' # unneeded large metric\\n    action: drop\\n\\n- job_name: 'linkerd-controller'\\n  kubernetes_sd_configs:\\n  - role: pod\\n    namespaces:\\n      names:\\n      - 'linkerd'\\n      - 'linkerd-viz'\\n  relabel_configs:\\n  - source_labels:\\n    - __meta_kubernetes_pod_container_port_name\\n    action: keep\\n    regex: admin-http\\n  - source_labels: [__meta_kubernetes_pod_container_name]\\n    action: replace\\n    target_label: component\\n\\n- job_name: 'linkerd-service-mirror'\\n  kubernetes_sd_configs:\\n  - role: pod\\n  relabel_configs:\\n  - source_labels:\\n    - __meta_kubernetes_pod_label_component\\n    - __meta_kubernetes_pod_container_port_name\\n    action: keep\\n    regex: linkerd-service-mirror;admin-http$\\n  - source_labels: [__meta_kubernetes_pod_container_name]\\n    action: replace\\n    target_label: component\\n\\n- job_name: 'linkerd-proxy'\\n  kubernetes_sd_configs:\\n  - role: pod\\n  relabel_configs:\\n  - source_labels:\\n    - __meta_kubernetes_pod_container_name\\n    - __meta_kubernetes_pod_container_port_name\\n    - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns\\n    action: keep\\n    regex: ^linkerd-proxy;linkerd-admin;linkerd$\\n  - source_labels: [__meta_kubernetes_namespace]\\n    action: replace\\n    target_label: namespace\\n  - source_labels: [__meta_kubernetes_pod_name]\\n    action: replace\\n    target_label: pod\\n  # special case k8s' \\"job\\" label, to not interfere with prometheus' \\"job\\"\\n  # label\\n  # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =\\u003e\\n  # k8s_job=foo\\n  - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]\\n    action: replace\\n    target_label: k8s_job\\n  # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job\\n  - action: labeldrop\\n    regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job\\n  # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =\\u003e\\n  # deployment=foo\\n  - action: labelmap\\n    regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)\\n  # drop all labels that we just made copies of in the previous labelmap\\n  - action: labeldrop\\n    regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)\\n  # __meta_kubernetes_pod_label_linkerd_io_foo=bar =\\u003e\\n  # foo=bar\\n  - action: labelmap\\n    regex: __meta_kubernetes_pod_label_linkerd_io_(.+)\\n  # Copy all pod labels to tmp labels\\n  - action: labelmap\\n    regex: __meta_kubernetes_pod_label_(.+)\\n    replacement: __tmp_pod_label_$1\\n  # Take \`linkerd_io_\` prefixed labels and copy them without the prefix\\n  - action: labelmap\\n    regex: __tmp_pod_label_linkerd_io_(.+)\\n    replacement:  __tmp_pod_label_$1\\n  # Drop the \`linkerd_io_\` originals\\n  - action: labeldrop\\n    regex: __tmp_pod_label_linkerd_io_(.+)\\n  # Copy tmp labels into real labels\\n  - action: labelmap\\n    regex: __tmp_pod_label_(.+)"},"kind":"ConfigMap","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"prometheus","linkerd.io/extension":"viz","namespace":"linkerd-viz"},"name":"prometheus-config","namespace":"linkerd-viz"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "prometheus-config",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-configmap-linkerd-viz-prometheus-config.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"prometheus","linkerd.io/extension":"viz"},"name":"linkerd-linkerd-viz-prometheus"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"linkerd-linkerd-viz-prometheus"},"subjects":[{"kind":"ServiceAccount","name":"prometheus","namespace":"linkerd-viz"}]}
",
      },
      "name": "linkerd-linkerd-viz-prometheus",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-prometheus.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"tap-injector","linkerd.io/extension":"viz"},"name":"tap-injector","namespace":"linkerd-viz"},"spec":{"ports":[{"name":"tap-injector","port":443,"targetPort":"tap-injector"}],"selector":{"component":"tap-injector","linkerd.io/extension":"viz"},"type":"ClusterIP"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
        "linkerd.io/inject": "enabled",
      },
      "name": "tap-injector",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-service-linkerd-viz-tap-injector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "Server",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"policy.linkerd.io/v1beta1","kind":"Server","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/extension":"viz"},"name":"admin","namespace":"linkerd-viz"},"spec":{"podSelector":{"matchLabels":{"linkerd.io/extension":"viz"}},"port":"admin-http","proxyProtocol":"HTTP/1"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "admin",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-server-linkerd-viz-admin.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"web","linkerd.io/extension":"viz"},"name":"linkerd-linkerd-viz-web-api"},"rules":[{"apiGroups":[""],"resources":["namespaces"],"verbs":["list"]}]}
",
      },
      "name": "linkerd-linkerd-viz-web-api",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-viz-web-api.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "policy.linkerd.io/v1alpha1",
    "kind": "AuthorizationPolicy",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"policy.linkerd.io/v1alpha1","kind":"AuthorizationPolicy","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/extension":"viz"},"name":"proxy-admin","namespace":"linkerd-viz"},"spec":{"requiredAuthenticationRefs":[{"group":"policy.linkerd.io","kind":"NetworkAuthentication","name":"kubelet"}],"targetRef":{"group":"policy.linkerd.io","kind":"Server","name":"proxy-admin"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "proxy-admin",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1alpha1-authorizationpolicy-linkerd-viz-proxy-admin.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"prometheus","linkerd.io/extension":"viz","namespace":"linkerd-viz"},"name":"prometheus","namespace":"linkerd-viz"},"spec":{"ports":[{"name":"admin-http","port":9090,"targetPort":9090}],"selector":{"component":"prometheus","linkerd.io/extension":"viz"},"type":"ClusterIP"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
        "linkerd.io/inject": "enabled",
      },
      "name": "prometheus",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-service-linkerd-viz-prometheus.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "policy.linkerd.io/v1alpha1",
    "kind": "AuthorizationPolicy",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"policy.linkerd.io/v1alpha1","kind":"AuthorizationPolicy","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"metrics-api","linkerd.io/extension":"viz"},"name":"metrics-api","namespace":"linkerd-viz"},"spec":{"requiredAuthenticationRefs":[{"group":"policy.linkerd.io","kind":"MeshTLSAuthentication","name":"metrics-api-web"}],"targetRef":{"group":"policy.linkerd.io","kind":"Server","name":"metrics-api"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "metrics-api",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1alpha1-authorizationpolicy-linkerd-viz-metrics-api.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "Server",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"policy.linkerd.io/v1beta1","kind":"Server","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"tap","linkerd.io/extension":"viz"},"name":"tap-api","namespace":"linkerd-viz"},"spec":{"podSelector":{"matchLabels":{"component":"tap","linkerd.io/extension":"viz"}},"port":"apiserver","proxyProtocol":"TLS"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "tap-api",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-server-linkerd-viz-tap-api.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "annotations": {
        "cert-manager.io/cluster-issuer": "letsencrypt-cluster-issuer",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"networking.k8s.io/v1","kind":"Ingress","metadata":{"annotations":{"cert-manager.io/cluster-issuer":"letsencrypt-cluster-issuer"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"linkerd-viz-ingress","namespace":"linkerd-viz"},"spec":{"ingressClassName":"nginx","rules":[{"host":"linkerd.localhost:8080","http":{"paths":[{"backend":{"service":{"name":"web","port":{"number":8084}}},"path":"/","pathType":"Prefix"}]}}],"tls":[{"hosts":["linkerd.localhost:8080"],"secretName":"linkerd-nginx-ingress-tls"}]}}
",
      },
      "name": "linkerd-viz-ingress",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/networking.k8s.io_v1-ingress-linkerd-viz-linkerd-viz-ingress.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"web","linkerd.io/extension":"viz"},"name":"linkerd-linkerd-viz-web-admin"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"linkerd-linkerd-viz-tap-admin"},"subjects":[{"kind":"ServiceAccount","name":"web","namespace":"linkerd-viz"}]}
",
      },
      "name": "linkerd-linkerd-viz-web-admin",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-web-admin.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "linkerd.io/v1alpha2",
    "kind": "ServiceProfile",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"linkerd.io/v1alpha2","kind":"ServiceProfile","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/extension":"viz"},"name":"prometheus.linkerd-viz.svc.cluster.local","namespace":"linkerd-viz"},"spec":{"routes":[{"condition":{"method":"POST","pathRegex":"/api/v1/query"},"name":"POST /api/v1/query"},{"condition":{"method":"GET","pathRegex":"/api/v1/query_range"},"name":"GET /api/v1/query_range"},{"condition":{"method":"GET","pathRegex":"/api/v1/series"},"name":"GET /api/v1/series"}]}}
",
      },
      "name": "prometheus.linkerd-viz.svc.cluster.local",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/linkerd.io_v1alpha2-serviceprofile-linkerd-viz-prometheus.linkerd-viz.svc.cluster.local.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/extension":"viz"},"name":"tap-injector","namespace":"linkerd-viz"}}
",
      },
      "name": "tap-injector",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-serviceaccount-linkerd-viz-tap-injector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "Server",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"policy.linkerd.io/v1beta1","kind":"Server","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"tap-injector","linkerd.io/extension":"viz"},"name":"tap-injector-webhook","namespace":"linkerd-viz"},"spec":{"podSelector":{"matchLabels":{"component":"tap-injector","linkerd.io/extension":"viz"}},"port":"tap-injector","proxyProtocol":"TLS"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "tap-injector-webhook",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-server-linkerd-viz-tap-injector-webhook.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"metrics-api","linkerd.io/extension":"viz"},"name":"metrics-api","namespace":"linkerd-viz"}}
",
      },
      "name": "metrics-api",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-serviceaccount-linkerd-viz-metrics-api.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"web","linkerd.io/extension":"viz","namespace":"linkerd"},"name":"web","namespace":"linkerd"},"rules":[{"apiGroups":[""],"resourceNames":["linkerd-config"],"resources":["configmaps"],"verbs":["get"]},{"apiGroups":[""],"resources":["namespaces","configmaps"],"verbs":["get"]},{"apiGroups":[""],"resources":["serviceaccounts","pods"],"verbs":["list"]},{"apiGroups":["apps"],"resources":["replicasets"],"verbs":["list"]}]}
",
      },
      "name": "web",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-role-linkerd-web.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "config.linkerd.io/proxy-await": "enabled",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.linkerd.io/proxy-await":"enabled","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"metrics-api","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1","component":"metrics-api","linkerd.io/extension":"viz"},"name":"metrics-api","namespace":"linkerd-viz"},"spec":{"replicas":1,"selector":{"matchLabels":{"component":"metrics-api","linkerd.io/extension":"viz"}},"template":{"metadata":{"annotations":{"checksum/config":"b73fb1bf343c4203fbab8ee108c5eba2e07d184177e204677dc83d4cad2cd12b","cluster-autoscaler.kubernetes.io/safe-to-evict":"true","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"component":"metrics-api","linkerd.io/extension":"viz"}},"spec":{"containers":[{"args":["-controller-namespace=linkerd","-log-level=info","-log-format=plain","-cluster-domain=cluster.local","-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090","-enable-pprof=false"],"image":"cr.l5d.io/linkerd/metrics-api:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9995},"initialDelaySeconds":10},"name":"metrics-api","ports":[{"containerPort":8085,"name":"http"},{"containerPort":9995,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9995}},"securityContext":{"runAsUser":2103}}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"metrics-api"}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
        "linkerd.io/inject": "enabled",
      },
      "name": "metrics-api",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-metrics-api.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "b73fb1bf343c4203fbab8ee108c5eba2e07d184177e204677dc83d4cad2cd12b",
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "true",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/inject": "enabled",
          },
          "labels": {
            "component": "metrics-api",
            "linkerd.io/extension": "viz",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "-controller-namespace=linkerd",
                "-log-level=info",
                "-log-format=plain",
                "-cluster-domain=cluster.local",
                "-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/metrics-api:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9995,
                },
                "initialDelaySeconds": 10,
              },
              "name": "metrics-api",
              "ports": [
                {
                  "containerPort": 8085,
                  "name": "http",
                },
                {
                  "containerPort": 9995,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9995,
                },
              },
              "securityContext": {
                "runAsUser": 2103,
              },
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "metrics-api",
        },
      },
    },
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "post-install",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded",
        "helm.sh/hook-weight": "0",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"batch/v1","kind":"Job","metadata":{"annotations":{"helm.sh/hook":"post-install","helm.sh/hook-delete-policy":"before-hook-creation,hook-succeeded","helm.sh/hook-weight":"0","linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"namespace-metadata","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1"},"name":"namespace-metadata","namespace":"linkerd-viz"},"spec":{"template":{"metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"disabled"},"labels":{"app.kubernetes.io/name":"namespace-metadata","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1"}},"spec":{"containers":[{"args":["-c","ops=''\\ntoken=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\\nns=$(curl -kfv -H \\"Authorization: Bearer $token\\" \\\\\\n  \\"https://kubernetes.default.svc/api/v1/namespaces/linkerd-viz\\")\\n\\nif ! echo \\"$ns\\" | grep -q 'labels'; then\\n  ops=\\"$ops{\\\\\\"op\\\\\\": \\\\\\"add\\\\\\",\\\\\\"path\\\\\\": \\\\\\"/metadata/labels\\\\\\",\\\\\\"value\\\\\\": {}},\\"\\nfi\\nif ! echo \\"$ns\\" | grep -q 'annotations'; then\\n  ops=\\"$ops{\\\\\\"op\\\\\\": \\\\\\"add\\\\\\", \\\\\\"path\\\\\\": \\\\\\"/metadata/annotations\\\\\\", \\\\\\"value\\\\\\": {}},\\"\\nfi\\nops=\\"$ops{\\\\\\"op\\\\\\": \\\\\\"add\\\\\\", \\\\\\"path\\\\\\": \\\\\\"/metadata/labels/linkerd.io~1extension\\\\\\", \\\\\\"value\\\\\\": \\\\\\"viz\\\\\\"}\\"\\n\\ncurl -kfv -XPATCH -H \\"Content-Type: application/json-patch+json\\" -H \\"Authorization: Bearer $token\\" \\\\\\n  -d \\"[$ops]\\" \\\\\\n  \\"https://kubernetes.default.svc/api/v1/namespaces/linkerd-viz?fieldManager=kubectl-label\\"\\n"],"command":["/bin/sh"],"image":"curlimages/curl:7.78.0","imagePullPolicy":"IfNotPresent","name":"namespace-metadata","securityContext":{"runAsUser":2103}}],"restartPolicy":"Never","serviceAccountName":"namespace-metadata"}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "namespace-metadata",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/batch_v1-job-linkerd-viz-namespace-metadata.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/inject": "disabled",
          },
          "labels": {
            "app.kubernetes.io/name": "namespace-metadata",
            "app.kubernetes.io/part-of": "Linkerd",
            "app.kubernetes.io/version": "stable-2.12.1",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "-c",
                "ops=''
token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
ns=$(curl -kfv -H "Authorization: Bearer $token" \\
  "https://kubernetes.default.svc/api/v1/namespaces/linkerd-viz")

if ! echo "$ns" | grep -q 'labels'; then
  ops="$ops{\\"op\\": \\"add\\",\\"path\\": \\"/metadata/labels\\",\\"value\\": {}},"
fi
if ! echo "$ns" | grep -q 'annotations'; then
  ops="$ops{\\"op\\": \\"add\\", \\"path\\": \\"/metadata/annotations\\", \\"value\\": {}},"
fi
ops="$ops{\\"op\\": \\"add\\", \\"path\\": \\"/metadata/labels/linkerd.io~1extension\\", \\"value\\": \\"viz\\"}"

curl -kfv -XPATCH -H "Content-Type: application/json-patch+json" -H "Authorization: Bearer $token" \\
  -d "[$ops]" \\
  "https://kubernetes.default.svc/api/v1/namespaces/linkerd-viz?fieldManager=kubectl-label"
",
              ],
              "command": [
                "/bin/sh",
              ],
              "image": "curlimages/curl:7.78.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "namespace-metadata",
              "securityContext": {
                "runAsUser": 2103,
              },
            },
          ],
          "restartPolicy": "Never",
          "serviceAccountName": "namespace-metadata",
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"web","linkerd.io/extension":"viz","namespace":"linkerd-viz"},"name":"web","namespace":"linkerd-viz"}}
",
      },
      "name": "web",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-serviceaccount-linkerd-viz-web.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"prometheus","linkerd.io/extension":"viz"},"name":"linkerd-linkerd-viz-prometheus"},"rules":[{"apiGroups":[""],"resources":["nodes","nodes/proxy","pods"],"verbs":["get","list","watch"]}]}
",
      },
      "name": "linkerd-linkerd-viz-prometheus",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-viz-prometheus.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"tap","linkerd.io/extension":"viz","namespace":"linkerd-viz"},"name":"tap","namespace":"linkerd-viz"},"spec":{"ports":[{"name":"grpc","port":8088,"targetPort":8088},{"name":"apiserver","port":443,"targetPort":"apiserver"}],"selector":{"component":"tap","linkerd.io/extension":"viz"},"type":"ClusterIP"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
        "linkerd.io/inject": "enabled",
      },
      "name": "tap",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-service-linkerd-viz-tap.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "config.linkerd.io/proxy-await": "enabled",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.linkerd.io/proxy-await":"enabled","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"web","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1","component":"web","linkerd.io/extension":"viz","namespace":"linkerd-viz"},"name":"web","namespace":"linkerd-viz"},"spec":{"replicas":1,"selector":{"matchLabels":{"component":"web","linkerd.io/extension":"viz","namespace":"linkerd-viz"}},"template":{"metadata":{"annotations":{"cluster-autoscaler.kubernetes.io/safe-to-evict":"true","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"component":"web","linkerd.io/extension":"viz","namespace":"linkerd-viz"}},"spec":{"containers":[{"args":["-linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085","-cluster-domain=cluster.local","-controller-namespace=linkerd","-log-level=info","-log-format=plain","-enforced-host=^(localhost|127\\\\.0\\\\.0\\\\.1|web\\\\.linkerd-viz\\\\.svc\\\\.cluster\\\\.local|web\\\\.linkerd-viz\\\\.svc|\\\\[::1\\\\])(:\\\\d+)?$","-enable-pprof=false"],"image":"cr.l5d.io/linkerd/web:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9994},"initialDelaySeconds":10},"name":"web","ports":[{"containerPort":8084,"name":"http"},{"containerPort":9994,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9994}},"securityContext":{"runAsUser":2103}}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"web"}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
        "linkerd.io/inject": "enabled",
      },
      "name": "web",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-web.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "true",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/inject": "enabled",
          },
          "labels": {
            "component": "web",
            "linkerd.io/extension": "viz",
            "namespace": "linkerd-viz",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "-linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085",
                "-cluster-domain=cluster.local",
                "-controller-namespace=linkerd",
                "-log-level=info",
                "-log-format=plain",
                "-enforced-host=^(localhost|127\\.0\\.0\\.1|web\\.linkerd-viz\\.svc\\.cluster\\.local|web\\.linkerd-viz\\.svc|\\[::1\\])(:\\d+)?$",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/web:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9994,
                },
                "initialDelaySeconds": 10,
              },
              "name": "web",
              "ports": [
                {
                  "containerPort": 8084,
                  "name": "http",
                },
                {
                  "containerPort": 9994,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9994,
                },
              },
              "securityContext": {
                "runAsUser": 2103,
              },
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "web",
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"metrics-api","linkerd.io/extension":"viz"},"name":"metrics-api","namespace":"linkerd-viz"},"spec":{"ports":[{"name":"http","port":8085,"targetPort":8085}],"selector":{"component":"metrics-api","linkerd.io/extension":"viz"},"type":"ClusterIP"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
        "linkerd.io/inject": "enabled",
      },
      "name": "metrics-api",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-service-linkerd-viz-metrics-api.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/extension":"viz"},"name":"linkerd-tap-injector"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"linkerd-tap-injector"},"subjects":[{"kind":"ServiceAccount","name":"tap-injector","namespace":"linkerd-viz"}]}
",
      },
      "name": "linkerd-tap-injector",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-tap-injector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "policy.linkerd.io/v1beta1",
    "kind": "Server",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"policy.linkerd.io/v1beta1","kind":"Server","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/extension":"viz"},"name":"proxy-admin","namespace":"linkerd-viz"},"spec":{"podSelector":{"matchLabels":{"linkerd.io/extension":"viz"}},"port":"linkerd-admin","proxyProtocol":"HTTP/1"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "proxy-admin",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1beta1-server-linkerd-viz-proxy-admin.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "post-install",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded",
        "helm.sh/hook-weight": "0",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"annotations":{"helm.sh/hook":"post-install","helm.sh/hook-delete-policy":"before-hook-creation,hook-succeeded","helm.sh/hook-weight":"0","linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"namespace-metadata","namespace":"linkerd-viz"},"rules":[{"apiGroups":[""],"resourceNames":["linkerd-viz"],"resources":["namespaces"],"verbs":["get","patch"]}]}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "namespace-metadata",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-role-linkerd-viz-namespace-metadata.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "policy.linkerd.io/v1alpha1",
    "kind": "NetworkAuthentication",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"policy.linkerd.io/v1alpha1","kind":"NetworkAuthentication","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/extension":"viz"},"name":"kubelet","namespace":"linkerd-viz"},"spec":{"networks":[{"cidr":"0.0.0.0/0"},{"cidr":"::/0"}]}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "kubelet",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1alpha1-networkauthentication-linkerd-viz-kubelet.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"web","linkerd.io/extension":"viz"},"name":"linkerd-linkerd-viz-web-check"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"linkerd-linkerd-viz-web-check"},"subjects":[{"kind":"ServiceAccount","name":"web","namespace":"linkerd-viz"}]}
",
      },
      "name": "linkerd-linkerd-viz-web-check",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-web-check.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"web","linkerd.io/extension":"viz","namespace":"linkerd"},"name":"web","namespace":"linkerd"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"web"},"subjects":[{"kind":"ServiceAccount","name":"web","namespace":"linkerd-viz"}]}
",
      },
      "name": "web",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-linkerd-web.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "post-install",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded",
        "helm.sh/hook-weight": "0",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{"helm.sh/hook":"post-install","helm.sh/hook-delete-policy":"before-hook-creation,hook-succeeded","helm.sh/hook-weight":"0","linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"namespace-metadata","namespace":"linkerd-viz"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "namespace-metadata",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-serviceaccount-linkerd-viz-namespace-metadata.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "policy.linkerd.io/v1alpha1",
    "kind": "NetworkAuthentication",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"policy.linkerd.io/v1alpha1","kind":"NetworkAuthentication","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/extension":"viz"},"name":"kube-api-server","namespace":"linkerd-viz"},"spec":{"networks":[{"cidr":"0.0.0.0/0"},{"cidr":"::/0"}]}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "kube-api-server",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1alpha1-networkauthentication-linkerd-viz-kube-api-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"tap","linkerd.io/extension":"viz"},"name":"linkerd-linkerd-viz-tap"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"linkerd-linkerd-viz-tap"},"subjects":[{"kind":"ServiceAccount","name":"tap","namespace":"linkerd-viz"}]}
",
      },
      "name": "linkerd-linkerd-viz-tap",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-tap.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "policy.linkerd.io/v1alpha1",
    "kind": "AuthorizationPolicy",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"policy.linkerd.io/v1alpha1","kind":"AuthorizationPolicy","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"tap-injector","linkerd.io/extension":"viz"},"name":"tap-injector","namespace":"linkerd-viz"},"spec":{"requiredAuthenticationRefs":[{"group":"policy.linkerd.io","kind":"NetworkAuthentication","name":"kube-api-server"}],"targetRef":{"group":"policy.linkerd.io","kind":"Server","name":"tap-injector-webhook"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "tap-injector",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/policy.linkerd.io_v1alpha1-authorizationpolicy-linkerd-viz-tap-injector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"tap","linkerd.io/extension":"viz"},"name":"linkerd-linkerd-viz-tap-admin"},"rules":[{"apiGroups":[""],"resources":["namespaces"],"verbs":["list"]},{"apiGroups":["tap.linkerd.io"],"resources":["*"],"verbs":["watch"]}]}
",
      },
      "name": "linkerd-linkerd-viz-tap-admin",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-viz-tap-admin.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "config.linkerd.io/proxy-await": "enabled",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.linkerd.io/proxy-await":"enabled","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"prometheus","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1","component":"prometheus","linkerd.io/extension":"viz","namespace":"linkerd-viz"},"name":"prometheus","namespace":"linkerd-viz"},"spec":{"replicas":1,"selector":{"matchLabels":{"component":"prometheus","linkerd.io/extension":"viz","namespace":"linkerd-viz"}},"template":{"metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"component":"prometheus","linkerd.io/extension":"viz","namespace":"linkerd-viz"}},"spec":{"containers":[{"args":["--log.level=info","--log.format=logfmt","--config.file=/etc/prometheus/prometheus.yml","--storage.tsdb.path=/data","--storage.tsdb.retention.time=6h"],"image":"prom/prometheus:v2.30.3","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/-/healthy","port":9090},"initialDelaySeconds":30,"timeoutSeconds":30},"name":"prometheus","ports":[{"containerPort":9090,"name":"admin-http"}],"readinessProbe":{"httpGet":{"path":"/-/ready","port":9090},"initialDelaySeconds":30,"timeoutSeconds":30},"securityContext":{"runAsGroup":65534,"runAsNonRoot":true,"runAsUser":65534},"volumeMounts":[{"mountPath":"/data","name":"data"},{"mountPath":"/etc/prometheus/prometheus.yml","name":"prometheus-config","readOnly":true,"subPath":"prometheus.yml"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"securityContext":{"fsGroup":65534},"serviceAccountName":"prometheus","volumes":[{"emptyDir":{},"name":"data"},{"configMap":{"name":"prometheus-config"},"name":"prometheus-config"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
        "linkerd.io/inject": "enabled",
      },
      "name": "prometheus",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-prometheus.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/inject": "enabled",
          },
          "labels": {
            "component": "prometheus",
            "linkerd.io/extension": "viz",
            "namespace": "linkerd-viz",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "--log.level=info",
                "--log.format=logfmt",
                "--config.file=/etc/prometheus/prometheus.yml",
                "--storage.tsdb.path=/data",
                "--storage.tsdb.retention.time=6h",
              ],
              "image": "prom/prometheus:v2.30.3",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/-/healthy",
                  "port": 9090,
                },
                "initialDelaySeconds": 30,
                "timeoutSeconds": 30,
              },
              "name": "prometheus",
              "ports": [
                {
                  "containerPort": 9090,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/-/ready",
                  "port": 9090,
                },
                "initialDelaySeconds": 30,
                "timeoutSeconds": 30,
              },
              "securityContext": {
                "runAsGroup": 65534,
                "runAsNonRoot": true,
                "runAsUser": 65534,
              },
              "volumeMounts": [
                {
                  "mountPath": "/data",
                  "name": "data",
                },
                {
                  "mountPath": "/etc/prometheus/prometheus.yml",
                  "name": "prometheus-config",
                  "readOnly": true,
                  "subPath": "prometheus.yml",
                },
              ],
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "securityContext": {
            "fsGroup": 65534,
          },
          "serviceAccountName": "prometheus",
          "volumes": [
            {
              "emptyDir": {},
              "name": "data",
            },
            {
              "configMap": {
                "name": "prometheus-config",
              },
              "name": "prometheus-config",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"metrics-api","linkerd.io/extension":"viz"},"name":"linkerd-linkerd-viz-metrics-api"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"linkerd-linkerd-viz-metrics-api"},"subjects":[{"kind":"ServiceAccount","name":"metrics-api","namespace":"linkerd-viz"}]}
",
      },
      "name": "linkerd-linkerd-viz-metrics-api",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-metrics-api.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"web","linkerd.io/extension":"viz"},"name":"linkerd-linkerd-viz-web-api"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"linkerd-linkerd-viz-web-api"},"subjects":[{"kind":"ServiceAccount","name":"web","namespace":"linkerd-viz"}]}
",
      },
      "name": "linkerd-linkerd-viz-web-api",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-viz-web-api.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "linkerd.io/v1alpha2",
    "kind": "ServiceProfile",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"linkerd.io/v1alpha2","kind":"ServiceProfile","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/extension":"viz"},"name":"metrics-api.linkerd-viz.svc.cluster.local","namespace":"linkerd-viz"},"spec":{"routes":[{"condition":{"method":"POST","pathRegex":"/api/v1/StatSummary"},"name":"POST /api/v1/StatSummary"},{"condition":{"method":"POST","pathRegex":"/api/v1/TopRoutes"},"name":"POST /api/v1/TopRoutes"},{"condition":{"method":"POST","pathRegex":"/api/v1/ListPods"},"name":"POST /api/v1/ListPods"},{"condition":{"method":"POST","pathRegex":"/api/v1/ListServices"},"name":"POST /api/v1/ListServices"},{"condition":{"method":"POST","pathRegex":"/api/v1/SelfCheck"},"name":"POST /api/v1/SelfCheck"},{"condition":{"method":"POST","pathRegex":"/api/v1/Gateways"},"name":"POST /api/v1/Gateways"},{"condition":{"method":"POST","pathRegex":"/api/v1/Edges"},"name":"POST /api/v1/Edges"}]}}
",
      },
      "name": "metrics-api.linkerd-viz.svc.cluster.local",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/linkerd.io_v1alpha2-serviceprofile-linkerd-viz-metrics-api.linkerd-viz.svc.cluster.local.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "post-install",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded",
        "helm.sh/hook-weight": "0",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"annotations":{"helm.sh/hook":"post-install","helm.sh/hook-delete-policy":"before-hook-creation,hook-succeeded","helm.sh/hook-weight":"0","linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"namespace-metadata","namespace":"linkerd-viz"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"namespace-metadata"},"subjects":[{"kind":"ServiceAccount","name":"namespace-metadata","namespace":"linkerd-viz"}]}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "namespace-metadata",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-linkerd-viz-namespace-metadata.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/extension":"viz"},"name":"linkerd-tap-injector"},"rules":[{"apiGroups":[""],"resources":["namespaces"],"verbs":["get","list","watch"]}]}
",
      },
      "name": "linkerd-tap-injector",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-tap-injector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"tap","linkerd.io/extension":"viz"},"name":"linkerd-linkerd-viz-tap"},"rules":[{"apiGroups":[""],"resources":["pods","services","replicationcontrollers","namespaces","nodes"],"verbs":["list","get","watch"]},{"apiGroups":["extensions","apps"],"resources":["daemonsets","deployments","replicasets","statefulsets"],"verbs":["list","get","watch"]},{"apiGroups":["extensions","batch"],"resources":["cronjobs","jobs"],"verbs":["list","get","watch"]}]}
",
      },
      "name": "linkerd-linkerd-viz-tap",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-viz-tap.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"service.alpha.kubernetes.io/tolerate-unready-endpoints":"true"},"labels":{"app":"seaweedfs","app.kubernetes.io/managed-by":"pulumi","component":"filer"},"name":"seaweedfs-filer","namespace":"seaweedfs"},"spec":{"clusterIP":"None","ports":[{"name":"swfs-filer","port":8888,"protocol":"TCP","targetPort":8888},{"name":"swfs-filer-grpc","port":18888,"protocol":"TCP","targetPort":18888},{"name":"metrics","port":9327,"protocol":"TCP","targetPort":9327}],"publishNotReadyAddresses":true,"selector":{"app":"seaweedfs","component":"filer"}}}
",
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true",
      },
      "name": "seaweedfs-filer",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/1-manifest/v1-service-seaweedfs-seaweedfs-filer.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "data": {
      "password": "SGFyZENvZGVkUGFzc3dvcmQ=",
      "user": "WW91clNXVXNlcg==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "pre-install",
        "helm.sh/resource-policy": "keep",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Secret","metadata":{"annotations":{"helm.sh/hook":"pre-install","helm.sh/resource-policy":"keep"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"secret-seaweedfs-db","namespace":"seaweedfs"},"stringData":{"password":"HardCodedPassword","user":"YourSWUser"},"type":"Opaque"}
",
      },
      "name": "secret-seaweedfs-db",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/1-manifest/v1-secret-seaweedfs-secret-seaweedfs-db.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
    "stringData": {
      "password": "HardCodedPassword",
      "user": "YourSWUser",
    },
    "type": "Opaque",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"service.alpha.kubernetes.io/tolerate-unready-endpoints":"true"},"labels":{"app":"seaweedfs","app.kubernetes.io/managed-by":"pulumi","component":"master"},"name":"seaweedfs-master","namespace":"seaweedfs"},"spec":{"clusterIP":"None","ports":[{"name":"swfs-master","port":9333,"protocol":"TCP","targetPort":9333},{"name":"swfs-master-grpc","port":19333,"protocol":"TCP","targetPort":19333},{"name":"metrics","port":9327,"protocol":"TCP","targetPort":9327}],"publishNotReadyAddresses":true,"selector":{"app":"seaweedfs","component":"master"}}}
",
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true",
      },
      "name": "seaweedfs-master",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/1-manifest/v1-service-seaweedfs-seaweedfs-master.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
    "spec": {},
  },
  {
    "apiVersion": "pingcap.com/v1alpha1",
    "kind": "TidbCluster",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"pingcap.com/v1alpha1","kind":"TidbCluster","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"seaweedfs-tikv","namespace":"seaweedfs"},"spec":{"configUpdateStrategy":"RollingUpdate","enableDynamicConfiguration":true,"imagePullPolicy":"IfNotPresent","pd":{"baseImage":"pingcap/pd","config":"\\n                [dashboard]\\n                    internal-proxy = true\\n              ","maxFailoverCount":0,"replicas":3,"requests":{"storage":"10Gi"},"service":{"port":2379},"storageClassName":"local-storage"},"pvReclaimPolicy":"Retain","statefulSetUpdateStrategy":"RollingUpdate","tikv":{"baseImage":"pingcap/tikv","config":{},"maxFailoverCount":0,"replicas":3,"requests":{"storage":"100Gi"},"storageClassName":"local-storage"},"timezone":"UTC"}}
",
      },
      "name": "seaweedfs-tikv",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/1-manifest/pingcap.com_v1alpha1-tidbcluster-seaweedfs-seaweedfs-tikv.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"seaweedfs-rw-cr"},"rules":[{"apiGroups":[""],"resources":["pods"],"verbs":["get","list","watch","create","update","patch","delete"]}]}
",
      },
      "name": "seaweedfs-rw-cr",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-seaweedfs-rw-cr.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"labels":{"app":"seaweedfs","app.kubernetes.io/managed-by":"pulumi","chart":"seaweedfs-helm","heritage":"Helm","release":"seaweedfs"},"name":"seaweedfs-master","namespace":"seaweedfs"},"spec":{"podManagementPolicy":"Parallel","replicas":1,"selector":{"matchLabels":{"app":"seaweedfs","chart":"seaweedfs-helm","component":"master","release":"seaweedfs"}},"serviceName":"seaweedfs-master","template":{"metadata":{"labels":{"app":"seaweedfs","chart":"seaweedfs-helm","component":"master","release":"seaweedfs"}},"spec":{"affinity":{"podAntiAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":[{"labelSelector":{"matchLabels":{"app":"seaweedfs","component":"master","release":"seaweedfs"}},"topologyKey":"kubernetes.io/hostname"}]}},"containers":[{"command":["/bin/sh","-ec","exec /usr/bin/weed -logdir=/logs \\\\\\n-v=1 \\\\\\nmaster \\\\\\n-port=9333 \\\\\\n-mdir=/data \\\\\\n-ip.bind=0.0.0.0 \\\\\\n-defaultReplication=000 \\\\\\n-volumeSizeLimitMB=1000 \\\\\\n-ip=\${POD_NAME}.\${SEAWEEDFS_FULLNAME}-master \\\\\\n-peers=\${SEAWEEDFS_FULLNAME}-master-0.\${SEAWEEDFS_FULLNAME}-master:9333\\n"],"env":[{"name":"POD_IP","valueFrom":{"fieldRef":{"fieldPath":"status.podIP"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"SEAWEEDFS_FULLNAME","value":"seaweedfs"},{"name":"WEED_MASTER_VOLUME_GROWTH_COPY_1","value":"7"},{"name":"WEED_MASTER_VOLUME_GROWTH_COPY_2","value":"6"},{"name":"WEED_MASTER_VOLUME_GROWTH_COPY_3","value":"3"},{"name":"WEED_MASTER_VOLUME_GROWTH_COPY_OTHER","value":"1"},{"name":"WEED_CLUSTER_DEFAULT","value":"sw"},{"name":"WEED_CLUSTER_SW_FILER","value":"seaweedfs-filer-client:8888"},{"name":"WEED_CLUSTER_SW_MASTER","value":"seaweedfs-master:9333"}],"image":"chrislusf/seaweedfs:3.30","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":4,"httpGet":{"path":"/cluster/status","port":9333,"scheme":"HTTP"},"initialDelaySeconds":20,"periodSeconds":30,"successThreshold":1,"timeoutSeconds":10},"name":"seaweedfs","ports":[{"containerPort":9333,"name":"swfs-master"},{"containerPort":19333}],"readinessProbe":{"failureThreshold":100,"httpGet":{"path":"/cluster/status","port":9333,"scheme":"HTTP"},"initialDelaySeconds":10,"periodSeconds":45,"successThreshold":2,"timeoutSeconds":10},"volumeMounts":[{"mountPath":"/data","name":"data-seaweedfs"},{"mountPath":"/logs/","name":"seaweedfs-master-log-volume"}]}],"enableServiceLinks":false,"imagePullSecrets":[{"name":"imagepullsecret"}],"nodeSelector":{"sw-backend":"true"},"restartPolicy":"Always","terminationGracePeriodSeconds":60,"volumes":[{"hostPath":{"path":"/storage/logs/seaweedfs/master","type":"DirectoryOrCreate"},"name":"seaweedfs-master-log-volume"}]}},"volumeClaimTemplates":[{"metadata":{"name":"data-seaweedfs"},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"0.4Ti"}},"storageClassName":"local-path-provisioner"}}]}}
",
      },
      "name": "seaweedfs-master",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/1-manifest/apps_v1-statefulset-seaweedfs-seaweedfs-master.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app": "seaweedfs",
            "chart": "seaweedfs-helm",
            "component": "master",
            "release": "seaweedfs",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "requiredDuringSchedulingIgnoredDuringExecution": [
                {
                  "labelSelector": {
                    "matchLabels": {
                      "app": "seaweedfs",
                      "component": "master",
                      "release": "seaweedfs",
                    },
                  },
                  "topologyKey": "kubernetes.io/hostname",
                },
              ],
            },
          },
          "containers": [
            {
              "command": [
                "/bin/sh",
                "-ec",
                "exec /usr/bin/weed -logdir=/logs \\
-v=1 \\
master \\
-port=9333 \\
-mdir=/data \\
-ip.bind=0.0.0.0 \\
-defaultReplication=000 \\
-volumeSizeLimitMB=1000 \\
-ip=\${POD_NAME}.\${SEAWEEDFS_FULLNAME}-master \\
-peers=\${SEAWEEDFS_FULLNAME}-master-0.\${SEAWEEDFS_FULLNAME}-master:9333
",
              ],
              "env": [
                {
                  "name": "POD_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP",
                    },
                  },
                },
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "SEAWEEDFS_FULLNAME",
                  "value": "seaweedfs",
                },
                {
                  "name": "WEED_MASTER_VOLUME_GROWTH_COPY_1",
                  "value": "7",
                },
                {
                  "name": "WEED_MASTER_VOLUME_GROWTH_COPY_2",
                  "value": "6",
                },
                {
                  "name": "WEED_MASTER_VOLUME_GROWTH_COPY_3",
                  "value": "3",
                },
                {
                  "name": "WEED_MASTER_VOLUME_GROWTH_COPY_OTHER",
                  "value": "1",
                },
                {
                  "name": "WEED_CLUSTER_DEFAULT",
                  "value": "sw",
                },
                {
                  "name": "WEED_CLUSTER_SW_FILER",
                  "value": "seaweedfs-filer-client:8888",
                },
                {
                  "name": "WEED_CLUSTER_SW_MASTER",
                  "value": "seaweedfs-master:9333",
                },
              ],
              "image": "chrislusf/seaweedfs:3.30",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 4,
                "httpGet": {
                  "path": "/cluster/status",
                  "port": 9333,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 20,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 10,
              },
              "name": "seaweedfs",
              "ports": [
                {
                  "containerPort": 9333,
                  "name": "swfs-master",
                },
                {
                  "containerPort": 19333,
                },
              ],
              "readinessProbe": {
                "failureThreshold": 100,
                "httpGet": {
                  "path": "/cluster/status",
                  "port": 9333,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 45,
                "successThreshold": 2,
                "timeoutSeconds": 10,
              },
              "volumeMounts": [
                {
                  "mountPath": "/data",
                  "name": "data-seaweedfs",
                },
                {
                  "mountPath": "/logs/",
                  "name": "seaweedfs-master-log-volume",
                },
              ],
            },
          ],
          "enableServiceLinks": false,
          "imagePullSecrets": [
            {
              "name": "imagepullsecret",
            },
          ],
          "nodeSelector": {
            "sw-backend": "true",
          },
          "restartPolicy": "Always",
          "terminationGracePeriodSeconds": 60,
          "volumes": [
            {
              "hostPath": {
                "path": "/storage/logs/seaweedfs/master",
                "type": "DirectoryOrCreate",
              },
              "name": "seaweedfs-master-log-volume",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"system:serviceaccount:seaweedfs-rw-sa:default"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"seaweedfs-rw-cr"},"subjects":[{"kind":"ServiceAccount","name":"seaweedfs-rw-sa","namespace":"seaweedfs"}]}
",
      },
      "name": "system:serviceaccount:seaweedfs-rw-sa:default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-system:serviceaccount:seaweedfs-rw-sa:default.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"labels":{"app":"seaweedfs","app.kubernetes.io/managed-by":"pulumi","chart":"seaweedfs-helm","heritage":"Helm","release":"seaweedfs"},"name":"seaweedfs-volume","namespace":"seaweedfs"},"spec":{"podManagementPolicy":"Parallel","replicas":1,"selector":{"matchLabels":{"app":"seaweedfs","chart":"seaweedfs-helm","component":"volume","release":"seaweedfs"}},"serviceName":"seaweedfs-volume","template":{"metadata":{"labels":{"app":"seaweedfs","chart":"seaweedfs-helm","component":"volume","release":"seaweedfs"}},"spec":{"affinity":{"podAntiAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":[{"labelSelector":{"matchLabels":{"app":"seaweedfs","component":"volume","release":"seaweedfs"}},"topologyKey":"kubernetes.io/hostname"}]}},"containers":[{"command":["/bin/sh","-ec","exec /usr/bin/weed -logdir=/logs \\\\\\n  -v=1 \\\\\\n  volume \\\\\\n  -port=8080 \\\\\\n  -metricsPort=9327 \\\\\\n  -dir=/data \\\\\\n  -max=0 \\\\\\n  -ip.bind=0.0.0.0 \\\\\\n  -readMode=proxy \\\\\\n  -minFreeSpacePercent=7 \\\\\\n  -ip=\${POD_NAME}.\${SEAWEEDFS_FULLNAME}-volume \\\\\\n  -compactionMBps=50 \\\\\\n  -mserver=\${SEAWEEDFS_FULLNAME}-master-0.\${SEAWEEDFS_FULLNAME}-master:9333\\n"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"HOST_IP","valueFrom":{"fieldRef":{"fieldPath":"status.hostIP"}}},{"name":"SEAWEEDFS_FULLNAME","value":"seaweedfs"},{"name":"WEED_CLUSTER_DEFAULT","value":"sw"},{"name":"WEED_CLUSTER_SW_FILER","value":"seaweedfs-filer-client:8888"},{"name":"WEED_CLUSTER_SW_MASTER","value":"seaweedfs-master:9333"}],"image":"chrislusf/seaweedfs:3.30","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":4,"httpGet":{"path":"/status","port":8080,"scheme":"HTTP"},"initialDelaySeconds":20,"periodSeconds":90,"successThreshold":1,"timeoutSeconds":30},"name":"seaweedfs","ports":[{"containerPort":8080,"name":"swfs-vol"},{"containerPort":9327,"name":"metrics"},{"containerPort":18080,"name":"swfs-vol-grpc"}],"readinessProbe":{"failureThreshold":100,"httpGet":{"path":"/status","port":8080,"scheme":"HTTP"},"initialDelaySeconds":15,"periodSeconds":90,"successThreshold":1,"timeoutSeconds":30},"volumeMounts":[{"mountPath":"/data/","name":"data"},{"mountPath":"/logs/","name":"logs"}]}],"enableServiceLinks":false,"imagePullSecrets":[{"name":"imagepullsecret"}],"nodeSelector":{"sw-volume":"true"},"restartPolicy":"Always","terminationGracePeriodSeconds":150,"volumes":[{"hostPath":{"path":"/storage/logs/seaweedfs/volume","type":"DirectoryOrCreate"},"name":"logs"}]}},"volumeClaimTemplates":[{"metadata":{"name":"data"},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"24Ti"}},"storageClassName":"local-path-provisioner"}}]}}
",
      },
      "name": "seaweedfs-volume",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/1-manifest/apps_v1-statefulset-seaweedfs-seaweedfs-volume.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app": "seaweedfs",
            "chart": "seaweedfs-helm",
            "component": "volume",
            "release": "seaweedfs",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "requiredDuringSchedulingIgnoredDuringExecution": [
                {
                  "labelSelector": {
                    "matchLabels": {
                      "app": "seaweedfs",
                      "component": "volume",
                      "release": "seaweedfs",
                    },
                  },
                  "topologyKey": "kubernetes.io/hostname",
                },
              ],
            },
          },
          "containers": [
            {
              "command": [
                "/bin/sh",
                "-ec",
                "exec /usr/bin/weed -logdir=/logs \\
  -v=1 \\
  volume \\
  -port=8080 \\
  -metricsPort=9327 \\
  -dir=/data \\
  -max=0 \\
  -ip.bind=0.0.0.0 \\
  -readMode=proxy \\
  -minFreeSpacePercent=7 \\
  -ip=\${POD_NAME}.\${SEAWEEDFS_FULLNAME}-volume \\
  -compactionMBps=50 \\
  -mserver=\${SEAWEEDFS_FULLNAME}-master-0.\${SEAWEEDFS_FULLNAME}-master:9333
",
              ],
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "HOST_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.hostIP",
                    },
                  },
                },
                {
                  "name": "SEAWEEDFS_FULLNAME",
                  "value": "seaweedfs",
                },
                {
                  "name": "WEED_CLUSTER_DEFAULT",
                  "value": "sw",
                },
                {
                  "name": "WEED_CLUSTER_SW_FILER",
                  "value": "seaweedfs-filer-client:8888",
                },
                {
                  "name": "WEED_CLUSTER_SW_MASTER",
                  "value": "seaweedfs-master:9333",
                },
              ],
              "image": "chrislusf/seaweedfs:3.30",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 4,
                "httpGet": {
                  "path": "/status",
                  "port": 8080,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 20,
                "periodSeconds": 90,
                "successThreshold": 1,
                "timeoutSeconds": 30,
              },
              "name": "seaweedfs",
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "swfs-vol",
                },
                {
                  "containerPort": 9327,
                  "name": "metrics",
                },
                {
                  "containerPort": 18080,
                  "name": "swfs-vol-grpc",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 100,
                "httpGet": {
                  "path": "/status",
                  "port": 8080,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 15,
                "periodSeconds": 90,
                "successThreshold": 1,
                "timeoutSeconds": 30,
              },
              "volumeMounts": [
                {
                  "mountPath": "/data/",
                  "name": "data",
                },
                {
                  "mountPath": "/logs/",
                  "name": "logs",
                },
              ],
            },
          ],
          "enableServiceLinks": false,
          "imagePullSecrets": [
            {
              "name": "imagepullsecret",
            },
          ],
          "nodeSelector": {
            "sw-volume": "true",
          },
          "restartPolicy": "Always",
          "terminationGracePeriodSeconds": 150,
          "volumes": [
            {
              "hostPath": {
                "path": "/storage/logs/seaweedfs/volume",
                "type": "DirectoryOrCreate",
              },
              "name": "logs",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"labels":{"app":"seaweedfs","app.kubernetes.io/managed-by":"pulumi","chart":"seaweedfs-helm","heritage":"Helm","release":"seaweedfs"},"name":"seaweedfs-filer","namespace":"seaweedfs"},"spec":{"podManagementPolicy":"Parallel","replicas":1,"selector":{"matchLabels":{"app":"seaweedfs","chart":"seaweedfs-helm","component":"filer","release":"seaweedfs"}},"serviceName":"seaweedfs-filer","template":{"metadata":{"labels":{"app":"seaweedfs","chart":"seaweedfs-helm","component":"filer","release":"seaweedfs"}},"spec":{"affinity":{"podAntiAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":[{"labelSelector":{"matchLabels":{"app":"seaweedfs","component":"filer","release":"seaweedfs"}},"topologyKey":"kubernetes.io/hostname"}]}},"containers":[{"command":["/bin/sh","-ec","exec /usr/bin/weed -logdir=/logs \\\\\\n-v=1 \\\\\\nfiler \\\\\\n-port=8888 \\\\\\n-metricsPort=9327 \\\\\\n-dirListLimit=1000 \\\\\\n-defaultReplicaPlacement=000 \\\\\\n-ip=\${POD_IP} \\\\\\n-s3 \\\\\\n-s3.port=8333 \\\\\\n-master=\${SEAWEEDFS_FULLNAME}-master-0.\${SEAWEEDFS_FULLNAME}-master:9333\\n"],"env":[{"name":"POD_IP","valueFrom":{"fieldRef":{"fieldPath":"status.podIP"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"WEED_MYSQL_USERNAME","valueFrom":{"secretKeyRef":{"key":"user","name":"secret-seaweedfs-db"}}},{"name":"WEED_MYSQL_PASSWORD","valueFrom":{"secretKeyRef":{"key":"password","name":"secret-seaweedfs-db"}}},{"name":"SEAWEEDFS_FULLNAME","value":"seaweedfs"},{"name":"WEED_FILER_BUCKETS_FOLDER","value":"/buckets"},{"name":"WEED_FILER_OPTIONS_RECURSIVE_DELETE","value":"false"},{"name":"WEED_LEVELDB2_ENABLED","value":"false"},{"name":"WEED_MYSQL_CONNECTION_MAX_IDLE","value":"5"},{"name":"WEED_MYSQL_CONNECTION_MAX_LIFETIME_SECONDS","value":"600"},{"name":"WEED_MYSQL_CONNECTION_MAX_OPEN","value":"75"},{"name":"WEED_MYSQL_DATABASE","value":"sw_database"},{"name":"WEED_MYSQL_ENABLED","value":"false"},{"name":"WEED_MYSQL_HOSTNAME","value":"mysql-db-host"},{"name":"WEED_MYSQL_INTERPOLATEPARAMS","value":"true"},{"name":"WEED_MYSQL_PORT","value":"3306"},{"name":"WEED_TIKV_ENABLED","value":"true"},{"name":"WEED_TIKV_PDADDRS","value":"seaweedfs-tikv-pd:2379"},{"name":"WEED_CLUSTER_DEFAULT","value":"sw"},{"name":"WEED_CLUSTER_SW_FILER","value":"seaweedfs-filer-client:8888"},{"name":"WEED_CLUSTER_SW_MASTER","value":"seaweedfs-master:9333"}],"image":"chrislusf/seaweedfs:3.29_full","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":5,"httpGet":{"path":"/","port":8888,"scheme":"HTTP"},"initialDelaySeconds":20,"periodSeconds":30,"successThreshold":1,"timeoutSeconds":10},"name":"seaweedfs","ports":[{"containerPort":8888,"name":"swfs-filer"},{"containerPort":9327,"name":"metrics"},{"containerPort":18888}],"readinessProbe":{"failureThreshold":100,"httpGet":{"path":"/","port":8888,"scheme":"HTTP"},"initialDelaySeconds":10,"periodSeconds":15,"successThreshold":1,"timeoutSeconds":10},"volumeMounts":[{"mountPath":"/logs/","name":"seaweedfs-filer-log-volume"},{"mountPath":"/etc/sw","name":"config-users","readOnly":true}]}],"enableServiceLinks":false,"imagePullSecrets":[{"name":"imagepullsecret"}],"nodeSelector":{"sw-backend":"true"},"restartPolicy":"Always","serviceAccountName":"seaweedfs-rw-sa","terminationGracePeriodSeconds":60,"volumes":[{"hostPath":{"path":"/storage/logs/seaweedfs/filer","type":"DirectoryOrCreate"},"name":"seaweedfs-filer-log-volume"},{"configMap":{"name":"seaweedfs-db-init-config"},"name":"db-schema-config-volume"},{"name":"config-users","secret":{"defaultMode":420,"secretName":"seaweedfs-s3-secret"}}]}},"volumeClaimTemplates":[{"metadata":{"name":"data-filer"},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"0.4Ti"}},"storageClassName":"local-path-provisioner"}}]}}
",
      },
      "name": "seaweedfs-filer",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/1-manifest/apps_v1-statefulset-seaweedfs-seaweedfs-filer.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app": "seaweedfs",
            "chart": "seaweedfs-helm",
            "component": "filer",
            "release": "seaweedfs",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "requiredDuringSchedulingIgnoredDuringExecution": [
                {
                  "labelSelector": {
                    "matchLabels": {
                      "app": "seaweedfs",
                      "component": "filer",
                      "release": "seaweedfs",
                    },
                  },
                  "topologyKey": "kubernetes.io/hostname",
                },
              ],
            },
          },
          "containers": [
            {
              "command": [
                "/bin/sh",
                "-ec",
                "exec /usr/bin/weed -logdir=/logs \\
-v=1 \\
filer \\
-port=8888 \\
-metricsPort=9327 \\
-dirListLimit=1000 \\
-defaultReplicaPlacement=000 \\
-ip=\${POD_IP} \\
-s3 \\
-s3.port=8333 \\
-master=\${SEAWEEDFS_FULLNAME}-master-0.\${SEAWEEDFS_FULLNAME}-master:9333
",
              ],
              "env": [
                {
                  "name": "POD_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP",
                    },
                  },
                },
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "WEED_MYSQL_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "user",
                      "name": "secret-seaweedfs-db",
                    },
                  },
                },
                {
                  "name": "WEED_MYSQL_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "password",
                      "name": "secret-seaweedfs-db",
                    },
                  },
                },
                {
                  "name": "SEAWEEDFS_FULLNAME",
                  "value": "seaweedfs",
                },
                {
                  "name": "WEED_FILER_BUCKETS_FOLDER",
                  "value": "/buckets",
                },
                {
                  "name": "WEED_FILER_OPTIONS_RECURSIVE_DELETE",
                  "value": "false",
                },
                {
                  "name": "WEED_LEVELDB2_ENABLED",
                  "value": "false",
                },
                {
                  "name": "WEED_MYSQL_CONNECTION_MAX_IDLE",
                  "value": "5",
                },
                {
                  "name": "WEED_MYSQL_CONNECTION_MAX_LIFETIME_SECONDS",
                  "value": "600",
                },
                {
                  "name": "WEED_MYSQL_CONNECTION_MAX_OPEN",
                  "value": "75",
                },
                {
                  "name": "WEED_MYSQL_DATABASE",
                  "value": "sw_database",
                },
                {
                  "name": "WEED_MYSQL_ENABLED",
                  "value": "false",
                },
                {
                  "name": "WEED_MYSQL_HOSTNAME",
                  "value": "mysql-db-host",
                },
                {
                  "name": "WEED_MYSQL_INTERPOLATEPARAMS",
                  "value": "true",
                },
                {
                  "name": "WEED_MYSQL_PORT",
                  "value": "3306",
                },
                {
                  "name": "WEED_TIKV_ENABLED",
                  "value": "true",
                },
                {
                  "name": "WEED_TIKV_PDADDRS",
                  "value": "seaweedfs-tikv-pd:2379",
                },
                {
                  "name": "WEED_CLUSTER_DEFAULT",
                  "value": "sw",
                },
                {
                  "name": "WEED_CLUSTER_SW_FILER",
                  "value": "seaweedfs-filer-client:8888",
                },
                {
                  "name": "WEED_CLUSTER_SW_MASTER",
                  "value": "seaweedfs-master:9333",
                },
              ],
              "image": "chrislusf/seaweedfs:3.29_full",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 5,
                "httpGet": {
                  "path": "/",
                  "port": 8888,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 20,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 10,
              },
              "name": "seaweedfs",
              "ports": [
                {
                  "containerPort": 8888,
                  "name": "swfs-filer",
                },
                {
                  "containerPort": 9327,
                  "name": "metrics",
                },
                {
                  "containerPort": 18888,
                },
              ],
              "readinessProbe": {
                "failureThreshold": 100,
                "httpGet": {
                  "path": "/",
                  "port": 8888,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 15,
                "successThreshold": 1,
                "timeoutSeconds": 10,
              },
              "volumeMounts": [
                {
                  "mountPath": "/logs/",
                  "name": "seaweedfs-filer-log-volume",
                },
                {
                  "mountPath": "/etc/sw",
                  "name": "config-users",
                  "readOnly": true,
                },
              ],
            },
          ],
          "enableServiceLinks": false,
          "imagePullSecrets": [
            {
              "name": "imagepullsecret",
            },
          ],
          "nodeSelector": {
            "sw-backend": "true",
          },
          "restartPolicy": "Always",
          "serviceAccountName": "seaweedfs-rw-sa",
          "terminationGracePeriodSeconds": 60,
          "volumes": [
            {
              "hostPath": {
                "path": "/storage/logs/seaweedfs/filer",
                "type": "DirectoryOrCreate",
              },
              "name": "seaweedfs-filer-log-volume",
            },
            {
              "configMap": {
                "name": "seaweedfs-db-init-config",
              },
              "name": "db-schema-config-volume",
            },
            {
              "name": "config-users",
              "secret": {
                "defaultMode": 420,
                "secretName": "seaweedfs-s3-secret",
              },
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "admin_access_key_id": "QVlUNWtIZllPMENwTjhrNg==",
      "admin_secret_access_key": "VGw1WkIzQnBxcVlHVFlQd0J2TkxDQTFtZ1hubkpmSUI=",
      "read_access_key_id": "N2J0WmZMZFlaWUdJdmdrcg==",
      "read_secret_access_key": "blhuSENXN2NLaXNXTDE3dlljZ2M4NHRjeGZBSUJwbGc=",
      "seaweedfs_s3_config": "eyJpZGVudGl0aWVzIjpbeyJuYW1lIjoiYW52QWRtaW4iLCJjcmVkZW50aWFscyI6W3siYWNjZXNzS2V5IjoiQVlUNWtIZllPMENwTjhrNiIsInNlY3JldEtleSI6IlRsNVpCM0JwcXFZR1RZUHdCdk5MQ0ExbWdYbm5KZklCIn1dLCJhY3Rpb25zIjpbIkFkbWluIiwiUmVhZCIsIldyaXRlIl19LHsibmFtZSI6ImFudlJlYWRPbmx5IiwiY3JlZGVudGlhbHMiOlt7ImFjY2Vzc0tleSI6IjdidFpmTGRZWllHSXZna3IiLCJzZWNyZXRLZXkiOiJuWG5IQ1c3Y0tpc1dMMTd2WWNnYzg0dGN4ZkFJQnBsZyJ9XSwiYWN0aW9ucyI6WyJSZWFkIl19XX0=",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "pre-install",
        "helm.sh/resource-policy": "keep",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Secret","metadata":{"annotations":{"helm.sh/hook":"pre-install","helm.sh/resource-policy":"keep"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"seaweedfs-s3-secret","namespace":"seaweedfs"},"stringData":{"admin_access_key_id":"AYT5kHfYO0CpN8k6","admin_secret_access_key":"Tl5ZB3BpqqYGTYPwBvNLCA1mgXnnJfIB","read_access_key_id":"7btZfLdYZYGIvgkr","read_secret_access_key":"nXnHCW7cKisWL17vYcgc84tcxfAIBplg","seaweedfs_s3_config":"{\\"identities\\":[{\\"name\\":\\"anvAdmin\\",\\"credentials\\":[{\\"accessKey\\":\\"AYT5kHfYO0CpN8k6\\",\\"secretKey\\":\\"Tl5ZB3BpqqYGTYPwBvNLCA1mgXnnJfIB\\"}],\\"actions\\":[\\"Admin\\",\\"Read\\",\\"Write\\"]},{\\"name\\":\\"anvReadOnly\\",\\"credentials\\":[{\\"accessKey\\":\\"7btZfLdYZYGIvgkr\\",\\"secretKey\\":\\"nXnHCW7cKisWL17vYcgc84tcxfAIBplg\\"}],\\"actions\\":[\\"Read\\"]}]}"},"type":"Opaque"}
",
      },
      "name": "seaweedfs-s3-secret",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/1-manifest/v1-secret-seaweedfs-seaweedfs-s3-secret.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
    "stringData": {
      "admin_access_key_id": "AYT5kHfYO0CpN8k6",
      "admin_secret_access_key": "Tl5ZB3BpqqYGTYPwBvNLCA1mgXnnJfIB",
      "read_access_key_id": "7btZfLdYZYGIvgkr",
      "read_secret_access_key": "nXnHCW7cKisWL17vYcgc84tcxfAIBplg",
      "seaweedfs_s3_config": "{"identities":[{"name":"anvAdmin","credentials":[{"accessKey":"AYT5kHfYO0CpN8k6","secretKey":"Tl5ZB3BpqqYGTYPwBvNLCA1mgXnnJfIB"}],"actions":["Admin","Read","Write"]},{"name":"anvReadOnly","credentials":[{"accessKey":"7btZfLdYZYGIvgkr","secretKey":"nXnHCW7cKisWL17vYcgc84tcxfAIBplg"}],"actions":["Read"]}]}",
    },
    "type": "Opaque",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app":"seaweedfs","app.kubernetes.io/managed-by":"pulumi","component":"s3"},"name":"seaweedfs-s3","namespace":"seaweedfs"},"spec":{"ports":[{"name":"swfs-s3","port":8333,"protocol":"TCP","targetPort":8333}],"selector":{"app":"seaweedfs","component":"filer"}}}
",
      },
      "name": "seaweedfs-s3",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/1-manifest/v1-service-seaweedfs-seaweedfs-s3.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app":"seaweedfs","app.kubernetes.io/managed-by":"pulumi","component":"filer","monitoring":"true"},"name":"seaweedfs-filer-client","namespace":"seaweedfs"},"spec":{"clusterIP":"None","ports":[{"name":"swfs-filer","port":8888,"protocol":"TCP","targetPort":8888},{"name":"swfs-filer-grpc","port":18888,"protocol":"TCP","targetPort":18888},{"name":"metrics","port":9327,"protocol":"TCP","targetPort":9327}],"selector":{"app":"seaweedfs","component":"filer"}}}
",
      },
      "name": "seaweedfs-filer-client",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/1-manifest/v1-service-seaweedfs-seaweedfs-filer-client.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app":"seaweedfs","app.kubernetes.io/managed-by":"pulumi","component":"volume"},"name":"seaweedfs-volume","namespace":"seaweedfs"},"spec":{"clusterIP":"None","ports":[{"name":"swfs-volume","port":8080,"protocol":"TCP","targetPort":8080},{"name":"swfs-volume-18080","port":18080,"protocol":"TCP","targetPort":18080},{"name":"metrics","port":9327,"protocol":"TCP","targetPort":9327}],"selector":{"app":"seaweedfs","component":"volume"}}}
",
      },
      "name": "seaweedfs-volume",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/1-manifest/v1-service-seaweedfs-seaweedfs-volume.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"seaweedfs-rw-sa","namespace":"seaweedfs"}}
",
      },
      "name": "seaweedfs-rw-sa",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/1-manifest/v1-serviceaccount-seaweedfs-seaweedfs-rw-sa.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
      },
      "name": "tidbinitializers.pingcap.com",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-tidbinitializers.pingcap.com.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
      },
      "name": "tidbmonitors.pingcap.com",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-tidbmonitors.pingcap.com.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
      },
      "name": "tidbclusters.pingcap.com",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-tidbclusters.pingcap.com.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
      },
      "name": "tidbclusterautoscalers.pingcap.com",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-tidbclusterautoscalers.pingcap.com.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
      },
      "name": "dmclusters.pingcap.com",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-dmclusters.pingcap.com.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
      },
      "name": "backups.pingcap.com",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-backups.pingcap.com.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
      },
      "name": "tidbngmonitorings.pingcap.com",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-tidbngmonitorings.pingcap.com.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
      },
      "name": "backupschedules.pingcap.com",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-backupschedules.pingcap.com.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.2",
      },
      "name": "restores.pingcap.com",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-restores.pingcap.com.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "data": {
      "scheduler-config.yaml": "
apiVersion: kubescheduler.config.k8s.io/v1beta2
kind: KubeSchedulerConfiguration
leaderElection:
  leaderElect: true
  resourceNamespace: tikv-admin
  resourceName: tidb-scheduler
profiles:
  - schedulerName: tidb-scheduler
extenders:
  - urlPrefix: http://127.0.0.1:10262/scheduler
    filterVerb: filter
    preemptVerb: preempt
    weight: 1
    enableHTTPS: false
    httpTimeout: 30s",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"scheduler-config.yaml":"\\napiVersion: kubescheduler.config.k8s.io/v1beta2\\nkind: KubeSchedulerConfiguration\\nleaderElection:\\n  leaderElect: true\\n  resourceNamespace: tikv-admin\\n  resourceName: tidb-scheduler\\nprofiles:\\n  - schedulerName: tidb-scheduler\\nextenders:\\n  - urlPrefix: http://127.0.0.1:10262/scheduler\\n    filterVerb: filter\\n    preemptVerb: preempt\\n    weight: 1\\n    enableHTTPS: false\\n    httpTimeout: 30s"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/component":"scheduler","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"tidb-operator","helm.sh/chart":"tidb-operator-v1.3.8"},"name":"tidb-scheduler-config","namespace":"tikv-admin"}}
",
      },
      "name": "tidb-scheduler-config",
      "namespace": "tikv-admin",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/1-manifest/v1-configmap-tikv-admin-tidb-scheduler-config.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"controller-manager","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"tidb-operator","helm.sh/chart":"tidb-operator-v1.3.8"},"name":"tidb-controller-manager","namespace":"tikv-admin"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"controller-manager","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/name":"tidb-operator"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"controller-manager","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/name":"tidb-operator"}},"spec":{"containers":[{"command":["/usr/local/bin/tidb-controller-manager","-tidb-backup-manager-image=pingcap/tidb-backup-manager:v1.3.8","-tidb-discovery-image=pingcap/tidb-operator:v1.3.8","-cluster-scoped=true","-cluster-permission-node=true","-cluster-permission-pv=true","-cluster-permission-sc=true","-auto-failover=true","-pd-failover-period=5m","-tikv-failover-period=5m","-tiflash-failover-period=5m","-tidb-failover-period=5m","-dm-master-failover-period=5m","-dm-worker-failover-period=5m","-v=2"],"env":[{"name":"NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"TZ","value":"UTC"}],"image":"pingcap/tidb-operator:v1.3.8","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":10,"initialDelaySeconds":30,"periodSeconds":10,"tcpSocket":{"port":6060}},"name":"tidb-operator","resources":{"requests":{"cpu":"80m","memory":"50Mi"}}}],"serviceAccount":"tidb-controller-manager"}}}}
",
      },
      "name": "tidb-controller-manager",
      "namespace": "tikv-admin",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/1-manifest/apps_v1-deployment-tikv-admin-tidb-controller-manager.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "controller-manager",
            "app.kubernetes.io/instance": "tidb-operator",
            "app.kubernetes.io/name": "tidb-operator",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "/usr/local/bin/tidb-controller-manager",
                "-tidb-backup-manager-image=pingcap/tidb-backup-manager:v1.3.8",
                "-tidb-discovery-image=pingcap/tidb-operator:v1.3.8",
                "-cluster-scoped=true",
                "-cluster-permission-node=true",
                "-cluster-permission-pv=true",
                "-cluster-permission-sc=true",
                "-auto-failover=true",
                "-pd-failover-period=5m",
                "-tikv-failover-period=5m",
                "-tiflash-failover-period=5m",
                "-tidb-failover-period=5m",
                "-dm-master-failover-period=5m",
                "-dm-worker-failover-period=5m",
                "-v=2",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "TZ",
                  "value": "UTC",
                },
              ],
              "image": "pingcap/tidb-operator:v1.3.8",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 10,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 6060,
                },
              },
              "name": "tidb-operator",
              "resources": {
                "requests": {
                  "cpu": "80m",
                  "memory": "50Mi",
                },
              },
            },
          ],
          "serviceAccount": "tidb-controller-manager",
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"scheduler","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"tidb-operator","helm.sh/chart":"tidb-operator-v1.3.8"},"name":"tidb-operator:tidb-scheduler"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"tidb-operator:tidb-scheduler"},"subjects":[{"kind":"ServiceAccount","name":"tidb-scheduler","namespace":"tikv-admin"}]}
",
      },
      "name": "tidb-operator:tidb-scheduler",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-tidb-operator:tidb-scheduler.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/component":"scheduler","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"tidb-operator","helm.sh/chart":"tidb-operator-v1.3.8"},"name":"tidb-scheduler","namespace":"tikv-admin"}}
",
      },
      "name": "tidb-scheduler",
      "namespace": "tikv-admin",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/1-manifest/v1-serviceaccount-tikv-admin-tidb-scheduler.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/component":"controller-manager","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"tidb-operator","helm.sh/chart":"tidb-operator-v1.3.8"},"name":"tidb-controller-manager","namespace":"tikv-admin"}}
",
      },
      "name": "tidb-controller-manager",
      "namespace": "tikv-admin",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/1-manifest/v1-serviceaccount-tikv-admin-tidb-controller-manager.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"scheduler","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"tidb-operator","helm.sh/chart":"tidb-operator-v1.3.8"},"name":"tidb-operator:tidb-scheduler"},"rules":[{"apiGroups":[""],"resources":["configmaps"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["pods"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["nodes"],"verbs":["get","list"]},{"apiGroups":["pingcap.com"],"resources":["tidbclusters"],"verbs":["get"]},{"apiGroups":[""],"resources":["persistentvolumeclaims"],"verbs":["get","list","update"]},{"apiGroups":[""],"resources":["endpoints"],"verbs":["delete","get","patch","update"]},{"apiGroups":["coordination.k8s.io"],"resources":["leases"],"verbs":["create"]},{"apiGroups":["coordination.k8s.io"],"resourceNames":["tidb-scheduler"],"resources":["leases"],"verbs":["get","update"]}]}
",
      },
      "name": "tidb-operator:tidb-scheduler",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-tidb-operator:tidb-scheduler.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"controller-manager","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"tidb-operator","helm.sh/chart":"tidb-operator-v1.3.8"},"name":"tidb-operator:tidb-controller-manager"},"rules":[{"apiGroups":[""],"resources":["services","events"],"verbs":["*"]},{"apiGroups":[""],"resources":["endpoints","configmaps"],"verbs":["create","get","list","watch","update","delete"]},{"apiGroups":[""],"resources":["serviceaccounts"],"verbs":["create","get","update","delete"]},{"apiGroups":["batch"],"resources":["jobs"],"verbs":["get","list","watch","create","update","delete"]},{"apiGroups":[""],"resources":["secrets"],"verbs":["create","update","get","list","watch","delete"]},{"apiGroups":[""],"resources":["persistentvolumeclaims"],"verbs":["get","list","watch","create","update","delete","patch"]},{"apiGroups":[""],"resources":["pods"],"verbs":["get","list","watch","update","delete"]},{"apiGroups":["apps"],"resources":["statefulsets","deployments","controllerrevisions"],"verbs":["*"]},{"apiGroups":["extensions"],"resources":["ingresses"],"verbs":["*"]},{"apiGroups":["networking.k8s.io"],"resources":["ingresses"],"verbs":["*"]},{"apiGroups":["apps.pingcap.com"],"resources":["statefulsets","statefulsets/status"],"verbs":["*"]},{"apiGroups":["pingcap.com"],"resources":["*"],"verbs":["*"]},{"nonResourceURLs":["/metrics"],"verbs":["get"]},{"apiGroups":[""],"resources":["nodes"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["persistentvolumes"],"verbs":["get","list","watch","patch","update"]},{"apiGroups":["storage.k8s.io"],"resources":["storageclasses"],"verbs":["get","list","watch"]},{"apiGroups":["rbac.authorization.k8s.io"],"resources":["clusterroles","roles"],"verbs":["escalate","create","get","update","delete"]},{"apiGroups":["rbac.authorization.k8s.io"],"resources":["rolebindings","clusterrolebindings"],"verbs":["create","get","update","delete"]}]}
",
      },
      "name": "tidb-operator:tidb-controller-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-tidb-operator:tidb-controller-manager.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"scheduler","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"tidb-operator","helm.sh/chart":"tidb-operator-v1.3.8"},"name":"tidb-operator:volume-scheduler"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"system:volume-scheduler"},"subjects":[{"kind":"ServiceAccount","name":"tidb-scheduler","namespace":"tikv-admin"}]}
",
      },
      "name": "tidb-operator:volume-scheduler",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-tidb-operator:volume-scheduler.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"scheduler","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"tidb-operator","helm.sh/chart":"tidb-operator-v1.3.8"},"name":"tidb-scheduler","namespace":"tikv-admin"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"scheduler","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/name":"tidb-operator"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"scheduler","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/name":"tidb-operator"}},"spec":{"containers":[{"command":["/usr/local/bin/tidb-scheduler","-v=2","-port=10262"],"image":"pingcap/tidb-operator:v1.3.8","imagePullPolicy":"IfNotPresent","name":"tidb-scheduler","resources":{"limits":{"cpu":"250m","memory":"150Mi"},"requests":{"cpu":"80m","memory":"50Mi"}}},{"command":["kube-scheduler","--v=2","--config=/etc/kubernetes/scheduler-config.yaml"],"image":"k8s.gcr.io/kube-scheduler:v1.23.6","imagePullPolicy":"IfNotPresent","name":"kube-scheduler","resources":{"limits":{"cpu":"250m","memory":"150Mi"},"requests":{"cpu":"80m","memory":"50Mi"}},"volumeMounts":[{"mountPath":"/etc/kubernetes","name":"scheduler-config"}]}],"serviceAccount":"tidb-scheduler","volumes":[{"configMap":{"name":"tidb-scheduler-config"},"name":"scheduler-config"}]}}}}
",
      },
      "name": "tidb-scheduler",
      "namespace": "tikv-admin",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/1-manifest/apps_v1-deployment-tikv-admin-tidb-scheduler.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "scheduler",
            "app.kubernetes.io/instance": "tidb-operator",
            "app.kubernetes.io/name": "tidb-operator",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "/usr/local/bin/tidb-scheduler",
                "-v=2",
                "-port=10262",
              ],
              "image": "pingcap/tidb-operator:v1.3.8",
              "imagePullPolicy": "IfNotPresent",
              "name": "tidb-scheduler",
              "resources": {
                "limits": {
                  "cpu": "250m",
                  "memory": "150Mi",
                },
                "requests": {
                  "cpu": "80m",
                  "memory": "50Mi",
                },
              },
            },
            {
              "command": [
                "kube-scheduler",
                "--v=2",
                "--config=/etc/kubernetes/scheduler-config.yaml",
              ],
              "image": "k8s.gcr.io/kube-scheduler:v1.23.6",
              "imagePullPolicy": "IfNotPresent",
              "name": "kube-scheduler",
              "resources": {
                "limits": {
                  "cpu": "250m",
                  "memory": "150Mi",
                },
                "requests": {
                  "cpu": "80m",
                  "memory": "50Mi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/etc/kubernetes",
                  "name": "scheduler-config",
                },
              ],
            },
          ],
          "serviceAccount": "tidb-scheduler",
          "volumes": [
            {
              "configMap": {
                "name": "tidb-scheduler-config",
              },
              "name": "scheduler-config",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"controller-manager","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"tidb-operator","helm.sh/chart":"tidb-operator-v1.3.8"},"name":"tidb-operator:tidb-controller-manager"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"tidb-operator:tidb-controller-manager"},"subjects":[{"kind":"ServiceAccount","name":"tidb-controller-manager","namespace":"tikv-admin"}]}
",
      },
      "name": "tidb-operator:tidb-controller-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-tidb-operator:tidb-controller-manager.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"scheduler","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"tidb-operator","helm.sh/chart":"tidb-operator-v1.3.8"},"name":"tidb-operator:kube-scheduler"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"system:kube-scheduler"},"subjects":[{"kind":"ServiceAccount","name":"tidb-scheduler","namespace":"tikv-admin"}]}
",
      },
      "name": "tidb-operator:kube-scheduler",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-tidb-operator:kube-scheduler.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"surrealdb","namespace":"applications"},"spec":{"replicas":2,"selector":{"matchLabels":{"app":"surrealdb"}},"template":{"metadata":{"labels":{"app":"surrealdb"}},"spec":{"containers":[{"args":["start","--log","debug","--user","test","--pass","test","tikv://tikv-pd.applications:2379"],"command":["/surreal"],"env":[{"name":"bG9jYWw=,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"bG9jYWw="},{"name":"MC4wLjAuMA==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"MC4wLjAuMA=="},{"name":"ODAwMA==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"ODAwMA=="},{"name":"aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"aHR0cDovL2xvY2FsaG9zdDo4MDgw"},{"name":"dGlrdi1wZC5hcHBsaWNhdGlvbnM=,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"dGlrdi1wZC5hcHBsaWNhdGlvbnM="},{"name":"dGlrdg==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"dGlrdg=="},{"name":"MjM3OQ==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"MjM3OQ=="},{"name":"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu"}],"image":"surrealdb/surrealdb:1.0.0-beta.8","livenessProbe":{"failureThreshold":7,"httpGet":{"path":"/api/liveness","port":8000},"initialDelaySeconds":300,"periodSeconds":10},"name":"surrealdb","ports":[{"containerPort":8000,"name":"http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/api/healthz","port":8000},"initialDelaySeconds":60,"periodSeconds":10},"resources":{"limits":{"cpu":"100m","memory":"200Mi"},"requests":{"cpu":"100m","memory":"70Mi"}},"volumeMounts":[]}],"imagePullSecrets":[{"name":"bXktcmVnaXN0cnkta2V5"}],"initContainers":[],"volumes":[]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/surrealdb/1-manifest/apps_v1-deployment-applications-surrealdb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/surrealdb",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app": "surrealdb",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "start",
                "--log",
                "debug",
                "--user",
                "test",
                "--pass",
                "test",
                "tikv://tikv-pd.applications:2379",
              ],
              "command": [
                "/surreal",
              ],
              "env": [
                {
                  "name": "bG9jYWw=,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "bG9jYWw=",
                },
                {
                  "name": "MC4wLjAuMA==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "MC4wLjAuMA==",
                },
                {
                  "name": "ODAwMA==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "ODAwMA==",
                },
                {
                  "name": "aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
                },
                {
                  "name": "dGlrdi1wZC5hcHBsaWNhdGlvbnM=,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "dGlrdi1wZC5hcHBsaWNhdGlvbnM=",
                },
                {
                  "name": "dGlrdg==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "dGlrdg==",
                },
                {
                  "name": "MjM3OQ==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "MjM3OQ==",
                },
                {
                  "name": "bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu",
                },
              ],
              "image": "surrealdb/surrealdb:1.0.0-beta.8",
              "livenessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/api/liveness",
                  "port": 8000,
                },
                "initialDelaySeconds": 300,
                "periodSeconds": 10,
              },
              "name": "surrealdb",
              "ports": [
                {
                  "containerPort": 8000,
                  "name": "http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/api/healthz",
                  "port": 8000,
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "200Mi",
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "70Mi",
                },
              },
              "volumeMounts": [],
            },
          ],
          "imagePullSecrets": [
            {
              "name": "bXktcmVnaXN0cnkta2V5",
            },
          ],
          "initContainers": [],
          "volumes": [],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "APP_ENVIRONMENT": "bG9jYWw=",
      "APP_EXTERNAL_BASE_URL": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
      "APP_HOST": "MC4wLjAuMA==",
      "APP_PORT": "ODAwMA==",
      "TIKV_HOST": "dGlrdi1wZC5hcHBsaWNhdGlvbnM=",
      "TIKV_NAME": "dGlrdg==",
      "TIKV_PORT": "MjM3OQ==",
      "TIKV_SERVICE_NAME": "dGlrdg==",
      "TIKV_STORAGE_CLASS": "bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"APP_ENVIRONMENT":"bG9jYWw=","APP_EXTERNAL_BASE_URL":"aHR0cDovL2xvY2FsaG9zdDo4MDgw","APP_HOST":"MC4wLjAuMA==","APP_PORT":"ODAwMA==","TIKV_HOST":"dGlrdi1wZC5hcHBsaWNhdGlvbnM=","TIKV_NAME":"dGlrdg==","TIKV_PORT":"MjM3OQ==","TIKV_SERVICE_NAME":"dGlrdg==","TIKV_STORAGE_CLASS":"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu"},"kind":"Secret","metadata":{"annotations":{"sealedsecrets.bitnami.com/managed":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"surrealdb","namespace":"applications"}}
",
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/surrealdb/1-manifest/v1-secret-applications-surrealdb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/surrealdb",
  },
  {
    "apiVersion": "v1",
    "data": {
      "config": "very important data",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"config":"very important data"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"surrealdb","namespace":"applications"}}
",
      },
      "name": "surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/surrealdb/1-manifest/v1-configmap-applications-surrealdb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/surrealdb",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"surrealdb\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"replicas\\":2,\\"selector\\":{\\"matchLabels\\":{\\"app\\":\\"surrealdb\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app\\":\\"surrealdb\\"}},\\"spec\\":{\\"containers\\":[{\\"args\\":[\\"start\\",\\"--log\\",\\"debug\\",\\"--user\\",\\"test\\",\\"--pass\\",\\"test\\",\\"tikv://tikv-pd.applications:2379\\"],\\"command\\":[\\"/surreal\\"],\\"env\\":[{\\"name\\":\\"bG9jYWw=,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"bG9jYWw=\\"},{\\"name\\":\\"MC4wLjAuMA==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"MC4wLjAuMA==\\"},{\\"name\\":\\"ODAwMA==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"ODAwMA==\\"},{\\"name\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\"},{\\"name\\":\\"dGlrdi1wZC5hcHBsaWNhdGlvbnM=,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"dGlrdi1wZC5hcHBsaWNhdGlvbnM=\\"},{\\"name\\":\\"dGlrdg==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"dGlrdg==\\"},{\\"name\\":\\"MjM3OQ==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"MjM3OQ==\\"},{\\"name\\":\\"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu\\"}],\\"image\\":\\"surrealdb/surrealdb:1.0.0-beta.8\\",\\"livenessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/api/liveness\\",\\"port\\":8000},\\"initialDelaySeconds\\":300,\\"periodSeconds\\":10},\\"name\\":\\"surrealdb\\",\\"ports\\":[{\\"containerPort\\":8000,\\"name\\":\\"http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/api/healthz\\",\\"port\\":8000},\\"initialDelaySeconds\\":60,\\"periodSeconds\\":10},\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"200Mi\\"},\\"requests\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"70Mi\\"}},\\"volumeMounts\\":[]}],\\"imagePullSecrets\\":[{\\"name\\":\\"bXktcmVnaXN0cnkta2V5\\"}],\\"initContainers\\":[],\\"volumes\\":[]}}}}\\n","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"surrealdb","namespace":"applications"},"spec":{"ports":[{"name":"surrealdb-http","port":8000,"protocol":"TCP","targetPort":8000}],"selector":{"app":"surrealdb"},"type":"ClusterIP"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/surrealdb/1-manifest/v1-service-applications-surrealdb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/surrealdb",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "data": {
      "master.conf": "dir /data
# User-supplied master configuration:
rename-command FLUSHDB ""
rename-command FLUSHALL ""
# End of master configuration",
      "redis.conf": "# User-supplied common configuration:
# Enable AOF https://redis.io/topics/persistence#append-only-file
appendonly yes
# Disable RDB persistence, AOF persistence already enabled.
save ""
# End of common configuration",
      "replica.conf": "dir /data
# User-supplied replica configuration:
rename-command FLUSHDB ""
rename-command FLUSHALL ""
# End of replica configuration",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"master.conf":"dir /data\\n# User-supplied master configuration:\\nrename-command FLUSHDB \\"\\"\\nrename-command FLUSHALL \\"\\"\\n# End of master configuration","redis.conf":"# User-supplied common configuration:\\n# Enable AOF https://redis.io/topics/persistence#append-only-file\\nappendonly yes\\n# Disable RDB persistence, AOF persistence already enabled.\\nsave \\"\\"\\n# End of common configuration","replica.conf":"dir /data\\n# User-supplied replica configuration:\\nrename-command FLUSHDB \\"\\"\\nrename-command FLUSHALL \\"\\"\\n# End of replica configuration"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis-configuration","namespace":"applications"}}
",
      },
      "name": "redis-configuration",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-configmap-applications-redis-configuration.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis-master","namespace":"applications"},"spec":{"internalTrafficPolicy":"Cluster","ports":[{"name":"tcp-redis","port":6379,"targetPort":"redis"}],"selector":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"redis","app.kubernetes.io/name":"redis"},"sessionAffinity":"None","type":"ClusterIP"}}
",
      },
      "name": "redis-master",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-service-applications-redis-master.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "data": {
      "APP_ENVIRONMENT": "bG9jYWw=",
      "APP_EXTERNAL_BASE_URL": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
      "APP_HOST": "MC4wLjAuMA==",
      "APP_PORT": "ODAwMA==",
      "OAUTH_GITHUB_CLIENT_ID": "dGVzdA==",
      "OAUTH_GITHUB_CLIENT_SECRET": "dGVzdA==",
      "OAUTH_GOOGLE_CLIENT_ID": "dGVzdA==",
      "OAUTH_GOOGLE_CLIENT_SECRET": "dGVzdA==",
      "REDIS_HOST": "cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==",
      "REDIS_PASSWORD": "dGVzdA==",
      "REDIS_PORT": "NjM3OQ==",
      "REDIS_SERVICE_NAME": "cmVkaXM=",
      "REDIS_SERVICE_NAME_MASTER": "cmVkaXMtbWFzdGVy",
      "REDIS_USERNAME": "dGVzdA==",
      "SURREALDB_HOST": "c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==",
      "SURREALDB_NAME": "c3VycmVhbGRi",
      "SURREALDB_PORT": "ODAwMA==",
      "SURREALDB_ROOT_PASSWORD": "dGVzdA==",
      "SURREALDB_ROOT_USERNAME": "dGVzdA==",
      "SURREALDB_SERVICE_NAME": "c3VycmVhbGRi",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"APP_ENVIRONMENT":"bG9jYWw=","APP_EXTERNAL_BASE_URL":"aHR0cDovL2xvY2FsaG9zdDo4MDgw","APP_HOST":"MC4wLjAuMA==","APP_PORT":"ODAwMA==","OAUTH_GITHUB_CLIENT_ID":"dGVzdA==","OAUTH_GITHUB_CLIENT_SECRET":"dGVzdA==","OAUTH_GOOGLE_CLIENT_ID":"dGVzdA==","OAUTH_GOOGLE_CLIENT_SECRET":"dGVzdA==","REDIS_HOST":"cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==","REDIS_PASSWORD":"dGVzdA==","REDIS_PORT":"NjM3OQ==","REDIS_SERVICE_NAME":"cmVkaXM=","REDIS_SERVICE_NAME_MASTER":"cmVkaXMtbWFzdGVy","REDIS_USERNAME":"dGVzdA==","SURREALDB_HOST":"c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==","SURREALDB_NAME":"c3VycmVhbGRi","SURREALDB_PORT":"ODAwMA==","SURREALDB_ROOT_PASSWORD":"dGVzdA==","SURREALDB_ROOT_USERNAME":"dGVzdA==","SURREALDB_SERVICE_NAME":"c3VycmVhbGRi"},"kind":"Secret","metadata":{"annotations":{"sealedsecrets.bitnami.com/managed":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"graphql-surrealdb","namespace":"applications"}}
",
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-secret-applications-graphql-surrealdb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "pingcap.com/v1alpha1",
    "kind": "TidbCluster",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"pingcap.com/v1alpha1","kind":"TidbCluster","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"tikv","namespace":"applications"},"spec":{"configUpdateStrategy":"RollingUpdate","enableDynamicConfiguration":true,"imagePullPolicy":"IfNotPresent","pd":{"baseImage":"pingcap/pd","config":"\\n                [dashboard]\\n                    internal-proxy = true\\n              ","maxFailoverCount":0,"replicas":3,"requests":{"storage":"10Gi"},"service":{"port":2379},"storageClassName":"local-storage"},"pvReclaimPolicy":"Retain","statefulSetUpdateStrategy":"RollingUpdate","tikv":{"baseImage":"pingcap/tikv","config":{},"maxFailoverCount":0,"replicas":3,"requests":{"storage":"100Gi"},"storageClassName":"local-storage"},"timezone":"UTC"}}
",
      },
      "name": "tikv",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/pingcap.com_v1alpha1-tidbcluster-applications-tikv.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/component":"search-engine","app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"meilisearch","app.kubernetes.io/part-of":"meilisearch","app.kubernetes.io/version":"v0.29.0","helm.sh/chart":"meilisearch-0.1.41"},"name":"meilisearch","namespace":"applications"}}
",
      },
      "name": "meilisearch",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-serviceaccount-applications-meilisearch.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "v1",
    "data": {
      "redis-password": "dGVzdA==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"redis-password":"dGVzdA=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis","namespace":"applications"},"type":"Opaque"}
",
      },
      "name": "redis",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-secret-applications-redis.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "type": "Opaque",
  },
  {
    "apiVersion": "v1",
    "data": {
      "ping_liveness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "\${REDIS_PASSWORD_FILE}")"
[[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
response=$(
  timeout -s 3 $1 \\
  redis-cli \\
    -h localhost \\
    -p $REDIS_PORT \\
    ping
)
if [ "$?" -eq "124" ]; then
  echo "Timed out"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
  echo "$response"
  exit 1
fi",
      "ping_liveness_local_and_master.sh": "script_dir="$(dirname "$0")"
exit_status=0
"$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
"$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
exit $exit_status",
      "ping_liveness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "\${REDIS_MASTER_PASSWORD_FILE}")"
[[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
response=$(
  timeout -s 3 $1 \\
  redis-cli \\
    -h $REDIS_MASTER_HOST \\
    -p $REDIS_MASTER_PORT_NUMBER \\
    ping
)
if [ "$?" -eq "124" ]; then
  echo "Timed out"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
  echo "$response"
  exit 1
fi",
      "ping_readiness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "\${REDIS_PASSWORD_FILE}")"
[[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
response=$(
  timeout -s 3 $1 \\
  redis-cli \\
    -h localhost \\
    -p $REDIS_PORT \\
    ping
)
if [ "$?" -eq "124" ]; then
  echo "Timed out"
  exit 1
fi
if [ "$response" != "PONG" ]; then
  echo "$response"
  exit 1
fi",
      "ping_readiness_local_and_master.sh": "script_dir="$(dirname "$0")"
exit_status=0
"$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
"$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
exit $exit_status",
      "ping_readiness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "\${REDIS_MASTER_PASSWORD_FILE}")"
[[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
response=$(
  timeout -s 3 $1 \\
  redis-cli \\
    -h $REDIS_MASTER_HOST \\
    -p $REDIS_MASTER_PORT_NUMBER \\
    ping
)
if [ "$?" -eq "124" ]; then
  echo "Timed out"
  exit 1
fi
if [ "$response" != "PONG" ]; then
  echo "$response"
  exit 1
fi",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"ping_liveness_local.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_PASSWORD=\\"$(\\u003c \\"\${REDIS_PASSWORD_FILE}\\")\\"\\n[[ -n \\"$REDIS_PASSWORD\\" ]] \\u0026\\u0026 export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"\\nresponse=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -h localhost \\\\\\n    -p $REDIS_PORT \\\\\\n    ping\\n)\\nif [ \\"$?\\" -eq \\"124\\" ]; then\\n  echo \\"Timed out\\"\\n  exit 1\\nfi\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\nif [ \\"$response\\" != \\"PONG\\" ] \\u0026\\u0026 [ \\"$responseFirstWord\\" != \\"LOADING\\" ] \\u0026\\u0026 [ \\"$responseFirstWord\\" != \\"MASTERDOWN\\" ]; then\\n  echo \\"$response\\"\\n  exit 1\\nfi","ping_liveness_local_and_master.sh":"script_dir=\\"$(dirname \\"$0\\")\\"\\nexit_status=0\\n\\"$script_dir/ping_liveness_local.sh\\" $1 || exit_status=$?\\n\\"$script_dir/ping_liveness_master.sh\\" $1 || exit_status=$?\\nexit $exit_status","ping_liveness_master.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_MASTER_PASSWORD=\\"$(\\u003c \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"\\n[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] \\u0026\\u0026 export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"\\nresponse=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -h $REDIS_MASTER_HOST \\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\n    ping\\n)\\nif [ \\"$?\\" -eq \\"124\\" ]; then\\n  echo \\"Timed out\\"\\n  exit 1\\nfi\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\nif [ \\"$response\\" != \\"PONG\\" ] \\u0026\\u0026 [ \\"$responseFirstWord\\" != \\"LOADING\\" ]; then\\n  echo \\"$response\\"\\n  exit 1\\nfi","ping_readiness_local.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_PASSWORD=\\"$(\\u003c \\"\${REDIS_PASSWORD_FILE}\\")\\"\\n[[ -n \\"$REDIS_PASSWORD\\" ]] \\u0026\\u0026 export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"\\nresponse=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -h localhost \\\\\\n    -p $REDIS_PORT \\\\\\n    ping\\n)\\nif [ \\"$?\\" -eq \\"124\\" ]; then\\n  echo \\"Timed out\\"\\n  exit 1\\nfi\\nif [ \\"$response\\" != \\"PONG\\" ]; then\\n  echo \\"$response\\"\\n  exit 1\\nfi","ping_readiness_local_and_master.sh":"script_dir=\\"$(dirname \\"$0\\")\\"\\nexit_status=0\\n\\"$script_dir/ping_readiness_local.sh\\" $1 || exit_status=$?\\n\\"$script_dir/ping_readiness_master.sh\\" $1 || exit_status=$?\\nexit $exit_status","ping_readiness_master.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_MASTER_PASSWORD=\\"$(\\u003c \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"\\n[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] \\u0026\\u0026 export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"\\nresponse=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -h $REDIS_MASTER_HOST \\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\n    ping\\n)\\nif [ \\"$?\\" -eq \\"124\\" ]; then\\n  echo \\"Timed out\\"\\n  exit 1\\nfi\\nif [ \\"$response\\" != \\"PONG\\" ]; then\\n  echo \\"$response\\"\\n  exit 1\\nfi"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis-health","namespace":"applications"}}
",
      },
      "name": "redis-health",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-configmap-applications-redis-health.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","automountServiceAccountToken":true,"kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis","namespace":"applications"}}
",
      },
      "name": "redis",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-serviceaccount-applications-redis.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-surrealdb\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"replicas\\":2,\\"selector\\":{\\"matchLabels\\":{\\"app\\":\\"graphql\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app\\":\\"graphql\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"bG9jYWw=,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"bG9jYWw=\\"},{\\"name\\":\\"MC4wLjAuMA==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"MC4wLjAuMA==\\"},{\\"name\\":\\"ODAwMA==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"ODAwMA==\\"},{\\"name\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\"},{\\"name\\":\\"dGVzdA==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"dGVzdA==\\"},{\\"name\\":\\"c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==\\"},{\\"name\\":\\"c3VycmVhbGRi,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"c3VycmVhbGRi\\"},{\\"name\\":\\"cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==\\"},{\\"name\\":\\"NjM3OQ==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"NjM3OQ==\\"},{\\"name\\":\\"cmVkaXM=,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"cmVkaXM=\\"},{\\"name\\":\\"cmVkaXMtbWFzdGVy,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"cmVkaXMtbWFzdGVy\\"}],\\"image\\":\\"ghcr.io/oyelowo/graphql-surrealdb:latest\\",\\"livenessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/api/liveness\\",\\"port\\":8000},\\"initialDelaySeconds\\":300,\\"periodSeconds\\":10},\\"name\\":\\"graphql\\",\\"ports\\":[{\\"containerPort\\":8000,\\"name\\":\\"http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/api/healthz\\",\\"port\\":8000},\\"initialDelaySeconds\\":60,\\"periodSeconds\\":10},\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"200Mi\\"},\\"requests\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"70Mi\\"}},\\"volumeMounts\\":[]}],\\"imagePullSecrets\\":[{\\"name\\":\\"bXktcmVnaXN0cnkta2V5\\"}],\\"initContainers\\":[],\\"volumes\\":[]}}}}\\n","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"graphql-surrealdb","namespace":"applications"},"spec":{"ports":[{"name":"graphql-surrealdb-http","port":8000,"protocol":"TCP","targetPort":8000}],"selector":{"app":"graphql"},"type":"ClusterIP"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "graphql-surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-service-applications-graphql-surrealdb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "data": {
      "MEILI_ENV": "production",
      "MEILI_NO_ANALYTICS": "false",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"MEILI_ENV":"production","MEILI_NO_ANALYTICS":"false"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/component":"search-engine","app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"meilisearch","app.kubernetes.io/part-of":"meilisearch","app.kubernetes.io/version":"v0.29.0","helm.sh/chart":"meilisearch-0.1.41"},"name":"meilisearch-environment","namespace":"applications"}}
",
      },
      "name": "meilisearch-environment",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-configmap-applications-meilisearch-environment.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis-headless","namespace":"applications"},"spec":{"clusterIP":"None","ports":[{"name":"tcp-redis","port":6379,"targetPort":"redis"}],"selector":{"app.kubernetes.io/instance":"redis","app.kubernetes.io/name":"redis"},"type":"ClusterIP"}}
",
      },
      "name": "redis-headless",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-service-applications-redis-headless.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {},
  },
  {
    "apiVersion": "fluvio.infinyon.com/v2",
    "kind": "Topic",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"fluvio.infinyon.com/v2","kind":"Topic","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"test-user-location","namespace":"applications"},"spec":{"replicas":1,"storage":{"maxPartitionSize":3,"segmentSize":3}}}
",
      },
      "name": "test-user-location",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/fluvio.infinyon.com_v2-topic-applications-test-user-location.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "data": {
      "start-master.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "\${REDIS_PASSWORD_FILE}")"
if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
fi
if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
fi
ARGS=("--port" "\${REDIS_PORT}")
ARGS+=("--requirepass" "\${REDIS_PASSWORD}")
ARGS+=("--masterauth" "\${REDIS_PASSWORD}")
ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
exec redis-server "\${ARGS[@]}"
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"start-master.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_PASSWORD=\\"$(\\u003c \\"\${REDIS_PASSWORD_FILE}\\")\\"\\nif [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then\\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\\nfi\\nif [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then\\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\\nfi\\nARGS=(\\"--port\\" \\"\${REDIS_PORT}\\")\\nARGS+=(\\"--requirepass\\" \\"\${REDIS_PASSWORD}\\")\\nARGS+=(\\"--masterauth\\" \\"\${REDIS_PASSWORD}\\")\\nARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/redis.conf\\")\\nARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/master.conf\\")\\nexec redis-server \\"\${ARGS[@]}\\"\\n"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis-scripts","namespace":"applications"}}
",
      },
      "name": "redis-scripts",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-configmap-applications-redis-scripts.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "v1",
    "data": {
      "config": "very important data",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"config":"very important data"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"graphql-surrealdb","namespace":"applications"}}
",
      },
      "name": "graphql-surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-configmap-applications-graphql-surrealdb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"labels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis-master","namespace":"applications"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"redis","app.kubernetes.io/name":"redis"}},"serviceName":"redis-headless","template":{"metadata":{"annotations":{"checksum/configmap":"5dd91ba2f175cd9bfe2971246d29a0a65dcd62ec1e902f07f96d34f960a5c9c2","checksum/health":"8b745653a690c632a2ed175fe32334b6905b9a155265b7d2edfbee8126b8d72d","checksum/scripts":"299c5dc048d0c122899ae0d80671fb6b5e356f1e80084f8ef892bca3f8040abd","checksum/secret":"a6888612bdf911ea0c9947703091c1c8fe4f7729d8ba0e14445cc5bc028d957e"},"labels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"redis","app.kubernetes.io/name":"redis"}},"namespaces":["applications"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["-c","/opt/bitnami/scripts/start-scripts/start-master.sh"],"command":["/bin/bash"],"env":[{"name":"BITNAMI_DEBUG","value":"false"},{"name":"REDIS_REPLICATION_MODE","value":"master"},{"name":"ALLOW_EMPTY_PASSWORD","value":"no"},{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"redis"}}},{"name":"REDIS_TLS_ENABLED","value":"no"},{"name":"REDIS_PORT","value":"6379"}],"image":"docker.io/bitnami/redis:7.0.5-debian-11-r3","imagePullPolicy":"IfNotPresent","livenessProbe":{"exec":{"command":["sh","-c","/health/ping_liveness_local.sh 5"]},"failureThreshold":5,"initialDelaySeconds":20,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":6},"name":"redis","ports":[{"containerPort":6379,"name":"redis"}],"readinessProbe":{"exec":{"command":["sh","-c","/health/ping_readiness_local.sh 1"]},"failureThreshold":5,"initialDelaySeconds":20,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":2},"resources":{"limits":{},"requests":{}},"securityContext":{"runAsUser":1001},"volumeMounts":[{"mountPath":"/opt/bitnami/scripts/start-scripts","name":"start-scripts"},{"mountPath":"/health","name":"health"},{"mountPath":"/data","name":"redis-data"},{"mountPath":"/opt/bitnami/redis/mounted-etc","name":"config"},{"mountPath":"/opt/bitnami/redis/etc/","name":"redis-tmp-conf"},{"mountPath":"/tmp","name":"tmp"}]}],"securityContext":{"fsGroup":1001},"serviceAccountName":"redis","terminationGracePeriodSeconds":30,"volumes":[{"configMap":{"defaultMode":493,"name":"redis-scripts"},"name":"start-scripts"},{"configMap":{"defaultMode":493,"name":"redis-health"},"name":"health"},{"configMap":{"name":"redis-configuration"},"name":"config"},{"emptyDir":{},"name":"redis-tmp-conf"},{"emptyDir":{},"name":"tmp"}]}},"updateStrategy":{"rollingUpdate":{},"type":"RollingUpdate"},"volumeClaimTemplates":[{"metadata":{"labels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"redis","app.kubernetes.io/name":"redis"},"name":"redis-data"},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"8Gi"}},"storageClassName":"local-storage"}}]}}
",
      },
      "name": "redis-master",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/apps_v1-statefulset-applications-redis-master.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "checksum/configmap": "5dd91ba2f175cd9bfe2971246d29a0a65dcd62ec1e902f07f96d34f960a5c9c2",
            "checksum/health": "8b745653a690c632a2ed175fe32334b6905b9a155265b7d2edfbee8126b8d72d",
            "checksum/scripts": "299c5dc048d0c122899ae0d80671fb6b5e356f1e80084f8ef892bca3f8040abd",
            "checksum/secret": "a6888612bdf911ea0c9947703091c1c8fe4f7729d8ba0e14445cc5bc028d957e",
          },
          "labels": {
            "app.kubernetes.io/component": "master",
            "app.kubernetes.io/instance": "redis",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "redis",
            "helm.sh/chart": "redis-17.3.2",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "master",
                        "app.kubernetes.io/instance": "redis",
                        "app.kubernetes.io/name": "redis",
                      },
                    },
                    "namespaces": [
                      "applications",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-master.sh",
              ],
              "command": [
                "/bin/bash",
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                {
                  "name": "REDIS_REPLICATION_MODE",
                  "value": "master",
                },
                {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no",
                },
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "redis",
                    },
                  },
                },
                {
                  "name": "REDIS_TLS_ENABLED",
                  "value": "no",
                },
                {
                  "name": "REDIS_PORT",
                  "value": "6379",
                },
              ],
              "image": "docker.io/bitnami/redis:7.0.5-debian-11-r3",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_liveness_local.sh 5",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 6,
              },
              "name": "redis",
              "ports": [
                {
                  "containerPort": 6379,
                  "name": "redis",
                },
              ],
              "readinessProbe": {
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_readiness_local.sh 1",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "runAsUser": 1001,
              },
              "volumeMounts": [
                {
                  "mountPath": "/opt/bitnami/scripts/start-scripts",
                  "name": "start-scripts",
                },
                {
                  "mountPath": "/health",
                  "name": "health",
                },
                {
                  "mountPath": "/data",
                  "name": "redis-data",
                },
                {
                  "mountPath": "/opt/bitnami/redis/mounted-etc",
                  "name": "config",
                },
                {
                  "mountPath": "/opt/bitnami/redis/etc/",
                  "name": "redis-tmp-conf",
                },
                {
                  "mountPath": "/tmp",
                  "name": "tmp",
                },
              ],
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "redis",
          "terminationGracePeriodSeconds": 30,
          "volumes": [
            {
              "configMap": {
                "defaultMode": 493,
                "name": "redis-scripts",
              },
              "name": "start-scripts",
            },
            {
              "configMap": {
                "defaultMode": 493,
                "name": "redis-health",
              },
              "name": "health",
            },
            {
              "configMap": {
                "name": "redis-configuration",
              },
              "name": "config",
            },
            {
              "emptyDir": {},
              "name": "redis-tmp-conf",
            },
            {
              "emptyDir": {},
              "name": "tmp",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "MEILI_MASTER_KEY": "UG5vbU1DU3RkaGxuN1lIWDRidFM=",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"MEILI_MASTER_KEY":"UG5vbU1DU3RkaGxuN1lIWDRidFM="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/component":"search-engine","app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"meilisearch","app.kubernetes.io/part-of":"meilisearch","app.kubernetes.io/version":"v0.29.0","helm.sh/chart":"meilisearch-0.1.41"},"name":"meilisearch-master-key","namespace":"applications"}}
",
      },
      "name": "meilisearch-master-key",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-secret-applications-meilisearch-master-key.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/component":"search-engine","app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"meilisearch","app.kubernetes.io/part-of":"meilisearch","app.kubernetes.io/version":"v0.29.0","helm.sh/chart":"meilisearch-0.1.41"},"name":"meilisearch","namespace":"applications"},"spec":{"ports":[{"name":"http","port":7700,"protocol":"TCP","targetPort":"http"}],"selector":{"app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/name":"meilisearch"},"type":"ClusterIP"}}
",
      },
      "name": "meilisearch",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-service-applications-meilisearch.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {},
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"labels":{"app.kubernetes.io/component":"search-engine","app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"meilisearch","app.kubernetes.io/part-of":"meilisearch","app.kubernetes.io/version":"v0.29.0","helm.sh/chart":"meilisearch-0.1.41"},"name":"meilisearch","namespace":"applications"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/name":"meilisearch"}},"serviceName":"meilisearch","template":{"metadata":{"labels":{"app.kubernetes.io/component":"search-engine","app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"meilisearch","app.kubernetes.io/part-of":"meilisearch","app.kubernetes.io/version":"v0.29.0","helm.sh/chart":"meilisearch-0.1.41"}},"spec":{"containers":[{"envFrom":[{"configMapRef":{"name":"meilisearch-environment"}},{"secretRef":{"name":"meilisearch-master-key"}}],"image":"getmeili/meilisearch:v0.29.0","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/health","port":"http"},"initialDelaySeconds":60,"periodSeconds":60},"name":"meilisearch","ports":[{"containerPort":7700,"name":"http","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/health","port":"http"},"initialDelaySeconds":60,"periodSeconds":60},"resources":{}}],"serviceAccountName":"meilisearch"}}}}
",
      },
      "name": "meilisearch",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/apps_v1-statefulset-applications-meilisearch.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "search-engine",
            "app.kubernetes.io/instance": "meilisearch",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "meilisearch",
            "app.kubernetes.io/part-of": "meilisearch",
            "app.kubernetes.io/version": "v0.29.0",
            "helm.sh/chart": "meilisearch-0.1.41",
          },
        },
        "spec": {
          "containers": [
            {
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "meilisearch-environment",
                  },
                },
                {
                  "secretRef": {
                    "name": "meilisearch-master-key",
                  },
                },
              ],
              "image": "getmeili/meilisearch:v0.29.0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/health",
                  "port": "http",
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 60,
              },
              "name": "meilisearch",
              "ports": [
                {
                  "containerPort": 7700,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/health",
                  "port": "http",
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 60,
              },
              "resources": {},
            },
          ],
          "serviceAccountName": "meilisearch",
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"graphql-surrealdb","namespace":"applications"},"spec":{"replicas":2,"selector":{"matchLabels":{"app":"graphql"}},"template":{"metadata":{"labels":{"app":"graphql"}},"spec":{"containers":[{"env":[{"name":"bG9jYWw=,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"bG9jYWw="},{"name":"MC4wLjAuMA==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"MC4wLjAuMA=="},{"name":"ODAwMA==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"ODAwMA=="},{"name":"aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"aHR0cDovL2xvY2FsaG9zdDo4MDgw"},{"name":"dGVzdA==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"dGVzdA=="},{"name":"c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"c3VycmVhbGRiLmFwcGxpY2F0aW9ucw=="},{"name":"c3VycmVhbGRi,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"c3VycmVhbGRi"},{"name":"cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw=="},{"name":"NjM3OQ==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"NjM3OQ=="},{"name":"cmVkaXM=,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"cmVkaXM="},{"name":"cmVkaXMtbWFzdGVy,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"cmVkaXMtbWFzdGVy"}],"image":"ghcr.io/oyelowo/graphql-surrealdb:latest","livenessProbe":{"failureThreshold":7,"httpGet":{"path":"/api/liveness","port":8000},"initialDelaySeconds":300,"periodSeconds":10},"name":"graphql","ports":[{"containerPort":8000,"name":"http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/api/healthz","port":8000},"initialDelaySeconds":60,"periodSeconds":10},"resources":{"limits":{"cpu":"100m","memory":"200Mi"},"requests":{"cpu":"100m","memory":"70Mi"}},"volumeMounts":[]}],"imagePullSecrets":[{"name":"bXktcmVnaXN0cnkta2V5"}],"initContainers":[],"volumes":[]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "graphql-surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/apps_v1-deployment-applications-graphql-surrealdb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app": "graphql",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "bG9jYWw=,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "bG9jYWw=",
                },
                {
                  "name": "MC4wLjAuMA==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "MC4wLjAuMA==",
                },
                {
                  "name": "ODAwMA==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "ODAwMA==",
                },
                {
                  "name": "aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
                },
                {
                  "name": "dGVzdA==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "dGVzdA==",
                },
                {
                  "name": "c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==",
                },
                {
                  "name": "c3VycmVhbGRi,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "c3VycmVhbGRi",
                },
                {
                  "name": "cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==",
                },
                {
                  "name": "NjM3OQ==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "NjM3OQ==",
                },
                {
                  "name": "cmVkaXM=,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "cmVkaXM=",
                },
                {
                  "name": "cmVkaXMtbWFzdGVy,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "cmVkaXMtbWFzdGVy",
                },
              ],
              "image": "ghcr.io/oyelowo/graphql-surrealdb:latest",
              "livenessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/api/liveness",
                  "port": 8000,
                },
                "initialDelaySeconds": 300,
                "periodSeconds": 10,
              },
              "name": "graphql",
              "ports": [
                {
                  "containerPort": 8000,
                  "name": "http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/api/healthz",
                  "port": 8000,
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "200Mi",
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "70Mi",
                },
              },
              "volumeMounts": [],
            },
          ],
          "imagePullSecrets": [
            {
              "name": "bXktcmVnaXN0cnkta2V5",
            },
          ],
          "initContainers": [],
          "volumes": [],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"replicas\\":2,\\"selector\\":{\\"matchLabels\\":{\\"app\\":\\"react\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app\\":\\"react\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"bG9jYWw=,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"bG9jYWw=\\"},{\\"name\\":\\"MC4wLjAuMA==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"MC4wLjAuMA==\\"},{\\"name\\":\\"MzAwMA==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"MzAwMA==\\"},{\\"name\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\"}],\\"image\\":\\"ghcr.io/oyelowo/react-web:latest\\",\\"name\\":\\"react\\",\\"ports\\":[{\\"containerPort\\":3000,\\"name\\":\\"http\\"}],\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"700m\\",\\"memory\\":\\"2Gi\\"},\\"requests\\":{\\"cpu\\":\\"500m\\",\\"memory\\":\\"1.3Gi\\"}},\\"volumeMounts\\":[]}],\\"imagePullSecrets\\":[{\\"name\\":\\"bXktcmVnaXN0cnkta2V5\\"}],\\"initContainers\\":[],\\"volumes\\":[]}}}}\\n","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"react-web","namespace":"applications"},"spec":{"ports":[{"name":"react-web-http","port":3000,"protocol":"TCP","targetPort":3000}],"selector":{"app":"react"},"type":"ClusterIP"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web/1-manifest/v1-service-applications-react-web.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "data": {
      "APP_ENVIRONMENT": "bG9jYWw=",
      "APP_EXTERNAL_BASE_URL": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
      "APP_HOST": "MC4wLjAuMA==",
      "APP_PORT": "MzAwMA==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"APP_ENVIRONMENT":"bG9jYWw=","APP_EXTERNAL_BASE_URL":"aHR0cDovL2xvY2FsaG9zdDo4MDgw","APP_HOST":"MC4wLjAuMA==","APP_PORT":"MzAwMA=="},"kind":"Secret","metadata":{"annotations":{"sealedsecrets.bitnami.com/managed":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"react-web","namespace":"applications"}}
",
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web/1-manifest/v1-secret-applications-react-web.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"react-web","namespace":"applications"},"spec":{"replicas":2,"selector":{"matchLabels":{"app":"react"}},"template":{"metadata":{"labels":{"app":"react"}},"spec":{"containers":[{"env":[{"name":"bG9jYWw=,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"bG9jYWw="},{"name":"MC4wLjAuMA==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"MC4wLjAuMA=="},{"name":"MzAwMA==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"MzAwMA=="},{"name":"aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"aHR0cDovL2xvY2FsaG9zdDo4MDgw"}],"image":"ghcr.io/oyelowo/react-web:latest","name":"react","ports":[{"containerPort":3000,"name":"http"}],"resources":{"limits":{"cpu":"700m","memory":"2Gi"},"requests":{"cpu":"500m","memory":"1.3Gi"}},"volumeMounts":[]}],"imagePullSecrets":[{"name":"bXktcmVnaXN0cnkta2V5"}],"initContainers":[],"volumes":[]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web/1-manifest/apps_v1-deployment-applications-react-web.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app": "react",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "bG9jYWw=,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "bG9jYWw=",
                },
                {
                  "name": "MC4wLjAuMA==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "MC4wLjAuMA==",
                },
                {
                  "name": "MzAwMA==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "MzAwMA==",
                },
                {
                  "name": "aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
                },
              ],
              "image": "ghcr.io/oyelowo/react-web:latest",
              "name": "react",
              "ports": [
                {
                  "containerPort": 3000,
                  "name": "http",
                },
              ],
              "resources": {
                "limits": {
                  "cpu": "700m",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "500m",
                  "memory": "1.3Gi",
                },
              },
              "volumeMounts": [],
            },
          ],
          "imagePullSecrets": [
            {
              "name": "bXktcmVnaXN0cnkta2V5",
            },
          ],
          "initContainers": [],
          "volumes": [],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "config": "very important data",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"config":"very important data"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"react-web","namespace":"applications"}}
",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web/1-manifest/v1-configmap-applications-react-web.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web",
  },
]
`;

exports[`KubeObject Can sync resources 2`] = `
[
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-server","namespace":"argocd"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"}},"strategy":{"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"}},"namespaces":["argocd"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["argocd-server","--staticassets","/opt/bitnami/argo-cd/app","--repo-server","argocd-argo-cd-repo-server:8081","--logformat","text","--loglevel","info","--redis","argocd-redis-master:6379","--insecure"],"env":[{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}}],"image":"docker.io/bitnami/argo-cd:2.4.14-debian-11-r0","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":8080},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"argocd-server","ports":[{"containerPort":8080,"name":"http","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":8080},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"resources":{"limits":{},"requests":{}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["all"]},"readOnlyRootFilesystem":false,"runAsNonRoot":true,"runAsUser":1001},"volumeMounts":[{"mountPath":"/app/config/ssh","name":"ssh-known-hosts"},{"mountPath":"/app/config/server/tls","name":"argocd-repo-server-tls"}]}],"initContainers":[{"args":["-ec","#!/bin/bash\\n\\nset -o errexit\\nset -o nounset\\nset -o pipefail\\n\\n. /opt/bitnami/scripts/libos.sh\\n. /opt/bitnami/scripts/liblog.sh\\n\\ncheck_redis_connection() {\\n  local result=\\"$(redis-cli -h argocd-redis-master -p 6379  PING)\\"\\n  if [[ \\"$result\\" != \\"PONG\\" ]]; then\\n    false\\n  fi\\n}\\n\\ninfo \\"Checking redis connection...\\"\\nif ! retry_while \\"check_redis_connection\\"; then\\n    error \\"Could not connect to the Redis server\\"\\n    return 1\\nelse\\n    info \\"Connected to the Redis instance\\"\\nfi\\n"],"command":["/bin/bash"],"env":[{"name":"REDISCLI_AUTH","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}}],"image":"docker.io/bitnami/redis:7.0.5-debian-11-r5","imagePullPolicy":"IfNotPresent","name":"wait-for-redis"}],"securityContext":{"fsGroup":1001},"serviceAccountName":"argocd-argo-cd-argocd-server","volumes":[{"configMap":{"name":"argocd-ssh-known-hosts-cm"},"name":"ssh-known-hosts"},{"name":"argocd-repo-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-repo-server-tls"}}]}}}}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "server",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-4.2.3",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "server",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "argocd-server",
                "--staticassets",
                "/opt/bitnami/argo-cd/app",
                "--repo-server",
                "argocd-argo-cd-repo-server:8081",
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
                "--insecure",
              ],
              "env": [
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.4.14-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 8080,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "argocd-server",
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 8080,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "all",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": [
                {
                  "mountPath": "/app/config/ssh",
                  "name": "ssh-known-hosts",
                },
                {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result="$(redis-cli -h argocd-redis-master -p 6379  PING)"
  if [[ "$result" != "PONG" ]]; then
    false
  fi
}

info "Checking redis connection..."
if ! retry_while "check_redis_connection"; then
    error "Could not connect to the Redis server"
    return 1
else
    info "Connected to the Redis instance"
fi
",
              ],
              "command": [
                "/bin/bash",
              ],
              "env": [
                {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:7.0.5-debian-11-r5",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-server",
          "volumes": [
            {
              "configMap": {
                "name": "argocd-ssh-known-hosts-cm",
              },
              "name": "ssh-known-hosts",
            },
            {
              "name": "argocd-repo-server-tls",
              "secret": {
                "items": [
                  {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-repo-server","namespace":"argocd"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"}},"strategy":{"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"}},"namespaces":["argocd"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["argocd-repo-server","--logformat","text","--loglevel","info","--redis","argocd-redis-master:6379"],"env":[{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}}],"image":"docker.io/bitnami/argo-cd:2.4.14-debian-11-r0","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"tcpSocket":{"port":8081},"timeoutSeconds":1},"name":"argocd-repo-server","ports":[{"containerPort":8081,"name":"repo-server","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"tcpSocket":{"port":8081},"timeoutSeconds":1},"resources":{"limits":{},"requests":{}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["all"]},"readOnlyRootFilesystem":false,"runAsNonRoot":true,"runAsUser":1001},"volumeMounts":[{"mountPath":"/app/config/ssh","name":"ssh-known-hosts"},{"mountPath":"/app/config/server/tls","name":"argocd-repo-server-tls"},{"mountPath":"/app/config/gpg/keys","name":"gpg-keyring"},{"mountPath":"/tmp","name":"tmp-dir"}]}],"initContainers":[{"args":["-ec","#!/bin/bash\\n\\nset -o errexit\\nset -o nounset\\nset -o pipefail\\n\\n. /opt/bitnami/scripts/libos.sh\\n. /opt/bitnami/scripts/liblog.sh\\n\\ncheck_redis_connection() {\\n  local result=\\"$(redis-cli -h argocd-redis-master -p 6379  PING)\\"\\n  if [[ \\"$result\\" != \\"PONG\\" ]]; then\\n    false\\n  fi\\n}\\n\\ninfo \\"Checking redis connection...\\"\\nif ! retry_while \\"check_redis_connection\\"; then\\n    error \\"Could not connect to the Redis server\\"\\n    return 1\\nelse\\n    info \\"Connected to the Redis instance\\"\\nfi\\n"],"command":["/bin/bash"],"env":[{"name":"REDISCLI_AUTH","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}}],"image":"docker.io/bitnami/redis:7.0.5-debian-11-r5","imagePullPolicy":"IfNotPresent","name":"wait-for-redis"}],"securityContext":{"fsGroup":1001},"serviceAccountName":"argocd-argo-cd-argocd-repo-server","volumes":[{"configMap":{"name":"argocd-ssh-known-hosts-cm"},"name":"ssh-known-hosts"},{"name":"argocd-repo-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-repo-server-tls"}},{"emptyDir":{},"name":"tmp-dir"},{"emptyDir":{},"name":"gpg-keyring"}]}}}}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-repo-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "repo-server",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-4.2.3",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "repo-server",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "argocd-repo-server",
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
              ],
              "env": [
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.4.14-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": {
                  "port": 8081,
                },
                "timeoutSeconds": 1,
              },
              "name": "argocd-repo-server",
              "ports": [
                {
                  "containerPort": 8081,
                  "name": "repo-server",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": {
                  "port": 8081,
                },
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "all",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": [
                {
                  "mountPath": "/app/config/ssh",
                  "name": "ssh-known-hosts",
                },
                {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
                {
                  "mountPath": "/app/config/gpg/keys",
                  "name": "gpg-keyring",
                },
                {
                  "mountPath": "/tmp",
                  "name": "tmp-dir",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result="$(redis-cli -h argocd-redis-master -p 6379  PING)"
  if [[ "$result" != "PONG" ]]; then
    false
  fi
}

info "Checking redis connection..."
if ! retry_while "check_redis_connection"; then
    error "Could not connect to the Redis server"
    return 1
else
    info "Connected to the Redis instance"
fi
",
              ],
              "command": [
                "/bin/bash",
              ],
              "env": [
                {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:7.0.5-debian-11-r5",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-repo-server",
          "volumes": [
            {
              "configMap": {
                "name": "argocd-ssh-known-hosts-cm",
              },
              "name": "ssh-known-hosts",
            },
            {
              "name": "argocd-repo-server-tls",
              "secret": {
                "items": [
                  {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
            {
              "emptyDir": {},
              "name": "tmp-dir",
            },
            {
              "emptyDir": {},
              "name": "gpg-keyring",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-app-controller","namespace":"argocd"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"}},"strategy":{"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"}},"namespaces":["argocd"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["argocd-application-controller","--status-processors","20","--operation-processors","10","--app-resync","180","--self-heal-timeout-seconds","5","--repo-server","argocd-argo-cd-repo-server:8081","--logformat","text","--loglevel","info","--redis","argocd-redis-master:6379"],"env":[{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}}],"image":"docker.io/bitnami/argo-cd:2.4.14-debian-11-r0","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":8082},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"controller","ports":[{"containerPort":8082,"name":"controller","protocol":"TCP"},{"containerPort":8082,"name":"metrics","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"tcpSocket":{"port":8082},"timeoutSeconds":1},"resources":{"limits":{},"requests":{}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["all"]},"readOnlyRootFilesystem":false,"runAsNonRoot":true,"runAsUser":1001},"volumeMounts":[{"mountPath":"/app/config/server/tls","name":"argocd-repo-server-tls"}]}],"initContainers":[{"args":["-ec","#!/bin/bash\\n\\nset -o errexit\\nset -o nounset\\nset -o pipefail\\n\\n. /opt/bitnami/scripts/libos.sh\\n. /opt/bitnami/scripts/liblog.sh\\n\\ncheck_redis_connection() {\\n  local result=\\"$(redis-cli -h argocd-redis-master -p 6379  PING)\\"\\n  if [[ \\"$result\\" != \\"PONG\\" ]]; then\\n    false\\n  fi\\n}\\n\\ninfo \\"Checking redis connection...\\"\\nif ! retry_while \\"check_redis_connection\\"; then\\n    error \\"Could not connect to the Redis server\\"\\n    return 1\\nelse\\n    info \\"Connected to the Redis instance\\"\\nfi\\n"],"command":["/bin/bash"],"env":[{"name":"REDISCLI_AUTH","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}}],"image":"docker.io/bitnami/redis:7.0.5-debian-11-r5","imagePullPolicy":"IfNotPresent","name":"wait-for-redis"}],"securityContext":{"fsGroup":1001},"serviceAccountName":"argocd-argo-cd-argocd-app-controller","volumes":[{"name":"argocd-repo-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-repo-server-tls"}}]}}}}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-4.2.3",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "controller",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "argocd-application-controller",
                "--status-processors",
                "20",
                "--operation-processors",
                "10",
                "--app-resync",
                "180",
                "--self-heal-timeout-seconds",
                "5",
                "--repo-server",
                "argocd-argo-cd-repo-server:8081",
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
              ],
              "env": [
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.4.14-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 8082,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "controller",
              "ports": [
                {
                  "containerPort": 8082,
                  "name": "controller",
                  "protocol": "TCP",
                },
                {
                  "containerPort": 8082,
                  "name": "metrics",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": {
                  "port": 8082,
                },
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "all",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": [
                {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result="$(redis-cli -h argocd-redis-master -p 6379  PING)"
  if [[ "$result" != "PONG" ]]; then
    false
  fi
}

info "Checking redis connection..."
if ! retry_while "check_redis_connection"; then
    error "Could not connect to the Redis server"
    return 1
else
    info "Connected to the Redis instance"
fi
",
              ],
              "command": [
                "/bin/bash",
              ],
              "env": [
                {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:7.0.5-debian-11-r5",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-app-controller",
          "volumes": [
            {
              "name": "argocd-repo-server-tls",
              "secret": {
                "items": [
                  {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"strategy":{"rollingUpdate":{},"type":"RollingUpdate"},"template":{"metadata":{"annotations":{"prometheus.io/path":"/metrics","prometheus.io/port":"9402","prometheus.io/scrape":"true"},"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"namespaces":["cert-manager"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["--v=2","--cluster-resource-namespace=$(POD_NAMESPACE)","--leader-election-namespace=kube-system","--acme-http01-solver-image=docker.io/bitnami/acmesolver:1.9.1-debian-11-r16"],"env":[{"name":"BITNAMI_DEBUG","value":"false"},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"docker.io/bitnami/cert-manager:1.9.1-debian-11-r15","imagePullPolicy":"IfNotPresent","name":"cert-manager","ports":[{"containerPort":9402,"protocol":"TCP"}],"resources":{"limits":{},"requests":{}},"securityContext":{"runAsNonRoot":true,"runAsUser":1001}}],"securityContext":{"fsGroup":1001},"serviceAccountName":"cert-manager-controller"}}}}
",
      },
      "name": "cert-manager-controller",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "prometheus.io/path": "/metrics",
            "prometheus.io/port": "9402",
            "prometheus.io/scrape": "true",
          },
          "labels": {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.8.4",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "--v=2",
                "--cluster-resource-namespace=$(POD_NAMESPACE)",
                "--leader-election-namespace=kube-system",
                "--acme-http01-solver-image=docker.io/bitnami/acmesolver:1.9.1-debian-11-r16",
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cert-manager:1.9.1-debian-11-r15",
              "imagePullPolicy": "IfNotPresent",
              "name": "cert-manager",
              "ports": [
                {
                  "containerPort": 9402,
                  "protocol": "TCP",
                },
              ],
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-controller",
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"cert-manager-trust"}},"template":{"metadata":{"labels":{"app":"cert-manager-trust"}},"spec":{"containers":[{"args":["--log-level=1","--metrics-port=9402","--readiness-probe-port=6060","--readiness-probe-path=/readyz","--trust-namespace=cert-manager","--webhook-host=0.0.0.0","--webhook-port=6443","--webhook-certificate-dir=/tls"],"command":["cert-manager-trust"],"image":"quay.io/jetstack/cert-manager-trust:v0.2.0","imagePullPolicy":"IfNotPresent","name":"cert-manager-trust","ports":[{"containerPort":6443},{"containerPort":9402}],"readinessProbe":{"httpGet":{"path":"/readyz","port":6060},"initialDelaySeconds":3,"periodSeconds":7},"resources":{},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/tls","name":"tls","readOnly":true}]}],"serviceAccountName":"cert-manager-trust","volumes":[{"name":"tls","secret":{"defaultMode":420,"secretName":"cert-manager-trust-tls"}}]}}}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app": "cert-manager-trust",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "--log-level=1",
                "--metrics-port=9402",
                "--readiness-probe-port=6060",
                "--readiness-probe-path=/readyz",
                "--trust-namespace=cert-manager",
                "--webhook-host=0.0.0.0",
                "--webhook-port=6443",
                "--webhook-certificate-dir=/tls",
              ],
              "command": [
                "cert-manager-trust",
              ],
              "image": "quay.io/jetstack/cert-manager-trust:v0.2.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "cert-manager-trust",
              "ports": [
                {
                  "containerPort": 6443,
                },
                {
                  "containerPort": 9402,
                },
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/readyz",
                  "port": 6060,
                },
                "initialDelaySeconds": 3,
                "periodSeconds": 7,
              },
              "resources": {},
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL",
                  ],
                },
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true,
                "seccompProfile": {
                  "type": "RuntimeDefault",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "serviceAccountName": "cert-manager-trust",
          "volumes": [
            {
              "name": "tls",
              "secret": {
                "defaultMode": 420,
                "secretName": "cert-manager-trust-tls",
              },
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-webhook","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"strategy":{"rollingUpdate":{},"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"namespaces":["cert-manager"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["--v=2","--secure-port=10250","--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)","--dynamic-serving-ca-secret-name=cert-manager-webhook-ca","--dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc"],"env":[{"name":"BITNAMI_DEBUG","value":"false"},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"docker.io/bitnami/cert-manager-webhook:1.9.1-debian-11-r13","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/livez","port":6080,"scheme":"HTTP"},"initialDelaySeconds":60,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"cert-manager-webhook","ports":[{"containerPort":10250,"name":"https"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":6080,"scheme":"HTTP"},"initialDelaySeconds":5,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":1},"resources":{"limits":{},"requests":{}},"securityContext":{"runAsNonRoot":true,"runAsUser":1001}}],"securityContext":{"fsGroup":1001},"serviceAccountName":"cert-manager-webhook"}}}}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-webhook.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "webhook",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.8.4",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "--v=2",
                "--secure-port=10250",
                "--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)",
                "--dynamic-serving-ca-secret-name=cert-manager-webhook-ca",
                "--dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc",
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cert-manager-webhook:1.9.1-debian-11-r13",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/livez",
                  "port": 6080,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "cert-manager-webhook",
              "ports": [
                {
                  "containerPort": 10250,
                  "name": "https",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 6080,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-webhook",
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-cainjector","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"strategy":{"rollingUpdate":{},"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"namespaces":["cert-manager"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["--v=2","--leader-election-namespace=kube-system"],"env":[{"name":"BITNAMI_DEBUG","value":"false"},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"docker.io/bitnami/cainjector:1.9.1-debian-11-r14","imagePullPolicy":"IfNotPresent","name":"cainjector","resources":{"limits":{},"requests":{}},"securityContext":{"runAsNonRoot":true,"runAsUser":1001}}],"securityContext":{"fsGroup":1001},"serviceAccountName":"cert-manager-cainjector"}}}}
",
      },
      "name": "cert-manager-cainjector",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-cainjector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "cainjector",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.8.4",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "--v=2",
                "--leader-election-namespace=kube-system",
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cainjector:1.9.1-debian-11-r14",
              "imagePullPolicy": "IfNotPresent",
              "name": "cainjector",
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-cainjector",
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/instance":"sealed-secrets","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"sealed-secrets","helm.sh/chart":"sealed-secrets-1.1.5"},"name":"sealed-secrets","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"app.kubernetes.io/instance":"sealed-secrets","app.kubernetes.io/name":"sealed-secrets"}},"strategy":{"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app.kubernetes.io/instance":"sealed-secrets","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"sealed-secrets","helm.sh/chart":"sealed-secrets-1.1.5"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/instance":"sealed-secrets","app.kubernetes.io/name":"sealed-secrets"}},"namespaces":["kube-system"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["--key-prefix","sealed-secrets-key"],"command":["/controller"],"image":"docker.io/bitnami/sealed-secrets:0.18.5-scratch-r0","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":"http"},"initialDelaySeconds":5,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"sealed-secrets","ports":[{"containerPort":8080,"name":"http","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":"http"},"initialDelaySeconds":5,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"resources":{"limits":{},"requests":{}},"securityContext":{"readOnlyRootFilesystem":true,"runAsNonRoot":true,"runAsUser":1001},"volumeMounts":[{"mountPath":"/tmp","name":"tmp"}]}],"securityContext":{"fsGroup":1001},"serviceAccountName":"sealed-secrets","volumes":[{"emptyDir":{},"name":"tmp"}]}}}}
",
      },
      "name": "sealed-secrets",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets/1-manifest/apps_v1-deployment-kube-system-sealed-secrets.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/sealed-secrets",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/instance": "sealed-secrets",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "sealed-secrets",
            "helm.sh/chart": "sealed-secrets-1.1.5",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/instance": "sealed-secrets",
                        "app.kubernetes.io/name": "sealed-secrets",
                      },
                    },
                    "namespaces": [
                      "kube-system",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "--key-prefix",
                "sealed-secrets-key",
              ],
              "command": [
                "/controller",
              ],
              "image": "docker.io/bitnami/sealed-secrets:0.18.5-scratch-r0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": "http",
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "sealed-secrets",
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": "http",
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": [
                {
                  "mountPath": "/tmp",
                  "name": "tmp",
                },
              ],
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "sealed-secrets",
          "volumes": [
            {
              "emptyDir": {},
              "name": "tmp",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller","namespace":"default"},"spec":{"minReadySeconds":0,"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/name":"nginx-ingress-controller"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/name":"nginx-ingress-controller"}},"namespaces":["default"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["/nginx-ingress-controller","--default-backend-service=default/nginx-ingress-controller-default-backend","--election-id=ingress-controller-leader","--controller-class=k8s.io/ingress-nginx","--configmap=default/nginx-ingress-controller"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"docker.io/bitnami/nginx-ingress-controller:1.4.0-debian-11-r2","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":10254,"scheme":"HTTP"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"controller","ports":[{"containerPort":80,"name":"http","protocol":"TCP"},{"containerPort":443,"name":"https","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":10254,"scheme":"HTTP"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"resources":{"limits":{},"requests":{}},"securityContext":{"allowPrivilegeEscalation":true,"capabilities":{"add":["NET_BIND_SERVICE"],"drop":["ALL"]},"runAsNonRoot":true,"runAsUser":1001}}],"dnsPolicy":"ClusterFirst","hostNetwork":false,"securityContext":{"fsGroup":1001},"serviceAccountName":"nginx-ingress-controller","terminationGracePeriodSeconds":60}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/apps_v1-deployment-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "nginx-ingress-controller",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "nginx-ingress-controller",
            "helm.sh/chart": "nginx-ingress-controller-9.3.18",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "controller",
                        "app.kubernetes.io/instance": "nginx-ingress-controller",
                        "app.kubernetes.io/name": "nginx-ingress-controller",
                      },
                    },
                    "namespaces": [
                      "default",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "/nginx-ingress-controller",
                "--default-backend-service=default/nginx-ingress-controller-default-backend",
                "--election-id=ingress-controller-leader",
                "--controller-class=k8s.io/ingress-nginx",
                "--configmap=default/nginx-ingress-controller",
              ],
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/nginx-ingress-controller:1.4.0-debian-11-r2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "controller",
              "ports": [
                {
                  "containerPort": 80,
                  "name": "http",
                  "protocol": "TCP",
                },
                {
                  "containerPort": 443,
                  "name": "https",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": true,
                "capabilities": {
                  "add": [
                    "NET_BIND_SERVICE",
                  ],
                  "drop": [
                    "ALL",
                  ],
                },
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "dnsPolicy": "ClusterFirst",
          "hostNetwork": false,
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "nginx-ingress-controller",
          "terminationGracePeriodSeconds": 60,
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/component":"default-backend","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller-default-backend","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"default-backend","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/name":"nginx-ingress-controller"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"default-backend","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"default-backend","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/name":"nginx-ingress-controller"}},"namespaces":["default"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"image":"docker.io/bitnami/nginx:1.22.0-debian-11-r44","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":"http","scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":5},"name":"default-backend","ports":[{"containerPort":8080,"name":"http","protocol":"TCP"}],"readinessProbe":{"failureThreshold":6,"httpGet":{"path":"/healthz","port":"http","scheme":"HTTP"},"initialDelaySeconds":0,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":5},"resources":{"limits":{},"requests":{}},"securityContext":{"runAsNonRoot":true,"runAsUser":1001},"volumeMounts":[{"mountPath":"/opt/bitnami/nginx/conf/bitnami/","name":"nginx-config-volume","readOnly":true}]}],"securityContext":{"fsGroup":1001},"serviceAccountName":"nginx-ingress-controller","terminationGracePeriodSeconds":60,"volumes":[{"configMap":{"items":[{"key":"defaultBackend.conf","path":"defaultBackend.conf"}],"name":"nginx-ingress-controller-default-backend"},"name":"nginx-config-volume"}]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller-default-backend",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/apps_v1-deployment-default-nginx-ingress-controller-default-backend.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "default-backend",
            "app.kubernetes.io/instance": "nginx-ingress-controller",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "nginx-ingress-controller",
            "helm.sh/chart": "nginx-ingress-controller-9.3.18",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "default-backend",
                        "app.kubernetes.io/instance": "nginx-ingress-controller",
                        "app.kubernetes.io/name": "nginx-ingress-controller",
                      },
                    },
                    "namespaces": [
                      "default",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "image": "docker.io/bitnami/nginx:1.22.0-debian-11-r44",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": "http",
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "name": "default-backend",
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 6,
                "httpGet": {
                  "path": "/healthz",
                  "port": "http",
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": [
                {
                  "mountPath": "/opt/bitnami/nginx/conf/bitnami/",
                  "name": "nginx-config-volume",
                  "readOnly": true,
                },
              ],
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "nginx-ingress-controller",
          "terminationGracePeriodSeconds": 60,
          "volumes": [
            {
              "configMap": {
                "items": [
                  {
                    "key": "defaultBackend.conf",
                    "path": "defaultBackend.conf",
                  },
                ],
                "name": "nginx-ingress-controller-default-backend",
              },
              "name": "nginx-config-volume",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/created-by":"helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3","operator":"rook","storage-backend":"ceph"},"name":"rook-ceph-operator","namespace":"rook-ceph"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"rook-ceph-operator"}},"strategy":{"type":"Recreate"},"template":{"metadata":{"labels":{"app":"rook-ceph-operator","helm.sh/chart":"rook-ceph-v1.10.3"}},"spec":{"containers":[{"args":["ceph","operator"],"env":[{"name":"ROOK_CURRENT_NAMESPACE_ONLY","value":"false"},{"name":"ROOK_HOSTPATH_REQUIRES_PRIVILEGED","value":"false"},{"name":"ROOK_ENABLE_SELINUX_RELABELING","value":"true"},{"name":"ROOK_DISABLE_DEVICE_HOTPLUG","value":"false"},{"name":"ROOK_ENABLE_DISCOVERY_DAEMON","value":"false"},{"name":"ROOK_DISABLE_ADMISSION_CONTROLLER","value":"false"},{"name":"NODE_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"rook/ceph:v1.10.3","imagePullPolicy":"IfNotPresent","name":"rook-ceph-operator","ports":[{"containerPort":9443,"name":"https-webhook","protocol":"TCP"}],"resources":{"limits":{"cpu":"500m","memory":"512Mi"},"requests":{"cpu":"100m","memory":"128Mi"}},"securityContext":{"runAsGroup":2016,"runAsNonRoot":true,"runAsUser":2016},"volumeMounts":[{"mountPath":"/var/lib/rook","name":"rook-config"},{"mountPath":"/etc/ceph","name":"default-config-dir"},{"mountPath":"/etc/webhook","name":"webhook-cert"}]}],"serviceAccountName":"rook-ceph-system","volumes":[{"emptyDir":{},"name":"rook-config"},{"emptyDir":{},"name":"default-config-dir"},{"emptyDir":{},"name":"webhook-cert"}]}}}}
",
      },
      "name": "rook-ceph-operator",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph/1-manifest/apps_v1-deployment-rook-ceph-rook-ceph-operator.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/rook-ceph",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app": "rook-ceph-operator",
            "helm.sh/chart": "rook-ceph-v1.10.3",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "ceph",
                "operator",
              ],
              "env": [
                {
                  "name": "ROOK_CURRENT_NAMESPACE_ONLY",
                  "value": "false",
                },
                {
                  "name": "ROOK_HOSTPATH_REQUIRES_PRIVILEGED",
                  "value": "false",
                },
                {
                  "name": "ROOK_ENABLE_SELINUX_RELABELING",
                  "value": "true",
                },
                {
                  "name": "ROOK_DISABLE_DEVICE_HOTPLUG",
                  "value": "false",
                },
                {
                  "name": "ROOK_ENABLE_DISCOVERY_DAEMON",
                  "value": "false",
                },
                {
                  "name": "ROOK_DISABLE_ADMISSION_CONTROLLER",
                  "value": "false",
                },
                {
                  "name": "NODE_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "rook/ceph:v1.10.3",
              "imagePullPolicy": "IfNotPresent",
              "name": "rook-ceph-operator",
              "ports": [
                {
                  "containerPort": 9443,
                  "name": "https-webhook",
                  "protocol": "TCP",
                },
              ],
              "resources": {
                "limits": {
                  "cpu": "500m",
                  "memory": "512Mi",
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "128Mi",
                },
              },
              "securityContext": {
                "runAsGroup": 2016,
                "runAsNonRoot": true,
                "runAsUser": 2016,
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/lib/rook",
                  "name": "rook-config",
                },
                {
                  "mountPath": "/etc/ceph",
                  "name": "default-config-dir",
                },
                {
                  "mountPath": "/etc/webhook",
                  "name": "webhook-cert",
                },
              ],
            },
          ],
          "serviceAccountName": "rook-ceph-system",
          "volumes": [
            {
              "emptyDir": {},
              "name": "rook-config",
            },
            {
              "emptyDir": {},
              "name": "default-config-dir",
            },
            {
              "emptyDir": {},
              "name": "webhook-cert",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"proxy-injector","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1","linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-proxy-injector","namespace":"linkerd"},"spec":{"replicas":1,"selector":{"matchLabels":{"linkerd.io/control-plane-component":"proxy-injector"}},"strategy":{"rollingUpdate":{"maxSurge":"25%","maxUnavailable":"25%"}},"template":{"metadata":{"annotations":{"cluster-autoscaler.kubernetes.io/safe-to-evict":"true","config.linkerd.io/default-inbound-policy":"all-unauthenticated","config.linkerd.io/opaque-ports":"8443","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/helm-release-version":"1","linkerd.io/proxy-version":"stable-2.12.1","linkerd.io/trust-root-sha256":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"labels":{"linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd","linkerd.io/proxy-deployment":"linkerd-proxy-injector","linkerd.io/workload-ns":"linkerd"}},"spec":{"containers":[{"env":[{"name":"_pod_name","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"_pod_ns","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"_pod_nodeName","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"LINKERD2_PROXY_LOG","value":"warn,linkerd=info"},{"name":"LINKERD2_PROXY_LOG_FORMAT","value":"plain"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_ADDR","value":"linkerd-dst-headless.linkerd.svc.cluster.local.:8086"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_POLICY_SVC_ADDR","value":"linkerd-policy.linkerd.svc.cluster.local.:8090"},{"name":"LINKERD2_PROXY_POLICY_WORKLOAD","value":"$(_pod_ns):$(_pod_name)"},{"name":"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY","value":"all-unauthenticated"},{"name":"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT","value":"100ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT","value":"1000ms"},{"name":"LINKERD2_PROXY_CONTROL_LISTEN_ADDR","value":"0.0.0.0:4190"},{"name":"LINKERD2_PROXY_ADMIN_LISTEN_ADDR","value":"0.0.0.0:4191"},{"name":"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR","value":"127.0.0.1:4140"},{"name":"LINKERD2_PROXY_INBOUND_LISTEN_ADDR","value":"0.0.0.0:4143"},{"name":"LINKERD2_PROXY_INBOUND_IPS","valueFrom":{"fieldRef":{"fieldPath":"status.podIPs"}}},{"name":"LINKERD2_PROXY_INBOUND_PORTS","value":"8443,9995"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES","value":"svc.cluster.local."},{"name":"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION","value":"25,587,3306,4444,5432,6379,9300,11211"},{"name":"LINKERD2_PROXY_DESTINATION_CONTEXT","value":"{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}\\n"},{"name":"_pod_sa","valueFrom":{"fieldRef":{"fieldPath":"spec.serviceAccountName"}}},{"name":"_l5d_ns","value":"linkerd"},{"name":"_l5d_trustdomain","value":"cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_DIR","value":"/var/run/linkerd/identity/end-entity"},{"name":"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS","valueFrom":{"configMapKeyRef":{"key":"ca-bundle.crt","name":"linkerd-identity-trust-roots"}}},{"name":"LINKERD2_PROXY_IDENTITY_TOKEN_FILE","value":"/var/run/secrets/tokens/linkerd-identity-token"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_ADDR","value":"linkerd-identity-headless.linkerd.svc.cluster.local.:8080"},{"name":"LINKERD2_PROXY_IDENTITY_LOCAL_NAME","value":"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_NAME","value":"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_POLICY_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"}],"image":"cr.l5d.io/linkerd/proxy:stable-2.12.1","imagePullPolicy":"IfNotPresent","lifecycle":{"postStart":{"exec":{"command":["/usr/lib/linkerd/linkerd-await","--timeout=2m"]}}},"livenessProbe":{"httpGet":{"path":"/live","port":4191},"initialDelaySeconds":10},"name":"linkerd-proxy","ports":[{"containerPort":4143,"name":"linkerd-proxy"},{"containerPort":4191,"name":"linkerd-admin"}],"readinessProbe":{"httpGet":{"path":"/ready","port":4191},"initialDelaySeconds":2},"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsUser":2102},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/var/run/linkerd/identity/end-entity","name":"linkerd-identity-end-entity"},{"mountPath":"/var/run/secrets/tokens","name":"linkerd-identity-token"}]},{"args":["proxy-injector","-log-level=info","-log-format=plain","-linkerd-namespace=linkerd","-enable-pprof=false"],"image":"cr.l5d.io/linkerd/controller:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9995},"initialDelaySeconds":10},"name":"proxy-injector","ports":[{"containerPort":8443,"name":"proxy-injector"},{"containerPort":9995,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9995}},"securityContext":{"allowPrivilegeEscalation":false,"runAsUser":2103},"volumeMounts":[{"mountPath":"/var/run/linkerd/config","name":"config"},{"mountPath":"/var/run/linkerd/identity/trust-roots","name":"trust-roots"},{"mountPath":"/var/run/linkerd/tls","name":"tls","readOnly":true}]}],"initContainers":[{"args":["--incoming-proxy-port","4143","--outgoing-proxy-port","4140","--proxy-uid","2102","--inbound-ports-to-ignore","4190,4191,4567,4568","--outbound-ports-to-ignore","4567,4568"],"image":"cr.l5d.io/linkerd/proxy-init:v2.0.0","imagePullPolicy":"IfNotPresent","name":"linkerd-init","resources":{"limits":{"cpu":"100m","memory":"20Mi"},"requests":{"cpu":"100m","memory":"20Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"add":["NET_ADMIN","NET_RAW"]},"privileged":false,"readOnlyRootFilesystem":true,"runAsNonRoot":true,"runAsUser":65534},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/run","name":"linkerd-proxy-init-xtables-lock"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"linkerd-proxy-injector","volumes":[{"configMap":{"name":"linkerd-config"},"name":"config"},{"configMap":{"name":"linkerd-identity-trust-roots"},"name":"trust-roots"},{"name":"tls","secret":{"secretName":"linkerd-proxy-injector-k8s-tls"}},{"emptyDir":{},"name":"linkerd-proxy-init-xtables-lock"},{"name":"linkerd-identity-token","projected":{"sources":[{"serviceAccountToken":{"audience":"identity.l5d.io","expirationSeconds":86400,"path":"linkerd-identity-token"}}]}},{"emptyDir":{"medium":"Memory"},"name":"linkerd-identity-end-entity"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-proxy-injector",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "true",
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "config.linkerd.io/opaque-ports": "8443",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/helm-release-version": "1",
            "linkerd.io/proxy-version": "stable-2.12.1",
            "linkerd.io/trust-root-sha256": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
          },
          "labels": {
            "linkerd.io/control-plane-component": "proxy-injector",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-proxy-injector",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "_pod_name",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                {
                  "name": "_pod_ns",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "_pod_nodeName",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "linkerd-dst-headless.linkerd.svc.cluster.local.:8086",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "linkerd-policy.linkerd.svc.cluster.local.:8090",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8443,9995",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
",
                },
                {
                  "name": "_pod_sa",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/tokens/linkerd-identity-token",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "linkerd-identity-headless.linkerd.svc.cluster.local.:8080",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "/usr/lib/linkerd/linkerd-await",
                      "--timeout=2m",
                    ],
                  },
                },
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": [
                {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
                {
                  "mountPath": "/var/run/secrets/tokens",
                  "name": "linkerd-identity-token",
                },
              ],
            },
            {
              "args": [
                "proxy-injector",
                "-log-level=info",
                "-log-format=plain",
                "-linkerd-namespace=linkerd",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9995,
                },
                "initialDelaySeconds": 10,
              },
              "name": "proxy-injector",
              "ports": [
                {
                  "containerPort": 8443,
                  "name": "proxy-injector",
                },
                {
                  "containerPort": 9995,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9995,
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 2103,
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/config",
                  "name": "config",
                },
                {
                  "mountPath": "/var/run/linkerd/identity/trust-roots",
                  "name": "trust-roots",
                },
                {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "4567,4568",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v2.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "20Mi",
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "20Mi",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "add": [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true,
                "runAsUser": 65534,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": [
                {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-proxy-injector",
          "volumes": [
            {
              "configMap": {
                "name": "linkerd-config",
              },
              "name": "config",
            },
            {
              "configMap": {
                "name": "linkerd-identity-trust-roots",
              },
              "name": "trust-roots",
            },
            {
              "name": "tls",
              "secret": {
                "secretName": "linkerd-proxy-injector-k8s-tls",
              },
            },
            {
              "emptyDir": {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            {
              "name": "linkerd-identity-token",
              "projected": {
                "sources": [
                  {
                    "serviceAccountToken": {
                      "audience": "identity.l5d.io",
                      "expirationSeconds": 86400,
                      "path": "linkerd-identity-token",
                    },
                  },
                ],
              },
            },
            {
              "emptyDir": {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"identity","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1","linkerd.io/control-plane-component":"identity","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-identity","namespace":"linkerd"},"spec":{"replicas":1,"selector":{"matchLabels":{"linkerd.io/control-plane-component":"identity","linkerd.io/control-plane-ns":"linkerd","linkerd.io/proxy-deployment":"linkerd-identity"}},"strategy":{"rollingUpdate":{"maxSurge":"25%","maxUnavailable":"25%"}},"template":{"metadata":{"annotations":{"cluster-autoscaler.kubernetes.io/safe-to-evict":"true","config.linkerd.io/default-inbound-policy":"all-unauthenticated","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/proxy-version":"stable-2.12.1","linkerd.io/trust-root-sha256":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"labels":{"linkerd.io/control-plane-component":"identity","linkerd.io/control-plane-ns":"linkerd","linkerd.io/proxy-deployment":"linkerd-identity","linkerd.io/workload-ns":"linkerd"}},"spec":{"containers":[{"args":["identity","-log-level=info","-log-format=plain","-controller-namespace=linkerd","-identity-trust-domain=cluster.local","-identity-issuance-lifetime=24h0m0s","-identity-clock-skew-allowance=20s","-identity-scheme=kubernetes.io/tls","-enable-pprof=false"],"env":[{"name":"LINKERD_DISABLED","value":"linkerd-await cannot block the identity controller"}],"image":"cr.l5d.io/linkerd/controller:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9990},"initialDelaySeconds":10},"name":"identity","ports":[{"containerPort":8080,"name":"grpc"},{"containerPort":9990,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9990}},"securityContext":{"allowPrivilegeEscalation":false,"runAsUser":2103},"volumeMounts":[{"mountPath":"/var/run/linkerd/identity/issuer","name":"identity-issuer"},{"mountPath":"/var/run/linkerd/identity/trust-roots/","name":"trust-roots"}]},{"env":[{"name":"_pod_name","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"_pod_ns","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"_pod_nodeName","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS","value":"8080"},{"name":"LINKERD2_PROXY_LOG","value":"warn,linkerd=info"},{"name":"LINKERD2_PROXY_LOG_FORMAT","value":"plain"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_ADDR","value":"linkerd-dst-headless.linkerd.svc.cluster.local.:8086"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_POLICY_SVC_ADDR","value":"linkerd-policy.linkerd.svc.cluster.local.:8090"},{"name":"LINKERD2_PROXY_POLICY_WORKLOAD","value":"$(_pod_ns):$(_pod_name)"},{"name":"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY","value":"all-unauthenticated"},{"name":"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT","value":"100ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT","value":"1000ms"},{"name":"LINKERD2_PROXY_CONTROL_LISTEN_ADDR","value":"0.0.0.0:4190"},{"name":"LINKERD2_PROXY_ADMIN_LISTEN_ADDR","value":"0.0.0.0:4191"},{"name":"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR","value":"127.0.0.1:4140"},{"name":"LINKERD2_PROXY_INBOUND_LISTEN_ADDR","value":"0.0.0.0:4143"},{"name":"LINKERD2_PROXY_INBOUND_IPS","valueFrom":{"fieldRef":{"fieldPath":"status.podIPs"}}},{"name":"LINKERD2_PROXY_INBOUND_PORTS","value":"8080,9990"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES","value":"svc.cluster.local."},{"name":"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION","value":"25,587,3306,4444,5432,6379,9300,11211"},{"name":"LINKERD2_PROXY_DESTINATION_CONTEXT","value":"{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}\\n"},{"name":"_pod_sa","valueFrom":{"fieldRef":{"fieldPath":"spec.serviceAccountName"}}},{"name":"_l5d_ns","value":"linkerd"},{"name":"_l5d_trustdomain","value":"cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_DIR","value":"/var/run/linkerd/identity/end-entity"},{"name":"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS","valueFrom":{"configMapKeyRef":{"key":"ca-bundle.crt","name":"linkerd-identity-trust-roots"}}},{"name":"LINKERD2_PROXY_IDENTITY_TOKEN_FILE","value":"/var/run/secrets/tokens/linkerd-identity-token"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_ADDR","value":"localhost.:8080"},{"name":"LINKERD2_PROXY_IDENTITY_LOCAL_NAME","value":"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_NAME","value":"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_POLICY_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"}],"image":"cr.l5d.io/linkerd/proxy:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/live","port":4191},"initialDelaySeconds":10},"name":"linkerd-proxy","ports":[{"containerPort":4143,"name":"linkerd-proxy"},{"containerPort":4191,"name":"linkerd-admin"}],"readinessProbe":{"httpGet":{"path":"/ready","port":4191},"initialDelaySeconds":2},"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsUser":2102},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/var/run/linkerd/identity/end-entity","name":"linkerd-identity-end-entity"},{"mountPath":"/var/run/secrets/tokens","name":"linkerd-identity-token"}]}],"initContainers":[{"args":["--incoming-proxy-port","4143","--outgoing-proxy-port","4140","--proxy-uid","2102","--inbound-ports-to-ignore","4190,4191,4567,4568","--outbound-ports-to-ignore","443"],"image":"cr.l5d.io/linkerd/proxy-init:v2.0.0","imagePullPolicy":"IfNotPresent","name":"linkerd-init","resources":{"limits":{"cpu":"100m","memory":"20Mi"},"requests":{"cpu":"100m","memory":"20Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"add":["NET_ADMIN","NET_RAW"]},"privileged":false,"readOnlyRootFilesystem":true,"runAsNonRoot":true,"runAsUser":65534},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/run","name":"linkerd-proxy-init-xtables-lock"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"linkerd-identity","volumes":[{"name":"identity-issuer","secret":{"secretName":"linkerd-identity-issuer"}},{"configMap":{"name":"linkerd-identity-trust-roots"},"name":"trust-roots"},{"emptyDir":{},"name":"linkerd-proxy-init-xtables-lock"},{"name":"linkerd-identity-token","projected":{"sources":[{"serviceAccountToken":{"audience":"identity.l5d.io","expirationSeconds":86400,"path":"linkerd-identity-token"}}]}},{"emptyDir":{"medium":"Memory"},"name":"linkerd-identity-end-entity"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-identity",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "true",
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/proxy-version": "stable-2.12.1",
            "linkerd.io/trust-root-sha256": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
          },
          "labels": {
            "linkerd.io/control-plane-component": "identity",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-identity",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "identity",
                "-log-level=info",
                "-log-format=plain",
                "-controller-namespace=linkerd",
                "-identity-trust-domain=cluster.local",
                "-identity-issuance-lifetime=24h0m0s",
                "-identity-clock-skew-allowance=20s",
                "-identity-scheme=kubernetes.io/tls",
                "-enable-pprof=false",
              ],
              "env": [
                {
                  "name": "LINKERD_DISABLED",
                  "value": "linkerd-await cannot block the identity controller",
                },
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9990,
                },
                "initialDelaySeconds": 10,
              },
              "name": "identity",
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "grpc",
                },
                {
                  "containerPort": 9990,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9990,
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 2103,
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/identity/issuer",
                  "name": "identity-issuer",
                },
                {
                  "mountPath": "/var/run/linkerd/identity/trust-roots/",
                  "name": "trust-roots",
                },
              ],
            },
            {
              "env": [
                {
                  "name": "_pod_name",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                {
                  "name": "_pod_ns",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "_pod_nodeName",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS",
                  "value": "8080",
                },
                {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "linkerd-dst-headless.linkerd.svc.cluster.local.:8086",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "linkerd-policy.linkerd.svc.cluster.local.:8090",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8080,9990",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
",
                },
                {
                  "name": "_pod_sa",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/tokens/linkerd-identity-token",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "localhost.:8080",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": [
                {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
                {
                  "mountPath": "/var/run/secrets/tokens",
                  "name": "linkerd-identity-token",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "443",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v2.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "20Mi",
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "20Mi",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "add": [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true,
                "runAsUser": 65534,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": [
                {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-identity",
          "volumes": [
            {
              "name": "identity-issuer",
              "secret": {
                "secretName": "linkerd-identity-issuer",
              },
            },
            {
              "configMap": {
                "name": "linkerd-identity-trust-roots",
              },
              "name": "trust-roots",
            },
            {
              "emptyDir": {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            {
              "name": "linkerd-identity-token",
              "projected": {
                "sources": [
                  {
                    "serviceAccountToken": {
                      "audience": "identity.l5d.io",
                      "expirationSeconds": 86400,
                      "path": "linkerd-identity-token",
                    },
                  },
                ],
              },
            },
            {
              "emptyDir": {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"destination","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-destination","namespace":"linkerd"},"spec":{"replicas":1,"selector":{"matchLabels":{"linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd","linkerd.io/proxy-deployment":"linkerd-destination"}},"strategy":{"rollingUpdate":{"maxSurge":"25%","maxUnavailable":"25%"}},"template":{"metadata":{"annotations":{"cluster-autoscaler.kubernetes.io/safe-to-evict":"true","config.linkerd.io/default-inbound-policy":"all-unauthenticated","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/helm-release-version":"1","linkerd.io/proxy-version":"stable-2.12.1","linkerd.io/trust-root-sha256":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"labels":{"linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd","linkerd.io/proxy-deployment":"linkerd-destination","linkerd.io/workload-ns":"linkerd"}},"spec":{"containers":[{"env":[{"name":"_pod_name","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"_pod_ns","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"_pod_nodeName","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"LINKERD2_PROXY_LOG","value":"warn,linkerd=info"},{"name":"LINKERD2_PROXY_LOG_FORMAT","value":"plain"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_ADDR","value":"localhost.:8086"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_POLICY_SVC_ADDR","value":"localhost.:8090"},{"name":"LINKERD2_PROXY_POLICY_WORKLOAD","value":"$(_pod_ns):$(_pod_name)"},{"name":"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY","value":"all-unauthenticated"},{"name":"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT","value":"100ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT","value":"1000ms"},{"name":"LINKERD2_PROXY_CONTROL_LISTEN_ADDR","value":"0.0.0.0:4190"},{"name":"LINKERD2_PROXY_ADMIN_LISTEN_ADDR","value":"0.0.0.0:4191"},{"name":"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR","value":"127.0.0.1:4140"},{"name":"LINKERD2_PROXY_INBOUND_LISTEN_ADDR","value":"0.0.0.0:4143"},{"name":"LINKERD2_PROXY_INBOUND_IPS","valueFrom":{"fieldRef":{"fieldPath":"status.podIPs"}}},{"name":"LINKERD2_PROXY_INBOUND_PORTS","value":"8086,8090,8443,9443,9990,9996,9997"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES","value":"svc.cluster.local."},{"name":"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION","value":"25,587,3306,4444,5432,6379,9300,11211"},{"name":"LINKERD2_PROXY_DESTINATION_CONTEXT","value":"{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}\\n"},{"name":"_pod_sa","valueFrom":{"fieldRef":{"fieldPath":"spec.serviceAccountName"}}},{"name":"_l5d_ns","value":"linkerd"},{"name":"_l5d_trustdomain","value":"cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_DIR","value":"/var/run/linkerd/identity/end-entity"},{"name":"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS","valueFrom":{"configMapKeyRef":{"key":"ca-bundle.crt","name":"linkerd-identity-trust-roots"}}},{"name":"LINKERD2_PROXY_IDENTITY_TOKEN_FILE","value":"/var/run/secrets/tokens/linkerd-identity-token"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_ADDR","value":"linkerd-identity-headless.linkerd.svc.cluster.local.:8080"},{"name":"LINKERD2_PROXY_IDENTITY_LOCAL_NAME","value":"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_NAME","value":"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_POLICY_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"}],"image":"cr.l5d.io/linkerd/proxy:stable-2.12.1","imagePullPolicy":"IfNotPresent","lifecycle":{"postStart":{"exec":{"command":["/usr/lib/linkerd/linkerd-await","--timeout=2m"]}}},"livenessProbe":{"httpGet":{"path":"/live","port":4191},"initialDelaySeconds":10},"name":"linkerd-proxy","ports":[{"containerPort":4143,"name":"linkerd-proxy"},{"containerPort":4191,"name":"linkerd-admin"}],"readinessProbe":{"httpGet":{"path":"/ready","port":4191},"initialDelaySeconds":2},"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsUser":2102},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/var/run/linkerd/identity/end-entity","name":"linkerd-identity-end-entity"},{"mountPath":"/var/run/secrets/tokens","name":"linkerd-identity-token"}]},{"args":["destination","-addr=:8086","-controller-namespace=linkerd","-enable-h2-upgrade=true","-log-level=info","-log-format=plain","-enable-endpoint-slices=true","-cluster-domain=cluster.local","-identity-trust-domain=cluster.local","-default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211","-enable-pprof=false"],"image":"cr.l5d.io/linkerd/controller:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9996},"initialDelaySeconds":10},"name":"destination","ports":[{"containerPort":8086,"name":"grpc"},{"containerPort":9996,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9996}},"securityContext":{"allowPrivilegeEscalation":false,"runAsUser":2103}},{"args":["sp-validator","-log-level=info","-log-format=plain","-enable-pprof=false"],"image":"cr.l5d.io/linkerd/controller:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9997},"initialDelaySeconds":10},"name":"sp-validator","ports":[{"containerPort":8443,"name":"sp-validator"},{"containerPort":9997,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9997}},"securityContext":{"allowPrivilegeEscalation":false,"runAsUser":2103},"volumeMounts":[{"mountPath":"/var/run/linkerd/tls","name":"sp-tls","readOnly":true}]},{"args":["--admin-addr=0.0.0.0:9990","--control-plane-namespace=linkerd","--grpc-addr=0.0.0.0:8090","--server-addr=0.0.0.0:9443","--server-tls-key=/var/run/linkerd/tls/tls.key","--server-tls-certs=/var/run/linkerd/tls/tls.crt","--cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16","--identity-domain=cluster.local","--default-policy=all-unauthenticated","--log-level=info","--log-format=plain","--probe-networks=0.0.0.0/0"],"image":"cr.l5d.io/linkerd/policy-controller:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/live","port":"admin"}},"name":"policy","ports":[{"containerPort":8090,"name":"grpc"},{"containerPort":9990,"name":"admin"},{"containerPort":9443,"name":"policy-https"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":"admin"},"initialDelaySeconds":10},"securityContext":{"allowPrivilegeEscalation":false,"runAsUser":2103},"volumeMounts":[{"mountPath":"/var/run/linkerd/tls","name":"policy-tls","readOnly":true}]}],"initContainers":[{"args":["--incoming-proxy-port","4143","--outgoing-proxy-port","4140","--proxy-uid","2102","--inbound-ports-to-ignore","4190,4191,4567,4568","--outbound-ports-to-ignore","443"],"image":"cr.l5d.io/linkerd/proxy-init:v2.0.0","imagePullPolicy":"IfNotPresent","name":"linkerd-init","resources":{"limits":{"cpu":"100m","memory":"20Mi"},"requests":{"cpu":"100m","memory":"20Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"add":["NET_ADMIN","NET_RAW"]},"privileged":false,"readOnlyRootFilesystem":true,"runAsNonRoot":true,"runAsUser":65534},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/run","name":"linkerd-proxy-init-xtables-lock"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"linkerd-destination","volumes":[{"name":"sp-tls","secret":{"secretName":"linkerd-sp-validator-k8s-tls"}},{"name":"policy-tls","secret":{"secretName":"linkerd-policy-validator-k8s-tls"}},{"emptyDir":{},"name":"linkerd-proxy-init-xtables-lock"},{"name":"linkerd-identity-token","projected":{"sources":[{"serviceAccountToken":{"audience":"identity.l5d.io","expirationSeconds":86400,"path":"linkerd-identity-token"}}]}},{"emptyDir":{"medium":"Memory"},"name":"linkerd-identity-end-entity"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-destination",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-destination.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "true",
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/helm-release-version": "1",
            "linkerd.io/proxy-version": "stable-2.12.1",
            "linkerd.io/trust-root-sha256": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
          },
          "labels": {
            "linkerd.io/control-plane-component": "destination",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-destination",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "_pod_name",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                {
                  "name": "_pod_ns",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "_pod_nodeName",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "localhost.:8086",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "localhost.:8090",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8086,8090,8443,9443,9990,9996,9997",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
",
                },
                {
                  "name": "_pod_sa",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/tokens/linkerd-identity-token",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "linkerd-identity-headless.linkerd.svc.cluster.local.:8080",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "/usr/lib/linkerd/linkerd-await",
                      "--timeout=2m",
                    ],
                  },
                },
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": [
                {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
                {
                  "mountPath": "/var/run/secrets/tokens",
                  "name": "linkerd-identity-token",
                },
              ],
            },
            {
              "args": [
                "destination",
                "-addr=:8086",
                "-controller-namespace=linkerd",
                "-enable-h2-upgrade=true",
                "-log-level=info",
                "-log-format=plain",
                "-enable-endpoint-slices=true",
                "-cluster-domain=cluster.local",
                "-identity-trust-domain=cluster.local",
                "-default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9996,
                },
                "initialDelaySeconds": 10,
              },
              "name": "destination",
              "ports": [
                {
                  "containerPort": 8086,
                  "name": "grpc",
                },
                {
                  "containerPort": 9996,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9996,
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 2103,
              },
            },
            {
              "args": [
                "sp-validator",
                "-log-level=info",
                "-log-format=plain",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9997,
                },
                "initialDelaySeconds": 10,
              },
              "name": "sp-validator",
              "ports": [
                {
                  "containerPort": 8443,
                  "name": "sp-validator",
                },
                {
                  "containerPort": 9997,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9997,
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 2103,
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "sp-tls",
                  "readOnly": true,
                },
              ],
            },
            {
              "args": [
                "--admin-addr=0.0.0.0:9990",
                "--control-plane-namespace=linkerd",
                "--grpc-addr=0.0.0.0:8090",
                "--server-addr=0.0.0.0:9443",
                "--server-tls-key=/var/run/linkerd/tls/tls.key",
                "--server-tls-certs=/var/run/linkerd/tls/tls.crt",
                "--cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                "--identity-domain=cluster.local",
                "--default-policy=all-unauthenticated",
                "--log-level=info",
                "--log-format=plain",
                "--probe-networks=0.0.0.0/0",
              ],
              "image": "cr.l5d.io/linkerd/policy-controller:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/live",
                  "port": "admin",
                },
              },
              "name": "policy",
              "ports": [
                {
                  "containerPort": 8090,
                  "name": "grpc",
                },
                {
                  "containerPort": 9990,
                  "name": "admin",
                },
                {
                  "containerPort": 9443,
                  "name": "policy-https",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": "admin",
                },
                "initialDelaySeconds": 10,
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 2103,
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "policy-tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "443",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v2.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "20Mi",
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "20Mi",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "add": [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true,
                "runAsUser": 65534,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": [
                {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-destination",
          "volumes": [
            {
              "name": "sp-tls",
              "secret": {
                "secretName": "linkerd-sp-validator-k8s-tls",
              },
            },
            {
              "name": "policy-tls",
              "secret": {
                "secretName": "linkerd-policy-validator-k8s-tls",
              },
            },
            {
              "emptyDir": {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            {
              "name": "linkerd-identity-token",
              "projected": {
                "sources": [
                  {
                    "serviceAccountToken": {
                      "audience": "identity.l5d.io",
                      "expirationSeconds": 86400,
                      "path": "linkerd-identity-token",
                    },
                  },
                ],
              },
            },
            {
              "emptyDir": {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "config.linkerd.io/proxy-await": "enabled",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.linkerd.io/proxy-await":"enabled","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"tap-injector","app.kubernetes.io/part-of":"Linkerd","component":"tap-injector","linkerd.io/extension":"viz"},"name":"tap-injector","namespace":"linkerd-viz"},"spec":{"replicas":1,"selector":{"matchLabels":{"component":"tap-injector"}},"template":{"metadata":{"annotations":{"checksum/config":"cfd04d1231612586e990320c0bc6e1548f0d255b13326754efa28d3c216c1612","cluster-autoscaler.kubernetes.io/safe-to-evict":"true","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"component":"tap-injector","linkerd.io/extension":"viz"}},"spec":{"containers":[{"args":["injector","-tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local","-log-level=info","-log-format=plain","-enable-pprof=false"],"image":"cr.l5d.io/linkerd/tap:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9995},"initialDelaySeconds":10},"name":"tap-injector","ports":[{"containerPort":8443,"name":"tap-injector"},{"containerPort":9995,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9995}},"securityContext":{"runAsUser":2103},"volumeMounts":[{"mountPath":"/var/run/linkerd/tls","name":"tls","readOnly":true}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"tap-injector","volumes":[{"name":"tls","secret":{"secretName":"tap-injector-k8s-tls"}}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
        "linkerd.io/inject": "enabled",
      },
      "name": "tap-injector",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-tap-injector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "cfd04d1231612586e990320c0bc6e1548f0d255b13326754efa28d3c216c1612",
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "true",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/inject": "enabled",
          },
          "labels": {
            "component": "tap-injector",
            "linkerd.io/extension": "viz",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "injector",
                "-tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local",
                "-log-level=info",
                "-log-format=plain",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/tap:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9995,
                },
                "initialDelaySeconds": 10,
              },
              "name": "tap-injector",
              "ports": [
                {
                  "containerPort": 8443,
                  "name": "tap-injector",
                },
                {
                  "containerPort": 9995,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9995,
                },
              },
              "securityContext": {
                "runAsUser": 2103,
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "tap-injector",
          "volumes": [
            {
              "name": "tls",
              "secret": {
                "secretName": "tap-injector-k8s-tls",
              },
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "config.linkerd.io/proxy-await": "enabled",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.linkerd.io/proxy-await":"enabled","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"tap","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1","component":"tap","linkerd.io/extension":"viz","namespace":"linkerd-viz"},"name":"tap","namespace":"linkerd-viz"},"spec":{"replicas":1,"selector":{"matchLabels":{"component":"tap","linkerd.io/extension":"viz","namespace":"linkerd-viz"}},"template":{"metadata":{"annotations":{"checksum/config":"c2a0e575aa8712adfb416c29b9939b360d11762d9cd1093fdbf4ea22ee39ab0d","cluster-autoscaler.kubernetes.io/safe-to-evict":"true","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"component":"tap","linkerd.io/extension":"viz","namespace":"linkerd-viz"}},"spec":{"containers":[{"args":["api","-api-namespace=linkerd","-log-level=info","-log-format=plain","-identity-trust-domain=cluster.local","-enable-pprof=false"],"image":"cr.l5d.io/linkerd/tap:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9998},"initialDelaySeconds":10},"name":"tap","ports":[{"containerPort":8088,"name":"grpc"},{"containerPort":8089,"name":"apiserver"},{"containerPort":9998,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9998}},"securityContext":{"runAsUser":2103},"volumeMounts":[{"mountPath":"/var/run/linkerd/tls","name":"tls","readOnly":true}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"tap","volumes":[{"name":"tls","secret":{"secretName":"tap-k8s-tls"}}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
        "linkerd.io/inject": "enabled",
      },
      "name": "tap",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-tap.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "c2a0e575aa8712adfb416c29b9939b360d11762d9cd1093fdbf4ea22ee39ab0d",
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "true",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/inject": "enabled",
          },
          "labels": {
            "component": "tap",
            "linkerd.io/extension": "viz",
            "namespace": "linkerd-viz",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "api",
                "-api-namespace=linkerd",
                "-log-level=info",
                "-log-format=plain",
                "-identity-trust-domain=cluster.local",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/tap:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9998,
                },
                "initialDelaySeconds": 10,
              },
              "name": "tap",
              "ports": [
                {
                  "containerPort": 8088,
                  "name": "grpc",
                },
                {
                  "containerPort": 8089,
                  "name": "apiserver",
                },
                {
                  "containerPort": 9998,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9998,
                },
              },
              "securityContext": {
                "runAsUser": 2103,
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "tap",
          "volumes": [
            {
              "name": "tls",
              "secret": {
                "secretName": "tap-k8s-tls",
              },
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "config.linkerd.io/proxy-await": "enabled",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.linkerd.io/proxy-await":"enabled","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"metrics-api","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1","component":"metrics-api","linkerd.io/extension":"viz"},"name":"metrics-api","namespace":"linkerd-viz"},"spec":{"replicas":1,"selector":{"matchLabels":{"component":"metrics-api","linkerd.io/extension":"viz"}},"template":{"metadata":{"annotations":{"checksum/config":"b73fb1bf343c4203fbab8ee108c5eba2e07d184177e204677dc83d4cad2cd12b","cluster-autoscaler.kubernetes.io/safe-to-evict":"true","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"component":"metrics-api","linkerd.io/extension":"viz"}},"spec":{"containers":[{"args":["-controller-namespace=linkerd","-log-level=info","-log-format=plain","-cluster-domain=cluster.local","-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090","-enable-pprof=false"],"image":"cr.l5d.io/linkerd/metrics-api:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9995},"initialDelaySeconds":10},"name":"metrics-api","ports":[{"containerPort":8085,"name":"http"},{"containerPort":9995,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9995}},"securityContext":{"runAsUser":2103}}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"metrics-api"}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
        "linkerd.io/inject": "enabled",
      },
      "name": "metrics-api",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-metrics-api.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "b73fb1bf343c4203fbab8ee108c5eba2e07d184177e204677dc83d4cad2cd12b",
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "true",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/inject": "enabled",
          },
          "labels": {
            "component": "metrics-api",
            "linkerd.io/extension": "viz",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "-controller-namespace=linkerd",
                "-log-level=info",
                "-log-format=plain",
                "-cluster-domain=cluster.local",
                "-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/metrics-api:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9995,
                },
                "initialDelaySeconds": 10,
              },
              "name": "metrics-api",
              "ports": [
                {
                  "containerPort": 8085,
                  "name": "http",
                },
                {
                  "containerPort": 9995,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9995,
                },
              },
              "securityContext": {
                "runAsUser": 2103,
              },
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "metrics-api",
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "config.linkerd.io/proxy-await": "enabled",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.linkerd.io/proxy-await":"enabled","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"web","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1","component":"web","linkerd.io/extension":"viz","namespace":"linkerd-viz"},"name":"web","namespace":"linkerd-viz"},"spec":{"replicas":1,"selector":{"matchLabels":{"component":"web","linkerd.io/extension":"viz","namespace":"linkerd-viz"}},"template":{"metadata":{"annotations":{"cluster-autoscaler.kubernetes.io/safe-to-evict":"true","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"component":"web","linkerd.io/extension":"viz","namespace":"linkerd-viz"}},"spec":{"containers":[{"args":["-linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085","-cluster-domain=cluster.local","-controller-namespace=linkerd","-log-level=info","-log-format=plain","-enforced-host=^(localhost|127\\\\.0\\\\.0\\\\.1|web\\\\.linkerd-viz\\\\.svc\\\\.cluster\\\\.local|web\\\\.linkerd-viz\\\\.svc|\\\\[::1\\\\])(:\\\\d+)?$","-enable-pprof=false"],"image":"cr.l5d.io/linkerd/web:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9994},"initialDelaySeconds":10},"name":"web","ports":[{"containerPort":8084,"name":"http"},{"containerPort":9994,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9994}},"securityContext":{"runAsUser":2103}}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"web"}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
        "linkerd.io/inject": "enabled",
      },
      "name": "web",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-web.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "true",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/inject": "enabled",
          },
          "labels": {
            "component": "web",
            "linkerd.io/extension": "viz",
            "namespace": "linkerd-viz",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "-linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085",
                "-cluster-domain=cluster.local",
                "-controller-namespace=linkerd",
                "-log-level=info",
                "-log-format=plain",
                "-enforced-host=^(localhost|127\\.0\\.0\\.1|web\\.linkerd-viz\\.svc\\.cluster\\.local|web\\.linkerd-viz\\.svc|\\[::1\\])(:\\d+)?$",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/web:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9994,
                },
                "initialDelaySeconds": 10,
              },
              "name": "web",
              "ports": [
                {
                  "containerPort": 8084,
                  "name": "http",
                },
                {
                  "containerPort": 9994,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9994,
                },
              },
              "securityContext": {
                "runAsUser": 2103,
              },
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "web",
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "config.linkerd.io/proxy-await": "enabled",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.linkerd.io/proxy-await":"enabled","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"prometheus","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1","component":"prometheus","linkerd.io/extension":"viz","namespace":"linkerd-viz"},"name":"prometheus","namespace":"linkerd-viz"},"spec":{"replicas":1,"selector":{"matchLabels":{"component":"prometheus","linkerd.io/extension":"viz","namespace":"linkerd-viz"}},"template":{"metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/inject":"enabled"},"labels":{"component":"prometheus","linkerd.io/extension":"viz","namespace":"linkerd-viz"}},"spec":{"containers":[{"args":["--log.level=info","--log.format=logfmt","--config.file=/etc/prometheus/prometheus.yml","--storage.tsdb.path=/data","--storage.tsdb.retention.time=6h"],"image":"prom/prometheus:v2.30.3","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/-/healthy","port":9090},"initialDelaySeconds":30,"timeoutSeconds":30},"name":"prometheus","ports":[{"containerPort":9090,"name":"admin-http"}],"readinessProbe":{"httpGet":{"path":"/-/ready","port":9090},"initialDelaySeconds":30,"timeoutSeconds":30},"securityContext":{"runAsGroup":65534,"runAsNonRoot":true,"runAsUser":65534},"volumeMounts":[{"mountPath":"/data","name":"data"},{"mountPath":"/etc/prometheus/prometheus.yml","name":"prometheus-config","readOnly":true,"subPath":"prometheus.yml"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"securityContext":{"fsGroup":65534},"serviceAccountName":"prometheus","volumes":[{"emptyDir":{},"name":"data"},{"configMap":{"name":"prometheus-config"},"name":"prometheus-config"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
        "linkerd.io/inject": "enabled",
      },
      "name": "prometheus",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/apps_v1-deployment-linkerd-viz-prometheus.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/inject": "enabled",
          },
          "labels": {
            "component": "prometheus",
            "linkerd.io/extension": "viz",
            "namespace": "linkerd-viz",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "--log.level=info",
                "--log.format=logfmt",
                "--config.file=/etc/prometheus/prometheus.yml",
                "--storage.tsdb.path=/data",
                "--storage.tsdb.retention.time=6h",
              ],
              "image": "prom/prometheus:v2.30.3",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/-/healthy",
                  "port": 9090,
                },
                "initialDelaySeconds": 30,
                "timeoutSeconds": 30,
              },
              "name": "prometheus",
              "ports": [
                {
                  "containerPort": 9090,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/-/ready",
                  "port": 9090,
                },
                "initialDelaySeconds": 30,
                "timeoutSeconds": 30,
              },
              "securityContext": {
                "runAsGroup": 65534,
                "runAsNonRoot": true,
                "runAsUser": 65534,
              },
              "volumeMounts": [
                {
                  "mountPath": "/data",
                  "name": "data",
                },
                {
                  "mountPath": "/etc/prometheus/prometheus.yml",
                  "name": "prometheus-config",
                  "readOnly": true,
                  "subPath": "prometheus.yml",
                },
              ],
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "securityContext": {
            "fsGroup": 65534,
          },
          "serviceAccountName": "prometheus",
          "volumes": [
            {
              "emptyDir": {},
              "name": "data",
            },
            {
              "configMap": {
                "name": "prometheus-config",
              },
              "name": "prometheus-config",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"controller-manager","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"tidb-operator","helm.sh/chart":"tidb-operator-v1.3.8"},"name":"tidb-controller-manager","namespace":"tikv-admin"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"controller-manager","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/name":"tidb-operator"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"controller-manager","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/name":"tidb-operator"}},"spec":{"containers":[{"command":["/usr/local/bin/tidb-controller-manager","-tidb-backup-manager-image=pingcap/tidb-backup-manager:v1.3.8","-tidb-discovery-image=pingcap/tidb-operator:v1.3.8","-cluster-scoped=true","-cluster-permission-node=true","-cluster-permission-pv=true","-cluster-permission-sc=true","-auto-failover=true","-pd-failover-period=5m","-tikv-failover-period=5m","-tiflash-failover-period=5m","-tidb-failover-period=5m","-dm-master-failover-period=5m","-dm-worker-failover-period=5m","-v=2"],"env":[{"name":"NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"TZ","value":"UTC"}],"image":"pingcap/tidb-operator:v1.3.8","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":10,"initialDelaySeconds":30,"periodSeconds":10,"tcpSocket":{"port":6060}},"name":"tidb-operator","resources":{"requests":{"cpu":"80m","memory":"50Mi"}}}],"serviceAccount":"tidb-controller-manager"}}}}
",
      },
      "name": "tidb-controller-manager",
      "namespace": "tikv-admin",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/1-manifest/apps_v1-deployment-tikv-admin-tidb-controller-manager.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "controller-manager",
            "app.kubernetes.io/instance": "tidb-operator",
            "app.kubernetes.io/name": "tidb-operator",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "/usr/local/bin/tidb-controller-manager",
                "-tidb-backup-manager-image=pingcap/tidb-backup-manager:v1.3.8",
                "-tidb-discovery-image=pingcap/tidb-operator:v1.3.8",
                "-cluster-scoped=true",
                "-cluster-permission-node=true",
                "-cluster-permission-pv=true",
                "-cluster-permission-sc=true",
                "-auto-failover=true",
                "-pd-failover-period=5m",
                "-tikv-failover-period=5m",
                "-tiflash-failover-period=5m",
                "-tidb-failover-period=5m",
                "-dm-master-failover-period=5m",
                "-dm-worker-failover-period=5m",
                "-v=2",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "TZ",
                  "value": "UTC",
                },
              ],
              "image": "pingcap/tidb-operator:v1.3.8",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 10,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 6060,
                },
              },
              "name": "tidb-operator",
              "resources": {
                "requests": {
                  "cpu": "80m",
                  "memory": "50Mi",
                },
              },
            },
          ],
          "serviceAccount": "tidb-controller-manager",
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"scheduler","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"tidb-operator","helm.sh/chart":"tidb-operator-v1.3.8"},"name":"tidb-scheduler","namespace":"tikv-admin"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"scheduler","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/name":"tidb-operator"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"scheduler","app.kubernetes.io/instance":"tidb-operator","app.kubernetes.io/name":"tidb-operator"}},"spec":{"containers":[{"command":["/usr/local/bin/tidb-scheduler","-v=2","-port=10262"],"image":"pingcap/tidb-operator:v1.3.8","imagePullPolicy":"IfNotPresent","name":"tidb-scheduler","resources":{"limits":{"cpu":"250m","memory":"150Mi"},"requests":{"cpu":"80m","memory":"50Mi"}}},{"command":["kube-scheduler","--v=2","--config=/etc/kubernetes/scheduler-config.yaml"],"image":"k8s.gcr.io/kube-scheduler:v1.23.6","imagePullPolicy":"IfNotPresent","name":"kube-scheduler","resources":{"limits":{"cpu":"250m","memory":"150Mi"},"requests":{"cpu":"80m","memory":"50Mi"}},"volumeMounts":[{"mountPath":"/etc/kubernetes","name":"scheduler-config"}]}],"serviceAccount":"tidb-scheduler","volumes":[{"configMap":{"name":"tidb-scheduler-config"},"name":"scheduler-config"}]}}}}
",
      },
      "name": "tidb-scheduler",
      "namespace": "tikv-admin",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator/1-manifest/apps_v1-deployment-tikv-admin-tidb-scheduler.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/tikv-operator",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "scheduler",
            "app.kubernetes.io/instance": "tidb-operator",
            "app.kubernetes.io/name": "tidb-operator",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "/usr/local/bin/tidb-scheduler",
                "-v=2",
                "-port=10262",
              ],
              "image": "pingcap/tidb-operator:v1.3.8",
              "imagePullPolicy": "IfNotPresent",
              "name": "tidb-scheduler",
              "resources": {
                "limits": {
                  "cpu": "250m",
                  "memory": "150Mi",
                },
                "requests": {
                  "cpu": "80m",
                  "memory": "50Mi",
                },
              },
            },
            {
              "command": [
                "kube-scheduler",
                "--v=2",
                "--config=/etc/kubernetes/scheduler-config.yaml",
              ],
              "image": "k8s.gcr.io/kube-scheduler:v1.23.6",
              "imagePullPolicy": "IfNotPresent",
              "name": "kube-scheduler",
              "resources": {
                "limits": {
                  "cpu": "250m",
                  "memory": "150Mi",
                },
                "requests": {
                  "cpu": "80m",
                  "memory": "50Mi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/etc/kubernetes",
                  "name": "scheduler-config",
                },
              ],
            },
          ],
          "serviceAccount": "tidb-scheduler",
          "volumes": [
            {
              "configMap": {
                "name": "tidb-scheduler-config",
              },
              "name": "scheduler-config",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"surrealdb","namespace":"applications"},"spec":{"replicas":2,"selector":{"matchLabels":{"app":"surrealdb"}},"template":{"metadata":{"labels":{"app":"surrealdb"}},"spec":{"containers":[{"args":["start","--log","debug","--user","test","--pass","test","tikv://tikv-pd.applications:2379"],"command":["/surreal"],"env":[{"name":"bG9jYWw=,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"bG9jYWw="},{"name":"MC4wLjAuMA==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"MC4wLjAuMA=="},{"name":"ODAwMA==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"ODAwMA=="},{"name":"aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"aHR0cDovL2xvY2FsaG9zdDo4MDgw"},{"name":"dGlrdi1wZC5hcHBsaWNhdGlvbnM=,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"dGlrdi1wZC5hcHBsaWNhdGlvbnM="},{"name":"dGlrdg==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"dGlrdg=="},{"name":"MjM3OQ==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"MjM3OQ=="},{"name":"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu"}],"image":"surrealdb/surrealdb:1.0.0-beta.8","livenessProbe":{"failureThreshold":7,"httpGet":{"path":"/api/liveness","port":8000},"initialDelaySeconds":300,"periodSeconds":10},"name":"surrealdb","ports":[{"containerPort":8000,"name":"http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/api/healthz","port":8000},"initialDelaySeconds":60,"periodSeconds":10},"resources":{"limits":{"cpu":"100m","memory":"200Mi"},"requests":{"cpu":"100m","memory":"70Mi"}},"volumeMounts":[]}],"imagePullSecrets":[{"name":"bXktcmVnaXN0cnkta2V5"}],"initContainers":[],"volumes":[]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/surrealdb/1-manifest/apps_v1-deployment-applications-surrealdb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/surrealdb",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app": "surrealdb",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "start",
                "--log",
                "debug",
                "--user",
                "test",
                "--pass",
                "test",
                "tikv://tikv-pd.applications:2379",
              ],
              "command": [
                "/surreal",
              ],
              "env": [
                {
                  "name": "bG9jYWw=,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "bG9jYWw=",
                },
                {
                  "name": "MC4wLjAuMA==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "MC4wLjAuMA==",
                },
                {
                  "name": "ODAwMA==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "ODAwMA==",
                },
                {
                  "name": "aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
                },
                {
                  "name": "dGlrdi1wZC5hcHBsaWNhdGlvbnM=,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "dGlrdi1wZC5hcHBsaWNhdGlvbnM=",
                },
                {
                  "name": "dGlrdg==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "dGlrdg==",
                },
                {
                  "name": "MjM3OQ==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "MjM3OQ==",
                },
                {
                  "name": "bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu",
                },
              ],
              "image": "surrealdb/surrealdb:1.0.0-beta.8",
              "livenessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/api/liveness",
                  "port": 8000,
                },
                "initialDelaySeconds": 300,
                "periodSeconds": 10,
              },
              "name": "surrealdb",
              "ports": [
                {
                  "containerPort": 8000,
                  "name": "http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/api/healthz",
                  "port": 8000,
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "200Mi",
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "70Mi",
                },
              },
              "volumeMounts": [],
            },
          ],
          "imagePullSecrets": [
            {
              "name": "bXktcmVnaXN0cnkta2V5",
            },
          ],
          "initContainers": [],
          "volumes": [],
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"graphql-surrealdb","namespace":"applications"},"spec":{"replicas":2,"selector":{"matchLabels":{"app":"graphql"}},"template":{"metadata":{"labels":{"app":"graphql"}},"spec":{"containers":[{"env":[{"name":"bG9jYWw=,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"bG9jYWw="},{"name":"MC4wLjAuMA==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"MC4wLjAuMA=="},{"name":"ODAwMA==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"ODAwMA=="},{"name":"aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"aHR0cDovL2xvY2FsaG9zdDo4MDgw"},{"name":"dGVzdA==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"dGVzdA=="},{"name":"c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"c3VycmVhbGRiLmFwcGxpY2F0aW9ucw=="},{"name":"c3VycmVhbGRi,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"c3VycmVhbGRi"},{"name":"cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw=="},{"name":"NjM3OQ==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"NjM3OQ=="},{"name":"cmVkaXM=,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"cmVkaXM="},{"name":"cmVkaXMtbWFzdGVy,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"cmVkaXMtbWFzdGVy"}],"image":"ghcr.io/oyelowo/graphql-surrealdb:latest","livenessProbe":{"failureThreshold":7,"httpGet":{"path":"/api/liveness","port":8000},"initialDelaySeconds":300,"periodSeconds":10},"name":"graphql","ports":[{"containerPort":8000,"name":"http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/api/healthz","port":8000},"initialDelaySeconds":60,"periodSeconds":10},"resources":{"limits":{"cpu":"100m","memory":"200Mi"},"requests":{"cpu":"100m","memory":"70Mi"}},"volumeMounts":[]}],"imagePullSecrets":[{"name":"bXktcmVnaXN0cnkta2V5"}],"initContainers":[],"volumes":[]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "graphql-surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/apps_v1-deployment-applications-graphql-surrealdb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app": "graphql",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "bG9jYWw=,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "bG9jYWw=",
                },
                {
                  "name": "MC4wLjAuMA==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "MC4wLjAuMA==",
                },
                {
                  "name": "ODAwMA==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "ODAwMA==",
                },
                {
                  "name": "aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
                },
                {
                  "name": "dGVzdA==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "dGVzdA==",
                },
                {
                  "name": "c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==",
                },
                {
                  "name": "c3VycmVhbGRi,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "c3VycmVhbGRi",
                },
                {
                  "name": "cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==",
                },
                {
                  "name": "NjM3OQ==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "NjM3OQ==",
                },
                {
                  "name": "cmVkaXM=,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "cmVkaXM=",
                },
                {
                  "name": "cmVkaXMtbWFzdGVy,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "cmVkaXMtbWFzdGVy",
                },
              ],
              "image": "ghcr.io/oyelowo/graphql-surrealdb:latest",
              "livenessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/api/liveness",
                  "port": 8000,
                },
                "initialDelaySeconds": 300,
                "periodSeconds": 10,
              },
              "name": "graphql",
              "ports": [
                {
                  "containerPort": 8000,
                  "name": "http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/api/healthz",
                  "port": 8000,
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "200Mi",
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "70Mi",
                },
              },
              "volumeMounts": [],
            },
          ],
          "imagePullSecrets": [
            {
              "name": "bXktcmVnaXN0cnkta2V5",
            },
          ],
          "initContainers": [],
          "volumes": [],
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"react-web","namespace":"applications"},"spec":{"replicas":2,"selector":{"matchLabels":{"app":"react"}},"template":{"metadata":{"labels":{"app":"react"}},"spec":{"containers":[{"env":[{"name":"bG9jYWw=,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"bG9jYWw="},{"name":"MC4wLjAuMA==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"MC4wLjAuMA=="},{"name":"MzAwMA==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"MzAwMA=="},{"name":"aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"aHR0cDovL2xvY2FsaG9zdDo4MDgw"}],"image":"ghcr.io/oyelowo/react-web:latest","name":"react","ports":[{"containerPort":3000,"name":"http"}],"resources":{"limits":{"cpu":"700m","memory":"2Gi"},"requests":{"cpu":"500m","memory":"1.3Gi"}},"volumeMounts":[]}],"imagePullSecrets":[{"name":"bXktcmVnaXN0cnkta2V5"}],"initContainers":[],"volumes":[]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web/1-manifest/apps_v1-deployment-applications-react-web.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app": "react",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "bG9jYWw=,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "bG9jYWw=",
                },
                {
                  "name": "MC4wLjAuMA==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "MC4wLjAuMA==",
                },
                {
                  "name": "MzAwMA==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "MzAwMA==",
                },
                {
                  "name": "aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
                },
              ],
              "image": "ghcr.io/oyelowo/react-web:latest",
              "name": "react",
              "ports": [
                {
                  "containerPort": 3000,
                  "name": "http",
                },
              ],
              "resources": {
                "limits": {
                  "cpu": "700m",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "500m",
                  "memory": "1.3Gi",
                },
              },
              "volumeMounts": [],
            },
          ],
          "imagePullSecrets": [
            {
              "name": "bXktcmVnaXN0cnkta2V5",
            },
          ],
          "initContainers": [],
          "volumes": [],
        },
      },
    },
  },
]
`;

exports[`KubeObject Can sync resources 3`] = `
[
  {
    "apiVersion": "v1",
    "data": {
      "master.conf": "dir /data
# User-supplied master configuration:
rename-command FLUSHDB ""
rename-command FLUSHALL ""
# End of master configuration",
      "redis.conf": "# User-supplied common configuration:
# Enable AOF https://redis.io/topics/persistence#append-only-file
appendonly yes
# Disable RDB persistence, AOF persistence already enabled.
save ""
# End of common configuration",
      "replica.conf": "dir /data
# User-supplied replica configuration:
rename-command FLUSHDB ""
rename-command FLUSHALL ""
# End of replica configuration",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"master.conf":"dir /data\\n# User-supplied master configuration:\\nrename-command FLUSHDB \\"\\"\\nrename-command FLUSHALL \\"\\"\\n# End of master configuration","redis.conf":"# User-supplied common configuration:\\n# Enable AOF https://redis.io/topics/persistence#append-only-file\\nappendonly yes\\n# Disable RDB persistence, AOF persistence already enabled.\\nsave \\"\\"\\n# End of common configuration","replica.conf":"dir /data\\n# User-supplied replica configuration:\\nrename-command FLUSHDB \\"\\"\\nrename-command FLUSHALL \\"\\"\\n# End of replica configuration"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis-configuration","namespace":"applications"}}
",
      },
      "name": "redis-configuration",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-configmap-applications-redis-configuration.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis-master","namespace":"applications"},"spec":{"internalTrafficPolicy":"Cluster","ports":[{"name":"tcp-redis","port":6379,"targetPort":"redis"}],"selector":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"redis","app.kubernetes.io/name":"redis"},"sessionAffinity":"None","type":"ClusterIP"}}
",
      },
      "name": "redis-master",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-service-applications-redis-master.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "data": {
      "APP_ENVIRONMENT": "bG9jYWw=",
      "APP_EXTERNAL_BASE_URL": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
      "APP_HOST": "MC4wLjAuMA==",
      "APP_PORT": "ODAwMA==",
      "OAUTH_GITHUB_CLIENT_ID": "dGVzdA==",
      "OAUTH_GITHUB_CLIENT_SECRET": "dGVzdA==",
      "OAUTH_GOOGLE_CLIENT_ID": "dGVzdA==",
      "OAUTH_GOOGLE_CLIENT_SECRET": "dGVzdA==",
      "REDIS_HOST": "cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==",
      "REDIS_PASSWORD": "dGVzdA==",
      "REDIS_PORT": "NjM3OQ==",
      "REDIS_SERVICE_NAME": "cmVkaXM=",
      "REDIS_SERVICE_NAME_MASTER": "cmVkaXMtbWFzdGVy",
      "REDIS_USERNAME": "dGVzdA==",
      "SURREALDB_HOST": "c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==",
      "SURREALDB_NAME": "c3VycmVhbGRi",
      "SURREALDB_PORT": "ODAwMA==",
      "SURREALDB_ROOT_PASSWORD": "dGVzdA==",
      "SURREALDB_ROOT_USERNAME": "dGVzdA==",
      "SURREALDB_SERVICE_NAME": "c3VycmVhbGRi",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"APP_ENVIRONMENT":"bG9jYWw=","APP_EXTERNAL_BASE_URL":"aHR0cDovL2xvY2FsaG9zdDo4MDgw","APP_HOST":"MC4wLjAuMA==","APP_PORT":"ODAwMA==","OAUTH_GITHUB_CLIENT_ID":"dGVzdA==","OAUTH_GITHUB_CLIENT_SECRET":"dGVzdA==","OAUTH_GOOGLE_CLIENT_ID":"dGVzdA==","OAUTH_GOOGLE_CLIENT_SECRET":"dGVzdA==","REDIS_HOST":"cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==","REDIS_PASSWORD":"dGVzdA==","REDIS_PORT":"NjM3OQ==","REDIS_SERVICE_NAME":"cmVkaXM=","REDIS_SERVICE_NAME_MASTER":"cmVkaXMtbWFzdGVy","REDIS_USERNAME":"dGVzdA==","SURREALDB_HOST":"c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==","SURREALDB_NAME":"c3VycmVhbGRi","SURREALDB_PORT":"ODAwMA==","SURREALDB_ROOT_PASSWORD":"dGVzdA==","SURREALDB_ROOT_USERNAME":"dGVzdA==","SURREALDB_SERVICE_NAME":"c3VycmVhbGRi"},"kind":"Secret","metadata":{"annotations":{"sealedsecrets.bitnami.com/managed":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"graphql-surrealdb","namespace":"applications"}}
",
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-secret-applications-graphql-surrealdb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "pingcap.com/v1alpha1",
    "kind": "TidbCluster",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"pingcap.com/v1alpha1","kind":"TidbCluster","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"tikv","namespace":"applications"},"spec":{"configUpdateStrategy":"RollingUpdate","enableDynamicConfiguration":true,"imagePullPolicy":"IfNotPresent","pd":{"baseImage":"pingcap/pd","config":"\\n                [dashboard]\\n                    internal-proxy = true\\n              ","maxFailoverCount":0,"replicas":3,"requests":{"storage":"10Gi"},"service":{"port":2379},"storageClassName":"local-storage"},"pvReclaimPolicy":"Retain","statefulSetUpdateStrategy":"RollingUpdate","tikv":{"baseImage":"pingcap/tikv","config":{},"maxFailoverCount":0,"replicas":3,"requests":{"storage":"100Gi"},"storageClassName":"local-storage"},"timezone":"UTC"}}
",
      },
      "name": "tikv",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/pingcap.com_v1alpha1-tidbcluster-applications-tikv.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/component":"search-engine","app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"meilisearch","app.kubernetes.io/part-of":"meilisearch","app.kubernetes.io/version":"v0.29.0","helm.sh/chart":"meilisearch-0.1.41"},"name":"meilisearch","namespace":"applications"}}
",
      },
      "name": "meilisearch",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-serviceaccount-applications-meilisearch.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "v1",
    "data": {
      "redis-password": "dGVzdA==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"redis-password":"dGVzdA=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis","namespace":"applications"},"type":"Opaque"}
",
      },
      "name": "redis",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-secret-applications-redis.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "type": "Opaque",
  },
  {
    "apiVersion": "v1",
    "data": {
      "ping_liveness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "\${REDIS_PASSWORD_FILE}")"
[[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
response=$(
  timeout -s 3 $1 \\
  redis-cli \\
    -h localhost \\
    -p $REDIS_PORT \\
    ping
)
if [ "$?" -eq "124" ]; then
  echo "Timed out"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
  echo "$response"
  exit 1
fi",
      "ping_liveness_local_and_master.sh": "script_dir="$(dirname "$0")"
exit_status=0
"$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
"$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
exit $exit_status",
      "ping_liveness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "\${REDIS_MASTER_PASSWORD_FILE}")"
[[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
response=$(
  timeout -s 3 $1 \\
  redis-cli \\
    -h $REDIS_MASTER_HOST \\
    -p $REDIS_MASTER_PORT_NUMBER \\
    ping
)
if [ "$?" -eq "124" ]; then
  echo "Timed out"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
  echo "$response"
  exit 1
fi",
      "ping_readiness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "\${REDIS_PASSWORD_FILE}")"
[[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
response=$(
  timeout -s 3 $1 \\
  redis-cli \\
    -h localhost \\
    -p $REDIS_PORT \\
    ping
)
if [ "$?" -eq "124" ]; then
  echo "Timed out"
  exit 1
fi
if [ "$response" != "PONG" ]; then
  echo "$response"
  exit 1
fi",
      "ping_readiness_local_and_master.sh": "script_dir="$(dirname "$0")"
exit_status=0
"$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
"$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
exit $exit_status",
      "ping_readiness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "\${REDIS_MASTER_PASSWORD_FILE}")"
[[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
response=$(
  timeout -s 3 $1 \\
  redis-cli \\
    -h $REDIS_MASTER_HOST \\
    -p $REDIS_MASTER_PORT_NUMBER \\
    ping
)
if [ "$?" -eq "124" ]; then
  echo "Timed out"
  exit 1
fi
if [ "$response" != "PONG" ]; then
  echo "$response"
  exit 1
fi",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"ping_liveness_local.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_PASSWORD=\\"$(\\u003c \\"\${REDIS_PASSWORD_FILE}\\")\\"\\n[[ -n \\"$REDIS_PASSWORD\\" ]] \\u0026\\u0026 export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"\\nresponse=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -h localhost \\\\\\n    -p $REDIS_PORT \\\\\\n    ping\\n)\\nif [ \\"$?\\" -eq \\"124\\" ]; then\\n  echo \\"Timed out\\"\\n  exit 1\\nfi\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\nif [ \\"$response\\" != \\"PONG\\" ] \\u0026\\u0026 [ \\"$responseFirstWord\\" != \\"LOADING\\" ] \\u0026\\u0026 [ \\"$responseFirstWord\\" != \\"MASTERDOWN\\" ]; then\\n  echo \\"$response\\"\\n  exit 1\\nfi","ping_liveness_local_and_master.sh":"script_dir=\\"$(dirname \\"$0\\")\\"\\nexit_status=0\\n\\"$script_dir/ping_liveness_local.sh\\" $1 || exit_status=$?\\n\\"$script_dir/ping_liveness_master.sh\\" $1 || exit_status=$?\\nexit $exit_status","ping_liveness_master.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_MASTER_PASSWORD=\\"$(\\u003c \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"\\n[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] \\u0026\\u0026 export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"\\nresponse=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -h $REDIS_MASTER_HOST \\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\n    ping\\n)\\nif [ \\"$?\\" -eq \\"124\\" ]; then\\n  echo \\"Timed out\\"\\n  exit 1\\nfi\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\nif [ \\"$response\\" != \\"PONG\\" ] \\u0026\\u0026 [ \\"$responseFirstWord\\" != \\"LOADING\\" ]; then\\n  echo \\"$response\\"\\n  exit 1\\nfi","ping_readiness_local.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_PASSWORD=\\"$(\\u003c \\"\${REDIS_PASSWORD_FILE}\\")\\"\\n[[ -n \\"$REDIS_PASSWORD\\" ]] \\u0026\\u0026 export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"\\nresponse=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -h localhost \\\\\\n    -p $REDIS_PORT \\\\\\n    ping\\n)\\nif [ \\"$?\\" -eq \\"124\\" ]; then\\n  echo \\"Timed out\\"\\n  exit 1\\nfi\\nif [ \\"$response\\" != \\"PONG\\" ]; then\\n  echo \\"$response\\"\\n  exit 1\\nfi","ping_readiness_local_and_master.sh":"script_dir=\\"$(dirname \\"$0\\")\\"\\nexit_status=0\\n\\"$script_dir/ping_readiness_local.sh\\" $1 || exit_status=$?\\n\\"$script_dir/ping_readiness_master.sh\\" $1 || exit_status=$?\\nexit $exit_status","ping_readiness_master.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_MASTER_PASSWORD=\\"$(\\u003c \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"\\n[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] \\u0026\\u0026 export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"\\nresponse=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -h $REDIS_MASTER_HOST \\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\n    ping\\n)\\nif [ \\"$?\\" -eq \\"124\\" ]; then\\n  echo \\"Timed out\\"\\n  exit 1\\nfi\\nif [ \\"$response\\" != \\"PONG\\" ]; then\\n  echo \\"$response\\"\\n  exit 1\\nfi"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis-health","namespace":"applications"}}
",
      },
      "name": "redis-health",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-configmap-applications-redis-health.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","automountServiceAccountToken":true,"kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis","namespace":"applications"}}
",
      },
      "name": "redis",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-serviceaccount-applications-redis.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"graphql-surrealdb\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"replicas\\":2,\\"selector\\":{\\"matchLabels\\":{\\"app\\":\\"graphql\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app\\":\\"graphql\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"bG9jYWw=,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"bG9jYWw=\\"},{\\"name\\":\\"MC4wLjAuMA==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"MC4wLjAuMA==\\"},{\\"name\\":\\"ODAwMA==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"ODAwMA==\\"},{\\"name\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\"},{\\"name\\":\\"dGVzdA==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"dGVzdA==\\"},{\\"name\\":\\"c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==\\"},{\\"name\\":\\"c3VycmVhbGRi,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"c3VycmVhbGRi\\"},{\\"name\\":\\"cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==\\"},{\\"name\\":\\"NjM3OQ==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"NjM3OQ==\\"},{\\"name\\":\\"cmVkaXM=,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"cmVkaXM=\\"},{\\"name\\":\\"cmVkaXMtbWFzdGVy,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"cmVkaXMtbWFzdGVy\\"}],\\"image\\":\\"ghcr.io/oyelowo/graphql-surrealdb:latest\\",\\"livenessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/api/liveness\\",\\"port\\":8000},\\"initialDelaySeconds\\":300,\\"periodSeconds\\":10},\\"name\\":\\"graphql\\",\\"ports\\":[{\\"containerPort\\":8000,\\"name\\":\\"http\\"}],\\"readinessProbe\\":{\\"failureThreshold\\":7,\\"httpGet\\":{\\"path\\":\\"/api/healthz\\",\\"port\\":8000},\\"initialDelaySeconds\\":60,\\"periodSeconds\\":10},\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"200Mi\\"},\\"requests\\":{\\"cpu\\":\\"100m\\",\\"memory\\":\\"70Mi\\"}},\\"volumeMounts\\":[]}],\\"imagePullSecrets\\":[{\\"name\\":\\"bXktcmVnaXN0cnkta2V5\\"}],\\"initContainers\\":[],\\"volumes\\":[]}}}}\\n","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"graphql-surrealdb","namespace":"applications"},"spec":{"ports":[{"name":"graphql-surrealdb-http","port":8000,"protocol":"TCP","targetPort":8000}],"selector":{"app":"graphql"},"type":"ClusterIP"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "graphql-surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-service-applications-graphql-surrealdb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "data": {
      "MEILI_ENV": "production",
      "MEILI_NO_ANALYTICS": "false",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"MEILI_ENV":"production","MEILI_NO_ANALYTICS":"false"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/component":"search-engine","app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"meilisearch","app.kubernetes.io/part-of":"meilisearch","app.kubernetes.io/version":"v0.29.0","helm.sh/chart":"meilisearch-0.1.41"},"name":"meilisearch-environment","namespace":"applications"}}
",
      },
      "name": "meilisearch-environment",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-configmap-applications-meilisearch-environment.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis-headless","namespace":"applications"},"spec":{"clusterIP":"None","ports":[{"name":"tcp-redis","port":6379,"targetPort":"redis"}],"selector":{"app.kubernetes.io/instance":"redis","app.kubernetes.io/name":"redis"},"type":"ClusterIP"}}
",
      },
      "name": "redis-headless",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-service-applications-redis-headless.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {},
  },
  {
    "apiVersion": "fluvio.infinyon.com/v2",
    "kind": "Topic",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"fluvio.infinyon.com/v2","kind":"Topic","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"test-user-location","namespace":"applications"},"spec":{"replicas":1,"storage":{"maxPartitionSize":3,"segmentSize":3}}}
",
      },
      "name": "test-user-location",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/fluvio.infinyon.com_v2-topic-applications-test-user-location.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "data": {
      "start-master.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "\${REDIS_PASSWORD_FILE}")"
if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
fi
if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
fi
ARGS=("--port" "\${REDIS_PORT}")
ARGS+=("--requirepass" "\${REDIS_PASSWORD}")
ARGS+=("--masterauth" "\${REDIS_PASSWORD}")
ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
exec redis-server "\${ARGS[@]}"
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"start-master.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_PASSWORD=\\"$(\\u003c \\"\${REDIS_PASSWORD_FILE}\\")\\"\\nif [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then\\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\\nfi\\nif [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then\\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\\nfi\\nARGS=(\\"--port\\" \\"\${REDIS_PORT}\\")\\nARGS+=(\\"--requirepass\\" \\"\${REDIS_PASSWORD}\\")\\nARGS+=(\\"--masterauth\\" \\"\${REDIS_PASSWORD}\\")\\nARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/redis.conf\\")\\nARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/master.conf\\")\\nexec redis-server \\"\${ARGS[@]}\\"\\n"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis-scripts","namespace":"applications"}}
",
      },
      "name": "redis-scripts",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-configmap-applications-redis-scripts.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "v1",
    "data": {
      "config": "very important data",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"config":"very important data"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"graphql-surrealdb","namespace":"applications"}}
",
      },
      "name": "graphql-surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-configmap-applications-graphql-surrealdb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"labels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis-master","namespace":"applications"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"redis","app.kubernetes.io/name":"redis"}},"serviceName":"redis-headless","template":{"metadata":{"annotations":{"checksum/configmap":"5dd91ba2f175cd9bfe2971246d29a0a65dcd62ec1e902f07f96d34f960a5c9c2","checksum/health":"8b745653a690c632a2ed175fe32334b6905b9a155265b7d2edfbee8126b8d72d","checksum/scripts":"299c5dc048d0c122899ae0d80671fb6b5e356f1e80084f8ef892bca3f8040abd","checksum/secret":"a6888612bdf911ea0c9947703091c1c8fe4f7729d8ba0e14445cc5bc028d957e"},"labels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"redis","app.kubernetes.io/name":"redis"}},"namespaces":["applications"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["-c","/opt/bitnami/scripts/start-scripts/start-master.sh"],"command":["/bin/bash"],"env":[{"name":"BITNAMI_DEBUG","value":"false"},{"name":"REDIS_REPLICATION_MODE","value":"master"},{"name":"ALLOW_EMPTY_PASSWORD","value":"no"},{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"redis"}}},{"name":"REDIS_TLS_ENABLED","value":"no"},{"name":"REDIS_PORT","value":"6379"}],"image":"docker.io/bitnami/redis:7.0.5-debian-11-r3","imagePullPolicy":"IfNotPresent","livenessProbe":{"exec":{"command":["sh","-c","/health/ping_liveness_local.sh 5"]},"failureThreshold":5,"initialDelaySeconds":20,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":6},"name":"redis","ports":[{"containerPort":6379,"name":"redis"}],"readinessProbe":{"exec":{"command":["sh","-c","/health/ping_readiness_local.sh 1"]},"failureThreshold":5,"initialDelaySeconds":20,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":2},"resources":{"limits":{},"requests":{}},"securityContext":{"runAsUser":1001},"volumeMounts":[{"mountPath":"/opt/bitnami/scripts/start-scripts","name":"start-scripts"},{"mountPath":"/health","name":"health"},{"mountPath":"/data","name":"redis-data"},{"mountPath":"/opt/bitnami/redis/mounted-etc","name":"config"},{"mountPath":"/opt/bitnami/redis/etc/","name":"redis-tmp-conf"},{"mountPath":"/tmp","name":"tmp"}]}],"securityContext":{"fsGroup":1001},"serviceAccountName":"redis","terminationGracePeriodSeconds":30,"volumes":[{"configMap":{"defaultMode":493,"name":"redis-scripts"},"name":"start-scripts"},{"configMap":{"defaultMode":493,"name":"redis-health"},"name":"health"},{"configMap":{"name":"redis-configuration"},"name":"config"},{"emptyDir":{},"name":"redis-tmp-conf"},{"emptyDir":{},"name":"tmp"}]}},"updateStrategy":{"rollingUpdate":{},"type":"RollingUpdate"},"volumeClaimTemplates":[{"metadata":{"labels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"redis","app.kubernetes.io/name":"redis"},"name":"redis-data"},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"8Gi"}},"storageClassName":"local-storage"}}]}}
",
      },
      "name": "redis-master",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/apps_v1-statefulset-applications-redis-master.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "checksum/configmap": "5dd91ba2f175cd9bfe2971246d29a0a65dcd62ec1e902f07f96d34f960a5c9c2",
            "checksum/health": "8b745653a690c632a2ed175fe32334b6905b9a155265b7d2edfbee8126b8d72d",
            "checksum/scripts": "299c5dc048d0c122899ae0d80671fb6b5e356f1e80084f8ef892bca3f8040abd",
            "checksum/secret": "a6888612bdf911ea0c9947703091c1c8fe4f7729d8ba0e14445cc5bc028d957e",
          },
          "labels": {
            "app.kubernetes.io/component": "master",
            "app.kubernetes.io/instance": "redis",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "redis",
            "helm.sh/chart": "redis-17.3.2",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "master",
                        "app.kubernetes.io/instance": "redis",
                        "app.kubernetes.io/name": "redis",
                      },
                    },
                    "namespaces": [
                      "applications",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-master.sh",
              ],
              "command": [
                "/bin/bash",
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                {
                  "name": "REDIS_REPLICATION_MODE",
                  "value": "master",
                },
                {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no",
                },
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "redis",
                    },
                  },
                },
                {
                  "name": "REDIS_TLS_ENABLED",
                  "value": "no",
                },
                {
                  "name": "REDIS_PORT",
                  "value": "6379",
                },
              ],
              "image": "docker.io/bitnami/redis:7.0.5-debian-11-r3",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_liveness_local.sh 5",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 6,
              },
              "name": "redis",
              "ports": [
                {
                  "containerPort": 6379,
                  "name": "redis",
                },
              ],
              "readinessProbe": {
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_readiness_local.sh 1",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "runAsUser": 1001,
              },
              "volumeMounts": [
                {
                  "mountPath": "/opt/bitnami/scripts/start-scripts",
                  "name": "start-scripts",
                },
                {
                  "mountPath": "/health",
                  "name": "health",
                },
                {
                  "mountPath": "/data",
                  "name": "redis-data",
                },
                {
                  "mountPath": "/opt/bitnami/redis/mounted-etc",
                  "name": "config",
                },
                {
                  "mountPath": "/opt/bitnami/redis/etc/",
                  "name": "redis-tmp-conf",
                },
                {
                  "mountPath": "/tmp",
                  "name": "tmp",
                },
              ],
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "redis",
          "terminationGracePeriodSeconds": 30,
          "volumes": [
            {
              "configMap": {
                "defaultMode": 493,
                "name": "redis-scripts",
              },
              "name": "start-scripts",
            },
            {
              "configMap": {
                "defaultMode": 493,
                "name": "redis-health",
              },
              "name": "health",
            },
            {
              "configMap": {
                "name": "redis-configuration",
              },
              "name": "config",
            },
            {
              "emptyDir": {},
              "name": "redis-tmp-conf",
            },
            {
              "emptyDir": {},
              "name": "tmp",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "MEILI_MASTER_KEY": "UG5vbU1DU3RkaGxuN1lIWDRidFM=",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"MEILI_MASTER_KEY":"UG5vbU1DU3RkaGxuN1lIWDRidFM="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/component":"search-engine","app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"meilisearch","app.kubernetes.io/part-of":"meilisearch","app.kubernetes.io/version":"v0.29.0","helm.sh/chart":"meilisearch-0.1.41"},"name":"meilisearch-master-key","namespace":"applications"}}
",
      },
      "name": "meilisearch-master-key",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-secret-applications-meilisearch-master-key.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/component":"search-engine","app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"meilisearch","app.kubernetes.io/part-of":"meilisearch","app.kubernetes.io/version":"v0.29.0","helm.sh/chart":"meilisearch-0.1.41"},"name":"meilisearch","namespace":"applications"},"spec":{"ports":[{"name":"http","port":7700,"protocol":"TCP","targetPort":"http"}],"selector":{"app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/name":"meilisearch"},"type":"ClusterIP"}}
",
      },
      "name": "meilisearch",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-service-applications-meilisearch.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {},
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"labels":{"app.kubernetes.io/component":"search-engine","app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"meilisearch","app.kubernetes.io/part-of":"meilisearch","app.kubernetes.io/version":"v0.29.0","helm.sh/chart":"meilisearch-0.1.41"},"name":"meilisearch","namespace":"applications"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/name":"meilisearch"}},"serviceName":"meilisearch","template":{"metadata":{"labels":{"app.kubernetes.io/component":"search-engine","app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"meilisearch","app.kubernetes.io/part-of":"meilisearch","app.kubernetes.io/version":"v0.29.0","helm.sh/chart":"meilisearch-0.1.41"}},"spec":{"containers":[{"envFrom":[{"configMapRef":{"name":"meilisearch-environment"}},{"secretRef":{"name":"meilisearch-master-key"}}],"image":"getmeili/meilisearch:v0.29.0","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/health","port":"http"},"initialDelaySeconds":60,"periodSeconds":60},"name":"meilisearch","ports":[{"containerPort":7700,"name":"http","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/health","port":"http"},"initialDelaySeconds":60,"periodSeconds":60},"resources":{}}],"serviceAccountName":"meilisearch"}}}}
",
      },
      "name": "meilisearch",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/apps_v1-statefulset-applications-meilisearch.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "search-engine",
            "app.kubernetes.io/instance": "meilisearch",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "meilisearch",
            "app.kubernetes.io/part-of": "meilisearch",
            "app.kubernetes.io/version": "v0.29.0",
            "helm.sh/chart": "meilisearch-0.1.41",
          },
        },
        "spec": {
          "containers": [
            {
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "meilisearch-environment",
                  },
                },
                {
                  "secretRef": {
                    "name": "meilisearch-master-key",
                  },
                },
              ],
              "image": "getmeili/meilisearch:v0.29.0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/health",
                  "port": "http",
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 60,
              },
              "name": "meilisearch",
              "ports": [
                {
                  "containerPort": 7700,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/health",
                  "port": "http",
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 60,
              },
              "resources": {},
            },
          ],
          "serviceAccountName": "meilisearch",
        },
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"graphql-surrealdb","namespace":"applications"},"spec":{"replicas":2,"selector":{"matchLabels":{"app":"graphql"}},"template":{"metadata":{"labels":{"app":"graphql"}},"spec":{"containers":[{"env":[{"name":"bG9jYWw=,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"bG9jYWw="},{"name":"MC4wLjAuMA==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"MC4wLjAuMA=="},{"name":"ODAwMA==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"ODAwMA=="},{"name":"aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"aHR0cDovL2xvY2FsaG9zdDo4MDgw"},{"name":"dGVzdA==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"dGVzdA=="},{"name":"c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"c3VycmVhbGRiLmFwcGxpY2F0aW9ucw=="},{"name":"c3VycmVhbGRi,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"c3VycmVhbGRi"},{"name":"cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw=="},{"name":"NjM3OQ==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"NjM3OQ=="},{"name":"cmVkaXM=,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"cmVkaXM="},{"name":"cmVkaXMtbWFzdGVy,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"cmVkaXMtbWFzdGVy"}],"image":"ghcr.io/oyelowo/graphql-surrealdb:latest","livenessProbe":{"failureThreshold":7,"httpGet":{"path":"/api/liveness","port":8000},"initialDelaySeconds":300,"periodSeconds":10},"name":"graphql","ports":[{"containerPort":8000,"name":"http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/api/healthz","port":8000},"initialDelaySeconds":60,"periodSeconds":10},"resources":{"limits":{"cpu":"100m","memory":"200Mi"},"requests":{"cpu":"100m","memory":"70Mi"}},"volumeMounts":[]}],"imagePullSecrets":[{"name":"bXktcmVnaXN0cnkta2V5"}],"initContainers":[],"volumes":[]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "graphql-surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/apps_v1-deployment-applications-graphql-surrealdb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app": "graphql",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "bG9jYWw=,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "bG9jYWw=",
                },
                {
                  "name": "MC4wLjAuMA==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "MC4wLjAuMA==",
                },
                {
                  "name": "ODAwMA==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "ODAwMA==",
                },
                {
                  "name": "aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
                },
                {
                  "name": "dGVzdA==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "dGVzdA==",
                },
                {
                  "name": "c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==",
                },
                {
                  "name": "c3VycmVhbGRi,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "c3VycmVhbGRi",
                },
                {
                  "name": "cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==",
                },
                {
                  "name": "NjM3OQ==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "NjM3OQ==",
                },
                {
                  "name": "cmVkaXM=,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "cmVkaXM=",
                },
                {
                  "name": "cmVkaXMtbWFzdGVy,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "cmVkaXMtbWFzdGVy",
                },
              ],
              "image": "ghcr.io/oyelowo/graphql-surrealdb:latest",
              "livenessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/api/liveness",
                  "port": 8000,
                },
                "initialDelaySeconds": 300,
                "periodSeconds": 10,
              },
              "name": "graphql",
              "ports": [
                {
                  "containerPort": 8000,
                  "name": "http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/api/healthz",
                  "port": 8000,
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "200Mi",
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "70Mi",
                },
              },
              "volumeMounts": [],
            },
          ],
          "imagePullSecrets": [
            {
              "name": "bXktcmVnaXN0cnkta2V5",
            },
          ],
          "initContainers": [],
          "volumes": [],
        },
      },
    },
  },
]
`;

exports[`KubeObject Can sync resources 4`] = `
[
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"{\\"apiVersion\\":\\"apps/v1\\",\\"kind\\":\\"Deployment\\",\\"metadata\\":{\\"annotations\\":{\\"linkerd.io/inject\\":\\"enabled\\"},\\"labels\\":{\\"app.kubernetes.io/managed-by\\":\\"pulumi\\"},\\"name\\":\\"react-web\\",\\"namespace\\":\\"applications\\"},\\"spec\\":{\\"replicas\\":2,\\"selector\\":{\\"matchLabels\\":{\\"app\\":\\"react\\"}},\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"app\\":\\"react\\"}},\\"spec\\":{\\"containers\\":[{\\"env\\":[{\\"name\\":\\"bG9jYWw=,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"bG9jYWw=\\"},{\\"name\\":\\"MC4wLjAuMA==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"MC4wLjAuMA==\\"},{\\"name\\":\\"MzAwMA==,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"MzAwMA==\\"},{\\"name\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output\\\\u003cT\\\\u003e] is not supported.\\\\n\\\\nTo get the value of an Output\\\\u003cT\\\\u003e as an Output\\\\u003cstring\\\\u003e consider either:\\\\n1: o.apply(v =\\\\u003e \`prefix\${v}suffix\`)\\\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\\\n\\\\nSee https://pulumi.io/help/outputs for more details.\\\\nThis function may throw in a future version of @pulumi/pulumi.\\",\\"value\\":\\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\\"}],\\"image\\":\\"ghcr.io/oyelowo/react-web:latest\\",\\"name\\":\\"react\\",\\"ports\\":[{\\"containerPort\\":3000,\\"name\\":\\"http\\"}],\\"resources\\":{\\"limits\\":{\\"cpu\\":\\"700m\\",\\"memory\\":\\"2Gi\\"},\\"requests\\":{\\"cpu\\":\\"500m\\",\\"memory\\":\\"1.3Gi\\"}},\\"volumeMounts\\":[]}],\\"imagePullSecrets\\":[{\\"name\\":\\"bXktcmVnaXN0cnkta2V5\\"}],\\"initContainers\\":[],\\"volumes\\":[]}}}}\\n","linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"react-web","namespace":"applications"},"spec":{"ports":[{"name":"react-web-http","port":3000,"protocol":"TCP","targetPort":3000}],"selector":{"app":"react"},"type":"ClusterIP"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web/1-manifest/v1-service-applications-react-web.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "data": {
      "APP_ENVIRONMENT": "bG9jYWw=",
      "APP_EXTERNAL_BASE_URL": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
      "APP_HOST": "MC4wLjAuMA==",
      "APP_PORT": "MzAwMA==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"APP_ENVIRONMENT":"bG9jYWw=","APP_EXTERNAL_BASE_URL":"aHR0cDovL2xvY2FsaG9zdDo4MDgw","APP_HOST":"MC4wLjAuMA==","APP_PORT":"MzAwMA=="},"kind":"Secret","metadata":{"annotations":{"sealedsecrets.bitnami.com/managed":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"react-web","namespace":"applications"}}
",
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web/1-manifest/v1-secret-applications-react-web.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"react-web","namespace":"applications"},"spec":{"replicas":2,"selector":{"matchLabels":{"app":"react"}},"template":{"metadata":{"labels":{"app":"react"}},"spec":{"containers":[{"env":[{"name":"bG9jYWw=,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"bG9jYWw="},{"name":"MC4wLjAuMA==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"MC4wLjAuMA=="},{"name":"MzAwMA==,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"MzAwMA=="},{"name":"aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output\\u003cT\\u003e] is not supported.\\n\\nTo get the value of an Output\\u003cT\\u003e as an Output\\u003cstring\\u003e consider either:\\n1: o.apply(v =\\u003e \`prefix\${v}suffix\`)\\n2: pulumi.interpolate \`prefix\${v}suffix\`\\n\\nSee https://pulumi.io/help/outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.","value":"aHR0cDovL2xvY2FsaG9zdDo4MDgw"}],"image":"ghcr.io/oyelowo/react-web:latest","name":"react","ports":[{"containerPort":3000,"name":"http"}],"resources":{"limits":{"cpu":"700m","memory":"2Gi"},"requests":{"cpu":"500m","memory":"1.3Gi"}},"volumeMounts":[]}],"imagePullSecrets":[{"name":"bXktcmVnaXN0cnkta2V5"}],"initContainers":[],"volumes":[]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web/1-manifest/apps_v1-deployment-applications-react-web.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app": "react",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "bG9jYWw=,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "bG9jYWw=",
                },
                {
                  "name": "MC4wLjAuMA==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "MC4wLjAuMA==",
                },
                {
                  "name": "MzAwMA==,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "MzAwMA==",
                },
                {
                  "name": "aHR0cDovL2xvY2FsaG9zdDo4MDgw,Calling [toString] on an [Output<T>] is not supported.

To get the value of an Output<T> as an Output<string> consider either:
1: o.apply(v => \`prefix\${v}suffix\`)
2: pulumi.interpolate \`prefix\${v}suffix\`

See https://pulumi.io/help/outputs for more details.
This function may throw in a future version of @pulumi/pulumi.",
                  "value": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
                },
              ],
              "image": "ghcr.io/oyelowo/react-web:latest",
              "name": "react",
              "ports": [
                {
                  "containerPort": 3000,
                  "name": "http",
                },
              ],
              "resources": {
                "limits": {
                  "cpu": "700m",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "500m",
                  "memory": "1.3Gi",
                },
              },
              "volumeMounts": [],
            },
          ],
          "imagePullSecrets": [
            {
              "name": "bXktcmVnaXN0cnkta2V5",
            },
          ],
          "initContainers": [],
          "volumes": [],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "config": "very important data",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"config":"very important data"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"react-web","namespace":"applications"}}
",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web/1-manifest/v1-configmap-applications-react-web.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web",
  },
]
`;

exports[`KubeObject Can sync resources 5`] = `
[
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "appprojects.argoproj.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-appprojects.argoproj.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "applications.argoproj.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-applications.argoproj.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.3.0",
      },
      "name": "applicationsets.argoproj.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-applicationsets.argoproj.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "data": {
      "application.instanceLabelKey": "argocd.argoproj.io/instance",
      "dex.config": "",
      "url": "",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"application.instanceLabelKey":"argocd.argoproj.io/instance","dex.config":"","url":""},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","app.kubernetes.io/part-of":"argocd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-cm","namespace":"argocd"}}
",
      },
      "name": "argocd-cm",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-cm.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "data": {
      "admin.password": "JDJhJDEwJFJ3TGtBcENPNkdKSDFRVXJUTGNlVGVFODkwWjlDeU5jS2p4RkNQSmxWOEVwNDBBejgwNG91",
      "admin.passwordMtime": "MjAyMi0xMC0xMlQwNjo1NjoxMlo=",
      "clearPassword": "ZXhhbXBsZQ==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"admin.password":"JDJhJDEwJFJ3TGtBcENPNkdKSDFRVXJUTGNlVGVFODkwWjlDeU5jS2p4RkNQSmxWOEVwNDBBejgwNG91","admin.passwordMtime":"MjAyMi0xMC0xMlQwNjo1NjoxMlo=","clearPassword":"ZXhhbXBsZQ=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","app.kubernetes.io/part-of":"argocd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-secret","namespace":"argocd"},"type":"Opaque"}
",
      },
      "name": "argocd-secret",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-secret-argocd-argocd-secret.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "type": "Opaque",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-server","namespace":"argocd"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"argocd-argo-cd-server"},"subjects":[{"kind":"ServiceAccount","name":"argocd-argo-cd-argocd-server","namespace":"argocd"}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-server","namespace":"argocd"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"argocd-argo-cd-server"},"subjects":[{"kind":"ServiceAccount","name":"argocd-argo-cd-argocd-server"}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-repo-server","namespace":"argocd"},"rules":[{"apiGroups":["argoproj.io"],"resources":["applications"],"verbs":["get","list","watch"]}]}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-role-argocd-argocd-argo-cd-repo-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-app-controller","namespace":"argocd"},"rules":[{"apiGroups":[""],"resources":["secrets","configmaps"],"verbs":["get","list","watch"]},{"apiGroups":["argoproj.io"],"resources":["applications","appprojects"],"verbs":["create","get","list","watch","update","patch","delete"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","list"]}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-role-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","automountServiceAccountToken":true,"kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-argocd-repo-server","namespace":"argocd"}}
",
      },
      "name": "argocd-argo-cd-argocd-repo-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-argo-cd-argocd-repo-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","automountServiceAccountToken":true,"kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-argocd-server","namespace":"argocd"}}
",
      },
      "name": "argocd-argo-cd-argocd-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-argo-cd-argocd-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "annotations": {
        "cert-manager.io/cluster-issuer": "letsencrypt-cluster-issuer",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"networking.k8s.io/v1","kind":"Ingress","metadata":{"annotations":{"cert-manager.io/cluster-issuer":"letsencrypt-cluster-issuer","nginx.ingress.kubernetes.io/ssl-redirect":"false","nginx.ingress.kubernetes.io/use-regex":"true"},"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-server","namespace":"argocd"},"spec":{"ingressClassName":"nginx","rules":[{"host":"argocd.localhost:8080","http":{"paths":[{"backend":{"service":{"name":"argocd-argo-cd-server","port":{"name":"https"}}},"path":"/","pathType":"Prefix"}]}}],"tls":[{"hosts":["argocd.localhost:8080"],"secretName":"argocd.localhost:8080-tls"}]}}
",
        "nginx.ingress.kubernetes.io/ssl-redirect": "false",
        "nginx.ingress.kubernetes.io/use-regex": "true",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/networking.k8s.io_v1-ingress-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-app-controller","namespace":"argocd"},"spec":{"ports":[{"name":"tcp-controller","port":8082,"protocol":"TCP","targetPort":"controller"}],"selector":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"},"sessionAffinity":"None","type":"ClusterIP"}}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "data": {
      "ping_liveness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "\${REDIS_PASSWORD_FILE}")"
[[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
response=$(
  timeout -s 3 $1 \\
  redis-cli \\
    -h localhost \\
    -p $REDIS_PORT \\
    ping
)
if [ "$?" -eq "124" ]; then
  echo "Timed out"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
  echo "$response"
  exit 1
fi",
      "ping_liveness_local_and_master.sh": "script_dir="$(dirname "$0")"
exit_status=0
"$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
"$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
exit $exit_status",
      "ping_liveness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "\${REDIS_MASTER_PASSWORD_FILE}")"
[[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
response=$(
  timeout -s 3 $1 \\
  redis-cli \\
    -h $REDIS_MASTER_HOST \\
    -p $REDIS_MASTER_PORT_NUMBER \\
    ping
)
if [ "$?" -eq "124" ]; then
  echo "Timed out"
  exit 1
fi
responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
  echo "$response"
  exit 1
fi",
      "ping_readiness_local.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "\${REDIS_PASSWORD_FILE}")"
[[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
response=$(
  timeout -s 3 $1 \\
  redis-cli \\
    -h localhost \\
    -p $REDIS_PORT \\
    ping
)
if [ "$?" -eq "124" ]; then
  echo "Timed out"
  exit 1
fi
if [ "$response" != "PONG" ]; then
  echo "$response"
  exit 1
fi",
      "ping_readiness_local_and_master.sh": "script_dir="$(dirname "$0")"
exit_status=0
"$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
"$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
exit $exit_status",
      "ping_readiness_master.sh": "#!/bin/bash

[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "\${REDIS_MASTER_PASSWORD_FILE}")"
[[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
response=$(
  timeout -s 3 $1 \\
  redis-cli \\
    -h $REDIS_MASTER_HOST \\
    -p $REDIS_MASTER_PORT_NUMBER \\
    ping
)
if [ "$?" -eq "124" ]; then
  echo "Timed out"
  exit 1
fi
if [ "$response" != "PONG" ]; then
  echo "$response"
  exit 1
fi",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"ping_liveness_local.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_PASSWORD=\\"$(\\u003c \\"\${REDIS_PASSWORD_FILE}\\")\\"\\n[[ -n \\"$REDIS_PASSWORD\\" ]] \\u0026\\u0026 export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"\\nresponse=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -h localhost \\\\\\n    -p $REDIS_PORT \\\\\\n    ping\\n)\\nif [ \\"$?\\" -eq \\"124\\" ]; then\\n  echo \\"Timed out\\"\\n  exit 1\\nfi\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\nif [ \\"$response\\" != \\"PONG\\" ] \\u0026\\u0026 [ \\"$responseFirstWord\\" != \\"LOADING\\" ] \\u0026\\u0026 [ \\"$responseFirstWord\\" != \\"MASTERDOWN\\" ]; then\\n  echo \\"$response\\"\\n  exit 1\\nfi","ping_liveness_local_and_master.sh":"script_dir=\\"$(dirname \\"$0\\")\\"\\nexit_status=0\\n\\"$script_dir/ping_liveness_local.sh\\" $1 || exit_status=$?\\n\\"$script_dir/ping_liveness_master.sh\\" $1 || exit_status=$?\\nexit $exit_status","ping_liveness_master.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_MASTER_PASSWORD=\\"$(\\u003c \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"\\n[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] \\u0026\\u0026 export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"\\nresponse=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -h $REDIS_MASTER_HOST \\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\n    ping\\n)\\nif [ \\"$?\\" -eq \\"124\\" ]; then\\n  echo \\"Timed out\\"\\n  exit 1\\nfi\\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\\nif [ \\"$response\\" != \\"PONG\\" ] \\u0026\\u0026 [ \\"$responseFirstWord\\" != \\"LOADING\\" ]; then\\n  echo \\"$response\\"\\n  exit 1\\nfi","ping_readiness_local.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_PASSWORD=\\"$(\\u003c \\"\${REDIS_PASSWORD_FILE}\\")\\"\\n[[ -n \\"$REDIS_PASSWORD\\" ]] \\u0026\\u0026 export REDISCLI_AUTH=\\"$REDIS_PASSWORD\\"\\nresponse=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -h localhost \\\\\\n    -p $REDIS_PORT \\\\\\n    ping\\n)\\nif [ \\"$?\\" -eq \\"124\\" ]; then\\n  echo \\"Timed out\\"\\n  exit 1\\nfi\\nif [ \\"$response\\" != \\"PONG\\" ]; then\\n  echo \\"$response\\"\\n  exit 1\\nfi","ping_readiness_local_and_master.sh":"script_dir=\\"$(dirname \\"$0\\")\\"\\nexit_status=0\\n\\"$script_dir/ping_readiness_local.sh\\" $1 || exit_status=$?\\n\\"$script_dir/ping_readiness_master.sh\\" $1 || exit_status=$?\\nexit $exit_status","ping_readiness_master.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_MASTER_PASSWORD=\\"$(\\u003c \\"\${REDIS_MASTER_PASSWORD_FILE}\\")\\"\\n[[ -n \\"$REDIS_MASTER_PASSWORD\\" ]] \\u0026\\u0026 export REDISCLI_AUTH=\\"$REDIS_MASTER_PASSWORD\\"\\nresponse=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -h $REDIS_MASTER_HOST \\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\n    ping\\n)\\nif [ \\"$?\\" -eq \\"124\\" ]; then\\n  echo \\"Timed out\\"\\n  exit 1\\nfi\\nif [ \\"$response\\" != \\"PONG\\" ]; then\\n  echo \\"$response\\"\\n  exit 1\\nfi"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis-health","namespace":"argocd"}}
",
      },
      "name": "argocd-redis-health",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-redis-health.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-server","namespace":"argocd"},"rules":[{"apiGroups":["*"],"resources":["*"],"verbs":["delete","get","patch"]},{"apiGroups":[""],"resources":["events"],"verbs":["list"]},{"apiGroups":[""],"resources":["pods","pods/log"],"verbs":["get"]}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "data": {
      "master.conf": "dir /data
# User-supplied master configuration:
rename-command FLUSHDB ""
rename-command FLUSHALL ""
# End of master configuration",
      "redis.conf": "# User-supplied common configuration:
# Enable AOF https://redis.io/topics/persistence#append-only-file
appendonly yes
# Disable RDB persistence, AOF persistence already enabled.
save ""
# End of common configuration",
      "replica.conf": "dir /data
# User-supplied replica configuration:
rename-command FLUSHDB ""
rename-command FLUSHALL ""
# End of replica configuration",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"master.conf":"dir /data\\n# User-supplied master configuration:\\nrename-command FLUSHDB \\"\\"\\nrename-command FLUSHALL \\"\\"\\n# End of master configuration","redis.conf":"# User-supplied common configuration:\\n# Enable AOF https://redis.io/topics/persistence#append-only-file\\nappendonly yes\\n# Disable RDB persistence, AOF persistence already enabled.\\nsave \\"\\"\\n# End of common configuration","replica.conf":"dir /data\\n# User-supplied replica configuration:\\nrename-command FLUSHDB \\"\\"\\nrename-command FLUSHALL \\"\\"\\n# End of replica configuration"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis-configuration","namespace":"argocd"}}
",
      },
      "name": "argocd-redis-configuration",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-redis-configuration.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-server","namespace":"argocd"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"}},"strategy":{"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"}},"namespaces":["argocd"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["argocd-server","--staticassets","/opt/bitnami/argo-cd/app","--repo-server","argocd-argo-cd-repo-server:8081","--logformat","text","--loglevel","info","--redis","argocd-redis-master:6379","--insecure"],"env":[{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}}],"image":"docker.io/bitnami/argo-cd:2.4.14-debian-11-r0","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":8080},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"argocd-server","ports":[{"containerPort":8080,"name":"http","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":8080},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"resources":{"limits":{},"requests":{}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["all"]},"readOnlyRootFilesystem":false,"runAsNonRoot":true,"runAsUser":1001},"volumeMounts":[{"mountPath":"/app/config/ssh","name":"ssh-known-hosts"},{"mountPath":"/app/config/server/tls","name":"argocd-repo-server-tls"}]}],"initContainers":[{"args":["-ec","#!/bin/bash\\n\\nset -o errexit\\nset -o nounset\\nset -o pipefail\\n\\n. /opt/bitnami/scripts/libos.sh\\n. /opt/bitnami/scripts/liblog.sh\\n\\ncheck_redis_connection() {\\n  local result=\\"$(redis-cli -h argocd-redis-master -p 6379  PING)\\"\\n  if [[ \\"$result\\" != \\"PONG\\" ]]; then\\n    false\\n  fi\\n}\\n\\ninfo \\"Checking redis connection...\\"\\nif ! retry_while \\"check_redis_connection\\"; then\\n    error \\"Could not connect to the Redis server\\"\\n    return 1\\nelse\\n    info \\"Connected to the Redis instance\\"\\nfi\\n"],"command":["/bin/bash"],"env":[{"name":"REDISCLI_AUTH","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}}],"image":"docker.io/bitnami/redis:7.0.5-debian-11-r5","imagePullPolicy":"IfNotPresent","name":"wait-for-redis"}],"securityContext":{"fsGroup":1001},"serviceAccountName":"argocd-argo-cd-argocd-server","volumes":[{"configMap":{"name":"argocd-ssh-known-hosts-cm"},"name":"ssh-known-hosts"},{"name":"argocd-repo-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-repo-server-tls"}}]}}}}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "server",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-4.2.3",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "server",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "argocd-server",
                "--staticassets",
                "/opt/bitnami/argo-cd/app",
                "--repo-server",
                "argocd-argo-cd-repo-server:8081",
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
                "--insecure",
              ],
              "env": [
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.4.14-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 8080,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "argocd-server",
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 8080,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "all",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": [
                {
                  "mountPath": "/app/config/ssh",
                  "name": "ssh-known-hosts",
                },
                {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result="$(redis-cli -h argocd-redis-master -p 6379  PING)"
  if [[ "$result" != "PONG" ]]; then
    false
  fi
}

info "Checking redis connection..."
if ! retry_while "check_redis_connection"; then
    error "Could not connect to the Redis server"
    return 1
else
    info "Connected to the Redis instance"
fi
",
              ],
              "command": [
                "/bin/bash",
              ],
              "env": [
                {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:7.0.5-debian-11-r5",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-server",
          "volumes": [
            {
              "configMap": {
                "name": "argocd-ssh-known-hosts-cm",
              },
              "name": "ssh-known-hosts",
            },
            {
              "name": "argocd-repo-server-tls",
              "secret": {
                "items": [
                  {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis-master","namespace":"argocd"},"spec":{"internalTrafficPolicy":"Cluster","ports":[{"name":"tcp-redis","port":6379,"targetPort":"redis"}],"selector":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"redis"},"sessionAffinity":"None","type":"ClusterIP"}}
",
      },
      "name": "argocd-redis-master",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-redis-master.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-app-controller","namespace":"argocd"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"argocd-argo-cd-app-controller"},"subjects":[{"kind":"ServiceAccount","name":"argocd-argo-cd-argocd-app-controller","namespace":"argocd"}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "data": {
      "ssh_known_hosts": "bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"ssh_known_hosts":"bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==\\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\\ngitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\\ngitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\\ngitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\\nssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\nvs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\n"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","app.kubernetes.io/part-of":"argocd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-ssh-known-hosts-cm","namespace":"argocd"}}
",
      },
      "name": "argocd-ssh-known-hosts-cm",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-ssh-known-hosts-cm.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","automountServiceAccountToken":true,"kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis","namespace":"argocd"}}
",
      },
      "name": "argocd-redis",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-redis.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-repo-server","namespace":"argocd"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"}},"strategy":{"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"}},"namespaces":["argocd"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["argocd-repo-server","--logformat","text","--loglevel","info","--redis","argocd-redis-master:6379"],"env":[{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}}],"image":"docker.io/bitnami/argo-cd:2.4.14-debian-11-r0","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"tcpSocket":{"port":8081},"timeoutSeconds":1},"name":"argocd-repo-server","ports":[{"containerPort":8081,"name":"repo-server","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"tcpSocket":{"port":8081},"timeoutSeconds":1},"resources":{"limits":{},"requests":{}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["all"]},"readOnlyRootFilesystem":false,"runAsNonRoot":true,"runAsUser":1001},"volumeMounts":[{"mountPath":"/app/config/ssh","name":"ssh-known-hosts"},{"mountPath":"/app/config/server/tls","name":"argocd-repo-server-tls"},{"mountPath":"/app/config/gpg/keys","name":"gpg-keyring"},{"mountPath":"/tmp","name":"tmp-dir"}]}],"initContainers":[{"args":["-ec","#!/bin/bash\\n\\nset -o errexit\\nset -o nounset\\nset -o pipefail\\n\\n. /opt/bitnami/scripts/libos.sh\\n. /opt/bitnami/scripts/liblog.sh\\n\\ncheck_redis_connection() {\\n  local result=\\"$(redis-cli -h argocd-redis-master -p 6379  PING)\\"\\n  if [[ \\"$result\\" != \\"PONG\\" ]]; then\\n    false\\n  fi\\n}\\n\\ninfo \\"Checking redis connection...\\"\\nif ! retry_while \\"check_redis_connection\\"; then\\n    error \\"Could not connect to the Redis server\\"\\n    return 1\\nelse\\n    info \\"Connected to the Redis instance\\"\\nfi\\n"],"command":["/bin/bash"],"env":[{"name":"REDISCLI_AUTH","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}}],"image":"docker.io/bitnami/redis:7.0.5-debian-11-r5","imagePullPolicy":"IfNotPresent","name":"wait-for-redis"}],"securityContext":{"fsGroup":1001},"serviceAccountName":"argocd-argo-cd-argocd-repo-server","volumes":[{"configMap":{"name":"argocd-ssh-known-hosts-cm"},"name":"ssh-known-hosts"},{"name":"argocd-repo-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-repo-server-tls"}},{"emptyDir":{},"name":"tmp-dir"},{"emptyDir":{},"name":"gpg-keyring"}]}}}}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-repo-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "repo-server",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-4.2.3",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "repo-server",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "argocd-repo-server",
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
              ],
              "env": [
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.4.14-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": {
                  "port": 8081,
                },
                "timeoutSeconds": 1,
              },
              "name": "argocd-repo-server",
              "ports": [
                {
                  "containerPort": 8081,
                  "name": "repo-server",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": {
                  "port": 8081,
                },
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "all",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": [
                {
                  "mountPath": "/app/config/ssh",
                  "name": "ssh-known-hosts",
                },
                {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
                {
                  "mountPath": "/app/config/gpg/keys",
                  "name": "gpg-keyring",
                },
                {
                  "mountPath": "/tmp",
                  "name": "tmp-dir",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result="$(redis-cli -h argocd-redis-master -p 6379  PING)"
  if [[ "$result" != "PONG" ]]; then
    false
  fi
}

info "Checking redis connection..."
if ! retry_while "check_redis_connection"; then
    error "Could not connect to the Redis server"
    return 1
else
    info "Connected to the Redis instance"
fi
",
              ],
              "command": [
                "/bin/bash",
              ],
              "env": [
                {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:7.0.5-debian-11-r5",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-repo-server",
          "volumes": [
            {
              "configMap": {
                "name": "argocd-ssh-known-hosts-cm",
              },
              "name": "ssh-known-hosts",
            },
            {
              "name": "argocd-repo-server-tls",
              "secret": {
                "items": [
                  {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
            {
              "emptyDir": {},
              "name": "tmp-dir",
            },
            {
              "emptyDir": {},
              "name": "gpg-keyring",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-server","namespace":"argocd"},"spec":{"ports":[{"name":"http","port":80,"protocol":"TCP","targetPort":"http"},{"name":"https","port":443,"protocol":"TCP","targetPort":"http"}],"selector":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"},"sessionAffinity":"None","type":"ClusterIP"}}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-repo-server","namespace":"argocd"},"spec":{"ports":[{"name":"tcp-repo-server","port":8081,"protocol":"TCP","targetPort":"repo-server"}],"selector":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"},"sessionAffinity":"None","type":"ClusterIP"}}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-argo-cd-repo-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-app-controller","namespace":"argocd"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"argocd-argo-cd-app-controller"},"subjects":[{"kind":"ServiceAccount","name":"argocd-argo-cd-argocd-app-controller"}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "data": {
      "redis-password": "aERVUjNMdlc4ZQ==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"redis-password":"aERVUjNMdlc4ZQ=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis","namespace":"argocd"},"type":"Opaque"}
",
      },
      "name": "argocd-redis",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-secret-argocd-argocd-redis.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "type": "Opaque",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-repo-server","namespace":"argocd"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"argocd-argo-cd-repo-server"},"subjects":[{"kind":"ServiceAccount","name":"argocd-argo-cd-argocd-repo-server"}]}
",
      },
      "name": "argocd-argo-cd-repo-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-argocd-argocd-argo-cd-repo-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-app-controller","namespace":"argocd"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"}},"strategy":{"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"argo-cd"}},"namespaces":["argocd"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["argocd-application-controller","--status-processors","20","--operation-processors","10","--app-resync","180","--self-heal-timeout-seconds","5","--repo-server","argocd-argo-cd-repo-server:8081","--logformat","text","--loglevel","info","--redis","argocd-redis-master:6379"],"env":[{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}}],"image":"docker.io/bitnami/argo-cd:2.4.14-debian-11-r0","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":8082},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"controller","ports":[{"containerPort":8082,"name":"controller","protocol":"TCP"},{"containerPort":8082,"name":"metrics","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"tcpSocket":{"port":8082},"timeoutSeconds":1},"resources":{"limits":{},"requests":{}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["all"]},"readOnlyRootFilesystem":false,"runAsNonRoot":true,"runAsUser":1001},"volumeMounts":[{"mountPath":"/app/config/server/tls","name":"argocd-repo-server-tls"}]}],"initContainers":[{"args":["-ec","#!/bin/bash\\n\\nset -o errexit\\nset -o nounset\\nset -o pipefail\\n\\n. /opt/bitnami/scripts/libos.sh\\n. /opt/bitnami/scripts/liblog.sh\\n\\ncheck_redis_connection() {\\n  local result=\\"$(redis-cli -h argocd-redis-master -p 6379  PING)\\"\\n  if [[ \\"$result\\" != \\"PONG\\" ]]; then\\n    false\\n  fi\\n}\\n\\ninfo \\"Checking redis connection...\\"\\nif ! retry_while \\"check_redis_connection\\"; then\\n    error \\"Could not connect to the Redis server\\"\\n    return 1\\nelse\\n    info \\"Connected to the Redis instance\\"\\nfi\\n"],"command":["/bin/bash"],"env":[{"name":"REDISCLI_AUTH","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}}],"image":"docker.io/bitnami/redis:7.0.5-debian-11-r5","imagePullPolicy":"IfNotPresent","name":"wait-for-redis"}],"securityContext":{"fsGroup":1001},"serviceAccountName":"argocd-argo-cd-argocd-app-controller","volumes":[{"name":"argocd-repo-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-repo-server-tls"}}]}}}}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-deployment-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "argo-cd",
            "helm.sh/chart": "argo-cd-4.2.3",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "controller",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "argo-cd",
                      },
                    },
                    "namespaces": [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "argocd-application-controller",
                "--status-processors",
                "20",
                "--operation-processors",
                "10",
                "--app-resync",
                "180",
                "--self-heal-timeout-seconds",
                "5",
                "--repo-server",
                "argocd-argo-cd-repo-server:8081",
                "--logformat",
                "text",
                "--loglevel",
                "info",
                "--redis",
                "argocd-redis-master:6379",
              ],
              "env": [
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/argo-cd:2.4.14-debian-11-r0",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 8082,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "controller",
              "ports": [
                {
                  "containerPort": 8082,
                  "name": "controller",
                  "protocol": "TCP",
                },
                {
                  "containerPort": 8082,
                  "name": "metrics",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "tcpSocket": {
                  "port": 8082,
                },
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "all",
                  ],
                },
                "readOnlyRootFilesystem": false,
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": [
                {
                  "mountPath": "/app/config/server/tls",
                  "name": "argocd-repo-server-tls",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "-ec",
                "#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

. /opt/bitnami/scripts/libos.sh
. /opt/bitnami/scripts/liblog.sh

check_redis_connection() {
  local result="$(redis-cli -h argocd-redis-master -p 6379  PING)"
  if [[ "$result" != "PONG" ]]; then
    false
  fi
}

info "Checking redis connection..."
if ! retry_while "check_redis_connection"; then
    error "Could not connect to the Redis server"
    return 1
else
    info "Connected to the Redis instance"
fi
",
              ],
              "command": [
                "/bin/bash",
              ],
              "env": [
                {
                  "name": "REDISCLI_AUTH",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/redis:7.0.5-debian-11-r5",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-redis",
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-argo-cd-argocd-app-controller",
          "volumes": [
            {
              "name": "argocd-repo-server-tls",
              "secret": {
                "items": [
                  {
                    "key": "tls.crt",
                    "path": "tls.crt",
                  },
                  {
                    "key": "tls.key",
                    "path": "tls.key",
                  },
                  {
                    "key": "ca.crt",
                    "path": "ca.crt",
                  },
                ],
                "optional": true,
                "secretName": "argocd-repo-server-tls",
              },
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-server","namespace":"argocd"},"rules":[{"apiGroups":[""],"resources":["secrets","configmaps"],"verbs":["create","get","list","watch","update","patch","delete"]},{"apiGroups":["argoproj.io"],"resources":["applications","appprojects"],"verbs":["create","get","list","watch","update","delete","patch"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","list"]}]}
",
      },
      "name": "argocd-argo-cd-server",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-role-argocd-argocd-argo-cd-server.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","automountServiceAccountToken":true,"kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-argocd-app-controller","namespace":"argocd"}}
",
      },
      "name": "argocd-argo-cd-argocd-app-controller",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-serviceaccount-argocd-argocd-argo-cd-argocd-app-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "data": {
      "start-master.sh": "#!/bin/bash

[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "\${REDIS_PASSWORD_FILE}")"
if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
fi
if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
fi
ARGS=("--port" "\${REDIS_PORT}")
ARGS+=("--requirepass" "\${REDIS_PASSWORD}")
ARGS+=("--masterauth" "\${REDIS_PASSWORD}")
ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
exec redis-server "\${ARGS[@]}"
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"start-master.sh":"#!/bin/bash\\n\\n[[ -f $REDIS_PASSWORD_FILE ]] \\u0026\\u0026 export REDIS_PASSWORD=\\"$(\\u003c \\"\${REDIS_PASSWORD_FILE}\\")\\"\\nif [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then\\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\\nfi\\nif [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then\\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\\nfi\\nARGS=(\\"--port\\" \\"\${REDIS_PORT}\\")\\nARGS+=(\\"--requirepass\\" \\"\${REDIS_PASSWORD}\\")\\nARGS+=(\\"--masterauth\\" \\"\${REDIS_PASSWORD}\\")\\nARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/redis.conf\\")\\nARGS+=(\\"--include\\" \\"/opt/bitnami/redis/etc/master.conf\\")\\nexec redis-server \\"\${ARGS[@]}\\"\\n"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis-scripts","namespace":"argocd"}}
",
      },
      "name": "argocd-redis-scripts",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-configmap-argocd-argocd-redis-scripts.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis-headless","namespace":"argocd"},"spec":{"clusterIP":"None","ports":[{"name":"tcp-redis","port":6379,"targetPort":"redis"}],"selector":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"redis"},"type":"ClusterIP"}}
",
      },
      "name": "argocd-redis-headless",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-service-argocd-argocd-redis-headless.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {},
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"labels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis-master","namespace":"argocd"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"redis"}},"serviceName":"argocd-redis-headless","template":{"metadata":{"annotations":{"checksum/configmap":"81855d627a0d05558b450d425a35f0133fd4d18fbc56b9cd3f19bc6acc6f3446","checksum/health":"afe6e7ca35f057c61dd91d3f5a8608db5883d22e4837ccd9e1a659a88c891cbb","checksum/scripts":"950530432292d9fc6b1e10b86dc72653d3e054b278e3d53abd53810f61fc5b44","checksum/secret":"165ea263f34f0021dcbd3787f2e040eb6d085508bd1e16c33d8c91ae61e8c1c2"},"labels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"redis"}},"namespaces":["argocd"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["-c","/opt/bitnami/scripts/start-scripts/start-master.sh"],"command":["/bin/bash"],"env":[{"name":"BITNAMI_DEBUG","value":"false"},{"name":"REDIS_REPLICATION_MODE","value":"master"},{"name":"ALLOW_EMPTY_PASSWORD","value":"no"},{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argocd-redis"}}},{"name":"REDIS_TLS_ENABLED","value":"no"},{"name":"REDIS_PORT","value":"6379"}],"image":"docker.io/bitnami/redis:7.0.5-debian-11-r5","imagePullPolicy":"IfNotPresent","livenessProbe":{"exec":{"command":["sh","-c","/health/ping_liveness_local.sh 5"]},"failureThreshold":5,"initialDelaySeconds":20,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":6},"name":"redis","ports":[{"containerPort":6379,"name":"redis"}],"readinessProbe":{"exec":{"command":["sh","-c","/health/ping_readiness_local.sh 1"]},"failureThreshold":5,"initialDelaySeconds":20,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":2},"resources":{"limits":{},"requests":{}},"securityContext":{"runAsUser":1001},"volumeMounts":[{"mountPath":"/opt/bitnami/scripts/start-scripts","name":"start-scripts"},{"mountPath":"/health","name":"health"},{"mountPath":"/data","name":"redis-data"},{"mountPath":"/opt/bitnami/redis/mounted-etc","name":"config"},{"mountPath":"/opt/bitnami/redis/etc/","name":"redis-tmp-conf"},{"mountPath":"/tmp","name":"tmp"}]}],"securityContext":{"fsGroup":1001},"serviceAccountName":"argocd-redis","terminationGracePeriodSeconds":30,"volumes":[{"configMap":{"defaultMode":493,"name":"argocd-redis-scripts"},"name":"start-scripts"},{"configMap":{"defaultMode":493,"name":"argocd-redis-health"},"name":"health"},{"configMap":{"name":"argocd-redis-configuration"},"name":"config"},{"emptyDir":{},"name":"redis-tmp-conf"},{"emptyDir":{},"name":"tmp"}]}},"updateStrategy":{"rollingUpdate":{},"type":"RollingUpdate"},"volumeClaimTemplates":[{"metadata":{"labels":{"app.kubernetes.io/component":"master","app.kubernetes.io/instance":"argocd","app.kubernetes.io/name":"redis"},"name":"redis-data"},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"8Gi"}}}}]}}
",
      },
      "name": "argocd-redis-master",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/apps_v1-statefulset-argocd-argocd-redis-master.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "checksum/configmap": "81855d627a0d05558b450d425a35f0133fd4d18fbc56b9cd3f19bc6acc6f3446",
            "checksum/health": "afe6e7ca35f057c61dd91d3f5a8608db5883d22e4837ccd9e1a659a88c891cbb",
            "checksum/scripts": "950530432292d9fc6b1e10b86dc72653d3e054b278e3d53abd53810f61fc5b44",
            "checksum/secret": "165ea263f34f0021dcbd3787f2e040eb6d085508bd1e16c33d8c91ae61e8c1c2",
          },
          "labels": {
            "app.kubernetes.io/component": "master",
            "app.kubernetes.io/instance": "argocd",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "redis",
            "helm.sh/chart": "redis-17.3.2",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "master",
                        "app.kubernetes.io/instance": "argocd",
                        "app.kubernetes.io/name": "redis",
                      },
                    },
                    "namespaces": [
                      "argocd",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-master.sh",
              ],
              "command": [
                "/bin/bash",
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                {
                  "name": "REDIS_REPLICATION_MODE",
                  "value": "master",
                },
                {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no",
                },
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "redis-password",
                      "name": "argocd-redis",
                    },
                  },
                },
                {
                  "name": "REDIS_TLS_ENABLED",
                  "value": "no",
                },
                {
                  "name": "REDIS_PORT",
                  "value": "6379",
                },
              ],
              "image": "docker.io/bitnami/redis:7.0.5-debian-11-r5",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_liveness_local.sh 5",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 6,
              },
              "name": "redis",
              "ports": [
                {
                  "containerPort": 6379,
                  "name": "redis",
                },
              ],
              "readinessProbe": {
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_readiness_local.sh 1",
                  ],
                },
                "failureThreshold": 5,
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "runAsUser": 1001,
              },
              "volumeMounts": [
                {
                  "mountPath": "/opt/bitnami/scripts/start-scripts",
                  "name": "start-scripts",
                },
                {
                  "mountPath": "/health",
                  "name": "health",
                },
                {
                  "mountPath": "/data",
                  "name": "redis-data",
                },
                {
                  "mountPath": "/opt/bitnami/redis/mounted-etc",
                  "name": "config",
                },
                {
                  "mountPath": "/opt/bitnami/redis/etc/",
                  "name": "redis-tmp-conf",
                },
                {
                  "mountPath": "/tmp",
                  "name": "tmp",
                },
              ],
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "argocd-redis",
          "terminationGracePeriodSeconds": 30,
          "volumes": [
            {
              "configMap": {
                "defaultMode": 493,
                "name": "argocd-redis-scripts",
              },
              "name": "start-scripts",
            },
            {
              "configMap": {
                "defaultMode": 493,
                "name": "argocd-redis-health",
              },
              "name": "health",
            },
            {
              "configMap": {
                "name": "argocd-redis-configuration",
              },
              "name": "config",
            },
            {
              "emptyDir": {},
              "name": "redis-tmp-conf",
            },
            {
              "emptyDir": {},
              "name": "tmp",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-argo-cd-app-controller","namespace":"argocd"},"rules":[{"apiGroups":["*"],"resources":["*"],"verbs":["*"]},{"nonResourceURLs":["*"],"verbs":["*"]}]}
",
      },
      "name": "argocd-argo-cd-app-controller",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-argocd-argocd-argo-cd-app-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
  },
]
`;

exports[`KubeObject Can sync resources 6`] = `
[
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "linkerd.io/created-by": "linkerd/helm %!s(<nil>)",
      },
      "name": "serverauthorizations.policy.linkerd.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-serverauthorizations.policy.linkerd.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "linkerd.io/created-by": "linkerd/helm %!s(<nil>)",
      },
      "name": "meshtlsauthentications.policy.linkerd.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-meshtlsauthentications.policy.linkerd.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "linkerd.io/created-by": "linkerd/helm %!s(<nil>)",
      },
      "name": "httproutes.policy.linkerd.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-httproutes.policy.linkerd.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "linkerd.io/created-by": "linkerd/helm %!s(<nil>)",
      },
      "name": "authorizationpolicies.policy.linkerd.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-authorizationpolicies.policy.linkerd.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "linkerd.io/created-by": "linkerd/helm %!s(<nil>)",
      },
      "name": "servers.policy.linkerd.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-servers.policy.linkerd.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "linkerd.io/created-by": "linkerd/helm %!s(<nil>)",
      },
      "name": "networkauthentications.policy.linkerd.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-networkauthentications.policy.linkerd.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "linkerd.io/created-by": "linkerd/helm %!s(<nil>)",
      },
      "name": "serviceprofiles.linkerd.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-serviceprofiles.linkerd.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"identity","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-identity","namespace":"linkerd"},"spec":{"ports":[{"name":"grpc","port":8080,"targetPort":8080}],"selector":{"linkerd.io/control-plane-component":"identity"},"type":"ClusterIP"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-identity",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-policy","namespace":"linkerd"},"spec":{"clusterIP":"None","ports":[{"name":"grpc","port":8090,"targetPort":8090}],"selector":{"linkerd.io/control-plane-component":"destination"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-policy",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-policy.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-dst-headless","namespace":"linkerd"},"spec":{"clusterIP":"None","ports":[{"name":"grpc","port":8086,"targetPort":8086}],"selector":{"linkerd.io/control-plane-component":"destination"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-dst-headless",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-dst-headless.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"proxy-injector","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1","linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-proxy-injector","namespace":"linkerd"},"spec":{"replicas":1,"selector":{"matchLabels":{"linkerd.io/control-plane-component":"proxy-injector"}},"strategy":{"rollingUpdate":{"maxSurge":"25%","maxUnavailable":"25%"}},"template":{"metadata":{"annotations":{"cluster-autoscaler.kubernetes.io/safe-to-evict":"true","config.linkerd.io/default-inbound-policy":"all-unauthenticated","config.linkerd.io/opaque-ports":"8443","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/helm-release-version":"1","linkerd.io/proxy-version":"stable-2.12.1","linkerd.io/trust-root-sha256":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"labels":{"linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd","linkerd.io/proxy-deployment":"linkerd-proxy-injector","linkerd.io/workload-ns":"linkerd"}},"spec":{"containers":[{"env":[{"name":"_pod_name","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"_pod_ns","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"_pod_nodeName","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"LINKERD2_PROXY_LOG","value":"warn,linkerd=info"},{"name":"LINKERD2_PROXY_LOG_FORMAT","value":"plain"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_ADDR","value":"linkerd-dst-headless.linkerd.svc.cluster.local.:8086"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_POLICY_SVC_ADDR","value":"linkerd-policy.linkerd.svc.cluster.local.:8090"},{"name":"LINKERD2_PROXY_POLICY_WORKLOAD","value":"$(_pod_ns):$(_pod_name)"},{"name":"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY","value":"all-unauthenticated"},{"name":"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT","value":"100ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT","value":"1000ms"},{"name":"LINKERD2_PROXY_CONTROL_LISTEN_ADDR","value":"0.0.0.0:4190"},{"name":"LINKERD2_PROXY_ADMIN_LISTEN_ADDR","value":"0.0.0.0:4191"},{"name":"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR","value":"127.0.0.1:4140"},{"name":"LINKERD2_PROXY_INBOUND_LISTEN_ADDR","value":"0.0.0.0:4143"},{"name":"LINKERD2_PROXY_INBOUND_IPS","valueFrom":{"fieldRef":{"fieldPath":"status.podIPs"}}},{"name":"LINKERD2_PROXY_INBOUND_PORTS","value":"8443,9995"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES","value":"svc.cluster.local."},{"name":"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION","value":"25,587,3306,4444,5432,6379,9300,11211"},{"name":"LINKERD2_PROXY_DESTINATION_CONTEXT","value":"{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}\\n"},{"name":"_pod_sa","valueFrom":{"fieldRef":{"fieldPath":"spec.serviceAccountName"}}},{"name":"_l5d_ns","value":"linkerd"},{"name":"_l5d_trustdomain","value":"cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_DIR","value":"/var/run/linkerd/identity/end-entity"},{"name":"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS","valueFrom":{"configMapKeyRef":{"key":"ca-bundle.crt","name":"linkerd-identity-trust-roots"}}},{"name":"LINKERD2_PROXY_IDENTITY_TOKEN_FILE","value":"/var/run/secrets/tokens/linkerd-identity-token"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_ADDR","value":"linkerd-identity-headless.linkerd.svc.cluster.local.:8080"},{"name":"LINKERD2_PROXY_IDENTITY_LOCAL_NAME","value":"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_NAME","value":"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_POLICY_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"}],"image":"cr.l5d.io/linkerd/proxy:stable-2.12.1","imagePullPolicy":"IfNotPresent","lifecycle":{"postStart":{"exec":{"command":["/usr/lib/linkerd/linkerd-await","--timeout=2m"]}}},"livenessProbe":{"httpGet":{"path":"/live","port":4191},"initialDelaySeconds":10},"name":"linkerd-proxy","ports":[{"containerPort":4143,"name":"linkerd-proxy"},{"containerPort":4191,"name":"linkerd-admin"}],"readinessProbe":{"httpGet":{"path":"/ready","port":4191},"initialDelaySeconds":2},"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsUser":2102},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/var/run/linkerd/identity/end-entity","name":"linkerd-identity-end-entity"},{"mountPath":"/var/run/secrets/tokens","name":"linkerd-identity-token"}]},{"args":["proxy-injector","-log-level=info","-log-format=plain","-linkerd-namespace=linkerd","-enable-pprof=false"],"image":"cr.l5d.io/linkerd/controller:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9995},"initialDelaySeconds":10},"name":"proxy-injector","ports":[{"containerPort":8443,"name":"proxy-injector"},{"containerPort":9995,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9995}},"securityContext":{"allowPrivilegeEscalation":false,"runAsUser":2103},"volumeMounts":[{"mountPath":"/var/run/linkerd/config","name":"config"},{"mountPath":"/var/run/linkerd/identity/trust-roots","name":"trust-roots"},{"mountPath":"/var/run/linkerd/tls","name":"tls","readOnly":true}]}],"initContainers":[{"args":["--incoming-proxy-port","4143","--outgoing-proxy-port","4140","--proxy-uid","2102","--inbound-ports-to-ignore","4190,4191,4567,4568","--outbound-ports-to-ignore","4567,4568"],"image":"cr.l5d.io/linkerd/proxy-init:v2.0.0","imagePullPolicy":"IfNotPresent","name":"linkerd-init","resources":{"limits":{"cpu":"100m","memory":"20Mi"},"requests":{"cpu":"100m","memory":"20Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"add":["NET_ADMIN","NET_RAW"]},"privileged":false,"readOnlyRootFilesystem":true,"runAsNonRoot":true,"runAsUser":65534},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/run","name":"linkerd-proxy-init-xtables-lock"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"linkerd-proxy-injector","volumes":[{"configMap":{"name":"linkerd-config"},"name":"config"},{"configMap":{"name":"linkerd-identity-trust-roots"},"name":"trust-roots"},{"name":"tls","secret":{"secretName":"linkerd-proxy-injector-k8s-tls"}},{"emptyDir":{},"name":"linkerd-proxy-init-xtables-lock"},{"name":"linkerd-identity-token","projected":{"sources":[{"serviceAccountToken":{"audience":"identity.l5d.io","expirationSeconds":86400,"path":"linkerd-identity-token"}}]}},{"emptyDir":{"medium":"Memory"},"name":"linkerd-identity-end-entity"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-proxy-injector",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "true",
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "config.linkerd.io/opaque-ports": "8443",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/helm-release-version": "1",
            "linkerd.io/proxy-version": "stable-2.12.1",
            "linkerd.io/trust-root-sha256": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
          },
          "labels": {
            "linkerd.io/control-plane-component": "proxy-injector",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-proxy-injector",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "_pod_name",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                {
                  "name": "_pod_ns",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "_pod_nodeName",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "linkerd-dst-headless.linkerd.svc.cluster.local.:8086",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "linkerd-policy.linkerd.svc.cluster.local.:8090",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8443,9995",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
",
                },
                {
                  "name": "_pod_sa",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/tokens/linkerd-identity-token",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "linkerd-identity-headless.linkerd.svc.cluster.local.:8080",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "/usr/lib/linkerd/linkerd-await",
                      "--timeout=2m",
                    ],
                  },
                },
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": [
                {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
                {
                  "mountPath": "/var/run/secrets/tokens",
                  "name": "linkerd-identity-token",
                },
              ],
            },
            {
              "args": [
                "proxy-injector",
                "-log-level=info",
                "-log-format=plain",
                "-linkerd-namespace=linkerd",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9995,
                },
                "initialDelaySeconds": 10,
              },
              "name": "proxy-injector",
              "ports": [
                {
                  "containerPort": 8443,
                  "name": "proxy-injector",
                },
                {
                  "containerPort": 9995,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9995,
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 2103,
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/config",
                  "name": "config",
                },
                {
                  "mountPath": "/var/run/linkerd/identity/trust-roots",
                  "name": "trust-roots",
                },
                {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "4567,4568",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v2.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "20Mi",
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "20Mi",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "add": [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true,
                "runAsUser": 65534,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": [
                {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-proxy-injector",
          "volumes": [
            {
              "configMap": {
                "name": "linkerd-config",
              },
              "name": "config",
            },
            {
              "configMap": {
                "name": "linkerd-identity-trust-roots",
              },
              "name": "trust-roots",
            },
            {
              "name": "tls",
              "secret": {
                "secretName": "linkerd-proxy-injector-k8s-tls",
              },
            },
            {
              "emptyDir": {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            {
              "name": "linkerd-identity-token",
              "projected": {
                "sources": [
                  {
                    "serviceAccountToken": {
                      "audience": "identity.l5d.io",
                      "expirationSeconds": 86400,
                      "path": "linkerd-identity-token",
                    },
                  },
                ],
              },
            },
            {
              "emptyDir": {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"admissionregistration.k8s.io/v1","kind":"ValidatingWebhookConfiguration","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-policy-validator-webhook-config"},"webhooks":[{"admissionReviewVersions":["v1","v1beta1"],"clientConfig":{"caBundle":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRYnhKWXU4Z0xHV1l2TW8xRFloRFZsakFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpJeE1ERXlNRFkxTmpFeVdoY05Nak14TURFeU1EWTFOakV5V2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM1MXRDUHpXZHVKVHBSWFBiZklpSlFqZlQ2Z1FRMVJ4di9uV1J0YThuagpFbkNGTFl1YWtURTJLZEFlUndEenBRTldBdVBiTGlvSVA5RytRRHVpakRndjlKRlJNMVhhSDQwbytqenNFZ2FICm8vbi9LeStKb0hWbGtEcndoWDNRazlIOEIyNU1BT1dBNXNVaTdncEsxR2JzSmZOMzd5LzBlbENCNjY2U01WSncKMXlmSlVWbGxKVFg5RDVPR3VlaDdOcjVRVkVFbm9hTG5tOHlHMjZwQ3p5VkFmMnh3WGFUUTlWY3Q5RERRUEpXeQoycjl5ejV1VXk5WWV6eW9UNU1aOFVXNEZNeWo2cWNlSEtTc3gvM1BDZjc4UXpwR0xNRjJZM3grV0ZJeWpVZ2FkCmR2YmFxLzNidG5DNDdCcWx2RThPc3hvTG4vbU5ldnNSNjlzZWpRNCttUk1YQWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFWjdSay9haUp6aGJLem5Gb3pudEhmK2xmaVcKbU9VSmorV0QxY2JqMlhqdHZBcksvUjNYL1lYTTVCMWdNRDFJQjMrL2dsb1BEa1NqM0MrVWlDazh4WGh6b2VpdwpiSHhNdEdWVXVpQVpHSTdpc2NxOFZJaFQ3QjFWTFB4eUtSYzYvUytnMTlkRURWdDJRMGFvS012d2RkRDE4V3pICkdhWDFJUmNZUVgwYW55RXZpRzBhaEZRc1JvRytkVmZESzVDRVdkUzhXT3lET1ErNFhWOWR5d1h4ckpISDdXQlEKV09SSzVKV2pyUWg1bEdXaUh1NHQvcEFsalJKZWJ5NDU0T3l2dENWcTVkSElIOVl1QmRFc0d5cmROL0Y0VTBGMgpIM0NMZ3dTZlh2NXBUazdaUHZtSXdySHd0WHkxbE1ucHh6WVF3UmI5cTQweTZOUlNvZENjbnVXaVNkUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==","service":{"name":"linkerd-policy-validator","namespace":"linkerd","path":"/"}},"failurePolicy":"Ignore","name":"linkerd-policy-validator.linkerd.io","namespaceSelector":{"matchExpressions":[{"key":"config.linkerd.io/admission-webhooks","operator":"NotIn","values":["disabled"]}]},"rules":[{"apiGroups":["policy.linkerd.io"],"apiVersions":["v1alpha1","v1beta1"],"operations":["CREATE","UPDATE"],"resources":["authorizationpolicies","httproutes","networkauthentications","meshtlsauthentications","serverauthorizations","servers"]}],"sideEffects":"None"}]}
",
      },
      "name": "linkerd-policy-validator-webhook-config",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/admissionregistration.k8s.io_v1-validatingwebhookconfiguration-default-linkerd-policy-validator-webhook-config.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-linkerd-destination"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"linkerd-linkerd-destination"},"subjects":[{"kind":"ServiceAccount","name":"linkerd-destination","namespace":"linkerd"}]}
",
      },
      "name": "linkerd-linkerd-destination",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-destination.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Certificate",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"linkerd-identity-issuer","namespace":"linkerd"},"spec":{"commonName":"identity.linkerd.cluster.local","dnsNames":["identity.linkerd.cluster.local"],"duration":"48h","isCA":true,"issuerRef":{"kind":"ClusterIssuer","name":"linkerd-trust-anchor"},"privateKey":{"algorithm":"ECDSA"},"renewBefore":"25h","secretName":"linkerd-identity-issuer","usages":["cert sign","crl sign","server auth","client auth"]}}
",
      },
      "name": "linkerd-identity-issuer",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/cert-manager.io_v1-certificate-linkerd-linkerd-identity-issuer.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-policy-validator","namespace":"linkerd"},"spec":{"ports":[{"name":"policy-https","port":443,"targetPort":"policy-https"}],"selector":{"linkerd.io/control-plane-component":"destination"},"type":"ClusterIP"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-policy-validator",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-policy-validator.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-linkerd-proxy-injector"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"linkerd-linkerd-proxy-injector"},"subjects":[{"apiGroup":"","kind":"ServiceAccount","name":"linkerd-proxy-injector","namespace":"linkerd"}]}
",
      },
      "name": "linkerd-linkerd-proxy-injector",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"identity","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-linkerd-identity"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"linkerd-linkerd-identity"},"subjects":[{"kind":"ServiceAccount","name":"linkerd-identity","namespace":"linkerd"}]}
",
      },
      "name": "linkerd-linkerd-identity",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "MutatingWebhookConfiguration",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"admissionregistration.k8s.io/v1","kind":"MutatingWebhookConfiguration","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-proxy-injector-webhook-config"},"webhooks":[{"admissionReviewVersions":["v1","v1beta1"],"clientConfig":{"caBundle":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVakNDQWpxZ0F3SUJBZ0lRVVc0ZUcybUJzV2ErS2tFSFFyajhCREFOQmdrcWhraUc5dzBCQVFzRkFEQXQKTVNzd0tRWURWUVFERXlKc2FXNXJaWEprTFhCeWIzaDVMV2x1YW1WamRHOXlMbXhwYm10bGNtUXVjM1pqTUI0WApEVEl5TVRBeE1qQTJOVFl4TWxvWERUSXpNVEF4TWpBMk5UWXhNbG93TFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5ClpDMXdjbTk0ZVMxcGJtcGxZM1J2Y2k1c2FXNXJaWEprTG5OMll6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFNbEN5UUhUSVp1MWRUbnhZU1FpN3QwTWN2OTkrVEUydzFsMXBaUXBTV001U3FvaApaaS8xc0FpYTkrZ213cEc2c3BXNjFQeGwybE1TN0lRSHNqVnR2T2xKc2t5MXU1OU85bXdjLzdvWEYwVUtLRmFXClJNcWpwNmM1S3krRitkRlJlNUpnaW9kZ0F3QnB2dko1QzI1SldaZGVuMG05blhIZm5tYVlvYXlDVDdNcnVMWW4KVGt6Vm8rZWxHTWI0dVNMeGpuNnBUNjQwSUk4cUxqNHphalViOEZtOXR1TVBnT1hmd1NuUXo0a2JqOVI5QkxnTQpFZDNBaG5xaldnTElsdVA4QjMzUVFRUnBsN1VLM0ZRRk0zK3gzMHJrL0hMc21zK0tXa2pFRTczSHVTWHdLQWlLCmNQalRnUzNsK1lvUmd6N2VZVVFrUnJmUFJKWXdCUTUzNTJ6ZER4OENBd0VBQWFOdU1Hd3dEZ1lEVlIwUEFRSC8KQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RQpBakFBTUMwR0ExVWRFUVFtTUNTQ0lteHBibXRsY21RdGNISnZlSGt0YVc1cVpXTjBiM0l1YkdsdWEyVnlaQzV6CmRtTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSTJoMTNrcUVWR0kwSmw0bEIyVjEvaEZ0WGxrVmtOSVEzdDEKWjV5ajV0U0RyTFhoNCtLbnVpd0NNamg4VldaR2NESHp5ZjZYRUJBbFV5dzdUUWZ0OTY0UjYwRkFLWDdwUDhhRApYVUJCMTdZejB6T2VuM2tMQmVIc0ZoTGprOFA3NURmMEFmQUJTc2FkU2NMaWtMaWNOTWZCM1NoeXFjWHFIcGNUClVsNHJYRXl6ZWF1YTVTMFVEV2VMNHRkTkhWVTdRWDJ0Znp0d1lhcVpVV3hMQ2hiQlhEdW8yRTluWjVRYTlkT3cKMWhhQzFYSUhXcXVnTmtXRHJhYkJXTmVqZFY0Q3hQZ1lKTTRrWC8vRXFFRXAxTzFZNGt6bDBlcWV3anAwT1dGTAo3cDFEcVNZL05NeUVZZUhqbFpGQndnd2hYVzkxUWpiYVV0VUtPUDJUcFd2YzVRNnlEeGc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=","service":{"name":"linkerd-proxy-injector","namespace":"linkerd","path":"/"}},"failurePolicy":"Ignore","name":"linkerd-proxy-injector.linkerd.io","namespaceSelector":{"matchExpressions":[{"key":"config.linkerd.io/admission-webhooks","operator":"NotIn","values":["disabled"]},{"key":"kubernetes.io/metadata.name","operator":"NotIn","values":["kube-system","cert-manager"]}]},"objectSelector":{"matchExpressions":[{"key":"linkerd.io/control-plane-component","operator":"DoesNotExist"},{"key":"linkerd.io/cni-resource","operator":"DoesNotExist"}]},"rules":[{"apiGroups":[""],"apiVersions":["v1"],"operations":["CREATE"],"resources":["pods","services"]}],"sideEffects":"None"}]}
",
      },
      "name": "linkerd-proxy-injector-webhook-config",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/admissionregistration.k8s.io_v1-mutatingwebhookconfiguration-default-linkerd-proxy-injector-webhook-config.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"identity","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-linkerd-identity"},"rules":[{"apiGroups":["authentication.k8s.io"],"resources":["tokenreviews"],"verbs":["create"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]}]}
",
      },
      "name": "linkerd-linkerd-identity",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-destination","namespace":"linkerd"}}
",
      },
      "name": "linkerd-destination",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-destination.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-heartbeat","namespace":"linkerd"},"rules":[{"apiGroups":[""],"resourceNames":["linkerd-config"],"resources":["configmaps"],"verbs":["get"]}]}
",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-role-linkerd-linkerd-heartbeat.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-sp-validator","namespace":"linkerd"},"spec":{"ports":[{"name":"sp-validator","port":443,"targetPort":"sp-validator"}],"selector":{"linkerd.io/control-plane-component":"destination"},"type":"ClusterIP"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-sp-validator",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-sp-validator.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"admissionregistration.k8s.io/v1","kind":"ValidatingWebhookConfiguration","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-sp-validator-webhook-config"},"webhooks":[{"admissionReviewVersions":["v1","v1beta1"],"clientConfig":{"caBundle":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUxqcXlHVE9oMHZXMHNqNWZ4bCtEckF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl4TURFeU1EWTFOakV5V2hjTk1qTXhNREV5TURZMU5qRXlXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQU5nYnQzeUwzVWlneUFzb0xFVTlINjNZWFZKOEJ3UnNpYlk3SjlBVVpoaXI0WlMwanlHTwpFWDJjb1h5anZ0RzVZWUZEUkVKOEdKWm9mUitOV0hNc2ROSUVuU0dReGdnSUNQSjlBY1pqSGdWU0xxbTJUNzFjCkFVU0tUVWpQV3dNb3loK1c1UGVURS9YMGVtM1ozOFhtbTUxdEc1dmkyZndONGQ4V0gxc1lSV0w3cU9NRktLZUEKVElyV2k4b05GOVlwUjIrS0pwQndlditnU1NBem9BWmltSTY2b0ZpQTJkV0lta1gwNkpndEp3ZHpqa01oWXhYOQpIeU5MOEUwWHF2NDl5dWZUZUppOUxYSkdScC9idHpPTTFPRThxYWZJSFNFcHVJdEh1cDlpUms5aHFjSk5LWkZxCm1VajJzclBnd0hYODBjdnhhblRRa3lWQW4vam9DTDlYT2pjQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFDcnN5QTVISU9lSWFjakdJM1N1MHFGVjNLM0JWQ21YMC83VEpadFExdm0KVmZieXYvbEJrcmlzUmZWd0xkTjduRThidGllQkZvcWhrWGFielQrR3hjZlJNTEs5Wmt0K1pJb294MVZBK0tFZgpreGdRenpJSWpTSE85SVIvSzRGdDVKOS9KNzhDZnBQTlE2U2pDYkFVNVRkblVER1BJR3BZc2N6Z3AyQVZKcGtrCi9KY3orZE8yMUV6NnY0emxkSVk4ejFKMWoyZ1RBam5qZHp6cHdQaVkyNXRsL2hPSVVnT21NdE00clc3SGNQVWQKRFBhNUt4d0xqQ0NocGk3MlRLcEZiYWVFUnltQ1MvRkg4VGZFejBNQ04vcUZqWFp3dEoyUHVOSlpud1FvZ1hZaAorakgrcWVnek1iODMyVjRQSmkyZjRIakp6eWVCNFdwek5QeVdrN0xOOFN1QQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t","service":{"name":"linkerd-sp-validator","namespace":"linkerd","path":"/"}},"failurePolicy":"Ignore","name":"linkerd-sp-validator.linkerd.io","namespaceSelector":{"matchExpressions":[{"key":"config.linkerd.io/admission-webhooks","operator":"NotIn","values":["disabled"]}]},"rules":[{"apiGroups":["linkerd.io"],"apiVersions":["v1alpha1","v1alpha2"],"operations":["CREATE","UPDATE"],"resources":["serviceprofiles"]}],"sideEffects":"None"}]}
",
      },
      "name": "linkerd-sp-validator-webhook-config",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/admissionregistration.k8s.io_v1-validatingwebhookconfiguration-default-linkerd-sp-validator-webhook-config.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-heartbeat","namespace":"linkerd"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"linkerd-heartbeat"},"subjects":[{"kind":"ServiceAccount","name":"linkerd-heartbeat","namespace":"linkerd"}]}
",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-linkerd-linkerd-heartbeat.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"identity","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1","linkerd.io/control-plane-component":"identity","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-identity","namespace":"linkerd"},"spec":{"replicas":1,"selector":{"matchLabels":{"linkerd.io/control-plane-component":"identity","linkerd.io/control-plane-ns":"linkerd","linkerd.io/proxy-deployment":"linkerd-identity"}},"strategy":{"rollingUpdate":{"maxSurge":"25%","maxUnavailable":"25%"}},"template":{"metadata":{"annotations":{"cluster-autoscaler.kubernetes.io/safe-to-evict":"true","config.linkerd.io/default-inbound-policy":"all-unauthenticated","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/proxy-version":"stable-2.12.1","linkerd.io/trust-root-sha256":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"labels":{"linkerd.io/control-plane-component":"identity","linkerd.io/control-plane-ns":"linkerd","linkerd.io/proxy-deployment":"linkerd-identity","linkerd.io/workload-ns":"linkerd"}},"spec":{"containers":[{"args":["identity","-log-level=info","-log-format=plain","-controller-namespace=linkerd","-identity-trust-domain=cluster.local","-identity-issuance-lifetime=24h0m0s","-identity-clock-skew-allowance=20s","-identity-scheme=kubernetes.io/tls","-enable-pprof=false"],"env":[{"name":"LINKERD_DISABLED","value":"linkerd-await cannot block the identity controller"}],"image":"cr.l5d.io/linkerd/controller:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9990},"initialDelaySeconds":10},"name":"identity","ports":[{"containerPort":8080,"name":"grpc"},{"containerPort":9990,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9990}},"securityContext":{"allowPrivilegeEscalation":false,"runAsUser":2103},"volumeMounts":[{"mountPath":"/var/run/linkerd/identity/issuer","name":"identity-issuer"},{"mountPath":"/var/run/linkerd/identity/trust-roots/","name":"trust-roots"}]},{"env":[{"name":"_pod_name","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"_pod_ns","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"_pod_nodeName","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS","value":"8080"},{"name":"LINKERD2_PROXY_LOG","value":"warn,linkerd=info"},{"name":"LINKERD2_PROXY_LOG_FORMAT","value":"plain"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_ADDR","value":"linkerd-dst-headless.linkerd.svc.cluster.local.:8086"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_POLICY_SVC_ADDR","value":"linkerd-policy.linkerd.svc.cluster.local.:8090"},{"name":"LINKERD2_PROXY_POLICY_WORKLOAD","value":"$(_pod_ns):$(_pod_name)"},{"name":"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY","value":"all-unauthenticated"},{"name":"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT","value":"100ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT","value":"1000ms"},{"name":"LINKERD2_PROXY_CONTROL_LISTEN_ADDR","value":"0.0.0.0:4190"},{"name":"LINKERD2_PROXY_ADMIN_LISTEN_ADDR","value":"0.0.0.0:4191"},{"name":"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR","value":"127.0.0.1:4140"},{"name":"LINKERD2_PROXY_INBOUND_LISTEN_ADDR","value":"0.0.0.0:4143"},{"name":"LINKERD2_PROXY_INBOUND_IPS","valueFrom":{"fieldRef":{"fieldPath":"status.podIPs"}}},{"name":"LINKERD2_PROXY_INBOUND_PORTS","value":"8080,9990"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES","value":"svc.cluster.local."},{"name":"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION","value":"25,587,3306,4444,5432,6379,9300,11211"},{"name":"LINKERD2_PROXY_DESTINATION_CONTEXT","value":"{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}\\n"},{"name":"_pod_sa","valueFrom":{"fieldRef":{"fieldPath":"spec.serviceAccountName"}}},{"name":"_l5d_ns","value":"linkerd"},{"name":"_l5d_trustdomain","value":"cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_DIR","value":"/var/run/linkerd/identity/end-entity"},{"name":"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS","valueFrom":{"configMapKeyRef":{"key":"ca-bundle.crt","name":"linkerd-identity-trust-roots"}}},{"name":"LINKERD2_PROXY_IDENTITY_TOKEN_FILE","value":"/var/run/secrets/tokens/linkerd-identity-token"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_ADDR","value":"localhost.:8080"},{"name":"LINKERD2_PROXY_IDENTITY_LOCAL_NAME","value":"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_NAME","value":"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_POLICY_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"}],"image":"cr.l5d.io/linkerd/proxy:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/live","port":4191},"initialDelaySeconds":10},"name":"linkerd-proxy","ports":[{"containerPort":4143,"name":"linkerd-proxy"},{"containerPort":4191,"name":"linkerd-admin"}],"readinessProbe":{"httpGet":{"path":"/ready","port":4191},"initialDelaySeconds":2},"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsUser":2102},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/var/run/linkerd/identity/end-entity","name":"linkerd-identity-end-entity"},{"mountPath":"/var/run/secrets/tokens","name":"linkerd-identity-token"}]}],"initContainers":[{"args":["--incoming-proxy-port","4143","--outgoing-proxy-port","4140","--proxy-uid","2102","--inbound-ports-to-ignore","4190,4191,4567,4568","--outbound-ports-to-ignore","443"],"image":"cr.l5d.io/linkerd/proxy-init:v2.0.0","imagePullPolicy":"IfNotPresent","name":"linkerd-init","resources":{"limits":{"cpu":"100m","memory":"20Mi"},"requests":{"cpu":"100m","memory":"20Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"add":["NET_ADMIN","NET_RAW"]},"privileged":false,"readOnlyRootFilesystem":true,"runAsNonRoot":true,"runAsUser":65534},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/run","name":"linkerd-proxy-init-xtables-lock"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"linkerd-identity","volumes":[{"name":"identity-issuer","secret":{"secretName":"linkerd-identity-issuer"}},{"configMap":{"name":"linkerd-identity-trust-roots"},"name":"trust-roots"},{"emptyDir":{},"name":"linkerd-proxy-init-xtables-lock"},{"name":"linkerd-identity-token","projected":{"sources":[{"serviceAccountToken":{"audience":"identity.l5d.io","expirationSeconds":86400,"path":"linkerd-identity-token"}}]}},{"emptyDir":{"medium":"Memory"},"name":"linkerd-identity-end-entity"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-identity",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "true",
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/proxy-version": "stable-2.12.1",
            "linkerd.io/trust-root-sha256": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
          },
          "labels": {
            "linkerd.io/control-plane-component": "identity",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-identity",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "identity",
                "-log-level=info",
                "-log-format=plain",
                "-controller-namespace=linkerd",
                "-identity-trust-domain=cluster.local",
                "-identity-issuance-lifetime=24h0m0s",
                "-identity-clock-skew-allowance=20s",
                "-identity-scheme=kubernetes.io/tls",
                "-enable-pprof=false",
              ],
              "env": [
                {
                  "name": "LINKERD_DISABLED",
                  "value": "linkerd-await cannot block the identity controller",
                },
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9990,
                },
                "initialDelaySeconds": 10,
              },
              "name": "identity",
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "grpc",
                },
                {
                  "containerPort": 9990,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9990,
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 2103,
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/identity/issuer",
                  "name": "identity-issuer",
                },
                {
                  "mountPath": "/var/run/linkerd/identity/trust-roots/",
                  "name": "trust-roots",
                },
              ],
            },
            {
              "env": [
                {
                  "name": "_pod_name",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                {
                  "name": "_pod_ns",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "_pod_nodeName",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS",
                  "value": "8080",
                },
                {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "linkerd-dst-headless.linkerd.svc.cluster.local.:8086",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "linkerd-policy.linkerd.svc.cluster.local.:8090",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8080,9990",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
",
                },
                {
                  "name": "_pod_sa",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/tokens/linkerd-identity-token",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "localhost.:8080",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": [
                {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
                {
                  "mountPath": "/var/run/secrets/tokens",
                  "name": "linkerd-identity-token",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "443",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v2.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "20Mi",
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "20Mi",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "add": [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true,
                "runAsUser": 65534,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": [
                {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-identity",
          "volumes": [
            {
              "name": "identity-issuer",
              "secret": {
                "secretName": "linkerd-identity-issuer",
              },
            },
            {
              "configMap": {
                "name": "linkerd-identity-trust-roots",
              },
              "name": "trust-roots",
            },
            {
              "emptyDir": {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            {
              "name": "linkerd-identity-token",
              "projected": {
                "sources": [
                  {
                    "serviceAccountToken": {
                      "audience": "identity.l5d.io",
                      "expirationSeconds": 86400,
                      "path": "linkerd-identity-token",
                    },
                  },
                ],
              },
            },
            {
              "emptyDir": {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUxqcXlHVE9oMHZXMHNqNWZ4bCtEckF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl4TURFeU1EWTFOakV5V2hjTk1qTXhNREV5TURZMU5qRXlXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQU5nYnQzeUwzVWlneUFzb0xFVTlINjNZWFZKOEJ3UnNpYlk3SjlBVVpoaXI0WlMwanlHTwpFWDJjb1h5anZ0RzVZWUZEUkVKOEdKWm9mUitOV0hNc2ROSUVuU0dReGdnSUNQSjlBY1pqSGdWU0xxbTJUNzFjCkFVU0tUVWpQV3dNb3loK1c1UGVURS9YMGVtM1ozOFhtbTUxdEc1dmkyZndONGQ4V0gxc1lSV0w3cU9NRktLZUEKVElyV2k4b05GOVlwUjIrS0pwQndlditnU1NBem9BWmltSTY2b0ZpQTJkV0lta1gwNkpndEp3ZHpqa01oWXhYOQpIeU5MOEUwWHF2NDl5dWZUZUppOUxYSkdScC9idHpPTTFPRThxYWZJSFNFcHVJdEh1cDlpUms5aHFjSk5LWkZxCm1VajJzclBnd0hYODBjdnhhblRRa3lWQW4vam9DTDlYT2pjQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFDcnN5QTVISU9lSWFjakdJM1N1MHFGVjNLM0JWQ21YMC83VEpadFExdm0KVmZieXYvbEJrcmlzUmZWd0xkTjduRThidGllQkZvcWhrWGFielQrR3hjZlJNTEs5Wmt0K1pJb294MVZBK0tFZgpreGdRenpJSWpTSE85SVIvSzRGdDVKOS9KNzhDZnBQTlE2U2pDYkFVNVRkblVER1BJR3BZc2N6Z3AyQVZKcGtrCi9KY3orZE8yMUV6NnY0emxkSVk4ejFKMWoyZ1RBam5qZHp6cHdQaVkyNXRsL2hPSVVnT21NdE00clc3SGNQVWQKRFBhNUt4d0xqQ0NocGk3MlRLcEZiYWVFUnltQ1MvRkg4VGZFejBNQ04vcUZqWFp3dEoyUHVOSlpud1FvZ1hZaAorakgrcWVnek1iODMyVjRQSmkyZjRIakp6eWVCNFdwek5QeVdrN0xOOFN1QQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMkJ1M2ZJdmRTS0RJQ3lnc1JUMGZyZGhkVW53SEJHeUp0anNuMEJSbUdLdmhsTFNQCklZNFJmWnloZktPKzBibGhnVU5FUW53WWxtaDlINDFZY3l4MDBnU2RJWkRHQ0FnSThuMEJ4bU1lQlZJdXFiWlAKdlZ3QlJJcE5TTTliQXlqS0g1Yms5NU1UOWZSNmJkbmZ4ZWFiblcwYm0rTFovQTNoM3hZZld4aEZZdnVvNHdVbwpwNEJNaXRhTHlnMFgxaWxIYjRvbWtIQjYvNkJKSURPZ0JtS1lqcnFnV0lEWjFZaWFSZlRvbUMwbkIzT09ReUZqCkZmMGZJMHZ3VFJlcS9qM0s1OU40bUwwdGNrWkduOXUzTTR6VTRUeXBwOGdkSVNtNGkwZTZuMkpHVDJHcHdrMHAKa1dxWlNQYXlzK0RBZGZ6UnkvRnFkTkNUSlVDZitPZ0l2MWM2TndJREFRQUJBb0lCQUIybXIrWkd5blhNbWFYdQpQU1RDM2pYY0dmSFhVcDhveFR4Ym9YckxVYmJRM29Lb3czcTNJMjg0cm0rTGlBTCtqSUpQMkczRzJSakovV0QyCjQ4dnByWjJqUkd2MmtUVkk1UEZnZFgzaTI1dWZTd2UrRy9LL1RPMDZqS0FRMDB2N3JML28xRUdqekhsU3NmbWcKaXpOOEVKM28rb0RJLzErMkIrZTBBVmxlV3liWllDWGx5bFcwb0VqUnE1SUcrZndWaitnbmxiUEJXSjl5N3ZCWApxY1dneFM5WGpRN3MvTTB4NGtWTk1rNWV2ZGlVZWRtdlEvT2d1dXlwUENYMFdLd3hXOHkwaGVYUTQ4Z3htaU1sCnBRMGhVeUhrNmwyV2NYTHhaUXBPTUdHSEpab1dadmFtM2d1SmdkdnZyNE9OMkhmTUFkcmxoZWNaNEswbHM3ZEwKYUJDRjJRRUNnWUVBNkRGV1hrL1VpVjc4NDQwaVZnZWlnN0dkN0FIOVk2TkVrZVQ5bmxNMFdIemI0SnZ4NTRQcwpWcVpsSXV6SThVek42eFFJUjROZUh4NXF2VDhEdEhqbkZWczZEandtQlI0WVhFYXBRd0MyeEZ2QitrN1lXOFEvCi9weitvRmF1RlVCMEtEU0VGRlgxN3FUYml1ZjhEZENhaWE1dzdBN0RCbFVIWjBLajlHUWhLaHNDZ1lFQTdrUXcKbXhqVzNhbjQ5bnRBRFZYVDNHZWQ4T1ZBb2RDa01FNG5tUUlqNjh2UVJtS0pKWUNRNURkRGZBQ0xDVlhwY0t5UAptL0lsYXlPOGdlSGcrL2pCRW9lVVZLaDM2TURrOTJ4VndERFZKV0lzNWZBbEUvL29JZWt1MVlKWEVEbmNLcUpZCmI4KzlLdkVMVjRpTldoMkRRblBYQk44NStCMTZ5cEFIRHdHSXNoVUNnWUVBbjB3Sjl4Wkp1QjBrM25DYlYrNVEKL296Q3pZSG45NDJ4bzI0NDJZQTM3MlZwN0VUUXg0Ym9nK0lRak05cVpMSE9yRExJSTFmcklPcGJUSTZJMmk0QQpTOVNVbGVPS0tnU2xyZGtFa3VWUWZwSjlHRjh6YkhITmZiN3pxY2tPRWFKd2pvekkrTEtvMFJybFMvMHdIY0k1CjQ2OTc1VmVUVVNyUXMzVXl5cDVQYW5VQ2dZQUErVzVwYy9TTSs0RDFJUlBsK2cvZnV0eStlM0dFTitJMEFGM1IKRmwwblBiSWdWNDdRQkhLVFBGYWVUekpDVzRPVTNsL0g5M21Ic3FHMnRrSEJSZ2NrR0VIWEJzbFd2bE14WDlRSgo4U2t0K2ZUTkMrcGE1cFVBYm4rdWg5WHJUeEZEYTE2Sk5vUkRoTERUTHMvRktwRzYxOVp0UXF4dUExRFpPeldNCkxpbHM4UUtCZ1FDMHBMZ2l0eUc1NjdleHZkbFc3RithcWNldGU2RzFsREdjZEE5Q29PVDNYdTBUa1MrUzJpcWwKaWJxRFdaV0c5Q3BFN2VFK2l3cEdWMEx2MzVOS0JwUCtGUGF6Z1lhbFNLblBmdzRNaWUzZ0R4T0RXM2xCcTNxcQo5bEliMmNZU3E0ZDIvVUVPV3U1MXIxdG52QXZKUUwvN3ZJKysxdllyTnhwZ0lWU2dMMUtRR1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUxqcXlHVE9oMHZXMHNqNWZ4bCtEckF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl4TURFeU1EWTFOakV5V2hjTk1qTXhNREV5TURZMU5qRXlXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQU5nYnQzeUwzVWlneUFzb0xFVTlINjNZWFZKOEJ3UnNpYlk3SjlBVVpoaXI0WlMwanlHTwpFWDJjb1h5anZ0RzVZWUZEUkVKOEdKWm9mUitOV0hNc2ROSUVuU0dReGdnSUNQSjlBY1pqSGdWU0xxbTJUNzFjCkFVU0tUVWpQV3dNb3loK1c1UGVURS9YMGVtM1ozOFhtbTUxdEc1dmkyZndONGQ4V0gxc1lSV0w3cU9NRktLZUEKVElyV2k4b05GOVlwUjIrS0pwQndlditnU1NBem9BWmltSTY2b0ZpQTJkV0lta1gwNkpndEp3ZHpqa01oWXhYOQpIeU5MOEUwWHF2NDl5dWZUZUppOUxYSkdScC9idHpPTTFPRThxYWZJSFNFcHVJdEh1cDlpUms5aHFjSk5LWkZxCm1VajJzclBnd0hYODBjdnhhblRRa3lWQW4vam9DTDlYT2pjQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFDcnN5QTVISU9lSWFjakdJM1N1MHFGVjNLM0JWQ21YMC83VEpadFExdm0KVmZieXYvbEJrcmlzUmZWd0xkTjduRThidGllQkZvcWhrWGFielQrR3hjZlJNTEs5Wmt0K1pJb294MVZBK0tFZgpreGdRenpJSWpTSE85SVIvSzRGdDVKOS9KNzhDZnBQTlE2U2pDYkFVNVRkblVER1BJR3BZc2N6Z3AyQVZKcGtrCi9KY3orZE8yMUV6NnY0emxkSVk4ejFKMWoyZ1RBam5qZHp6cHdQaVkyNXRsL2hPSVVnT21NdE00clc3SGNQVWQKRFBhNUt4d0xqQ0NocGk3MlRLcEZiYWVFUnltQ1MvRkg4VGZFejBNQ04vcUZqWFp3dEoyUHVOSlpud1FvZ1hZaAorakgrcWVnek1iODMyVjRQSmkyZjRIakp6eWVCNFdwek5QeVdrN0xOOFN1QQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMkJ1M2ZJdmRTS0RJQ3lnc1JUMGZyZGhkVW53SEJHeUp0anNuMEJSbUdLdmhsTFNQCklZNFJmWnloZktPKzBibGhnVU5FUW53WWxtaDlINDFZY3l4MDBnU2RJWkRHQ0FnSThuMEJ4bU1lQlZJdXFiWlAKdlZ3QlJJcE5TTTliQXlqS0g1Yms5NU1UOWZSNmJkbmZ4ZWFiblcwYm0rTFovQTNoM3hZZld4aEZZdnVvNHdVbwpwNEJNaXRhTHlnMFgxaWxIYjRvbWtIQjYvNkJKSURPZ0JtS1lqcnFnV0lEWjFZaWFSZlRvbUMwbkIzT09ReUZqCkZmMGZJMHZ3VFJlcS9qM0s1OU40bUwwdGNrWkduOXUzTTR6VTRUeXBwOGdkSVNtNGkwZTZuMkpHVDJHcHdrMHAKa1dxWlNQYXlzK0RBZGZ6UnkvRnFkTkNUSlVDZitPZ0l2MWM2TndJREFRQUJBb0lCQUIybXIrWkd5blhNbWFYdQpQU1RDM2pYY0dmSFhVcDhveFR4Ym9YckxVYmJRM29Lb3czcTNJMjg0cm0rTGlBTCtqSUpQMkczRzJSakovV0QyCjQ4dnByWjJqUkd2MmtUVkk1UEZnZFgzaTI1dWZTd2UrRy9LL1RPMDZqS0FRMDB2N3JML28xRUdqekhsU3NmbWcKaXpOOEVKM28rb0RJLzErMkIrZTBBVmxlV3liWllDWGx5bFcwb0VqUnE1SUcrZndWaitnbmxiUEJXSjl5N3ZCWApxY1dneFM5WGpRN3MvTTB4NGtWTk1rNWV2ZGlVZWRtdlEvT2d1dXlwUENYMFdLd3hXOHkwaGVYUTQ4Z3htaU1sCnBRMGhVeUhrNmwyV2NYTHhaUXBPTUdHSEpab1dadmFtM2d1SmdkdnZyNE9OMkhmTUFkcmxoZWNaNEswbHM3ZEwKYUJDRjJRRUNnWUVBNkRGV1hrL1VpVjc4NDQwaVZnZWlnN0dkN0FIOVk2TkVrZVQ5bmxNMFdIemI0SnZ4NTRQcwpWcVpsSXV6SThVek42eFFJUjROZUh4NXF2VDhEdEhqbkZWczZEandtQlI0WVhFYXBRd0MyeEZ2QitrN1lXOFEvCi9weitvRmF1RlVCMEtEU0VGRlgxN3FUYml1ZjhEZENhaWE1dzdBN0RCbFVIWjBLajlHUWhLaHNDZ1lFQTdrUXcKbXhqVzNhbjQ5bnRBRFZYVDNHZWQ4T1ZBb2RDa01FNG5tUUlqNjh2UVJtS0pKWUNRNURkRGZBQ0xDVlhwY0t5UAptL0lsYXlPOGdlSGcrL2pCRW9lVVZLaDM2TURrOTJ4VndERFZKV0lzNWZBbEUvL29JZWt1MVlKWEVEbmNLcUpZCmI4KzlLdkVMVjRpTldoMkRRblBYQk44NStCMTZ5cEFIRHdHSXNoVUNnWUVBbjB3Sjl4Wkp1QjBrM25DYlYrNVEKL296Q3pZSG45NDJ4bzI0NDJZQTM3MlZwN0VUUXg0Ym9nK0lRak05cVpMSE9yRExJSTFmcklPcGJUSTZJMmk0QQpTOVNVbGVPS0tnU2xyZGtFa3VWUWZwSjlHRjh6YkhITmZiN3pxY2tPRWFKd2pvekkrTEtvMFJybFMvMHdIY0k1CjQ2OTc1VmVUVVNyUXMzVXl5cDVQYW5VQ2dZQUErVzVwYy9TTSs0RDFJUlBsK2cvZnV0eStlM0dFTitJMEFGM1IKRmwwblBiSWdWNDdRQkhLVFBGYWVUekpDVzRPVTNsL0g5M21Ic3FHMnRrSEJSZ2NrR0VIWEJzbFd2bE14WDlRSgo4U2t0K2ZUTkMrcGE1cFVBYm4rdWg5WHJUeEZEYTE2Sk5vUkRoTERUTHMvRktwRzYxOVp0UXF4dUExRFpPeldNCkxpbHM4UUtCZ1FDMHBMZ2l0eUc1NjdleHZkbFc3RithcWNldGU2RzFsREdjZEE5Q29PVDNYdTBUa1MrUzJpcWwKaWJxRFdaV0c5Q3BFN2VFK2l3cEdWMEx2MzVOS0JwUCtGUGF6Z1lhbFNLblBmdzRNaWUzZ0R4T0RXM2xCcTNxcQo5bEliMmNZU3E0ZDIvVUVPV3U1MXIxdG52QXZKUUwvN3ZJKysxdllyTnhwZ0lWU2dMMUtRR1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-sp-validator-k8s-tls","namespace":"linkerd"},"type":"kubernetes.io/tls"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-sp-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-sp-validator-k8s-tls.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "type": "kubernetes.io/tls",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"heartbeat","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-heartbeat","namespace":"linkerd"}}
",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-heartbeat.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "config.linkerd.io/opaque-ports": "443",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"config.linkerd.io/opaque-ports":"443","linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-proxy-injector","namespace":"linkerd"},"spec":{"ports":[{"name":"proxy-injector","port":443,"targetPort":"proxy-injector"}],"selector":{"linkerd.io/control-plane-component":"proxy-injector"},"type":"ClusterIP"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-proxy-injector",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"identity","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-identity-headless","namespace":"linkerd"},"spec":{"clusterIP":"None","ports":[{"name":"grpc","port":8080,"targetPort":8080}],"selector":{"linkerd.io/control-plane-component":"identity"}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-identity-headless",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-identity-headless.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-linkerd-destination"},"rules":[{"apiGroups":["apps"],"resources":["replicasets"],"verbs":["list","get","watch"]},{"apiGroups":["batch"],"resources":["jobs"],"verbs":["list","get","watch"]},{"apiGroups":[""],"resources":["pods","endpoints","services","nodes","namespaces"],"verbs":["list","get","watch"]},{"apiGroups":["linkerd.io"],"resources":["serviceprofiles"],"verbs":["list","get","watch"]},{"apiGroups":["discovery.k8s.io"],"resources":["endpointslices"],"verbs":["list","get","watch"]}]}
",
      },
      "name": "linkerd-linkerd-destination",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-destination.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "v1",
    "data": {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRYnhKWXU4Z0xHV1l2TW8xRFloRFZsakFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpJeE1ERXlNRFkxTmpFeVdoY05Nak14TURFeU1EWTFOakV5V2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM1MXRDUHpXZHVKVHBSWFBiZklpSlFqZlQ2Z1FRMVJ4di9uV1J0YThuagpFbkNGTFl1YWtURTJLZEFlUndEenBRTldBdVBiTGlvSVA5RytRRHVpakRndjlKRlJNMVhhSDQwbytqenNFZ2FICm8vbi9LeStKb0hWbGtEcndoWDNRazlIOEIyNU1BT1dBNXNVaTdncEsxR2JzSmZOMzd5LzBlbENCNjY2U01WSncKMXlmSlVWbGxKVFg5RDVPR3VlaDdOcjVRVkVFbm9hTG5tOHlHMjZwQ3p5VkFmMnh3WGFUUTlWY3Q5RERRUEpXeQoycjl5ejV1VXk5WWV6eW9UNU1aOFVXNEZNeWo2cWNlSEtTc3gvM1BDZjc4UXpwR0xNRjJZM3grV0ZJeWpVZ2FkCmR2YmFxLzNidG5DNDdCcWx2RThPc3hvTG4vbU5ldnNSNjlzZWpRNCttUk1YQWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFWjdSay9haUp6aGJLem5Gb3pudEhmK2xmaVcKbU9VSmorV0QxY2JqMlhqdHZBcksvUjNYL1lYTTVCMWdNRDFJQjMrL2dsb1BEa1NqM0MrVWlDazh4WGh6b2VpdwpiSHhNdEdWVXVpQVpHSTdpc2NxOFZJaFQ3QjFWTFB4eUtSYzYvUytnMTlkRURWdDJRMGFvS012d2RkRDE4V3pICkdhWDFJUmNZUVgwYW55RXZpRzBhaEZRc1JvRytkVmZESzVDRVdkUzhXT3lET1ErNFhWOWR5d1h4ckpISDdXQlEKV09SSzVKV2pyUWg1bEdXaUh1NHQvcEFsalJKZWJ5NDU0T3l2dENWcTVkSElIOVl1QmRFc0d5cmROL0Y0VTBGMgpIM0NMZ3dTZlh2NXBUazdaUHZtSXdySHd0WHkxbE1ucHh6WVF3UmI5cTQweTZOUlNvZENjbnVXaVNkUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdWRiUWo4MW5iaVU2VVZ6MjN5SWlVSTMwK29FRU5VY2IvNTFrYld2SjR4SndoUzJMCm1wRXhOaW5RSGtjQTg2VURWZ0xqMnk0cUNEL1J2a0E3b293NEwvU1JVVE5WMmgrTktQbzg3QklHaDZQNS95c3YKaWFCMVpaQTY4SVY5MEpQUi9BZHVUQURsZ09iRkl1NEtTdFJtN0NYemQrOHY5SHBRZ2V1dWtqRlNjTmNueVZGWgpaU1UxL1ErVGhybm9lemErVUZSQko2R2k1NXZNaHR1cVFzOGxRSDlzY0YyazBQVlhMZlF3MER5VnN0cS9jcytiCmxNdldIczhxRStUR2ZGRnVCVE1vK3FuSGh5a3JNZjl6d24rL0VNNlJpekJkbU44ZmxoU01vMUlHblhiMjJxdjkKMjdad3VPd2FwYnhQRHJNYUM1LzVqWHI3RWV2YkhvME9QcGtURndJREFRQUJBb0lCQURMQ3YxTVlLdkZHRCtqYgplTDg0QnFGME5QOGJzSGVSQmMvTFFQdzJYZjI5TXFqZDZPeitUYS9hdWZNYk4rSlZKMVVlRXZqeVloN0F0OXk4CmxNMXdlWVIzekIyZTVRdGdaT0ZWZ01DR3ArdnkyVDFlb1d4NVBMZlNMcGMyRDBpaXA4K3NnKzhVcTV1SzdUdisKUXlkdlh2R1A2REhSVG9yN3dmUEsyWE1yTDdhTVJ5Yy9KSi82RXBnYytzaUNxakpRSkRMR09xM01MWmMybXdIVwpiZzF2NHo3VlBTWjBNRk1ka1BiNEYxV0d2TEJBQXVZVWtEa21mTTRPcVNDUm00TlVrSURNVHJRVllqcmRySmp6CjExSk1jMzhkTUdaNFF5UDc5VVNqajFBM3VSRFYvTGVYQjFvcld2SGYrc1hkUmVSdTd5cmRwemhwT25xOWVxWmMKMmQ4bWlXRUNnWUVBNEx4N1pMWVRqRzFVaWdiTjBWRkpva2M0RWVQaE5aT1dJdDNQUmRJM1dXUzJaZGtBbCsxZQovK1IxTHhqNmtQeWl6UVNwWi93Sm1ZVmR1VmEvTExFWjE3elJBa2xUUmtXbk5qdDJBRVNDT1lJdllFMDcwcmRyCkcxdnZMcmUySEJTNTlFczlrY2VwNE9PZmlTd3c2MnFFRUwwL1pxVTBWVUxzK3FXdWNsYkNqMmNDZ1lFQTA3RVgKWmdDV25BUVBYdkMvN3Y0d2RaYkJFVGZYVVRVRDErY3Q4WnNObU9GQmJORjkzOEJIcTdLUVdXMjR4UkswNUVHOQpCMCtkSjdvRGpNQkJBNjJyb0hJTGFMNHR5U3ZpMXJVczlxUzhFY3c0WUVEOTZrYyswL1FBcStmOWkwK1hYTGdUCisvaU5lNDBmcDN4dXY0QUU4TFlsbjlsRWx3V2NleklTdENqdUFORUNnWUVBZ0gyREZ6dTZ4WWtrMHAyOVF6WDAKb2FHU2Z6Z0k1VGJ5bWhDemx6bnZoMTY3b2xPRnNWZDMvMXBCWGFJc2NJVGhGOUxZZ0tsclc2a1N3d3JEMXV1UwoyUFFOay84VWE1TWJYVGgxNlFWQ1oxcjFkMXZ4SGpMY1BCSStHRG5WRncwS25KQUFMYjg0YzJueEp0NXJRYzN1Cm9CdHppbDVlSTNsV1FLQkZzdjNEMDNVQ2dZQmtBNUFOZGd1eURFMEN5dld6UVU2OXo0ckp5cnNrdDhwb0QrWHAKOXhxV2R4NEUvbmpjNUtnMzIzWk5lZ1JJdjR6TkpxM2JMV2NQWk5mV2dPSjJqVysvcndIcTY2Y1FHM2JoZjltTgpjY2tWRTRvekY2R2ZOU2ZlMWJJWGhkU0pKQUpjSU8vNEpMY2JmMUpNUEFMSzRQMzBoK29BdXBLb1UxTlo5UTlYCkpOdEZjUUtCZ0RCVjJKa1BNajdhSWMvL05pdGhmVEcrVDk4YktBUDhmQnRZZ1FEVmxuMVlmNS9XRmZ3SGVXRVcKUXROdXc5QmdtanhIUDRReFRxR0krVVNqTjJ1TzVyK0hNdUgrNlRydThSbVRRMkJad1ZEcnhDQXo5Uks1OTFuUgo0dWZpeFlQZGs5Ly9PU0lhdUgzYlp2RGhHbzcySFNCWjNVRm9KakxTamVJcUx4N25CdGFiCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRYnhKWXU4Z0xHV1l2TW8xRFloRFZsakFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpJeE1ERXlNRFkxTmpFeVdoY05Nak14TURFeU1EWTFOakV5V2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM1MXRDUHpXZHVKVHBSWFBiZklpSlFqZlQ2Z1FRMVJ4di9uV1J0YThuagpFbkNGTFl1YWtURTJLZEFlUndEenBRTldBdVBiTGlvSVA5RytRRHVpakRndjlKRlJNMVhhSDQwbytqenNFZ2FICm8vbi9LeStKb0hWbGtEcndoWDNRazlIOEIyNU1BT1dBNXNVaTdncEsxR2JzSmZOMzd5LzBlbENCNjY2U01WSncKMXlmSlVWbGxKVFg5RDVPR3VlaDdOcjVRVkVFbm9hTG5tOHlHMjZwQ3p5VkFmMnh3WGFUUTlWY3Q5RERRUEpXeQoycjl5ejV1VXk5WWV6eW9UNU1aOFVXNEZNeWo2cWNlSEtTc3gvM1BDZjc4UXpwR0xNRjJZM3grV0ZJeWpVZ2FkCmR2YmFxLzNidG5DNDdCcWx2RThPc3hvTG4vbU5ldnNSNjlzZWpRNCttUk1YQWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFWjdSay9haUp6aGJLem5Gb3pudEhmK2xmaVcKbU9VSmorV0QxY2JqMlhqdHZBcksvUjNYL1lYTTVCMWdNRDFJQjMrL2dsb1BEa1NqM0MrVWlDazh4WGh6b2VpdwpiSHhNdEdWVXVpQVpHSTdpc2NxOFZJaFQ3QjFWTFB4eUtSYzYvUytnMTlkRURWdDJRMGFvS012d2RkRDE4V3pICkdhWDFJUmNZUVgwYW55RXZpRzBhaEZRc1JvRytkVmZESzVDRVdkUzhXT3lET1ErNFhWOWR5d1h4ckpISDdXQlEKV09SSzVKV2pyUWg1bEdXaUh1NHQvcEFsalJKZWJ5NDU0T3l2dENWcTVkSElIOVl1QmRFc0d5cmROL0Y0VTBGMgpIM0NMZ3dTZlh2NXBUazdaUHZtSXdySHd0WHkxbE1ucHh6WVF3UmI5cTQweTZOUlNvZENjbnVXaVNkUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdWRiUWo4MW5iaVU2VVZ6MjN5SWlVSTMwK29FRU5VY2IvNTFrYld2SjR4SndoUzJMCm1wRXhOaW5RSGtjQTg2VURWZ0xqMnk0cUNEL1J2a0E3b293NEwvU1JVVE5WMmgrTktQbzg3QklHaDZQNS95c3YKaWFCMVpaQTY4SVY5MEpQUi9BZHVUQURsZ09iRkl1NEtTdFJtN0NYemQrOHY5SHBRZ2V1dWtqRlNjTmNueVZGWgpaU1UxL1ErVGhybm9lemErVUZSQko2R2k1NXZNaHR1cVFzOGxRSDlzY0YyazBQVlhMZlF3MER5VnN0cS9jcytiCmxNdldIczhxRStUR2ZGRnVCVE1vK3FuSGh5a3JNZjl6d24rL0VNNlJpekJkbU44ZmxoU01vMUlHblhiMjJxdjkKMjdad3VPd2FwYnhQRHJNYUM1LzVqWHI3RWV2YkhvME9QcGtURndJREFRQUJBb0lCQURMQ3YxTVlLdkZHRCtqYgplTDg0QnFGME5QOGJzSGVSQmMvTFFQdzJYZjI5TXFqZDZPeitUYS9hdWZNYk4rSlZKMVVlRXZqeVloN0F0OXk4CmxNMXdlWVIzekIyZTVRdGdaT0ZWZ01DR3ArdnkyVDFlb1d4NVBMZlNMcGMyRDBpaXA4K3NnKzhVcTV1SzdUdisKUXlkdlh2R1A2REhSVG9yN3dmUEsyWE1yTDdhTVJ5Yy9KSi82RXBnYytzaUNxakpRSkRMR09xM01MWmMybXdIVwpiZzF2NHo3VlBTWjBNRk1ka1BiNEYxV0d2TEJBQXVZVWtEa21mTTRPcVNDUm00TlVrSURNVHJRVllqcmRySmp6CjExSk1jMzhkTUdaNFF5UDc5VVNqajFBM3VSRFYvTGVYQjFvcld2SGYrc1hkUmVSdTd5cmRwemhwT25xOWVxWmMKMmQ4bWlXRUNnWUVBNEx4N1pMWVRqRzFVaWdiTjBWRkpva2M0RWVQaE5aT1dJdDNQUmRJM1dXUzJaZGtBbCsxZQovK1IxTHhqNmtQeWl6UVNwWi93Sm1ZVmR1VmEvTExFWjE3elJBa2xUUmtXbk5qdDJBRVNDT1lJdllFMDcwcmRyCkcxdnZMcmUySEJTNTlFczlrY2VwNE9PZmlTd3c2MnFFRUwwL1pxVTBWVUxzK3FXdWNsYkNqMmNDZ1lFQTA3RVgKWmdDV25BUVBYdkMvN3Y0d2RaYkJFVGZYVVRVRDErY3Q4WnNObU9GQmJORjkzOEJIcTdLUVdXMjR4UkswNUVHOQpCMCtkSjdvRGpNQkJBNjJyb0hJTGFMNHR5U3ZpMXJVczlxUzhFY3c0WUVEOTZrYyswL1FBcStmOWkwK1hYTGdUCisvaU5lNDBmcDN4dXY0QUU4TFlsbjlsRWx3V2NleklTdENqdUFORUNnWUVBZ0gyREZ6dTZ4WWtrMHAyOVF6WDAKb2FHU2Z6Z0k1VGJ5bWhDemx6bnZoMTY3b2xPRnNWZDMvMXBCWGFJc2NJVGhGOUxZZ0tsclc2a1N3d3JEMXV1UwoyUFFOay84VWE1TWJYVGgxNlFWQ1oxcjFkMXZ4SGpMY1BCSStHRG5WRncwS25KQUFMYjg0YzJueEp0NXJRYzN1Cm9CdHppbDVlSTNsV1FLQkZzdjNEMDNVQ2dZQmtBNUFOZGd1eURFMEN5dld6UVU2OXo0ckp5cnNrdDhwb0QrWHAKOXhxV2R4NEUvbmpjNUtnMzIzWk5lZ1JJdjR6TkpxM2JMV2NQWk5mV2dPSjJqVysvcndIcTY2Y1FHM2JoZjltTgpjY2tWRTRvekY2R2ZOU2ZlMWJJWGhkU0pKQUpjSU8vNEpMY2JmMUpNUEFMSzRQMzBoK29BdXBLb1UxTlo5UTlYCkpOdEZjUUtCZ0RCVjJKa1BNajdhSWMvL05pdGhmVEcrVDk4YktBUDhmQnRZZ1FEVmxuMVlmNS9XRmZ3SGVXRVcKUXROdXc5QmdtanhIUDRReFRxR0krVVNqTjJ1TzVyK0hNdUgrNlRydThSbVRRMkJad1ZEcnhDQXo5Uks1OTFuUgo0dWZpeFlQZGs5Ly9PU0lhdUgzYlp2RGhHbzcySFNCWjNVRm9KakxTamVJcUx4N25CdGFiCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-policy-validator-k8s-tls","namespace":"linkerd"},"type":"kubernetes.io/tls"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-policy-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-policy-validator-k8s-tls.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "type": "kubernetes.io/tls",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-heartbeat"},"rules":[{"apiGroups":[""],"resources":["namespaces"],"verbs":["list"]},{"apiGroups":["linkerd.io"],"resources":["serviceprofiles"],"verbs":["list"]}]}
",
      },
      "name": "linkerd-heartbeat",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-heartbeat.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-dst","namespace":"linkerd"},"spec":{"ports":[{"name":"grpc","port":8086,"targetPort":8086}],"selector":{"linkerd.io/control-plane-component":"destination"},"type":"ClusterIP"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-dst",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-service-linkerd-linkerd-dst.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-linkerd-proxy-injector"},"rules":[{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]},{"apiGroups":[""],"resources":["namespaces","replicationcontrollers"],"verbs":["list","get","watch"]},{"apiGroups":[""],"resources":["pods"],"verbs":["list","watch"]},{"apiGroups":["extensions","apps"],"resources":["deployments","replicasets","daemonsets","statefulsets"],"verbs":["list","get","watch"]},{"apiGroups":["extensions","batch"],"resources":["cronjobs","jobs"],"verbs":["list","get","watch"]}]}
",
      },
      "name": "linkerd-linkerd-proxy-injector",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"Linkerd","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-destination-policy"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"linkerd-policy"},"subjects":[{"kind":"ServiceAccount","name":"linkerd-destination","namespace":"linkerd"}]}
",
      },
      "name": "linkerd-destination-policy",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-destination-policy.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"destination","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-destination","namespace":"linkerd"},"spec":{"replicas":1,"selector":{"matchLabels":{"linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd","linkerd.io/proxy-deployment":"linkerd-destination"}},"strategy":{"rollingUpdate":{"maxSurge":"25%","maxUnavailable":"25%"}},"template":{"metadata":{"annotations":{"cluster-autoscaler.kubernetes.io/safe-to-evict":"true","config.linkerd.io/default-inbound-policy":"all-unauthenticated","linkerd.io/created-by":"linkerd/helm stable-2.12.1","linkerd.io/helm-release-version":"1","linkerd.io/proxy-version":"stable-2.12.1","linkerd.io/trust-root-sha256":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"labels":{"linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd","linkerd.io/proxy-deployment":"linkerd-destination","linkerd.io/workload-ns":"linkerd"}},"spec":{"containers":[{"env":[{"name":"_pod_name","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"_pod_ns","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"_pod_nodeName","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"LINKERD2_PROXY_LOG","value":"warn,linkerd=info"},{"name":"LINKERD2_PROXY_LOG_FORMAT","value":"plain"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_ADDR","value":"localhost.:8086"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_POLICY_SVC_ADDR","value":"localhost.:8090"},{"name":"LINKERD2_PROXY_POLICY_WORKLOAD","value":"$(_pod_ns):$(_pod_name)"},{"name":"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY","value":"all-unauthenticated"},{"name":"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT","value":"100ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT","value":"1000ms"},{"name":"LINKERD2_PROXY_CONTROL_LISTEN_ADDR","value":"0.0.0.0:4190"},{"name":"LINKERD2_PROXY_ADMIN_LISTEN_ADDR","value":"0.0.0.0:4191"},{"name":"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR","value":"127.0.0.1:4140"},{"name":"LINKERD2_PROXY_INBOUND_LISTEN_ADDR","value":"0.0.0.0:4143"},{"name":"LINKERD2_PROXY_INBOUND_IPS","valueFrom":{"fieldRef":{"fieldPath":"status.podIPs"}}},{"name":"LINKERD2_PROXY_INBOUND_PORTS","value":"8086,8090,8443,9443,9990,9996,9997"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES","value":"svc.cluster.local."},{"name":"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION","value":"25,587,3306,4444,5432,6379,9300,11211"},{"name":"LINKERD2_PROXY_DESTINATION_CONTEXT","value":"{\\"ns\\":\\"$(_pod_ns)\\", \\"nodeName\\":\\"$(_pod_nodeName)\\"}\\n"},{"name":"_pod_sa","valueFrom":{"fieldRef":{"fieldPath":"spec.serviceAccountName"}}},{"name":"_l5d_ns","value":"linkerd"},{"name":"_l5d_trustdomain","value":"cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_DIR","value":"/var/run/linkerd/identity/end-entity"},{"name":"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS","valueFrom":{"configMapKeyRef":{"key":"ca-bundle.crt","name":"linkerd-identity-trust-roots"}}},{"name":"LINKERD2_PROXY_IDENTITY_TOKEN_FILE","value":"/var/run/secrets/tokens/linkerd-identity-token"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_ADDR","value":"linkerd-identity-headless.linkerd.svc.cluster.local.:8080"},{"name":"LINKERD2_PROXY_IDENTITY_LOCAL_NAME","value":"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_NAME","value":"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_POLICY_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"}],"image":"cr.l5d.io/linkerd/proxy:stable-2.12.1","imagePullPolicy":"IfNotPresent","lifecycle":{"postStart":{"exec":{"command":["/usr/lib/linkerd/linkerd-await","--timeout=2m"]}}},"livenessProbe":{"httpGet":{"path":"/live","port":4191},"initialDelaySeconds":10},"name":"linkerd-proxy","ports":[{"containerPort":4143,"name":"linkerd-proxy"},{"containerPort":4191,"name":"linkerd-admin"}],"readinessProbe":{"httpGet":{"path":"/ready","port":4191},"initialDelaySeconds":2},"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsUser":2102},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/var/run/linkerd/identity/end-entity","name":"linkerd-identity-end-entity"},{"mountPath":"/var/run/secrets/tokens","name":"linkerd-identity-token"}]},{"args":["destination","-addr=:8086","-controller-namespace=linkerd","-enable-h2-upgrade=true","-log-level=info","-log-format=plain","-enable-endpoint-slices=true","-cluster-domain=cluster.local","-identity-trust-domain=cluster.local","-default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211","-enable-pprof=false"],"image":"cr.l5d.io/linkerd/controller:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9996},"initialDelaySeconds":10},"name":"destination","ports":[{"containerPort":8086,"name":"grpc"},{"containerPort":9996,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9996}},"securityContext":{"allowPrivilegeEscalation":false,"runAsUser":2103}},{"args":["sp-validator","-log-level=info","-log-format=plain","-enable-pprof=false"],"image":"cr.l5d.io/linkerd/controller:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9997},"initialDelaySeconds":10},"name":"sp-validator","ports":[{"containerPort":8443,"name":"sp-validator"},{"containerPort":9997,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9997}},"securityContext":{"allowPrivilegeEscalation":false,"runAsUser":2103},"volumeMounts":[{"mountPath":"/var/run/linkerd/tls","name":"sp-tls","readOnly":true}]},{"args":["--admin-addr=0.0.0.0:9990","--control-plane-namespace=linkerd","--grpc-addr=0.0.0.0:8090","--server-addr=0.0.0.0:9443","--server-tls-key=/var/run/linkerd/tls/tls.key","--server-tls-certs=/var/run/linkerd/tls/tls.crt","--cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16","--identity-domain=cluster.local","--default-policy=all-unauthenticated","--log-level=info","--log-format=plain","--probe-networks=0.0.0.0/0"],"image":"cr.l5d.io/linkerd/policy-controller:stable-2.12.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/live","port":"admin"}},"name":"policy","ports":[{"containerPort":8090,"name":"grpc"},{"containerPort":9990,"name":"admin"},{"containerPort":9443,"name":"policy-https"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":"admin"},"initialDelaySeconds":10},"securityContext":{"allowPrivilegeEscalation":false,"runAsUser":2103},"volumeMounts":[{"mountPath":"/var/run/linkerd/tls","name":"policy-tls","readOnly":true}]}],"initContainers":[{"args":["--incoming-proxy-port","4143","--outgoing-proxy-port","4140","--proxy-uid","2102","--inbound-ports-to-ignore","4190,4191,4567,4568","--outbound-ports-to-ignore","443"],"image":"cr.l5d.io/linkerd/proxy-init:v2.0.0","imagePullPolicy":"IfNotPresent","name":"linkerd-init","resources":{"limits":{"cpu":"100m","memory":"20Mi"},"requests":{"cpu":"100m","memory":"20Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"add":["NET_ADMIN","NET_RAW"]},"privileged":false,"readOnlyRootFilesystem":true,"runAsNonRoot":true,"runAsUser":65534},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/run","name":"linkerd-proxy-init-xtables-lock"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"linkerd-destination","volumes":[{"name":"sp-tls","secret":{"secretName":"linkerd-sp-validator-k8s-tls"}},{"name":"policy-tls","secret":{"secretName":"linkerd-policy-validator-k8s-tls"}},{"emptyDir":{},"name":"linkerd-proxy-init-xtables-lock"},{"name":"linkerd-identity-token","projected":{"sources":[{"serviceAccountToken":{"audience":"identity.l5d.io","expirationSeconds":86400,"path":"linkerd-identity-token"}}]}},{"emptyDir":{"medium":"Memory"},"name":"linkerd-identity-end-entity"}]}}}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-destination",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/apps_v1-deployment-linkerd-linkerd-destination.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "true",
            "config.linkerd.io/default-inbound-policy": "all-unauthenticated",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
            "linkerd.io/helm-release-version": "1",
            "linkerd.io/proxy-version": "stable-2.12.1",
            "linkerd.io/trust-root-sha256": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
          },
          "labels": {
            "linkerd.io/control-plane-component": "destination",
            "linkerd.io/control-plane-ns": "linkerd",
            "linkerd.io/proxy-deployment": "linkerd-destination",
            "linkerd.io/workload-ns": "linkerd",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "_pod_name",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                {
                  "name": "_pod_ns",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "_pod_nodeName",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.nodeName",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_LOG",
                  "value": "warn,linkerd=info",
                },
                {
                  "name": "LINKERD2_PROXY_LOG_FORMAT",
                  "value": "plain",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_ADDR",
                  "value": "localhost.:8086",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_SVC_ADDR",
                  "value": "localhost.:8090",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_WORKLOAD",
                  "value": "$(_pod_ns):$(_pod_name)",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_DEFAULT_POLICY",
                  "value": "all-unauthenticated",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS",
                  "value": "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT",
                  "value": "100ms",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT",
                  "value": "1000ms",
                },
                {
                  "name": "LINKERD2_PROXY_CONTROL_LISTEN_ADDR",
                  "value": "0.0.0.0:4190",
                },
                {
                  "name": "LINKERD2_PROXY_ADMIN_LISTEN_ADDR",
                  "value": "0.0.0.0:4191",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR",
                  "value": "127.0.0.1:4140",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_LISTEN_ADDR",
                  "value": "0.0.0.0:4143",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_IPS",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIPs",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS",
                  "value": "8086,8090,8443,9443,9990,9996,9997",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES",
                  "value": "svc.cluster.local.",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE",
                  "value": "10000ms",
                },
                {
                  "name": "LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE",
                  "value": "10000ms",
                },
                {
                  "name": "LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION",
                  "value": "25,587,3306,4444,5432,6379,9300,11211",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_CONTEXT",
                  "value": "{"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
",
                },
                {
                  "name": "_pod_sa",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.serviceAccountName",
                    },
                  },
                },
                {
                  "name": "_l5d_ns",
                  "value": "linkerd",
                },
                {
                  "name": "_l5d_trustdomain",
                  "value": "cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_DIR",
                  "value": "/var/run/linkerd/identity/end-entity",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "ca-bundle.crt",
                      "name": "linkerd-identity-trust-roots",
                    },
                  },
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_TOKEN_FILE",
                  "value": "/var/run/secrets/tokens/linkerd-identity-token",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_ADDR",
                  "value": "linkerd-identity-headless.linkerd.svc.cluster.local.:8080",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_LOCAL_NAME",
                  "value": "$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_IDENTITY_SVC_NAME",
                  "value": "linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_DESTINATION_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
                {
                  "name": "LINKERD2_PROXY_POLICY_SVC_NAME",
                  "value": "linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local",
                },
              ],
              "image": "cr.l5d.io/linkerd/proxy:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "/usr/lib/linkerd/linkerd-await",
                      "--timeout=2m",
                    ],
                  },
                },
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/live",
                  "port": 4191,
                },
                "initialDelaySeconds": 10,
              },
              "name": "linkerd-proxy",
              "ports": [
                {
                  "containerPort": 4143,
                  "name": "linkerd-proxy",
                },
                {
                  "containerPort": 4191,
                  "name": "linkerd-admin",
                },
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": 4191,
                },
                "initialDelaySeconds": 2,
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 2102,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/identity/end-entity",
                  "name": "linkerd-identity-end-entity",
                },
                {
                  "mountPath": "/var/run/secrets/tokens",
                  "name": "linkerd-identity-token",
                },
              ],
            },
            {
              "args": [
                "destination",
                "-addr=:8086",
                "-controller-namespace=linkerd",
                "-enable-h2-upgrade=true",
                "-log-level=info",
                "-log-format=plain",
                "-enable-endpoint-slices=true",
                "-cluster-domain=cluster.local",
                "-identity-trust-domain=cluster.local",
                "-default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9996,
                },
                "initialDelaySeconds": 10,
              },
              "name": "destination",
              "ports": [
                {
                  "containerPort": 8086,
                  "name": "grpc",
                },
                {
                  "containerPort": 9996,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9996,
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 2103,
              },
            },
            {
              "args": [
                "sp-validator",
                "-log-level=info",
                "-log-format=plain",
                "-enable-pprof=false",
              ],
              "image": "cr.l5d.io/linkerd/controller:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/ping",
                  "port": 9997,
                },
                "initialDelaySeconds": 10,
              },
              "name": "sp-validator",
              "ports": [
                {
                  "containerPort": 8443,
                  "name": "sp-validator",
                },
                {
                  "containerPort": 9997,
                  "name": "admin-http",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": 9997,
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 2103,
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "sp-tls",
                  "readOnly": true,
                },
              ],
            },
            {
              "args": [
                "--admin-addr=0.0.0.0:9990",
                "--control-plane-namespace=linkerd",
                "--grpc-addr=0.0.0.0:8090",
                "--server-addr=0.0.0.0:9443",
                "--server-tls-key=/var/run/linkerd/tls/tls.key",
                "--server-tls-certs=/var/run/linkerd/tls/tls.crt",
                "--cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16",
                "--identity-domain=cluster.local",
                "--default-policy=all-unauthenticated",
                "--log-level=info",
                "--log-format=plain",
                "--probe-networks=0.0.0.0/0",
              ],
              "image": "cr.l5d.io/linkerd/policy-controller:stable-2.12.1",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "httpGet": {
                  "path": "/live",
                  "port": "admin",
                },
              },
              "name": "policy",
              "ports": [
                {
                  "containerPort": 8090,
                  "name": "grpc",
                },
                {
                  "containerPort": 9990,
                  "name": "admin",
                },
                {
                  "containerPort": 9443,
                  "name": "policy-https",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 7,
                "httpGet": {
                  "path": "/ready",
                  "port": "admin",
                },
                "initialDelaySeconds": 10,
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 2103,
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/run/linkerd/tls",
                  "name": "policy-tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "--incoming-proxy-port",
                "4143",
                "--outgoing-proxy-port",
                "4140",
                "--proxy-uid",
                "2102",
                "--inbound-ports-to-ignore",
                "4190,4191,4567,4568",
                "--outbound-ports-to-ignore",
                "443",
              ],
              "image": "cr.l5d.io/linkerd/proxy-init:v2.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "linkerd-init",
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "20Mi",
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "20Mi",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "add": [
                    "NET_ADMIN",
                    "NET_RAW",
                  ],
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true,
                "runAsUser": 65534,
              },
              "terminationMessagePolicy": "FallbackToLogsOnError",
              "volumeMounts": [
                {
                  "mountPath": "/run",
                  "name": "linkerd-proxy-init-xtables-lock",
                },
              ],
            },
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux",
          },
          "serviceAccountName": "linkerd-destination",
          "volumes": [
            {
              "name": "sp-tls",
              "secret": {
                "secretName": "linkerd-sp-validator-k8s-tls",
              },
            },
            {
              "name": "policy-tls",
              "secret": {
                "secretName": "linkerd-policy-validator-k8s-tls",
              },
            },
            {
              "emptyDir": {},
              "name": "linkerd-proxy-init-xtables-lock",
            },
            {
              "name": "linkerd-identity-token",
              "projected": {
                "sources": [
                  {
                    "serviceAccountToken": {
                      "audience": "identity.l5d.io",
                      "expirationSeconds": 86400,
                      "path": "linkerd-identity-token",
                    },
                  },
                ],
              },
            },
            {
              "emptyDir": {
                "medium": "Memory",
              },
              "name": "linkerd-identity-end-entity",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/part-of":"Linkerd","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-policy"},"rules":[{"apiGroups":[""],"resources":["pods"],"verbs":["get","list","watch"]},{"apiGroups":["policy.linkerd.io"],"resources":["authorizationpolicies","httproutes","meshtlsauthentications","networkauthentications","servers","serverauthorizations"],"verbs":["get","list","watch"]}]}
",
      },
      "name": "linkerd-policy",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-linkerd-policy.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "v1",
    "data": {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVakNDQWpxZ0F3SUJBZ0lRVVc0ZUcybUJzV2ErS2tFSFFyajhCREFOQmdrcWhraUc5dzBCQVFzRkFEQXQKTVNzd0tRWURWUVFERXlKc2FXNXJaWEprTFhCeWIzaDVMV2x1YW1WamRHOXlMbXhwYm10bGNtUXVjM1pqTUI0WApEVEl5TVRBeE1qQTJOVFl4TWxvWERUSXpNVEF4TWpBMk5UWXhNbG93TFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5ClpDMXdjbTk0ZVMxcGJtcGxZM1J2Y2k1c2FXNXJaWEprTG5OMll6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFNbEN5UUhUSVp1MWRUbnhZU1FpN3QwTWN2OTkrVEUydzFsMXBaUXBTV001U3FvaApaaS8xc0FpYTkrZ213cEc2c3BXNjFQeGwybE1TN0lRSHNqVnR2T2xKc2t5MXU1OU85bXdjLzdvWEYwVUtLRmFXClJNcWpwNmM1S3krRitkRlJlNUpnaW9kZ0F3QnB2dko1QzI1SldaZGVuMG05blhIZm5tYVlvYXlDVDdNcnVMWW4KVGt6Vm8rZWxHTWI0dVNMeGpuNnBUNjQwSUk4cUxqNHphalViOEZtOXR1TVBnT1hmd1NuUXo0a2JqOVI5QkxnTQpFZDNBaG5xaldnTElsdVA4QjMzUVFRUnBsN1VLM0ZRRk0zK3gzMHJrL0hMc21zK0tXa2pFRTczSHVTWHdLQWlLCmNQalRnUzNsK1lvUmd6N2VZVVFrUnJmUFJKWXdCUTUzNTJ6ZER4OENBd0VBQWFOdU1Hd3dEZ1lEVlIwUEFRSC8KQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RQpBakFBTUMwR0ExVWRFUVFtTUNTQ0lteHBibXRsY21RdGNISnZlSGt0YVc1cVpXTjBiM0l1YkdsdWEyVnlaQzV6CmRtTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSTJoMTNrcUVWR0kwSmw0bEIyVjEvaEZ0WGxrVmtOSVEzdDEKWjV5ajV0U0RyTFhoNCtLbnVpd0NNamg4VldaR2NESHp5ZjZYRUJBbFV5dzdUUWZ0OTY0UjYwRkFLWDdwUDhhRApYVUJCMTdZejB6T2VuM2tMQmVIc0ZoTGprOFA3NURmMEFmQUJTc2FkU2NMaWtMaWNOTWZCM1NoeXFjWHFIcGNUClVsNHJYRXl6ZWF1YTVTMFVEV2VMNHRkTkhWVTdRWDJ0Znp0d1lhcVpVV3hMQ2hiQlhEdW8yRTluWjVRYTlkT3cKMWhhQzFYSUhXcXVnTmtXRHJhYkJXTmVqZFY0Q3hQZ1lKTTRrWC8vRXFFRXAxTzFZNGt6bDBlcWV3anAwT1dGTAo3cDFEcVNZL05NeUVZZUhqbFpGQndnd2hYVzkxUWpiYVV0VUtPUDJUcFd2YzVRNnlEeGc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeVVMSkFkTWhtN1YxT2ZGaEpDTHUzUXh5LzMzNU1UYkRXWFdsbENsSll6bEtxaUZtCkwvV3dDSnIzNkNiQ2ticXlsYnJVL0dYYVV4THNoQWV5TlcyODZVbXlUTFc3bjA3MmJCei91aGNYUlFvb1ZwWkUKeXFPbnB6a3JMNFg1MFZGN2ttQ0toMkFEQUdtKzhua0xia2xabDE2ZlNiMmRjZCtlWnBpaHJJSlBzeXU0dGlkTwpUTldqNTZVWXh2aTVJdkdPZnFsUHJqUWdqeW91UGpOcU5SdndXYjIyNHcrQTVkL0JLZERQaVJ1UDFIMEV1QXdSCjNjQ0dlcU5hQXNpVzQvd0hmZEJCQkdtWHRRcmNWQVV6ZjdIZlN1VDhjdXlhejRwYVNNUVR2Y2U1SmZBb0NJcHcKK05PQkxlWDVpaEdEUHQ1aFJDUkd0ODlFbGpBRkRuZm5iTjBQSHdJREFRQUJBb0lCQVFDaVJCVmFRa2E3aXU3TAoyOEJ0YVRqYXdobkp3bUJ5Zkd1K0tldG83R3k5OGtndnFTUUJrUDN2d2pvVVU0UFdDUWZKVHN3Ly8wS3FiZnlCCmFzOFU0cmhJQXVJZGxQeURzaDllQlhkdEt3Ylk1QnFuelJvRG96VWR6eXJ4Y3Z4NjlrNUNNMUlkV1p5eDdaQkYKWUxDRnA5L3kraGhGVlBxbkFCdHZMcXBUTXZGZFMzaTFNaEtOQ3dLbW11ekxGTHBFUUhydDhTNW5kZ21SdzVYbgpWM1NVdDN0dVduVlVLanhsdGx4VGk1bDdqUTg2L3BSV2xGMDhVang3eFdpZCtnTEpjT2ZnZXF1c3A4OEJVZ014CnRHVXpnRjZQZnVnMDVIQmh0SVR1VnN1TGs2akhMZWxPd0t1UjZkam5pTkdjM0hJY3lFN204UERCUWUxak5WY2EKR1Y4MDJtNVpBb0dCQVBZb29YQWZ6Sld0OGtwQ01URjJnMjkzL1ExaFR2N25keTV0YkxndklwczJPSXVlZ1hZWApYLzdnaXVselhwVVR4Q1dFUG5ieSszRHpHZktQa3hKaUpWL2pIOVJ5b2t6Zi9hMEV2YjVOWFlVOE1CYkgydG9sCmRPTXo1aXhVUzg5Y2hmVmllMGdrOXR1VjB4MVNJMlV4cktFdmpZT2dyaGk0MDlZZ20xc1pMZ3gxQW9HQkFORk8Kb3hreUxZM0JQeGdKQmdEYityTTZ6YlRmMjdqMlk3SFNsT0ZsWCt3NUhVNHlVTjRoeXpwVU5Ca3o2aHhoakx1eAplZ01VU0poZHVJc01iUmw1NWpEVzFnVVRhVXNIdm1GQjEyTEpWVENOUWhhK1JybTRqNWVzZzRJYzZnV053RmFCCjZCa3BRdE9wa3ljUzVuWnFxMy9lb3dWcWlVTFM5RjE3VWg5emVRckRBb0dBVzUzenVBK2R6WGZZWGRzVkJCdmYKLzNUaE1rR3RiU0lwTVpaNGlIVENwSklocVpWdENjN1pZN3VlK0JTQWQydkw3VXF6RlFLS294ZFg2UGVXL1ppWgo0SDVnTW1vWURoU3dEZDFkNFo1WjJHVDJZUVF4YUUvWW1WZVBxNkFVTnpGd2lrd0ZKbXpibEE3SGJIcE53alFpCjFEc21xSDc5VFNZOWNjemhCWjd4aktFQ2dZRUFvR29ZYmxNYXZxNEE0VGJwTnZkaHFNUEVySDkxTXNrRGwySEIKWVE0RStsSzd0eGF4QzgzeXAvMnBBRGZka1dyaUpXZmNEMGdZYTA1SkJhaThaTzRjRWdwVmRRWnZpR1dpNzM4Ngp5Q2R0OXd3TVBzb09Bb0VFN0VYM2RGMGNycXo1WUZPbndzRHd5ckFJYThYOGczMDFlNGJ5Z2xBb2F1S3JEb3BaClltbHB0MmtDZ1lCbmc4NWdINWV3WFd5Z3RKVktxdEJXazhlNWMwb2tPWk5wNDA0b3J5ek93RmdxNzFEWFdVVXcKUERxcWhObVZRK0QwN2dNMFlBQTJMUGJpYlo2L21WVE5MYjFMYTQrNm80Q3JCRjdsU2o5KzJyTE93QU5GSXZwLwpnVitRcGtsZVMxTXVIVXc2TmcwZzF2OU9sOGJlbFY0SDVMeHJPQUtnMTNIRWJWRGFoZmxsSmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVakNDQWpxZ0F3SUJBZ0lRVVc0ZUcybUJzV2ErS2tFSFFyajhCREFOQmdrcWhraUc5dzBCQVFzRkFEQXQKTVNzd0tRWURWUVFERXlKc2FXNXJaWEprTFhCeWIzaDVMV2x1YW1WamRHOXlMbXhwYm10bGNtUXVjM1pqTUI0WApEVEl5TVRBeE1qQTJOVFl4TWxvWERUSXpNVEF4TWpBMk5UWXhNbG93TFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5ClpDMXdjbTk0ZVMxcGJtcGxZM1J2Y2k1c2FXNXJaWEprTG5OMll6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFNbEN5UUhUSVp1MWRUbnhZU1FpN3QwTWN2OTkrVEUydzFsMXBaUXBTV001U3FvaApaaS8xc0FpYTkrZ213cEc2c3BXNjFQeGwybE1TN0lRSHNqVnR2T2xKc2t5MXU1OU85bXdjLzdvWEYwVUtLRmFXClJNcWpwNmM1S3krRitkRlJlNUpnaW9kZ0F3QnB2dko1QzI1SldaZGVuMG05blhIZm5tYVlvYXlDVDdNcnVMWW4KVGt6Vm8rZWxHTWI0dVNMeGpuNnBUNjQwSUk4cUxqNHphalViOEZtOXR1TVBnT1hmd1NuUXo0a2JqOVI5QkxnTQpFZDNBaG5xaldnTElsdVA4QjMzUVFRUnBsN1VLM0ZRRk0zK3gzMHJrL0hMc21zK0tXa2pFRTczSHVTWHdLQWlLCmNQalRnUzNsK1lvUmd6N2VZVVFrUnJmUFJKWXdCUTUzNTJ6ZER4OENBd0VBQWFOdU1Hd3dEZ1lEVlIwUEFRSC8KQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RQpBakFBTUMwR0ExVWRFUVFtTUNTQ0lteHBibXRsY21RdGNISnZlSGt0YVc1cVpXTjBiM0l1YkdsdWEyVnlaQzV6CmRtTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSTJoMTNrcUVWR0kwSmw0bEIyVjEvaEZ0WGxrVmtOSVEzdDEKWjV5ajV0U0RyTFhoNCtLbnVpd0NNamg4VldaR2NESHp5ZjZYRUJBbFV5dzdUUWZ0OTY0UjYwRkFLWDdwUDhhRApYVUJCMTdZejB6T2VuM2tMQmVIc0ZoTGprOFA3NURmMEFmQUJTc2FkU2NMaWtMaWNOTWZCM1NoeXFjWHFIcGNUClVsNHJYRXl6ZWF1YTVTMFVEV2VMNHRkTkhWVTdRWDJ0Znp0d1lhcVpVV3hMQ2hiQlhEdW8yRTluWjVRYTlkT3cKMWhhQzFYSUhXcXVnTmtXRHJhYkJXTmVqZFY0Q3hQZ1lKTTRrWC8vRXFFRXAxTzFZNGt6bDBlcWV3anAwT1dGTAo3cDFEcVNZL05NeUVZZUhqbFpGQndnd2hYVzkxUWpiYVV0VUtPUDJUcFd2YzVRNnlEeGc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeVVMSkFkTWhtN1YxT2ZGaEpDTHUzUXh5LzMzNU1UYkRXWFdsbENsSll6bEtxaUZtCkwvV3dDSnIzNkNiQ2ticXlsYnJVL0dYYVV4THNoQWV5TlcyODZVbXlUTFc3bjA3MmJCei91aGNYUlFvb1ZwWkUKeXFPbnB6a3JMNFg1MFZGN2ttQ0toMkFEQUdtKzhua0xia2xabDE2ZlNiMmRjZCtlWnBpaHJJSlBzeXU0dGlkTwpUTldqNTZVWXh2aTVJdkdPZnFsUHJqUWdqeW91UGpOcU5SdndXYjIyNHcrQTVkL0JLZERQaVJ1UDFIMEV1QXdSCjNjQ0dlcU5hQXNpVzQvd0hmZEJCQkdtWHRRcmNWQVV6ZjdIZlN1VDhjdXlhejRwYVNNUVR2Y2U1SmZBb0NJcHcKK05PQkxlWDVpaEdEUHQ1aFJDUkd0ODlFbGpBRkRuZm5iTjBQSHdJREFRQUJBb0lCQVFDaVJCVmFRa2E3aXU3TAoyOEJ0YVRqYXdobkp3bUJ5Zkd1K0tldG83R3k5OGtndnFTUUJrUDN2d2pvVVU0UFdDUWZKVHN3Ly8wS3FiZnlCCmFzOFU0cmhJQXVJZGxQeURzaDllQlhkdEt3Ylk1QnFuelJvRG96VWR6eXJ4Y3Z4NjlrNUNNMUlkV1p5eDdaQkYKWUxDRnA5L3kraGhGVlBxbkFCdHZMcXBUTXZGZFMzaTFNaEtOQ3dLbW11ekxGTHBFUUhydDhTNW5kZ21SdzVYbgpWM1NVdDN0dVduVlVLanhsdGx4VGk1bDdqUTg2L3BSV2xGMDhVang3eFdpZCtnTEpjT2ZnZXF1c3A4OEJVZ014CnRHVXpnRjZQZnVnMDVIQmh0SVR1VnN1TGs2akhMZWxPd0t1UjZkam5pTkdjM0hJY3lFN204UERCUWUxak5WY2EKR1Y4MDJtNVpBb0dCQVBZb29YQWZ6Sld0OGtwQ01URjJnMjkzL1ExaFR2N25keTV0YkxndklwczJPSXVlZ1hZWApYLzdnaXVselhwVVR4Q1dFUG5ieSszRHpHZktQa3hKaUpWL2pIOVJ5b2t6Zi9hMEV2YjVOWFlVOE1CYkgydG9sCmRPTXo1aXhVUzg5Y2hmVmllMGdrOXR1VjB4MVNJMlV4cktFdmpZT2dyaGk0MDlZZ20xc1pMZ3gxQW9HQkFORk8Kb3hreUxZM0JQeGdKQmdEYityTTZ6YlRmMjdqMlk3SFNsT0ZsWCt3NUhVNHlVTjRoeXpwVU5Ca3o2aHhoakx1eAplZ01VU0poZHVJc01iUmw1NWpEVzFnVVRhVXNIdm1GQjEyTEpWVENOUWhhK1JybTRqNWVzZzRJYzZnV053RmFCCjZCa3BRdE9wa3ljUzVuWnFxMy9lb3dWcWlVTFM5RjE3VWg5emVRckRBb0dBVzUzenVBK2R6WGZZWGRzVkJCdmYKLzNUaE1rR3RiU0lwTVpaNGlIVENwSklocVpWdENjN1pZN3VlK0JTQWQydkw3VXF6RlFLS294ZFg2UGVXL1ppWgo0SDVnTW1vWURoU3dEZDFkNFo1WjJHVDJZUVF4YUUvWW1WZVBxNkFVTnpGd2lrd0ZKbXpibEE3SGJIcE53alFpCjFEc21xSDc5VFNZOWNjemhCWjd4aktFQ2dZRUFvR29ZYmxNYXZxNEE0VGJwTnZkaHFNUEVySDkxTXNrRGwySEIKWVE0RStsSzd0eGF4QzgzeXAvMnBBRGZka1dyaUpXZmNEMGdZYTA1SkJhaThaTzRjRWdwVmRRWnZpR1dpNzM4Ngp5Q2R0OXd3TVBzb09Bb0VFN0VYM2RGMGNycXo1WUZPbndzRHd5ckFJYThYOGczMDFlNGJ5Z2xBb2F1S3JEb3BaClltbHB0MmtDZ1lCbmc4NWdINWV3WFd5Z3RKVktxdEJXazhlNWMwb2tPWk5wNDA0b3J5ek93RmdxNzFEWFdVVXcKUERxcWhObVZRK0QwN2dNMFlBQTJMUGJpYlo2L21WVE5MYjFMYTQrNm80Q3JCRjdsU2o5KzJyTE93QU5GSXZwLwpnVitRcGtsZVMxTXVIVXc2TmcwZzF2OU9sOGJlbFY0SDVMeHJPQUtnMTNIRWJWRGFoZmxsSmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-proxy-injector-k8s-tls","namespace":"linkerd"},"type":"kubernetes.io/tls"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-proxy-injector-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-proxy-injector-k8s-tls.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "type": "kubernetes.io/tls",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-heartbeat"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"linkerd-heartbeat"},"subjects":[{"kind":"ServiceAccount","name":"linkerd-heartbeat","namespace":"linkerd"}]}
",
      },
      "name": "linkerd-heartbeat",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-linkerd-heartbeat.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-proxy-injector","namespace":"linkerd"}}
",
      },
      "name": "linkerd-proxy-injector",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-proxy-injector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"identity","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-identity","namespace":"linkerd"}}
",
      },
      "name": "linkerd-identity",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-serviceaccount-linkerd-linkerd-identity.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "v1",
    "data": {
      "linkerd-crds-chart-version": "linkerd-crds-1.0.0-edge",
      "values": "clusterDomain: cluster.local
clusterNetworks: 10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
cniEnabled: false
controlPlaneTracing: false
controlPlaneTracingNamespace: linkerd-jaeger
controllerImage: cr.l5d.io/linkerd/controller
controllerLogFormat: plain
controllerLogLevel: info
controllerReplicas: 1
controllerUID: 2103
debugContainer:
  image:
    name: cr.l5d.io/linkerd/debug
    pullPolicy: ""
    version: ""
deploymentStrategy:
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25%
disableHeartBeat: false
enableEndpointSlices: true
enableH2Upgrade: true
enablePSP: false
enablePodAntiAffinity: false
enablePodDisruptionBudget: false
enablePprof: false
identity:
  externalCA: true
  issuer:
    clockSkewAllowance: 20s
    issuanceLifetime: 24h0m0s
    scheme: kubernetes.io/tls
    tls:
      crtPEM: ""
  serviceAccountTokenProjection: true
identityTrustAnchorsPEM: ""
identityTrustDomain: cluster.local
imagePullPolicy: IfNotPresent
imagePullSecrets: []
linkerdVersion: stable-2.12.1
nodeSelector:
  kubernetes.io/os: linux
podAnnotations: {}
podLabels: {}
policyController:
  image:
    name: cr.l5d.io/linkerd/policy-controller
    pullPolicy: ""
    version: ""
  logLevel: info
  probeNetworks:
  - 0.0.0.0/0
  resources:
    cpu:
      limit: ""
      request: ""
    ephemeral-storage:
      limit: ""
      request: ""
    memory:
      limit: ""
      request: ""
policyValidator:
  caBundle: ""
  crtPEM: ""
  externalSecret: false
  injectCaFrom: ""
  injectCaFromSecret: ""
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
priorityClassName: ""
profileValidator:
  caBundle: ""
  crtPEM: ""
  externalSecret: false
  injectCaFrom: ""
  injectCaFromSecret: ""
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
proxy:
  await: true
  cores: 0
  defaultInboundPolicy: all-unauthenticated
  enableExternalProfiles: false
  image:
    name: cr.l5d.io/linkerd/proxy
    pullPolicy: ""
    version: ""
  inboundConnectTimeout: 100ms
  logFormat: plain
  logLevel: warn,linkerd=info
  opaquePorts: 25,587,3306,4444,5432,6379,9300,11211
  outboundConnectTimeout: 1000ms
  ports:
    admin: 4191
    control: 4190
    inbound: 4143
    outbound: 4140
  requireIdentityOnInboundPorts: ""
  resources:
    cpu:
      limit: ""
      request: ""
    ephemeral-storage:
      limit: ""
      request: ""
    memory:
      limit: ""
      request: ""
  shutdownGracePeriod: ""
  uid: 2102
  waitBeforeExitSeconds: 0
proxyInit:
  closeWaitTimeoutSecs: 0
  ignoreInboundPorts: 4567,4568
  ignoreOutboundPorts: 4567,4568
  image:
    name: cr.l5d.io/linkerd/proxy-init
    pullPolicy: ""
    version: v2.0.0
  iptablesMode: legacy
  logFormat: ""
  logLevel: ""
  resources:
    cpu:
      limit: 100m
      request: 100m
    ephemeral-storage:
      limit: ""
      request: ""
    memory:
      limit: 20Mi
      request: 20Mi
  runAsRoot: false
  runAsUser: 65534
  skipSubnets: ""
  xtMountPath:
    mountPath: /run
    name: linkerd-proxy-init-xtables-lock
proxyInjector:
  caBundle: ""
  crtPEM: ""
  externalSecret: false
  injectCaFrom: ""
  injectCaFromSecret: ""
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
    - key: kubernetes.io/metadata.name
      operator: NotIn
      values:
      - kube-system
      - cert-manager
  objectSelector:
    matchExpressions:
    - key: linkerd.io/control-plane-component
      operator: DoesNotExist
    - key: linkerd.io/cni-resource
      operator: DoesNotExist
runtimeClassName: ""
webhookFailurePolicy: Ignore
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"linkerd-crds-chart-version":"linkerd-crds-1.0.0-edge","values":"clusterDomain: cluster.local\\nclusterNetworks: 10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16\\ncniEnabled: false\\ncontrolPlaneTracing: false\\ncontrolPlaneTracingNamespace: linkerd-jaeger\\ncontrollerImage: cr.l5d.io/linkerd/controller\\ncontrollerLogFormat: plain\\ncontrollerLogLevel: info\\ncontrollerReplicas: 1\\ncontrollerUID: 2103\\ndebugContainer:\\n  image:\\n    name: cr.l5d.io/linkerd/debug\\n    pullPolicy: \\"\\"\\n    version: \\"\\"\\ndeploymentStrategy:\\n  rollingUpdate:\\n    maxSurge: 25%\\n    maxUnavailable: 25%\\ndisableHeartBeat: false\\nenableEndpointSlices: true\\nenableH2Upgrade: true\\nenablePSP: false\\nenablePodAntiAffinity: false\\nenablePodDisruptionBudget: false\\nenablePprof: false\\nidentity:\\n  externalCA: true\\n  issuer:\\n    clockSkewAllowance: 20s\\n    issuanceLifetime: 24h0m0s\\n    scheme: kubernetes.io/tls\\n    tls:\\n      crtPEM: \\"\\"\\n  serviceAccountTokenProjection: true\\nidentityTrustAnchorsPEM: \\"\\"\\nidentityTrustDomain: cluster.local\\nimagePullPolicy: IfNotPresent\\nimagePullSecrets: []\\nlinkerdVersion: stable-2.12.1\\nnodeSelector:\\n  kubernetes.io/os: linux\\npodAnnotations: {}\\npodLabels: {}\\npolicyController:\\n  image:\\n    name: cr.l5d.io/linkerd/policy-controller\\n    pullPolicy: \\"\\"\\n    version: \\"\\"\\n  logLevel: info\\n  probeNetworks:\\n  - 0.0.0.0/0\\n  resources:\\n    cpu:\\n      limit: \\"\\"\\n      request: \\"\\"\\n    ephemeral-storage:\\n      limit: \\"\\"\\n      request: \\"\\"\\n    memory:\\n      limit: \\"\\"\\n      request: \\"\\"\\npolicyValidator:\\n  caBundle: \\"\\"\\n  crtPEM: \\"\\"\\n  externalSecret: false\\n  injectCaFrom: \\"\\"\\n  injectCaFromSecret: \\"\\"\\n  namespaceSelector:\\n    matchExpressions:\\n    - key: config.linkerd.io/admission-webhooks\\n      operator: NotIn\\n      values:\\n      - disabled\\npriorityClassName: \\"\\"\\nprofileValidator:\\n  caBundle: \\"\\"\\n  crtPEM: \\"\\"\\n  externalSecret: false\\n  injectCaFrom: \\"\\"\\n  injectCaFromSecret: \\"\\"\\n  namespaceSelector:\\n    matchExpressions:\\n    - key: config.linkerd.io/admission-webhooks\\n      operator: NotIn\\n      values:\\n      - disabled\\nproxy:\\n  await: true\\n  cores: 0\\n  defaultInboundPolicy: all-unauthenticated\\n  enableExternalProfiles: false\\n  image:\\n    name: cr.l5d.io/linkerd/proxy\\n    pullPolicy: \\"\\"\\n    version: \\"\\"\\n  inboundConnectTimeout: 100ms\\n  logFormat: plain\\n  logLevel: warn,linkerd=info\\n  opaquePorts: 25,587,3306,4444,5432,6379,9300,11211\\n  outboundConnectTimeout: 1000ms\\n  ports:\\n    admin: 4191\\n    control: 4190\\n    inbound: 4143\\n    outbound: 4140\\n  requireIdentityOnInboundPorts: \\"\\"\\n  resources:\\n    cpu:\\n      limit: \\"\\"\\n      request: \\"\\"\\n    ephemeral-storage:\\n      limit: \\"\\"\\n      request: \\"\\"\\n    memory:\\n      limit: \\"\\"\\n      request: \\"\\"\\n  shutdownGracePeriod: \\"\\"\\n  uid: 2102\\n  waitBeforeExitSeconds: 0\\nproxyInit:\\n  closeWaitTimeoutSecs: 0\\n  ignoreInboundPorts: 4567,4568\\n  ignoreOutboundPorts: 4567,4568\\n  image:\\n    name: cr.l5d.io/linkerd/proxy-init\\n    pullPolicy: \\"\\"\\n    version: v2.0.0\\n  iptablesMode: legacy\\n  logFormat: \\"\\"\\n  logLevel: \\"\\"\\n  resources:\\n    cpu:\\n      limit: 100m\\n      request: 100m\\n    ephemeral-storage:\\n      limit: \\"\\"\\n      request: \\"\\"\\n    memory:\\n      limit: 20Mi\\n      request: 20Mi\\n  runAsRoot: false\\n  runAsUser: 65534\\n  skipSubnets: \\"\\"\\n  xtMountPath:\\n    mountPath: /run\\n    name: linkerd-proxy-init-xtables-lock\\nproxyInjector:\\n  caBundle: \\"\\"\\n  crtPEM: \\"\\"\\n  externalSecret: false\\n  injectCaFrom: \\"\\"\\n  injectCaFromSecret: \\"\\"\\n  namespaceSelector:\\n    matchExpressions:\\n    - key: config.linkerd.io/admission-webhooks\\n      operator: NotIn\\n      values:\\n      - disabled\\n    - key: kubernetes.io/metadata.name\\n      operator: NotIn\\n      values:\\n      - kube-system\\n      - cert-manager\\n  objectSelector:\\n    matchExpressions:\\n    - key: linkerd.io/control-plane-component\\n      operator: DoesNotExist\\n    - key: linkerd.io/cni-resource\\n      operator: DoesNotExist\\nruntimeClassName: \\"\\"\\nwebhookFailurePolicy: Ignore\\n"},"kind":"ConfigMap","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"controller","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-config","namespace":"linkerd"}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-config",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-configmap-linkerd-linkerd-config.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
  },
  {
    "apiVersion": "batch/v1",
    "kind": "CronJob",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"batch/v1","kind":"CronJob","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"heartbeat","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.12.1","linkerd.io/control-plane-component":"heartbeat","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-heartbeat","namespace":"linkerd"},"spec":{"concurrencyPolicy":"Replace","jobTemplate":{"spec":{"template":{"metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"linkerd.io/control-plane-component":"heartbeat","linkerd.io/workload-ns":"linkerd"}},"spec":{"containers":[{"args":["heartbeat","-controller-namespace=linkerd","-log-level=info","-log-format=plain","-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090"],"env":[{"name":"LINKERD_DISABLED","value":"the heartbeat controller does not use the proxy"}],"image":"cr.l5d.io/linkerd/controller:stable-2.12.1","imagePullPolicy":"IfNotPresent","name":"heartbeat","securityContext":{"allowPrivilegeEscalation":false,"runAsUser":2103}}],"nodeSelector":{"kubernetes.io/os":"linux"},"restartPolicy":"Never","serviceAccountName":"linkerd-heartbeat"}}}},"schedule":"06 07 * * *","successfulJobsHistoryLimit":0}}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-heartbeat",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/batch_v1-cronjob-linkerd-linkerd-heartbeat.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {},
  },
]
`;

exports[`KubeObject Can sync resources 7`] = `
[
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
      },
      "name": "issuers.cert-manager.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-issuers.cert-manager.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "challenges.acme.cert-manager.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-challenges.acme.cert-manager.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "certificates.cert-manager.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-certificates.cert-manager.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
      },
      "name": "orders.acme.cert-manager.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-orders.acme.cert-manager.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.8.0",
      },
      "name": "bundles.trust.cert-manager.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-bundles.trust.cert-manager.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "certificaterequests.cert-manager.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-certificaterequests.cert-manager.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {},
      "name": "clusterissuers.cert-manager.io",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/0-crd/apiextensions.k8s.io_v1-customresourcedefinition-default-clusterissuers.cert-manager.io.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-trust"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-trust","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-trust",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-edit"},"rules":[{"apiGroups":["cert-manager.io"],"resources":["certificates","certificaterequests","issuers"],"verbs":["create","delete","deletecollection","patch","update"]},{"apiGroups":["acme.cert-manager.io"],"resources":["challenges","orders"],"verbs":["create","delete","deletecollection","patch","update"]}]}
",
      },
      "name": "cert-manager-controller-edit",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-edit.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-metrics","namespace":"cert-manager"},"spec":{"ports":[{"name":"controller","port":9402,"protocol":"TCP","targetPort":9402}],"selector":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"},"type":"ClusterIP"}}
",
      },
      "name": "cert-manager-controller-metrics",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-controller-metrics.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"strategy":{"rollingUpdate":{},"type":"RollingUpdate"},"template":{"metadata":{"annotations":{"prometheus.io/path":"/metrics","prometheus.io/port":"9402","prometheus.io/scrape":"true"},"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"namespaces":["cert-manager"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["--v=2","--cluster-resource-namespace=$(POD_NAMESPACE)","--leader-election-namespace=kube-system","--acme-http01-solver-image=docker.io/bitnami/acmesolver:1.9.1-debian-11-r16"],"env":[{"name":"BITNAMI_DEBUG","value":"false"},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"docker.io/bitnami/cert-manager:1.9.1-debian-11-r15","imagePullPolicy":"IfNotPresent","name":"cert-manager","ports":[{"containerPort":9402,"protocol":"TCP"}],"resources":{"limits":{},"requests":{}},"securityContext":{"runAsNonRoot":true,"runAsUser":1001}}],"securityContext":{"fsGroup":1001},"serviceAccountName":"cert-manager-controller"}}}}
",
      },
      "name": "cert-manager-controller",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {
      "template": {
        "metadata": {
          "annotations": {
            "prometheus.io/path": "/metrics",
            "prometheus.io/port": "9402",
            "prometheus.io/scrape": "true",
          },
          "labels": {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.8.4",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "--v=2",
                "--cluster-resource-namespace=$(POD_NAMESPACE)",
                "--leader-election-namespace=kube-system",
                "--acme-http01-solver-image=docker.io/bitnami/acmesolver:1.9.1-debian-11-r16",
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cert-manager:1.9.1-debian-11-r15",
              "imagePullPolicy": "IfNotPresent",
              "name": "cert-manager",
              "ports": [
                {
                  "containerPort": 9402,
                  "protocol": "TCP",
                },
              ],
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-controller",
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-webhook-dynamic-serving","namespace":"cert-manager"},"rules":[{"apiGroups":[""],"resourceNames":["cert-manager-webhook-ca"],"resources":["secrets"],"verbs":["get","list","watch","update"]},{"apiGroups":[""],"resources":["secrets"],"verbs":["create"]}]}
",
      },
      "name": "cert-manager-webhook-dynamic-serving",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-cert-manager-cert-manager-webhook-dynamic-serving.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-webhook-subjectaccessreviews"},"rules":[{"apiGroups":["authorization.k8s.io"],"resources":["subjectaccessreviews"],"verbs":["create"]}]}
",
      },
      "name": "cert-manager-webhook-subjectaccessreviews",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-webhook-subjectaccessreviews.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Certificate",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"labels":{"app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust","namespace":"cert-manager"},"spec":{"dnsNames":["cert-manager-trust.cert-manager.svc"],"issuerRef":{"name":"cert-manager-trust"},"revisionHistoryLimit":1,"secretName":"cert-manager-trust-tls"}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-certificate-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","automountServiceAccountToken":true,"kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-webhook","namespace":"cert-manager"}}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-webhook.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-issuers"},"rules":[{"apiGroups":["cert-manager.io"],"resources":["issuers","issuers/status"],"verbs":["update"]},{"apiGroups":["cert-manager.io"],"resources":["issuers"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["secrets"],"verbs":["get","list","watch","create","update","patch","delete"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]}]}
",
      },
      "name": "cert-manager-controller-controller-issuers",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-issuers.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-view"},"rules":[{"apiGroups":["cert-manager.io"],"resources":["certificates","certificaterequests","issuers"],"verbs":["get","list","watch"]},{"apiGroups":["acme.cert-manager.io"],"resources":["challenges","orders"],"verbs":["get","list","watch"]}]}
",
      },
      "name": "cert-manager-controller-view",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-view.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "cert-manager.io/v1",
    "kind": "ClusterIssuer",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"cert-manager.io/v1","kind":"ClusterIssuer","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"linkerd-trust-anchor","namespace":"cert-manager"},"spec":{"ca":{"secretName":"linkerd-identity-trust-roots"}}}
",
      },
      "name": "linkerd-trust-anchor",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-clusterissuer-cert-manager-linkerd-trust-anchor.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-webhook-dynamic-serving","namespace":"cert-manager"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"cert-manager-webhook-dynamic-serving"},"subjects":[{"apiGroup":"","kind":"ServiceAccount","name":"cert-manager-webhook","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-webhook-dynamic-serving",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-cert-manager-cert-manager-webhook-dynamic-serving.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"cert-manager-trust"}},"template":{"metadata":{"labels":{"app":"cert-manager-trust"}},"spec":{"containers":[{"args":["--log-level=1","--metrics-port=9402","--readiness-probe-port=6060","--readiness-probe-path=/readyz","--trust-namespace=cert-manager","--webhook-host=0.0.0.0","--webhook-port=6443","--webhook-certificate-dir=/tls"],"command":["cert-manager-trust"],"image":"quay.io/jetstack/cert-manager-trust:v0.2.0","imagePullPolicy":"IfNotPresent","name":"cert-manager-trust","ports":[{"containerPort":6443},{"containerPort":9402}],"readinessProbe":{"httpGet":{"path":"/readyz","port":6060},"initialDelaySeconds":3,"periodSeconds":7},"resources":{},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/tls","name":"tls","readOnly":true}]}],"serviceAccountName":"cert-manager-trust","volumes":[{"name":"tls","secret":{"defaultMode":420,"secretName":"cert-manager-trust-tls"}}]}}}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app": "cert-manager-trust",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "--log-level=1",
                "--metrics-port=9402",
                "--readiness-probe-port=6060",
                "--readiness-probe-path=/readyz",
                "--trust-namespace=cert-manager",
                "--webhook-host=0.0.0.0",
                "--webhook-port=6443",
                "--webhook-certificate-dir=/tls",
              ],
              "command": [
                "cert-manager-trust",
              ],
              "image": "quay.io/jetstack/cert-manager-trust:v0.2.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "cert-manager-trust",
              "ports": [
                {
                  "containerPort": 6443,
                },
                {
                  "containerPort": 9402,
                },
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/readyz",
                  "port": 6060,
                },
                "initialDelaySeconds": 3,
                "periodSeconds": 7,
              },
              "resources": {},
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL",
                  ],
                },
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true,
                "seccompProfile": {
                  "type": "RuntimeDefault",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/tls",
                  "name": "tls",
                  "readOnly": true,
                },
              ],
            },
          ],
          "serviceAccountName": "cert-manager-trust",
          "volumes": [
            {
              "name": "tls",
              "secret": {
                "defaultMode": 420,
                "secretName": "cert-manager-trust-tls",
              },
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-webhook","namespace":"cert-manager"},"spec":{"ports":[{"name":"https","port":443,"targetPort":10250}],"selector":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"},"type":"ClusterIP"}}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-webhook.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": {
      "annotations": {
        "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"admissionregistration.k8s.io/v1","kind":"ValidatingWebhookConfiguration","metadata":{"annotations":{"cert-manager.io/inject-ca-from-secret":"cert-manager/cert-manager-webhook-ca"},"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-webhook","namespace":"cert-manager"},"webhooks":[{"admissionReviewVersions":["v1"],"clientConfig":{"service":{"name":"cert-manager-webhook","namespace":"cert-manager","path":"/validate"}},"failurePolicy":"Fail","matchPolicy":"Equivalent","name":"webhook.cert-manager.io","namespaceSelector":{"matchExpressions":[{"key":"cert-manager.io/disable-validation","operator":"NotIn","values":["true"]},{"key":"name","operator":"NotIn","values":["cert-manager"]}]},"rules":[{"apiGroups":["cert-manager.io","acme.cert-manager.io"],"apiVersions":["v1"],"operations":["CREATE","UPDATE"],"resources":["*/*"]}],"sideEffects":"None","timeoutSeconds":10}]}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/admissionregistration.k8s.io_v1-validatingwebhookconfiguration-cert-manager-cert-manager-webhook.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-webhook","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"strategy":{"rollingUpdate":{},"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"namespaces":["cert-manager"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["--v=2","--secure-port=10250","--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)","--dynamic-serving-ca-secret-name=cert-manager-webhook-ca","--dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc"],"env":[{"name":"BITNAMI_DEBUG","value":"false"},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"docker.io/bitnami/cert-manager-webhook:1.9.1-debian-11-r13","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/livez","port":6080,"scheme":"HTTP"},"initialDelaySeconds":60,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"cert-manager-webhook","ports":[{"containerPort":10250,"name":"https"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":6080,"scheme":"HTTP"},"initialDelaySeconds":5,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":1},"resources":{"limits":{},"requests":{}},"securityContext":{"runAsNonRoot":true,"runAsUser":1001}}],"securityContext":{"fsGroup":1001},"serviceAccountName":"cert-manager-webhook"}}}}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-webhook.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "webhook",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.8.4",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "--v=2",
                "--secure-port=10250",
                "--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)",
                "--dynamic-serving-ca-secret-name=cert-manager-webhook-ca",
                "--dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc",
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cert-manager-webhook:1.9.1-debian-11-r13",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/livez",
                  "port": 6080,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "cert-manager-webhook",
              "ports": [
                {
                  "containerPort": 10250,
                  "name": "https",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 6080,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-webhook",
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust","namespace":"cert-manager"},"rules":[{"apiGroups":[""],"resources":["secrets"],"verbs":["get","list","watch"]},{"apiGroups":["coordination.k8s.io"],"resources":["leases"],"verbs":["get","create","update","watch","list"]}]}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","automountServiceAccountToken":true,"kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller","namespace":"cert-manager"}}
",
      },
      "name": "cert-manager-controller",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"cert-manager","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-approve"},"rules":[{"apiGroups":["cert-manager.io"],"resourceNames":["issuers.cert-manager.io/*","clusterissuers.cert-manager.io/*"],"resources":["signers"],"verbs":["approve"]}]}
",
      },
      "name": "cert-manager-controller-controller-approve",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-approve.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust","namespace":"cert-manager"}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-orders"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-controller-controller-orders"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-controller","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-controller-controller-orders",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-orders.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-certificates"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-controller-controller-certificates"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-controller","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-controller-controller-certificates",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-certificates.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-webhook-subjectaccessreviews"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-webhook-subjectaccessreviews"},"subjects":[{"apiGroup":"","kind":"ServiceAccount","name":"cert-manager-webhook","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-webhook-subjectaccessreviews",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-webhook-subjectaccessreviews.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Issuer",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"cert-manager.io/v1","kind":"Issuer","metadata":{"labels":{"app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust","namespace":"cert-manager"},"spec":{"selfSigned":{}}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-issuer-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-cainjector"},"rules":[{"apiGroups":["cert-manager.io"],"resources":["certificates"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["secrets"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["events"],"verbs":["get","create","update","patch"]},{"apiGroups":["admissionregistration.k8s.io"],"resources":["validatingwebhookconfigurations","mutatingwebhookconfigurations"],"verbs":["get","list","watch","update"]},{"apiGroups":["apiregistration.k8s.io"],"resources":["apiservices"],"verbs":["get","list","watch","update"]},{"apiGroups":["apiextensions.k8s.io"],"resources":["customresourcedefinitions"],"verbs":["get","list","watch","update"]},{"apiGroups":["auditregistration.k8s.io"],"resources":["auditsinks"],"verbs":["get","list","watch","update"]}]}
",
      },
      "name": "cert-manager-cainjector",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-cainjector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-ingress-shim"},"rules":[{"apiGroups":["cert-manager.io"],"resources":["certificates","certificaterequests"],"verbs":["create","update","delete"]},{"apiGroups":["cert-manager.io"],"resources":["certificates","certificaterequests","issuers","clusterissuers"],"verbs":["get","list","watch"]},{"apiGroups":["networking.k8s.io"],"resources":["ingresses"],"verbs":["get","list","watch"]},{"apiGroups":["networking.k8s.io"],"resources":["ingresses/finalizers"],"verbs":["update"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]}]}
",
      },
      "name": "cert-manager-controller-controller-ingress-shim",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-ingress-shim.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-leader-election","namespace":"kube-system"},"rules":[{"apiGroups":[""],"resourceNames":["cert-manager-controller"],"resources":["configmaps"],"verbs":["get","update","patch"]},{"apiGroups":[""],"resources":["configmaps"],"verbs":["create"]},{"apiGroups":["coordination.k8s.io"],"resourceNames":["cert-manager-controller"],"resources":["leases"],"verbs":["get","update","patch"]},{"apiGroups":["coordination.k8s.io"],"resources":["leases"],"verbs":["create"]}]}
",
      },
      "name": "cert-manager-controller-leader-election",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-kube-system-cert-manager-controller-leader-election.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Certificate",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"cert-manager.io/v1","kind":"Certificate","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"linkerd-trust-anchor","namespace":"cert-manager"},"spec":{"commonName":"root.linkerd.cluster.local","isCA":true,"issuerRef":{"group":"cert-manager.io","kind":"ClusterIssuer","name":"linkerd-self-signed-issuer"},"privateKey":{"algorithm":"ECDSA","size":256},"secretName":"linkerd-identity-trust-roots"}}
",
      },
      "name": "linkerd-trust-anchor",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-certificate-cert-manager-linkerd-trust-anchor.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-issuers"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-controller-controller-issuers"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-controller","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-controller-controller-issuers",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-issuers.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-cainjector-leader-election","namespace":"kube-system"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"cert-manager-cainjector-leader-election"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-cainjector","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-cainjector-leader-election",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-kube-system-cert-manager-cainjector-leader-election.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-cainjector","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"strategy":{"rollingUpdate":{},"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"namespaces":["cert-manager"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["--v=2","--leader-election-namespace=kube-system"],"env":[{"name":"BITNAMI_DEBUG","value":"false"},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"docker.io/bitnami/cainjector:1.9.1-debian-11-r14","imagePullPolicy":"IfNotPresent","name":"cainjector","resources":{"limits":{},"requests":{}},"securityContext":{"runAsNonRoot":true,"runAsUser":1001}}],"securityContext":{"fsGroup":1001},"serviceAccountName":"cert-manager-cainjector"}}}}
",
      },
      "name": "cert-manager-cainjector",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/apps_v1-deployment-cert-manager-cert-manager-cainjector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "cainjector",
            "app.kubernetes.io/instance": "cert-manager",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "cert-manager",
            "helm.sh/chart": "cert-manager-0.8.4",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager",
                      },
                    },
                    "namespaces": [
                      "cert-manager",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "--v=2",
                "--leader-election-namespace=kube-system",
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false",
                },
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/cainjector:1.9.1-debian-11-r14",
              "imagePullPolicy": "IfNotPresent",
              "name": "cainjector",
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "cert-manager-cainjector",
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-clusterissuers"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-controller-controller-clusterissuers"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-controller","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-controller-controller-clusterissuers",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-clusterissuers.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-cainjector"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-cainjector"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-cainjector","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-cainjector",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-cainjector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-clusterissuers"},"rules":[{"apiGroups":["cert-manager.io"],"resources":["clusterissuers","clusterissuers/status"],"verbs":["update"]},{"apiGroups":["cert-manager.io"],"resources":["clusterissuers"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["secrets"],"verbs":["get","list","watch","create","update","patch","delete"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]}]}
",
      },
      "name": "cert-manager-controller-controller-clusterissuers",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-clusterissuers.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-challenges"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-controller-controller-challenges"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-controller","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-controller-controller-challenges",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-challenges.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust"},"rules":[{"apiGroups":["trust.cert-manager.io"],"resources":["bundles"],"verbs":["get","list","watch"]},{"apiGroups":["trust.cert-manager.io"],"resources":["bundles/status"],"verbs":["update"]},{"apiGroups":[""],"resources":["configmaps"],"verbs":["get","list","create","update","watch","delete"]},{"apiGroups":[""],"resources":["namespaces"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]}]}
",
      },
      "name": "cert-manager-trust",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "cert-manager.io/v1",
    "kind": "ClusterIssuer",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"cert-manager.io/v1","kind":"ClusterIssuer","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"linkerd-self-signed-issuer","namespace":"cert-manager"},"spec":{"selfSigned":{}}}
",
      },
      "name": "linkerd-self-signed-issuer",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-clusterissuer-cert-manager-linkerd-self-signed-issuer.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "MutatingWebhookConfiguration",
    "metadata": {
      "annotations": {
        "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"admissionregistration.k8s.io/v1","kind":"MutatingWebhookConfiguration","metadata":{"annotations":{"cert-manager.io/inject-ca-from-secret":"cert-manager/cert-manager-webhook-ca"},"labels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-webhook","namespace":"cert-manager"},"webhooks":[{"admissionReviewVersions":["v1"],"clientConfig":{"service":{"name":"cert-manager-webhook","namespace":"cert-manager","path":"/mutate"}},"failurePolicy":"Fail","matchPolicy":"Equivalent","name":"webhook.cert-manager.io","rules":[{"apiGroups":["cert-manager.io","acme.cert-manager.io"],"apiVersions":["v1"],"operations":["CREATE","UPDATE"],"resources":["*/*"]}],"sideEffects":"None","timeoutSeconds":10}]}
",
      },
      "name": "cert-manager-webhook",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/admissionregistration.k8s.io_v1-mutatingwebhookconfiguration-cert-manager-cert-manager-webhook.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app":"cert-manager-trust","app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust-metrics","namespace":"cert-manager"},"spec":{"ports":[{"name":"metrics","port":9402,"protocol":"TCP","targetPort":9402}],"selector":{"app":"cert-manager-trust"},"type":"ClusterIP"}}
",
      },
      "name": "cert-manager-trust-metrics",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-trust-metrics.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"labels":{"app":"cert-manager-trust","app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust","namespace":"cert-manager"},"spec":{"ports":[{"name":"webhook","port":443,"protocol":"TCP","targetPort":6443}],"selector":{"app":"cert-manager-trust"},"type":"ClusterIP"}}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-service-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","automountServiceAccountToken":true,"kind":"ServiceAccount","metadata":{"labels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-cainjector","namespace":"cert-manager"}}
",
      },
      "name": "cert-manager-cainjector",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/v1-serviceaccount-cert-manager-cert-manager-cainjector.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-certificates"},"rules":[{"apiGroups":["cert-manager.io"],"resources":["certificates","certificates/status","certificaterequests","certificaterequests/status"],"verbs":["update"]},{"apiGroups":["cert-manager.io"],"resources":["certificates","certificaterequests","clusterissuers","issuers"],"verbs":["get","list","watch"]},{"apiGroups":["cert-manager.io"],"resources":["certificates/finalizers","certificaterequests/finalizers"],"verbs":["update"]},{"apiGroups":["acme.cert-manager.io"],"resources":["orders"],"verbs":["create","delete","get","list","watch"]},{"apiGroups":[""],"resources":["secrets"],"verbs":["get","list","watch","create","update","delete"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]}]}
",
      },
      "name": "cert-manager-controller-controller-certificates",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-certificates.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust","namespace":"cert-manager"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"cert-manager-trust"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-trust","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-trust",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-cert-manager-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-orders"},"rules":[{"apiGroups":["acme.cert-manager.io"],"resources":["orders","orders/status"],"verbs":["update"]},{"apiGroups":["acme.cert-manager.io"],"resources":["orders","challenges"],"verbs":["get","list","watch"]},{"apiGroups":["cert-manager.io"],"resources":["clusterissuers","issuers"],"verbs":["get","list","watch"]},{"apiGroups":["acme.cert-manager.io"],"resources":["challenges"],"verbs":["create","delete"]},{"apiGroups":["acme.cert-manager.io"],"resources":["orders/finalizers"],"verbs":["update"]},{"apiGroups":[""],"resources":["secrets"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]}]}
",
      },
      "name": "cert-manager-controller-controller-orders",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-orders.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"labels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-cainjector-leader-election","namespace":"kube-system"},"rules":[{"apiGroups":[""],"resourceNames":["cert-manager-cainjector-leader-election","cert-manager-cainjector-leader-election-core"],"resources":["configmaps"],"verbs":["get","update","patch"]},{"apiGroups":[""],"resources":["configmaps"],"verbs":["create"]},{"apiGroups":["coordination.k8s.io"],"resourceNames":["cert-manager-controller"],"resources":["leases"],"verbs":["get","update","patch"]},{"apiGroups":["coordination.k8s.io"],"resources":["leases"],"verbs":["create","get","update"]}]}
",
      },
      "name": "cert-manager-cainjector-leader-election",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-role-kube-system-cert-manager-cainjector-leader-election.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-challenges"},"rules":[{"apiGroups":["acme.cert-manager.io"],"resources":["challenges","challenges/status"],"verbs":["update"]},{"apiGroups":["acme.cert-manager.io"],"resources":["challenges"],"verbs":["get","list","watch"]},{"apiGroups":["cert-manager.io"],"resources":["issuers","clusterissuers"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["secrets"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]},{"apiGroups":[""],"resources":["pods","services"],"verbs":["get","list","watch","create","delete"]},{"apiGroups":["networking.k8s.io"],"resources":["ingresses"],"verbs":["get","list","watch","create","delete","update"]},{"apiGroups":["route.openshift.io"],"resources":["routes/custom-host"],"verbs":["create"]},{"apiGroups":["acme.cert-manager.io"],"resources":["challenges/finalizers"],"verbs":["update"]},{"apiGroups":[""],"resources":["secrets"],"verbs":["get","list","watch"]}]}
",
      },
      "name": "cert-manager-controller-controller-challenges",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-cert-manager-controller-controller-challenges.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"cert-manager","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-approve"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-controller-controller-approve"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-controller","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-controller-controller-approve",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-approve.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": {
      "annotations": {
        "cert-manager.io/inject-ca-from": "cert-manager/cert-manager-trust",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"admissionregistration.k8s.io/v1","kind":"ValidatingWebhookConfiguration","metadata":{"annotations":{"cert-manager.io/inject-ca-from":"cert-manager/cert-manager-trust"},"labels":{"app":"cert-manager-trust","app.kubernetes.io/instance":"cert-manager-trust","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager-trust","app.kubernetes.io/version":"v0.2.0","helm.sh/chart":"cert-manager-trust-v0.2.0"},"name":"cert-manager-trust"},"webhooks":[{"admissionReviewVersions":["v1","v1beta1"],"clientConfig":{"service":{"name":"cert-manager-trust","namespace":"cert-manager","path":"/validate"}},"failurePolicy":"Fail","name":"trust.cert-manager.io","rules":[{"apiGroups":["trust.cert-manager.io"],"apiVersions":["*"],"operations":["CREATE","UPDATE"],"resources":["*/*"]}],"sideEffects":"None","timeoutSeconds":5}]}
",
      },
      "name": "cert-manager-trust",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/admissionregistration.k8s.io_v1-validatingwebhookconfiguration-default-cert-manager-trust.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "cert-manager.io/v1",
    "kind": "ClusterIssuer",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"cert-manager.io/v1","kind":"ClusterIssuer","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"letsencrypt-cluster-issuer","namespace":"default"},"spec":{"selfSigned":{}}}
",
      },
      "name": "letsencrypt-cluster-issuer",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/cert-manager.io_v1-clusterissuer-default-letsencrypt-cluster-issuer.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-leader-election","namespace":"kube-system"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"cert-manager-controller-leader-election"},"subjects":[{"apiGroup":"","kind":"ServiceAccount","name":"cert-manager-controller","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-controller-leader-election",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-kube-system-cert-manager-controller-leader-election.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
  {
    "apiVersion": "trust.cert-manager.io/v1alpha1",
    "kind": "Bundle",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"trust.cert-manager.io/v1alpha1","kind":"Bundle","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"linkerd-identity-trust-roots","namespace":"default"},"spec":{"sources":[{"secret":{"key":"ca.crt","name":"linkerd-identity-trust-roots"}}],"target":{"configMap":{"key":"ca-bundle.crt"}}}}
",
      },
      "name": "linkerd-identity-trust-roots",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/trust.cert-manager.io_v1alpha1-bundle-default-linkerd-identity-trust-roots.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"cert-manager","helm.sh/chart":"cert-manager-0.8.4"},"name":"cert-manager-controller-controller-ingress-shim"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"cert-manager-controller-controller-ingress-shim"},"subjects":[{"kind":"ServiceAccount","name":"cert-manager-controller","namespace":"cert-manager"}]}
",
      },
      "name": "cert-manager-controller-controller-ingress-shim",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-cert-manager-controller-controller-ingress-shim.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/cert-manager",
  },
]
`;

exports[`KubeObject Can sync resources 8`] = `
[
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller","namespace":"default"},"spec":{"minReadySeconds":0,"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/name":"nginx-ingress-controller"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/name":"nginx-ingress-controller"}},"namespaces":["default"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["/nginx-ingress-controller","--default-backend-service=default/nginx-ingress-controller-default-backend","--election-id=ingress-controller-leader","--controller-class=k8s.io/ingress-nginx","--configmap=default/nginx-ingress-controller"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"docker.io/bitnami/nginx-ingress-controller:1.4.0-debian-11-r2","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":10254,"scheme":"HTTP"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"controller","ports":[{"containerPort":80,"name":"http","protocol":"TCP"},{"containerPort":443,"name":"https","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":10254,"scheme":"HTTP"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"resources":{"limits":{},"requests":{}},"securityContext":{"allowPrivilegeEscalation":true,"capabilities":{"add":["NET_BIND_SERVICE"],"drop":["ALL"]},"runAsNonRoot":true,"runAsUser":1001}}],"dnsPolicy":"ClusterFirst","hostNetwork":false,"securityContext":{"fsGroup":1001},"serviceAccountName":"nginx-ingress-controller","terminationGracePeriodSeconds":60}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/apps_v1-deployment-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/instance": "nginx-ingress-controller",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "nginx-ingress-controller",
            "helm.sh/chart": "nginx-ingress-controller-9.3.18",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "controller",
                        "app.kubernetes.io/instance": "nginx-ingress-controller",
                        "app.kubernetes.io/name": "nginx-ingress-controller",
                      },
                    },
                    "namespaces": [
                      "default",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "args": [
                "/nginx-ingress-controller",
                "--default-backend-service=default/nginx-ingress-controller-default-backend",
                "--election-id=ingress-controller-leader",
                "--controller-class=k8s.io/ingress-nginx",
                "--configmap=default/nginx-ingress-controller",
              ],
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name",
                    },
                  },
                },
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "docker.io/bitnami/nginx-ingress-controller:1.4.0-debian-11-r2",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "name": "controller",
              "ports": [
                {
                  "containerPort": 80,
                  "name": "http",
                  "protocol": "TCP",
                },
                {
                  "containerPort": 443,
                  "name": "https",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "allowPrivilegeEscalation": true,
                "capabilities": {
                  "add": [
                    "NET_BIND_SERVICE",
                  ],
                  "drop": [
                    "ALL",
                  ],
                },
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
            },
          ],
          "dnsPolicy": "ClusterFirst",
          "hostNetwork": false,
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "nginx-ingress-controller",
          "terminationGracePeriodSeconds": 60,
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "defaultBackend.conf": "location /healthz {
  return 200;
}

location / {
  return 404;
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"defaultBackend.conf":"location /healthz {\\n  return 200;\\n}\\n\\nlocation / {\\n  return 404;\\n}"},"kind":"ConfigMap","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/component":"default-backend","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller-default-backend","namespace":"default"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller-default-backend",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/v1-configmap-default-nginx-ingress-controller-default-backend.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "IngressClass",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"networking.k8s.io/v1","kind":"IngressClass","metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx"},"spec":{"controller":"k8s.io/ingress-nginx"}}
",
      },
      "name": "nginx",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/networking.k8s.io_v1-ingressclass-default-nginx.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","automountServiceAccountToken":true,"kind":"ServiceAccount","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller","namespace":"default"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/v1-serviceaccount-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "annotations": {
        "cert-manager.io/cluster-issuer": "letsencrypt-cluster-issuer",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"networking.k8s.io/v1","kind":"Ingress","metadata":{"annotations":{"cert-manager.io/cluster-issuer":"letsencrypt-cluster-issuer","nginx.ingress.kubernetes.io/ssl-redirect":"false","nginx.ingress.kubernetes.io/use-regex":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"oyelowo-ingress","namespace":"applications"},"spec":{"ingressClassName":"nginx","rules":[{"host":"localhost:8080","http":{"paths":[{"backend":{"service":{"name":"graphql-surrealdb","port":{"number":8000}}},"path":"/api","pathType":"Prefix"},{"backend":{"service":{"name":"react-web","port":{"number":3000}}},"path":"/","pathType":"Prefix"}]}}],"tls":[{"hosts":["localhost:8080"],"secretName":"nginx-ingress-tls"}]}}
",
        "nginx.ingress.kubernetes.io/ssl-redirect": "false",
        "nginx.ingress.kubernetes.io/use-regex": "true",
      },
      "name": "oyelowo-ingress",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/networking.k8s.io_v1-ingress-applications-oyelowo-ingress.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
    "spec": {},
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller","namespace":"default"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"nginx-ingress-controller"},"subjects":[{"kind":"ServiceAccount","name":"nginx-ingress-controller","namespace":"default"}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-clusterrolebinding-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller","namespace":"default"},"rules":[{"apiGroups":[""],"resources":["configmaps","endpoints","nodes","pods","secrets","namespaces"],"verbs":["list","watch"]},{"apiGroups":["coordination.k8s.io"],"resources":["leases"],"verbs":["list","watch"]},{"apiGroups":[""],"resources":["nodes"],"verbs":["get"]},{"apiGroups":[""],"resources":["services"],"verbs":["get","list","update","watch"]},{"apiGroups":["networking.k8s.io"],"resources":["ingresses"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]},{"apiGroups":["networking.k8s.io"],"resources":["ingresses/status"],"verbs":["update"]},{"apiGroups":["networking.k8s.io"],"resources":["ingressclasses"],"verbs":["get","list","watch"]},{"apiGroups":["discovery.k8s.io"],"resources":["endpointslices"],"verbs":["list","watch","get"]}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-clusterrole-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller","namespace":"default"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"nginx-ingress-controller"},"subjects":[{"kind":"ServiceAccount","name":"nginx-ingress-controller","namespace":"default"}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-rolebinding-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/component":"default-backend","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller-default-backend","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"default-backend","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/name":"nginx-ingress-controller"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"default-backend","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"default-backend","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/name":"nginx-ingress-controller"}},"namespaces":["default"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"image":"docker.io/bitnami/nginx:1.22.0-debian-11-r44","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":"http","scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":5},"name":"default-backend","ports":[{"containerPort":8080,"name":"http","protocol":"TCP"}],"readinessProbe":{"failureThreshold":6,"httpGet":{"path":"/healthz","port":"http","scheme":"HTTP"},"initialDelaySeconds":0,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":5},"resources":{"limits":{},"requests":{}},"securityContext":{"runAsNonRoot":true,"runAsUser":1001},"volumeMounts":[{"mountPath":"/opt/bitnami/nginx/conf/bitnami/","name":"nginx-config-volume","readOnly":true}]}],"securityContext":{"fsGroup":1001},"serviceAccountName":"nginx-ingress-controller","terminationGracePeriodSeconds":60,"volumes":[{"configMap":{"items":[{"key":"defaultBackend.conf","path":"defaultBackend.conf"}],"name":"nginx-ingress-controller-default-backend"},"name":"nginx-config-volume"}]}}}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller-default-backend",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/apps_v1-deployment-default-nginx-ingress-controller-default-backend.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "default-backend",
            "app.kubernetes.io/instance": "nginx-ingress-controller",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/name": "nginx-ingress-controller",
            "helm.sh/chart": "nginx-ingress-controller-9.3.18",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/component": "default-backend",
                        "app.kubernetes.io/instance": "nginx-ingress-controller",
                        "app.kubernetes.io/name": "nginx-ingress-controller",
                      },
                    },
                    "namespaces": [
                      "default",
                    ],
                    "topologyKey": "kubernetes.io/hostname",
                  },
                  "weight": 1,
                },
              ],
            },
          },
          "containers": [
            {
              "image": "docker.io/bitnami/nginx:1.22.0-debian-11-r44",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": "http",
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "name": "default-backend",
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "readinessProbe": {
                "failureThreshold": 6,
                "httpGet": {
                  "path": "/healthz",
                  "port": "http",
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 0,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 5,
              },
              "resources": {
                "limits": {},
                "requests": {},
              },
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 1001,
              },
              "volumeMounts": [
                {
                  "mountPath": "/opt/bitnami/nginx/conf/bitnami/",
                  "name": "nginx-config-volume",
                  "readOnly": true,
                },
              ],
            },
          ],
          "securityContext": {
            "fsGroup": 1001,
          },
          "serviceAccountName": "nginx-ingress-controller",
          "terminationGracePeriodSeconds": 60,
          "volumes": [
            {
              "configMap": {
                "items": [
                  {
                    "key": "defaultBackend.conf",
                    "path": "defaultBackend.conf",
                  },
                ],
                "name": "nginx-ingress-controller-default-backend",
              },
              "name": "nginx-config-volume",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller","namespace":"default"},"rules":[{"apiGroups":[""],"resources":["namespaces"],"verbs":["get"]},{"apiGroups":[""],"resources":["configmaps","pods","secrets","endpoints"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resources":["services"],"verbs":["get","list","update","watch"]},{"apiGroups":["networking.k8s.io"],"resources":["ingresses"],"verbs":["get","list","watch"]},{"apiGroups":["networking.k8s.io"],"resources":["ingresses/status"],"verbs":["update"]},{"apiGroups":["networking.k8s.io"],"resources":["ingressclasses"],"verbs":["get","list","watch"]},{"apiGroups":[""],"resourceNames":["ingress-controller-leader"],"resources":["configmaps"],"verbs":["get","update"]},{"apiGroups":[""],"resources":["configmaps"],"verbs":["create"]},{"apiGroups":[""],"resources":["events"],"verbs":["create","patch"]},{"apiGroups":["discovery.k8s.io"],"resources":["endpointslices"],"verbs":["list","watch","get"]},{"apiGroups":["coordination.k8s.io"],"resources":["leases"],"verbs":["create"]},{"apiGroups":["coordination.k8s.io"],"resourceNames":["ingress-controller-leader"],"resources":["leases"],"verbs":["get","update"]}]}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/rbac.authorization.k8s.io_v1-role-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/component":"default-backend","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller-default-backend","namespace":"default"},"spec":{"ports":[{"name":"http","port":80,"protocol":"TCP","targetPort":"http"}],"selector":{"app.kubernetes.io/component":"default-backend","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/name":"nginx-ingress-controller"},"type":"ClusterIP"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller-default-backend",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/v1-service-default-nginx-ingress-controller-default-backend.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
    "spec": {},
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"linkerd.io/inject":"enabled"},"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"nginx-ingress-controller","helm.sh/chart":"nginx-ingress-controller-9.3.18"},"name":"nginx-ingress-controller","namespace":"default"},"spec":{"externalTrafficPolicy":"","ports":[{"name":"http","port":80,"protocol":"TCP","targetPort":"http"},{"name":"https","port":443,"protocol":"TCP","targetPort":"https"}],"selector":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"nginx-ingress-controller","app.kubernetes.io/name":"nginx-ingress-controller"},"sessionAffinity":"None","type":"LoadBalancer"}}
",
        "linkerd.io/inject": "enabled",
      },
      "name": "nginx-ingress-controller",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress/1-manifest/v1-service-default-nginx-ingress-controller.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/nginx-ingress",
    "spec": {},
  },
]
`;

exports[`KubeObject Can sync resources 9`] = `
[
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"rook-ceph","namespace":"rook-ceph"}}
",
      },
      "name": "rook-ceph",
      "namespace": "rook-ceph",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-rook-ceph-rook-ceph.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"tikv-admin","namespace":"tikv-admin"}}
",
      },
      "name": "tikv-admin",
      "namespace": "tikv-admin",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-tikv-admin-tikv-admin.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"fluvio-sys","namespace":"fluvio-sys"}}
",
      },
      "name": "fluvio-sys",
      "namespace": "fluvio-sys",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-fluvio-sys-fluvio-sys.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"applications","namespace":"applications"}}
",
      },
      "name": "applications",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-applications-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"linkerd-viz","namespace":"linkerd-viz"}}
",
      },
      "name": "linkerd-viz",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-linkerd-viz-linkerd-viz.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"argocd","namespace":"argocd"}}
",
      },
      "name": "argocd",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-argocd-argocd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"seaweedfs","namespace":"seaweedfs"}}
",
      },
      "name": "seaweedfs",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-seaweedfs-seaweedfs.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"metalb","namespace":"metalb"}}
",
      },
      "name": "metalb",
      "namespace": "metalb",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-metalb-metalb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"default","namespace":"default"}}
",
      },
      "name": "default",
      "namespace": "default",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-default-default.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":"disabled"},"name":"linkerd","namespace":"linkerd"}}
",
      },
      "name": "linkerd",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-linkerd-linkerd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"kube-system","namespace":"kube-system"}}
",
      },
      "name": "kube-system",
      "namespace": "kube-system",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-kube-system-kube-system.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
  {
    "apiVersion": "v1",
    "kind": "Namespace",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","config.linkerd.io/admission-webhooks":""},"name":"cert-manager","namespace":"cert-manager"}}
",
      },
      "name": "cert-manager",
      "namespace": "cert-manager",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces/1-manifest/v1-namespace-cert-manager-cert-manager.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/namespaces",
  },
]
`;

exports[`KubeObject Can update sealed secrets 1`] = `[]`;

exports[`KubeObject Can update sealed secrets 2`] = `
[
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-applications-secret",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-parents/sealed-secrets/sealed-secret-argocd-applications-secret-argocd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-parents",
    "spec": {
      "encryptedData": {
        "ADMIN_PASSWORD": "lowo-testargocd-applications-secretargocd************",
        "password": "lowo-testargocd-applications-secretargocd************",
        "type": "lowo-testargocd-applications-secretargocd****",
        "url": "lowo-testargocd-applications-secretargocd********************************************************************************",
        "username": "lowo-testargocd-applications-secretargocd************",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"ADMIN_PASSWORD":"ZXhhbXBsZQ==","password":"ZXhhbXBsZQ==","type":"Z2l0","url":"aHR0cHM6Ly9naXRodWIuY29tL095ZWxvd28vbW9kZXJuLWRpc3RyaWJ1dGVkLWFwcC10ZW1wbGF0ZQ==","username":"ZXhhbXBsZQ=="},"kind":"Secret","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","argocd.argoproj.io/secret-type":"repository"},"name":"argocd-applications-secret","namespace":"argocd"}}
",
          },
          "name": "argocd-applications-secret",
          "namespace": "argocd",
        },
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-redis",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/sealed-secrets/sealed-secret-argocd-redis-argocd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {
      "encryptedData": {
        "redis-password": "lowo-testargocd-redisargocd****************",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"redis-password":"aERVUjNMdlc4ZQ=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis","namespace":"argocd"},"type":"Opaque"}
",
          },
          "name": "argocd-redis",
          "namespace": "argocd",
        },
        "type": "Opaque",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-secret",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/sealed-secrets/sealed-secret-argocd-secret-argocd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {
      "encryptedData": {
        "admin.password": "lowo-testargocd-secretargocd********************************************************************************",
        "admin.passwordMtime": "lowo-testargocd-secretargocd****************************",
        "clearPassword": "lowo-testargocd-secretargocd************",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"admin.password":"JDJhJDEwJFJ3TGtBcENPNkdKSDFRVXJUTGNlVGVFODkwWjlDeU5jS2p4RkNQSmxWOEVwNDBBejgwNG91","admin.passwordMtime":"MjAyMi0xMC0xMlQwNjo1NjoxMlo=","clearPassword":"ZXhhbXBsZQ=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","app.kubernetes.io/part-of":"argocd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-secret","namespace":"argocd"},"type":"Opaque"}
",
          },
          "name": "argocd-secret",
          "namespace": "argocd",
        },
        "type": "Opaque",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-sp-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-sp-validator-k8s-tls-linkerd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {
      "encryptedData": {
        "tls.crt": "lowo-testlinkerd-sp-validator-k8s-tlslinkerd
        "tls.key": "lowo-testlinkerd-sp-validator-k8s-tlslinkerd
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUxqcXlHVE9oMHZXMHNqNWZ4bCtEckF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl4TURFeU1EWTFOakV5V2hjTk1qTXhNREV5TURZMU5qRXlXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQU5nYnQzeUwzVWlneUFzb0xFVTlINjNZWFZKOEJ3UnNpYlk3SjlBVVpoaXI0WlMwanlHTwpFWDJjb1h5anZ0RzVZWUZEUkVKOEdKWm9mUitOV0hNc2ROSUVuU0dReGdnSUNQSjlBY1pqSGdWU0xxbTJUNzFjCkFVU0tUVWpQV3dNb3loK1c1UGVURS9YMGVtM1ozOFhtbTUxdEc1dmkyZndONGQ4V0gxc1lSV0w3cU9NRktLZUEKVElyV2k4b05GOVlwUjIrS0pwQndlditnU1NBem9BWmltSTY2b0ZpQTJkV0lta1gwNkpndEp3ZHpqa01oWXhYOQpIeU5MOEUwWHF2NDl5dWZUZUppOUxYSkdScC9idHpPTTFPRThxYWZJSFNFcHVJdEh1cDlpUms5aHFjSk5LWkZxCm1VajJzclBnd0hYODBjdnhhblRRa3lWQW4vam9DTDlYT2pjQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFDcnN5QTVISU9lSWFjakdJM1N1MHFGVjNLM0JWQ21YMC83VEpadFExdm0KVmZieXYvbEJrcmlzUmZWd0xkTjduRThidGllQkZvcWhrWGFielQrR3hjZlJNTEs5Wmt0K1pJb294MVZBK0tFZgpreGdRenpJSWpTSE85SVIvSzRGdDVKOS9KNzhDZnBQTlE2U2pDYkFVNVRkblVER1BJR3BZc2N6Z3AyQVZKcGtrCi9KY3orZE8yMUV6NnY0emxkSVk4ejFKMWoyZ1RBam5qZHp6cHdQaVkyNXRsL2hPSVVnT21NdE00clc3SGNQVWQKRFBhNUt4d0xqQ0NocGk3MlRLcEZiYWVFUnltQ1MvRkg4VGZFejBNQ04vcUZqWFp3dEoyUHVOSlpud1FvZ1hZaAorakgrcWVnek1iODMyVjRQSmkyZjRIakp6eWVCNFdwek5QeVdrN0xOOFN1QQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMkJ1M2ZJdmRTS0RJQ3lnc1JUMGZyZGhkVW53SEJHeUp0anNuMEJSbUdLdmhsTFNQCklZNFJmWnloZktPKzBibGhnVU5FUW53WWxtaDlINDFZY3l4MDBnU2RJWkRHQ0FnSThuMEJ4bU1lQlZJdXFiWlAKdlZ3QlJJcE5TTTliQXlqS0g1Yms5NU1UOWZSNmJkbmZ4ZWFiblcwYm0rTFovQTNoM3hZZld4aEZZdnVvNHdVbwpwNEJNaXRhTHlnMFgxaWxIYjRvbWtIQjYvNkJKSURPZ0JtS1lqcnFnV0lEWjFZaWFSZlRvbUMwbkIzT09ReUZqCkZmMGZJMHZ3VFJlcS9qM0s1OU40bUwwdGNrWkduOXUzTTR6VTRUeXBwOGdkSVNtNGkwZTZuMkpHVDJHcHdrMHAKa1dxWlNQYXlzK0RBZGZ6UnkvRnFkTkNUSlVDZitPZ0l2MWM2TndJREFRQUJBb0lCQUIybXIrWkd5blhNbWFYdQpQU1RDM2pYY0dmSFhVcDhveFR4Ym9YckxVYmJRM29Lb3czcTNJMjg0cm0rTGlBTCtqSUpQMkczRzJSakovV0QyCjQ4dnByWjJqUkd2MmtUVkk1UEZnZFgzaTI1dWZTd2UrRy9LL1RPMDZqS0FRMDB2N3JML28xRUdqekhsU3NmbWcKaXpOOEVKM28rb0RJLzErMkIrZTBBVmxlV3liWllDWGx5bFcwb0VqUnE1SUcrZndWaitnbmxiUEJXSjl5N3ZCWApxY1dneFM5WGpRN3MvTTB4NGtWTk1rNWV2ZGlVZWRtdlEvT2d1dXlwUENYMFdLd3hXOHkwaGVYUTQ4Z3htaU1sCnBRMGhVeUhrNmwyV2NYTHhaUXBPTUdHSEpab1dadmFtM2d1SmdkdnZyNE9OMkhmTUFkcmxoZWNaNEswbHM3ZEwKYUJDRjJRRUNnWUVBNkRGV1hrL1VpVjc4NDQwaVZnZWlnN0dkN0FIOVk2TkVrZVQ5bmxNMFdIemI0SnZ4NTRQcwpWcVpsSXV6SThVek42eFFJUjROZUh4NXF2VDhEdEhqbkZWczZEandtQlI0WVhFYXBRd0MyeEZ2QitrN1lXOFEvCi9weitvRmF1RlVCMEtEU0VGRlgxN3FUYml1ZjhEZENhaWE1dzdBN0RCbFVIWjBLajlHUWhLaHNDZ1lFQTdrUXcKbXhqVzNhbjQ5bnRBRFZYVDNHZWQ4T1ZBb2RDa01FNG5tUUlqNjh2UVJtS0pKWUNRNURkRGZBQ0xDVlhwY0t5UAptL0lsYXlPOGdlSGcrL2pCRW9lVVZLaDM2TURrOTJ4VndERFZKV0lzNWZBbEUvL29JZWt1MVlKWEVEbmNLcUpZCmI4KzlLdkVMVjRpTldoMkRRblBYQk44NStCMTZ5cEFIRHdHSXNoVUNnWUVBbjB3Sjl4Wkp1QjBrM25DYlYrNVEKL296Q3pZSG45NDJ4bzI0NDJZQTM3MlZwN0VUUXg0Ym9nK0lRak05cVpMSE9yRExJSTFmcklPcGJUSTZJMmk0QQpTOVNVbGVPS0tnU2xyZGtFa3VWUWZwSjlHRjh6YkhITmZiN3pxY2tPRWFKd2pvekkrTEtvMFJybFMvMHdIY0k1CjQ2OTc1VmVUVVNyUXMzVXl5cDVQYW5VQ2dZQUErVzVwYy9TTSs0RDFJUlBsK2cvZnV0eStlM0dFTitJMEFGM1IKRmwwblBiSWdWNDdRQkhLVFBGYWVUekpDVzRPVTNsL0g5M21Ic3FHMnRrSEJSZ2NrR0VIWEJzbFd2bE14WDlRSgo4U2t0K2ZUTkMrcGE1cFVBYm4rdWg5WHJUeEZEYTE2Sk5vUkRoTERUTHMvRktwRzYxOVp0UXF4dUExRFpPeldNCkxpbHM4UUtCZ1FDMHBMZ2l0eUc1NjdleHZkbFc3RithcWNldGU2RzFsREdjZEE5Q29PVDNYdTBUa1MrUzJpcWwKaWJxRFdaV0c5Q3BFN2VFK2l3cEdWMEx2MzVOS0JwUCtGUGF6Z1lhbFNLblBmdzRNaWUzZ0R4T0RXM2xCcTNxcQo5bEliMmNZU3E0ZDIvVUVPV3U1MXIxdG52QXZKUUwvN3ZJKysxdllyTnhwZ0lWU2dMMUtRR1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-sp-validator-k8s-tls","namespace":"linkerd"},"type":"kubernetes.io/tls"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
          },
          "name": "linkerd-sp-validator-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-policy-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-policy-validator-k8s-tls-linkerd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {
      "encryptedData": {
        "tls.crt": "lowo-testlinkerd-policy-validator-k8s-tlslinkerd
        "tls.key": "lowo-testlinkerd-policy-validator-k8s-tlslinkerd
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRYnhKWXU4Z0xHV1l2TW8xRFloRFZsakFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpJeE1ERXlNRFkxTmpFeVdoY05Nak14TURFeU1EWTFOakV5V2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM1MXRDUHpXZHVKVHBSWFBiZklpSlFqZlQ2Z1FRMVJ4di9uV1J0YThuagpFbkNGTFl1YWtURTJLZEFlUndEenBRTldBdVBiTGlvSVA5RytRRHVpakRndjlKRlJNMVhhSDQwbytqenNFZ2FICm8vbi9LeStKb0hWbGtEcndoWDNRazlIOEIyNU1BT1dBNXNVaTdncEsxR2JzSmZOMzd5LzBlbENCNjY2U01WSncKMXlmSlVWbGxKVFg5RDVPR3VlaDdOcjVRVkVFbm9hTG5tOHlHMjZwQ3p5VkFmMnh3WGFUUTlWY3Q5RERRUEpXeQoycjl5ejV1VXk5WWV6eW9UNU1aOFVXNEZNeWo2cWNlSEtTc3gvM1BDZjc4UXpwR0xNRjJZM3grV0ZJeWpVZ2FkCmR2YmFxLzNidG5DNDdCcWx2RThPc3hvTG4vbU5ldnNSNjlzZWpRNCttUk1YQWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFWjdSay9haUp6aGJLem5Gb3pudEhmK2xmaVcKbU9VSmorV0QxY2JqMlhqdHZBcksvUjNYL1lYTTVCMWdNRDFJQjMrL2dsb1BEa1NqM0MrVWlDazh4WGh6b2VpdwpiSHhNdEdWVXVpQVpHSTdpc2NxOFZJaFQ3QjFWTFB4eUtSYzYvUytnMTlkRURWdDJRMGFvS012d2RkRDE4V3pICkdhWDFJUmNZUVgwYW55RXZpRzBhaEZRc1JvRytkVmZESzVDRVdkUzhXT3lET1ErNFhWOWR5d1h4ckpISDdXQlEKV09SSzVKV2pyUWg1bEdXaUh1NHQvcEFsalJKZWJ5NDU0T3l2dENWcTVkSElIOVl1QmRFc0d5cmROL0Y0VTBGMgpIM0NMZ3dTZlh2NXBUazdaUHZtSXdySHd0WHkxbE1ucHh6WVF3UmI5cTQweTZOUlNvZENjbnVXaVNkUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdWRiUWo4MW5iaVU2VVZ6MjN5SWlVSTMwK29FRU5VY2IvNTFrYld2SjR4SndoUzJMCm1wRXhOaW5RSGtjQTg2VURWZ0xqMnk0cUNEL1J2a0E3b293NEwvU1JVVE5WMmgrTktQbzg3QklHaDZQNS95c3YKaWFCMVpaQTY4SVY5MEpQUi9BZHVUQURsZ09iRkl1NEtTdFJtN0NYemQrOHY5SHBRZ2V1dWtqRlNjTmNueVZGWgpaU1UxL1ErVGhybm9lemErVUZSQko2R2k1NXZNaHR1cVFzOGxRSDlzY0YyazBQVlhMZlF3MER5VnN0cS9jcytiCmxNdldIczhxRStUR2ZGRnVCVE1vK3FuSGh5a3JNZjl6d24rL0VNNlJpekJkbU44ZmxoU01vMUlHblhiMjJxdjkKMjdad3VPd2FwYnhQRHJNYUM1LzVqWHI3RWV2YkhvME9QcGtURndJREFRQUJBb0lCQURMQ3YxTVlLdkZHRCtqYgplTDg0QnFGME5QOGJzSGVSQmMvTFFQdzJYZjI5TXFqZDZPeitUYS9hdWZNYk4rSlZKMVVlRXZqeVloN0F0OXk4CmxNMXdlWVIzekIyZTVRdGdaT0ZWZ01DR3ArdnkyVDFlb1d4NVBMZlNMcGMyRDBpaXA4K3NnKzhVcTV1SzdUdisKUXlkdlh2R1A2REhSVG9yN3dmUEsyWE1yTDdhTVJ5Yy9KSi82RXBnYytzaUNxakpRSkRMR09xM01MWmMybXdIVwpiZzF2NHo3VlBTWjBNRk1ka1BiNEYxV0d2TEJBQXVZVWtEa21mTTRPcVNDUm00TlVrSURNVHJRVllqcmRySmp6CjExSk1jMzhkTUdaNFF5UDc5VVNqajFBM3VSRFYvTGVYQjFvcld2SGYrc1hkUmVSdTd5cmRwemhwT25xOWVxWmMKMmQ4bWlXRUNnWUVBNEx4N1pMWVRqRzFVaWdiTjBWRkpva2M0RWVQaE5aT1dJdDNQUmRJM1dXUzJaZGtBbCsxZQovK1IxTHhqNmtQeWl6UVNwWi93Sm1ZVmR1VmEvTExFWjE3elJBa2xUUmtXbk5qdDJBRVNDT1lJdllFMDcwcmRyCkcxdnZMcmUySEJTNTlFczlrY2VwNE9PZmlTd3c2MnFFRUwwL1pxVTBWVUxzK3FXdWNsYkNqMmNDZ1lFQTA3RVgKWmdDV25BUVBYdkMvN3Y0d2RaYkJFVGZYVVRVRDErY3Q4WnNObU9GQmJORjkzOEJIcTdLUVdXMjR4UkswNUVHOQpCMCtkSjdvRGpNQkJBNjJyb0hJTGFMNHR5U3ZpMXJVczlxUzhFY3c0WUVEOTZrYyswL1FBcStmOWkwK1hYTGdUCisvaU5lNDBmcDN4dXY0QUU4TFlsbjlsRWx3V2NleklTdENqdUFORUNnWUVBZ0gyREZ6dTZ4WWtrMHAyOVF6WDAKb2FHU2Z6Z0k1VGJ5bWhDemx6bnZoMTY3b2xPRnNWZDMvMXBCWGFJc2NJVGhGOUxZZ0tsclc2a1N3d3JEMXV1UwoyUFFOay84VWE1TWJYVGgxNlFWQ1oxcjFkMXZ4SGpMY1BCSStHRG5WRncwS25KQUFMYjg0YzJueEp0NXJRYzN1Cm9CdHppbDVlSTNsV1FLQkZzdjNEMDNVQ2dZQmtBNUFOZGd1eURFMEN5dld6UVU2OXo0ckp5cnNrdDhwb0QrWHAKOXhxV2R4NEUvbmpjNUtnMzIzWk5lZ1JJdjR6TkpxM2JMV2NQWk5mV2dPSjJqVysvcndIcTY2Y1FHM2JoZjltTgpjY2tWRTRvekY2R2ZOU2ZlMWJJWGhkU0pKQUpjSU8vNEpMY2JmMUpNUEFMSzRQMzBoK29BdXBLb1UxTlo5UTlYCkpOdEZjUUtCZ0RCVjJKa1BNajdhSWMvL05pdGhmVEcrVDk4YktBUDhmQnRZZ1FEVmxuMVlmNS9XRmZ3SGVXRVcKUXROdXc5QmdtanhIUDRReFRxR0krVVNqTjJ1TzVyK0hNdUgrNlRydThSbVRRMkJad1ZEcnhDQXo5Uks1OTFuUgo0dWZpeFlQZGs5Ly9PU0lhdUgzYlp2RGhHbzcySFNCWjNVRm9KakxTamVJcUx4N25CdGFiCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-policy-validator-k8s-tls","namespace":"linkerd"},"type":"kubernetes.io/tls"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
          },
          "name": "linkerd-policy-validator-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-proxy-injector-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-proxy-injector-k8s-tls-linkerd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {
      "encryptedData": {
        "tls.crt": "lowo-testlinkerd-proxy-injector-k8s-tlslinkerd
        "tls.key": "lowo-testlinkerd-proxy-injector-k8s-tlslinkerd
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVakNDQWpxZ0F3SUJBZ0lRVVc0ZUcybUJzV2ErS2tFSFFyajhCREFOQmdrcWhraUc5dzBCQVFzRkFEQXQKTVNzd0tRWURWUVFERXlKc2FXNXJaWEprTFhCeWIzaDVMV2x1YW1WamRHOXlMbXhwYm10bGNtUXVjM1pqTUI0WApEVEl5TVRBeE1qQTJOVFl4TWxvWERUSXpNVEF4TWpBMk5UWXhNbG93TFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5ClpDMXdjbTk0ZVMxcGJtcGxZM1J2Y2k1c2FXNXJaWEprTG5OMll6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFNbEN5UUhUSVp1MWRUbnhZU1FpN3QwTWN2OTkrVEUydzFsMXBaUXBTV001U3FvaApaaS8xc0FpYTkrZ213cEc2c3BXNjFQeGwybE1TN0lRSHNqVnR2T2xKc2t5MXU1OU85bXdjLzdvWEYwVUtLRmFXClJNcWpwNmM1S3krRitkRlJlNUpnaW9kZ0F3QnB2dko1QzI1SldaZGVuMG05blhIZm5tYVlvYXlDVDdNcnVMWW4KVGt6Vm8rZWxHTWI0dVNMeGpuNnBUNjQwSUk4cUxqNHphalViOEZtOXR1TVBnT1hmd1NuUXo0a2JqOVI5QkxnTQpFZDNBaG5xaldnTElsdVA4QjMzUVFRUnBsN1VLM0ZRRk0zK3gzMHJrL0hMc21zK0tXa2pFRTczSHVTWHdLQWlLCmNQalRnUzNsK1lvUmd6N2VZVVFrUnJmUFJKWXdCUTUzNTJ6ZER4OENBd0VBQWFOdU1Hd3dEZ1lEVlIwUEFRSC8KQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RQpBakFBTUMwR0ExVWRFUVFtTUNTQ0lteHBibXRsY21RdGNISnZlSGt0YVc1cVpXTjBiM0l1YkdsdWEyVnlaQzV6CmRtTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSTJoMTNrcUVWR0kwSmw0bEIyVjEvaEZ0WGxrVmtOSVEzdDEKWjV5ajV0U0RyTFhoNCtLbnVpd0NNamg4VldaR2NESHp5ZjZYRUJBbFV5dzdUUWZ0OTY0UjYwRkFLWDdwUDhhRApYVUJCMTdZejB6T2VuM2tMQmVIc0ZoTGprOFA3NURmMEFmQUJTc2FkU2NMaWtMaWNOTWZCM1NoeXFjWHFIcGNUClVsNHJYRXl6ZWF1YTVTMFVEV2VMNHRkTkhWVTdRWDJ0Znp0d1lhcVpVV3hMQ2hiQlhEdW8yRTluWjVRYTlkT3cKMWhhQzFYSUhXcXVnTmtXRHJhYkJXTmVqZFY0Q3hQZ1lKTTRrWC8vRXFFRXAxTzFZNGt6bDBlcWV3anAwT1dGTAo3cDFEcVNZL05NeUVZZUhqbFpGQndnd2hYVzkxUWpiYVV0VUtPUDJUcFd2YzVRNnlEeGc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeVVMSkFkTWhtN1YxT2ZGaEpDTHUzUXh5LzMzNU1UYkRXWFdsbENsSll6bEtxaUZtCkwvV3dDSnIzNkNiQ2ticXlsYnJVL0dYYVV4THNoQWV5TlcyODZVbXlUTFc3bjA3MmJCei91aGNYUlFvb1ZwWkUKeXFPbnB6a3JMNFg1MFZGN2ttQ0toMkFEQUdtKzhua0xia2xabDE2ZlNiMmRjZCtlWnBpaHJJSlBzeXU0dGlkTwpUTldqNTZVWXh2aTVJdkdPZnFsUHJqUWdqeW91UGpOcU5SdndXYjIyNHcrQTVkL0JLZERQaVJ1UDFIMEV1QXdSCjNjQ0dlcU5hQXNpVzQvd0hmZEJCQkdtWHRRcmNWQVV6ZjdIZlN1VDhjdXlhejRwYVNNUVR2Y2U1SmZBb0NJcHcKK05PQkxlWDVpaEdEUHQ1aFJDUkd0ODlFbGpBRkRuZm5iTjBQSHdJREFRQUJBb0lCQVFDaVJCVmFRa2E3aXU3TAoyOEJ0YVRqYXdobkp3bUJ5Zkd1K0tldG83R3k5OGtndnFTUUJrUDN2d2pvVVU0UFdDUWZKVHN3Ly8wS3FiZnlCCmFzOFU0cmhJQXVJZGxQeURzaDllQlhkdEt3Ylk1QnFuelJvRG96VWR6eXJ4Y3Z4NjlrNUNNMUlkV1p5eDdaQkYKWUxDRnA5L3kraGhGVlBxbkFCdHZMcXBUTXZGZFMzaTFNaEtOQ3dLbW11ekxGTHBFUUhydDhTNW5kZ21SdzVYbgpWM1NVdDN0dVduVlVLanhsdGx4VGk1bDdqUTg2L3BSV2xGMDhVang3eFdpZCtnTEpjT2ZnZXF1c3A4OEJVZ014CnRHVXpnRjZQZnVnMDVIQmh0SVR1VnN1TGs2akhMZWxPd0t1UjZkam5pTkdjM0hJY3lFN204UERCUWUxak5WY2EKR1Y4MDJtNVpBb0dCQVBZb29YQWZ6Sld0OGtwQ01URjJnMjkzL1ExaFR2N25keTV0YkxndklwczJPSXVlZ1hZWApYLzdnaXVselhwVVR4Q1dFUG5ieSszRHpHZktQa3hKaUpWL2pIOVJ5b2t6Zi9hMEV2YjVOWFlVOE1CYkgydG9sCmRPTXo1aXhVUzg5Y2hmVmllMGdrOXR1VjB4MVNJMlV4cktFdmpZT2dyaGk0MDlZZ20xc1pMZ3gxQW9HQkFORk8Kb3hreUxZM0JQeGdKQmdEYityTTZ6YlRmMjdqMlk3SFNsT0ZsWCt3NUhVNHlVTjRoeXpwVU5Ca3o2aHhoakx1eAplZ01VU0poZHVJc01iUmw1NWpEVzFnVVRhVXNIdm1GQjEyTEpWVENOUWhhK1JybTRqNWVzZzRJYzZnV053RmFCCjZCa3BRdE9wa3ljUzVuWnFxMy9lb3dWcWlVTFM5RjE3VWg5emVRckRBb0dBVzUzenVBK2R6WGZZWGRzVkJCdmYKLzNUaE1rR3RiU0lwTVpaNGlIVENwSklocVpWdENjN1pZN3VlK0JTQWQydkw3VXF6RlFLS294ZFg2UGVXL1ppWgo0SDVnTW1vWURoU3dEZDFkNFo1WjJHVDJZUVF4YUUvWW1WZVBxNkFVTnpGd2lrd0ZKbXpibEE3SGJIcE53alFpCjFEc21xSDc5VFNZOWNjemhCWjd4aktFQ2dZRUFvR29ZYmxNYXZxNEE0VGJwTnZkaHFNUEVySDkxTXNrRGwySEIKWVE0RStsSzd0eGF4QzgzeXAvMnBBRGZka1dyaUpXZmNEMGdZYTA1SkJhaThaTzRjRWdwVmRRWnZpR1dpNzM4Ngp5Q2R0OXd3TVBzb09Bb0VFN0VYM2RGMGNycXo1WUZPbndzRHd5ckFJYThYOGczMDFlNGJ5Z2xBb2F1S3JEb3BaClltbHB0MmtDZ1lCbmc4NWdINWV3WFd5Z3RKVktxdEJXazhlNWMwb2tPWk5wNDA0b3J5ek93RmdxNzFEWFdVVXcKUERxcWhObVZRK0QwN2dNMFlBQTJMUGJpYlo2L21WVE5MYjFMYTQrNm80Q3JCRjdsU2o5KzJyTE93QU5GSXZwLwpnVitRcGtsZVMxTXVIVXc2TmcwZzF2OU9sOGJlbFY0SDVMeHJPQUtnMTNIRWJWRGFoZmxsSmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-proxy-injector-k8s-tls","namespace":"linkerd"},"type":"kubernetes.io/tls"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
          },
          "name": "linkerd-proxy-injector-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-viz-ingress-auth",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-linkerd-viz-ingress-auth-linkerd-viz.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "encryptedData": {
        "auth": "lowo-testlinkerd-viz-ingress-authlinkerd-viz****************************************************************************************",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"auth":"YWRtaW46JDJiJDEwJHExSDZCbmN5NXkxQ2MvQ0hncS9UNS5LRnZyZFlwWE92bFJycVpxZHY5OUM4enAxVFI0WTF5"},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"linkerd-viz-ingress-auth","namespace":"linkerd-viz"}}
",
          },
          "name": "linkerd-viz-ingress-auth",
          "namespace": "linkerd-viz",
        },
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "tap-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-tap-k8s-tls-linkerd-viz.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "encryptedData": {
        "tls.crt": "lowo-testtap-k8s-tlslinkerd-viz
        "tls.key": "lowo-testtap-k8s-tlslinkerd-viz
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQU9CZ01Yay9yZ1pxNFZ3a21NZ2krZ1l3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpFd01USXdOalUyTVRKYQpGdzB5TXpFd01USXdOalUyTVRKYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUMrdE1DYzBuaVd1eFhzYzRHU0tzZkIKNkt5ZkhCSVZrSG1Fc1c4WGlIWlVqa213NzgyVUcySWpXK2krNm0rcDBHQkNuc1JHU2x0ajBmTHlHekJKV2U0Mgord09zdi95NDF3c1hnNEJjY0wyWnRiVS9DNzRWNDZXUTgwcnFVbVRJVHg0enBxTWJ1YXVvMkRXdkNwVWV4L1k1Cm43WjBkeTY5QXNZMW9nK3dJUGRvbzNoRElIUlZOc0pjN0tjdFJ3QWk3MFRuUnNONWxoNGtkdjA0MWIxMHpuZDcKSFBpTm5IVmFOZFJwRGVZcXE0cytKTDFiWEJVeWNDVDV0NFVnK29mYTNraS9TNVFrQUxFUzNiMURhVE5hUnh3SgphWFBUS1JpVWFUQ1c4Mmxwa1FPTWIwSy8wT0toZk9YQkFVZ2Ztb2orWTBuK3hZRFFNc2tTZUNWTWpPUFVhNjNCCkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQmdTZ3JLVFJ1QXFCN1hxazBxQk5KeWx2eWo1SjNDCjJvbDA2K1FRNEdNa1I2QTJlZklaMDJTbzhUbE5sNVhMNTFkUGt3VFIvUWNBd3A5UmdaWHFvZFQvcGdZbnhnMVcKRnJvb1VsdVY2anNyYlJlZ0RaOGVwTnl6Wm9RM3pwU013K3UwZldRSmlsVzZxbEVTZ1hWeEF1N3lIZnZHRHpISQpMT3hrY3p2YzQvaytkNXNpc2IxdnFWWEdsUjFDOFNGYU85V2o0Y2VkZEUzaFBXN2o2M3BMV0NxZCtyWkoyVnRnCnorL0ZzMFVnbUlCVnh1YmhmWjd5UGhqYWJTcFd6U3hCRCtQSzgvb25FM3N6RWo4dktMQmljbXFaTEhHTENQUXUKckdZM1g5ajZ4UW1jdE0zQ2hvck5FWmFXV2I1WDBrNnVrajRxSlJRc21QV0xCRSszSlZMUkIycG8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdnJUQW5OSjRscnNWN0hPQmtpckh3ZWlzbnh3U0ZaQjVoTEZ2RjRoMlZJNUpzTy9OCmxCdGlJMXZvdnVwdnFkQmdRcDdFUmtwYlk5SHk4aHN3U1ZudU52c0RyTC84dU5jTEY0T0FYSEM5bWJXMVB3dSsKRmVPbGtQTks2bEpreUU4ZU02YWpHN21ycU5nMXJ3cVZIc2YyT1orMmRIY3V2UUxHTmFJUHNDRDNhS040UXlCMApWVGJDWE95bkxVY0FJdTlFNTBiRGVaWWVKSGI5T05XOWRNNTNleHo0alp4MVdqWFVhUTNtS3F1TFBpUzlXMXdWCk1uQWsrYmVGSVBxSDJ0NUl2MHVVSkFDeEV0MjlRMmt6V2tjY0NXbHoweWtZbEdrd2x2TnBhWkVEakc5Q3Y5RGkKb1h6bHdRRklINXFJL21OSi9zV0EwRExKRW5nbFRJemoxR3V0d1FJREFRQUJBb0lCQUVFU04rN0t1aTdrWTFTdApEUGNzOWNBcWZreEVMYitCN3BUaVhqK3Zab0R2bENGMWtiWUpxZkRhdVkzN1BHSzdJVDFhSXlyQTBISTgveUt4Ck9FYXZFdU5idnlOQTF5RFM3NHYwYU9ZaDZlLzYybjlLcUcrYm43RFg4eVlGT3pKR0hNNE8rL1RINDlUWEFXcGEKdUFzcXU4OXB1YjMvdE1qMW0yQk5qZ0RSSHRwcTVoL0RsTWxOVkIyUEVlRGJrN1p1SWVkbENJNUhmZ0ZmVTJKUwpyY3FEaVM3MnB3N1duVkFKYmZsZ2RMMUVTNmpVa3RNaU0xa09RY2dWbm0yV3pLTGZjQUVWaWJaZ1E0ZkFwMlB6CktkMHIxL3h3cmlKNmFEYUtpRG91cVUyaWFjM29QRTZzU0M4QkU2dmZmYnZoTDV4c1hKOHloNU1EMHFjY2o1QXYKYy95MVFZRUNnWUVBMzc3d0NqditqZjdrT2xHR3c3eVZGRUluVE1kM290bHFzdk5oTERLeHFhNVBCYTE2NFQvTQpwTFBKUUZLUzBNRE14TTlacEVTUmlCcy9UcTNic2hONGQyWmRrN2NPa3dhVkIrczFWVXJYelN3WE1OWDE2M2UxCjMyYk8zemtsMzdMQzczakQ5WXhsd1ZRbUZHZXByai9PK2d0ZHdlMHM0TE91aFpxTVZIMnp6YmtDZ1lFQTJqS0YKdzY0dDlDNEJwNHFvMmtSOXJNcmVIbnhFWk9RWHFTZ0NxSmszYjNaOURwWGlHL0FGbkpHNmliVklhUU5JVUdFWApPYVRWL29vVTgrWnU5K3VxQTgzZFhyd3daVUVhV3BQMGJMNkdFNG1zdDVYRnhYTjltQ2hOV0tsbmRkQnlFMUdUCmJpSGY5SW54bVVyVXVKeHJPWllqQU1saThCa3hXNWdZWHFqNEpFa0NnWUVBcEVlMlNWMXBkdXE2dWhNWUJ1bVUKOEEzdWV4Sk54aFVxb1gvUFRqdGVkUDZWNk01S1ZjNlpQQ2tCVUNnUXdoTjloZGZVc3FiaHovUnBsQ1JWRmJmMApFSDdwb0VhYy9kaXNYZWNWL3F6NExCMytYUTRNQlRxZElBMkZRU0xkcXhTK3lrTjZaZlVTMVZNcXJucTZmRVUvCmZCb1NXZ3dCa201N2FuOWlIN3MzNUlrQ2dZRUFzU21zYW9HV1ZsaTBoekNTZ1FaemRFVVRySFVCbzFsL3pKenIKNjdEYnplakxDWGl4S2pYc21IL0trZDFiZWNoc2dyY1NnSDlTTVdZME5RUzR2UnZmNDA3WG12LzUyM3pNeFJhMApzMGJPM2pZK3dxRWMvNEVTVE9VTVNCemtJRWlyRnZ4NVZFYTA3SHpFYWM3VWdVQ2YzeFlFUGJOR1hlUldxeVFIClJYUzBaZUVDZ1lFQXdXUDU1VnplWmdlTjFtZ1hqWVNNbjBIR0FaZmljYzRQN20rREF4cHFPTjBOOFJsYUFWblQKN3BHbjA4Q3NCRytiS0JhZk1qb2hWSFhOa2JMUWZENFdsU3BwWG5UUjRzUVlOQkVaUHViaW1TRkppN2h1VkJQUgppcHJ5VFZGcW0wbDljQ3UwdTkrSjR3SVB0TTNjbE9tZ0tHakg5ellFak1zZ0NnbHBaOUZjNmRNPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"tap","linkerd.io/extension":"viz","namespace":"linkerd-viz"},"name":"tap-k8s-tls","namespace":"linkerd-viz"},"type":"kubernetes.io/tls"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
          },
          "name": "tap-k8s-tls",
          "namespace": "linkerd-viz",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "tap-injector-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-tap-injector-k8s-tls-linkerd-viz.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "encryptedData": {
        "tls.crt": "lowo-testtap-injector-k8s-tlslinkerd-viz
        "tls.key": "lowo-testtap-injector-k8s-tlslinkerd-viz
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRVjBUQjdVdWxQSWsvUXJUT0xMVFE2ekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TVRBeApNakEyTlRZeE1sb1hEVEl6TVRBeE1qQTJOVFl4TWxvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU0vcU5OVnFxOW10THBQQlhsd3gxZllWM3lDdk9KYUs4MkwwNENnMnduVG9RNDk0djhvTDlFM3RrZHJSVjIyeAp5U3BOcGdoNlRWTldEVnNzZmdVWHFuUHhib0lWRTdmNmVBalZDTlp3S0RWMWxjalZGYjIybVI3WGxhMHllTTA4CmdhdTZzSUNsUkdzVXQzT1JQUDJzdEorWjZ5bWs5V3d0V0FyOTdZWUVzUFJaRFBhMFNpRGdUeHVRNHlnYXVpWXIKRng1bUM3aVg0NVRIVTRPRWlKOCtTcUdvcWwxa3BUZTdMTW9haWpxZzVwS2phNGhuMVpQbGQ4QjZUZHNLaTFvNQpmUFRuMGhwc1VONGhLMDBCZ0VIa1Mwdm5ZU3B2dGI0eXd6VlgyL0pSNm85RDh1MjFYQmR1TGc2WGRyOTBxYmZICi9Ebmo5UkYzM2FCcmJuS2pQVytxa2VrQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSDQxV2tINGYzU0NteEtqU3J5eUJPTkFyNUVRY2E3TG1uNll6aytid3hKRk1ZSlcxZUw4alNJMU8rS2MKblRYZ0dpSUozMlB5bm8vdVNoNTNIOWtjZUgxMG5FRWdITDFRQkMwN3BJS1RYdGF1NmdLMXFraU1GTTBqZW8raQpQVC9iZkxycFpkRDJpd3JueWlpVEhWS3VCeDR4QWVZWGRFbUJLb1A1UjAzSGlEZFoybVBveElRQVMxd3MzKzY5Cm4wTE5hc1V0ZGx5eFlWeFhyOVovNzZGZENrM2JSZzVmVnRFMnJnNnJhTW0yS3hweTRLMU1VOVFTTU9Pa2gzL2YKNWNINzA1dHRIZ3pOL3BKNW81N0xtbVoyeDhPR1BQM1ZmOHZCd1FTa2s4RmZxSXQzMEJhK3hDdmdCV3kxLzlEcApFUlZkZ3FoYlNUejJoTEFSTXFWd2xzTXVSVU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeitvMDFXcXIyYTB1azhGZVhESFY5aFhmSUs4NGxvcnpZdlRnS0RiQ2RPaERqM2kvCnlndjBUZTJSMnRGWGJiSEpLazJtQ0hwTlUxWU5XeXgrQlJlcWMvRnVnaFVUdC9wNENOVUkxbkFvTlhXVnlOVVYKdmJhWkh0ZVZyVEo0elR5QnE3cXdnS1ZFYXhTM2M1RTgvYXkwbjVuckthVDFiQzFZQ3YzdGhnU3c5RmtNOXJSSwpJT0JQRzVEaktCcTZKaXNYSG1ZTHVKZmpsTWRUZzRTSW56NUtvYWlxWFdTbE43c3N5aHFLT3FEbWtxTnJpR2ZWCmsrVjN3SHBOMndxTFdqbDg5T2ZTR214UTNpRXJUUUdBUWVSTFMrZGhLbSsxdmpMRE5WZmI4bEhxajBQeTdiVmMKRjI0dURwZDJ2M1NwdDhmOE9lUDFFWGZkb0d0dWNxTTliNnFSNlFJREFRQUJBb0lCQUFaejdHUGJSYTRoMDlvKwpIQ0djWWxtYTRDdnhoRDRYM2VucVU3S3IwR2swZERSVnVRNGFST0RPU01LVDBMVFUyYnQ0WVhqTjR1eDlOVGpwCkxwZ1YzZkp2UWRERHVyTHhFUnlsRC9zbnkvZXN5Sk5OR2Jtam15ajc0K2RXTTYyYS9TTkpUZ1VRSEFsK3dSclQKSFNONllyaTVYRFVVcTVGSjd2dVlXZkRZNEcwVThDSDFUdFRHblFJM05rUVJjcEtYSnZaOWtxSkRLTCtVeDRKZQo1WVdTdFlza0VkalVQMlNzK0RiRzhoMGFxSEV1ZUxPT2xxTWpyd2hSNVFQdkJFeVV0OFpZbTNNWFR1bTI2OEt5CkU5NkdJWEgva1JyR1BjMTFaaVRzWk9rQXZyVlBSSmRDanRBMTNIdHVPcU9lSzF4cStJK05ESEVYaDUyeVQwZ1kKWnA0UHpra0NnWUVBNWpHZmtuV2hUTy9JVGNqNnpFRHc1eFQwN0ZucUg3Mks4TTJLSjdoeGhnd0ZkTVJ4UURUVwpOLzBRSGdMRzQzcXoxZk02RGZBbEZjc1lka1lZZGNqQUpUWUVnSzVRSDIxemhNdkp4ZzRFclQ3RjFmVHlXM0FQCmRENmZhdk5SUnRvRTQrQWQzVGRieUR0QStBV0JoRDhsQWh4M29RQjRxM0ROaWVFcTZUYUpvS01DZ1lFQTV6a3gKMFZWNnNZUWNHQnJ4eUtMT3dsVGtCSFRiTXdJV2ZZQVBDSDBNVUE2REhkS1ZPUmgvSml1S3NDMHVwYm10WllBZgpxTFpXbzJmTVoxWUM2NVRldmM5MEZVeU10amhRVS8wVnJJaTBFdFZmbEhyTGtMYjBTV0trRXEwOGxkdENWL3hVCmgxWkxzL0sycE1GbVQ2KzR3T2ljYUhBbW9JbDlqS3F1bkdpbWtBTUNnWUI4cCs3RC8xTmtPSTErSWhJK3ZnUTIKLzFCTEZiNEZoajFSZmQwTStZTHdsbDMyQjlOVWM4aDE5V0xlL1ozNjNoMjVCTWd4ZUJSOUlzaVNkQThXNmFtegovUGFmUU1ZKzNxU3FDem12T1RRckpVMDVPalpzY2RqTW1JVDRBOS9Gd0piWldDcVQrMENHeEIvQXNDcWRGUnpUCmNkc09veFMxc3BaN3ppWFF1U242aFFLQmdEcFMxL2tZbWFrN1RLYmI3UThSMmh0MHRFdFhlbzhrUUs0SlprRmEKNFljMEVlaXMzSTBaVzhFeURIcWgrdms4bTd0VmxTYkdUNVpLTVdvRGJSc2xZd1gzMVMwbU1Qd3B1a0ZsUGxsVgo1aTQxK2pVR3dHQlJkYzhvL1gva2lMcTRJc1QwMWhHSk4vRTlFTXNBS2FHQ0RwVkNWMm1VbUhtNEZKNHQwM3VLCmZqRW5Bb0dCQUxhMkdTNWExTUQ3WHdzY1pkQ05pU0JuYi9IVFc4VzZ0M1Q4eHIyQXArZkV2bEQvNVNHaC9NK1cKVEdFS25keTJlZXVQREs1ZTg1N3RxUnovcGsxeDFYR3lRMVRIbFVqK2V4aER5VWxDcE1xQkhTTFA2TjlzZDRkZApyRi9uVXR4ckJTY0pVc2Q0M2UwOTlGN0FJWVZJSGUwbVZudkQxUGs3bU80TWpyUnZucm5LCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/extension":"viz"},"name":"tap-injector-k8s-tls","namespace":"linkerd-viz"},"type":"kubernetes.io/tls"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
          },
          "name": "tap-injector-k8s-tls",
          "namespace": "linkerd-viz",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "secret-seaweedfs-db",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/sealed-secrets/sealed-secret-secret-seaweedfs-db-seaweedfs.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
    "spec": {
      "encryptedData": {
        "password": "lowo-testsecret-seaweedfs-dbseaweedfs************************",
        "user": "lowo-testsecret-seaweedfs-dbseaweedfs****************",
      },
      "template": {
        "metadata": {
          "annotations": {
            "helm.sh/hook": "pre-install",
            "helm.sh/resource-policy": "keep",
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Secret","metadata":{"annotations":{"helm.sh/hook":"pre-install","helm.sh/resource-policy":"keep"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"secret-seaweedfs-db","namespace":"seaweedfs"},"stringData":{"password":"HardCodedPassword","user":"YourSWUser"},"type":"Opaque"}
",
          },
          "name": "secret-seaweedfs-db",
          "namespace": "seaweedfs",
        },
        "type": "Opaque",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "seaweedfs-s3-secret",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/sealed-secrets/sealed-secret-seaweedfs-s3-secret-seaweedfs.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
    "spec": {
      "encryptedData": {
        "admin_access_key_id": "lowo-testseaweedfs-s3-secretseaweedfs************************",
        "admin_secret_access_key": "lowo-testseaweedfs-s3-secretseaweedfs********************************************",
        "read_access_key_id": "lowo-testseaweedfs-s3-secretseaweedfs************************",
        "read_secret_access_key": "lowo-testseaweedfs-s3-secretseaweedfs********************************************",
        "seaweedfs_s3_config": "lowo-testseaweedfs-s3-secretseaweedfs************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************",
      },
      "template": {
        "metadata": {
          "annotations": {
            "helm.sh/hook": "pre-install",
            "helm.sh/resource-policy": "keep",
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Secret","metadata":{"annotations":{"helm.sh/hook":"pre-install","helm.sh/resource-policy":"keep"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"seaweedfs-s3-secret","namespace":"seaweedfs"},"stringData":{"admin_access_key_id":"AYT5kHfYO0CpN8k6","admin_secret_access_key":"Tl5ZB3BpqqYGTYPwBvNLCA1mgXnnJfIB","read_access_key_id":"7btZfLdYZYGIvgkr","read_secret_access_key":"nXnHCW7cKisWL17vYcgc84tcxfAIBplg","seaweedfs_s3_config":"{\\"identities\\":[{\\"name\\":\\"anvAdmin\\",\\"credentials\\":[{\\"accessKey\\":\\"AYT5kHfYO0CpN8k6\\",\\"secretKey\\":\\"Tl5ZB3BpqqYGTYPwBvNLCA1mgXnnJfIB\\"}],\\"actions\\":[\\"Admin\\",\\"Read\\",\\"Write\\"]},{\\"name\\":\\"anvReadOnly\\",\\"credentials\\":[{\\"accessKey\\":\\"7btZfLdYZYGIvgkr\\",\\"secretKey\\":\\"nXnHCW7cKisWL17vYcgc84tcxfAIBplg\\"}],\\"actions\\":[\\"Read\\"]}]}"},"type":"Opaque"}
",
          },
          "name": "seaweedfs-s3-secret",
          "namespace": "seaweedfs",
        },
        "type": "Opaque",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/surrealdb/sealed-secrets/sealed-secret-surrealdb-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/surrealdb",
    "spec": {
      "encryptedData": {
        "APP_ENVIRONMENT": "lowo-testsurrealdbapplications********",
        "APP_EXTERNAL_BASE_URL": "lowo-testsurrealdbapplications****************************",
        "APP_HOST": "lowo-testsurrealdbapplications************",
        "APP_PORT": "lowo-testsurrealdbapplications********",
        "TIKV_HOST": "lowo-testsurrealdbapplications****************************",
        "TIKV_NAME": "lowo-testsurrealdbapplications********",
        "TIKV_PORT": "lowo-testsurrealdbapplications********",
        "TIKV_SERVICE_NAME": "lowo-testsurrealdbapplications********",
        "TIKV_STORAGE_CLASS": "lowo-testsurrealdbapplications************************************",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"APP_ENVIRONMENT":"bG9jYWw=","APP_EXTERNAL_BASE_URL":"aHR0cDovL2xvY2FsaG9zdDo4MDgw","APP_HOST":"MC4wLjAuMA==","APP_PORT":"ODAwMA==","TIKV_HOST":"dGlrdi1wZC5hcHBsaWNhdGlvbnM=","TIKV_NAME":"dGlrdg==","TIKV_PORT":"MjM3OQ==","TIKV_SERVICE_NAME":"dGlrdg==","TIKV_STORAGE_CLASS":"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu"},"kind":"Secret","metadata":{"annotations":{"sealedsecrets.bitnami.com/managed":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"surrealdb","namespace":"applications"}}
",
            "sealedsecrets.bitnami.com/managed": "true",
          },
          "name": "surrealdb",
          "namespace": "applications",
        },
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "meilisearch-master-key",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/sealed-secrets/sealed-secret-meilisearch-master-key-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {
      "encryptedData": {
        "MEILI_MASTER_KEY": "lowo-testmeilisearch-master-keyapplications****************************",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"MEILI_MASTER_KEY":"UG5vbU1DU3RkaGxuN1lIWDRidFM="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/component":"search-engine","app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"meilisearch","app.kubernetes.io/part-of":"meilisearch","app.kubernetes.io/version":"v0.29.0","helm.sh/chart":"meilisearch-0.1.41"},"name":"meilisearch-master-key","namespace":"applications"}}
",
          },
          "name": "meilisearch-master-key",
          "namespace": "applications",
        },
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/sealed-secrets/sealed-secret-graphql-surrealdb-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {
      "encryptedData": {
        "APP_ENVIRONMENT": "lowo-testgraphql-surrealdbapplications********",
        "APP_EXTERNAL_BASE_URL": "lowo-testgraphql-surrealdbapplications****************************",
        "APP_HOST": "lowo-testgraphql-surrealdbapplications************",
        "APP_PORT": "lowo-testgraphql-surrealdbapplications********",
        "OAUTH_GITHUB_CLIENT_ID": "lowo-testgraphql-surrealdbapplications********",
        "OAUTH_GITHUB_CLIENT_SECRET": "lowo-testgraphql-surrealdbapplications********",
        "OAUTH_GOOGLE_CLIENT_ID": "lowo-testgraphql-surrealdbapplications********",
        "OAUTH_GOOGLE_CLIENT_SECRET": "lowo-testgraphql-surrealdbapplications********",
        "REDIS_HOST": "lowo-testgraphql-surrealdbapplications************************************",
        "REDIS_PASSWORD": "lowo-testgraphql-surrealdbapplications********",
        "REDIS_PORT": "lowo-testgraphql-surrealdbapplications********",
        "REDIS_SERVICE_NAME": "lowo-testgraphql-surrealdbapplications********",
        "REDIS_SERVICE_NAME_MASTER": "lowo-testgraphql-surrealdbapplications****************",
        "REDIS_USERNAME": "lowo-testgraphql-surrealdbapplications********",
        "SURREALDB_HOST": "lowo-testgraphql-surrealdbapplications********************************",
        "SURREALDB_NAME": "lowo-testgraphql-surrealdbapplications************",
        "SURREALDB_PORT": "lowo-testgraphql-surrealdbapplications********",
        "SURREALDB_ROOT_PASSWORD": "lowo-testgraphql-surrealdbapplications********",
        "SURREALDB_ROOT_USERNAME": "lowo-testgraphql-surrealdbapplications********",
        "SURREALDB_SERVICE_NAME": "lowo-testgraphql-surrealdbapplications************",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"APP_ENVIRONMENT":"bG9jYWw=","APP_EXTERNAL_BASE_URL":"aHR0cDovL2xvY2FsaG9zdDo4MDgw","APP_HOST":"MC4wLjAuMA==","APP_PORT":"ODAwMA==","OAUTH_GITHUB_CLIENT_ID":"dGVzdA==","OAUTH_GITHUB_CLIENT_SECRET":"dGVzdA==","OAUTH_GOOGLE_CLIENT_ID":"dGVzdA==","OAUTH_GOOGLE_CLIENT_SECRET":"dGVzdA==","REDIS_HOST":"cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==","REDIS_PASSWORD":"dGVzdA==","REDIS_PORT":"NjM3OQ==","REDIS_SERVICE_NAME":"cmVkaXM=","REDIS_SERVICE_NAME_MASTER":"cmVkaXMtbWFzdGVy","REDIS_USERNAME":"dGVzdA==","SURREALDB_HOST":"c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==","SURREALDB_NAME":"c3VycmVhbGRi","SURREALDB_PORT":"ODAwMA==","SURREALDB_ROOT_PASSWORD":"dGVzdA==","SURREALDB_ROOT_USERNAME":"dGVzdA==","SURREALDB_SERVICE_NAME":"c3VycmVhbGRi"},"kind":"Secret","metadata":{"annotations":{"sealedsecrets.bitnami.com/managed":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"graphql-surrealdb","namespace":"applications"}}
",
            "sealedsecrets.bitnami.com/managed": "true",
          },
          "name": "graphql-surrealdb",
          "namespace": "applications",
        },
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "redis",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/sealed-secrets/sealed-secret-redis-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {
      "encryptedData": {
        "redis-password": "lowo-testredisapplications********",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"redis-password":"dGVzdA=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis","namespace":"applications"},"type":"Opaque"}
",
          },
          "name": "redis",
          "namespace": "applications",
        },
        "type": "Opaque",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web/sealed-secrets/sealed-secret-react-web-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web",
    "spec": {
      "encryptedData": {
        "APP_ENVIRONMENT": "lowo-testreact-webapplications********",
        "APP_EXTERNAL_BASE_URL": "lowo-testreact-webapplications****************************",
        "APP_HOST": "lowo-testreact-webapplications************",
        "APP_PORT": "lowo-testreact-webapplications********",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"APP_ENVIRONMENT":"bG9jYWw=","APP_EXTERNAL_BASE_URL":"aHR0cDovL2xvY2FsaG9zdDo4MDgw","APP_HOST":"MC4wLjAuMA==","APP_PORT":"MzAwMA=="},"kind":"Secret","metadata":{"annotations":{"sealedsecrets.bitnami.com/managed":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"react-web","namespace":"applications"}}
",
            "sealedsecrets.bitnami.com/managed": "true",
          },
          "name": "react-web",
          "namespace": "applications",
        },
      },
    },
  },
]
`;

exports[`KubeObject Can update sealed secrets after initial 1`] = `
[
  {
    "apiVersion": "v1",
    "data": {
      "ADMIN_PASSWORD": "ZXhhbXBsZQ==",
      "password": "ZXhhbXBsZQ==",
      "type": "Z2l0",
      "url": "aHR0cHM6Ly9naXRodWIuY29tL095ZWxvd28vbW9kZXJuLWRpc3RyaWJ1dGVkLWFwcC10ZW1wbGF0ZQ==",
      "username": "ZXhhbXBsZQ==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"ADMIN_PASSWORD":"ZXhhbXBsZQ==","password":"ZXhhbXBsZQ==","type":"Z2l0","url":"aHR0cHM6Ly9naXRodWIuY29tL095ZWxvd28vbW9kZXJuLWRpc3RyaWJ1dGVkLWFwcC10ZW1wbGF0ZQ==","username":"ZXhhbXBsZQ=="},"kind":"Secret","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","argocd.argoproj.io/secret-type":"repository"},"name":"argocd-applications-secret","namespace":"argocd"}}
",
      },
      "name": "argocd-applications-secret",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-parents/1-manifest/v1-secret-argocd-argocd-applications-secret.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-parents",
  },
  {
    "apiVersion": "v1",
    "data": {
      "admin.password": "JDJhJDEwJFJ3TGtBcENPNkdKSDFRVXJUTGNlVGVFODkwWjlDeU5jS2p4RkNQSmxWOEVwNDBBejgwNG91",
      "admin.passwordMtime": "MjAyMi0xMC0xMlQwNjo1NjoxMlo=",
      "clearPassword": "ZXhhbXBsZQ==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"admin.password":"JDJhJDEwJFJ3TGtBcENPNkdKSDFRVXJUTGNlVGVFODkwWjlDeU5jS2p4RkNQSmxWOEVwNDBBejgwNG91","admin.passwordMtime":"MjAyMi0xMC0xMlQwNjo1NjoxMlo=","clearPassword":"ZXhhbXBsZQ=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","app.kubernetes.io/part-of":"argocd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-secret","namespace":"argocd"},"type":"Opaque"}
",
      },
      "name": "argocd-secret",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-secret-argocd-argocd-secret.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "type": "Opaque",
  },
  {
    "apiVersion": "v1",
    "data": {
      "redis-password": "aERVUjNMdlc4ZQ==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"redis-password":"aERVUjNMdlc4ZQ=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis","namespace":"argocd"},"type":"Opaque"}
",
      },
      "name": "argocd-redis",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/1-manifest/v1-secret-argocd-argocd-redis.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "type": "Opaque",
  },
  {
    "apiVersion": "v1",
    "data": {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUxqcXlHVE9oMHZXMHNqNWZ4bCtEckF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl4TURFeU1EWTFOakV5V2hjTk1qTXhNREV5TURZMU5qRXlXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQU5nYnQzeUwzVWlneUFzb0xFVTlINjNZWFZKOEJ3UnNpYlk3SjlBVVpoaXI0WlMwanlHTwpFWDJjb1h5anZ0RzVZWUZEUkVKOEdKWm9mUitOV0hNc2ROSUVuU0dReGdnSUNQSjlBY1pqSGdWU0xxbTJUNzFjCkFVU0tUVWpQV3dNb3loK1c1UGVURS9YMGVtM1ozOFhtbTUxdEc1dmkyZndONGQ4V0gxc1lSV0w3cU9NRktLZUEKVElyV2k4b05GOVlwUjIrS0pwQndlditnU1NBem9BWmltSTY2b0ZpQTJkV0lta1gwNkpndEp3ZHpqa01oWXhYOQpIeU5MOEUwWHF2NDl5dWZUZUppOUxYSkdScC9idHpPTTFPRThxYWZJSFNFcHVJdEh1cDlpUms5aHFjSk5LWkZxCm1VajJzclBnd0hYODBjdnhhblRRa3lWQW4vam9DTDlYT2pjQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFDcnN5QTVISU9lSWFjakdJM1N1MHFGVjNLM0JWQ21YMC83VEpadFExdm0KVmZieXYvbEJrcmlzUmZWd0xkTjduRThidGllQkZvcWhrWGFielQrR3hjZlJNTEs5Wmt0K1pJb294MVZBK0tFZgpreGdRenpJSWpTSE85SVIvSzRGdDVKOS9KNzhDZnBQTlE2U2pDYkFVNVRkblVER1BJR3BZc2N6Z3AyQVZKcGtrCi9KY3orZE8yMUV6NnY0emxkSVk4ejFKMWoyZ1RBam5qZHp6cHdQaVkyNXRsL2hPSVVnT21NdE00clc3SGNQVWQKRFBhNUt4d0xqQ0NocGk3MlRLcEZiYWVFUnltQ1MvRkg4VGZFejBNQ04vcUZqWFp3dEoyUHVOSlpud1FvZ1hZaAorakgrcWVnek1iODMyVjRQSmkyZjRIakp6eWVCNFdwek5QeVdrN0xOOFN1QQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMkJ1M2ZJdmRTS0RJQ3lnc1JUMGZyZGhkVW53SEJHeUp0anNuMEJSbUdLdmhsTFNQCklZNFJmWnloZktPKzBibGhnVU5FUW53WWxtaDlINDFZY3l4MDBnU2RJWkRHQ0FnSThuMEJ4bU1lQlZJdXFiWlAKdlZ3QlJJcE5TTTliQXlqS0g1Yms5NU1UOWZSNmJkbmZ4ZWFiblcwYm0rTFovQTNoM3hZZld4aEZZdnVvNHdVbwpwNEJNaXRhTHlnMFgxaWxIYjRvbWtIQjYvNkJKSURPZ0JtS1lqcnFnV0lEWjFZaWFSZlRvbUMwbkIzT09ReUZqCkZmMGZJMHZ3VFJlcS9qM0s1OU40bUwwdGNrWkduOXUzTTR6VTRUeXBwOGdkSVNtNGkwZTZuMkpHVDJHcHdrMHAKa1dxWlNQYXlzK0RBZGZ6UnkvRnFkTkNUSlVDZitPZ0l2MWM2TndJREFRQUJBb0lCQUIybXIrWkd5blhNbWFYdQpQU1RDM2pYY0dmSFhVcDhveFR4Ym9YckxVYmJRM29Lb3czcTNJMjg0cm0rTGlBTCtqSUpQMkczRzJSakovV0QyCjQ4dnByWjJqUkd2MmtUVkk1UEZnZFgzaTI1dWZTd2UrRy9LL1RPMDZqS0FRMDB2N3JML28xRUdqekhsU3NmbWcKaXpOOEVKM28rb0RJLzErMkIrZTBBVmxlV3liWllDWGx5bFcwb0VqUnE1SUcrZndWaitnbmxiUEJXSjl5N3ZCWApxY1dneFM5WGpRN3MvTTB4NGtWTk1rNWV2ZGlVZWRtdlEvT2d1dXlwUENYMFdLd3hXOHkwaGVYUTQ4Z3htaU1sCnBRMGhVeUhrNmwyV2NYTHhaUXBPTUdHSEpab1dadmFtM2d1SmdkdnZyNE9OMkhmTUFkcmxoZWNaNEswbHM3ZEwKYUJDRjJRRUNnWUVBNkRGV1hrL1VpVjc4NDQwaVZnZWlnN0dkN0FIOVk2TkVrZVQ5bmxNMFdIemI0SnZ4NTRQcwpWcVpsSXV6SThVek42eFFJUjROZUh4NXF2VDhEdEhqbkZWczZEandtQlI0WVhFYXBRd0MyeEZ2QitrN1lXOFEvCi9weitvRmF1RlVCMEtEU0VGRlgxN3FUYml1ZjhEZENhaWE1dzdBN0RCbFVIWjBLajlHUWhLaHNDZ1lFQTdrUXcKbXhqVzNhbjQ5bnRBRFZYVDNHZWQ4T1ZBb2RDa01FNG5tUUlqNjh2UVJtS0pKWUNRNURkRGZBQ0xDVlhwY0t5UAptL0lsYXlPOGdlSGcrL2pCRW9lVVZLaDM2TURrOTJ4VndERFZKV0lzNWZBbEUvL29JZWt1MVlKWEVEbmNLcUpZCmI4KzlLdkVMVjRpTldoMkRRblBYQk44NStCMTZ5cEFIRHdHSXNoVUNnWUVBbjB3Sjl4Wkp1QjBrM25DYlYrNVEKL296Q3pZSG45NDJ4bzI0NDJZQTM3MlZwN0VUUXg0Ym9nK0lRak05cVpMSE9yRExJSTFmcklPcGJUSTZJMmk0QQpTOVNVbGVPS0tnU2xyZGtFa3VWUWZwSjlHRjh6YkhITmZiN3pxY2tPRWFKd2pvekkrTEtvMFJybFMvMHdIY0k1CjQ2OTc1VmVUVVNyUXMzVXl5cDVQYW5VQ2dZQUErVzVwYy9TTSs0RDFJUlBsK2cvZnV0eStlM0dFTitJMEFGM1IKRmwwblBiSWdWNDdRQkhLVFBGYWVUekpDVzRPVTNsL0g5M21Ic3FHMnRrSEJSZ2NrR0VIWEJzbFd2bE14WDlRSgo4U2t0K2ZUTkMrcGE1cFVBYm4rdWg5WHJUeEZEYTE2Sk5vUkRoTERUTHMvRktwRzYxOVp0UXF4dUExRFpPeldNCkxpbHM4UUtCZ1FDMHBMZ2l0eUc1NjdleHZkbFc3RithcWNldGU2RzFsREdjZEE5Q29PVDNYdTBUa1MrUzJpcWwKaWJxRFdaV0c5Q3BFN2VFK2l3cEdWMEx2MzVOS0JwUCtGUGF6Z1lhbFNLblBmdzRNaWUzZ0R4T0RXM2xCcTNxcQo5bEliMmNZU3E0ZDIvVUVPV3U1MXIxdG52QXZKUUwvN3ZJKysxdllyTnhwZ0lWU2dMMUtRR1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUxqcXlHVE9oMHZXMHNqNWZ4bCtEckF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl4TURFeU1EWTFOakV5V2hjTk1qTXhNREV5TURZMU5qRXlXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQU5nYnQzeUwzVWlneUFzb0xFVTlINjNZWFZKOEJ3UnNpYlk3SjlBVVpoaXI0WlMwanlHTwpFWDJjb1h5anZ0RzVZWUZEUkVKOEdKWm9mUitOV0hNc2ROSUVuU0dReGdnSUNQSjlBY1pqSGdWU0xxbTJUNzFjCkFVU0tUVWpQV3dNb3loK1c1UGVURS9YMGVtM1ozOFhtbTUxdEc1dmkyZndONGQ4V0gxc1lSV0w3cU9NRktLZUEKVElyV2k4b05GOVlwUjIrS0pwQndlditnU1NBem9BWmltSTY2b0ZpQTJkV0lta1gwNkpndEp3ZHpqa01oWXhYOQpIeU5MOEUwWHF2NDl5dWZUZUppOUxYSkdScC9idHpPTTFPRThxYWZJSFNFcHVJdEh1cDlpUms5aHFjSk5LWkZxCm1VajJzclBnd0hYODBjdnhhblRRa3lWQW4vam9DTDlYT2pjQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFDcnN5QTVISU9lSWFjakdJM1N1MHFGVjNLM0JWQ21YMC83VEpadFExdm0KVmZieXYvbEJrcmlzUmZWd0xkTjduRThidGllQkZvcWhrWGFielQrR3hjZlJNTEs5Wmt0K1pJb294MVZBK0tFZgpreGdRenpJSWpTSE85SVIvSzRGdDVKOS9KNzhDZnBQTlE2U2pDYkFVNVRkblVER1BJR3BZc2N6Z3AyQVZKcGtrCi9KY3orZE8yMUV6NnY0emxkSVk4ejFKMWoyZ1RBam5qZHp6cHdQaVkyNXRsL2hPSVVnT21NdE00clc3SGNQVWQKRFBhNUt4d0xqQ0NocGk3MlRLcEZiYWVFUnltQ1MvRkg4VGZFejBNQ04vcUZqWFp3dEoyUHVOSlpud1FvZ1hZaAorakgrcWVnek1iODMyVjRQSmkyZjRIakp6eWVCNFdwek5QeVdrN0xOOFN1QQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMkJ1M2ZJdmRTS0RJQ3lnc1JUMGZyZGhkVW53SEJHeUp0anNuMEJSbUdLdmhsTFNQCklZNFJmWnloZktPKzBibGhnVU5FUW53WWxtaDlINDFZY3l4MDBnU2RJWkRHQ0FnSThuMEJ4bU1lQlZJdXFiWlAKdlZ3QlJJcE5TTTliQXlqS0g1Yms5NU1UOWZSNmJkbmZ4ZWFiblcwYm0rTFovQTNoM3hZZld4aEZZdnVvNHdVbwpwNEJNaXRhTHlnMFgxaWxIYjRvbWtIQjYvNkJKSURPZ0JtS1lqcnFnV0lEWjFZaWFSZlRvbUMwbkIzT09ReUZqCkZmMGZJMHZ3VFJlcS9qM0s1OU40bUwwdGNrWkduOXUzTTR6VTRUeXBwOGdkSVNtNGkwZTZuMkpHVDJHcHdrMHAKa1dxWlNQYXlzK0RBZGZ6UnkvRnFkTkNUSlVDZitPZ0l2MWM2TndJREFRQUJBb0lCQUIybXIrWkd5blhNbWFYdQpQU1RDM2pYY0dmSFhVcDhveFR4Ym9YckxVYmJRM29Lb3czcTNJMjg0cm0rTGlBTCtqSUpQMkczRzJSakovV0QyCjQ4dnByWjJqUkd2MmtUVkk1UEZnZFgzaTI1dWZTd2UrRy9LL1RPMDZqS0FRMDB2N3JML28xRUdqekhsU3NmbWcKaXpOOEVKM28rb0RJLzErMkIrZTBBVmxlV3liWllDWGx5bFcwb0VqUnE1SUcrZndWaitnbmxiUEJXSjl5N3ZCWApxY1dneFM5WGpRN3MvTTB4NGtWTk1rNWV2ZGlVZWRtdlEvT2d1dXlwUENYMFdLd3hXOHkwaGVYUTQ4Z3htaU1sCnBRMGhVeUhrNmwyV2NYTHhaUXBPTUdHSEpab1dadmFtM2d1SmdkdnZyNE9OMkhmTUFkcmxoZWNaNEswbHM3ZEwKYUJDRjJRRUNnWUVBNkRGV1hrL1VpVjc4NDQwaVZnZWlnN0dkN0FIOVk2TkVrZVQ5bmxNMFdIemI0SnZ4NTRQcwpWcVpsSXV6SThVek42eFFJUjROZUh4NXF2VDhEdEhqbkZWczZEandtQlI0WVhFYXBRd0MyeEZ2QitrN1lXOFEvCi9weitvRmF1RlVCMEtEU0VGRlgxN3FUYml1ZjhEZENhaWE1dzdBN0RCbFVIWjBLajlHUWhLaHNDZ1lFQTdrUXcKbXhqVzNhbjQ5bnRBRFZYVDNHZWQ4T1ZBb2RDa01FNG5tUUlqNjh2UVJtS0pKWUNRNURkRGZBQ0xDVlhwY0t5UAptL0lsYXlPOGdlSGcrL2pCRW9lVVZLaDM2TURrOTJ4VndERFZKV0lzNWZBbEUvL29JZWt1MVlKWEVEbmNLcUpZCmI4KzlLdkVMVjRpTldoMkRRblBYQk44NStCMTZ5cEFIRHdHSXNoVUNnWUVBbjB3Sjl4Wkp1QjBrM25DYlYrNVEKL296Q3pZSG45NDJ4bzI0NDJZQTM3MlZwN0VUUXg0Ym9nK0lRak05cVpMSE9yRExJSTFmcklPcGJUSTZJMmk0QQpTOVNVbGVPS0tnU2xyZGtFa3VWUWZwSjlHRjh6YkhITmZiN3pxY2tPRWFKd2pvekkrTEtvMFJybFMvMHdIY0k1CjQ2OTc1VmVUVVNyUXMzVXl5cDVQYW5VQ2dZQUErVzVwYy9TTSs0RDFJUlBsK2cvZnV0eStlM0dFTitJMEFGM1IKRmwwblBiSWdWNDdRQkhLVFBGYWVUekpDVzRPVTNsL0g5M21Ic3FHMnRrSEJSZ2NrR0VIWEJzbFd2bE14WDlRSgo4U2t0K2ZUTkMrcGE1cFVBYm4rdWg5WHJUeEZEYTE2Sk5vUkRoTERUTHMvRktwRzYxOVp0UXF4dUExRFpPeldNCkxpbHM4UUtCZ1FDMHBMZ2l0eUc1NjdleHZkbFc3RithcWNldGU2RzFsREdjZEE5Q29PVDNYdTBUa1MrUzJpcWwKaWJxRFdaV0c5Q3BFN2VFK2l3cEdWMEx2MzVOS0JwUCtGUGF6Z1lhbFNLblBmdzRNaWUzZ0R4T0RXM2xCcTNxcQo5bEliMmNZU3E0ZDIvVUVPV3U1MXIxdG52QXZKUUwvN3ZJKysxdllyTnhwZ0lWU2dMMUtRR1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-sp-validator-k8s-tls","namespace":"linkerd"},"type":"kubernetes.io/tls"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-sp-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-sp-validator-k8s-tls.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "type": "kubernetes.io/tls",
  },
  {
    "apiVersion": "v1",
    "data": {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRYnhKWXU4Z0xHV1l2TW8xRFloRFZsakFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpJeE1ERXlNRFkxTmpFeVdoY05Nak14TURFeU1EWTFOakV5V2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM1MXRDUHpXZHVKVHBSWFBiZklpSlFqZlQ2Z1FRMVJ4di9uV1J0YThuagpFbkNGTFl1YWtURTJLZEFlUndEenBRTldBdVBiTGlvSVA5RytRRHVpakRndjlKRlJNMVhhSDQwbytqenNFZ2FICm8vbi9LeStKb0hWbGtEcndoWDNRazlIOEIyNU1BT1dBNXNVaTdncEsxR2JzSmZOMzd5LzBlbENCNjY2U01WSncKMXlmSlVWbGxKVFg5RDVPR3VlaDdOcjVRVkVFbm9hTG5tOHlHMjZwQ3p5VkFmMnh3WGFUUTlWY3Q5RERRUEpXeQoycjl5ejV1VXk5WWV6eW9UNU1aOFVXNEZNeWo2cWNlSEtTc3gvM1BDZjc4UXpwR0xNRjJZM3grV0ZJeWpVZ2FkCmR2YmFxLzNidG5DNDdCcWx2RThPc3hvTG4vbU5ldnNSNjlzZWpRNCttUk1YQWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFWjdSay9haUp6aGJLem5Gb3pudEhmK2xmaVcKbU9VSmorV0QxY2JqMlhqdHZBcksvUjNYL1lYTTVCMWdNRDFJQjMrL2dsb1BEa1NqM0MrVWlDazh4WGh6b2VpdwpiSHhNdEdWVXVpQVpHSTdpc2NxOFZJaFQ3QjFWTFB4eUtSYzYvUytnMTlkRURWdDJRMGFvS012d2RkRDE4V3pICkdhWDFJUmNZUVgwYW55RXZpRzBhaEZRc1JvRytkVmZESzVDRVdkUzhXT3lET1ErNFhWOWR5d1h4ckpISDdXQlEKV09SSzVKV2pyUWg1bEdXaUh1NHQvcEFsalJKZWJ5NDU0T3l2dENWcTVkSElIOVl1QmRFc0d5cmROL0Y0VTBGMgpIM0NMZ3dTZlh2NXBUazdaUHZtSXdySHd0WHkxbE1ucHh6WVF3UmI5cTQweTZOUlNvZENjbnVXaVNkUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdWRiUWo4MW5iaVU2VVZ6MjN5SWlVSTMwK29FRU5VY2IvNTFrYld2SjR4SndoUzJMCm1wRXhOaW5RSGtjQTg2VURWZ0xqMnk0cUNEL1J2a0E3b293NEwvU1JVVE5WMmgrTktQbzg3QklHaDZQNS95c3YKaWFCMVpaQTY4SVY5MEpQUi9BZHVUQURsZ09iRkl1NEtTdFJtN0NYemQrOHY5SHBRZ2V1dWtqRlNjTmNueVZGWgpaU1UxL1ErVGhybm9lemErVUZSQko2R2k1NXZNaHR1cVFzOGxRSDlzY0YyazBQVlhMZlF3MER5VnN0cS9jcytiCmxNdldIczhxRStUR2ZGRnVCVE1vK3FuSGh5a3JNZjl6d24rL0VNNlJpekJkbU44ZmxoU01vMUlHblhiMjJxdjkKMjdad3VPd2FwYnhQRHJNYUM1LzVqWHI3RWV2YkhvME9QcGtURndJREFRQUJBb0lCQURMQ3YxTVlLdkZHRCtqYgplTDg0QnFGME5QOGJzSGVSQmMvTFFQdzJYZjI5TXFqZDZPeitUYS9hdWZNYk4rSlZKMVVlRXZqeVloN0F0OXk4CmxNMXdlWVIzekIyZTVRdGdaT0ZWZ01DR3ArdnkyVDFlb1d4NVBMZlNMcGMyRDBpaXA4K3NnKzhVcTV1SzdUdisKUXlkdlh2R1A2REhSVG9yN3dmUEsyWE1yTDdhTVJ5Yy9KSi82RXBnYytzaUNxakpRSkRMR09xM01MWmMybXdIVwpiZzF2NHo3VlBTWjBNRk1ka1BiNEYxV0d2TEJBQXVZVWtEa21mTTRPcVNDUm00TlVrSURNVHJRVllqcmRySmp6CjExSk1jMzhkTUdaNFF5UDc5VVNqajFBM3VSRFYvTGVYQjFvcld2SGYrc1hkUmVSdTd5cmRwemhwT25xOWVxWmMKMmQ4bWlXRUNnWUVBNEx4N1pMWVRqRzFVaWdiTjBWRkpva2M0RWVQaE5aT1dJdDNQUmRJM1dXUzJaZGtBbCsxZQovK1IxTHhqNmtQeWl6UVNwWi93Sm1ZVmR1VmEvTExFWjE3elJBa2xUUmtXbk5qdDJBRVNDT1lJdllFMDcwcmRyCkcxdnZMcmUySEJTNTlFczlrY2VwNE9PZmlTd3c2MnFFRUwwL1pxVTBWVUxzK3FXdWNsYkNqMmNDZ1lFQTA3RVgKWmdDV25BUVBYdkMvN3Y0d2RaYkJFVGZYVVRVRDErY3Q4WnNObU9GQmJORjkzOEJIcTdLUVdXMjR4UkswNUVHOQpCMCtkSjdvRGpNQkJBNjJyb0hJTGFMNHR5U3ZpMXJVczlxUzhFY3c0WUVEOTZrYyswL1FBcStmOWkwK1hYTGdUCisvaU5lNDBmcDN4dXY0QUU4TFlsbjlsRWx3V2NleklTdENqdUFORUNnWUVBZ0gyREZ6dTZ4WWtrMHAyOVF6WDAKb2FHU2Z6Z0k1VGJ5bWhDemx6bnZoMTY3b2xPRnNWZDMvMXBCWGFJc2NJVGhGOUxZZ0tsclc2a1N3d3JEMXV1UwoyUFFOay84VWE1TWJYVGgxNlFWQ1oxcjFkMXZ4SGpMY1BCSStHRG5WRncwS25KQUFMYjg0YzJueEp0NXJRYzN1Cm9CdHppbDVlSTNsV1FLQkZzdjNEMDNVQ2dZQmtBNUFOZGd1eURFMEN5dld6UVU2OXo0ckp5cnNrdDhwb0QrWHAKOXhxV2R4NEUvbmpjNUtnMzIzWk5lZ1JJdjR6TkpxM2JMV2NQWk5mV2dPSjJqVysvcndIcTY2Y1FHM2JoZjltTgpjY2tWRTRvekY2R2ZOU2ZlMWJJWGhkU0pKQUpjSU8vNEpMY2JmMUpNUEFMSzRQMzBoK29BdXBLb1UxTlo5UTlYCkpOdEZjUUtCZ0RCVjJKa1BNajdhSWMvL05pdGhmVEcrVDk4YktBUDhmQnRZZ1FEVmxuMVlmNS9XRmZ3SGVXRVcKUXROdXc5QmdtanhIUDRReFRxR0krVVNqTjJ1TzVyK0hNdUgrNlRydThSbVRRMkJad1ZEcnhDQXo5Uks1OTFuUgo0dWZpeFlQZGs5Ly9PU0lhdUgzYlp2RGhHbzcySFNCWjNVRm9KakxTamVJcUx4N25CdGFiCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRYnhKWXU4Z0xHV1l2TW8xRFloRFZsakFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpJeE1ERXlNRFkxTmpFeVdoY05Nak14TURFeU1EWTFOakV5V2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM1MXRDUHpXZHVKVHBSWFBiZklpSlFqZlQ2Z1FRMVJ4di9uV1J0YThuagpFbkNGTFl1YWtURTJLZEFlUndEenBRTldBdVBiTGlvSVA5RytRRHVpakRndjlKRlJNMVhhSDQwbytqenNFZ2FICm8vbi9LeStKb0hWbGtEcndoWDNRazlIOEIyNU1BT1dBNXNVaTdncEsxR2JzSmZOMzd5LzBlbENCNjY2U01WSncKMXlmSlVWbGxKVFg5RDVPR3VlaDdOcjVRVkVFbm9hTG5tOHlHMjZwQ3p5VkFmMnh3WGFUUTlWY3Q5RERRUEpXeQoycjl5ejV1VXk5WWV6eW9UNU1aOFVXNEZNeWo2cWNlSEtTc3gvM1BDZjc4UXpwR0xNRjJZM3grV0ZJeWpVZ2FkCmR2YmFxLzNidG5DNDdCcWx2RThPc3hvTG4vbU5ldnNSNjlzZWpRNCttUk1YQWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFWjdSay9haUp6aGJLem5Gb3pudEhmK2xmaVcKbU9VSmorV0QxY2JqMlhqdHZBcksvUjNYL1lYTTVCMWdNRDFJQjMrL2dsb1BEa1NqM0MrVWlDazh4WGh6b2VpdwpiSHhNdEdWVXVpQVpHSTdpc2NxOFZJaFQ3QjFWTFB4eUtSYzYvUytnMTlkRURWdDJRMGFvS012d2RkRDE4V3pICkdhWDFJUmNZUVgwYW55RXZpRzBhaEZRc1JvRytkVmZESzVDRVdkUzhXT3lET1ErNFhWOWR5d1h4ckpISDdXQlEKV09SSzVKV2pyUWg1bEdXaUh1NHQvcEFsalJKZWJ5NDU0T3l2dENWcTVkSElIOVl1QmRFc0d5cmROL0Y0VTBGMgpIM0NMZ3dTZlh2NXBUazdaUHZtSXdySHd0WHkxbE1ucHh6WVF3UmI5cTQweTZOUlNvZENjbnVXaVNkUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdWRiUWo4MW5iaVU2VVZ6MjN5SWlVSTMwK29FRU5VY2IvNTFrYld2SjR4SndoUzJMCm1wRXhOaW5RSGtjQTg2VURWZ0xqMnk0cUNEL1J2a0E3b293NEwvU1JVVE5WMmgrTktQbzg3QklHaDZQNS95c3YKaWFCMVpaQTY4SVY5MEpQUi9BZHVUQURsZ09iRkl1NEtTdFJtN0NYemQrOHY5SHBRZ2V1dWtqRlNjTmNueVZGWgpaU1UxL1ErVGhybm9lemErVUZSQko2R2k1NXZNaHR1cVFzOGxRSDlzY0YyazBQVlhMZlF3MER5VnN0cS9jcytiCmxNdldIczhxRStUR2ZGRnVCVE1vK3FuSGh5a3JNZjl6d24rL0VNNlJpekJkbU44ZmxoU01vMUlHblhiMjJxdjkKMjdad3VPd2FwYnhQRHJNYUM1LzVqWHI3RWV2YkhvME9QcGtURndJREFRQUJBb0lCQURMQ3YxTVlLdkZHRCtqYgplTDg0QnFGME5QOGJzSGVSQmMvTFFQdzJYZjI5TXFqZDZPeitUYS9hdWZNYk4rSlZKMVVlRXZqeVloN0F0OXk4CmxNMXdlWVIzekIyZTVRdGdaT0ZWZ01DR3ArdnkyVDFlb1d4NVBMZlNMcGMyRDBpaXA4K3NnKzhVcTV1SzdUdisKUXlkdlh2R1A2REhSVG9yN3dmUEsyWE1yTDdhTVJ5Yy9KSi82RXBnYytzaUNxakpRSkRMR09xM01MWmMybXdIVwpiZzF2NHo3VlBTWjBNRk1ka1BiNEYxV0d2TEJBQXVZVWtEa21mTTRPcVNDUm00TlVrSURNVHJRVllqcmRySmp6CjExSk1jMzhkTUdaNFF5UDc5VVNqajFBM3VSRFYvTGVYQjFvcld2SGYrc1hkUmVSdTd5cmRwemhwT25xOWVxWmMKMmQ4bWlXRUNnWUVBNEx4N1pMWVRqRzFVaWdiTjBWRkpva2M0RWVQaE5aT1dJdDNQUmRJM1dXUzJaZGtBbCsxZQovK1IxTHhqNmtQeWl6UVNwWi93Sm1ZVmR1VmEvTExFWjE3elJBa2xUUmtXbk5qdDJBRVNDT1lJdllFMDcwcmRyCkcxdnZMcmUySEJTNTlFczlrY2VwNE9PZmlTd3c2MnFFRUwwL1pxVTBWVUxzK3FXdWNsYkNqMmNDZ1lFQTA3RVgKWmdDV25BUVBYdkMvN3Y0d2RaYkJFVGZYVVRVRDErY3Q4WnNObU9GQmJORjkzOEJIcTdLUVdXMjR4UkswNUVHOQpCMCtkSjdvRGpNQkJBNjJyb0hJTGFMNHR5U3ZpMXJVczlxUzhFY3c0WUVEOTZrYyswL1FBcStmOWkwK1hYTGdUCisvaU5lNDBmcDN4dXY0QUU4TFlsbjlsRWx3V2NleklTdENqdUFORUNnWUVBZ0gyREZ6dTZ4WWtrMHAyOVF6WDAKb2FHU2Z6Z0k1VGJ5bWhDemx6bnZoMTY3b2xPRnNWZDMvMXBCWGFJc2NJVGhGOUxZZ0tsclc2a1N3d3JEMXV1UwoyUFFOay84VWE1TWJYVGgxNlFWQ1oxcjFkMXZ4SGpMY1BCSStHRG5WRncwS25KQUFMYjg0YzJueEp0NXJRYzN1Cm9CdHppbDVlSTNsV1FLQkZzdjNEMDNVQ2dZQmtBNUFOZGd1eURFMEN5dld6UVU2OXo0ckp5cnNrdDhwb0QrWHAKOXhxV2R4NEUvbmpjNUtnMzIzWk5lZ1JJdjR6TkpxM2JMV2NQWk5mV2dPSjJqVysvcndIcTY2Y1FHM2JoZjltTgpjY2tWRTRvekY2R2ZOU2ZlMWJJWGhkU0pKQUpjSU8vNEpMY2JmMUpNUEFMSzRQMzBoK29BdXBLb1UxTlo5UTlYCkpOdEZjUUtCZ0RCVjJKa1BNajdhSWMvL05pdGhmVEcrVDk4YktBUDhmQnRZZ1FEVmxuMVlmNS9XRmZ3SGVXRVcKUXROdXc5QmdtanhIUDRReFRxR0krVVNqTjJ1TzVyK0hNdUgrNlRydThSbVRRMkJad1ZEcnhDQXo5Uks1OTFuUgo0dWZpeFlQZGs5Ly9PU0lhdUgzYlp2RGhHbzcySFNCWjNVRm9KakxTamVJcUx4N25CdGFiCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-policy-validator-k8s-tls","namespace":"linkerd"},"type":"kubernetes.io/tls"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-policy-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-policy-validator-k8s-tls.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "type": "kubernetes.io/tls",
  },
  {
    "apiVersion": "v1",
    "data": {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVakNDQWpxZ0F3SUJBZ0lRVVc0ZUcybUJzV2ErS2tFSFFyajhCREFOQmdrcWhraUc5dzBCQVFzRkFEQXQKTVNzd0tRWURWUVFERXlKc2FXNXJaWEprTFhCeWIzaDVMV2x1YW1WamRHOXlMbXhwYm10bGNtUXVjM1pqTUI0WApEVEl5TVRBeE1qQTJOVFl4TWxvWERUSXpNVEF4TWpBMk5UWXhNbG93TFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5ClpDMXdjbTk0ZVMxcGJtcGxZM1J2Y2k1c2FXNXJaWEprTG5OMll6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFNbEN5UUhUSVp1MWRUbnhZU1FpN3QwTWN2OTkrVEUydzFsMXBaUXBTV001U3FvaApaaS8xc0FpYTkrZ213cEc2c3BXNjFQeGwybE1TN0lRSHNqVnR2T2xKc2t5MXU1OU85bXdjLzdvWEYwVUtLRmFXClJNcWpwNmM1S3krRitkRlJlNUpnaW9kZ0F3QnB2dko1QzI1SldaZGVuMG05blhIZm5tYVlvYXlDVDdNcnVMWW4KVGt6Vm8rZWxHTWI0dVNMeGpuNnBUNjQwSUk4cUxqNHphalViOEZtOXR1TVBnT1hmd1NuUXo0a2JqOVI5QkxnTQpFZDNBaG5xaldnTElsdVA4QjMzUVFRUnBsN1VLM0ZRRk0zK3gzMHJrL0hMc21zK0tXa2pFRTczSHVTWHdLQWlLCmNQalRnUzNsK1lvUmd6N2VZVVFrUnJmUFJKWXdCUTUzNTJ6ZER4OENBd0VBQWFOdU1Hd3dEZ1lEVlIwUEFRSC8KQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RQpBakFBTUMwR0ExVWRFUVFtTUNTQ0lteHBibXRsY21RdGNISnZlSGt0YVc1cVpXTjBiM0l1YkdsdWEyVnlaQzV6CmRtTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSTJoMTNrcUVWR0kwSmw0bEIyVjEvaEZ0WGxrVmtOSVEzdDEKWjV5ajV0U0RyTFhoNCtLbnVpd0NNamg4VldaR2NESHp5ZjZYRUJBbFV5dzdUUWZ0OTY0UjYwRkFLWDdwUDhhRApYVUJCMTdZejB6T2VuM2tMQmVIc0ZoTGprOFA3NURmMEFmQUJTc2FkU2NMaWtMaWNOTWZCM1NoeXFjWHFIcGNUClVsNHJYRXl6ZWF1YTVTMFVEV2VMNHRkTkhWVTdRWDJ0Znp0d1lhcVpVV3hMQ2hiQlhEdW8yRTluWjVRYTlkT3cKMWhhQzFYSUhXcXVnTmtXRHJhYkJXTmVqZFY0Q3hQZ1lKTTRrWC8vRXFFRXAxTzFZNGt6bDBlcWV3anAwT1dGTAo3cDFEcVNZL05NeUVZZUhqbFpGQndnd2hYVzkxUWpiYVV0VUtPUDJUcFd2YzVRNnlEeGc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeVVMSkFkTWhtN1YxT2ZGaEpDTHUzUXh5LzMzNU1UYkRXWFdsbENsSll6bEtxaUZtCkwvV3dDSnIzNkNiQ2ticXlsYnJVL0dYYVV4THNoQWV5TlcyODZVbXlUTFc3bjA3MmJCei91aGNYUlFvb1ZwWkUKeXFPbnB6a3JMNFg1MFZGN2ttQ0toMkFEQUdtKzhua0xia2xabDE2ZlNiMmRjZCtlWnBpaHJJSlBzeXU0dGlkTwpUTldqNTZVWXh2aTVJdkdPZnFsUHJqUWdqeW91UGpOcU5SdndXYjIyNHcrQTVkL0JLZERQaVJ1UDFIMEV1QXdSCjNjQ0dlcU5hQXNpVzQvd0hmZEJCQkdtWHRRcmNWQVV6ZjdIZlN1VDhjdXlhejRwYVNNUVR2Y2U1SmZBb0NJcHcKK05PQkxlWDVpaEdEUHQ1aFJDUkd0ODlFbGpBRkRuZm5iTjBQSHdJREFRQUJBb0lCQVFDaVJCVmFRa2E3aXU3TAoyOEJ0YVRqYXdobkp3bUJ5Zkd1K0tldG83R3k5OGtndnFTUUJrUDN2d2pvVVU0UFdDUWZKVHN3Ly8wS3FiZnlCCmFzOFU0cmhJQXVJZGxQeURzaDllQlhkdEt3Ylk1QnFuelJvRG96VWR6eXJ4Y3Z4NjlrNUNNMUlkV1p5eDdaQkYKWUxDRnA5L3kraGhGVlBxbkFCdHZMcXBUTXZGZFMzaTFNaEtOQ3dLbW11ekxGTHBFUUhydDhTNW5kZ21SdzVYbgpWM1NVdDN0dVduVlVLanhsdGx4VGk1bDdqUTg2L3BSV2xGMDhVang3eFdpZCtnTEpjT2ZnZXF1c3A4OEJVZ014CnRHVXpnRjZQZnVnMDVIQmh0SVR1VnN1TGs2akhMZWxPd0t1UjZkam5pTkdjM0hJY3lFN204UERCUWUxak5WY2EKR1Y4MDJtNVpBb0dCQVBZb29YQWZ6Sld0OGtwQ01URjJnMjkzL1ExaFR2N25keTV0YkxndklwczJPSXVlZ1hZWApYLzdnaXVselhwVVR4Q1dFUG5ieSszRHpHZktQa3hKaUpWL2pIOVJ5b2t6Zi9hMEV2YjVOWFlVOE1CYkgydG9sCmRPTXo1aXhVUzg5Y2hmVmllMGdrOXR1VjB4MVNJMlV4cktFdmpZT2dyaGk0MDlZZ20xc1pMZ3gxQW9HQkFORk8Kb3hreUxZM0JQeGdKQmdEYityTTZ6YlRmMjdqMlk3SFNsT0ZsWCt3NUhVNHlVTjRoeXpwVU5Ca3o2aHhoakx1eAplZ01VU0poZHVJc01iUmw1NWpEVzFnVVRhVXNIdm1GQjEyTEpWVENOUWhhK1JybTRqNWVzZzRJYzZnV053RmFCCjZCa3BRdE9wa3ljUzVuWnFxMy9lb3dWcWlVTFM5RjE3VWg5emVRckRBb0dBVzUzenVBK2R6WGZZWGRzVkJCdmYKLzNUaE1rR3RiU0lwTVpaNGlIVENwSklocVpWdENjN1pZN3VlK0JTQWQydkw3VXF6RlFLS294ZFg2UGVXL1ppWgo0SDVnTW1vWURoU3dEZDFkNFo1WjJHVDJZUVF4YUUvWW1WZVBxNkFVTnpGd2lrd0ZKbXpibEE3SGJIcE53alFpCjFEc21xSDc5VFNZOWNjemhCWjd4aktFQ2dZRUFvR29ZYmxNYXZxNEE0VGJwTnZkaHFNUEVySDkxTXNrRGwySEIKWVE0RStsSzd0eGF4QzgzeXAvMnBBRGZka1dyaUpXZmNEMGdZYTA1SkJhaThaTzRjRWdwVmRRWnZpR1dpNzM4Ngp5Q2R0OXd3TVBzb09Bb0VFN0VYM2RGMGNycXo1WUZPbndzRHd5ckFJYThYOGczMDFlNGJ5Z2xBb2F1S3JEb3BaClltbHB0MmtDZ1lCbmc4NWdINWV3WFd5Z3RKVktxdEJXazhlNWMwb2tPWk5wNDA0b3J5ek93RmdxNzFEWFdVVXcKUERxcWhObVZRK0QwN2dNMFlBQTJMUGJpYlo2L21WVE5MYjFMYTQrNm80Q3JCRjdsU2o5KzJyTE93QU5GSXZwLwpnVitRcGtsZVMxTXVIVXc2TmcwZzF2OU9sOGJlbFY0SDVMeHJPQUtnMTNIRWJWRGFoZmxsSmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVakNDQWpxZ0F3SUJBZ0lRVVc0ZUcybUJzV2ErS2tFSFFyajhCREFOQmdrcWhraUc5dzBCQVFzRkFEQXQKTVNzd0tRWURWUVFERXlKc2FXNXJaWEprTFhCeWIzaDVMV2x1YW1WamRHOXlMbXhwYm10bGNtUXVjM1pqTUI0WApEVEl5TVRBeE1qQTJOVFl4TWxvWERUSXpNVEF4TWpBMk5UWXhNbG93TFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5ClpDMXdjbTk0ZVMxcGJtcGxZM1J2Y2k1c2FXNXJaWEprTG5OMll6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFNbEN5UUhUSVp1MWRUbnhZU1FpN3QwTWN2OTkrVEUydzFsMXBaUXBTV001U3FvaApaaS8xc0FpYTkrZ213cEc2c3BXNjFQeGwybE1TN0lRSHNqVnR2T2xKc2t5MXU1OU85bXdjLzdvWEYwVUtLRmFXClJNcWpwNmM1S3krRitkRlJlNUpnaW9kZ0F3QnB2dko1QzI1SldaZGVuMG05blhIZm5tYVlvYXlDVDdNcnVMWW4KVGt6Vm8rZWxHTWI0dVNMeGpuNnBUNjQwSUk4cUxqNHphalViOEZtOXR1TVBnT1hmd1NuUXo0a2JqOVI5QkxnTQpFZDNBaG5xaldnTElsdVA4QjMzUVFRUnBsN1VLM0ZRRk0zK3gzMHJrL0hMc21zK0tXa2pFRTczSHVTWHdLQWlLCmNQalRnUzNsK1lvUmd6N2VZVVFrUnJmUFJKWXdCUTUzNTJ6ZER4OENBd0VBQWFOdU1Hd3dEZ1lEVlIwUEFRSC8KQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RQpBakFBTUMwR0ExVWRFUVFtTUNTQ0lteHBibXRsY21RdGNISnZlSGt0YVc1cVpXTjBiM0l1YkdsdWEyVnlaQzV6CmRtTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSTJoMTNrcUVWR0kwSmw0bEIyVjEvaEZ0WGxrVmtOSVEzdDEKWjV5ajV0U0RyTFhoNCtLbnVpd0NNamg4VldaR2NESHp5ZjZYRUJBbFV5dzdUUWZ0OTY0UjYwRkFLWDdwUDhhRApYVUJCMTdZejB6T2VuM2tMQmVIc0ZoTGprOFA3NURmMEFmQUJTc2FkU2NMaWtMaWNOTWZCM1NoeXFjWHFIcGNUClVsNHJYRXl6ZWF1YTVTMFVEV2VMNHRkTkhWVTdRWDJ0Znp0d1lhcVpVV3hMQ2hiQlhEdW8yRTluWjVRYTlkT3cKMWhhQzFYSUhXcXVnTmtXRHJhYkJXTmVqZFY0Q3hQZ1lKTTRrWC8vRXFFRXAxTzFZNGt6bDBlcWV3anAwT1dGTAo3cDFEcVNZL05NeUVZZUhqbFpGQndnd2hYVzkxUWpiYVV0VUtPUDJUcFd2YzVRNnlEeGc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeVVMSkFkTWhtN1YxT2ZGaEpDTHUzUXh5LzMzNU1UYkRXWFdsbENsSll6bEtxaUZtCkwvV3dDSnIzNkNiQ2ticXlsYnJVL0dYYVV4THNoQWV5TlcyODZVbXlUTFc3bjA3MmJCei91aGNYUlFvb1ZwWkUKeXFPbnB6a3JMNFg1MFZGN2ttQ0toMkFEQUdtKzhua0xia2xabDE2ZlNiMmRjZCtlWnBpaHJJSlBzeXU0dGlkTwpUTldqNTZVWXh2aTVJdkdPZnFsUHJqUWdqeW91UGpOcU5SdndXYjIyNHcrQTVkL0JLZERQaVJ1UDFIMEV1QXdSCjNjQ0dlcU5hQXNpVzQvd0hmZEJCQkdtWHRRcmNWQVV6ZjdIZlN1VDhjdXlhejRwYVNNUVR2Y2U1SmZBb0NJcHcKK05PQkxlWDVpaEdEUHQ1aFJDUkd0ODlFbGpBRkRuZm5iTjBQSHdJREFRQUJBb0lCQVFDaVJCVmFRa2E3aXU3TAoyOEJ0YVRqYXdobkp3bUJ5Zkd1K0tldG83R3k5OGtndnFTUUJrUDN2d2pvVVU0UFdDUWZKVHN3Ly8wS3FiZnlCCmFzOFU0cmhJQXVJZGxQeURzaDllQlhkdEt3Ylk1QnFuelJvRG96VWR6eXJ4Y3Z4NjlrNUNNMUlkV1p5eDdaQkYKWUxDRnA5L3kraGhGVlBxbkFCdHZMcXBUTXZGZFMzaTFNaEtOQ3dLbW11ekxGTHBFUUhydDhTNW5kZ21SdzVYbgpWM1NVdDN0dVduVlVLanhsdGx4VGk1bDdqUTg2L3BSV2xGMDhVang3eFdpZCtnTEpjT2ZnZXF1c3A4OEJVZ014CnRHVXpnRjZQZnVnMDVIQmh0SVR1VnN1TGs2akhMZWxPd0t1UjZkam5pTkdjM0hJY3lFN204UERCUWUxak5WY2EKR1Y4MDJtNVpBb0dCQVBZb29YQWZ6Sld0OGtwQ01URjJnMjkzL1ExaFR2N25keTV0YkxndklwczJPSXVlZ1hZWApYLzdnaXVselhwVVR4Q1dFUG5ieSszRHpHZktQa3hKaUpWL2pIOVJ5b2t6Zi9hMEV2YjVOWFlVOE1CYkgydG9sCmRPTXo1aXhVUzg5Y2hmVmllMGdrOXR1VjB4MVNJMlV4cktFdmpZT2dyaGk0MDlZZ20xc1pMZ3gxQW9HQkFORk8Kb3hreUxZM0JQeGdKQmdEYityTTZ6YlRmMjdqMlk3SFNsT0ZsWCt3NUhVNHlVTjRoeXpwVU5Ca3o2aHhoakx1eAplZ01VU0poZHVJc01iUmw1NWpEVzFnVVRhVXNIdm1GQjEyTEpWVENOUWhhK1JybTRqNWVzZzRJYzZnV053RmFCCjZCa3BRdE9wa3ljUzVuWnFxMy9lb3dWcWlVTFM5RjE3VWg5emVRckRBb0dBVzUzenVBK2R6WGZZWGRzVkJCdmYKLzNUaE1rR3RiU0lwTVpaNGlIVENwSklocVpWdENjN1pZN3VlK0JTQWQydkw3VXF6RlFLS294ZFg2UGVXL1ppWgo0SDVnTW1vWURoU3dEZDFkNFo1WjJHVDJZUVF4YUUvWW1WZVBxNkFVTnpGd2lrd0ZKbXpibEE3SGJIcE53alFpCjFEc21xSDc5VFNZOWNjemhCWjd4aktFQ2dZRUFvR29ZYmxNYXZxNEE0VGJwTnZkaHFNUEVySDkxTXNrRGwySEIKWVE0RStsSzd0eGF4QzgzeXAvMnBBRGZka1dyaUpXZmNEMGdZYTA1SkJhaThaTzRjRWdwVmRRWnZpR1dpNzM4Ngp5Q2R0OXd3TVBzb09Bb0VFN0VYM2RGMGNycXo1WUZPbndzRHd5ckFJYThYOGczMDFlNGJ5Z2xBb2F1S3JEb3BaClltbHB0MmtDZ1lCbmc4NWdINWV3WFd5Z3RKVktxdEJXazhlNWMwb2tPWk5wNDA0b3J5ek93RmdxNzFEWFdVVXcKUERxcWhObVZRK0QwN2dNMFlBQTJMUGJpYlo2L21WVE5MYjFMYTQrNm80Q3JCRjdsU2o5KzJyTE93QU5GSXZwLwpnVitRcGtsZVMxTXVIVXc2TmcwZzF2OU9sOGJlbFY0SDVMeHJPQUtnMTNIRWJWRGFoZmxsSmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-proxy-injector-k8s-tls","namespace":"linkerd"},"type":"kubernetes.io/tls"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "linkerd-proxy-injector-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/1-manifest/v1-secret-linkerd-linkerd-proxy-injector-k8s-tls.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "type": "kubernetes.io/tls",
  },
  {
    "apiVersion": "v1",
    "data": {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRVjBUQjdVdWxQSWsvUXJUT0xMVFE2ekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TVRBeApNakEyTlRZeE1sb1hEVEl6TVRBeE1qQTJOVFl4TWxvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU0vcU5OVnFxOW10THBQQlhsd3gxZllWM3lDdk9KYUs4MkwwNENnMnduVG9RNDk0djhvTDlFM3RrZHJSVjIyeAp5U3BOcGdoNlRWTldEVnNzZmdVWHFuUHhib0lWRTdmNmVBalZDTlp3S0RWMWxjalZGYjIybVI3WGxhMHllTTA4CmdhdTZzSUNsUkdzVXQzT1JQUDJzdEorWjZ5bWs5V3d0V0FyOTdZWUVzUFJaRFBhMFNpRGdUeHVRNHlnYXVpWXIKRng1bUM3aVg0NVRIVTRPRWlKOCtTcUdvcWwxa3BUZTdMTW9haWpxZzVwS2phNGhuMVpQbGQ4QjZUZHNLaTFvNQpmUFRuMGhwc1VONGhLMDBCZ0VIa1Mwdm5ZU3B2dGI0eXd6VlgyL0pSNm85RDh1MjFYQmR1TGc2WGRyOTBxYmZICi9Ebmo5UkYzM2FCcmJuS2pQVytxa2VrQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSDQxV2tINGYzU0NteEtqU3J5eUJPTkFyNUVRY2E3TG1uNll6aytid3hKRk1ZSlcxZUw4alNJMU8rS2MKblRYZ0dpSUozMlB5bm8vdVNoNTNIOWtjZUgxMG5FRWdITDFRQkMwN3BJS1RYdGF1NmdLMXFraU1GTTBqZW8raQpQVC9iZkxycFpkRDJpd3JueWlpVEhWS3VCeDR4QWVZWGRFbUJLb1A1UjAzSGlEZFoybVBveElRQVMxd3MzKzY5Cm4wTE5hc1V0ZGx5eFlWeFhyOVovNzZGZENrM2JSZzVmVnRFMnJnNnJhTW0yS3hweTRLMU1VOVFTTU9Pa2gzL2YKNWNINzA1dHRIZ3pOL3BKNW81N0xtbVoyeDhPR1BQM1ZmOHZCd1FTa2s4RmZxSXQzMEJhK3hDdmdCV3kxLzlEcApFUlZkZ3FoYlNUejJoTEFSTXFWd2xzTXVSVU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeitvMDFXcXIyYTB1azhGZVhESFY5aFhmSUs4NGxvcnpZdlRnS0RiQ2RPaERqM2kvCnlndjBUZTJSMnRGWGJiSEpLazJtQ0hwTlUxWU5XeXgrQlJlcWMvRnVnaFVUdC9wNENOVUkxbkFvTlhXVnlOVVYKdmJhWkh0ZVZyVEo0elR5QnE3cXdnS1ZFYXhTM2M1RTgvYXkwbjVuckthVDFiQzFZQ3YzdGhnU3c5RmtNOXJSSwpJT0JQRzVEaktCcTZKaXNYSG1ZTHVKZmpsTWRUZzRTSW56NUtvYWlxWFdTbE43c3N5aHFLT3FEbWtxTnJpR2ZWCmsrVjN3SHBOMndxTFdqbDg5T2ZTR214UTNpRXJUUUdBUWVSTFMrZGhLbSsxdmpMRE5WZmI4bEhxajBQeTdiVmMKRjI0dURwZDJ2M1NwdDhmOE9lUDFFWGZkb0d0dWNxTTliNnFSNlFJREFRQUJBb0lCQUFaejdHUGJSYTRoMDlvKwpIQ0djWWxtYTRDdnhoRDRYM2VucVU3S3IwR2swZERSVnVRNGFST0RPU01LVDBMVFUyYnQ0WVhqTjR1eDlOVGpwCkxwZ1YzZkp2UWRERHVyTHhFUnlsRC9zbnkvZXN5Sk5OR2Jtam15ajc0K2RXTTYyYS9TTkpUZ1VRSEFsK3dSclQKSFNONllyaTVYRFVVcTVGSjd2dVlXZkRZNEcwVThDSDFUdFRHblFJM05rUVJjcEtYSnZaOWtxSkRLTCtVeDRKZQo1WVdTdFlza0VkalVQMlNzK0RiRzhoMGFxSEV1ZUxPT2xxTWpyd2hSNVFQdkJFeVV0OFpZbTNNWFR1bTI2OEt5CkU5NkdJWEgva1JyR1BjMTFaaVRzWk9rQXZyVlBSSmRDanRBMTNIdHVPcU9lSzF4cStJK05ESEVYaDUyeVQwZ1kKWnA0UHpra0NnWUVBNWpHZmtuV2hUTy9JVGNqNnpFRHc1eFQwN0ZucUg3Mks4TTJLSjdoeGhnd0ZkTVJ4UURUVwpOLzBRSGdMRzQzcXoxZk02RGZBbEZjc1lka1lZZGNqQUpUWUVnSzVRSDIxemhNdkp4ZzRFclQ3RjFmVHlXM0FQCmRENmZhdk5SUnRvRTQrQWQzVGRieUR0QStBV0JoRDhsQWh4M29RQjRxM0ROaWVFcTZUYUpvS01DZ1lFQTV6a3gKMFZWNnNZUWNHQnJ4eUtMT3dsVGtCSFRiTXdJV2ZZQVBDSDBNVUE2REhkS1ZPUmgvSml1S3NDMHVwYm10WllBZgpxTFpXbzJmTVoxWUM2NVRldmM5MEZVeU10amhRVS8wVnJJaTBFdFZmbEhyTGtMYjBTV0trRXEwOGxkdENWL3hVCmgxWkxzL0sycE1GbVQ2KzR3T2ljYUhBbW9JbDlqS3F1bkdpbWtBTUNnWUI4cCs3RC8xTmtPSTErSWhJK3ZnUTIKLzFCTEZiNEZoajFSZmQwTStZTHdsbDMyQjlOVWM4aDE5V0xlL1ozNjNoMjVCTWd4ZUJSOUlzaVNkQThXNmFtegovUGFmUU1ZKzNxU3FDem12T1RRckpVMDVPalpzY2RqTW1JVDRBOS9Gd0piWldDcVQrMENHeEIvQXNDcWRGUnpUCmNkc09veFMxc3BaN3ppWFF1U242aFFLQmdEcFMxL2tZbWFrN1RLYmI3UThSMmh0MHRFdFhlbzhrUUs0SlprRmEKNFljMEVlaXMzSTBaVzhFeURIcWgrdms4bTd0VmxTYkdUNVpLTVdvRGJSc2xZd1gzMVMwbU1Qd3B1a0ZsUGxsVgo1aTQxK2pVR3dHQlJkYzhvL1gva2lMcTRJc1QwMWhHSk4vRTlFTXNBS2FHQ0RwVkNWMm1VbUhtNEZKNHQwM3VLCmZqRW5Bb0dCQUxhMkdTNWExTUQ3WHdzY1pkQ05pU0JuYi9IVFc4VzZ0M1Q4eHIyQXArZkV2bEQvNVNHaC9NK1cKVEdFS25keTJlZXVQREs1ZTg1N3RxUnovcGsxeDFYR3lRMVRIbFVqK2V4aER5VWxDcE1xQkhTTFA2TjlzZDRkZApyRi9uVXR4ckJTY0pVc2Q0M2UwOTlGN0FJWVZJSGUwbVZudkQxUGs3bU80TWpyUnZucm5LCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRVjBUQjdVdWxQSWsvUXJUT0xMVFE2ekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TVRBeApNakEyTlRZeE1sb1hEVEl6TVRBeE1qQTJOVFl4TWxvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU0vcU5OVnFxOW10THBQQlhsd3gxZllWM3lDdk9KYUs4MkwwNENnMnduVG9RNDk0djhvTDlFM3RrZHJSVjIyeAp5U3BOcGdoNlRWTldEVnNzZmdVWHFuUHhib0lWRTdmNmVBalZDTlp3S0RWMWxjalZGYjIybVI3WGxhMHllTTA4CmdhdTZzSUNsUkdzVXQzT1JQUDJzdEorWjZ5bWs5V3d0V0FyOTdZWUVzUFJaRFBhMFNpRGdUeHVRNHlnYXVpWXIKRng1bUM3aVg0NVRIVTRPRWlKOCtTcUdvcWwxa3BUZTdMTW9haWpxZzVwS2phNGhuMVpQbGQ4QjZUZHNLaTFvNQpmUFRuMGhwc1VONGhLMDBCZ0VIa1Mwdm5ZU3B2dGI0eXd6VlgyL0pSNm85RDh1MjFYQmR1TGc2WGRyOTBxYmZICi9Ebmo5UkYzM2FCcmJuS2pQVytxa2VrQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSDQxV2tINGYzU0NteEtqU3J5eUJPTkFyNUVRY2E3TG1uNll6aytid3hKRk1ZSlcxZUw4alNJMU8rS2MKblRYZ0dpSUozMlB5bm8vdVNoNTNIOWtjZUgxMG5FRWdITDFRQkMwN3BJS1RYdGF1NmdLMXFraU1GTTBqZW8raQpQVC9iZkxycFpkRDJpd3JueWlpVEhWS3VCeDR4QWVZWGRFbUJLb1A1UjAzSGlEZFoybVBveElRQVMxd3MzKzY5Cm4wTE5hc1V0ZGx5eFlWeFhyOVovNzZGZENrM2JSZzVmVnRFMnJnNnJhTW0yS3hweTRLMU1VOVFTTU9Pa2gzL2YKNWNINzA1dHRIZ3pOL3BKNW81N0xtbVoyeDhPR1BQM1ZmOHZCd1FTa2s4RmZxSXQzMEJhK3hDdmdCV3kxLzlEcApFUlZkZ3FoYlNUejJoTEFSTXFWd2xzTXVSVU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeitvMDFXcXIyYTB1azhGZVhESFY5aFhmSUs4NGxvcnpZdlRnS0RiQ2RPaERqM2kvCnlndjBUZTJSMnRGWGJiSEpLazJtQ0hwTlUxWU5XeXgrQlJlcWMvRnVnaFVUdC9wNENOVUkxbkFvTlhXVnlOVVYKdmJhWkh0ZVZyVEo0elR5QnE3cXdnS1ZFYXhTM2M1RTgvYXkwbjVuckthVDFiQzFZQ3YzdGhnU3c5RmtNOXJSSwpJT0JQRzVEaktCcTZKaXNYSG1ZTHVKZmpsTWRUZzRTSW56NUtvYWlxWFdTbE43c3N5aHFLT3FEbWtxTnJpR2ZWCmsrVjN3SHBOMndxTFdqbDg5T2ZTR214UTNpRXJUUUdBUWVSTFMrZGhLbSsxdmpMRE5WZmI4bEhxajBQeTdiVmMKRjI0dURwZDJ2M1NwdDhmOE9lUDFFWGZkb0d0dWNxTTliNnFSNlFJREFRQUJBb0lCQUFaejdHUGJSYTRoMDlvKwpIQ0djWWxtYTRDdnhoRDRYM2VucVU3S3IwR2swZERSVnVRNGFST0RPU01LVDBMVFUyYnQ0WVhqTjR1eDlOVGpwCkxwZ1YzZkp2UWRERHVyTHhFUnlsRC9zbnkvZXN5Sk5OR2Jtam15ajc0K2RXTTYyYS9TTkpUZ1VRSEFsK3dSclQKSFNONllyaTVYRFVVcTVGSjd2dVlXZkRZNEcwVThDSDFUdFRHblFJM05rUVJjcEtYSnZaOWtxSkRLTCtVeDRKZQo1WVdTdFlza0VkalVQMlNzK0RiRzhoMGFxSEV1ZUxPT2xxTWpyd2hSNVFQdkJFeVV0OFpZbTNNWFR1bTI2OEt5CkU5NkdJWEgva1JyR1BjMTFaaVRzWk9rQXZyVlBSSmRDanRBMTNIdHVPcU9lSzF4cStJK05ESEVYaDUyeVQwZ1kKWnA0UHpra0NnWUVBNWpHZmtuV2hUTy9JVGNqNnpFRHc1eFQwN0ZucUg3Mks4TTJLSjdoeGhnd0ZkTVJ4UURUVwpOLzBRSGdMRzQzcXoxZk02RGZBbEZjc1lka1lZZGNqQUpUWUVnSzVRSDIxemhNdkp4ZzRFclQ3RjFmVHlXM0FQCmRENmZhdk5SUnRvRTQrQWQzVGRieUR0QStBV0JoRDhsQWh4M29RQjRxM0ROaWVFcTZUYUpvS01DZ1lFQTV6a3gKMFZWNnNZUWNHQnJ4eUtMT3dsVGtCSFRiTXdJV2ZZQVBDSDBNVUE2REhkS1ZPUmgvSml1S3NDMHVwYm10WllBZgpxTFpXbzJmTVoxWUM2NVRldmM5MEZVeU10amhRVS8wVnJJaTBFdFZmbEhyTGtMYjBTV0trRXEwOGxkdENWL3hVCmgxWkxzL0sycE1GbVQ2KzR3T2ljYUhBbW9JbDlqS3F1bkdpbWtBTUNnWUI4cCs3RC8xTmtPSTErSWhJK3ZnUTIKLzFCTEZiNEZoajFSZmQwTStZTHdsbDMyQjlOVWM4aDE5V0xlL1ozNjNoMjVCTWd4ZUJSOUlzaVNkQThXNmFtegovUGFmUU1ZKzNxU3FDem12T1RRckpVMDVPalpzY2RqTW1JVDRBOS9Gd0piWldDcVQrMENHeEIvQXNDcWRGUnpUCmNkc09veFMxc3BaN3ppWFF1U242aFFLQmdEcFMxL2tZbWFrN1RLYmI3UThSMmh0MHRFdFhlbzhrUUs0SlprRmEKNFljMEVlaXMzSTBaVzhFeURIcWgrdms4bTd0VmxTYkdUNVpLTVdvRGJSc2xZd1gzMVMwbU1Qd3B1a0ZsUGxsVgo1aTQxK2pVR3dHQlJkYzhvL1gva2lMcTRJc1QwMWhHSk4vRTlFTXNBS2FHQ0RwVkNWMm1VbUhtNEZKNHQwM3VLCmZqRW5Bb0dCQUxhMkdTNWExTUQ3WHdzY1pkQ05pU0JuYi9IVFc4VzZ0M1Q4eHIyQXArZkV2bEQvNVNHaC9NK1cKVEdFS25keTJlZXVQREs1ZTg1N3RxUnovcGsxeDFYR3lRMVRIbFVqK2V4aER5VWxDcE1xQkhTTFA2TjlzZDRkZApyRi9uVXR4ckJTY0pVc2Q0M2UwOTlGN0FJWVZJSGUwbVZudkQxUGs3bU80TWpyUnZucm5LCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/extension":"viz"},"name":"tap-injector-k8s-tls","namespace":"linkerd-viz"},"type":"kubernetes.io/tls"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "tap-injector-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-secret-linkerd-viz-tap-injector-k8s-tls.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "type": "kubernetes.io/tls",
  },
  {
    "apiVersion": "v1",
    "data": {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQU9CZ01Yay9yZ1pxNFZ3a21NZ2krZ1l3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpFd01USXdOalUyTVRKYQpGdzB5TXpFd01USXdOalUyTVRKYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUMrdE1DYzBuaVd1eFhzYzRHU0tzZkIKNkt5ZkhCSVZrSG1Fc1c4WGlIWlVqa213NzgyVUcySWpXK2krNm0rcDBHQkNuc1JHU2x0ajBmTHlHekJKV2U0Mgord09zdi95NDF3c1hnNEJjY0wyWnRiVS9DNzRWNDZXUTgwcnFVbVRJVHg0enBxTWJ1YXVvMkRXdkNwVWV4L1k1Cm43WjBkeTY5QXNZMW9nK3dJUGRvbzNoRElIUlZOc0pjN0tjdFJ3QWk3MFRuUnNONWxoNGtkdjA0MWIxMHpuZDcKSFBpTm5IVmFOZFJwRGVZcXE0cytKTDFiWEJVeWNDVDV0NFVnK29mYTNraS9TNVFrQUxFUzNiMURhVE5hUnh3SgphWFBUS1JpVWFUQ1c4Mmxwa1FPTWIwSy8wT0toZk9YQkFVZ2Ztb2orWTBuK3hZRFFNc2tTZUNWTWpPUFVhNjNCCkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQmdTZ3JLVFJ1QXFCN1hxazBxQk5KeWx2eWo1SjNDCjJvbDA2K1FRNEdNa1I2QTJlZklaMDJTbzhUbE5sNVhMNTFkUGt3VFIvUWNBd3A5UmdaWHFvZFQvcGdZbnhnMVcKRnJvb1VsdVY2anNyYlJlZ0RaOGVwTnl6Wm9RM3pwU013K3UwZldRSmlsVzZxbEVTZ1hWeEF1N3lIZnZHRHpISQpMT3hrY3p2YzQvaytkNXNpc2IxdnFWWEdsUjFDOFNGYU85V2o0Y2VkZEUzaFBXN2o2M3BMV0NxZCtyWkoyVnRnCnorL0ZzMFVnbUlCVnh1YmhmWjd5UGhqYWJTcFd6U3hCRCtQSzgvb25FM3N6RWo4dktMQmljbXFaTEhHTENQUXUKckdZM1g5ajZ4UW1jdE0zQ2hvck5FWmFXV2I1WDBrNnVrajRxSlJRc21QV0xCRSszSlZMUkIycG8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdnJUQW5OSjRscnNWN0hPQmtpckh3ZWlzbnh3U0ZaQjVoTEZ2RjRoMlZJNUpzTy9OCmxCdGlJMXZvdnVwdnFkQmdRcDdFUmtwYlk5SHk4aHN3U1ZudU52c0RyTC84dU5jTEY0T0FYSEM5bWJXMVB3dSsKRmVPbGtQTks2bEpreUU4ZU02YWpHN21ycU5nMXJ3cVZIc2YyT1orMmRIY3V2UUxHTmFJUHNDRDNhS040UXlCMApWVGJDWE95bkxVY0FJdTlFNTBiRGVaWWVKSGI5T05XOWRNNTNleHo0alp4MVdqWFVhUTNtS3F1TFBpUzlXMXdWCk1uQWsrYmVGSVBxSDJ0NUl2MHVVSkFDeEV0MjlRMmt6V2tjY0NXbHoweWtZbEdrd2x2TnBhWkVEakc5Q3Y5RGkKb1h6bHdRRklINXFJL21OSi9zV0EwRExKRW5nbFRJemoxR3V0d1FJREFRQUJBb0lCQUVFU04rN0t1aTdrWTFTdApEUGNzOWNBcWZreEVMYitCN3BUaVhqK3Zab0R2bENGMWtiWUpxZkRhdVkzN1BHSzdJVDFhSXlyQTBISTgveUt4Ck9FYXZFdU5idnlOQTF5RFM3NHYwYU9ZaDZlLzYybjlLcUcrYm43RFg4eVlGT3pKR0hNNE8rL1RINDlUWEFXcGEKdUFzcXU4OXB1YjMvdE1qMW0yQk5qZ0RSSHRwcTVoL0RsTWxOVkIyUEVlRGJrN1p1SWVkbENJNUhmZ0ZmVTJKUwpyY3FEaVM3MnB3N1duVkFKYmZsZ2RMMUVTNmpVa3RNaU0xa09RY2dWbm0yV3pLTGZjQUVWaWJaZ1E0ZkFwMlB6CktkMHIxL3h3cmlKNmFEYUtpRG91cVUyaWFjM29QRTZzU0M4QkU2dmZmYnZoTDV4c1hKOHloNU1EMHFjY2o1QXYKYy95MVFZRUNnWUVBMzc3d0NqditqZjdrT2xHR3c3eVZGRUluVE1kM290bHFzdk5oTERLeHFhNVBCYTE2NFQvTQpwTFBKUUZLUzBNRE14TTlacEVTUmlCcy9UcTNic2hONGQyWmRrN2NPa3dhVkIrczFWVXJYelN3WE1OWDE2M2UxCjMyYk8zemtsMzdMQzczakQ5WXhsd1ZRbUZHZXByai9PK2d0ZHdlMHM0TE91aFpxTVZIMnp6YmtDZ1lFQTJqS0YKdzY0dDlDNEJwNHFvMmtSOXJNcmVIbnhFWk9RWHFTZ0NxSmszYjNaOURwWGlHL0FGbkpHNmliVklhUU5JVUdFWApPYVRWL29vVTgrWnU5K3VxQTgzZFhyd3daVUVhV3BQMGJMNkdFNG1zdDVYRnhYTjltQ2hOV0tsbmRkQnlFMUdUCmJpSGY5SW54bVVyVXVKeHJPWllqQU1saThCa3hXNWdZWHFqNEpFa0NnWUVBcEVlMlNWMXBkdXE2dWhNWUJ1bVUKOEEzdWV4Sk54aFVxb1gvUFRqdGVkUDZWNk01S1ZjNlpQQ2tCVUNnUXdoTjloZGZVc3FiaHovUnBsQ1JWRmJmMApFSDdwb0VhYy9kaXNYZWNWL3F6NExCMytYUTRNQlRxZElBMkZRU0xkcXhTK3lrTjZaZlVTMVZNcXJucTZmRVUvCmZCb1NXZ3dCa201N2FuOWlIN3MzNUlrQ2dZRUFzU21zYW9HV1ZsaTBoekNTZ1FaemRFVVRySFVCbzFsL3pKenIKNjdEYnplakxDWGl4S2pYc21IL0trZDFiZWNoc2dyY1NnSDlTTVdZME5RUzR2UnZmNDA3WG12LzUyM3pNeFJhMApzMGJPM2pZK3dxRWMvNEVTVE9VTVNCemtJRWlyRnZ4NVZFYTA3SHpFYWM3VWdVQ2YzeFlFUGJOR1hlUldxeVFIClJYUzBaZUVDZ1lFQXdXUDU1VnplWmdlTjFtZ1hqWVNNbjBIR0FaZmljYzRQN20rREF4cHFPTjBOOFJsYUFWblQKN3BHbjA4Q3NCRytiS0JhZk1qb2hWSFhOa2JMUWZENFdsU3BwWG5UUjRzUVlOQkVaUHViaW1TRkppN2h1VkJQUgppcHJ5VFZGcW0wbDljQ3UwdTkrSjR3SVB0TTNjbE9tZ0tHakg5ellFak1zZ0NnbHBaOUZjNmRNPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQU9CZ01Yay9yZ1pxNFZ3a21NZ2krZ1l3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpFd01USXdOalUyTVRKYQpGdzB5TXpFd01USXdOalUyTVRKYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUMrdE1DYzBuaVd1eFhzYzRHU0tzZkIKNkt5ZkhCSVZrSG1Fc1c4WGlIWlVqa213NzgyVUcySWpXK2krNm0rcDBHQkNuc1JHU2x0ajBmTHlHekJKV2U0Mgord09zdi95NDF3c1hnNEJjY0wyWnRiVS9DNzRWNDZXUTgwcnFVbVRJVHg0enBxTWJ1YXVvMkRXdkNwVWV4L1k1Cm43WjBkeTY5QXNZMW9nK3dJUGRvbzNoRElIUlZOc0pjN0tjdFJ3QWk3MFRuUnNONWxoNGtkdjA0MWIxMHpuZDcKSFBpTm5IVmFOZFJwRGVZcXE0cytKTDFiWEJVeWNDVDV0NFVnK29mYTNraS9TNVFrQUxFUzNiMURhVE5hUnh3SgphWFBUS1JpVWFUQ1c4Mmxwa1FPTWIwSy8wT0toZk9YQkFVZ2Ztb2orWTBuK3hZRFFNc2tTZUNWTWpPUFVhNjNCCkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQmdTZ3JLVFJ1QXFCN1hxazBxQk5KeWx2eWo1SjNDCjJvbDA2K1FRNEdNa1I2QTJlZklaMDJTbzhUbE5sNVhMNTFkUGt3VFIvUWNBd3A5UmdaWHFvZFQvcGdZbnhnMVcKRnJvb1VsdVY2anNyYlJlZ0RaOGVwTnl6Wm9RM3pwU013K3UwZldRSmlsVzZxbEVTZ1hWeEF1N3lIZnZHRHpISQpMT3hrY3p2YzQvaytkNXNpc2IxdnFWWEdsUjFDOFNGYU85V2o0Y2VkZEUzaFBXN2o2M3BMV0NxZCtyWkoyVnRnCnorL0ZzMFVnbUlCVnh1YmhmWjd5UGhqYWJTcFd6U3hCRCtQSzgvb25FM3N6RWo4dktMQmljbXFaTEhHTENQUXUKckdZM1g5ajZ4UW1jdE0zQ2hvck5FWmFXV2I1WDBrNnVrajRxSlJRc21QV0xCRSszSlZMUkIycG8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdnJUQW5OSjRscnNWN0hPQmtpckh3ZWlzbnh3U0ZaQjVoTEZ2RjRoMlZJNUpzTy9OCmxCdGlJMXZvdnVwdnFkQmdRcDdFUmtwYlk5SHk4aHN3U1ZudU52c0RyTC84dU5jTEY0T0FYSEM5bWJXMVB3dSsKRmVPbGtQTks2bEpreUU4ZU02YWpHN21ycU5nMXJ3cVZIc2YyT1orMmRIY3V2UUxHTmFJUHNDRDNhS040UXlCMApWVGJDWE95bkxVY0FJdTlFNTBiRGVaWWVKSGI5T05XOWRNNTNleHo0alp4MVdqWFVhUTNtS3F1TFBpUzlXMXdWCk1uQWsrYmVGSVBxSDJ0NUl2MHVVSkFDeEV0MjlRMmt6V2tjY0NXbHoweWtZbEdrd2x2TnBhWkVEakc5Q3Y5RGkKb1h6bHdRRklINXFJL21OSi9zV0EwRExKRW5nbFRJemoxR3V0d1FJREFRQUJBb0lCQUVFU04rN0t1aTdrWTFTdApEUGNzOWNBcWZreEVMYitCN3BUaVhqK3Zab0R2bENGMWtiWUpxZkRhdVkzN1BHSzdJVDFhSXlyQTBISTgveUt4Ck9FYXZFdU5idnlOQTF5RFM3NHYwYU9ZaDZlLzYybjlLcUcrYm43RFg4eVlGT3pKR0hNNE8rL1RINDlUWEFXcGEKdUFzcXU4OXB1YjMvdE1qMW0yQk5qZ0RSSHRwcTVoL0RsTWxOVkIyUEVlRGJrN1p1SWVkbENJNUhmZ0ZmVTJKUwpyY3FEaVM3MnB3N1duVkFKYmZsZ2RMMUVTNmpVa3RNaU0xa09RY2dWbm0yV3pLTGZjQUVWaWJaZ1E0ZkFwMlB6CktkMHIxL3h3cmlKNmFEYUtpRG91cVUyaWFjM29QRTZzU0M4QkU2dmZmYnZoTDV4c1hKOHloNU1EMHFjY2o1QXYKYy95MVFZRUNnWUVBMzc3d0NqditqZjdrT2xHR3c3eVZGRUluVE1kM290bHFzdk5oTERLeHFhNVBCYTE2NFQvTQpwTFBKUUZLUzBNRE14TTlacEVTUmlCcy9UcTNic2hONGQyWmRrN2NPa3dhVkIrczFWVXJYelN3WE1OWDE2M2UxCjMyYk8zemtsMzdMQzczakQ5WXhsd1ZRbUZHZXByai9PK2d0ZHdlMHM0TE91aFpxTVZIMnp6YmtDZ1lFQTJqS0YKdzY0dDlDNEJwNHFvMmtSOXJNcmVIbnhFWk9RWHFTZ0NxSmszYjNaOURwWGlHL0FGbkpHNmliVklhUU5JVUdFWApPYVRWL29vVTgrWnU5K3VxQTgzZFhyd3daVUVhV3BQMGJMNkdFNG1zdDVYRnhYTjltQ2hOV0tsbmRkQnlFMUdUCmJpSGY5SW54bVVyVXVKeHJPWllqQU1saThCa3hXNWdZWHFqNEpFa0NnWUVBcEVlMlNWMXBkdXE2dWhNWUJ1bVUKOEEzdWV4Sk54aFVxb1gvUFRqdGVkUDZWNk01S1ZjNlpQQ2tCVUNnUXdoTjloZGZVc3FiaHovUnBsQ1JWRmJmMApFSDdwb0VhYy9kaXNYZWNWL3F6NExCMytYUTRNQlRxZElBMkZRU0xkcXhTK3lrTjZaZlVTMVZNcXJucTZmRVUvCmZCb1NXZ3dCa201N2FuOWlIN3MzNUlrQ2dZRUFzU21zYW9HV1ZsaTBoekNTZ1FaemRFVVRySFVCbzFsL3pKenIKNjdEYnplakxDWGl4S2pYc21IL0trZDFiZWNoc2dyY1NnSDlTTVdZME5RUzR2UnZmNDA3WG12LzUyM3pNeFJhMApzMGJPM2pZK3dxRWMvNEVTVE9VTVNCemtJRWlyRnZ4NVZFYTA3SHpFYWM3VWdVQ2YzeFlFUGJOR1hlUldxeVFIClJYUzBaZUVDZ1lFQXdXUDU1VnplWmdlTjFtZ1hqWVNNbjBIR0FaZmljYzRQN20rREF4cHFPTjBOOFJsYUFWblQKN3BHbjA4Q3NCRytiS0JhZk1qb2hWSFhOa2JMUWZENFdsU3BwWG5UUjRzUVlOQkVaUHViaW1TRkppN2h1VkJQUgppcHJ5VFZGcW0wbDljQ3UwdTkrSjR3SVB0TTNjbE9tZ0tHakg5ellFak1zZ0NnbHBaOUZjNmRNPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"tap","linkerd.io/extension":"viz","namespace":"linkerd-viz"},"name":"tap-k8s-tls","namespace":"linkerd-viz"},"type":"kubernetes.io/tls"}
",
        "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
      },
      "name": "tap-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-secret-linkerd-viz-tap-k8s-tls.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "type": "kubernetes.io/tls",
  },
  {
    "apiVersion": "v1",
    "data": {
      "auth": "YWRtaW46JDJiJDEwJHExSDZCbmN5NXkxQ2MvQ0hncS9UNS5LRnZyZFlwWE92bFJycVpxZHY5OUM4enAxVFI0WTF5",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"auth":"YWRtaW46JDJiJDEwJHExSDZCbmN5NXkxQ2MvQ0hncS9UNS5LRnZyZFlwWE92bFJycVpxZHY5OUM4enAxVFI0WTF5"},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"linkerd-viz-ingress-auth","namespace":"linkerd-viz"}}
",
      },
      "name": "linkerd-viz-ingress-auth",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/1-manifest/v1-secret-linkerd-viz-linkerd-viz-ingress-auth.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
  },
  {
    "apiVersion": "v1",
    "data": {
      "password": "SGFyZENvZGVkUGFzc3dvcmQ=",
      "user": "WW91clNXVXNlcg==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "pre-install",
        "helm.sh/resource-policy": "keep",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Secret","metadata":{"annotations":{"helm.sh/hook":"pre-install","helm.sh/resource-policy":"keep"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"secret-seaweedfs-db","namespace":"seaweedfs"},"stringData":{"password":"HardCodedPassword","user":"YourSWUser"},"type":"Opaque"}
",
      },
      "name": "secret-seaweedfs-db",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/1-manifest/v1-secret-seaweedfs-secret-seaweedfs-db.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
    "stringData": {
      "password": "HardCodedPassword",
      "user": "YourSWUser",
    },
    "type": "Opaque",
  },
  {
    "apiVersion": "v1",
    "data": {
      "admin_access_key_id": "QVlUNWtIZllPMENwTjhrNg==",
      "admin_secret_access_key": "VGw1WkIzQnBxcVlHVFlQd0J2TkxDQTFtZ1hubkpmSUI=",
      "read_access_key_id": "N2J0WmZMZFlaWUdJdmdrcg==",
      "read_secret_access_key": "blhuSENXN2NLaXNXTDE3dlljZ2M4NHRjeGZBSUJwbGc=",
      "seaweedfs_s3_config": "eyJpZGVudGl0aWVzIjpbeyJuYW1lIjoiYW52QWRtaW4iLCJjcmVkZW50aWFscyI6W3siYWNjZXNzS2V5IjoiQVlUNWtIZllPMENwTjhrNiIsInNlY3JldEtleSI6IlRsNVpCM0JwcXFZR1RZUHdCdk5MQ0ExbWdYbm5KZklCIn1dLCJhY3Rpb25zIjpbIkFkbWluIiwiUmVhZCIsIldyaXRlIl19LHsibmFtZSI6ImFudlJlYWRPbmx5IiwiY3JlZGVudGlhbHMiOlt7ImFjY2Vzc0tleSI6IjdidFpmTGRZWllHSXZna3IiLCJzZWNyZXRLZXkiOiJuWG5IQ1c3Y0tpc1dMMTd2WWNnYzg0dGN4ZkFJQnBsZyJ9XSwiYWN0aW9ucyI6WyJSZWFkIl19XX0=",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "pre-install",
        "helm.sh/resource-policy": "keep",
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Secret","metadata":{"annotations":{"helm.sh/hook":"pre-install","helm.sh/resource-policy":"keep"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"seaweedfs-s3-secret","namespace":"seaweedfs"},"stringData":{"admin_access_key_id":"AYT5kHfYO0CpN8k6","admin_secret_access_key":"Tl5ZB3BpqqYGTYPwBvNLCA1mgXnnJfIB","read_access_key_id":"7btZfLdYZYGIvgkr","read_secret_access_key":"nXnHCW7cKisWL17vYcgc84tcxfAIBplg","seaweedfs_s3_config":"{\\"identities\\":[{\\"name\\":\\"anvAdmin\\",\\"credentials\\":[{\\"accessKey\\":\\"AYT5kHfYO0CpN8k6\\",\\"secretKey\\":\\"Tl5ZB3BpqqYGTYPwBvNLCA1mgXnnJfIB\\"}],\\"actions\\":[\\"Admin\\",\\"Read\\",\\"Write\\"]},{\\"name\\":\\"anvReadOnly\\",\\"credentials\\":[{\\"accessKey\\":\\"7btZfLdYZYGIvgkr\\",\\"secretKey\\":\\"nXnHCW7cKisWL17vYcgc84tcxfAIBplg\\"}],\\"actions\\":[\\"Read\\"]}]}"},"type":"Opaque"}
",
      },
      "name": "seaweedfs-s3-secret",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/1-manifest/v1-secret-seaweedfs-seaweedfs-s3-secret.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
    "stringData": {
      "admin_access_key_id": "AYT5kHfYO0CpN8k6",
      "admin_secret_access_key": "Tl5ZB3BpqqYGTYPwBvNLCA1mgXnnJfIB",
      "read_access_key_id": "7btZfLdYZYGIvgkr",
      "read_secret_access_key": "nXnHCW7cKisWL17vYcgc84tcxfAIBplg",
      "seaweedfs_s3_config": "{"identities":[{"name":"anvAdmin","credentials":[{"accessKey":"AYT5kHfYO0CpN8k6","secretKey":"Tl5ZB3BpqqYGTYPwBvNLCA1mgXnnJfIB"}],"actions":["Admin","Read","Write"]},{"name":"anvReadOnly","credentials":[{"accessKey":"7btZfLdYZYGIvgkr","secretKey":"nXnHCW7cKisWL17vYcgc84tcxfAIBplg"}],"actions":["Read"]}]}",
    },
    "type": "Opaque",
  },
  {
    "apiVersion": "v1",
    "data": {
      "APP_ENVIRONMENT": "bG9jYWw=",
      "APP_EXTERNAL_BASE_URL": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
      "APP_HOST": "MC4wLjAuMA==",
      "APP_PORT": "ODAwMA==",
      "TIKV_HOST": "dGlrdi1wZC5hcHBsaWNhdGlvbnM=",
      "TIKV_NAME": "dGlrdg==",
      "TIKV_PORT": "MjM3OQ==",
      "TIKV_SERVICE_NAME": "dGlrdg==",
      "TIKV_STORAGE_CLASS": "bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"APP_ENVIRONMENT":"bG9jYWw=","APP_EXTERNAL_BASE_URL":"aHR0cDovL2xvY2FsaG9zdDo4MDgw","APP_HOST":"MC4wLjAuMA==","APP_PORT":"ODAwMA==","TIKV_HOST":"dGlrdi1wZC5hcHBsaWNhdGlvbnM=","TIKV_NAME":"dGlrdg==","TIKV_PORT":"MjM3OQ==","TIKV_SERVICE_NAME":"dGlrdg==","TIKV_STORAGE_CLASS":"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu"},"kind":"Secret","metadata":{"annotations":{"sealedsecrets.bitnami.com/managed":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"surrealdb","namespace":"applications"}}
",
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/surrealdb/1-manifest/v1-secret-applications-surrealdb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/surrealdb",
  },
  {
    "apiVersion": "v1",
    "data": {
      "APP_ENVIRONMENT": "bG9jYWw=",
      "APP_EXTERNAL_BASE_URL": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
      "APP_HOST": "MC4wLjAuMA==",
      "APP_PORT": "ODAwMA==",
      "OAUTH_GITHUB_CLIENT_ID": "dGVzdA==",
      "OAUTH_GITHUB_CLIENT_SECRET": "dGVzdA==",
      "OAUTH_GOOGLE_CLIENT_ID": "dGVzdA==",
      "OAUTH_GOOGLE_CLIENT_SECRET": "dGVzdA==",
      "REDIS_HOST": "cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==",
      "REDIS_PASSWORD": "dGVzdA==",
      "REDIS_PORT": "NjM3OQ==",
      "REDIS_SERVICE_NAME": "cmVkaXM=",
      "REDIS_SERVICE_NAME_MASTER": "cmVkaXMtbWFzdGVy",
      "REDIS_USERNAME": "dGVzdA==",
      "SURREALDB_HOST": "c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==",
      "SURREALDB_NAME": "c3VycmVhbGRi",
      "SURREALDB_PORT": "ODAwMA==",
      "SURREALDB_ROOT_PASSWORD": "dGVzdA==",
      "SURREALDB_ROOT_USERNAME": "dGVzdA==",
      "SURREALDB_SERVICE_NAME": "c3VycmVhbGRi",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"APP_ENVIRONMENT":"bG9jYWw=","APP_EXTERNAL_BASE_URL":"aHR0cDovL2xvY2FsaG9zdDo4MDgw","APP_HOST":"MC4wLjAuMA==","APP_PORT":"ODAwMA==","OAUTH_GITHUB_CLIENT_ID":"dGVzdA==","OAUTH_GITHUB_CLIENT_SECRET":"dGVzdA==","OAUTH_GOOGLE_CLIENT_ID":"dGVzdA==","OAUTH_GOOGLE_CLIENT_SECRET":"dGVzdA==","REDIS_HOST":"cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==","REDIS_PASSWORD":"dGVzdA==","REDIS_PORT":"NjM3OQ==","REDIS_SERVICE_NAME":"cmVkaXM=","REDIS_SERVICE_NAME_MASTER":"cmVkaXMtbWFzdGVy","REDIS_USERNAME":"dGVzdA==","SURREALDB_HOST":"c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==","SURREALDB_NAME":"c3VycmVhbGRi","SURREALDB_PORT":"ODAwMA==","SURREALDB_ROOT_PASSWORD":"dGVzdA==","SURREALDB_ROOT_USERNAME":"dGVzdA==","SURREALDB_SERVICE_NAME":"c3VycmVhbGRi"},"kind":"Secret","metadata":{"annotations":{"sealedsecrets.bitnami.com/managed":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"graphql-surrealdb","namespace":"applications"}}
",
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-secret-applications-graphql-surrealdb.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "v1",
    "data": {
      "redis-password": "dGVzdA==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"redis-password":"dGVzdA=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis","namespace":"applications"},"type":"Opaque"}
",
      },
      "name": "redis",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-secret-applications-redis.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "type": "Opaque",
  },
  {
    "apiVersion": "v1",
    "data": {
      "MEILI_MASTER_KEY": "UG5vbU1DU3RkaGxuN1lIWDRidFM=",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"MEILI_MASTER_KEY":"UG5vbU1DU3RkaGxuN1lIWDRidFM="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/component":"search-engine","app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"meilisearch","app.kubernetes.io/part-of":"meilisearch","app.kubernetes.io/version":"v0.29.0","helm.sh/chart":"meilisearch-0.1.41"},"name":"meilisearch-master-key","namespace":"applications"}}
",
      },
      "name": "meilisearch-master-key",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/1-manifest/v1-secret-applications-meilisearch-master-key.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
  },
  {
    "apiVersion": "v1",
    "data": {
      "APP_ENVIRONMENT": "bG9jYWw=",
      "APP_EXTERNAL_BASE_URL": "aHR0cDovL2xvY2FsaG9zdDo4MDgw",
      "APP_HOST": "MC4wLjAuMA==",
      "APP_PORT": "MzAwMA==",
    },
    "kind": "Secret",
    "metadata": {
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"APP_ENVIRONMENT":"bG9jYWw=","APP_EXTERNAL_BASE_URL":"aHR0cDovL2xvY2FsaG9zdDo4MDgw","APP_HOST":"MC4wLjAuMA==","APP_PORT":"MzAwMA=="},"kind":"Secret","metadata":{"annotations":{"sealedsecrets.bitnami.com/managed":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"react-web","namespace":"applications"}}
",
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web/1-manifest/v1-secret-applications-react-web.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web",
  },
]
`;

exports[`KubeObject Can update sealed secrets after initial 2`] = `
[
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-applications-secret",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-parents/sealed-secrets/sealed-secret-argocd-applications-secret-argocd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-parents",
    "spec": {
      "encryptedData": {
        "ADMIN_PASSWORD": "inital-secrets",
        "password": "inital-secrets",
        "type": "inital-secrets",
        "url": "inital-secrets",
        "username": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"ADMIN_PASSWORD":"ZXhhbXBsZQ==","password":"ZXhhbXBsZQ==","type":"Z2l0","url":"aHR0cHM6Ly9naXRodWIuY29tL095ZWxvd28vbW9kZXJuLWRpc3RyaWJ1dGVkLWFwcC10ZW1wbGF0ZQ==","username":"ZXhhbXBsZQ=="},"kind":"Secret","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","argocd.argoproj.io/secret-type":"repository"},"name":"argocd-applications-secret","namespace":"argocd"}}
",
          },
          "name": "argocd-applications-secret",
          "namespace": "argocd",
        },
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-redis",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/sealed-secrets/sealed-secret-argocd-redis-argocd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {
      "encryptedData": {
        "redis-password": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"redis-password":"aERVUjNMdlc4ZQ=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis","namespace":"argocd"},"type":"Opaque"}
",
          },
          "name": "argocd-redis",
          "namespace": "argocd",
        },
        "type": "Opaque",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-secret",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/sealed-secrets/sealed-secret-argocd-secret-argocd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {
      "encryptedData": {
        "admin.password": "inital-secrets",
        "admin.passwordMtime": "inital-secrets",
        "clearPassword": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"admin.password":"JDJhJDEwJFJ3TGtBcENPNkdKSDFRVXJUTGNlVGVFODkwWjlDeU5jS2p4RkNQSmxWOEVwNDBBejgwNG91","admin.passwordMtime":"MjAyMi0xMC0xMlQwNjo1NjoxMlo=","clearPassword":"ZXhhbXBsZQ=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","app.kubernetes.io/part-of":"argocd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-secret","namespace":"argocd"},"type":"Opaque"}
",
          },
          "name": "argocd-secret",
          "namespace": "argocd",
        },
        "type": "Opaque",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-sp-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-sp-validator-k8s-tls-linkerd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {
      "encryptedData": {
        "tls.crt": "inital-secrets",
        "tls.key": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUxqcXlHVE9oMHZXMHNqNWZ4bCtEckF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl4TURFeU1EWTFOakV5V2hjTk1qTXhNREV5TURZMU5qRXlXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQU5nYnQzeUwzVWlneUFzb0xFVTlINjNZWFZKOEJ3UnNpYlk3SjlBVVpoaXI0WlMwanlHTwpFWDJjb1h5anZ0RzVZWUZEUkVKOEdKWm9mUitOV0hNc2ROSUVuU0dReGdnSUNQSjlBY1pqSGdWU0xxbTJUNzFjCkFVU0tUVWpQV3dNb3loK1c1UGVURS9YMGVtM1ozOFhtbTUxdEc1dmkyZndONGQ4V0gxc1lSV0w3cU9NRktLZUEKVElyV2k4b05GOVlwUjIrS0pwQndlditnU1NBem9BWmltSTY2b0ZpQTJkV0lta1gwNkpndEp3ZHpqa01oWXhYOQpIeU5MOEUwWHF2NDl5dWZUZUppOUxYSkdScC9idHpPTTFPRThxYWZJSFNFcHVJdEh1cDlpUms5aHFjSk5LWkZxCm1VajJzclBnd0hYODBjdnhhblRRa3lWQW4vam9DTDlYT2pjQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFDcnN5QTVISU9lSWFjakdJM1N1MHFGVjNLM0JWQ21YMC83VEpadFExdm0KVmZieXYvbEJrcmlzUmZWd0xkTjduRThidGllQkZvcWhrWGFielQrR3hjZlJNTEs5Wmt0K1pJb294MVZBK0tFZgpreGdRenpJSWpTSE85SVIvSzRGdDVKOS9KNzhDZnBQTlE2U2pDYkFVNVRkblVER1BJR3BZc2N6Z3AyQVZKcGtrCi9KY3orZE8yMUV6NnY0emxkSVk4ejFKMWoyZ1RBam5qZHp6cHdQaVkyNXRsL2hPSVVnT21NdE00clc3SGNQVWQKRFBhNUt4d0xqQ0NocGk3MlRLcEZiYWVFUnltQ1MvRkg4VGZFejBNQ04vcUZqWFp3dEoyUHVOSlpud1FvZ1hZaAorakgrcWVnek1iODMyVjRQSmkyZjRIakp6eWVCNFdwek5QeVdrN0xOOFN1QQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMkJ1M2ZJdmRTS0RJQ3lnc1JUMGZyZGhkVW53SEJHeUp0anNuMEJSbUdLdmhsTFNQCklZNFJmWnloZktPKzBibGhnVU5FUW53WWxtaDlINDFZY3l4MDBnU2RJWkRHQ0FnSThuMEJ4bU1lQlZJdXFiWlAKdlZ3QlJJcE5TTTliQXlqS0g1Yms5NU1UOWZSNmJkbmZ4ZWFiblcwYm0rTFovQTNoM3hZZld4aEZZdnVvNHdVbwpwNEJNaXRhTHlnMFgxaWxIYjRvbWtIQjYvNkJKSURPZ0JtS1lqcnFnV0lEWjFZaWFSZlRvbUMwbkIzT09ReUZqCkZmMGZJMHZ3VFJlcS9qM0s1OU40bUwwdGNrWkduOXUzTTR6VTRUeXBwOGdkSVNtNGkwZTZuMkpHVDJHcHdrMHAKa1dxWlNQYXlzK0RBZGZ6UnkvRnFkTkNUSlVDZitPZ0l2MWM2TndJREFRQUJBb0lCQUIybXIrWkd5blhNbWFYdQpQU1RDM2pYY0dmSFhVcDhveFR4Ym9YckxVYmJRM29Lb3czcTNJMjg0cm0rTGlBTCtqSUpQMkczRzJSakovV0QyCjQ4dnByWjJqUkd2MmtUVkk1UEZnZFgzaTI1dWZTd2UrRy9LL1RPMDZqS0FRMDB2N3JML28xRUdqekhsU3NmbWcKaXpOOEVKM28rb0RJLzErMkIrZTBBVmxlV3liWllDWGx5bFcwb0VqUnE1SUcrZndWaitnbmxiUEJXSjl5N3ZCWApxY1dneFM5WGpRN3MvTTB4NGtWTk1rNWV2ZGlVZWRtdlEvT2d1dXlwUENYMFdLd3hXOHkwaGVYUTQ4Z3htaU1sCnBRMGhVeUhrNmwyV2NYTHhaUXBPTUdHSEpab1dadmFtM2d1SmdkdnZyNE9OMkhmTUFkcmxoZWNaNEswbHM3ZEwKYUJDRjJRRUNnWUVBNkRGV1hrL1VpVjc4NDQwaVZnZWlnN0dkN0FIOVk2TkVrZVQ5bmxNMFdIemI0SnZ4NTRQcwpWcVpsSXV6SThVek42eFFJUjROZUh4NXF2VDhEdEhqbkZWczZEandtQlI0WVhFYXBRd0MyeEZ2QitrN1lXOFEvCi9weitvRmF1RlVCMEtEU0VGRlgxN3FUYml1ZjhEZENhaWE1dzdBN0RCbFVIWjBLajlHUWhLaHNDZ1lFQTdrUXcKbXhqVzNhbjQ5bnRBRFZYVDNHZWQ4T1ZBb2RDa01FNG5tUUlqNjh2UVJtS0pKWUNRNURkRGZBQ0xDVlhwY0t5UAptL0lsYXlPOGdlSGcrL2pCRW9lVVZLaDM2TURrOTJ4VndERFZKV0lzNWZBbEUvL29JZWt1MVlKWEVEbmNLcUpZCmI4KzlLdkVMVjRpTldoMkRRblBYQk44NStCMTZ5cEFIRHdHSXNoVUNnWUVBbjB3Sjl4Wkp1QjBrM25DYlYrNVEKL296Q3pZSG45NDJ4bzI0NDJZQTM3MlZwN0VUUXg0Ym9nK0lRak05cVpMSE9yRExJSTFmcklPcGJUSTZJMmk0QQpTOVNVbGVPS0tnU2xyZGtFa3VWUWZwSjlHRjh6YkhITmZiN3pxY2tPRWFKd2pvekkrTEtvMFJybFMvMHdIY0k1CjQ2OTc1VmVUVVNyUXMzVXl5cDVQYW5VQ2dZQUErVzVwYy9TTSs0RDFJUlBsK2cvZnV0eStlM0dFTitJMEFGM1IKRmwwblBiSWdWNDdRQkhLVFBGYWVUekpDVzRPVTNsL0g5M21Ic3FHMnRrSEJSZ2NrR0VIWEJzbFd2bE14WDlRSgo4U2t0K2ZUTkMrcGE1cFVBYm4rdWg5WHJUeEZEYTE2Sk5vUkRoTERUTHMvRktwRzYxOVp0UXF4dUExRFpPeldNCkxpbHM4UUtCZ1FDMHBMZ2l0eUc1NjdleHZkbFc3RithcWNldGU2RzFsREdjZEE5Q29PVDNYdTBUa1MrUzJpcWwKaWJxRFdaV0c5Q3BFN2VFK2l3cEdWMEx2MzVOS0JwUCtGUGF6Z1lhbFNLblBmdzRNaWUzZ0R4T0RXM2xCcTNxcQo5bEliMmNZU3E0ZDIvVUVPV3U1MXIxdG52QXZKUUwvN3ZJKysxdllyTnhwZ0lWU2dMMUtRR1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-sp-validator-k8s-tls","namespace":"linkerd"},"type":"kubernetes.io/tls"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
          },
          "name": "linkerd-sp-validator-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-policy-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-policy-validator-k8s-tls-linkerd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {
      "encryptedData": {
        "tls.crt": "inital-secrets",
        "tls.key": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRYnhKWXU4Z0xHV1l2TW8xRFloRFZsakFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpJeE1ERXlNRFkxTmpFeVdoY05Nak14TURFeU1EWTFOakV5V2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM1MXRDUHpXZHVKVHBSWFBiZklpSlFqZlQ2Z1FRMVJ4di9uV1J0YThuagpFbkNGTFl1YWtURTJLZEFlUndEenBRTldBdVBiTGlvSVA5RytRRHVpakRndjlKRlJNMVhhSDQwbytqenNFZ2FICm8vbi9LeStKb0hWbGtEcndoWDNRazlIOEIyNU1BT1dBNXNVaTdncEsxR2JzSmZOMzd5LzBlbENCNjY2U01WSncKMXlmSlVWbGxKVFg5RDVPR3VlaDdOcjVRVkVFbm9hTG5tOHlHMjZwQ3p5VkFmMnh3WGFUUTlWY3Q5RERRUEpXeQoycjl5ejV1VXk5WWV6eW9UNU1aOFVXNEZNeWo2cWNlSEtTc3gvM1BDZjc4UXpwR0xNRjJZM3grV0ZJeWpVZ2FkCmR2YmFxLzNidG5DNDdCcWx2RThPc3hvTG4vbU5ldnNSNjlzZWpRNCttUk1YQWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFWjdSay9haUp6aGJLem5Gb3pudEhmK2xmaVcKbU9VSmorV0QxY2JqMlhqdHZBcksvUjNYL1lYTTVCMWdNRDFJQjMrL2dsb1BEa1NqM0MrVWlDazh4WGh6b2VpdwpiSHhNdEdWVXVpQVpHSTdpc2NxOFZJaFQ3QjFWTFB4eUtSYzYvUytnMTlkRURWdDJRMGFvS012d2RkRDE4V3pICkdhWDFJUmNZUVgwYW55RXZpRzBhaEZRc1JvRytkVmZESzVDRVdkUzhXT3lET1ErNFhWOWR5d1h4ckpISDdXQlEKV09SSzVKV2pyUWg1bEdXaUh1NHQvcEFsalJKZWJ5NDU0T3l2dENWcTVkSElIOVl1QmRFc0d5cmROL0Y0VTBGMgpIM0NMZ3dTZlh2NXBUazdaUHZtSXdySHd0WHkxbE1ucHh6WVF3UmI5cTQweTZOUlNvZENjbnVXaVNkUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdWRiUWo4MW5iaVU2VVZ6MjN5SWlVSTMwK29FRU5VY2IvNTFrYld2SjR4SndoUzJMCm1wRXhOaW5RSGtjQTg2VURWZ0xqMnk0cUNEL1J2a0E3b293NEwvU1JVVE5WMmgrTktQbzg3QklHaDZQNS95c3YKaWFCMVpaQTY4SVY5MEpQUi9BZHVUQURsZ09iRkl1NEtTdFJtN0NYemQrOHY5SHBRZ2V1dWtqRlNjTmNueVZGWgpaU1UxL1ErVGhybm9lemErVUZSQko2R2k1NXZNaHR1cVFzOGxRSDlzY0YyazBQVlhMZlF3MER5VnN0cS9jcytiCmxNdldIczhxRStUR2ZGRnVCVE1vK3FuSGh5a3JNZjl6d24rL0VNNlJpekJkbU44ZmxoU01vMUlHblhiMjJxdjkKMjdad3VPd2FwYnhQRHJNYUM1LzVqWHI3RWV2YkhvME9QcGtURndJREFRQUJBb0lCQURMQ3YxTVlLdkZHRCtqYgplTDg0QnFGME5QOGJzSGVSQmMvTFFQdzJYZjI5TXFqZDZPeitUYS9hdWZNYk4rSlZKMVVlRXZqeVloN0F0OXk4CmxNMXdlWVIzekIyZTVRdGdaT0ZWZ01DR3ArdnkyVDFlb1d4NVBMZlNMcGMyRDBpaXA4K3NnKzhVcTV1SzdUdisKUXlkdlh2R1A2REhSVG9yN3dmUEsyWE1yTDdhTVJ5Yy9KSi82RXBnYytzaUNxakpRSkRMR09xM01MWmMybXdIVwpiZzF2NHo3VlBTWjBNRk1ka1BiNEYxV0d2TEJBQXVZVWtEa21mTTRPcVNDUm00TlVrSURNVHJRVllqcmRySmp6CjExSk1jMzhkTUdaNFF5UDc5VVNqajFBM3VSRFYvTGVYQjFvcld2SGYrc1hkUmVSdTd5cmRwemhwT25xOWVxWmMKMmQ4bWlXRUNnWUVBNEx4N1pMWVRqRzFVaWdiTjBWRkpva2M0RWVQaE5aT1dJdDNQUmRJM1dXUzJaZGtBbCsxZQovK1IxTHhqNmtQeWl6UVNwWi93Sm1ZVmR1VmEvTExFWjE3elJBa2xUUmtXbk5qdDJBRVNDT1lJdllFMDcwcmRyCkcxdnZMcmUySEJTNTlFczlrY2VwNE9PZmlTd3c2MnFFRUwwL1pxVTBWVUxzK3FXdWNsYkNqMmNDZ1lFQTA3RVgKWmdDV25BUVBYdkMvN3Y0d2RaYkJFVGZYVVRVRDErY3Q4WnNObU9GQmJORjkzOEJIcTdLUVdXMjR4UkswNUVHOQpCMCtkSjdvRGpNQkJBNjJyb0hJTGFMNHR5U3ZpMXJVczlxUzhFY3c0WUVEOTZrYyswL1FBcStmOWkwK1hYTGdUCisvaU5lNDBmcDN4dXY0QUU4TFlsbjlsRWx3V2NleklTdENqdUFORUNnWUVBZ0gyREZ6dTZ4WWtrMHAyOVF6WDAKb2FHU2Z6Z0k1VGJ5bWhDemx6bnZoMTY3b2xPRnNWZDMvMXBCWGFJc2NJVGhGOUxZZ0tsclc2a1N3d3JEMXV1UwoyUFFOay84VWE1TWJYVGgxNlFWQ1oxcjFkMXZ4SGpMY1BCSStHRG5WRncwS25KQUFMYjg0YzJueEp0NXJRYzN1Cm9CdHppbDVlSTNsV1FLQkZzdjNEMDNVQ2dZQmtBNUFOZGd1eURFMEN5dld6UVU2OXo0ckp5cnNrdDhwb0QrWHAKOXhxV2R4NEUvbmpjNUtnMzIzWk5lZ1JJdjR6TkpxM2JMV2NQWk5mV2dPSjJqVysvcndIcTY2Y1FHM2JoZjltTgpjY2tWRTRvekY2R2ZOU2ZlMWJJWGhkU0pKQUpjSU8vNEpMY2JmMUpNUEFMSzRQMzBoK29BdXBLb1UxTlo5UTlYCkpOdEZjUUtCZ0RCVjJKa1BNajdhSWMvL05pdGhmVEcrVDk4YktBUDhmQnRZZ1FEVmxuMVlmNS9XRmZ3SGVXRVcKUXROdXc5QmdtanhIUDRReFRxR0krVVNqTjJ1TzVyK0hNdUgrNlRydThSbVRRMkJad1ZEcnhDQXo5Uks1OTFuUgo0dWZpeFlQZGs5Ly9PU0lhdUgzYlp2RGhHbzcySFNCWjNVRm9KakxTamVJcUx4N25CdGFiCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-policy-validator-k8s-tls","namespace":"linkerd"},"type":"kubernetes.io/tls"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
          },
          "name": "linkerd-policy-validator-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-proxy-injector-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-proxy-injector-k8s-tls-linkerd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {
      "encryptedData": {
        "tls.crt": "inital-secrets",
        "tls.key": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVakNDQWpxZ0F3SUJBZ0lRVVc0ZUcybUJzV2ErS2tFSFFyajhCREFOQmdrcWhraUc5dzBCQVFzRkFEQXQKTVNzd0tRWURWUVFERXlKc2FXNXJaWEprTFhCeWIzaDVMV2x1YW1WamRHOXlMbXhwYm10bGNtUXVjM1pqTUI0WApEVEl5TVRBeE1qQTJOVFl4TWxvWERUSXpNVEF4TWpBMk5UWXhNbG93TFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5ClpDMXdjbTk0ZVMxcGJtcGxZM1J2Y2k1c2FXNXJaWEprTG5OMll6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFNbEN5UUhUSVp1MWRUbnhZU1FpN3QwTWN2OTkrVEUydzFsMXBaUXBTV001U3FvaApaaS8xc0FpYTkrZ213cEc2c3BXNjFQeGwybE1TN0lRSHNqVnR2T2xKc2t5MXU1OU85bXdjLzdvWEYwVUtLRmFXClJNcWpwNmM1S3krRitkRlJlNUpnaW9kZ0F3QnB2dko1QzI1SldaZGVuMG05blhIZm5tYVlvYXlDVDdNcnVMWW4KVGt6Vm8rZWxHTWI0dVNMeGpuNnBUNjQwSUk4cUxqNHphalViOEZtOXR1TVBnT1hmd1NuUXo0a2JqOVI5QkxnTQpFZDNBaG5xaldnTElsdVA4QjMzUVFRUnBsN1VLM0ZRRk0zK3gzMHJrL0hMc21zK0tXa2pFRTczSHVTWHdLQWlLCmNQalRnUzNsK1lvUmd6N2VZVVFrUnJmUFJKWXdCUTUzNTJ6ZER4OENBd0VBQWFOdU1Hd3dEZ1lEVlIwUEFRSC8KQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RQpBakFBTUMwR0ExVWRFUVFtTUNTQ0lteHBibXRsY21RdGNISnZlSGt0YVc1cVpXTjBiM0l1YkdsdWEyVnlaQzV6CmRtTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSTJoMTNrcUVWR0kwSmw0bEIyVjEvaEZ0WGxrVmtOSVEzdDEKWjV5ajV0U0RyTFhoNCtLbnVpd0NNamg4VldaR2NESHp5ZjZYRUJBbFV5dzdUUWZ0OTY0UjYwRkFLWDdwUDhhRApYVUJCMTdZejB6T2VuM2tMQmVIc0ZoTGprOFA3NURmMEFmQUJTc2FkU2NMaWtMaWNOTWZCM1NoeXFjWHFIcGNUClVsNHJYRXl6ZWF1YTVTMFVEV2VMNHRkTkhWVTdRWDJ0Znp0d1lhcVpVV3hMQ2hiQlhEdW8yRTluWjVRYTlkT3cKMWhhQzFYSUhXcXVnTmtXRHJhYkJXTmVqZFY0Q3hQZ1lKTTRrWC8vRXFFRXAxTzFZNGt6bDBlcWV3anAwT1dGTAo3cDFEcVNZL05NeUVZZUhqbFpGQndnd2hYVzkxUWpiYVV0VUtPUDJUcFd2YzVRNnlEeGc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeVVMSkFkTWhtN1YxT2ZGaEpDTHUzUXh5LzMzNU1UYkRXWFdsbENsSll6bEtxaUZtCkwvV3dDSnIzNkNiQ2ticXlsYnJVL0dYYVV4THNoQWV5TlcyODZVbXlUTFc3bjA3MmJCei91aGNYUlFvb1ZwWkUKeXFPbnB6a3JMNFg1MFZGN2ttQ0toMkFEQUdtKzhua0xia2xabDE2ZlNiMmRjZCtlWnBpaHJJSlBzeXU0dGlkTwpUTldqNTZVWXh2aTVJdkdPZnFsUHJqUWdqeW91UGpOcU5SdndXYjIyNHcrQTVkL0JLZERQaVJ1UDFIMEV1QXdSCjNjQ0dlcU5hQXNpVzQvd0hmZEJCQkdtWHRRcmNWQVV6ZjdIZlN1VDhjdXlhejRwYVNNUVR2Y2U1SmZBb0NJcHcKK05PQkxlWDVpaEdEUHQ1aFJDUkd0ODlFbGpBRkRuZm5iTjBQSHdJREFRQUJBb0lCQVFDaVJCVmFRa2E3aXU3TAoyOEJ0YVRqYXdobkp3bUJ5Zkd1K0tldG83R3k5OGtndnFTUUJrUDN2d2pvVVU0UFdDUWZKVHN3Ly8wS3FiZnlCCmFzOFU0cmhJQXVJZGxQeURzaDllQlhkdEt3Ylk1QnFuelJvRG96VWR6eXJ4Y3Z4NjlrNUNNMUlkV1p5eDdaQkYKWUxDRnA5L3kraGhGVlBxbkFCdHZMcXBUTXZGZFMzaTFNaEtOQ3dLbW11ekxGTHBFUUhydDhTNW5kZ21SdzVYbgpWM1NVdDN0dVduVlVLanhsdGx4VGk1bDdqUTg2L3BSV2xGMDhVang3eFdpZCtnTEpjT2ZnZXF1c3A4OEJVZ014CnRHVXpnRjZQZnVnMDVIQmh0SVR1VnN1TGs2akhMZWxPd0t1UjZkam5pTkdjM0hJY3lFN204UERCUWUxak5WY2EKR1Y4MDJtNVpBb0dCQVBZb29YQWZ6Sld0OGtwQ01URjJnMjkzL1ExaFR2N25keTV0YkxndklwczJPSXVlZ1hZWApYLzdnaXVselhwVVR4Q1dFUG5ieSszRHpHZktQa3hKaUpWL2pIOVJ5b2t6Zi9hMEV2YjVOWFlVOE1CYkgydG9sCmRPTXo1aXhVUzg5Y2hmVmllMGdrOXR1VjB4MVNJMlV4cktFdmpZT2dyaGk0MDlZZ20xc1pMZ3gxQW9HQkFORk8Kb3hreUxZM0JQeGdKQmdEYityTTZ6YlRmMjdqMlk3SFNsT0ZsWCt3NUhVNHlVTjRoeXpwVU5Ca3o2aHhoakx1eAplZ01VU0poZHVJc01iUmw1NWpEVzFnVVRhVXNIdm1GQjEyTEpWVENOUWhhK1JybTRqNWVzZzRJYzZnV053RmFCCjZCa3BRdE9wa3ljUzVuWnFxMy9lb3dWcWlVTFM5RjE3VWg5emVRckRBb0dBVzUzenVBK2R6WGZZWGRzVkJCdmYKLzNUaE1rR3RiU0lwTVpaNGlIVENwSklocVpWdENjN1pZN3VlK0JTQWQydkw3VXF6RlFLS294ZFg2UGVXL1ppWgo0SDVnTW1vWURoU3dEZDFkNFo1WjJHVDJZUVF4YUUvWW1WZVBxNkFVTnpGd2lrd0ZKbXpibEE3SGJIcE53alFpCjFEc21xSDc5VFNZOWNjemhCWjd4aktFQ2dZRUFvR29ZYmxNYXZxNEE0VGJwTnZkaHFNUEVySDkxTXNrRGwySEIKWVE0RStsSzd0eGF4QzgzeXAvMnBBRGZka1dyaUpXZmNEMGdZYTA1SkJhaThaTzRjRWdwVmRRWnZpR1dpNzM4Ngp5Q2R0OXd3TVBzb09Bb0VFN0VYM2RGMGNycXo1WUZPbndzRHd5ckFJYThYOGczMDFlNGJ5Z2xBb2F1S3JEb3BaClltbHB0MmtDZ1lCbmc4NWdINWV3WFd5Z3RKVktxdEJXazhlNWMwb2tPWk5wNDA0b3J5ek93RmdxNzFEWFdVVXcKUERxcWhObVZRK0QwN2dNMFlBQTJMUGJpYlo2L21WVE5MYjFMYTQrNm80Q3JCRjdsU2o5KzJyTE93QU5GSXZwLwpnVitRcGtsZVMxTXVIVXc2TmcwZzF2OU9sOGJlbFY0SDVMeHJPQUtnMTNIRWJWRGFoZmxsSmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-proxy-injector-k8s-tls","namespace":"linkerd"},"type":"kubernetes.io/tls"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
          },
          "name": "linkerd-proxy-injector-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-viz-ingress-auth",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-linkerd-viz-ingress-auth-linkerd-viz.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "encryptedData": {
        "auth": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"auth":"YWRtaW46JDJiJDEwJHExSDZCbmN5NXkxQ2MvQ0hncS9UNS5LRnZyZFlwWE92bFJycVpxZHY5OUM4enAxVFI0WTF5"},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"linkerd-viz-ingress-auth","namespace":"linkerd-viz"}}
",
          },
          "name": "linkerd-viz-ingress-auth",
          "namespace": "linkerd-viz",
        },
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "tap-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-tap-k8s-tls-linkerd-viz.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "encryptedData": {
        "tls.crt": "inital-secrets",
        "tls.key": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQU9CZ01Yay9yZ1pxNFZ3a21NZ2krZ1l3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpFd01USXdOalUyTVRKYQpGdzB5TXpFd01USXdOalUyTVRKYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUMrdE1DYzBuaVd1eFhzYzRHU0tzZkIKNkt5ZkhCSVZrSG1Fc1c4WGlIWlVqa213NzgyVUcySWpXK2krNm0rcDBHQkNuc1JHU2x0ajBmTHlHekJKV2U0Mgord09zdi95NDF3c1hnNEJjY0wyWnRiVS9DNzRWNDZXUTgwcnFVbVRJVHg0enBxTWJ1YXVvMkRXdkNwVWV4L1k1Cm43WjBkeTY5QXNZMW9nK3dJUGRvbzNoRElIUlZOc0pjN0tjdFJ3QWk3MFRuUnNONWxoNGtkdjA0MWIxMHpuZDcKSFBpTm5IVmFOZFJwRGVZcXE0cytKTDFiWEJVeWNDVDV0NFVnK29mYTNraS9TNVFrQUxFUzNiMURhVE5hUnh3SgphWFBUS1JpVWFUQ1c4Mmxwa1FPTWIwSy8wT0toZk9YQkFVZ2Ztb2orWTBuK3hZRFFNc2tTZUNWTWpPUFVhNjNCCkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQmdTZ3JLVFJ1QXFCN1hxazBxQk5KeWx2eWo1SjNDCjJvbDA2K1FRNEdNa1I2QTJlZklaMDJTbzhUbE5sNVhMNTFkUGt3VFIvUWNBd3A5UmdaWHFvZFQvcGdZbnhnMVcKRnJvb1VsdVY2anNyYlJlZ0RaOGVwTnl6Wm9RM3pwU013K3UwZldRSmlsVzZxbEVTZ1hWeEF1N3lIZnZHRHpISQpMT3hrY3p2YzQvaytkNXNpc2IxdnFWWEdsUjFDOFNGYU85V2o0Y2VkZEUzaFBXN2o2M3BMV0NxZCtyWkoyVnRnCnorL0ZzMFVnbUlCVnh1YmhmWjd5UGhqYWJTcFd6U3hCRCtQSzgvb25FM3N6RWo4dktMQmljbXFaTEhHTENQUXUKckdZM1g5ajZ4UW1jdE0zQ2hvck5FWmFXV2I1WDBrNnVrajRxSlJRc21QV0xCRSszSlZMUkIycG8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdnJUQW5OSjRscnNWN0hPQmtpckh3ZWlzbnh3U0ZaQjVoTEZ2RjRoMlZJNUpzTy9OCmxCdGlJMXZvdnVwdnFkQmdRcDdFUmtwYlk5SHk4aHN3U1ZudU52c0RyTC84dU5jTEY0T0FYSEM5bWJXMVB3dSsKRmVPbGtQTks2bEpreUU4ZU02YWpHN21ycU5nMXJ3cVZIc2YyT1orMmRIY3V2UUxHTmFJUHNDRDNhS040UXlCMApWVGJDWE95bkxVY0FJdTlFNTBiRGVaWWVKSGI5T05XOWRNNTNleHo0alp4MVdqWFVhUTNtS3F1TFBpUzlXMXdWCk1uQWsrYmVGSVBxSDJ0NUl2MHVVSkFDeEV0MjlRMmt6V2tjY0NXbHoweWtZbEdrd2x2TnBhWkVEakc5Q3Y5RGkKb1h6bHdRRklINXFJL21OSi9zV0EwRExKRW5nbFRJemoxR3V0d1FJREFRQUJBb0lCQUVFU04rN0t1aTdrWTFTdApEUGNzOWNBcWZreEVMYitCN3BUaVhqK3Zab0R2bENGMWtiWUpxZkRhdVkzN1BHSzdJVDFhSXlyQTBISTgveUt4Ck9FYXZFdU5idnlOQTF5RFM3NHYwYU9ZaDZlLzYybjlLcUcrYm43RFg4eVlGT3pKR0hNNE8rL1RINDlUWEFXcGEKdUFzcXU4OXB1YjMvdE1qMW0yQk5qZ0RSSHRwcTVoL0RsTWxOVkIyUEVlRGJrN1p1SWVkbENJNUhmZ0ZmVTJKUwpyY3FEaVM3MnB3N1duVkFKYmZsZ2RMMUVTNmpVa3RNaU0xa09RY2dWbm0yV3pLTGZjQUVWaWJaZ1E0ZkFwMlB6CktkMHIxL3h3cmlKNmFEYUtpRG91cVUyaWFjM29QRTZzU0M4QkU2dmZmYnZoTDV4c1hKOHloNU1EMHFjY2o1QXYKYy95MVFZRUNnWUVBMzc3d0NqditqZjdrT2xHR3c3eVZGRUluVE1kM290bHFzdk5oTERLeHFhNVBCYTE2NFQvTQpwTFBKUUZLUzBNRE14TTlacEVTUmlCcy9UcTNic2hONGQyWmRrN2NPa3dhVkIrczFWVXJYelN3WE1OWDE2M2UxCjMyYk8zemtsMzdMQzczakQ5WXhsd1ZRbUZHZXByai9PK2d0ZHdlMHM0TE91aFpxTVZIMnp6YmtDZ1lFQTJqS0YKdzY0dDlDNEJwNHFvMmtSOXJNcmVIbnhFWk9RWHFTZ0NxSmszYjNaOURwWGlHL0FGbkpHNmliVklhUU5JVUdFWApPYVRWL29vVTgrWnU5K3VxQTgzZFhyd3daVUVhV3BQMGJMNkdFNG1zdDVYRnhYTjltQ2hOV0tsbmRkQnlFMUdUCmJpSGY5SW54bVVyVXVKeHJPWllqQU1saThCa3hXNWdZWHFqNEpFa0NnWUVBcEVlMlNWMXBkdXE2dWhNWUJ1bVUKOEEzdWV4Sk54aFVxb1gvUFRqdGVkUDZWNk01S1ZjNlpQQ2tCVUNnUXdoTjloZGZVc3FiaHovUnBsQ1JWRmJmMApFSDdwb0VhYy9kaXNYZWNWL3F6NExCMytYUTRNQlRxZElBMkZRU0xkcXhTK3lrTjZaZlVTMVZNcXJucTZmRVUvCmZCb1NXZ3dCa201N2FuOWlIN3MzNUlrQ2dZRUFzU21zYW9HV1ZsaTBoekNTZ1FaemRFVVRySFVCbzFsL3pKenIKNjdEYnplakxDWGl4S2pYc21IL0trZDFiZWNoc2dyY1NnSDlTTVdZME5RUzR2UnZmNDA3WG12LzUyM3pNeFJhMApzMGJPM2pZK3dxRWMvNEVTVE9VTVNCemtJRWlyRnZ4NVZFYTA3SHpFYWM3VWdVQ2YzeFlFUGJOR1hlUldxeVFIClJYUzBaZUVDZ1lFQXdXUDU1VnplWmdlTjFtZ1hqWVNNbjBIR0FaZmljYzRQN20rREF4cHFPTjBOOFJsYUFWblQKN3BHbjA4Q3NCRytiS0JhZk1qb2hWSFhOa2JMUWZENFdsU3BwWG5UUjRzUVlOQkVaUHViaW1TRkppN2h1VkJQUgppcHJ5VFZGcW0wbDljQ3UwdTkrSjR3SVB0TTNjbE9tZ0tHakg5ellFak1zZ0NnbHBaOUZjNmRNPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"tap","linkerd.io/extension":"viz","namespace":"linkerd-viz"},"name":"tap-k8s-tls","namespace":"linkerd-viz"},"type":"kubernetes.io/tls"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
          },
          "name": "tap-k8s-tls",
          "namespace": "linkerd-viz",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "tap-injector-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-tap-injector-k8s-tls-linkerd-viz.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "encryptedData": {
        "tls.crt": "inital-secrets",
        "tls.key": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRVjBUQjdVdWxQSWsvUXJUT0xMVFE2ekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TVRBeApNakEyTlRZeE1sb1hEVEl6TVRBeE1qQTJOVFl4TWxvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU0vcU5OVnFxOW10THBQQlhsd3gxZllWM3lDdk9KYUs4MkwwNENnMnduVG9RNDk0djhvTDlFM3RrZHJSVjIyeAp5U3BOcGdoNlRWTldEVnNzZmdVWHFuUHhib0lWRTdmNmVBalZDTlp3S0RWMWxjalZGYjIybVI3WGxhMHllTTA4CmdhdTZzSUNsUkdzVXQzT1JQUDJzdEorWjZ5bWs5V3d0V0FyOTdZWUVzUFJaRFBhMFNpRGdUeHVRNHlnYXVpWXIKRng1bUM3aVg0NVRIVTRPRWlKOCtTcUdvcWwxa3BUZTdMTW9haWpxZzVwS2phNGhuMVpQbGQ4QjZUZHNLaTFvNQpmUFRuMGhwc1VONGhLMDBCZ0VIa1Mwdm5ZU3B2dGI0eXd6VlgyL0pSNm85RDh1MjFYQmR1TGc2WGRyOTBxYmZICi9Ebmo5UkYzM2FCcmJuS2pQVytxa2VrQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSDQxV2tINGYzU0NteEtqU3J5eUJPTkFyNUVRY2E3TG1uNll6aytid3hKRk1ZSlcxZUw4alNJMU8rS2MKblRYZ0dpSUozMlB5bm8vdVNoNTNIOWtjZUgxMG5FRWdITDFRQkMwN3BJS1RYdGF1NmdLMXFraU1GTTBqZW8raQpQVC9iZkxycFpkRDJpd3JueWlpVEhWS3VCeDR4QWVZWGRFbUJLb1A1UjAzSGlEZFoybVBveElRQVMxd3MzKzY5Cm4wTE5hc1V0ZGx5eFlWeFhyOVovNzZGZENrM2JSZzVmVnRFMnJnNnJhTW0yS3hweTRLMU1VOVFTTU9Pa2gzL2YKNWNINzA1dHRIZ3pOL3BKNW81N0xtbVoyeDhPR1BQM1ZmOHZCd1FTa2s4RmZxSXQzMEJhK3hDdmdCV3kxLzlEcApFUlZkZ3FoYlNUejJoTEFSTXFWd2xzTXVSVU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeitvMDFXcXIyYTB1azhGZVhESFY5aFhmSUs4NGxvcnpZdlRnS0RiQ2RPaERqM2kvCnlndjBUZTJSMnRGWGJiSEpLazJtQ0hwTlUxWU5XeXgrQlJlcWMvRnVnaFVUdC9wNENOVUkxbkFvTlhXVnlOVVYKdmJhWkh0ZVZyVEo0elR5QnE3cXdnS1ZFYXhTM2M1RTgvYXkwbjVuckthVDFiQzFZQ3YzdGhnU3c5RmtNOXJSSwpJT0JQRzVEaktCcTZKaXNYSG1ZTHVKZmpsTWRUZzRTSW56NUtvYWlxWFdTbE43c3N5aHFLT3FEbWtxTnJpR2ZWCmsrVjN3SHBOMndxTFdqbDg5T2ZTR214UTNpRXJUUUdBUWVSTFMrZGhLbSsxdmpMRE5WZmI4bEhxajBQeTdiVmMKRjI0dURwZDJ2M1NwdDhmOE9lUDFFWGZkb0d0dWNxTTliNnFSNlFJREFRQUJBb0lCQUFaejdHUGJSYTRoMDlvKwpIQ0djWWxtYTRDdnhoRDRYM2VucVU3S3IwR2swZERSVnVRNGFST0RPU01LVDBMVFUyYnQ0WVhqTjR1eDlOVGpwCkxwZ1YzZkp2UWRERHVyTHhFUnlsRC9zbnkvZXN5Sk5OR2Jtam15ajc0K2RXTTYyYS9TTkpUZ1VRSEFsK3dSclQKSFNONllyaTVYRFVVcTVGSjd2dVlXZkRZNEcwVThDSDFUdFRHblFJM05rUVJjcEtYSnZaOWtxSkRLTCtVeDRKZQo1WVdTdFlza0VkalVQMlNzK0RiRzhoMGFxSEV1ZUxPT2xxTWpyd2hSNVFQdkJFeVV0OFpZbTNNWFR1bTI2OEt5CkU5NkdJWEgva1JyR1BjMTFaaVRzWk9rQXZyVlBSSmRDanRBMTNIdHVPcU9lSzF4cStJK05ESEVYaDUyeVQwZ1kKWnA0UHpra0NnWUVBNWpHZmtuV2hUTy9JVGNqNnpFRHc1eFQwN0ZucUg3Mks4TTJLSjdoeGhnd0ZkTVJ4UURUVwpOLzBRSGdMRzQzcXoxZk02RGZBbEZjc1lka1lZZGNqQUpUWUVnSzVRSDIxemhNdkp4ZzRFclQ3RjFmVHlXM0FQCmRENmZhdk5SUnRvRTQrQWQzVGRieUR0QStBV0JoRDhsQWh4M29RQjRxM0ROaWVFcTZUYUpvS01DZ1lFQTV6a3gKMFZWNnNZUWNHQnJ4eUtMT3dsVGtCSFRiTXdJV2ZZQVBDSDBNVUE2REhkS1ZPUmgvSml1S3NDMHVwYm10WllBZgpxTFpXbzJmTVoxWUM2NVRldmM5MEZVeU10amhRVS8wVnJJaTBFdFZmbEhyTGtMYjBTV0trRXEwOGxkdENWL3hVCmgxWkxzL0sycE1GbVQ2KzR3T2ljYUhBbW9JbDlqS3F1bkdpbWtBTUNnWUI4cCs3RC8xTmtPSTErSWhJK3ZnUTIKLzFCTEZiNEZoajFSZmQwTStZTHdsbDMyQjlOVWM4aDE5V0xlL1ozNjNoMjVCTWd4ZUJSOUlzaVNkQThXNmFtegovUGFmUU1ZKzNxU3FDem12T1RRckpVMDVPalpzY2RqTW1JVDRBOS9Gd0piWldDcVQrMENHeEIvQXNDcWRGUnpUCmNkc09veFMxc3BaN3ppWFF1U242aFFLQmdEcFMxL2tZbWFrN1RLYmI3UThSMmh0MHRFdFhlbzhrUUs0SlprRmEKNFljMEVlaXMzSTBaVzhFeURIcWgrdms4bTd0VmxTYkdUNVpLTVdvRGJSc2xZd1gzMVMwbU1Qd3B1a0ZsUGxsVgo1aTQxK2pVR3dHQlJkYzhvL1gva2lMcTRJc1QwMWhHSk4vRTlFTXNBS2FHQ0RwVkNWMm1VbUhtNEZKNHQwM3VLCmZqRW5Bb0dCQUxhMkdTNWExTUQ3WHdzY1pkQ05pU0JuYi9IVFc4VzZ0M1Q4eHIyQXArZkV2bEQvNVNHaC9NK1cKVEdFS25keTJlZXVQREs1ZTg1N3RxUnovcGsxeDFYR3lRMVRIbFVqK2V4aER5VWxDcE1xQkhTTFA2TjlzZDRkZApyRi9uVXR4ckJTY0pVc2Q0M2UwOTlGN0FJWVZJSGUwbVZudkQxUGs3bU80TWpyUnZucm5LCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/extension":"viz"},"name":"tap-injector-k8s-tls","namespace":"linkerd-viz"},"type":"kubernetes.io/tls"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
          },
          "name": "tap-injector-k8s-tls",
          "namespace": "linkerd-viz",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "secret-seaweedfs-db",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/sealed-secrets/sealed-secret-secret-seaweedfs-db-seaweedfs.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
    "spec": {
      "encryptedData": {
        "password": "inital-secrets",
        "user": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "helm.sh/hook": "pre-install",
            "helm.sh/resource-policy": "keep",
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Secret","metadata":{"annotations":{"helm.sh/hook":"pre-install","helm.sh/resource-policy":"keep"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"secret-seaweedfs-db","namespace":"seaweedfs"},"stringData":{"password":"HardCodedPassword","user":"YourSWUser"},"type":"Opaque"}
",
          },
          "name": "secret-seaweedfs-db",
          "namespace": "seaweedfs",
        },
        "type": "Opaque",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "seaweedfs-s3-secret",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/sealed-secrets/sealed-secret-seaweedfs-s3-secret-seaweedfs.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
    "spec": {
      "encryptedData": {
        "admin_access_key_id": "inital-secrets",
        "admin_secret_access_key": "inital-secrets",
        "read_access_key_id": "inital-secrets",
        "read_secret_access_key": "inital-secrets",
        "seaweedfs_s3_config": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "helm.sh/hook": "pre-install",
            "helm.sh/resource-policy": "keep",
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Secret","metadata":{"annotations":{"helm.sh/hook":"pre-install","helm.sh/resource-policy":"keep"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"seaweedfs-s3-secret","namespace":"seaweedfs"},"stringData":{"admin_access_key_id":"AYT5kHfYO0CpN8k6","admin_secret_access_key":"Tl5ZB3BpqqYGTYPwBvNLCA1mgXnnJfIB","read_access_key_id":"7btZfLdYZYGIvgkr","read_secret_access_key":"nXnHCW7cKisWL17vYcgc84tcxfAIBplg","seaweedfs_s3_config":"{\\"identities\\":[{\\"name\\":\\"anvAdmin\\",\\"credentials\\":[{\\"accessKey\\":\\"AYT5kHfYO0CpN8k6\\",\\"secretKey\\":\\"Tl5ZB3BpqqYGTYPwBvNLCA1mgXnnJfIB\\"}],\\"actions\\":[\\"Admin\\",\\"Read\\",\\"Write\\"]},{\\"name\\":\\"anvReadOnly\\",\\"credentials\\":[{\\"accessKey\\":\\"7btZfLdYZYGIvgkr\\",\\"secretKey\\":\\"nXnHCW7cKisWL17vYcgc84tcxfAIBplg\\"}],\\"actions\\":[\\"Read\\"]}]}"},"type":"Opaque"}
",
          },
          "name": "seaweedfs-s3-secret",
          "namespace": "seaweedfs",
        },
        "type": "Opaque",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/surrealdb/sealed-secrets/sealed-secret-surrealdb-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/surrealdb",
    "spec": {
      "encryptedData": {
        "APP_ENVIRONMENT": "inital-secrets",
        "APP_EXTERNAL_BASE_URL": "inital-secrets",
        "APP_HOST": "inital-secrets",
        "APP_PORT": "inital-secrets",
        "TIKV_HOST": "inital-secrets",
        "TIKV_NAME": "inital-secrets",
        "TIKV_PORT": "inital-secrets",
        "TIKV_SERVICE_NAME": "inital-secrets",
        "TIKV_STORAGE_CLASS": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"APP_ENVIRONMENT":"bG9jYWw=","APP_EXTERNAL_BASE_URL":"aHR0cDovL2xvY2FsaG9zdDo4MDgw","APP_HOST":"MC4wLjAuMA==","APP_PORT":"ODAwMA==","TIKV_HOST":"dGlrdi1wZC5hcHBsaWNhdGlvbnM=","TIKV_NAME":"dGlrdg==","TIKV_PORT":"MjM3OQ==","TIKV_SERVICE_NAME":"dGlrdg==","TIKV_STORAGE_CLASS":"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu"},"kind":"Secret","metadata":{"annotations":{"sealedsecrets.bitnami.com/managed":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"surrealdb","namespace":"applications"}}
",
            "sealedsecrets.bitnami.com/managed": "true",
          },
          "name": "surrealdb",
          "namespace": "applications",
        },
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "meilisearch-master-key",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/sealed-secrets/sealed-secret-meilisearch-master-key-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {
      "encryptedData": {
        "MEILI_MASTER_KEY": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"MEILI_MASTER_KEY":"UG5vbU1DU3RkaGxuN1lIWDRidFM="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/component":"search-engine","app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"meilisearch","app.kubernetes.io/part-of":"meilisearch","app.kubernetes.io/version":"v0.29.0","helm.sh/chart":"meilisearch-0.1.41"},"name":"meilisearch-master-key","namespace":"applications"}}
",
          },
          "name": "meilisearch-master-key",
          "namespace": "applications",
        },
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/sealed-secrets/sealed-secret-graphql-surrealdb-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {
      "encryptedData": {
        "APP_ENVIRONMENT": "inital-secrets",
        "APP_EXTERNAL_BASE_URL": "inital-secrets",
        "APP_HOST": "inital-secrets",
        "APP_PORT": "inital-secrets",
        "OAUTH_GITHUB_CLIENT_ID": "inital-secrets",
        "OAUTH_GITHUB_CLIENT_SECRET": "inital-secrets",
        "OAUTH_GOOGLE_CLIENT_ID": "inital-secrets",
        "OAUTH_GOOGLE_CLIENT_SECRET": "inital-secrets",
        "REDIS_HOST": "inital-secrets",
        "REDIS_PASSWORD": "inital-secrets",
        "REDIS_PORT": "inital-secrets",
        "REDIS_SERVICE_NAME": "inital-secrets",
        "REDIS_SERVICE_NAME_MASTER": "inital-secrets",
        "REDIS_USERNAME": "inital-secrets",
        "SURREALDB_HOST": "inital-secrets",
        "SURREALDB_NAME": "inital-secrets",
        "SURREALDB_PORT": "inital-secrets",
        "SURREALDB_ROOT_PASSWORD": "inital-secrets",
        "SURREALDB_ROOT_USERNAME": "inital-secrets",
        "SURREALDB_SERVICE_NAME": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"APP_ENVIRONMENT":"bG9jYWw=","APP_EXTERNAL_BASE_URL":"aHR0cDovL2xvY2FsaG9zdDo4MDgw","APP_HOST":"MC4wLjAuMA==","APP_PORT":"ODAwMA==","OAUTH_GITHUB_CLIENT_ID":"dGVzdA==","OAUTH_GITHUB_CLIENT_SECRET":"dGVzdA==","OAUTH_GOOGLE_CLIENT_ID":"dGVzdA==","OAUTH_GOOGLE_CLIENT_SECRET":"dGVzdA==","REDIS_HOST":"cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==","REDIS_PASSWORD":"dGVzdA==","REDIS_PORT":"NjM3OQ==","REDIS_SERVICE_NAME":"cmVkaXM=","REDIS_SERVICE_NAME_MASTER":"cmVkaXMtbWFzdGVy","REDIS_USERNAME":"dGVzdA==","SURREALDB_HOST":"c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==","SURREALDB_NAME":"c3VycmVhbGRi","SURREALDB_PORT":"ODAwMA==","SURREALDB_ROOT_PASSWORD":"dGVzdA==","SURREALDB_ROOT_USERNAME":"dGVzdA==","SURREALDB_SERVICE_NAME":"c3VycmVhbGRi"},"kind":"Secret","metadata":{"annotations":{"sealedsecrets.bitnami.com/managed":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"graphql-surrealdb","namespace":"applications"}}
",
            "sealedsecrets.bitnami.com/managed": "true",
          },
          "name": "graphql-surrealdb",
          "namespace": "applications",
        },
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "redis",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/sealed-secrets/sealed-secret-redis-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {
      "encryptedData": {
        "redis-password": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"redis-password":"dGVzdA=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis","namespace":"applications"},"type":"Opaque"}
",
          },
          "name": "redis",
          "namespace": "applications",
        },
        "type": "Opaque",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web/sealed-secrets/sealed-secret-react-web-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web",
    "spec": {
      "encryptedData": {
        "APP_ENVIRONMENT": "inital-secrets",
        "APP_EXTERNAL_BASE_URL": "inital-secrets",
        "APP_HOST": "inital-secrets",
        "APP_PORT": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"APP_ENVIRONMENT":"bG9jYWw=","APP_EXTERNAL_BASE_URL":"aHR0cDovL2xvY2FsaG9zdDo4MDgw","APP_HOST":"MC4wLjAuMA==","APP_PORT":"MzAwMA=="},"kind":"Secret","metadata":{"annotations":{"sealedsecrets.bitnami.com/managed":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"react-web","namespace":"applications"}}
",
            "sealedsecrets.bitnami.com/managed": "true",
          },
          "name": "react-web",
          "namespace": "applications",
        },
      },
    },
  },
]
`;

exports[`KubeObject Can update sealed secrets after initial 3`] = `
[
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-applications-secret",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-parents/sealed-secrets/sealed-secret-argocd-applications-secret-argocd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd-applications-parents",
    "spec": {
      "encryptedData": {
        "ADMIN_PASSWORD": "inital-secrets",
        "password": "inital-secrets",
        "type": "inital-secrets",
        "url": "inital-secrets",
        "username": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"ADMIN_PASSWORD":"ZXhhbXBsZQ==","password":"ZXhhbXBsZQ==","type":"Z2l0","url":"aHR0cHM6Ly9naXRodWIuY29tL095ZWxvd28vbW9kZXJuLWRpc3RyaWJ1dGVkLWFwcC10ZW1wbGF0ZQ==","username":"ZXhhbXBsZQ=="},"kind":"Secret","metadata":{"annotations":{},"labels":{"app.kubernetes.io/managed-by":"pulumi","argocd.argoproj.io/secret-type":"repository"},"name":"argocd-applications-secret","namespace":"argocd"}}
",
          },
          "name": "argocd-applications-secret",
          "namespace": "argocd",
        },
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-redis",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/sealed-secrets/sealed-secret-argocd-redis-argocd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {
      "encryptedData": {
        "redis-password": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"redis-password":"aERVUjNMdlc4ZQ=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"argocd-redis","namespace":"argocd"},"type":"Opaque"}
",
          },
          "name": "argocd-redis",
          "namespace": "argocd",
        },
        "type": "Opaque",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "argocd-secret",
      "namespace": "argocd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd/sealed-secrets/sealed-secret-argocd-secret-argocd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/argocd",
    "spec": {
      "encryptedData": {
        "admin.password": "inital-secrets",
        "admin.passwordMtime": "inital-secrets",
        "clearPassword": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"admin.password":"JDJhJDEwJFJ3TGtBcENPNkdKSDFRVXJUTGNlVGVFODkwWjlDeU5jS2p4RkNQSmxWOEVwNDBBejgwNG91","admin.passwordMtime":"MjAyMi0xMC0xMlQwNjo1NjoxMlo=","clearPassword":"ZXhhbXBsZQ=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"argocd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","app.kubernetes.io/part-of":"argocd","helm.sh/chart":"argo-cd-4.2.3"},"name":"argocd-secret","namespace":"argocd"},"type":"Opaque"}
",
          },
          "name": "argocd-secret",
          "namespace": "argocd",
        },
        "type": "Opaque",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-sp-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-sp-validator-k8s-tls-linkerd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {
      "encryptedData": {
        "tls.crt": "inital-secrets",
        "tls.key": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUxqcXlHVE9oMHZXMHNqNWZ4bCtEckF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl4TURFeU1EWTFOakV5V2hjTk1qTXhNREV5TURZMU5qRXlXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQU5nYnQzeUwzVWlneUFzb0xFVTlINjNZWFZKOEJ3UnNpYlk3SjlBVVpoaXI0WlMwanlHTwpFWDJjb1h5anZ0RzVZWUZEUkVKOEdKWm9mUitOV0hNc2ROSUVuU0dReGdnSUNQSjlBY1pqSGdWU0xxbTJUNzFjCkFVU0tUVWpQV3dNb3loK1c1UGVURS9YMGVtM1ozOFhtbTUxdEc1dmkyZndONGQ4V0gxc1lSV0w3cU9NRktLZUEKVElyV2k4b05GOVlwUjIrS0pwQndlditnU1NBem9BWmltSTY2b0ZpQTJkV0lta1gwNkpndEp3ZHpqa01oWXhYOQpIeU5MOEUwWHF2NDl5dWZUZUppOUxYSkdScC9idHpPTTFPRThxYWZJSFNFcHVJdEh1cDlpUms5aHFjSk5LWkZxCm1VajJzclBnd0hYODBjdnhhblRRa3lWQW4vam9DTDlYT2pjQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFDcnN5QTVISU9lSWFjakdJM1N1MHFGVjNLM0JWQ21YMC83VEpadFExdm0KVmZieXYvbEJrcmlzUmZWd0xkTjduRThidGllQkZvcWhrWGFielQrR3hjZlJNTEs5Wmt0K1pJb294MVZBK0tFZgpreGdRenpJSWpTSE85SVIvSzRGdDVKOS9KNzhDZnBQTlE2U2pDYkFVNVRkblVER1BJR3BZc2N6Z3AyQVZKcGtrCi9KY3orZE8yMUV6NnY0emxkSVk4ejFKMWoyZ1RBam5qZHp6cHdQaVkyNXRsL2hPSVVnT21NdE00clc3SGNQVWQKRFBhNUt4d0xqQ0NocGk3MlRLcEZiYWVFUnltQ1MvRkg4VGZFejBNQ04vcUZqWFp3dEoyUHVOSlpud1FvZ1hZaAorakgrcWVnek1iODMyVjRQSmkyZjRIakp6eWVCNFdwek5QeVdrN0xOOFN1QQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMkJ1M2ZJdmRTS0RJQ3lnc1JUMGZyZGhkVW53SEJHeUp0anNuMEJSbUdLdmhsTFNQCklZNFJmWnloZktPKzBibGhnVU5FUW53WWxtaDlINDFZY3l4MDBnU2RJWkRHQ0FnSThuMEJ4bU1lQlZJdXFiWlAKdlZ3QlJJcE5TTTliQXlqS0g1Yms5NU1UOWZSNmJkbmZ4ZWFiblcwYm0rTFovQTNoM3hZZld4aEZZdnVvNHdVbwpwNEJNaXRhTHlnMFgxaWxIYjRvbWtIQjYvNkJKSURPZ0JtS1lqcnFnV0lEWjFZaWFSZlRvbUMwbkIzT09ReUZqCkZmMGZJMHZ3VFJlcS9qM0s1OU40bUwwdGNrWkduOXUzTTR6VTRUeXBwOGdkSVNtNGkwZTZuMkpHVDJHcHdrMHAKa1dxWlNQYXlzK0RBZGZ6UnkvRnFkTkNUSlVDZitPZ0l2MWM2TndJREFRQUJBb0lCQUIybXIrWkd5blhNbWFYdQpQU1RDM2pYY0dmSFhVcDhveFR4Ym9YckxVYmJRM29Lb3czcTNJMjg0cm0rTGlBTCtqSUpQMkczRzJSakovV0QyCjQ4dnByWjJqUkd2MmtUVkk1UEZnZFgzaTI1dWZTd2UrRy9LL1RPMDZqS0FRMDB2N3JML28xRUdqekhsU3NmbWcKaXpOOEVKM28rb0RJLzErMkIrZTBBVmxlV3liWllDWGx5bFcwb0VqUnE1SUcrZndWaitnbmxiUEJXSjl5N3ZCWApxY1dneFM5WGpRN3MvTTB4NGtWTk1rNWV2ZGlVZWRtdlEvT2d1dXlwUENYMFdLd3hXOHkwaGVYUTQ4Z3htaU1sCnBRMGhVeUhrNmwyV2NYTHhaUXBPTUdHSEpab1dadmFtM2d1SmdkdnZyNE9OMkhmTUFkcmxoZWNaNEswbHM3ZEwKYUJDRjJRRUNnWUVBNkRGV1hrL1VpVjc4NDQwaVZnZWlnN0dkN0FIOVk2TkVrZVQ5bmxNMFdIemI0SnZ4NTRQcwpWcVpsSXV6SThVek42eFFJUjROZUh4NXF2VDhEdEhqbkZWczZEandtQlI0WVhFYXBRd0MyeEZ2QitrN1lXOFEvCi9weitvRmF1RlVCMEtEU0VGRlgxN3FUYml1ZjhEZENhaWE1dzdBN0RCbFVIWjBLajlHUWhLaHNDZ1lFQTdrUXcKbXhqVzNhbjQ5bnRBRFZYVDNHZWQ4T1ZBb2RDa01FNG5tUUlqNjh2UVJtS0pKWUNRNURkRGZBQ0xDVlhwY0t5UAptL0lsYXlPOGdlSGcrL2pCRW9lVVZLaDM2TURrOTJ4VndERFZKV0lzNWZBbEUvL29JZWt1MVlKWEVEbmNLcUpZCmI4KzlLdkVMVjRpTldoMkRRblBYQk44NStCMTZ5cEFIRHdHSXNoVUNnWUVBbjB3Sjl4Wkp1QjBrM25DYlYrNVEKL296Q3pZSG45NDJ4bzI0NDJZQTM3MlZwN0VUUXg0Ym9nK0lRak05cVpMSE9yRExJSTFmcklPcGJUSTZJMmk0QQpTOVNVbGVPS0tnU2xyZGtFa3VWUWZwSjlHRjh6YkhITmZiN3pxY2tPRWFKd2pvekkrTEtvMFJybFMvMHdIY0k1CjQ2OTc1VmVUVVNyUXMzVXl5cDVQYW5VQ2dZQUErVzVwYy9TTSs0RDFJUlBsK2cvZnV0eStlM0dFTitJMEFGM1IKRmwwblBiSWdWNDdRQkhLVFBGYWVUekpDVzRPVTNsL0g5M21Ic3FHMnRrSEJSZ2NrR0VIWEJzbFd2bE14WDlRSgo4U2t0K2ZUTkMrcGE1cFVBYm4rdWg5WHJUeEZEYTE2Sk5vUkRoTERUTHMvRktwRzYxOVp0UXF4dUExRFpPeldNCkxpbHM4UUtCZ1FDMHBMZ2l0eUc1NjdleHZkbFc3RithcWNldGU2RzFsREdjZEE5Q29PVDNYdTBUa1MrUzJpcWwKaWJxRFdaV0c5Q3BFN2VFK2l3cEdWMEx2MzVOS0JwUCtGUGF6Z1lhbFNLblBmdzRNaWUzZ0R4T0RXM2xCcTNxcQo5bEliMmNZU3E0ZDIvVUVPV3U1MXIxdG52QXZKUUwvN3ZJKysxdllyTnhwZ0lWU2dMMUtRR1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-sp-validator-k8s-tls","namespace":"linkerd"},"type":"kubernetes.io/tls"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
          },
          "name": "linkerd-sp-validator-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-policy-validator-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-policy-validator-k8s-tls-linkerd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {
      "encryptedData": {
        "tls.crt": "inital-secrets",
        "tls.key": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRYnhKWXU4Z0xHV1l2TW8xRFloRFZsakFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpJeE1ERXlNRFkxTmpFeVdoY05Nak14TURFeU1EWTFOakV5V2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM1MXRDUHpXZHVKVHBSWFBiZklpSlFqZlQ2Z1FRMVJ4di9uV1J0YThuagpFbkNGTFl1YWtURTJLZEFlUndEenBRTldBdVBiTGlvSVA5RytRRHVpakRndjlKRlJNMVhhSDQwbytqenNFZ2FICm8vbi9LeStKb0hWbGtEcndoWDNRazlIOEIyNU1BT1dBNXNVaTdncEsxR2JzSmZOMzd5LzBlbENCNjY2U01WSncKMXlmSlVWbGxKVFg5RDVPR3VlaDdOcjVRVkVFbm9hTG5tOHlHMjZwQ3p5VkFmMnh3WGFUUTlWY3Q5RERRUEpXeQoycjl5ejV1VXk5WWV6eW9UNU1aOFVXNEZNeWo2cWNlSEtTc3gvM1BDZjc4UXpwR0xNRjJZM3grV0ZJeWpVZ2FkCmR2YmFxLzNidG5DNDdCcWx2RThPc3hvTG4vbU5ldnNSNjlzZWpRNCttUk1YQWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFWjdSay9haUp6aGJLem5Gb3pudEhmK2xmaVcKbU9VSmorV0QxY2JqMlhqdHZBcksvUjNYL1lYTTVCMWdNRDFJQjMrL2dsb1BEa1NqM0MrVWlDazh4WGh6b2VpdwpiSHhNdEdWVXVpQVpHSTdpc2NxOFZJaFQ3QjFWTFB4eUtSYzYvUytnMTlkRURWdDJRMGFvS012d2RkRDE4V3pICkdhWDFJUmNZUVgwYW55RXZpRzBhaEZRc1JvRytkVmZESzVDRVdkUzhXT3lET1ErNFhWOWR5d1h4ckpISDdXQlEKV09SSzVKV2pyUWg1bEdXaUh1NHQvcEFsalJKZWJ5NDU0T3l2dENWcTVkSElIOVl1QmRFc0d5cmROL0Y0VTBGMgpIM0NMZ3dTZlh2NXBUazdaUHZtSXdySHd0WHkxbE1ucHh6WVF3UmI5cTQweTZOUlNvZENjbnVXaVNkUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdWRiUWo4MW5iaVU2VVZ6MjN5SWlVSTMwK29FRU5VY2IvNTFrYld2SjR4SndoUzJMCm1wRXhOaW5RSGtjQTg2VURWZ0xqMnk0cUNEL1J2a0E3b293NEwvU1JVVE5WMmgrTktQbzg3QklHaDZQNS95c3YKaWFCMVpaQTY4SVY5MEpQUi9BZHVUQURsZ09iRkl1NEtTdFJtN0NYemQrOHY5SHBRZ2V1dWtqRlNjTmNueVZGWgpaU1UxL1ErVGhybm9lemErVUZSQko2R2k1NXZNaHR1cVFzOGxRSDlzY0YyazBQVlhMZlF3MER5VnN0cS9jcytiCmxNdldIczhxRStUR2ZGRnVCVE1vK3FuSGh5a3JNZjl6d24rL0VNNlJpekJkbU44ZmxoU01vMUlHblhiMjJxdjkKMjdad3VPd2FwYnhQRHJNYUM1LzVqWHI3RWV2YkhvME9QcGtURndJREFRQUJBb0lCQURMQ3YxTVlLdkZHRCtqYgplTDg0QnFGME5QOGJzSGVSQmMvTFFQdzJYZjI5TXFqZDZPeitUYS9hdWZNYk4rSlZKMVVlRXZqeVloN0F0OXk4CmxNMXdlWVIzekIyZTVRdGdaT0ZWZ01DR3ArdnkyVDFlb1d4NVBMZlNMcGMyRDBpaXA4K3NnKzhVcTV1SzdUdisKUXlkdlh2R1A2REhSVG9yN3dmUEsyWE1yTDdhTVJ5Yy9KSi82RXBnYytzaUNxakpRSkRMR09xM01MWmMybXdIVwpiZzF2NHo3VlBTWjBNRk1ka1BiNEYxV0d2TEJBQXVZVWtEa21mTTRPcVNDUm00TlVrSURNVHJRVllqcmRySmp6CjExSk1jMzhkTUdaNFF5UDc5VVNqajFBM3VSRFYvTGVYQjFvcld2SGYrc1hkUmVSdTd5cmRwemhwT25xOWVxWmMKMmQ4bWlXRUNnWUVBNEx4N1pMWVRqRzFVaWdiTjBWRkpva2M0RWVQaE5aT1dJdDNQUmRJM1dXUzJaZGtBbCsxZQovK1IxTHhqNmtQeWl6UVNwWi93Sm1ZVmR1VmEvTExFWjE3elJBa2xUUmtXbk5qdDJBRVNDT1lJdllFMDcwcmRyCkcxdnZMcmUySEJTNTlFczlrY2VwNE9PZmlTd3c2MnFFRUwwL1pxVTBWVUxzK3FXdWNsYkNqMmNDZ1lFQTA3RVgKWmdDV25BUVBYdkMvN3Y0d2RaYkJFVGZYVVRVRDErY3Q4WnNObU9GQmJORjkzOEJIcTdLUVdXMjR4UkswNUVHOQpCMCtkSjdvRGpNQkJBNjJyb0hJTGFMNHR5U3ZpMXJVczlxUzhFY3c0WUVEOTZrYyswL1FBcStmOWkwK1hYTGdUCisvaU5lNDBmcDN4dXY0QUU4TFlsbjlsRWx3V2NleklTdENqdUFORUNnWUVBZ0gyREZ6dTZ4WWtrMHAyOVF6WDAKb2FHU2Z6Z0k1VGJ5bWhDemx6bnZoMTY3b2xPRnNWZDMvMXBCWGFJc2NJVGhGOUxZZ0tsclc2a1N3d3JEMXV1UwoyUFFOay84VWE1TWJYVGgxNlFWQ1oxcjFkMXZ4SGpMY1BCSStHRG5WRncwS25KQUFMYjg0YzJueEp0NXJRYzN1Cm9CdHppbDVlSTNsV1FLQkZzdjNEMDNVQ2dZQmtBNUFOZGd1eURFMEN5dld6UVU2OXo0ckp5cnNrdDhwb0QrWHAKOXhxV2R4NEUvbmpjNUtnMzIzWk5lZ1JJdjR6TkpxM2JMV2NQWk5mV2dPSjJqVysvcndIcTY2Y1FHM2JoZjltTgpjY2tWRTRvekY2R2ZOU2ZlMWJJWGhkU0pKQUpjSU8vNEpMY2JmMUpNUEFMSzRQMzBoK29BdXBLb1UxTlo5UTlYCkpOdEZjUUtCZ0RCVjJKa1BNajdhSWMvL05pdGhmVEcrVDk4YktBUDhmQnRZZ1FEVmxuMVlmNS9XRmZ3SGVXRVcKUXROdXc5QmdtanhIUDRReFRxR0krVVNqTjJ1TzVyK0hNdUgrNlRydThSbVRRMkJad1ZEcnhDQXo5Uks1OTFuUgo0dWZpeFlQZGs5Ly9PU0lhdUgzYlp2RGhHbzcySFNCWjNVRm9KakxTamVJcUx4N25CdGFiCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-policy-validator-k8s-tls","namespace":"linkerd"},"type":"kubernetes.io/tls"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
          },
          "name": "linkerd-policy-validator-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-proxy-injector-k8s-tls",
      "namespace": "linkerd",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd/sealed-secrets/sealed-secret-linkerd-proxy-injector-k8s-tls-linkerd.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd",
    "spec": {
      "encryptedData": {
        "tls.crt": "inital-secrets",
        "tls.key": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVakNDQWpxZ0F3SUJBZ0lRVVc0ZUcybUJzV2ErS2tFSFFyajhCREFOQmdrcWhraUc5dzBCQVFzRkFEQXQKTVNzd0tRWURWUVFERXlKc2FXNXJaWEprTFhCeWIzaDVMV2x1YW1WamRHOXlMbXhwYm10bGNtUXVjM1pqTUI0WApEVEl5TVRBeE1qQTJOVFl4TWxvWERUSXpNVEF4TWpBMk5UWXhNbG93TFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5ClpDMXdjbTk0ZVMxcGJtcGxZM1J2Y2k1c2FXNXJaWEprTG5OMll6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFNbEN5UUhUSVp1MWRUbnhZU1FpN3QwTWN2OTkrVEUydzFsMXBaUXBTV001U3FvaApaaS8xc0FpYTkrZ213cEc2c3BXNjFQeGwybE1TN0lRSHNqVnR2T2xKc2t5MXU1OU85bXdjLzdvWEYwVUtLRmFXClJNcWpwNmM1S3krRitkRlJlNUpnaW9kZ0F3QnB2dko1QzI1SldaZGVuMG05blhIZm5tYVlvYXlDVDdNcnVMWW4KVGt6Vm8rZWxHTWI0dVNMeGpuNnBUNjQwSUk4cUxqNHphalViOEZtOXR1TVBnT1hmd1NuUXo0a2JqOVI5QkxnTQpFZDNBaG5xaldnTElsdVA4QjMzUVFRUnBsN1VLM0ZRRk0zK3gzMHJrL0hMc21zK0tXa2pFRTczSHVTWHdLQWlLCmNQalRnUzNsK1lvUmd6N2VZVVFrUnJmUFJKWXdCUTUzNTJ6ZER4OENBd0VBQWFOdU1Hd3dEZ1lEVlIwUEFRSC8KQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RQpBakFBTUMwR0ExVWRFUVFtTUNTQ0lteHBibXRsY21RdGNISnZlSGt0YVc1cVpXTjBiM0l1YkdsdWEyVnlaQzV6CmRtTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSTJoMTNrcUVWR0kwSmw0bEIyVjEvaEZ0WGxrVmtOSVEzdDEKWjV5ajV0U0RyTFhoNCtLbnVpd0NNamg4VldaR2NESHp5ZjZYRUJBbFV5dzdUUWZ0OTY0UjYwRkFLWDdwUDhhRApYVUJCMTdZejB6T2VuM2tMQmVIc0ZoTGprOFA3NURmMEFmQUJTc2FkU2NMaWtMaWNOTWZCM1NoeXFjWHFIcGNUClVsNHJYRXl6ZWF1YTVTMFVEV2VMNHRkTkhWVTdRWDJ0Znp0d1lhcVpVV3hMQ2hiQlhEdW8yRTluWjVRYTlkT3cKMWhhQzFYSUhXcXVnTmtXRHJhYkJXTmVqZFY0Q3hQZ1lKTTRrWC8vRXFFRXAxTzFZNGt6bDBlcWV3anAwT1dGTAo3cDFEcVNZL05NeUVZZUhqbFpGQndnd2hYVzkxUWpiYVV0VUtPUDJUcFd2YzVRNnlEeGc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeVVMSkFkTWhtN1YxT2ZGaEpDTHUzUXh5LzMzNU1UYkRXWFdsbENsSll6bEtxaUZtCkwvV3dDSnIzNkNiQ2ticXlsYnJVL0dYYVV4THNoQWV5TlcyODZVbXlUTFc3bjA3MmJCei91aGNYUlFvb1ZwWkUKeXFPbnB6a3JMNFg1MFZGN2ttQ0toMkFEQUdtKzhua0xia2xabDE2ZlNiMmRjZCtlWnBpaHJJSlBzeXU0dGlkTwpUTldqNTZVWXh2aTVJdkdPZnFsUHJqUWdqeW91UGpOcU5SdndXYjIyNHcrQTVkL0JLZERQaVJ1UDFIMEV1QXdSCjNjQ0dlcU5hQXNpVzQvd0hmZEJCQkdtWHRRcmNWQVV6ZjdIZlN1VDhjdXlhejRwYVNNUVR2Y2U1SmZBb0NJcHcKK05PQkxlWDVpaEdEUHQ1aFJDUkd0ODlFbGpBRkRuZm5iTjBQSHdJREFRQUJBb0lCQVFDaVJCVmFRa2E3aXU3TAoyOEJ0YVRqYXdobkp3bUJ5Zkd1K0tldG83R3k5OGtndnFTUUJrUDN2d2pvVVU0UFdDUWZKVHN3Ly8wS3FiZnlCCmFzOFU0cmhJQXVJZGxQeURzaDllQlhkdEt3Ylk1QnFuelJvRG96VWR6eXJ4Y3Z4NjlrNUNNMUlkV1p5eDdaQkYKWUxDRnA5L3kraGhGVlBxbkFCdHZMcXBUTXZGZFMzaTFNaEtOQ3dLbW11ekxGTHBFUUhydDhTNW5kZ21SdzVYbgpWM1NVdDN0dVduVlVLanhsdGx4VGk1bDdqUTg2L3BSV2xGMDhVang3eFdpZCtnTEpjT2ZnZXF1c3A4OEJVZ014CnRHVXpnRjZQZnVnMDVIQmh0SVR1VnN1TGs2akhMZWxPd0t1UjZkam5pTkdjM0hJY3lFN204UERCUWUxak5WY2EKR1Y4MDJtNVpBb0dCQVBZb29YQWZ6Sld0OGtwQ01URjJnMjkzL1ExaFR2N25keTV0YkxndklwczJPSXVlZ1hZWApYLzdnaXVselhwVVR4Q1dFUG5ieSszRHpHZktQa3hKaUpWL2pIOVJ5b2t6Zi9hMEV2YjVOWFlVOE1CYkgydG9sCmRPTXo1aXhVUzg5Y2hmVmllMGdrOXR1VjB4MVNJMlV4cktFdmpZT2dyaGk0MDlZZ20xc1pMZ3gxQW9HQkFORk8Kb3hreUxZM0JQeGdKQmdEYityTTZ6YlRmMjdqMlk3SFNsT0ZsWCt3NUhVNHlVTjRoeXpwVU5Ca3o2aHhoakx1eAplZ01VU0poZHVJc01iUmw1NWpEVzFnVVRhVXNIdm1GQjEyTEpWVENOUWhhK1JybTRqNWVzZzRJYzZnV053RmFCCjZCa3BRdE9wa3ljUzVuWnFxMy9lb3dWcWlVTFM5RjE3VWg5emVRckRBb0dBVzUzenVBK2R6WGZZWGRzVkJCdmYKLzNUaE1rR3RiU0lwTVpaNGlIVENwSklocVpWdENjN1pZN3VlK0JTQWQydkw3VXF6RlFLS294ZFg2UGVXL1ppWgo0SDVnTW1vWURoU3dEZDFkNFo1WjJHVDJZUVF4YUUvWW1WZVBxNkFVTnpGd2lrd0ZKbXpibEE3SGJIcE53alFpCjFEc21xSDc5VFNZOWNjemhCWjd4aktFQ2dZRUFvR29ZYmxNYXZxNEE0VGJwTnZkaHFNUEVySDkxTXNrRGwySEIKWVE0RStsSzd0eGF4QzgzeXAvMnBBRGZka1dyaUpXZmNEMGdZYTA1SkJhaThaTzRjRWdwVmRRWnZpR1dpNzM4Ngp5Q2R0OXd3TVBzb09Bb0VFN0VYM2RGMGNycXo1WUZPbndzRHd5ckFJYThYOGczMDFlNGJ5Z2xBb2F1S3JEb3BaClltbHB0MmtDZ1lCbmc4NWdINWV3WFd5Z3RKVktxdEJXazhlNWMwb2tPWk5wNDA0b3J5ek93RmdxNzFEWFdVVXcKUERxcWhObVZRK0QwN2dNMFlBQTJMUGJpYlo2L21WVE5MYjFMYTQrNm80Q3JCRjdsU2o5KzJyTE93QU5GSXZwLwpnVitRcGtsZVMxTXVIVXc2TmcwZzF2OU9sOGJlbFY0SDVMeHJPQUtnMTNIRWJWRGFoZmxsSmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/control-plane-component":"proxy-injector","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-proxy-injector-k8s-tls","namespace":"linkerd"},"type":"kubernetes.io/tls"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
          },
          "name": "linkerd-proxy-injector-k8s-tls",
          "namespace": "linkerd",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "linkerd-viz-ingress-auth",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-linkerd-viz-ingress-auth-linkerd-viz.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "encryptedData": {
        "auth": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"auth":"YWRtaW46JDJiJDEwJHExSDZCbmN5NXkxQ2MvQ0hncS9UNS5LRnZyZFlwWE92bFJycVpxZHY5OUM4enAxVFI0WTF5"},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"linkerd-viz-ingress-auth","namespace":"linkerd-viz"}}
",
          },
          "name": "linkerd-viz-ingress-auth",
          "namespace": "linkerd-viz",
        },
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "tap-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-tap-k8s-tls-linkerd-viz.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "encryptedData": {
        "tls.crt": "inital-secrets",
        "tls.key": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQU9CZ01Yay9yZ1pxNFZ3a21NZ2krZ1l3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpFd01USXdOalUyTVRKYQpGdzB5TXpFd01USXdOalUyTVRKYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUMrdE1DYzBuaVd1eFhzYzRHU0tzZkIKNkt5ZkhCSVZrSG1Fc1c4WGlIWlVqa213NzgyVUcySWpXK2krNm0rcDBHQkNuc1JHU2x0ajBmTHlHekJKV2U0Mgord09zdi95NDF3c1hnNEJjY0wyWnRiVS9DNzRWNDZXUTgwcnFVbVRJVHg0enBxTWJ1YXVvMkRXdkNwVWV4L1k1Cm43WjBkeTY5QXNZMW9nK3dJUGRvbzNoRElIUlZOc0pjN0tjdFJ3QWk3MFRuUnNONWxoNGtkdjA0MWIxMHpuZDcKSFBpTm5IVmFOZFJwRGVZcXE0cytKTDFiWEJVeWNDVDV0NFVnK29mYTNraS9TNVFrQUxFUzNiMURhVE5hUnh3SgphWFBUS1JpVWFUQ1c4Mmxwa1FPTWIwSy8wT0toZk9YQkFVZ2Ztb2orWTBuK3hZRFFNc2tTZUNWTWpPUFVhNjNCCkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQmdTZ3JLVFJ1QXFCN1hxazBxQk5KeWx2eWo1SjNDCjJvbDA2K1FRNEdNa1I2QTJlZklaMDJTbzhUbE5sNVhMNTFkUGt3VFIvUWNBd3A5UmdaWHFvZFQvcGdZbnhnMVcKRnJvb1VsdVY2anNyYlJlZ0RaOGVwTnl6Wm9RM3pwU013K3UwZldRSmlsVzZxbEVTZ1hWeEF1N3lIZnZHRHpISQpMT3hrY3p2YzQvaytkNXNpc2IxdnFWWEdsUjFDOFNGYU85V2o0Y2VkZEUzaFBXN2o2M3BMV0NxZCtyWkoyVnRnCnorL0ZzMFVnbUlCVnh1YmhmWjd5UGhqYWJTcFd6U3hCRCtQSzgvb25FM3N6RWo4dktMQmljbXFaTEhHTENQUXUKckdZM1g5ajZ4UW1jdE0zQ2hvck5FWmFXV2I1WDBrNnVrajRxSlJRc21QV0xCRSszSlZMUkIycG8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdnJUQW5OSjRscnNWN0hPQmtpckh3ZWlzbnh3U0ZaQjVoTEZ2RjRoMlZJNUpzTy9OCmxCdGlJMXZvdnVwdnFkQmdRcDdFUmtwYlk5SHk4aHN3U1ZudU52c0RyTC84dU5jTEY0T0FYSEM5bWJXMVB3dSsKRmVPbGtQTks2bEpreUU4ZU02YWpHN21ycU5nMXJ3cVZIc2YyT1orMmRIY3V2UUxHTmFJUHNDRDNhS040UXlCMApWVGJDWE95bkxVY0FJdTlFNTBiRGVaWWVKSGI5T05XOWRNNTNleHo0alp4MVdqWFVhUTNtS3F1TFBpUzlXMXdWCk1uQWsrYmVGSVBxSDJ0NUl2MHVVSkFDeEV0MjlRMmt6V2tjY0NXbHoweWtZbEdrd2x2TnBhWkVEakc5Q3Y5RGkKb1h6bHdRRklINXFJL21OSi9zV0EwRExKRW5nbFRJemoxR3V0d1FJREFRQUJBb0lCQUVFU04rN0t1aTdrWTFTdApEUGNzOWNBcWZreEVMYitCN3BUaVhqK3Zab0R2bENGMWtiWUpxZkRhdVkzN1BHSzdJVDFhSXlyQTBISTgveUt4Ck9FYXZFdU5idnlOQTF5RFM3NHYwYU9ZaDZlLzYybjlLcUcrYm43RFg4eVlGT3pKR0hNNE8rL1RINDlUWEFXcGEKdUFzcXU4OXB1YjMvdE1qMW0yQk5qZ0RSSHRwcTVoL0RsTWxOVkIyUEVlRGJrN1p1SWVkbENJNUhmZ0ZmVTJKUwpyY3FEaVM3MnB3N1duVkFKYmZsZ2RMMUVTNmpVa3RNaU0xa09RY2dWbm0yV3pLTGZjQUVWaWJaZ1E0ZkFwMlB6CktkMHIxL3h3cmlKNmFEYUtpRG91cVUyaWFjM29QRTZzU0M4QkU2dmZmYnZoTDV4c1hKOHloNU1EMHFjY2o1QXYKYy95MVFZRUNnWUVBMzc3d0NqditqZjdrT2xHR3c3eVZGRUluVE1kM290bHFzdk5oTERLeHFhNVBCYTE2NFQvTQpwTFBKUUZLUzBNRE14TTlacEVTUmlCcy9UcTNic2hONGQyWmRrN2NPa3dhVkIrczFWVXJYelN3WE1OWDE2M2UxCjMyYk8zemtsMzdMQzczakQ5WXhsd1ZRbUZHZXByai9PK2d0ZHdlMHM0TE91aFpxTVZIMnp6YmtDZ1lFQTJqS0YKdzY0dDlDNEJwNHFvMmtSOXJNcmVIbnhFWk9RWHFTZ0NxSmszYjNaOURwWGlHL0FGbkpHNmliVklhUU5JVUdFWApPYVRWL29vVTgrWnU5K3VxQTgzZFhyd3daVUVhV3BQMGJMNkdFNG1zdDVYRnhYTjltQ2hOV0tsbmRkQnlFMUdUCmJpSGY5SW54bVVyVXVKeHJPWllqQU1saThCa3hXNWdZWHFqNEpFa0NnWUVBcEVlMlNWMXBkdXE2dWhNWUJ1bVUKOEEzdWV4Sk54aFVxb1gvUFRqdGVkUDZWNk01S1ZjNlpQQ2tCVUNnUXdoTjloZGZVc3FiaHovUnBsQ1JWRmJmMApFSDdwb0VhYy9kaXNYZWNWL3F6NExCMytYUTRNQlRxZElBMkZRU0xkcXhTK3lrTjZaZlVTMVZNcXJucTZmRVUvCmZCb1NXZ3dCa201N2FuOWlIN3MzNUlrQ2dZRUFzU21zYW9HV1ZsaTBoekNTZ1FaemRFVVRySFVCbzFsL3pKenIKNjdEYnplakxDWGl4S2pYc21IL0trZDFiZWNoc2dyY1NnSDlTTVdZME5RUzR2UnZmNDA3WG12LzUyM3pNeFJhMApzMGJPM2pZK3dxRWMvNEVTVE9VTVNCemtJRWlyRnZ4NVZFYTA3SHpFYWM3VWdVQ2YzeFlFUGJOR1hlUldxeVFIClJYUzBaZUVDZ1lFQXdXUDU1VnplWmdlTjFtZ1hqWVNNbjBIR0FaZmljYzRQN20rREF4cHFPTjBOOFJsYUFWblQKN3BHbjA4Q3NCRytiS0JhZk1qb2hWSFhOa2JMUWZENFdsU3BwWG5UUjRzUVlOQkVaUHViaW1TRkppN2h1VkJQUgppcHJ5VFZGcW0wbDljQ3UwdTkrSjR3SVB0TTNjbE9tZ0tHakg5ellFak1zZ0NnbHBaOUZjNmRNPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","component":"tap","linkerd.io/extension":"viz","namespace":"linkerd-viz"},"name":"tap-k8s-tls","namespace":"linkerd-viz"},"type":"kubernetes.io/tls"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
          },
          "name": "tap-k8s-tls",
          "namespace": "linkerd-viz",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "tap-injector-k8s-tls",
      "namespace": "linkerd-viz",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz/sealed-secrets/sealed-secret-tap-injector-k8s-tls-linkerd-viz.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/linkerd-viz",
    "spec": {
      "encryptedData": {
        "tls.crt": "inital-secrets",
        "tls.key": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"tls.crt":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRVjBUQjdVdWxQSWsvUXJUT0xMVFE2ekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TVRBeApNakEyTlRZeE1sb1hEVEl6TVRBeE1qQTJOVFl4TWxvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU0vcU5OVnFxOW10THBQQlhsd3gxZllWM3lDdk9KYUs4MkwwNENnMnduVG9RNDk0djhvTDlFM3RrZHJSVjIyeAp5U3BOcGdoNlRWTldEVnNzZmdVWHFuUHhib0lWRTdmNmVBalZDTlp3S0RWMWxjalZGYjIybVI3WGxhMHllTTA4CmdhdTZzSUNsUkdzVXQzT1JQUDJzdEorWjZ5bWs5V3d0V0FyOTdZWUVzUFJaRFBhMFNpRGdUeHVRNHlnYXVpWXIKRng1bUM3aVg0NVRIVTRPRWlKOCtTcUdvcWwxa3BUZTdMTW9haWpxZzVwS2phNGhuMVpQbGQ4QjZUZHNLaTFvNQpmUFRuMGhwc1VONGhLMDBCZ0VIa1Mwdm5ZU3B2dGI0eXd6VlgyL0pSNm85RDh1MjFYQmR1TGc2WGRyOTBxYmZICi9Ebmo5UkYzM2FCcmJuS2pQVytxa2VrQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSDQxV2tINGYzU0NteEtqU3J5eUJPTkFyNUVRY2E3TG1uNll6aytid3hKRk1ZSlcxZUw4alNJMU8rS2MKblRYZ0dpSUozMlB5bm8vdVNoNTNIOWtjZUgxMG5FRWdITDFRQkMwN3BJS1RYdGF1NmdLMXFraU1GTTBqZW8raQpQVC9iZkxycFpkRDJpd3JueWlpVEhWS3VCeDR4QWVZWGRFbUJLb1A1UjAzSGlEZFoybVBveElRQVMxd3MzKzY5Cm4wTE5hc1V0ZGx5eFlWeFhyOVovNzZGZENrM2JSZzVmVnRFMnJnNnJhTW0yS3hweTRLMU1VOVFTTU9Pa2gzL2YKNWNINzA1dHRIZ3pOL3BKNW81N0xtbVoyeDhPR1BQM1ZmOHZCd1FTa2s4RmZxSXQzMEJhK3hDdmdCV3kxLzlEcApFUlZkZ3FoYlNUejJoTEFSTXFWd2xzTXVSVU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=","tls.key":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeitvMDFXcXIyYTB1azhGZVhESFY5aFhmSUs4NGxvcnpZdlRnS0RiQ2RPaERqM2kvCnlndjBUZTJSMnRGWGJiSEpLazJtQ0hwTlUxWU5XeXgrQlJlcWMvRnVnaFVUdC9wNENOVUkxbkFvTlhXVnlOVVYKdmJhWkh0ZVZyVEo0elR5QnE3cXdnS1ZFYXhTM2M1RTgvYXkwbjVuckthVDFiQzFZQ3YzdGhnU3c5RmtNOXJSSwpJT0JQRzVEaktCcTZKaXNYSG1ZTHVKZmpsTWRUZzRTSW56NUtvYWlxWFdTbE43c3N5aHFLT3FEbWtxTnJpR2ZWCmsrVjN3SHBOMndxTFdqbDg5T2ZTR214UTNpRXJUUUdBUWVSTFMrZGhLbSsxdmpMRE5WZmI4bEhxajBQeTdiVmMKRjI0dURwZDJ2M1NwdDhmOE9lUDFFWGZkb0d0dWNxTTliNnFSNlFJREFRQUJBb0lCQUFaejdHUGJSYTRoMDlvKwpIQ0djWWxtYTRDdnhoRDRYM2VucVU3S3IwR2swZERSVnVRNGFST0RPU01LVDBMVFUyYnQ0WVhqTjR1eDlOVGpwCkxwZ1YzZkp2UWRERHVyTHhFUnlsRC9zbnkvZXN5Sk5OR2Jtam15ajc0K2RXTTYyYS9TTkpUZ1VRSEFsK3dSclQKSFNONllyaTVYRFVVcTVGSjd2dVlXZkRZNEcwVThDSDFUdFRHblFJM05rUVJjcEtYSnZaOWtxSkRLTCtVeDRKZQo1WVdTdFlza0VkalVQMlNzK0RiRzhoMGFxSEV1ZUxPT2xxTWpyd2hSNVFQdkJFeVV0OFpZbTNNWFR1bTI2OEt5CkU5NkdJWEgva1JyR1BjMTFaaVRzWk9rQXZyVlBSSmRDanRBMTNIdHVPcU9lSzF4cStJK05ESEVYaDUyeVQwZ1kKWnA0UHpra0NnWUVBNWpHZmtuV2hUTy9JVGNqNnpFRHc1eFQwN0ZucUg3Mks4TTJLSjdoeGhnd0ZkTVJ4UURUVwpOLzBRSGdMRzQzcXoxZk02RGZBbEZjc1lka1lZZGNqQUpUWUVnSzVRSDIxemhNdkp4ZzRFclQ3RjFmVHlXM0FQCmRENmZhdk5SUnRvRTQrQWQzVGRieUR0QStBV0JoRDhsQWh4M29RQjRxM0ROaWVFcTZUYUpvS01DZ1lFQTV6a3gKMFZWNnNZUWNHQnJ4eUtMT3dsVGtCSFRiTXdJV2ZZQVBDSDBNVUE2REhkS1ZPUmgvSml1S3NDMHVwYm10WllBZgpxTFpXbzJmTVoxWUM2NVRldmM5MEZVeU10amhRVS8wVnJJaTBFdFZmbEhyTGtMYjBTV0trRXEwOGxkdENWL3hVCmgxWkxzL0sycE1GbVQ2KzR3T2ljYUhBbW9JbDlqS3F1bkdpbWtBTUNnWUI4cCs3RC8xTmtPSTErSWhJK3ZnUTIKLzFCTEZiNEZoajFSZmQwTStZTHdsbDMyQjlOVWM4aDE5V0xlL1ozNjNoMjVCTWd4ZUJSOUlzaVNkQThXNmFtegovUGFmUU1ZKzNxU3FDem12T1RRckpVMDVPalpzY2RqTW1JVDRBOS9Gd0piWldDcVQrMENHeEIvQXNDcWRGUnpUCmNkc09veFMxc3BaN3ppWFF1U242aFFLQmdEcFMxL2tZbWFrN1RLYmI3UThSMmh0MHRFdFhlbzhrUUs0SlprRmEKNFljMEVlaXMzSTBaVzhFeURIcWgrdms4bTd0VmxTYkdUNVpLTVdvRGJSc2xZd1gzMVMwbU1Qd3B1a0ZsUGxsVgo1aTQxK2pVR3dHQlJkYzhvL1gva2lMcTRJc1QwMWhHSk4vRTlFTXNBS2FHQ0RwVkNWMm1VbUhtNEZKNHQwM3VLCmZqRW5Bb0dCQUxhMkdTNWExTUQ3WHdzY1pkQ05pU0JuYi9IVFc4VzZ0M1Q4eHIyQXArZkV2bEQvNVNHaC9NK1cKVEdFS25keTJlZXVQREs1ZTg1N3RxUnovcGsxeDFYR3lRMVRIbFVqK2V4aER5VWxDcE1xQkhTTFA2TjlzZDRkZApyRi9uVXR4ckJTY0pVc2Q0M2UwOTlGN0FJWVZJSGUwbVZudkQxUGs3bU80TWpyUnZucm5LCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"},"kind":"Secret","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.12.1"},"labels":{"app.kubernetes.io/managed-by":"pulumi","linkerd.io/extension":"viz"},"name":"tap-injector-k8s-tls","namespace":"linkerd-viz"},"type":"kubernetes.io/tls"}
",
            "linkerd.io/created-by": "linkerd/helm stable-2.12.1",
          },
          "name": "tap-injector-k8s-tls",
          "namespace": "linkerd-viz",
        },
        "type": "kubernetes.io/tls",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "secret-seaweedfs-db",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/sealed-secrets/sealed-secret-secret-seaweedfs-db-seaweedfs.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
    "spec": {
      "encryptedData": {
        "password": "inital-secrets",
        "user": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "helm.sh/hook": "pre-install",
            "helm.sh/resource-policy": "keep",
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Secret","metadata":{"annotations":{"helm.sh/hook":"pre-install","helm.sh/resource-policy":"keep"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"secret-seaweedfs-db","namespace":"seaweedfs"},"stringData":{"password":"HardCodedPassword","user":"YourSWUser"},"type":"Opaque"}
",
          },
          "name": "secret-seaweedfs-db",
          "namespace": "seaweedfs",
        },
        "type": "Opaque",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "seaweedfs-s3-secret",
      "namespace": "seaweedfs",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs/sealed-secrets/sealed-secret-seaweedfs-s3-secret-seaweedfs.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/infrastructure/seaweedfs",
    "spec": {
      "encryptedData": {
        "admin_access_key_id": "inital-secrets",
        "admin_secret_access_key": "inital-secrets",
        "read_access_key_id": "inital-secrets",
        "read_secret_access_key": "inital-secrets",
        "seaweedfs_s3_config": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "helm.sh/hook": "pre-install",
            "helm.sh/resource-policy": "keep",
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","kind":"Secret","metadata":{"annotations":{"helm.sh/hook":"pre-install","helm.sh/resource-policy":"keep"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"seaweedfs-s3-secret","namespace":"seaweedfs"},"stringData":{"admin_access_key_id":"AYT5kHfYO0CpN8k6","admin_secret_access_key":"Tl5ZB3BpqqYGTYPwBvNLCA1mgXnnJfIB","read_access_key_id":"7btZfLdYZYGIvgkr","read_secret_access_key":"nXnHCW7cKisWL17vYcgc84tcxfAIBplg","seaweedfs_s3_config":"{\\"identities\\":[{\\"name\\":\\"anvAdmin\\",\\"credentials\\":[{\\"accessKey\\":\\"AYT5kHfYO0CpN8k6\\",\\"secretKey\\":\\"Tl5ZB3BpqqYGTYPwBvNLCA1mgXnnJfIB\\"}],\\"actions\\":[\\"Admin\\",\\"Read\\",\\"Write\\"]},{\\"name\\":\\"anvReadOnly\\",\\"credentials\\":[{\\"accessKey\\":\\"7btZfLdYZYGIvgkr\\",\\"secretKey\\":\\"nXnHCW7cKisWL17vYcgc84tcxfAIBplg\\"}],\\"actions\\":[\\"Read\\"]}]}"},"type":"Opaque"}
",
          },
          "name": "seaweedfs-s3-secret",
          "namespace": "seaweedfs",
        },
        "type": "Opaque",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/surrealdb/sealed-secrets/sealed-secret-surrealdb-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/surrealdb",
    "spec": {
      "encryptedData": {
        "APP_ENVIRONMENT": "inital-secrets",
        "APP_EXTERNAL_BASE_URL": "inital-secrets",
        "APP_HOST": "inital-secrets",
        "APP_PORT": "inital-secrets",
        "TIKV_HOST": "inital-secrets",
        "TIKV_NAME": "inital-secrets",
        "TIKV_PORT": "inital-secrets",
        "TIKV_SERVICE_NAME": "inital-secrets",
        "TIKV_STORAGE_CLASS": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"APP_ENVIRONMENT":"bG9jYWw=","APP_EXTERNAL_BASE_URL":"aHR0cDovL2xvY2FsaG9zdDo4MDgw","APP_HOST":"MC4wLjAuMA==","APP_PORT":"ODAwMA==","TIKV_HOST":"dGlrdi1wZC5hcHBsaWNhdGlvbnM=","TIKV_NAME":"dGlrdg==","TIKV_PORT":"MjM3OQ==","TIKV_SERVICE_NAME":"dGlrdg==","TIKV_STORAGE_CLASS":"bGlub2RlLWJsb2NrLXN0b3JhZ2UtcmV0YWlu"},"kind":"Secret","metadata":{"annotations":{"sealedsecrets.bitnami.com/managed":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"surrealdb","namespace":"applications"}}
",
            "sealedsecrets.bitnami.com/managed": "true",
          },
          "name": "surrealdb",
          "namespace": "applications",
        },
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "meilisearch-master-key",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/sealed-secrets/sealed-secret-meilisearch-master-key-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {
      "encryptedData": {
        "MEILI_MASTER_KEY": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"MEILI_MASTER_KEY":"UG5vbU1DU3RkaGxuN1lIWDRidFM="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/component":"search-engine","app.kubernetes.io/instance":"meilisearch","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"meilisearch","app.kubernetes.io/part-of":"meilisearch","app.kubernetes.io/version":"v0.29.0","helm.sh/chart":"meilisearch-0.1.41"},"name":"meilisearch-master-key","namespace":"applications"}}
",
          },
          "name": "meilisearch-master-key",
          "namespace": "applications",
        },
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "graphql-surrealdb",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/sealed-secrets/sealed-secret-graphql-surrealdb-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {
      "encryptedData": {
        "APP_ENVIRONMENT": "inital-secrets",
        "APP_EXTERNAL_BASE_URL": "inital-secrets",
        "APP_HOST": "inital-secrets",
        "APP_PORT": "inital-secrets",
        "OAUTH_GITHUB_CLIENT_ID": "inital-secrets",
        "OAUTH_GITHUB_CLIENT_SECRET": "inital-secrets",
        "OAUTH_GOOGLE_CLIENT_ID": "inital-secrets",
        "OAUTH_GOOGLE_CLIENT_SECRET": "inital-secrets",
        "REDIS_HOST": "inital-secrets",
        "REDIS_PASSWORD": "inital-secrets",
        "REDIS_PORT": "inital-secrets",
        "REDIS_SERVICE_NAME": "inital-secrets",
        "REDIS_SERVICE_NAME_MASTER": "inital-secrets",
        "REDIS_USERNAME": "inital-secrets",
        "SURREALDB_HOST": "inital-secrets",
        "SURREALDB_NAME": "inital-secrets",
        "SURREALDB_PORT": "inital-secrets",
        "SURREALDB_ROOT_PASSWORD": "inital-secrets",
        "SURREALDB_ROOT_USERNAME": "inital-secrets",
        "SURREALDB_SERVICE_NAME": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"APP_ENVIRONMENT":"bG9jYWw=","APP_EXTERNAL_BASE_URL":"aHR0cDovL2xvY2FsaG9zdDo4MDgw","APP_HOST":"MC4wLjAuMA==","APP_PORT":"ODAwMA==","OAUTH_GITHUB_CLIENT_ID":"dGVzdA==","OAUTH_GITHUB_CLIENT_SECRET":"dGVzdA==","OAUTH_GOOGLE_CLIENT_ID":"dGVzdA==","OAUTH_GOOGLE_CLIENT_SECRET":"dGVzdA==","REDIS_HOST":"cmVkaXMtbWFzdGVyLmFwcGxpY2F0aW9ucw==","REDIS_PASSWORD":"dGVzdA==","REDIS_PORT":"NjM3OQ==","REDIS_SERVICE_NAME":"cmVkaXM=","REDIS_SERVICE_NAME_MASTER":"cmVkaXMtbWFzdGVy","REDIS_USERNAME":"dGVzdA==","SURREALDB_HOST":"c3VycmVhbGRiLmFwcGxpY2F0aW9ucw==","SURREALDB_NAME":"c3VycmVhbGRi","SURREALDB_PORT":"ODAwMA==","SURREALDB_ROOT_PASSWORD":"dGVzdA==","SURREALDB_ROOT_USERNAME":"dGVzdA==","SURREALDB_SERVICE_NAME":"c3VycmVhbGRi"},"kind":"Secret","metadata":{"annotations":{"sealedsecrets.bitnami.com/managed":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"graphql-surrealdb","namespace":"applications"}}
",
            "sealedsecrets.bitnami.com/managed": "true",
          },
          "name": "graphql-surrealdb",
          "namespace": "applications",
        },
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "redis",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb/sealed-secrets/sealed-secret-redis-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/graphql-surrealdb",
    "spec": {
      "encryptedData": {
        "redis-password": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"redis-password":"dGVzdA=="},"kind":"Secret","metadata":{"labels":{"app.kubernetes.io/instance":"redis","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"redis","helm.sh/chart":"redis-17.3.2"},"name":"redis","namespace":"applications"},"type":"Opaque"}
",
          },
          "name": "redis",
          "namespace": "applications",
        },
        "type": "Opaque",
      },
    },
  },
  {
    "apiVersion": "bitnami.com/v1alpha1",
    "kind": "SealedSecret",
    "metadata": {
      "annotations": {
        "sealedsecrets.bitnami.com/managed": "true",
      },
      "name": "react-web",
      "namespace": "applications",
    },
    "path": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web/sealed-secrets/sealed-secret-react-web-applications.yaml",
    "resourceBaseDir": "/Users/oyelowo/Desktop/dev/modern-distributed-app-template/kubernetes/generatedManifests/test/services/react-web",
    "spec": {
      "encryptedData": {
        "APP_ENVIRONMENT": "inital-secrets",
        "APP_EXTERNAL_BASE_URL": "inital-secrets",
        "APP_HOST": "inital-secrets",
        "APP_PORT": "inital-secrets",
      },
      "template": {
        "metadata": {
          "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{"apiVersion":"v1","data":{"APP_ENVIRONMENT":"bG9jYWw=","APP_EXTERNAL_BASE_URL":"aHR0cDovL2xvY2FsaG9zdDo4MDgw","APP_HOST":"MC4wLjAuMA==","APP_PORT":"MzAwMA=="},"kind":"Secret","metadata":{"annotations":{"sealedsecrets.bitnami.com/managed":"true"},"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"react-web","namespace":"applications"}}
",
            "sealedsecrets.bitnami.com/managed": "true",
          },
          "name": "react-web",
          "namespace": "applications",
        },
      },
    },
  },
]
`;
