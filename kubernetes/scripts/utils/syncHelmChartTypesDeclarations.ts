import yaml from 'yaml';
import { helmChartsInfo } from '../../src/shared/helmChartInfo.js';
import chalk from 'chalk';
import sh from 'shelljs';
import JsonToTS from 'json-to-ts';
import _ from 'lodash';
import { getMainBaseDir } from '../../src/shared/directoriesManager.js';
import path from 'node:path';

export const getHelmChartTypesDir = () => {
    const BASE_DIR = getMainBaseDir();
    return path.join(BASE_DIR, 'generatedHelmChartsTsTypes');
};

export function syncHelmChartTypesDeclarations() {
    const helmChartsDir = getHelmChartTypesDir();
    sh.exec(`rm -rf ${helmChartsDir}`);
    sh.exec(`mkdir -p ${helmChartsDir}`);

    Object.entries(helmChartsInfo).forEach(([repoName, repoValues]) => {
        const { repo: repoUrl, charts } = repoValues;
        sh.echo(chalk.blueBright(`Syncing helm chart - ${repoName} from ${repoUrl}`));

        sh.exec(`helm repo add ${repoName} ${repoUrl}`, { silent: true });
        sh.exec(`helm repo update ${repoName}`, { silent: true });

        Object.values(charts).forEach(({ chart, version }) => {
            const { stdout: valuesYaml, stderr } = sh.exec(
                `helm show values ${repoName}/${chart} --version ${version}`,
                { silent: true }
            );

            if (stderr) throw new Error(chalk.redBright(`Problem happened. Error: ${stderr}`));

            // Make them camel case in case their is hyphen which would be an invalid type
            const typeFileName = _.camelCase(`${chart}${_.upperFirst(_.camelCase(repoName))}`);
            const valuesJson = yaml.parse(valuesYaml, { strict: false }) ?? {};

            const tsDec = JsonToTS.default(valuesJson, {
                rootName: `I${_.upperFirst(typeFileName)}`,
            })
                .map((typeInterface, i) => (i == 0 ? `export ${typeInterface}` : typeInterface))
                .join('\n');

            sh.exec(
                `echo ${JSON.stringify(
                    `// Don't Edit. This is autogenerated. \n ${tsDec}`
                )} > ${helmChartsDir}/${typeFileName}.ts`
            );
        });
    });
}
