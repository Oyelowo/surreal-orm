// Don't Edit. This is autogenerated.
export interface ITidbClusterPingcap {
    rbac: Rbac;
    extraLabels: ExtraLabels;
    schedulerName: string;
    timezone: string;
    pvReclaimPolicy: string;
    enablePVReclaim: boolean;
    services: Service[];
    discovery: Discovery;
    enableConfigMapRollout: boolean;
    haTopologyKey: string;
    tlsCluster: TlsCluster;
    helper: Helper;
    pd: Pd;
    tikv: Tikv;
    tidb: Tidb;
    mysqlClient: MysqlClient;
    busybox: MysqlClient;
    monitor: Monitor;
    binlog: Binlog;
    scheduledBackup: ScheduledBackup;
    importer: Importer;
    metaInstance: string;
    metaType: string;
    metaValue: string;
}
interface Importer {
    create: boolean;
    image: string;
    imagePullPolicy: string;
    storageClassName: string;
    storage: string;
    resources: ExtraLabels;
    affinity: ExtraLabels;
    tolerations: any[];
    pushgatewayImage: string;
    pushgatewayImagePullPolicy: string;
    config: string;
}
interface ScheduledBackup {
    create: boolean;
    mydumperImage: string;
    mydumperImagePullPolicy: string;
    storageClassName: string;
    storage: string;
    cleanupAfterUpload: boolean;
    schedule: string;
    suspend: boolean;
    successfulJobsHistoryLimit: number;
    failedJobsHistoryLimit: number;
    startingDeadlineSeconds: number;
    backoffLimit: number;
    restartPolicy: string;
    options: string;
    tikvGCLifeTime: string;
    secretName: string;
    gcp: ExtraLabels;
    ceph: ExtraLabels;
    s3: ExtraLabels;
    resources: Resources3;
    affinity: ExtraLabels;
    tolerations: any[];
}
interface Binlog {
    pump: Pump;
    drainer: Drainer;
}
interface Drainer {
    create: boolean;
    image: string;
    imagePullPolicy: string;
    logLevel: string;
    storageClassName: string;
    storage: string;
    affinity: ExtraLabels;
    tolerations: any[];
    workerCount: number;
    detectInterval: number;
    disableDetect: boolean;
    disableDispatch: boolean;
    ignoreSchemas: string;
    initialCommitTs: number;
    safeMode: boolean;
    txnBatch: number;
    destDBType: string;
    mysql: ExtraLabels;
    kafka: ExtraLabels;
    resources: Resources3;
}
interface Pump {
    create: boolean;
    replicas: number;
    image: string;
    imagePullPolicy: string;
    logLevel: string;
    storageClassName: string;
    storage: string;
    affinity: ExtraLabels;
    tolerations: any[];
    syncLog: boolean;
    gc: number;
    heartbeatInterval: number;
    resources: Resources3;
}
interface Monitor {
    create: boolean;
    persistent: boolean;
    storageClassName: string;
    storage: string;
    initializer: Initializer2;
    reloader: Reloader;
    grafana: Grafana;
    prometheus: Prometheus;
    nodeSelector: ExtraLabels;
    tolerations: any[];
}
interface Prometheus {
    image: string;
    imagePullPolicy: string;
    logLevel: string;
    resources: Resources3;
    service: Service3;
    reserveDays: number;
}
interface Grafana {
    create: boolean;
    image: string;
    imagePullPolicy: string;
    logLevel: string;
    resources: Resources3;
    username: string;
    password: string;
    config: Config2;
    service: Service3;
}
interface Config2 {
    GF_AUTH_ANONYMOUS_ENABLED: string;
    GF_AUTH_ANONYMOUS_ORG_NAME: string;
    GF_AUTH_ANONYMOUS_ORG_ROLE: string;
}
interface Reloader {
    create: boolean;
    image: string;
    imagePullPolicy: string;
    service: Service3;
    resources: ExtraLabels;
}
interface Service3 {
    type: string;
    portName: string;
}
interface Initializer2 {
    image: string;
    imagePullPolicy: string;
    config: Config;
    resources: ExtraLabels;
}
interface Config {
    K8S_PROMETHEUS_URL: string;
}
interface MysqlClient {
    image: string;
    imagePullPolicy: string;
}
interface Tidb {
    config: string;
    replicas: number;
    image: string;
    imagePullPolicy: string;
    resources: Resources3;
    affinity: ExtraLabels;
    nodeSelector: ExtraLabels;
    tolerations: any[];
    annotations: ExtraLabels;
    hostNetwork: boolean;
    podSecurityContext: ExtraLabels;
    priorityClassName: string;
    maxFailoverCount: number;
    service: Service2;
    separateSlowLog: boolean;
    slowLogTailer: SlowLogTailer;
    initializer: Initializer;
    plugin: Plugin;
    tlsClient: TlsCluster;
}
interface Plugin {
    enable: boolean;
    directory: string;
    list: string[];
}
interface Initializer {
    resources: ExtraLabels;
}
interface SlowLogTailer {
    image: string;
    resources: Resources;
}
interface Service2 {
    type: string;
    exposeStatus: boolean;
}
interface Resources3 {
    limits: ExtraLabels;
    requests: ExtraLabels;
}
interface Tikv {
    config: string;
    replicas: number;
    image: string;
    storageClassName: string;
    imagePullPolicy: string;
    resources: Resources2;
    affinity: ExtraLabels;
    nodeSelector: ExtraLabels;
    tolerations: any[];
    annotations: ExtraLabels;
    hostNetwork: boolean;
    podSecurityContext: ExtraLabels;
    priorityClassName: string;
    maxFailoverCount: number;
    postArgScript: string;
}
interface Pd {
    config: string;
    service: ExtraLabels;
    replicas: number;
    image: string;
    storageClassName: string;
    imagePullPolicy: string;
    resources: Resources2;
    affinity: ExtraLabels;
    nodeSelector: ExtraLabels;
    tolerations: any[];
    annotations: ExtraLabels;
    hostNetwork: boolean;
    podSecurityContext: ExtraLabels;
    priorityClassName: string;
}
interface Resources2 {
    limits: ExtraLabels;
    requests: Requests;
}
interface Requests {
    storage: string;
}
interface Helper {
    image: string;
}
interface TlsCluster {
    enabled: boolean;
}
interface Discovery {
    image: string;
    imagePullPolicy: string;
    resources: Resources;
    affinity: ExtraLabels;
    tolerations: any[];
}
interface Resources {
    limits: Limits;
    requests: Limits;
}
interface Limits {
    cpu: string;
    memory: string;
}
interface Service {
    name: string;
    type: string;
}
interface ExtraLabels {}
interface Rbac {
    create: boolean;
    crossNamespace: boolean;
}
