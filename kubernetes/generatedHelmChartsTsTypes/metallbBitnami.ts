// Don't Edit. This is autogenerated.
export interface IMetallbBitnami {
	global: Global;
	kubeVersion: string;
	nameOverride: string;
	fullnameOverride: string;
	commonLabels: CommonLabels;
	commonAnnotations: CommonLabels;
	extraDeploy: any[];
	diagnosticMode: DiagnosticMode;
	rbac: Rbac;
	psp: Rbac;
	networkPolicy: NetworkPolicy;
	prometheusRule: PrometheusRule;
	controller: Controller;
	speaker: Speaker;
}
interface Speaker {
	image: Image;
	updateStrategy: UpdateStrategy;
	rbac: Rbac;
	hostAliases: any[];
	psp: Rbac;
	priorityClassName: string;
	terminationGracePeriodSeconds: number;
	resources: Resources;
	nodeSelector: CommonLabels;
	tolerations: any[];
	affinity: CommonLabels;
	nodeAffinityPreset: NodeAffinityPreset;
	podAffinityPreset: string;
	podAntiAffinityPreset: string;
	podAnnotations: CommonLabels;
	podLabels: CommonLabels;
	podSecurityContext: PodSecurityContext;
	containerSecurityContext: ContainerSecurityContext2;
	command: any[];
	args: any[];
	lifecycleHooks: CommonLabels;
	sidecars: any[];
	initContainers: any[];
	serviceAccount: ServiceAccount;
	secretName: string;
	secretKey: string;
	secretValue: string;
	extraEnvVars: any[];
	extraEnvVarsCM: string;
	extraEnvVarsSecret: string;
	extraVolumes: any[];
	extraVolumeMounts: any[];
	containerPorts: ContainerPorts;
	livenessProbe: LivenessProbe;
	readinessProbe: LivenessProbe;
	startupProbe: LivenessProbe;
	customStartupProbe: CommonLabels;
	customLivenessProbe: CommonLabels;
	customReadinessProbe: CommonLabels;
	metrics: Metrics;
}
interface ContainerSecurityContext2 {
	enabled: boolean;
	runAsUser: number;
	allowPrivilegeEscalation: boolean;
	readOnlyRootFilesystem: boolean;
	capabilities: Capabilities2;
}
interface Capabilities2 {
	drop: string[];
	add: string[];
}
interface Controller {
	image: Image;
	updateStrategy: UpdateStrategy;
	hostAliases: any[];
	rbac: Rbac;
	psp: Rbac;
	priorityClassName: string;
	schedulerName: string;
	terminationGracePeriodSeconds: number;
	topologySpreadConstraints: any[];
	resources: Resources;
	nodeSelector: CommonLabels;
	tolerations: any[];
	affinity: CommonLabels;
	podAnnotations: CommonLabels;
	podLabels: CommonLabels;
	podAffinityPreset: string;
	podAntiAffinityPreset: string;
	nodeAffinityPreset: NodeAffinityPreset;
	podSecurityContext: PodSecurityContext;
	containerSecurityContext: ContainerSecurityContext;
	command: any[];
	args: any[];
	lifecycleHooks: CommonLabels;
	extraEnvVars: any[];
	extraEnvVarsCM: string;
	extraEnvVarsSecret: string;
	extraVolumes: any[];
	extraVolumeMounts: any[];
	sidecars: any[];
	initContainers: any[];
	serviceAccount: ServiceAccount;
	revisionHistoryLimit: number;
	containerPorts: ContainerPorts;
	livenessProbe: LivenessProbe;
	readinessProbe: LivenessProbe;
	startupProbe: LivenessProbe;
	customStartupProbe: CommonLabels;
	customLivenessProbe: CommonLabels;
	customReadinessProbe: CommonLabels;
	metrics: Metrics;
}
interface Metrics {
	enabled: boolean;
	service: Service;
	serviceMonitor: ServiceMonitor;
}
interface ServiceMonitor {
	enabled: boolean;
	namespace: string;
	jobLabel: string;
	interval: string;
	scrapeTimeout: string;
	metricRelabelings: any[];
	relabelings: any[];
	selector: CommonLabels;
	labels: CommonLabels;
	honorLabels: boolean;
}
interface Service {
	port: number;
	annotations: Annotations;
}
interface Annotations {
	"prometheus.io/scrape": string;
	"prometheus.io/port": string;
	"prometheus.io/path": string;
}
interface LivenessProbe {
	enabled: boolean;
	failureThreshold: number;
	initialDelaySeconds: number;
	periodSeconds: number;
	successThreshold: number;
	timeoutSeconds: number;
}
interface ContainerPorts {
	metrics: number;
}
interface ServiceAccount {
	create: boolean;
	name: string;
	automountServiceAccountToken: boolean;
	annotations: CommonLabels;
}
interface ContainerSecurityContext {
	enabled: boolean;
	runAsUser: number;
	runAsNonRoot: boolean;
	allowPrivilegeEscalation: boolean;
	readOnlyRootFilesystem: boolean;
	capabilities: Capabilities;
}
interface Capabilities {
	drop: string[];
}
interface PodSecurityContext {
	enabled: boolean;
	fsGroup: number;
}
interface NodeAffinityPreset {
	type: string;
	key: string;
	values: any[];
}
interface Resources {
	limits: CommonLabels;
	requests: CommonLabels;
}
interface UpdateStrategy {
	type: string;
}
interface Image {
	registry: string;
	repository: string;
	tag: string;
	digest: string;
	pullPolicy: string;
	pullSecrets: any[];
}
interface PrometheusRule {
	enabled: boolean;
}
interface NetworkPolicy {
	enabled: boolean;
	ingressNSMatchLabels: CommonLabels;
	ingressNSPodMatchLabels: CommonLabels;
}
interface Rbac {
	create: boolean;
}
interface DiagnosticMode {
	enabled: boolean;
	command: string[];
	args: string[];
}
interface CommonLabels {}
interface Global {
	imageRegistry: string;
	imagePullSecrets: any[];
}
