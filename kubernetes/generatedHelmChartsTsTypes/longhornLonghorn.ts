// Don't Edit. This is autogenerated.
export interface ILonghornLonghorn {
    global: Global;
    image: Image;
    service: Service;
    persistence: Persistence;
    csi: Csi2;
    defaultSettings: DefaultSettings;
    privateRegistry: PrivateRegistry;
    longhornManager: LonghornManager;
    longhornDriver: LonghornDriver;
    longhornUI: LonghornUI;
    ingress: Ingress;
    enablePSP: boolean;
    namespaceOverride: string;
    annotations: NodeSelector2;
    serviceAccount: ServiceAccount;
}
interface ServiceAccount {
    annotations: NodeSelector2;
}
interface Ingress {
    enabled: boolean;
    ingressClassName?: any;
    host: string;
    tls: boolean;
    secureBackends: boolean;
    tlsSecret: string;
    path: string;
    annotations?: any;
    secrets?: any;
}
interface LonghornUI {
    replicas: number;
    priorityClass?: any;
    tolerations: any[];
    nodeSelector: NodeSelector2;
}
interface LonghornDriver {
    priorityClass?: any;
    tolerations: any[];
    nodeSelector: NodeSelector2;
}
interface LonghornManager {
    log: Log;
    priorityClass?: any;
    tolerations: any[];
    nodeSelector: NodeSelector2;
    serviceAnnotations: NodeSelector2;
}
interface NodeSelector2 {}
interface Log {
    format: string;
}
interface PrivateRegistry {
    createSecret?: any;
    registryUrl?: any;
    registryUser?: any;
    registryPasswd?: any;
    registrySecret?: any;
}
interface DefaultSettings {
    backupTarget?: any;
    backupTargetCredentialSecret?: any;
    allowRecurringJobWhileVolumeDetached?: any;
    createDefaultDiskLabeledNodes?: any;
    defaultDataPath?: any;
    defaultDataLocality?: any;
    replicaSoftAntiAffinity?: any;
    replicaAutoBalance?: any;
    storageOverProvisioningPercentage?: any;
    storageMinimalAvailablePercentage?: any;
    upgradeChecker?: any;
    defaultReplicaCount?: any;
    defaultLonghornStaticStorageClass?: any;
    backupstorePollInterval?: any;
    failedBackupTTL?: any;
    taintToleration?: any;
    systemManagedComponentsNodeSelector?: any;
    priorityClass?: any;
    autoSalvage?: any;
    autoDeletePodWhenVolumeDetachedUnexpectedly?: any;
    disableSchedulingOnCordonedNode?: any;
    replicaZoneSoftAntiAffinity?: any;
    nodeDownPodDeletionPolicy?: any;
    allowNodeDrainWithLastHealthyReplica?: any;
    mkfsExt4Parameters?: any;
    disableReplicaRebuild?: any;
    replicaReplenishmentWaitInterval?: any;
    concurrentReplicaRebuildPerNodeLimit?: any;
    disableRevisionCounter?: any;
    systemManagedPodsImagePullPolicy?: any;
    allowVolumeCreationWithDegradedAvailability?: any;
    autoCleanupSystemGeneratedSnapshot?: any;
    concurrentAutomaticEngineUpgradePerNodeLimit?: any;
    backingImageCleanupWaitInterval?: any;
    backingImageRecoveryWaitInterval?: any;
    guaranteedEngineManagerCPU?: any;
    guaranteedReplicaManagerCPU?: any;
    kubernetesClusterAutoscalerEnabled?: any;
    orphanAutoDeletion?: any;
    storageNetwork?: any;
}
interface Csi2 {
    kubeletRootDir?: any;
    attacherReplicaCount?: any;
    provisionerReplicaCount?: any;
    resizerReplicaCount?: any;
    snapshotterReplicaCount?: any;
}
interface Persistence {
    defaultClass: boolean;
    defaultFsType: string;
    defaultClassReplicaCount: number;
    defaultDataLocality: string;
    reclaimPolicy: string;
    migratable: boolean;
    recurringJobSelector: RecurringJobSelector;
    backingImage: BackingImage;
}
interface BackingImage {
    enable: boolean;
    name?: any;
    dataSourceType?: any;
    dataSourceParameters?: any;
    expectedChecksum?: any;
}
interface RecurringJobSelector {
    enable: boolean;
    jobList: any[];
}
interface Service {
    ui: Ui;
    manager: Manager;
}
interface Manager {
    type: string;
    nodePort: string;
    loadBalancerIP: string;
    loadBalancerSourceRanges: string;
}
interface Ui {
    type: string;
    nodePort?: any;
}
interface Image {
    longhorn: Longhorn;
    csi: Csi;
    pullPolicy: string;
}
interface Csi {
    attacher: Engine;
    provisioner: Engine;
    nodeDriverRegistrar: Engine;
    resizer: Engine;
    snapshotter: Engine;
}
interface Longhorn {
    engine: Engine;
    manager: Engine;
    ui: Engine;
    instanceManager: Engine;
    shareManager: Engine;
    backingImageManager: Engine;
}
interface Engine {
    repository: string;
    tag: string;
}
interface Global {
    cattle: Cattle;
}
interface Cattle {
    systemDefaultRegistry: string;
    windowsCluster: WindowsCluster;
}
interface WindowsCluster {
    enabled: boolean;
    tolerations: Toleration[];
    nodeSelector: NodeSelector;
    defaultSetting: DefaultSetting;
}
interface DefaultSetting {
    taintToleration: string;
    systemManagedComponentsNodeSelector: string;
}
interface NodeSelector {
    'kubernetes.io/os': string;
}
interface Toleration {
    key: string;
    value: string;
    effect: string;
    operator: string;
}
