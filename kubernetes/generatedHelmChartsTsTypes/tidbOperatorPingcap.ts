// Don't Edit. This is autogenerated.
export interface ITidbOperatorPingcap {
	clusterScoped: boolean;
	rbac: Rbac;
	timezone: string;
	operatorImage: string;
	imagePullPolicy: string;
	tidbBackupManagerImage: string;
	features: any[];
	appendReleaseSuffix: boolean;
	controllerManager: ControllerManager;
	scheduler: Scheduler;
	advancedStatefulset: AdvancedStatefulset;
	admissionWebhook: AdmissionWebhook;
}
interface AdmissionWebhook {
	create: boolean;
	replicas: number;
	serviceAccount: string;
	logLevel: number;
	rbac: Rbac;
	validation: Validation;
	mutation: Mutation;
	failurePolicy: FailurePolicy;
	apiservice: Apiservice;
	cabundle: string;
	securityContext: Affinity;
	nodeSelector: Affinity;
	tolerations: any[];
}
interface Apiservice {
	insecureSkipTLSVerify: boolean;
	tlsSecret: string;
	caBundle: string;
}
interface FailurePolicy {
	validation: string;
	mutation: string;
}
interface Mutation {
	pingcapResources: boolean;
}
interface Validation {
	statefulSets: boolean;
	pingcapResources: boolean;
}
interface AdvancedStatefulset {
	create: boolean;
	image: string;
	imagePullPolicy: string;
	serviceAccount: string;
	logLevel: number;
	replicas: number;
	resources: Resources2;
	affinity: Affinity;
	nodeSelector: Affinity;
	tolerations: any[];
	securityContext: Affinity;
}
interface Scheduler {
	create: boolean;
	serviceAccount: string;
	logLevel: number;
	replicas: number;
	schedulerName: string;
	resources: Resources2;
	kubeSchedulerImageName: string;
	affinity: Affinity;
	nodeSelector: Affinity;
	tolerations: any[];
	securityContext: Affinity;
	podAnnotations: Affinity;
	configmapAnnotations: Affinity;
}
interface Resources2 {
	limits: Requests;
	requests: Requests;
}
interface ControllerManager {
	create: boolean;
	serviceAccount: string;
	clusterPermissions: ClusterPermissions;
	logLevel: number;
	replicas: number;
	resources: Resources;
	autoFailover: boolean;
	pdFailoverPeriod: string;
	tikvFailoverPeriod: string;
	tidbFailoverPeriod: string;
	tiflashFailoverPeriod: string;
	dmMasterFailoverPeriod: string;
	dmWorkerFailoverPeriod: string;
	affinity: Affinity;
	nodeSelector: Affinity;
	tolerations: any[];
	selector: any[];
	securityContext: Affinity;
	podAnnotations: Affinity;
}
interface Affinity {}
interface Resources {
	requests: Requests;
}
interface Requests {
	cpu: string;
	memory: string;
}
interface ClusterPermissions {
	nodes: boolean;
	persistentvolumes: boolean;
	storageclasses: boolean;
}
interface Rbac {
	create: boolean;
}
