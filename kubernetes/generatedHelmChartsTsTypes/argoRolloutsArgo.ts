// Don't Edit. This is autogenerated.
export interface IArgoRolloutsArgo {
	installCRDs: boolean;
	keepCRDs: boolean;
	clusterInstall: boolean;
	createClusterAggregateRoles: boolean;
	nameOverride?: any;
	fullnameOverride?: any;
	apiVersionOverrides: ApiVersionOverrides;
	kubeVersionOverride: string;
	extraObjects: any[];
	controller: Controller;
	serviceAccount: ServiceAccount;
	crdAnnotations: NodeSelector;
	podAnnotations: NodeSelector;
	podSecurityContext: PodSecurityContext;
	containerSecurityContext: NodeSelector;
	serviceAnnotations: NodeSelector;
	podLabels: NodeSelector;
	imagePullSecrets: any[];
	dashboard: Dashboard;
	notifications: Notifications;
}
interface Notifications {
	secret: Secret;
	notifiers: NodeSelector;
	templates: NodeSelector;
	triggers: NodeSelector;
}
interface Secret {
	create: boolean;
	items: NodeSelector;
}
interface Dashboard {
	enabled: boolean;
	readonly: boolean;
	component: string;
	nodeSelector: NodeSelector;
	tolerations: any[];
	affinity: NodeSelector;
	priorityClassName: string;
	createClusterRole: boolean;
	replicas: number;
	image: Image;
	extraArgs: any[];
	extraEnv: any[];
	resources: NodeSelector;
	podSecurityContext: PodSecurityContext;
	containerSecurityContext: NodeSelector;
	service: Service;
	serviceAccount: ServiceAccount;
	pdb: Pdb;
	ingress: Ingress;
}
interface Ingress {
	enabled: boolean;
	annotations: NodeSelector;
	labels: NodeSelector;
	ingressClassName: string;
	hosts: any[];
	paths: string[];
	pathType: string;
	extraPaths: any[];
	tls: any[];
}
interface Service {
	type: string;
	loadBalancerIP: string;
	loadBalancerSourceRanges: any[];
	externalIPs: any[];
	annotations: NodeSelector;
	labels: NodeSelector;
	portName: string;
	port: number;
	targetPort: number;
	nodePort?: any;
}
interface PodSecurityContext {
	runAsNonRoot: boolean;
}
interface ServiceAccount {
	create: boolean;
	annotations: NodeSelector;
	name: string;
}
interface Controller {
	component: string;
	nodeSelector: NodeSelector;
	tolerations: any[];
	affinity: NodeSelector;
	priorityClassName: string;
	replicas: number;
	image: Image;
	extraArgs: any[];
	extraEnv: any[];
	extraContainers: any[];
	initContainers: any[];
	resources: NodeSelector;
	createClusterRole: boolean;
	metrics: Metrics;
	livenessProbe: LivenessProbe;
	readinessProbe: LivenessProbe;
	pdb: Pdb;
}
interface Pdb {
	labels: NodeSelector;
	annotations: NodeSelector;
	enabled: boolean;
	minAvailable?: any;
	maxUnavailable?: any;
}
interface LivenessProbe {
	httpGet: HttpGet;
	initialDelaySeconds: number;
	periodSeconds: number;
	failureThreshold: number;
	successThreshold: number;
	timeoutSeconds: number;
}
interface HttpGet {
	path: string;
	port: string;
}
interface Metrics {
	enabled: boolean;
	serviceMonitor: ServiceMonitor;
}
interface ServiceMonitor {
	enabled: boolean;
	additionalLabels: NodeSelector;
	additionalAnnotations: NodeSelector;
}
interface Image {
	registry: string;
	repository: string;
	tag: string;
	pullPolicy: string;
}
interface NodeSelector {}
interface ApiVersionOverrides {
	ingress: string;
}
