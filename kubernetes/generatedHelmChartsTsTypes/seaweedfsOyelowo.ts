// Don't Edit. This is autogenerated.
export interface ISeaweedfsOyelowo {
    global: Global;
    image: Image;
    master: Master;
    volume: Volume;
    filer: Filer;
    s3: S32;
    certificates: Certificates;
}
interface Certificates {
    commonName: string;
    ipAddresses: any[];
    keyAlgorithm: string;
    keySize: number;
    duration: string;
    renewBefore: string;
}
interface S32 {
    enabled: boolean;
    repository?: any;
    imageName?: any;
    imageTag?: any;
    restartPolicy?: any;
    replicas: number;
    port: number;
    metricsPort: number;
    loggingOverrideLevel?: any;
    allowEmptyFolder: boolean;
    enableAuth: boolean;
    skipAuthSecretCreation: boolean;
    auditLogConfig: AuditLogConfig;
    domainName: string;
    initContainers: string;
    extraVolumes: string;
    extraVolumeMounts: string;
    resources?: any;
    tolerations: string;
    nodeSelector: string;
    priorityClassName: string;
    logs: Data;
}
interface Filer {
    enabled: boolean;
    repository?: any;
    imageName?: any;
    imageTag?: any;
    imageOverride?: any;
    restartPolicy?: any;
    replicas: number;
    port: number;
    grpcPort: number;
    metricsPort: number;
    loggingOverrideLevel?: any;
    defaultReplicaPlacement: string;
    disableDirListing: boolean;
    maxMB?: any;
    encryptVolumeData: boolean;
    redirectOnRead: boolean;
    dirListLimit: number;
    disableHttp: boolean;
    enablePVC: boolean;
    storage: string;
    storageClass?: any;
    data: Data;
    logs: Data;
    initContainers: string;
    extraVolumes: string;
    extraVolumeMounts: string;
    affinity: string;
    updatePartition: number;
    resources?: any;
    tolerations: string;
    nodeSelector: string;
    priorityClassName: string;
    ingress: Ingress;
    extraEnvironmentVars: ExtraEnvironmentVars3;
    s3: S3;
}
interface S3 {
    enabled: boolean;
    port: number;
    allowEmptyFolder: boolean;
    domainName: string;
    enableAuth: boolean;
    skipAuthSecretCreation: boolean;
    auditLogConfig: AuditLogConfig;
}
interface AuditLogConfig {}
interface ExtraEnvironmentVars3 {
    WEED_MYSQL_ENABLED: string;
    WEED_MYSQL_HOSTNAME: string;
    WEED_MYSQL_PORT: string;
    WEED_MYSQL_DATABASE: string;
    WEED_MYSQL_CONNECTION_MAX_IDLE: string;
    WEED_MYSQL_CONNECTION_MAX_OPEN: string;
    WEED_MYSQL_CONNECTION_MAX_LIFETIME_SECONDS: string;
    WEED_MYSQL_INTERPOLATEPARAMS: string;
    WEED_LEVELDB2_ENABLED: string;
    WEED_FILER_OPTIONS_RECURSIVE_DELETE: string;
    WEED_FILER_BUCKETS_FOLDER: string;
}
interface Volume {
    enabled: boolean;
    repository?: any;
    imageName?: any;
    imageTag?: any;
    imageOverride?: any;
    restartPolicy?: any;
    port: number;
    grpcPort: number;
    metricsPort: number;
    ipBind: string;
    replicas: number;
    loggingOverrideLevel?: any;
    pulseSeconds?: any;
    index?: any;
    fileSizeLimitMB?: any;
    minFreeSpacePercent: number;
    data: Data;
    idx: Data;
    logs: Data;
    compactionMBps: string;
    dir: string;
    dir_idx?: any;
    maxVolumes: string;
    rack?: any;
    dataCenter?: any;
    readMode: string;
    whiteList?: any;
    imagesFixOrientation: boolean;
    initContainers: string;
    extraVolumes: string;
    extraVolumeMounts: string;
    affinity: string;
    resources?: any;
    tolerations: string;
    nodeSelector: string;
    priorityClassName: string;
}
interface Master {
    enabled: boolean;
    repository?: any;
    imageName?: any;
    imageTag?: any;
    imageOverride?: any;
    restartPolicy?: any;
    replicas: number;
    port: number;
    grpcPort: number;
    metricsPort: number;
    ipBind: string;
    volumePreallocate: boolean;
    volumeSizeLimitMB: number;
    loggingOverrideLevel?: any;
    pulseSeconds?: any;
    garbageThreshold?: any;
    metricsIntervalSec: number;
    defaultReplication: string;
    disableHttp: boolean;
    data: Data;
    logs: Data;
    initContainers: string;
    extraVolumes: string;
    extraVolumeMounts: string;
    resources?: any;
    updatePartition: number;
    affinity: string;
    tolerations: string;
    nodeSelector: string;
    priorityClassName: string;
    ingress: Ingress;
    extraEnvironmentVars: ExtraEnvironmentVars2;
}
interface ExtraEnvironmentVars2 {
    WEED_MASTER_VOLUME_GROWTH_COPY_1: number;
    WEED_MASTER_VOLUME_GROWTH_COPY_2: number;
    WEED_MASTER_VOLUME_GROWTH_COPY_3: number;
    WEED_MASTER_VOLUME_GROWTH_COPY_OTHER: number;
}
interface Ingress {
    enabled: boolean;
    className: string;
    annotations: Annotations;
}
interface Annotations {
    'nginx.ingress.kubernetes.io/auth-type': string;
    'nginx.ingress.kubernetes.io/auth-secret': string;
    'nginx.ingress.kubernetes.io/auth-realm': string;
    'nginx.ingress.kubernetes.io/service-upstream': string;
    'nginx.ingress.kubernetes.io/rewrite-target': string;
    'nginx.ingress.kubernetes.io/use-regex': string;
    'nginx.ingress.kubernetes.io/enable-rewrite-log': string;
    'nginx.ingress.kubernetes.io/ssl-redirect': string;
    'nginx.ingress.kubernetes.io/force-ssl-redirect': string;
    'nginx.ingress.kubernetes.io/configuration-snippet': string;
}
interface Data {
    type: string;
    size: string;
    storageClass: string;
}
interface Image {
    registry: string;
    repository: string;
}
interface Global {
    registry: string;
    repository: string;
    imageName: string;
    imagePullPolicy: string;
    imagePullSecrets: string;
    restartPolicy: string;
    loggingLevel: number;
    enableSecurity: boolean;
    monitoring: Monitoring;
    enableReplication: boolean;
    replicationPlacment: string;
    extraEnvironmentVars: ExtraEnvironmentVars;
}
interface ExtraEnvironmentVars {
    WEED_CLUSTER_DEFAULT: string;
    WEED_CLUSTER_SW_MASTER: string;
    WEED_CLUSTER_SW_FILER: string;
}
interface Monitoring {
    enabled: boolean;
    gatewayHost?: any;
    gatewayPort?: any;
}
