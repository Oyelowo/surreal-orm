apiVersion: v1
data:
  pre-stop.sh: |-
    #!/bin/bash
    set -o errexit
    set -o pipefail
    set -o nounset

    # Debug section
    exec 3>&1
    exec 4>&2

    # Load Libraries
    . /opt/bitnami/scripts/liblog.sh
    . /opt/bitnami/scripts/libpostgresql.sh
    . /opt/bitnami/scripts/librepmgr.sh

    # Load PostgreSQL & repmgr environment variables
    . /opt/bitnami/scripts/postgresql-env.sh

    # Auxiliary functions
    is_new_primary_ready() {
        return_value=1
        currenty_primary_node="$(repmgr_get_primary_node)"
        currenty_primary_host="$(echo $currenty_primary_node | awk '{print $1}')"

        info "$currenty_primary_host != $REPMGR_NODE_NETWORK_NAME"
        if [[ $(echo $currenty_primary_node | wc -w) -eq 2 ]] && [[ "$currenty_primary_host" != "$REPMGR_NODE_NETWORK_NAME" ]]; then
            info "New primary detected, leaving the cluster..."
            return_value=0
        else
            info "Waiting for a new primary to be available..."
        fi
        return $return_value
    }

    export MODULE="pre-stop-hook"

    if [[ "${BITNAMI_DEBUG}" == "true" ]]; then
        info "Bash debug is on"
    else
        info "Bash debug is off"
        exec 1>/dev/null
        exec 2>/dev/null
    fi

    postgresql_enable_nss_wrapper

    # Prepare env vars for managing roles
    readarray -t primary_node < <(repmgr_get_upstream_node)
    primary_host="${primary_node[0]}"

    # Stop postgresql for graceful exit.
    postgresql_stop

    if [[ -z "$primary_host" ]] || [[ "$primary_host" == "$REPMGR_NODE_NETWORK_NAME" ]]; then
        info "Primary node need to wait for a new primary node before leaving the cluster"
        retry_while is_new_primary_ready 10 5
    else
        info "Standby node doesn't need to wait, leaving the cluster."
    fi
kind: ConfigMap
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","data":{"pre-stop.sh":"#!/bin/bash\nset -o errexit\nset -o pipefail\nset -o nounset\n\n# Debug section\nexec 3\u003e\u00261\nexec 4\u003e\u00262\n\n# Load Libraries\n. /opt/bitnami/scripts/liblog.sh\n. /opt/bitnami/scripts/libpostgresql.sh\n. /opt/bitnami/scripts/librepmgr.sh\n\n# Load PostgreSQL \u0026 repmgr environment variables\n. /opt/bitnami/scripts/postgresql-env.sh\n\n# Auxiliary functions\nis_new_primary_ready() {\n    return_value=1\n    currenty_primary_node=\"$(repmgr_get_primary_node)\"\n    currenty_primary_host=\"$(echo $currenty_primary_node | awk '{print $1}')\"\n\n    info \"$currenty_primary_host != $REPMGR_NODE_NETWORK_NAME\"\n    if [[ $(echo $currenty_primary_node | wc -w) -eq 2 ]] \u0026\u0026 [[ \"$currenty_primary_host\" != \"$REPMGR_NODE_NETWORK_NAME\" ]]; then\n        info \"New primary detected, leaving the cluster...\"\n        return_value=0\n    else\n        info \"Waiting for a new primary to be available...\"\n    fi\n    return $return_value\n}\n\nexport MODULE=\"pre-stop-hook\"\n\nif [[ \"${BITNAMI_DEBUG}\" == \"true\" ]]; then\n    info \"Bash debug is on\"\nelse\n    info \"Bash debug is off\"\n    exec 1\u003e/dev/null\n    exec 2\u003e/dev/null\nfi\n\npostgresql_enable_nss_wrapper\n\n# Prepare env vars for managing roles\nreadarray -t primary_node \u003c \u003c(repmgr_get_upstream_node)\nprimary_host=\"${primary_node[0]}\"\n\n# Stop postgresql for graceful exit.\npostgresql_stop\n\nif [[ -z \"$primary_host\" ]] || [[ \"$primary_host\" == \"$REPMGR_NODE_NETWORK_NAME\" ]]; then\n    info \"Primary node need to wait for a new primary node before leaving the cluster\"\n    retry_while is_new_primary_ready 10 5\nelse\n    info \"Standby node doesn't need to wait, leaving the cluster.\"\nfi"},"kind":"ConfigMap","metadata":{"labels":{"app.kubernetes.io/component":"postgresql","app.kubernetes.io/instance":"postgres-helm","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"postgresql-ha","helm.sh/chart":"postgresql-ha-8.4.0"},"name":"postgres-helm-postgresql-ha-postgresql-hooks-scripts"}}
  labels:
    app.kubernetes.io/component: postgresql
    app.kubernetes.io/instance: postgres-helm
    app.kubernetes.io/managed-by: pulumi
    app.kubernetes.io/name: postgresql-ha
    helm.sh/chart: postgresql-ha-8.4.0
  name: postgres-helm-postgresql-ha-postgresql-hooks-scripts
