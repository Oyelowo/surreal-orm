apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argo-cd","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-2.0.4"},"name":"argo-cd-server","namespace":"argocd"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argo-cd","app.kubernetes.io/name":"argo-cd"}},"strategy":{"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argo-cd","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"argo-cd","helm.sh/chart":"argo-cd-2.0.4"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"argo-cd","app.kubernetes.io/name":"argo-cd"}},"namespaces":["argocd"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"args":["--staticassets","/opt/bitnami/argo-cd/app","--repo-server","argo-cd-repo-server:8081","--logformat","text","--loglevel","info","--redis","argo-cd-redis-master:6379"],"command":["argocd-server"],"env":[{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argo-cd-redis"}}}],"image":"docker.io/bitnami/argo-cd:2.1.3-debian-10-r0","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":8080},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"argocd-server","ports":[{"containerPort":8080,"name":"http","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":8080},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"resources":{"limits":{},"requests":{}},"securityContext":{"runAsUser":1001},"volumeMounts":[{"mountPath":"/app/config/ssh","name":"ssh-known-hosts"},{"mountPath":"/app/config/server/tls","name":"argocd-repo-server-tls"}]}],"initContainers":[{"args":["-ec","#!/bin/bash\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\n. /opt/bitnami/scripts/libos.sh\n. /opt/bitnami/scripts/liblog.sh\n\ncheck_redis_connection() {\n  local result=\"$(redis-cli -h argo-cd-redis-master -p 6379 PING)\"\n  if [[ \"$result\" != \"PONG\" ]]; then\n    false\n  fi\n}\n\ninfo \"Checking redis connection...\"\nif ! retry_while \"check_redis_connection\"; then\n    error \"Could not connect to the Redis server\"\n    return 1\nelse\n    info \"Connected to the Redis instance\"\nfi\n"],"command":["/bin/bash"],"env":[{"name":"REDISCLI_AUTH","valueFrom":{"secretKeyRef":{"key":"redis-password","name":"argo-cd-redis"}}}],"image":"docker.io/bitnami/redis:6.2.5-debian-10-r66","imagePullPolicy":"IfNotPresent","name":"wait-for-redis"}],"securityContext":{"fsGroup":1001},"serviceAccountName":"argo-cd-argocd-server","volumes":[{"configMap":{"name":"argocd-ssh-known-hosts-cm"},"name":"ssh-known-hosts"},{"name":"argocd-repo-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-repo-server-tls"}}]}}}}
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: argo-cd
    app.kubernetes.io/managed-by: pulumi
    app.kubernetes.io/name: argo-cd
    helm.sh/chart: argo-cd-2.0.4
  name: argo-cd-server
  namespace: argocd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: argo-cd
      app.kubernetes.io/name: argo-cd
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: server
        app.kubernetes.io/instance: argo-cd
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: argo-cd
        helm.sh/chart: argo-cd-2.0.4
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: server
                  app.kubernetes.io/instance: argo-cd
                  app.kubernetes.io/name: argo-cd
              namespaces:
              - argocd
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - args:
        - --staticassets
        - /opt/bitnami/argo-cd/app
        - --repo-server
        - argo-cd-repo-server:8081
        - --logformat
        - text
        - --loglevel
        - info
        - --redis
        - argo-cd-redis-master:6379
        command:
        - argocd-server
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis-password
              name: argo-cd-redis
        image: docker.io/bitnami/argo-cd:2.1.3-debian-10-r0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: argocd-server
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits: {}
          requests: {}
        securityContext:
          runAsUser: 1001
        volumeMounts:
        - mountPath: /app/config/ssh
          name: ssh-known-hosts
        - mountPath: /app/config/server/tls
          name: argocd-repo-server-tls
      initContainers:
      - args:
        - -ec
        - |
          #!/bin/bash

          set -o errexit
          set -o nounset
          set -o pipefail

          . /opt/bitnami/scripts/libos.sh
          . /opt/bitnami/scripts/liblog.sh

          check_redis_connection() {
            local result="$(redis-cli -h argo-cd-redis-master -p 6379 PING)"
            if [[ "$result" != "PONG" ]]; then
              false
            fi
          }

          info "Checking redis connection..."
          if ! retry_while "check_redis_connection"; then
              error "Could not connect to the Redis server"
              return 1
          else
              info "Connected to the Redis instance"
          fi
        command:
        - /bin/bash
        env:
        - name: REDISCLI_AUTH
          valueFrom:
            secretKeyRef:
              key: redis-password
              name: argo-cd-redis
        image: docker.io/bitnami/redis:6.2.5-debian-10-r66
        imagePullPolicy: IfNotPresent
        name: wait-for-redis
      securityContext:
        fsGroup: 1001
      serviceAccountName: argo-cd-argocd-server
      volumes:
      - configMap:
          name: argocd-ssh-known-hosts-cm
        name: ssh-known-hosts
      - name: argocd-repo-server-tls
        secret:
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
          optional: true
          secretName: argocd-repo-server-tls
