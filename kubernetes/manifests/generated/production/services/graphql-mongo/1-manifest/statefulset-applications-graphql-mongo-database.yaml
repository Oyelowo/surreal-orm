apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"labels":{"app.kubernetes.io/component":"mongodb","app.kubernetes.io/instance":"graphql-mongo-database","app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"mongodb","helm.sh/chart":"mongodb-11.1.10"},"name":"graphql-mongo-database","namespace":"applications"},"spec":{"podManagementPolicy":"OrderedReady","replicas":3,"selector":{"matchLabels":{"app.kubernetes.io/component":"mongodb","app.kubernetes.io/instance":"graphql-mongo-database","app.kubernetes.io/name":"mongodb"}},"serviceName":"graphql-mongo-database","template":{"metadata":{"labels":{"app.kubernetes.io/component":"mongodb","app.kubernetes.io/instance":"graphql-mongo-database","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"mongodb","helm.sh/chart":"mongodb-11.1.10"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/component":"mongodb","app.kubernetes.io/instance":"graphql-mongo-database","app.kubernetes.io/name":"mongodb"}},"namespaces":["applications"],"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"command":["/scripts/setup.sh"],"env":[{"name":"BITNAMI_DEBUG","value":"false"},{"name":"MY_POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"MY_POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"MY_POD_HOST_IP","valueFrom":{"fieldRef":{"fieldPath":"status.hostIP"}}},{"name":"K8S_SERVICE_NAME","value":"graphql-mongo-database"},{"name":"MONGODB_INITIAL_PRIMARY_HOST","value":"graphql-mongo-database-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"},{"name":"MONGODB_REPLICA_SET_NAME","value":"rs0"},{"name":"MONGODB_ADVERTISED_HOSTNAME","value":"$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"},{"name":"MONGODB_EXTRA_USERNAMES","value":"example,username1,username2"},{"name":"MONGODB_EXTRA_DATABASES","value":"db1,db2"},{"name":"MONGODB_EXTRA_PASSWORDS","valueFrom":{"secretKeyRef":{"key":"mongodb-passwords","name":"graphql-mongo-database"}}},{"name":"MONGODB_ROOT_USER","value":"example"},{"name":"MONGODB_ROOT_PASSWORD","valueFrom":{"secretKeyRef":{"key":"mongodb-root-password","name":"graphql-mongo-database"}}},{"name":"MONGODB_REPLICA_SET_KEY","valueFrom":{"secretKeyRef":{"key":"mongodb-replica-set-key","name":"graphql-mongo-database"}}},{"name":"ALLOW_EMPTY_PASSWORD","value":"no"},{"name":"MONGODB_SYSTEM_LOG_VERBOSITY","value":"0"},{"name":"MONGODB_DISABLE_SYSTEM_LOG","value":"no"},{"name":"MONGODB_DISABLE_JAVASCRIPT","value":"no"},{"name":"MONGODB_ENABLE_JOURNAL","value":"yes"},{"name":"MONGODB_ENABLE_IPV6","value":"no"},{"name":"MONGODB_ENABLE_DIRECTORY_PER_DB","value":"no"}],"image":"docker.io/bitnami/mongodb:4.4.13-debian-10-r52","imagePullPolicy":"IfNotPresent","livenessProbe":{"exec":{"command":["mongo","--disableImplicitSessions","--eval","db.adminCommand('ping')"]},"failureThreshold":6,"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":5},"name":"mongodb","ports":[{"containerPort":27017,"name":"mongodb"}],"readinessProbe":{"exec":{"command":["bash","-ec","# Run the proper check depending on the version\n[[ $(mongo --version | grep \"MongoDB shell\") =~ ([0-9]+\\.[0-9]+\\.[0-9]+) ]] \u0026\u0026 VERSION=${BASH_REMATCH[1]}\n. /opt/bitnami/scripts/libversion.sh\nVERSION_MAJOR=\"$(get_sematic_version \"$VERSION\" 1)\"\nVERSION_MINOR=\"$(get_sematic_version \"$VERSION\" 2)\"\nVERSION_PATCH=\"$(get_sematic_version \"$VERSION\" 3)\"\nif [[ \"$VERSION_MAJOR\" -ge 4 ]] \u0026\u0026 [[ \"$VERSION_MINOR\" -ge 4 ]] \u0026\u0026 [[ \"$VERSION_PATCH\" -ge 2 ]]; then\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'\nelse\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'\nfi\n"]},"failureThreshold":6,"initialDelaySeconds":5,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":5},"resources":{"limits":{},"requests":{}},"securityContext":{"runAsNonRoot":true,"runAsUser":1001},"volumeMounts":[{"mountPath":"/bitnami/mongodb","name":"datadir"},{"mountPath":"/scripts/setup.sh","name":"scripts","subPath":"setup.sh"}]}],"securityContext":{"fsGroup":1001,"sysctls":[]},"serviceAccountName":"graphql-mongo-database","volumes":[{"configMap":{"defaultMode":493,"name":"graphql-mongo-database-scripts"},"name":"scripts"}]}},"updateStrategy":{"type":"RollingUpdate"},"volumeClaimTemplates":[{"metadata":{"name":"datadir"},"spec":{"accessModes":["ReadWriteOnce"],"resources":{"requests":{"storage":"0.1Gi"}},"storageClassName":"linode-block-storage-retain"}}]}}
  labels:
    app.kubernetes.io/component: mongodb
    app.kubernetes.io/instance: graphql-mongo-database
    app.kubernetes.io/managed-by: pulumi
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-11.1.10
  name: graphql-mongo-database
  namespace: applications
spec:
  podManagementPolicy: OrderedReady
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/component: mongodb
      app.kubernetes.io/instance: graphql-mongo-database
      app.kubernetes.io/name: mongodb
  serviceName: graphql-mongo-database
  template:
    metadata:
      labels:
        app.kubernetes.io/component: mongodb
        app.kubernetes.io/instance: graphql-mongo-database
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-11.1.10
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: mongodb
                  app.kubernetes.io/instance: graphql-mongo-database
                  app.kubernetes.io/name: mongodb
              namespaces:
              - applications
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - command:
        - /scripts/setup.sh
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: K8S_SERVICE_NAME
          value: graphql-mongo-database
        - name: MONGODB_INITIAL_PRIMARY_HOST
          value: graphql-mongo-database-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
        - name: MONGODB_REPLICA_SET_NAME
          value: rs0
        - name: MONGODB_ADVERTISED_HOSTNAME
          value: $(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
        - name: MONGODB_EXTRA_USERNAMES
          value: example,username1,username2
        - name: MONGODB_EXTRA_DATABASES
          value: db1,db2
        - name: MONGODB_EXTRA_PASSWORDS
          valueFrom:
            secretKeyRef:
              key: mongodb-passwords
              name: graphql-mongo-database
        - name: MONGODB_ROOT_USER
          value: example
        - name: MONGODB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mongodb-root-password
              name: graphql-mongo-database
        - name: MONGODB_REPLICA_SET_KEY
          valueFrom:
            secretKeyRef:
              key: mongodb-replica-set-key
              name: graphql-mongo-database
        - name: ALLOW_EMPTY_PASSWORD
          value: "no"
        - name: MONGODB_SYSTEM_LOG_VERBOSITY
          value: "0"
        - name: MONGODB_DISABLE_SYSTEM_LOG
          value: "no"
        - name: MONGODB_DISABLE_JAVASCRIPT
          value: "no"
        - name: MONGODB_ENABLE_JOURNAL
          value: "yes"
        - name: MONGODB_ENABLE_IPV6
          value: "no"
        - name: MONGODB_ENABLE_DIRECTORY_PER_DB
          value: "no"
        image: docker.io/bitnami/mongodb:4.4.13-debian-10-r52
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - mongo
            - --disableImplicitSessions
            - --eval
            - db.adminCommand('ping')
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: mongodb
        ports:
        - containerPort: 27017
          name: mongodb
        readinessProbe:
          exec:
            command:
            - bash
            - -ec
            - |
              # Run the proper check depending on the version
              [[ $(mongo --version | grep "MongoDB shell") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
              . /opt/bitnami/scripts/libversion.sh
              VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
              VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
              VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
              if [[ "$VERSION_MAJOR" -ge 4 ]] && [[ "$VERSION_MINOR" -ge 4 ]] && [[ "$VERSION_PATCH" -ge 2 ]]; then
                  mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
              else
                  mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'
              fi
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits: {}
          requests: {}
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
        volumeMounts:
        - mountPath: /bitnami/mongodb
          name: datadir
        - mountPath: /scripts/setup.sh
          name: scripts
          subPath: setup.sh
      securityContext:
        fsGroup: 1001
        sysctls: []
      serviceAccountName: graphql-mongo-database
      volumes:
      - configMap:
          defaultMode: 493
          name: graphql-mongo-database-scripts
        name: scripts
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 0.1Gi
      storageClassName: linode-block-storage-retain
