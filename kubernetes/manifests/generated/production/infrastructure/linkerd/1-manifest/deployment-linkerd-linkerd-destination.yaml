apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"linkerd.io/created-by":"linkerd/helm stable-2.11.2"},"labels":{"app.kubernetes.io/managed-by":"pulumi","app.kubernetes.io/name":"destination","app.kubernetes.io/part-of":"Linkerd","app.kubernetes.io/version":"stable-2.11.2","linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd"},"name":"linkerd-destination","namespace":"linkerd"},"spec":{"replicas":1,"selector":{"matchLabels":{"linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd","linkerd.io/proxy-deployment":"linkerd-destination"}},"template":{"metadata":{"annotations":{"checksum/config":"99e50205ecd13e30f22b1186ebfc67938ba580ceab1ab6e5240e66fff15619ab","config.linkerd.io/default-inbound-policy":"all-unauthenticated","linkerd.io/created-by":"linkerd/helm stable-2.11.2","linkerd.io/identity-mode":"default","linkerd.io/proxy-version":"stable-2.11.2","sealedsecrets.bitnami.com/managed":"true"},"labels":{"linkerd.io/control-plane-component":"destination","linkerd.io/control-plane-ns":"linkerd","linkerd.io/proxy-deployment":"linkerd-destination","linkerd.io/workload-ns":"linkerd"}},"spec":{"containers":[{"env":[{"name":"_pod_name","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"_pod_ns","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"_pod_nodeName","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"LINKERD2_PROXY_LOG","value":"warn,linkerd=info"},{"name":"LINKERD2_PROXY_LOG_FORMAT","value":"plain"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_ADDR","value":"localhost.:8086"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_POLICY_SVC_ADDR","value":"localhost.:8090"},{"name":"LINKERD2_PROXY_POLICY_WORKLOAD","value":"$(_pod_ns):$(_pod_name)"},{"name":"LINKERD2_PROXY_INBOUND_DEFAULT_POLICY","value":"all-unauthenticated"},{"name":"LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS","value":"10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"},{"name":"LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT","value":"100ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT","value":"1000ms"},{"name":"LINKERD2_PROXY_CONTROL_LISTEN_ADDR","value":"0.0.0.0:4190"},{"name":"LINKERD2_PROXY_ADMIN_LISTEN_ADDR","value":"0.0.0.0:4191"},{"name":"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR","value":"127.0.0.1:4140"},{"name":"LINKERD2_PROXY_INBOUND_LISTEN_ADDR","value":"0.0.0.0:4143"},{"name":"LINKERD2_PROXY_INBOUND_IPS","valueFrom":{"fieldRef":{"fieldPath":"status.podIPs"}}},{"name":"LINKERD2_PROXY_INBOUND_PORTS","value":"8086,8090,8443,9443,9990,9996,9997"},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES","value":"svc.cluster.local."},{"name":"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION","value":"25,587,3306,4444,5432,6379,9300,11211"},{"name":"LINKERD2_PROXY_DESTINATION_CONTEXT","value":"{\"ns\":\"$(_pod_ns)\", \"nodeName\":\"$(_pod_nodeName)\"}\n"},{"name":"_pod_sa","valueFrom":{"fieldRef":{"fieldPath":"spec.serviceAccountName"}}},{"name":"_l5d_ns","value":"linkerd"},{"name":"_l5d_trustdomain","value":"cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_DIR","value":"/var/run/linkerd/identity/end-entity"},{"name":"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS","valueFrom":{"configMapKeyRef":{"key":"ca-bundle.crt","name":"linkerd-identity-trust-roots"}}},{"name":"LINKERD2_PROXY_IDENTITY_TOKEN_FILE","value":"/var/run/secrets/kubernetes.io/serviceaccount/token"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_ADDR","value":"linkerd-identity-headless.linkerd.svc.cluster.local.:8080"},{"name":"LINKERD2_PROXY_IDENTITY_LOCAL_NAME","value":"$(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_NAME","value":"linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"},{"name":"LINKERD2_PROXY_POLICY_SVC_NAME","value":"linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local"}],"image":"cr.l5d.io/linkerd/proxy:stable-2.11.2","imagePullPolicy":"IfNotPresent","lifecycle":{"postStart":{"exec":{"command":["/usr/lib/linkerd/linkerd-await","--timeout=2m"]}}},"livenessProbe":{"httpGet":{"path":"/live","port":4191},"initialDelaySeconds":10},"name":"linkerd-proxy","ports":[{"containerPort":4143,"name":"linkerd-proxy"},{"containerPort":4191,"name":"linkerd-admin"}],"readinessProbe":{"httpGet":{"path":"/ready","port":4191},"initialDelaySeconds":2},"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsUser":2102},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/var/run/linkerd/identity/end-entity","name":"linkerd-identity-end-entity"}]},{"args":["destination","-addr=:8086","-controller-namespace=linkerd","-enable-h2-upgrade=true","-log-level=info","-log-format=plain","-enable-endpoint-slices=false","-cluster-domain=cluster.local","-identity-trust-domain=cluster.local","-default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211","-enable-pprof=false"],"image":"cr.l5d.io/linkerd/controller:stable-2.11.2","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9996},"initialDelaySeconds":10},"name":"destination","ports":[{"containerPort":8086,"name":"grpc"},{"containerPort":9996,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9996}},"securityContext":{"runAsUser":2103}},{"args":["sp-validator","-log-level=info","-log-format=plain","-enable-pprof=false"],"image":"cr.l5d.io/linkerd/controller:stable-2.11.2","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/ping","port":9997},"initialDelaySeconds":10},"name":"sp-validator","ports":[{"containerPort":8443,"name":"sp-validator"},{"containerPort":9997,"name":"admin-http"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":9997}},"securityContext":{"runAsUser":2103},"volumeMounts":[{"mountPath":"/var/run/linkerd/tls","name":"sp-tls","readOnly":true}]},{"args":["--admin-addr=0.0.0.0:9990","--control-plane-namespace=linkerd","--grpc-addr=0.0.0.0:8090","--server-addr=0.0.0.0:9443","--server-tls-key=/var/run/linkerd/tls/tls.key","--server-tls-certs=/var/run/linkerd/tls/tls.crt","--cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16","--identity-domain=cluster.local","--default-policy=all-unauthenticated","--log-level=linkerd=info,warn","--log-format=plain"],"image":"cr.l5d.io/linkerd/policy-controller:stable-2.11.2","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/live","port":"admin"}},"name":"policy","ports":[{"containerPort":8090,"name":"grpc"},{"containerPort":9990,"name":"admin"},{"containerPort":9443,"name":"policy-https"}],"readinessProbe":{"failureThreshold":7,"httpGet":{"path":"/ready","port":"admin"},"initialDelaySeconds":10},"securityContext":{"runAsUser":2103},"volumeMounts":[{"mountPath":"/var/run/linkerd/tls","name":"policy-tls","readOnly":true}]}],"initContainers":[{"args":["--incoming-proxy-port","4143","--outgoing-proxy-port","4140","--proxy-uid","2102","--inbound-ports-to-ignore","4190,4191,4567,4568","--outbound-ports-to-ignore","443"],"image":"cr.l5d.io/linkerd/proxy-init:v1.5.3","imagePullPolicy":"IfNotPresent","name":"linkerd-init","resources":{"limits":{"cpu":"100m","memory":"50Mi"},"requests":{"cpu":"10m","memory":"10Mi"}},"securityContext":{"allowPrivilegeEscalation":true,"capabilities":{"add":["NET_ADMIN","NET_RAW"]},"privileged":false,"readOnlyRootFilesystem":true,"runAsNonRoot":false,"runAsUser":0},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/run","name":"linkerd-proxy-init-xtables-lock"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"linkerd-destination","volumes":[{"name":"sp-tls","secret":{"secretName":"linkerd-sp-validator-k8s-tls"}},{"name":"policy-tls","secret":{"secretName":"linkerd-policy-validator-k8s-tls"}},{"emptyDir":{},"name":"linkerd-proxy-init-xtables-lock"},{"emptyDir":{"medium":"Memory"},"name":"linkerd-identity-end-entity"}]}}}}
    linkerd.io/created-by: linkerd/helm stable-2.11.2
  labels:
    app.kubernetes.io/managed-by: pulumi
    app.kubernetes.io/name: destination
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.2
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-destination
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: destination
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-destination
  template:
    metadata:
      annotations:
        checksum/config: 99e50205ecd13e30f22b1186ebfc67938ba580ceab1ab6e5240e66fff15619ab
        config.linkerd.io/default-inbound-policy: all-unauthenticated
        linkerd.io/created-by: linkerd/helm stable-2.11.2
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: stable-2.11.2
        sealedsecrets.bitnami.com/managed: "true"
      labels:
        linkerd.io/control-plane-component: destination
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-destination
        linkerd.io/workload-ns: linkerd
    spec:
      containers:
      - env:
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: LINKERD2_PROXY_LOG
          value: warn,linkerd=info
        - name: LINKERD2_PROXY_LOG_FORMAT
          value: plain
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: localhost.:8086
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
          value: 10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
        - name: LINKERD2_PROXY_POLICY_SVC_ADDR
          value: localhost.:8090
        - name: LINKERD2_PROXY_POLICY_WORKLOAD
          value: $(_pod_ns):$(_pod_name)
        - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
          value: all-unauthenticated
        - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
          value: 10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
        - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
          value: 100ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
          value: 1000ms
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_INBOUND_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs
        - name: LINKERD2_PROXY_INBOUND_PORTS
          value: 8086,8090,8443,9443,9990,9996,9997
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
          value: 25,587,3306,4444,5432,6379,9300,11211
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: |
            {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            configMapKeyRef:
              key: ca-bundle.crt
              name: linkerd-identity-trust-roots
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity-headless.linkerd.svc.cluster.local.:8080
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_POLICY_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        image: cr.l5d.io/linkerd/proxy:stable-2.11.2
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command:
              - /usr/lib/linkerd/linkerd-await
              - --timeout=2m
        livenessProbe:
          httpGet:
            path: /live
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      - args:
        - destination
        - -addr=:8086
        - -controller-namespace=linkerd
        - -enable-h2-upgrade=true
        - -log-level=info
        - -log-format=plain
        - -enable-endpoint-slices=false
        - -cluster-domain=cluster.local
        - -identity-trust-domain=cluster.local
        - -default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/controller:stable-2.11.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9996
          initialDelaySeconds: 10
        name: destination
        ports:
        - containerPort: 8086
          name: grpc
        - containerPort: 9996
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9996
        securityContext:
          runAsUser: 2103
      - args:
        - sp-validator
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/controller:stable-2.11.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9997
          initialDelaySeconds: 10
        name: sp-validator
        ports:
        - containerPort: 8443
          name: sp-validator
        - containerPort: 9997
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9997
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: sp-tls
          readOnly: true
      - args:
        - --admin-addr=0.0.0.0:9990
        - --control-plane-namespace=linkerd
        - --grpc-addr=0.0.0.0:8090
        - --server-addr=0.0.0.0:9443
        - --server-tls-key=/var/run/linkerd/tls/tls.key
        - --server-tls-certs=/var/run/linkerd/tls/tls.crt
        - --cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
        - --identity-domain=cluster.local
        - --default-policy=all-unauthenticated
        - --log-level=linkerd=info,warn
        - --log-format=plain
        image: cr.l5d.io/linkerd/policy-controller:stable-2.11.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: admin
        name: policy
        ports:
        - containerPort: 8090
          name: grpc
        - containerPort: 9990
          name: admin
        - containerPort: 9443
          name: policy-https
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: admin
          initialDelaySeconds: 10
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: policy-tls
          readOnly: true
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - 4190,4191,4567,4568
        - --outbound-ports-to-ignore
        - "443"
        image: cr.l5d.io/linkerd/proxy-init:v1.5.3
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 10Mi
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run
          name: linkerd-proxy-init-xtables-lock
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: linkerd-destination
      volumes:
      - name: sp-tls
        secret:
          secretName: linkerd-sp-validator-k8s-tls
      - name: policy-tls
        secret:
          secretName: linkerd-policy-validator-k8s-tls
      - emptyDir: {}
        name: linkerd-proxy-init-xtables-lock
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
