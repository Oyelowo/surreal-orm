// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export * from "./backingImage";
export * from "./backingImageDataSource";
export * from "./backingImageManager";
export * from "./backup";
export * from "./backupTarget";
export * from "./backupVolume";
export * from "./engine";
export * from "./engineImage";
export * from "./instanceManager";
export * from "./node";
export * from "./recurringJob";
export * from "./replica";
export * from "./setting";
export * from "./shareManager";
export * from "./volume";

// Import resources to register:
import { BackingImage } from "./backingImage";
import { BackingImageDataSource } from "./backingImageDataSource";
import { BackingImageManager } from "./backingImageManager";
import { Backup } from "./backup";
import { BackupTarget } from "./backupTarget";
import { BackupVolume } from "./backupVolume";
import { Engine } from "./engine";
import { EngineImage } from "./engineImage";
import { InstanceManager } from "./instanceManager";
import { Node } from "./node";
import { RecurringJob } from "./recurringJob";
import { Replica } from "./replica";
import { Setting } from "./setting";
import { ShareManager } from "./shareManager";
import { Volume } from "./volume";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:longhorn.io/v1beta1:BackingImage":
                return new BackingImage(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta1:BackingImageDataSource":
                return new BackingImageDataSource(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta1:BackingImageManager":
                return new BackingImageManager(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta1:Backup":
                return new Backup(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta1:BackupTarget":
                return new BackupTarget(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta1:BackupVolume":
                return new BackupVolume(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta1:Engine":
                return new Engine(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta1:EngineImage":
                return new EngineImage(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta1:InstanceManager":
                return new InstanceManager(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta1:Node":
                return new Node(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta1:RecurringJob":
                return new RecurringJob(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta1:Replica":
                return new Replica(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta1:Setting":
                return new Setting(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta1:ShareManager":
                return new ShareManager(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta1:Volume":
                return new Volume(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("crds", "longhorn.io/v1beta1", _module)
