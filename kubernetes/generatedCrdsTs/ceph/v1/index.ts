// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export * from "./cephBlockPool";
export * from "./cephBlockPoolRadosNamespace";
export * from "./cephBucketNotification";
export * from "./cephBucketTopic";
export * from "./cephClient";
export * from "./cephCluster";
export * from "./cephFilesystem";
export * from "./cephFilesystemMirror";
export * from "./cephFilesystemSubVolumeGroup";
export * from "./cephNFS";
export * from "./cephObjectRealm";
export * from "./cephObjectStore";
export * from "./cephObjectStoreUser";
export * from "./cephObjectZone";
export * from "./cephObjectZoneGroup";
export * from "./cephRBDMirror";

// Import resources to register:
import { CephBlockPool } from "./cephBlockPool";
import { CephBlockPoolRadosNamespace } from "./cephBlockPoolRadosNamespace";
import { CephBucketNotification } from "./cephBucketNotification";
import { CephBucketTopic } from "./cephBucketTopic";
import { CephClient } from "./cephClient";
import { CephCluster } from "./cephCluster";
import { CephFilesystem } from "./cephFilesystem";
import { CephFilesystemMirror } from "./cephFilesystemMirror";
import { CephFilesystemSubVolumeGroup } from "./cephFilesystemSubVolumeGroup";
import { CephNFS } from "./cephNFS";
import { CephObjectRealm } from "./cephObjectRealm";
import { CephObjectStore } from "./cephObjectStore";
import { CephObjectStoreUser } from "./cephObjectStoreUser";
import { CephObjectZone } from "./cephObjectZone";
import { CephObjectZoneGroup } from "./cephObjectZoneGroup";
import { CephRBDMirror } from "./cephRBDMirror";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:ceph.rook.io/v1:CephBlockPool":
                return new CephBlockPool(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephBlockPoolRadosNamespace":
                return new CephBlockPoolRadosNamespace(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephBucketNotification":
                return new CephBucketNotification(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephBucketTopic":
                return new CephBucketTopic(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephClient":
                return new CephClient(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephCluster":
                return new CephCluster(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephFilesystem":
                return new CephFilesystem(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephFilesystemMirror":
                return new CephFilesystemMirror(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephFilesystemSubVolumeGroup":
                return new CephFilesystemSubVolumeGroup(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephNFS":
                return new CephNFS(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectRealm":
                return new CephObjectRealm(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectStore":
                return new CephObjectStore(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectStoreUser":
                return new CephObjectStoreUser(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectZone":
                return new CephObjectZone(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectZoneGroup":
                return new CephObjectZoneGroup(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephRBDMirror":
                return new CephRBDMirror(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("crds", "ceph.rook.io/v1", _module)
