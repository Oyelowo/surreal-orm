// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

import * as utilities from "../utilities";

import {ObjectMeta} from "../meta/v1";

export namespace acme {
    export namespace v1 {
        export interface ChallengeSpec {
            /**
             * The URL to the ACME Authorization resource that this challenge is a part of.
             */
            authorizationURL: string;
            /**
             * dnsName is the identifier that this challenge is for, e.g. example.com. If the requested DNSName is a 'wildcard', this field MUST be set to the non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
             */
            dnsName: string;
            /**
             * References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
             */
            issuerRef: outputs.acme.v1.ChallengeSpecIssuerref;
            /**
             * The ACME challenge key for this challenge For HTTP01 challenges, this is the value that must be responded with to complete the HTTP01 challenge in the format: `<private key JWK thumbprint>.<key from acme server for challenge>`. For DNS01 challenges, this is the base64 encoded SHA256 sum of the `<private key JWK thumbprint>.<key from acme server for challenge>` text that must be set as the TXT record content.
             */
            key: string;
            /**
             * Contains the domain solving configuration that should be used to solve this challenge resource.
             */
            solver: outputs.acme.v1.ChallengeSpecSolver;
            /**
             * The ACME challenge token for this challenge. This is the raw value returned from the ACME server.
             */
            token: string;
            /**
             * The type of ACME challenge this resource represents. One of "HTTP-01" or "DNS-01".
             */
            type: string;
            /**
             * The URL of the ACME Challenge resource for this challenge. This can be used to lookup details about the status of this challenge.
             */
            url: string;
            /**
             * wildcard will be true if this challenge is for a wildcard identifier, for example '*.example.com'.
             */
            wildcard?: boolean;
        }

        /**
         * References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
         */
        export interface ChallengeSpecIssuerref {
            /**
             * Group of the resource being referred to.
             */
            group?: string;
            /**
             * Kind of the resource being referred to.
             */
            kind?: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        /**
         * Contains the domain solving configuration that should be used to solve this challenge resource.
         */
        export interface ChallengeSpecSolver {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: outputs.acme.v1.ChallengeSpecSolverDns01;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: outputs.acme.v1.ChallengeSpecSolverHttp01;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: outputs.acme.v1.ChallengeSpecSolverSelector;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface ChallengeSpecSolverDns01 {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: outputs.acme.v1.ChallengeSpecSolverDns01Acmedns;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: outputs.acme.v1.ChallengeSpecSolverDns01Akamai;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: outputs.acme.v1.ChallengeSpecSolverDns01Azuredns;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: outputs.acme.v1.ChallengeSpecSolverDns01Clouddns;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: outputs.acme.v1.ChallengeSpecSolverDns01Cloudflare;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: string;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: outputs.acme.v1.ChallengeSpecSolverDns01Digitalocean;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: outputs.acme.v1.ChallengeSpecSolverDns01Rfc2136;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: outputs.acme.v1.ChallengeSpecSolverDns01Route53;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: outputs.acme.v1.ChallengeSpecSolverDns01Webhook;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Acmedns {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AcmednsAccountsecretref;
            host: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AcmednsAccountsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Akamai {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AkamaiAccesstokensecretref;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AkamaiClientsecretsecretref;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AkamaiClienttokensecretref;
            serviceConsumerDomain: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiAccesstokensecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiClientsecretsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiClienttokensecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Azuredns {
            /**
             * if both this and ClientSecret are left unset MSI will be used
             */
            clientID?: string;
            /**
             * if both this and ClientID are left unset MSI will be used
             */
            clientSecretSecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01AzurednsClientsecretsecretref;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: string;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: string;
            /**
             * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
             */
            managedIdentity?: outputs.acme.v1.ChallengeSpecSolverDns01AzurednsManagedidentity;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: string;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: string;
            /**
             * when specifying ClientID and ClientSecret then this field is also needed
             */
            tenantID?: string;
        }

        /**
         * if both this and ClientID are left unset MSI will be used
         */
        export interface ChallengeSpecSolverDns01AzurednsClientsecretsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
         */
        export interface ChallengeSpecSolverDns01AzurednsManagedidentity {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: string;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             */
            resourceID?: string;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Clouddns {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: string;
            project: string;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01ClouddnsServiceaccountsecretref;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01ClouddnsServiceaccountsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Cloudflare {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01CloudflareApikeysecretref;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01CloudflareApitokensecretref;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: string;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface ChallengeSpecSolverDns01CloudflareApikeysecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface ChallengeSpecSolverDns01CloudflareApitokensecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Digitalocean {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01DigitaloceanTokensecretref;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01DigitaloceanTokensecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Rfc2136 {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: string;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: string;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: string;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01Rfc2136Tsigsecretsecretref;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface ChallengeSpecSolverDns01Rfc2136Tsigsecretsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Route53 {
            /**
             * The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we "fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https"://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: string;
            /**
             * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we "fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https"://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyIDSecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01Route53Accesskeyidsecretref;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: string;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: string;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: string;
            /**
             * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we "fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https"://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01Route53Secretaccesskeysecretref;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we "fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https"://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ChallengeSpecSolverDns01Route53Accesskeyidsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we "fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https"://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ChallengeSpecSolverDns01Route53Secretaccesskeysecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Webhook {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: {[key: string]: any};
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: string;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface ChallengeSpecSolverHttp01 {
            /**
             * The Gateway API is a "sig-network community API that models service networking in Kubernetes (https"://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: outputs.acme.v1.ChallengeSpecSolverHttp01Gatewayhttproute;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: outputs.acme.v1.ChallengeSpecSolverHttp01Ingress;
        }

        /**
         * The Gateway API is a "sig-network community API that models service networking in Kubernetes (https"://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface ChallengeSpecSolverHttp01Gatewayhttproute {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: {[key: string]: string};
            /**
             * When solving an HTTP-01 challenge, "cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https"://gateway-api.sigs.k8s.io/v1alpha2/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayhttprouteParentrefs[];
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * ParentRef identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid. 
         *  References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.
         */
        export interface ChallengeSpecSolverHttp01GatewayhttprouteParentrefs {
            /**
             * Group is the group of the referent. 
             *  Support: Core
             */
            group?: string;
            /**
             * Kind is kind of the referent. 
             *  Support: Core (Gateway) Support: Custom (Other Resources)
             */
            kind?: string;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route. 
             *  Support: Core
             */
            namespace?: string;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: string;
        }
        /**
         * challengeSpecSolverHttp01GatewayhttprouteParentrefsProvideDefaults sets the appropriate defaults for ChallengeSpecSolverHttp01GatewayhttprouteParentrefs
         */
        export function challengeSpecSolverHttp01GatewayhttprouteParentrefsProvideDefaults(val: ChallengeSpecSolverHttp01GatewayhttprouteParentrefs): ChallengeSpecSolverHttp01GatewayhttprouteParentrefs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface ChallengeSpecSolverHttp01Ingress {
            /**
             * The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.
             */
            class?: string;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressIngresstemplate;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.
             */
            name?: string;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplate;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01IngressIngresstemplate {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressIngresstemplateMetadata;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01IngressIngresstemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: {[key: string]: string};
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplate {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateMetadata;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
             */
            spec?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpec;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateMetadata {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: {[key: string]: string};
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpec {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinity;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: string;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecTolerations[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinity {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinity;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinity;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: string;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface ChallengeSpecSolverSelector {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: string[];
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: string[];
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: {[key: string]: string};
        }

        export interface ChallengeStatus {
            /**
             * presented will be set to true if the challenge values for this challenge are currently 'presented'. This *does not* imply the self check is passing. Only that the values have been 'submitted' for the appropriate challenge mechanism (i.e. the DNS01 TXT record has been presented, or the HTTP01 configuration has been configured).
             */
            presented?: boolean;
            /**
             * Used to denote whether this challenge should be processed or not. This field will only be set to true by the 'scheduling' component. It will only be set to false by the 'challenges' controller, after the challenge has reached a final state or timed out. If this field is set to false, the challenge controller will not take any more action.
             */
            processing?: boolean;
            /**
             * Contains human readable information on why the Challenge is in the current state.
             */
            reason?: string;
            /**
             * Contains the current 'state' of the challenge. If not set, the state of the challenge is unknown.
             */
            state?: string;
        }

        export interface OrderSpec {
            /**
             * CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.
             */
            commonName?: string;
            /**
             * DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
             */
            dnsNames?: string[];
            /**
             * Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.
             */
            duration?: string;
            /**
             * IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
             */
            ipAddresses?: string[];
            /**
             * IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
             */
            issuerRef: outputs.acme.v1.OrderSpecIssuerref;
            /**
             * Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.
             */
            request: string;
        }

        /**
         * IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
         */
        export interface OrderSpecIssuerref {
            /**
             * Group of the resource being referred to.
             */
            group?: string;
            /**
             * Kind of the resource being referred to.
             */
            kind?: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        export interface OrderStatus {
            /**
             * Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.
             */
            authorizations?: outputs.acme.v1.OrderStatusAuthorizations[];
            /**
             * Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.
             */
            certificate?: string;
            /**
             * FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.
             */
            failureTime?: string;
            /**
             * FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.
             */
            finalizeURL?: string;
            /**
             * Reason optionally provides more information about a why the order is in the current state.
             */
            reason?: string;
            /**
             * State contains the current state of this Order resource. States 'success' and 'expired' are 'final'
             */
            state?: string;
            /**
             * URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.
             */
            url?: string;
        }

        /**
         * ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.
         */
        export interface OrderStatusAuthorizations {
            /**
             * Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.
             */
            challenges?: outputs.acme.v1.OrderStatusAuthorizationsChallenges[];
            /**
             * Identifier is the DNS name to be validated as part of this authorization
             */
            identifier?: string;
            /**
             * InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.
             */
            initialState?: string;
            /**
             * URL is the URL of the Authorization that must be completed
             */
            url: string;
            /**
             * Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.
             */
            wildcard?: boolean;
        }

        /**
         * Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.
         */
        export interface OrderStatusAuthorizationsChallenges {
            /**
             * Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.
             */
            token: string;
            /**
             * Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.
             */
            type: string;
            /**
             * URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.
             */
            url: string;
        }
    }
}

export namespace argoproj {
    export namespace v1alpha1 {
        export interface AnalysisRunSpec {
            args?: outputs.argoproj.v1alpha1.AnalysisRunSpecArgs[];
            dryRun?: outputs.argoproj.v1alpha1.AnalysisRunSpecDryrun[];
            measurementRetention?: outputs.argoproj.v1alpha1.AnalysisRunSpecMeasurementretention[];
            metrics: outputs.argoproj.v1alpha1.AnalysisRunSpecMetrics[];
            terminate?: boolean;
        }

        export interface AnalysisRunSpecArgs {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.AnalysisRunSpecArgsValuefrom;
        }

        export interface AnalysisRunSpecArgsValuefrom {
            fieldRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecArgsValuefromFieldref;
            secretKeyRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecArgsValuefromSecretkeyref;
        }

        export interface AnalysisRunSpecArgsValuefromFieldref {
            fieldPath: string;
        }

        export interface AnalysisRunSpecArgsValuefromSecretkeyref {
            key: string;
            name: string;
        }

        export interface AnalysisRunSpecDryrun {
            metricName: string;
        }

        export interface AnalysisRunSpecMeasurementretention {
            limit: number;
            metricName: string;
        }

        export interface AnalysisRunSpecMetrics {
            consecutiveErrorLimit?: number | string;
            count?: number | string;
            failureCondition?: string;
            failureLimit?: number | string;
            inconclusiveLimit?: number | string;
            initialDelay?: string;
            interval?: string;
            name: string;
            provider: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProvider;
            successCondition?: string;
        }

        export interface AnalysisRunSpecMetricsProvider {
            cloudWatch?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderCloudwatch;
            datadog?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderDatadog;
            graphite?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderGraphite;
            influxdb?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderInfluxdb;
            job?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJob;
            kayenta?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderKayenta;
            newRelic?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderNewrelic;
            prometheus?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderPrometheus;
            wavefront?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderWavefront;
            web?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderWeb;
        }

        export interface AnalysisRunSpecMetricsProviderCloudwatch {
            interval?: string;
            metricDataQueries: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderCloudwatchMetricdataqueries[];
        }

        export interface AnalysisRunSpecMetricsProviderCloudwatchMetricdataqueries {
            expression?: string;
            id?: string;
            label?: string;
            metricStat?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderCloudwatchMetricdataqueriesMetricstat;
            period?: number | string;
            returnData?: boolean;
        }

        export interface AnalysisRunSpecMetricsProviderCloudwatchMetricdataqueriesMetricstat {
            metric?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderCloudwatchMetricdataqueriesMetricstatMetric;
            period?: number | string;
            stat?: string;
            unit?: string;
        }

        export interface AnalysisRunSpecMetricsProviderCloudwatchMetricdataqueriesMetricstatMetric {
            dimensions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderCloudwatchMetricdataqueriesMetricstatMetricDimensions[];
            metricName?: string;
            namespace?: string;
        }

        export interface AnalysisRunSpecMetricsProviderCloudwatchMetricdataqueriesMetricstatMetricDimensions {
            name?: string;
            value?: string;
        }

        export interface AnalysisRunSpecMetricsProviderDatadog {
            interval?: string;
            query: string;
        }

        export interface AnalysisRunSpecMetricsProviderGraphite {
            address?: string;
            query?: string;
        }

        export interface AnalysisRunSpecMetricsProviderInfluxdb {
            profile?: string;
            query?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJob {
            metadata?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobMetadata;
            spec: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpec;
        }

        export interface AnalysisRunSpecMetricsProviderJobMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface AnalysisRunSpecMetricsProviderJobSpec {
            activeDeadlineSeconds?: number;
            backoffLimit?: number;
            completionMode?: string;
            completions?: number;
            manualSelector?: boolean;
            parallelism?: number;
            selector?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecSelector;
            suspend?: boolean;
            template: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplate;
            ttlSecondsAfterFinished?: number;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecSelector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplate {
            metadata?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateMetadata;
            spec?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpec;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpec {
            activeDeadlineSeconds?: number;
            affinity?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinity;
            automountServiceAccountToken?: boolean;
            containers: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainers[];
            dnsConfig?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecDnsconfig;
            dnsPolicy?: string;
            enableServiceLinks?: boolean;
            ephemeralContainers?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainers[];
            hostAliases?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecHostaliases[];
            hostIPC?: boolean;
            hostNetwork?: boolean;
            hostPID?: boolean;
            hostname?: string;
            imagePullSecrets?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecImagepullsecrets[];
            initContainers?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainers[];
            nodeName?: string;
            nodeSelector?: {[key: string]: string};
            os?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecOs;
            overhead?: {[key: string]: number | string};
            preemptionPolicy?: string;
            priority?: number;
            priorityClassName?: string;
            readinessGates?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecReadinessgates[];
            restartPolicy?: string;
            runtimeClassName?: string;
            schedulerName?: string;
            securityContext?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecSecuritycontext;
            serviceAccount?: string;
            serviceAccountName?: string;
            setHostnameAsFQDN?: boolean;
            shareProcessNamespace?: boolean;
            subdomain?: string;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecTolerations[];
            topologySpreadConstraints?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecTopologyspreadconstraints[];
            volumes?: {[key: string]: any};
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinity {
            nodeAffinity?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinity;
            podAffinity?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinity;
            podAntiAffinity?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinity;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainers {
            args?: string[];
            command?: string[];
            env?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersEnv[];
            envFrom?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecycle;
            livenessProbe?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobe;
            name: string;
            ports?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersPorts[];
            readinessProbe?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobe;
            resources?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersResources;
            securityContext?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontext;
            startupProbe?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersVolumedevices[];
            volumeMounts?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersVolumemounts[];
            workingDir?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefrom;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefrom {
            configMapKeyRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromSecretkeyref;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersEnvfrom {
            configMapRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersEnvfromSecretref;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecycle {
            postStart?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststart;
            preStop?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestop;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststart {
            exec?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartExec;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartTcpsocket;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestop {
            exec?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopExec;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopTcpsocket;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobe {
            exec?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeExec {
            command?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * analysisRunSpecMetricsProviderJobSpecTemplateSpecContainersPortsProvideDefaults sets the appropriate defaults for AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersPorts
         */
        export function analysisRunSpecMetricsProviderJobSpecTemplateSpecContainersPortsProvideDefaults(val: AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersPorts): AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobe {
            exec?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeExec {
            command?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersResources {
            limits?: {[key: string]: any};
            requests?: {[key: string]: any};
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextWindowsoptions;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobe {
            exec?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeExec {
            command?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeGrpc {
            port: number;
            service?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecContainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecDnsconfig {
            nameservers?: string[];
            options?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecDnsconfigOptions[];
            searches?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecDnsconfigOptions {
            name?: string;
            value?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnv[];
            envFrom?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecycle;
            livenessProbe?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobe;
            name: string;
            ports?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPorts[];
            readinessProbe?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobe;
            resources?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersResources;
            securityContext?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontext;
            startupProbe?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            targetContainerName?: string;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersVolumedevices[];
            volumeMounts?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefrom;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefrom {
            configMapKeyRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromSecretkeyref;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvfrom {
            configMapRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvfromSecretref;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecycle {
            postStart?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststart;
            preStop?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestop;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststart {
            exec?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartExec;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartTcpsocket;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestop {
            exec?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopExec;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopTcpsocket;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobe {
            exec?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * analysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPortsProvideDefaults sets the appropriate defaults for AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPorts
         */
        export function analysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPortsProvideDefaults(val: AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPorts): AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobe {
            exec?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersResources {
            limits?: {[key: string]: any};
            requests?: {[key: string]: any};
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextWindowsoptions;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobe {
            exec?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeExec {
            command?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeGrpc {
            port: number;
            service?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecHostaliases {
            hostnames?: string[];
            ip?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecImagepullsecrets {
            name?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnv[];
            envFrom?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecycle;
            livenessProbe?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobe;
            name: string;
            ports?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersPorts[];
            readinessProbe?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobe;
            resources?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersResources;
            securityContext?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontext;
            startupProbe?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersVolumedevices[];
            volumeMounts?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefrom;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefrom {
            configMapKeyRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromSecretkeyref;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvfrom {
            configMapRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvfromSecretref;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecycle {
            postStart?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststart;
            preStop?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestop;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststart {
            exec?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartExec;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartTcpsocket;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestop {
            exec?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopExec;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopTcpsocket;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobe {
            exec?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * analysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersPortsProvideDefaults sets the appropriate defaults for AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersPorts
         */
        export function analysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersPortsProvideDefaults(val: AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersPorts): AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobe {
            exec?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersResources {
            limits?: {[key: string]: any};
            requests?: {[key: string]: any};
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextWindowsoptions;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobe {
            exec?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeExec {
            command?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeGrpc {
            port: number;
            service?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecInitcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecOs {
            name: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecReadinessgates {
            conditionType: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecSecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecSecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecSecuritycontextSysctls[];
            windowsOptions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecSecuritycontextWindowsoptions;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecSecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecTopologyspreadconstraints {
            labelSelector?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecTopologyspreadconstraintsLabelselector;
            maxSkew: number;
            minDomains?: number;
            topologyKey: string;
            whenUnsatisfiable: string;
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecTopologyspreadconstraintsLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderJobSpecTemplateSpecTopologyspreadconstraintsLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisRunSpecMetricsProviderJobSpecTemplateSpecTopologyspreadconstraintsLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisRunSpecMetricsProviderKayenta {
            address: string;
            application: string;
            canaryConfigName: string;
            configurationAccountName: string;
            metricsAccountName: string;
            scopes: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderKayentaScopes[];
            storageAccountName: string;
            threshold: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderKayentaThreshold;
        }

        export interface AnalysisRunSpecMetricsProviderKayentaScopes {
            controlScope: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderKayentaScopesControlscope;
            experimentScope: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderKayentaScopesExperimentscope;
            name: string;
        }

        export interface AnalysisRunSpecMetricsProviderKayentaScopesControlscope {
            end: string;
            region: string;
            scope: string;
            start: string;
            step: number;
        }

        export interface AnalysisRunSpecMetricsProviderKayentaScopesExperimentscope {
            end: string;
            region: string;
            scope: string;
            start: string;
            step: number;
        }

        export interface AnalysisRunSpecMetricsProviderKayentaThreshold {
            marginal: number;
            pass: number;
        }

        export interface AnalysisRunSpecMetricsProviderNewrelic {
            profile?: string;
            query: string;
        }

        export interface AnalysisRunSpecMetricsProviderPrometheus {
            address?: string;
            query?: string;
        }

        export interface AnalysisRunSpecMetricsProviderWavefront {
            address?: string;
            query?: string;
        }

        export interface AnalysisRunSpecMetricsProviderWeb {
            body?: string;
            headers?: outputs.argoproj.v1alpha1.AnalysisRunSpecMetricsProviderWebHeaders[];
            insecure?: boolean;
            jsonPath?: string;
            method?: string;
            timeoutSeconds?: number;
            url: string;
        }

        export interface AnalysisRunSpecMetricsProviderWebHeaders {
            key: string;
            value: string;
        }

        export interface AnalysisRunStatus {
            dryRunSummary?: outputs.argoproj.v1alpha1.AnalysisRunStatusDryrunsummary;
            message?: string;
            metricResults?: outputs.argoproj.v1alpha1.AnalysisRunStatusMetricresults[];
            phase: string;
            runSummary?: outputs.argoproj.v1alpha1.AnalysisRunStatusRunsummary;
            startedAt?: string;
        }

        export interface AnalysisRunStatusDryrunsummary {
            count?: number;
            error?: number;
            failed?: number;
            inconclusive?: number;
            successful?: number;
        }

        export interface AnalysisRunStatusMetricresults {
            consecutiveError?: number;
            count?: number;
            dryRun?: boolean;
            error?: number;
            failed?: number;
            inconclusive?: number;
            measurements?: outputs.argoproj.v1alpha1.AnalysisRunStatusMetricresultsMeasurements[];
            message?: string;
            metadata?: {[key: string]: string};
            name: string;
            phase: string;
            successful?: number;
        }

        export interface AnalysisRunStatusMetricresultsMeasurements {
            finishedAt?: string;
            message?: string;
            metadata?: {[key: string]: string};
            phase: string;
            resumeAt?: string;
            startedAt?: string;
            value?: string;
        }

        export interface AnalysisRunStatusRunsummary {
            count?: number;
            error?: number;
            failed?: number;
            inconclusive?: number;
            successful?: number;
        }

        export interface AnalysisTemplateSpec {
            args?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecArgs[];
            dryRun?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecDryrun[];
            measurementRetention?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMeasurementretention[];
            metrics: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetrics[];
        }

        export interface AnalysisTemplateSpecArgs {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecArgsValuefrom;
        }

        export interface AnalysisTemplateSpecArgsValuefrom {
            fieldRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecArgsValuefromFieldref;
            secretKeyRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecArgsValuefromSecretkeyref;
        }

        export interface AnalysisTemplateSpecArgsValuefromFieldref {
            fieldPath: string;
        }

        export interface AnalysisTemplateSpecArgsValuefromSecretkeyref {
            key: string;
            name: string;
        }

        export interface AnalysisTemplateSpecDryrun {
            metricName: string;
        }

        export interface AnalysisTemplateSpecMeasurementretention {
            limit: number;
            metricName: string;
        }

        export interface AnalysisTemplateSpecMetrics {
            consecutiveErrorLimit?: number | string;
            count?: number | string;
            failureCondition?: string;
            failureLimit?: number | string;
            inconclusiveLimit?: number | string;
            initialDelay?: string;
            interval?: string;
            name: string;
            provider: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProvider;
            successCondition?: string;
        }

        export interface AnalysisTemplateSpecMetricsProvider {
            cloudWatch?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderCloudwatch;
            datadog?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderDatadog;
            graphite?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderGraphite;
            influxdb?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderInfluxdb;
            job?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJob;
            kayenta?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderKayenta;
            newRelic?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderNewrelic;
            prometheus?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderPrometheus;
            wavefront?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderWavefront;
            web?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderWeb;
        }

        export interface AnalysisTemplateSpecMetricsProviderCloudwatch {
            interval?: string;
            metricDataQueries: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderCloudwatchMetricdataqueries[];
        }

        export interface AnalysisTemplateSpecMetricsProviderCloudwatchMetricdataqueries {
            expression?: string;
            id?: string;
            label?: string;
            metricStat?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderCloudwatchMetricdataqueriesMetricstat;
            period?: number | string;
            returnData?: boolean;
        }

        export interface AnalysisTemplateSpecMetricsProviderCloudwatchMetricdataqueriesMetricstat {
            metric?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderCloudwatchMetricdataqueriesMetricstatMetric;
            period?: number | string;
            stat?: string;
            unit?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderCloudwatchMetricdataqueriesMetricstatMetric {
            dimensions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderCloudwatchMetricdataqueriesMetricstatMetricDimensions[];
            metricName?: string;
            namespace?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderCloudwatchMetricdataqueriesMetricstatMetricDimensions {
            name?: string;
            value?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderDatadog {
            interval?: string;
            query: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderGraphite {
            address?: string;
            query?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderInfluxdb {
            profile?: string;
            query?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJob {
            metadata?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobMetadata;
            spec: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpec;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpec {
            activeDeadlineSeconds?: number;
            backoffLimit?: number;
            completionMode?: string;
            completions?: number;
            manualSelector?: boolean;
            parallelism?: number;
            selector?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecSelector;
            suspend?: boolean;
            template: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplate;
            ttlSecondsAfterFinished?: number;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecSelector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplate {
            metadata?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateMetadata;
            spec?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpec;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpec {
            activeDeadlineSeconds?: number;
            affinity?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinity;
            automountServiceAccountToken?: boolean;
            containers: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainers[];
            dnsConfig?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecDnsconfig;
            dnsPolicy?: string;
            enableServiceLinks?: boolean;
            ephemeralContainers?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainers[];
            hostAliases?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecHostaliases[];
            hostIPC?: boolean;
            hostNetwork?: boolean;
            hostPID?: boolean;
            hostname?: string;
            imagePullSecrets?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecImagepullsecrets[];
            initContainers?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainers[];
            nodeName?: string;
            nodeSelector?: {[key: string]: string};
            os?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecOs;
            overhead?: {[key: string]: number | string};
            preemptionPolicy?: string;
            priority?: number;
            priorityClassName?: string;
            readinessGates?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecReadinessgates[];
            restartPolicy?: string;
            runtimeClassName?: string;
            schedulerName?: string;
            securityContext?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontext;
            serviceAccount?: string;
            serviceAccountName?: string;
            setHostnameAsFQDN?: boolean;
            shareProcessNamespace?: boolean;
            subdomain?: string;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecTolerations[];
            topologySpreadConstraints?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecTopologyspreadconstraints[];
            volumes?: {[key: string]: any};
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinity {
            nodeAffinity?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinity;
            podAffinity?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinity;
            podAntiAffinity?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinity;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainers {
            args?: string[];
            command?: string[];
            env?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnv[];
            envFrom?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecycle;
            livenessProbe?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobe;
            name: string;
            ports?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersPorts[];
            readinessProbe?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobe;
            resources?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersResources;
            securityContext?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontext;
            startupProbe?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersVolumedevices[];
            volumeMounts?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersVolumemounts[];
            workingDir?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefrom;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefrom {
            configMapKeyRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromSecretkeyref;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvfrom {
            configMapRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvfromSecretref;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecycle {
            postStart?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststart;
            preStop?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestop;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststart {
            exec?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartExec;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartTcpsocket;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestop {
            exec?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopExec;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopTcpsocket;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobe {
            exec?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeExec {
            command?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * analysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersPortsProvideDefaults sets the appropriate defaults for AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersPorts
         */
        export function analysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersPortsProvideDefaults(val: AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersPorts): AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobe {
            exec?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeExec {
            command?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersResources {
            limits?: {[key: string]: any};
            requests?: {[key: string]: any};
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextWindowsoptions;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobe {
            exec?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeExec {
            command?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeGrpc {
            port: number;
            service?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecDnsconfig {
            nameservers?: string[];
            options?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecDnsconfigOptions[];
            searches?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecDnsconfigOptions {
            name?: string;
            value?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnv[];
            envFrom?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecycle;
            livenessProbe?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobe;
            name: string;
            ports?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPorts[];
            readinessProbe?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobe;
            resources?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersResources;
            securityContext?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontext;
            startupProbe?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            targetContainerName?: string;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersVolumedevices[];
            volumeMounts?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefrom;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefrom {
            configMapKeyRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromSecretkeyref;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvfrom {
            configMapRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvfromSecretref;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecycle {
            postStart?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststart;
            preStop?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestop;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststart {
            exec?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartExec;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartTcpsocket;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestop {
            exec?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopExec;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopTcpsocket;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobe {
            exec?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * analysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPortsProvideDefaults sets the appropriate defaults for AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPorts
         */
        export function analysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPortsProvideDefaults(val: AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPorts): AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobe {
            exec?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersResources {
            limits?: {[key: string]: any};
            requests?: {[key: string]: any};
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextWindowsoptions;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobe {
            exec?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeExec {
            command?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeGrpc {
            port: number;
            service?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecHostaliases {
            hostnames?: string[];
            ip?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecImagepullsecrets {
            name?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnv[];
            envFrom?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecycle;
            livenessProbe?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobe;
            name: string;
            ports?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersPorts[];
            readinessProbe?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobe;
            resources?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersResources;
            securityContext?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontext;
            startupProbe?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersVolumedevices[];
            volumeMounts?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefrom;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefrom {
            configMapKeyRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromSecretkeyref;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvfrom {
            configMapRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvfromSecretref;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecycle {
            postStart?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststart;
            preStop?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestop;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststart {
            exec?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartExec;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartTcpsocket;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestop {
            exec?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopExec;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopTcpsocket;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobe {
            exec?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * analysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersPortsProvideDefaults sets the appropriate defaults for AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersPorts
         */
        export function analysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersPortsProvideDefaults(val: AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersPorts): AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobe {
            exec?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersResources {
            limits?: {[key: string]: any};
            requests?: {[key: string]: any};
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextWindowsoptions;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobe {
            exec?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeExec {
            command?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeGrpc {
            port: number;
            service?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecOs {
            name: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecReadinessgates {
            conditionType: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontextSysctls[];
            windowsOptions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontextWindowsoptions;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecTopologyspreadconstraints {
            labelSelector?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecTopologyspreadconstraintsLabelselector;
            maxSkew: number;
            minDomains?: number;
            topologyKey: string;
            whenUnsatisfiable: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecTopologyspreadconstraintsLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecTopologyspreadconstraintsLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface AnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecTopologyspreadconstraintsLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface AnalysisTemplateSpecMetricsProviderKayenta {
            address: string;
            application: string;
            canaryConfigName: string;
            configurationAccountName: string;
            metricsAccountName: string;
            scopes: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderKayentaScopes[];
            storageAccountName: string;
            threshold: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderKayentaThreshold;
        }

        export interface AnalysisTemplateSpecMetricsProviderKayentaScopes {
            controlScope: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderKayentaScopesControlscope;
            experimentScope: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderKayentaScopesExperimentscope;
            name: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderKayentaScopesControlscope {
            end: string;
            region: string;
            scope: string;
            start: string;
            step: number;
        }

        export interface AnalysisTemplateSpecMetricsProviderKayentaScopesExperimentscope {
            end: string;
            region: string;
            scope: string;
            start: string;
            step: number;
        }

        export interface AnalysisTemplateSpecMetricsProviderKayentaThreshold {
            marginal: number;
            pass: number;
        }

        export interface AnalysisTemplateSpecMetricsProviderNewrelic {
            profile?: string;
            query: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderPrometheus {
            address?: string;
            query?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderWavefront {
            address?: string;
            query?: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderWeb {
            body?: string;
            headers?: outputs.argoproj.v1alpha1.AnalysisTemplateSpecMetricsProviderWebHeaders[];
            insecure?: boolean;
            jsonPath?: string;
            method?: string;
            timeoutSeconds?: number;
            url: string;
        }

        export interface AnalysisTemplateSpecMetricsProviderWebHeaders {
            key: string;
            value: string;
        }

        /**
         * AppProjectSpec is the specification of an AppProject
         */
        export interface AppProjectSpec {
            /**
             * ClusterResourceBlacklist contains list of blacklisted cluster level resources
             */
            clusterResourceBlacklist?: outputs.argoproj.v1alpha1.AppProjectSpecClusterresourceblacklist[];
            /**
             * ClusterResourceWhitelist contains list of whitelisted cluster level resources
             */
            clusterResourceWhitelist?: outputs.argoproj.v1alpha1.AppProjectSpecClusterresourcewhitelist[];
            /**
             * Description contains optional project description
             */
            description?: string;
            /**
             * Destinations contains list of destinations available for deployment
             */
            destinations?: outputs.argoproj.v1alpha1.AppProjectSpecDestinations[];
            /**
             * NamespaceResourceBlacklist contains list of blacklisted namespace level resources
             */
            namespaceResourceBlacklist?: outputs.argoproj.v1alpha1.AppProjectSpecNamespaceresourceblacklist[];
            /**
             * NamespaceResourceWhitelist contains list of whitelisted namespace level resources
             */
            namespaceResourceWhitelist?: outputs.argoproj.v1alpha1.AppProjectSpecNamespaceresourcewhitelist[];
            /**
             * OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
             */
            orphanedResources?: outputs.argoproj.v1alpha1.AppProjectSpecOrphanedresources;
            /**
             * Roles are user defined RBAC roles associated with this project
             */
            roles?: outputs.argoproj.v1alpha1.AppProjectSpecRoles[];
            /**
             * SignatureKeys contains a list of PGP key IDs that commits in Git must be signed with in order to be allowed for sync
             */
            signatureKeys?: outputs.argoproj.v1alpha1.AppProjectSpecSignaturekeys[];
            /**
             * SourceRepos contains list of repository URLs which can be used for deployment
             */
            sourceRepos?: string[];
            /**
             * SyncWindows controls when syncs can be run for apps in this project
             */
            syncWindows?: outputs.argoproj.v1alpha1.AppProjectSpecSyncwindows[];
        }

        /**
         * GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
         */
        export interface AppProjectSpecClusterresourceblacklist {
            group: string;
            kind: string;
        }

        /**
         * GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
         */
        export interface AppProjectSpecClusterresourcewhitelist {
            group: string;
            kind: string;
        }

        /**
         * ApplicationDestination holds information about the application's destination
         */
        export interface AppProjectSpecDestinations {
            /**
             * Name is an alternate way of specifying the target cluster by its symbolic name
             */
            name?: string;
            /**
             * Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
             */
            namespace?: string;
            /**
             * Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API
             */
            server?: string;
        }

        /**
         * GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
         */
        export interface AppProjectSpecNamespaceresourceblacklist {
            group: string;
            kind: string;
        }

        /**
         * GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
         */
        export interface AppProjectSpecNamespaceresourcewhitelist {
            group: string;
            kind: string;
        }

        /**
         * OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
         */
        export interface AppProjectSpecOrphanedresources {
            /**
             * Ignore contains a list of resources that are to be excluded from orphaned resources monitoring
             */
            ignore?: outputs.argoproj.v1alpha1.AppProjectSpecOrphanedresourcesIgnore[];
            /**
             * Warn indicates if warning condition should be created for apps which have orphaned resources
             */
            warn?: boolean;
        }

        /**
         * OrphanedResourceKey is a reference to a resource to be ignored from
         */
        export interface AppProjectSpecOrphanedresourcesIgnore {
            group?: string;
            kind?: string;
            name?: string;
        }

        /**
         * ProjectRole represents a role that has access to a project
         */
        export interface AppProjectSpecRoles {
            /**
             * Description is a description of the role
             */
            description?: string;
            /**
             * Groups are a list of OIDC group claims bound to this role
             */
            groups?: string[];
            /**
             * JWTTokens are a list of generated JWT tokens bound to this role
             */
            jwtTokens?: outputs.argoproj.v1alpha1.AppProjectSpecRolesJwttokens[];
            /**
             * Name is a name for this role
             */
            name: string;
            /**
             * Policies Stores a list of casbin formatted strings that define access policies for the role in the project
             */
            policies?: string[];
        }

        /**
         * JWTToken holds the issuedAt and expiresAt values of a token
         */
        export interface AppProjectSpecRolesJwttokens {
            exp?: number;
            iat: number;
            id?: string;
        }

        /**
         * SignatureKey is the specification of a key required to verify commit signatures with
         */
        export interface AppProjectSpecSignaturekeys {
            /**
             * The ID of the key in hexadecimal notation
             */
            keyID: string;
        }

        /**
         * SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps
         */
        export interface AppProjectSpecSyncwindows {
            /**
             * Applications contains a list of applications that the window will apply to
             */
            applications?: string[];
            /**
             * Clusters contains a list of clusters that the window will apply to
             */
            clusters?: string[];
            /**
             * Duration is the amount of time the sync window will be open
             */
            duration?: string;
            /**
             * Kind defines if the window allows or blocks syncs
             */
            kind?: string;
            /**
             * ManualSync enables manual syncs when they would otherwise be blocked
             */
            manualSync?: boolean;
            /**
             * Namespaces contains a list of namespaces that the window will apply to
             */
            namespaces?: string[];
            /**
             * Schedule is the time the window will begin, specified in cron format
             */
            schedule?: string;
            /**
             * TimeZone of the sync that will be applied to the schedule
             */
            timeZone?: string;
        }

        /**
         * AppProjectStatus contains status information for AppProject CRs
         */
        export interface AppProjectStatus {
            /**
             * JWTTokensByRole contains a list of JWT tokens issued for a given role
             */
            jwtTokensByRole?: {[key: string]: outputs.argoproj.v1alpha1.AppProjectStatusJwttokensbyrole};
        }

        /**
         * JWTTokens represents a list of JWT tokens
         */
        export interface AppProjectStatusJwttokensbyrole {
            items?: outputs.argoproj.v1alpha1.AppProjectStatusJwttokensbyroleItems[];
        }

        /**
         * JWTToken holds the issuedAt and expiresAt values of a token
         */
        export interface AppProjectStatusJwttokensbyroleItems {
            exp?: number;
            iat: number;
            id?: string;
        }

        /**
         * Operation contains information about a requested or running operation
         */
        export interface ApplicationOperation {
            /**
             * Info is a list of informational items for this operation
             */
            info?: outputs.argoproj.v1alpha1.ApplicationOperationInfo[];
            /**
             * InitiatedBy contains information about who initiated the operations
             */
            initiatedBy?: outputs.argoproj.v1alpha1.ApplicationOperationInitiatedby;
            /**
             * Retry controls the strategy to apply if a sync fails
             */
            retry?: outputs.argoproj.v1alpha1.ApplicationOperationRetry;
            /**
             * Sync contains parameters for the operation
             */
            sync?: outputs.argoproj.v1alpha1.ApplicationOperationSync;
        }

        export interface ApplicationOperationInfo {
            name: string;
            value: string;
        }

        /**
         * InitiatedBy contains information about who initiated the operations
         */
        export interface ApplicationOperationInitiatedby {
            /**
             * Automated is set to true if operation was initiated automatically by the application controller.
             */
            automated?: boolean;
            /**
             * Username contains the name of a user who started operation
             */
            username?: string;
        }

        /**
         * Retry controls the strategy to apply if a sync fails
         */
        export interface ApplicationOperationRetry {
            /**
             * Backoff controls how to backoff on subsequent retries of failed syncs
             */
            backoff?: outputs.argoproj.v1alpha1.ApplicationOperationRetryBackoff;
            /**
             * Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
             */
            limit?: number;
        }

        /**
         * Backoff controls how to backoff on subsequent retries of failed syncs
         */
        export interface ApplicationOperationRetryBackoff {
            /**
             * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
             */
            duration?: string;
            /**
             * Factor is a factor to multiply the base duration after each failed retry
             */
            factor?: number;
            /**
             * MaxDuration is the maximum amount of time allowed for the backoff strategy
             */
            maxDuration?: string;
        }

        /**
         * Sync contains parameters for the operation
         */
        export interface ApplicationOperationSync {
            /**
             * DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
             */
            dryRun?: boolean;
            /**
             * Manifests is an optional field that overrides sync source with a local directory for development
             */
            manifests?: string[];
            /**
             * Prune specifies to delete resources from the cluster that are no longer tracked in git
             */
            prune?: boolean;
            /**
             * Resources describes which resources shall be part of the sync
             */
            resources?: outputs.argoproj.v1alpha1.ApplicationOperationSyncResources[];
            /**
             * Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.
             */
            revision?: string;
            /**
             * Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
             */
            source?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSource;
            /**
             * SyncOptions provide per-sync sync-options, e.g. Validate=false
             */
            syncOptions?: string[];
            /**
             * SyncStrategy describes how to perform the sync
             */
            syncStrategy?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSyncstrategy;
        }

        /**
         * SyncOperationResource contains resources to sync.
         */
        export interface ApplicationOperationSyncResources {
            group?: string;
            kind: string;
            name: string;
            namespace?: string;
        }

        /**
         * Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
         */
        export interface ApplicationOperationSyncSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcePlugin;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationOperationSyncSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationOperationSyncSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectoryJsonnetExtvars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationOperationSyncSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationOperationSyncSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationOperationSyncSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceHelmFileparameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating (either "2" or "3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationOperationSyncSourceHelmFileparameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationOperationSyncSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationOperationSyncSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationOperationSyncSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationOperationSyncSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationOperationSyncSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcePluginEnv[];
            name?: string;
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationOperationSyncSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        /**
         * SyncStrategy describes how to perform the sync
         */
        export interface ApplicationOperationSyncSyncstrategy {
            /**
             * Apply will perform a `kubectl apply` to perform the sync.
             */
            apply?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSyncstrategyApply;
            /**
             * Hook will submit any referenced resources to perform the sync. This is the default strategy
             */
            hook?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSyncstrategyHook;
        }

        /**
         * Apply will perform a `kubectl apply` to perform the sync.
         */
        export interface ApplicationOperationSyncSyncstrategyApply {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        /**
         * Hook will submit any referenced resources to perform the sync. This is the default strategy
         */
        export interface ApplicationOperationSyncSyncstrategyHook {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        export interface ApplicationSetSpec {
            generators: outputs.argoproj.v1alpha1.ApplicationSetSpecGenerators[];
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecSyncpolicy;
            template: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplate;
        }

        export interface ApplicationSetSpecGenerators {
            clusterDecisionResource?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresource;
            clusters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusters;
            git?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGit;
            list?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsList;
            matrix?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrix;
            merge?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMerge;
            pullRequest?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequest;
            scmProvider?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmprovider;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresource {
            configMapRef: string;
            labelSelector?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceLabelselector;
            name?: string;
            requeueAfterSeconds?: number;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplate;
            values?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsClusterdecisionresourceTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusters {
            selector?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersSelector;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplate;
            values?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsClustersSelector {
            matchExpressions?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsClustersSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsGit {
            directories?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitDirectories[];
            files?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitFiles[];
            repoURL: string;
            requeueAfterSeconds?: number;
            revision: string;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplate;
        }

        export interface ApplicationSetSpecGeneratorsGitDirectories {
            exclude?: boolean;
            path: string;
        }

        export interface ApplicationSetSpecGeneratorsGitFiles {
            path: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsList {
            elements: {[key: string]: any}[];
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplate;
        }

        export interface ApplicationSetSpecGeneratorsListTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrix {
            generators: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGenerators[];
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGenerators {
            clusterDecisionResource?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresource;
            clusters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusters;
            git?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGit;
            list?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsList;
            matrix?: {[key: string]: any};
            merge?: {[key: string]: any};
            pullRequest?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequest;
            scmProvider?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmprovider;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresource {
            configMapRef: string;
            labelSelector?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceLabelselector;
            name?: string;
            requeueAfterSeconds?: number;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplate;
            values?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterdecisionresourceTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusters {
            selector?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersSelector;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplate;
            values?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersSelector {
            matchExpressions?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGit {
            directories?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitDirectories[];
            files?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitFiles[];
            repoURL: string;
            requeueAfterSeconds?: number;
            revision: string;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitDirectories {
            exclude?: boolean;
            path: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitFiles {
            path: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsList {
            elements: {[key: string]: any}[];
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequest {
            github?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestGithub;
            requeueAfterSeconds?: number;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestGithub {
            api?: string;
            labels?: string[];
            owner: string;
            repo: string;
            tokenRef?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestGithubTokenref;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestGithubTokenref {
            key: string;
            secretName: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullrequestTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmprovider {
            cloneProtocol?: string;
            filters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderFilters[];
            github?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderGithub;
            gitlab?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderGitlab;
            requeueAfterSeconds?: number;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderFilters {
            branchMatch?: string;
            labelMatch?: string;
            pathsExist?: string[];
            repositoryMatch?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderGithub {
            allBranches?: boolean;
            api?: string;
            organization: string;
            tokenRef?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderGithubTokenref;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderGithubTokenref {
            key: string;
            secretName: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderGitlab {
            allBranches?: boolean;
            api?: string;
            group: string;
            includeSubgroups?: boolean;
            tokenRef?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderGitlabTokenref;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderGitlabTokenref {
            key: string;
            secretName: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmproviderTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMerge {
            generators: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGenerators[];
            mergeKeys: string[];
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMergeGenerators {
            clusterDecisionResource?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresource;
            clusters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusters;
            git?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGit;
            list?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsList;
            matrix?: {[key: string]: any};
            merge?: {[key: string]: any};
            pullRequest?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequest;
            scmProvider?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmprovider;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresource {
            configMapRef: string;
            labelSelector?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceLabelselector;
            name?: string;
            requeueAfterSeconds?: number;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplate;
            values?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterdecisionresourceTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusters {
            selector?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersSelector;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplate;
            values?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersSelector {
            matchExpressions?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGit {
            directories?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitDirectories[];
            files?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitFiles[];
            repoURL: string;
            requeueAfterSeconds?: number;
            revision: string;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitDirectories {
            exclude?: boolean;
            path: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitFiles {
            path: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsList {
            elements: {[key: string]: any}[];
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequest {
            github?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestGithub;
            requeueAfterSeconds?: number;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestGithub {
            api?: string;
            labels?: string[];
            owner: string;
            repo: string;
            tokenRef?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestGithubTokenref;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestGithubTokenref {
            key: string;
            secretName: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullrequestTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmprovider {
            cloneProtocol?: string;
            filters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderFilters[];
            github?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderGithub;
            gitlab?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderGitlab;
            requeueAfterSeconds?: number;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderFilters {
            branchMatch?: string;
            labelMatch?: string;
            pathsExist?: string[];
            repositoryMatch?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderGithub {
            allBranches?: boolean;
            api?: string;
            organization: string;
            tokenRef?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderGithubTokenref;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderGithubTokenref {
            key: string;
            secretName: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderGitlab {
            allBranches?: boolean;
            api?: string;
            group: string;
            includeSubgroups?: boolean;
            tokenRef?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderGitlabTokenref;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderGitlabTokenref {
            key: string;
            secretName: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmproviderTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullrequest {
            github?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestGithub;
            requeueAfterSeconds?: number;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplate;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestGithub {
            api?: string;
            labels?: string[];
            owner: string;
            repo: string;
            tokenRef?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestGithubTokenref;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestGithubTokenref {
            key: string;
            secretName: string;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullrequestTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsPullrequestTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmprovider {
            cloneProtocol?: string;
            filters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderFilters[];
            github?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderGithub;
            gitlab?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderGitlab;
            requeueAfterSeconds?: number;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplate;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderFilters {
            branchMatch?: string;
            labelMatch?: string;
            pathsExist?: string[];
            repositoryMatch?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderGithub {
            allBranches?: boolean;
            api?: string;
            organization: string;
            tokenRef?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderGithubTokenref;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderGithubTokenref {
            key: string;
            secretName: string;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderGitlab {
            allBranches?: boolean;
            api?: string;
            group: string;
            includeSubgroups?: boolean;
            tokenRef?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderGitlabTokenref;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderGitlabTokenref {
            key: string;
            secretName: string;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmproviderTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsScmproviderTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecSyncpolicy {
            preserveResourcesOnDeletion?: boolean;
        }

        export interface ApplicationSetSpecTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpec;
        }

        export interface ApplicationSetSpecTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecIgnoredifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSyncpolicy;
        }

        export interface ApplicationSetSpecTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecTemplateSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtvars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceHelmFileparameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecTemplateSpecSourceHelmFileparameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecTemplateSpecSyncpolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSyncpolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSyncpolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecTemplateSpecSyncpolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecTemplateSpecSyncpolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSyncpolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecTemplateSpecSyncpolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetStatus {
            conditions?: outputs.argoproj.v1alpha1.ApplicationSetStatusConditions[];
        }

        export interface ApplicationSetStatusConditions {
            lastTransitionTime?: string;
            message: string;
            reason: string;
            status: string;
            type: string;
        }

        /**
         * ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
         */
        export interface ApplicationSpec {
            /**
             * Destination is a reference to the target Kubernetes server and namespace
             */
            destination: outputs.argoproj.v1alpha1.ApplicationSpecDestination;
            /**
             * IgnoreDifferences is a list of resources and their fields which should be ignored during comparison
             */
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSpecIgnoredifferences[];
            /**
             * Info contains a list of information (URLs, email addresses, and plain text) that relates to the application
             */
            info?: outputs.argoproj.v1alpha1.ApplicationSpecInfo[];
            /**
             * Project is a reference to the project this application belongs to. The empty string means that application belongs to the 'default' project.
             */
            project: string;
            /**
             * RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
             */
            revisionHistoryLimit?: number;
            /**
             * Source is a reference to the location of the application's manifests or chart
             */
            source: outputs.argoproj.v1alpha1.ApplicationSpecSource;
            /**
             * SyncPolicy controls when and how a sync will be performed
             */
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSpecSyncpolicy;
        }

        /**
         * Destination is a reference to the target Kubernetes server and namespace
         */
        export interface ApplicationSpecDestination {
            /**
             * Name is an alternate way of specifying the target cluster by its symbolic name
             */
            name?: string;
            /**
             * Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
             */
            namespace?: string;
            /**
             * Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API
             */
            server?: string;
        }

        /**
         * ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
         */
        export interface ApplicationSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            /**
             * ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take precedence over the desired state defined in the SCM and won't be displayed in diffs
             */
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSpecInfo {
            name: string;
            value: string;
        }

        /**
         * Source is a reference to the location of the application's manifests or chart
         */
        export interface ApplicationSpecSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationSpecSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSpecSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSpecSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationSpecSourcePlugin;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationSpecSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationSpecSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectoryJsonnetExtvars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationSpecSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSpecSourceHelmFileparameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationSpecSourceHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating (either "2" or "3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationSpecSourceHelmFileparameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationSpecSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationSpecSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationSpecSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationSpecSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationSpecSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationSpecSourcePluginEnv[];
            name?: string;
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationSpecSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        /**
         * SyncPolicy controls when and how a sync will be performed
         */
        export interface ApplicationSpecSyncpolicy {
            /**
             * Automated will keep an application synced to the target revision
             */
            automated?: outputs.argoproj.v1alpha1.ApplicationSpecSyncpolicyAutomated;
            /**
             * Retry controls failed sync retry behavior
             */
            retry?: outputs.argoproj.v1alpha1.ApplicationSpecSyncpolicyRetry;
            /**
             * Options allow you to specify whole app sync-options
             */
            syncOptions?: string[];
        }

        /**
         * Automated will keep an application synced to the target revision
         */
        export interface ApplicationSpecSyncpolicyAutomated {
            /**
             * AllowEmpty allows apps have zero live resources (default: false)
             */
            allowEmpty?: boolean;
            /**
             * Prune specifies whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false)
             */
            prune?: boolean;
            /**
             * SelfHeal specifes whether to revert resources back to their desired state upon modification in the cluster (default: false)
             */
            selfHeal?: boolean;
        }

        /**
         * Retry controls failed sync retry behavior
         */
        export interface ApplicationSpecSyncpolicyRetry {
            /**
             * Backoff controls how to backoff on subsequent retries of failed syncs
             */
            backoff?: outputs.argoproj.v1alpha1.ApplicationSpecSyncpolicyRetryBackoff;
            /**
             * Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
             */
            limit?: number;
        }

        /**
         * Backoff controls how to backoff on subsequent retries of failed syncs
         */
        export interface ApplicationSpecSyncpolicyRetryBackoff {
            /**
             * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
             */
            duration?: string;
            /**
             * Factor is a factor to multiply the base duration after each failed retry
             */
            factor?: number;
            /**
             * MaxDuration is the maximum amount of time allowed for the backoff strategy
             */
            maxDuration?: string;
        }

        /**
         * ApplicationStatus contains status information for the application
         */
        export interface ApplicationStatus {
            /**
             * Conditions is a list of currently observed application conditions
             */
            conditions?: outputs.argoproj.v1alpha1.ApplicationStatusConditions[];
            /**
             * Health contains information about the application's current health status
             */
            health?: outputs.argoproj.v1alpha1.ApplicationStatusHealth;
            /**
             * History contains information about the application's sync history
             */
            history?: outputs.argoproj.v1alpha1.ApplicationStatusHistory[];
            /**
             * ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field
             */
            observedAt?: string;
            /**
             * OperationState contains information about any ongoing operations, such as a sync
             */
            operationState?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstate;
            /**
             * ReconciledAt indicates when the application state was reconciled using the latest git version
             */
            reconciledAt?: string;
            /**
             * Resources is a list of Kubernetes resources managed by this application
             */
            resources?: outputs.argoproj.v1alpha1.ApplicationStatusResources[];
            /**
             * SourceType specifies the type of this application
             */
            sourceType?: string;
            /**
             * Summary contains a list of URLs and container images used by this application
             */
            summary?: outputs.argoproj.v1alpha1.ApplicationStatusSummary;
            /**
             * Sync contains information about the application's current sync status
             */
            sync?: outputs.argoproj.v1alpha1.ApplicationStatusSync;
        }

        /**
         * ApplicationCondition contains details about an application condition, which is usually an error or warning
         */
        export interface ApplicationStatusConditions {
            /**
             * LastTransitionTime is the time the condition was last observed
             */
            lastTransitionTime?: string;
            /**
             * Message contains human-readable message indicating details about condition
             */
            message: string;
            /**
             * Type is an application condition type
             */
            type: string;
        }

        /**
         * Health contains information about the application's current health status
         */
        export interface ApplicationStatusHealth {
            /**
             * Message is a human-readable informational message describing the health status
             */
            message?: string;
            /**
             * Status holds the status code of the application or resource
             */
            status?: string;
        }

        /**
         * RevisionHistory contains history information about a previous sync
         */
        export interface ApplicationStatusHistory {
            /**
             * DeployStartedAt holds the time the sync operation started
             */
            deployStartedAt?: string;
            /**
             * DeployedAt holds the time the sync operation completed
             */
            deployedAt: string;
            /**
             * ID is an auto incrementing identifier of the RevisionHistory
             */
            id: number;
            /**
             * Revision holds the revision the sync was performed against
             */
            revision: string;
            /**
             * Source is a reference to the application source used for the sync operation
             */
            source?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySource;
        }

        /**
         * Source is a reference to the application source used for the sync operation
         */
        export interface ApplicationStatusHistorySource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcePlugin;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusHistorySourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusHistorySourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectoryJsonnetExtvars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusHistorySourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusHistorySourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusHistorySourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceHelmFileparameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating (either "2" or "3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusHistorySourceHelmFileparameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusHistorySourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationStatusHistorySourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationStatusHistorySourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusHistorySourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationStatusHistorySourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcePluginEnv[];
            name?: string;
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusHistorySourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        /**
         * OperationState contains information about any ongoing operations, such as a sync
         */
        export interface ApplicationStatusOperationstate {
            /**
             * FinishedAt contains time of operation completion
             */
            finishedAt?: string;
            /**
             * Message holds any pertinent messages when attempting to perform operation (typically errors).
             */
            message?: string;
            /**
             * Operation is the original requested operation
             */
            operation: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperation;
            /**
             * Phase is the current phase of the operation
             */
            phase: string;
            /**
             * RetryCount contains time of operation retries
             */
            retryCount?: number;
            /**
             * StartedAt contains time of operation start
             */
            startedAt: string;
            /**
             * SyncResult is the result of a Sync operation
             */
            syncResult?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresult;
        }

        /**
         * Operation is the original requested operation
         */
        export interface ApplicationStatusOperationstateOperation {
            /**
             * Info is a list of informational items for this operation
             */
            info?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationInfo[];
            /**
             * InitiatedBy contains information about who initiated the operations
             */
            initiatedBy?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationInitiatedby;
            /**
             * Retry controls the strategy to apply if a sync fails
             */
            retry?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationRetry;
            /**
             * Sync contains parameters for the operation
             */
            sync?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSync;
        }

        export interface ApplicationStatusOperationstateOperationInfo {
            name: string;
            value: string;
        }

        /**
         * InitiatedBy contains information about who initiated the operations
         */
        export interface ApplicationStatusOperationstateOperationInitiatedby {
            /**
             * Automated is set to true if operation was initiated automatically by the application controller.
             */
            automated?: boolean;
            /**
             * Username contains the name of a user who started operation
             */
            username?: string;
        }

        /**
         * Retry controls the strategy to apply if a sync fails
         */
        export interface ApplicationStatusOperationstateOperationRetry {
            /**
             * Backoff controls how to backoff on subsequent retries of failed syncs
             */
            backoff?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationRetryBackoff;
            /**
             * Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
             */
            limit?: number;
        }

        /**
         * Backoff controls how to backoff on subsequent retries of failed syncs
         */
        export interface ApplicationStatusOperationstateOperationRetryBackoff {
            /**
             * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
             */
            duration?: string;
            /**
             * Factor is a factor to multiply the base duration after each failed retry
             */
            factor?: number;
            /**
             * MaxDuration is the maximum amount of time allowed for the backoff strategy
             */
            maxDuration?: string;
        }

        /**
         * Sync contains parameters for the operation
         */
        export interface ApplicationStatusOperationstateOperationSync {
            /**
             * DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
             */
            dryRun?: boolean;
            /**
             * Manifests is an optional field that overrides sync source with a local directory for development
             */
            manifests?: string[];
            /**
             * Prune specifies to delete resources from the cluster that are no longer tracked in git
             */
            prune?: boolean;
            /**
             * Resources describes which resources shall be part of the sync
             */
            resources?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncResources[];
            /**
             * Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.
             */
            revision?: string;
            /**
             * Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
             */
            source?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSource;
            /**
             * SyncOptions provide per-sync sync-options, e.g. Validate=false
             */
            syncOptions?: string[];
            /**
             * SyncStrategy describes how to perform the sync
             */
            syncStrategy?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSyncstrategy;
        }

        /**
         * SyncOperationResource contains resources to sync.
         */
        export interface ApplicationStatusOperationstateOperationSyncResources {
            group?: string;
            kind: string;
            name: string;
            namespace?: string;
        }

        /**
         * Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
         */
        export interface ApplicationStatusOperationstateOperationSyncSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourcePlugin;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusOperationstateOperationSyncSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusOperationstateOperationSyncSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourceDirectoryJsonnetExtvars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationstateOperationSyncSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationstateOperationSyncSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusOperationstateOperationSyncSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourceHelmFileparameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourceHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating (either "2" or "3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationstateOperationSyncSourceHelmFileparameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationstateOperationSyncSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationStatusOperationstateOperationSyncSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationStatusOperationstateOperationSyncSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusOperationstateOperationSyncSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationStatusOperationstateOperationSyncSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourcePluginEnv[];
            name?: string;
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusOperationstateOperationSyncSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        /**
         * SyncStrategy describes how to perform the sync
         */
        export interface ApplicationStatusOperationstateOperationSyncSyncstrategy {
            /**
             * Apply will perform a `kubectl apply` to perform the sync.
             */
            apply?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSyncstrategyApply;
            /**
             * Hook will submit any referenced resources to perform the sync. This is the default strategy
             */
            hook?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSyncstrategyHook;
        }

        /**
         * Apply will perform a `kubectl apply` to perform the sync.
         */
        export interface ApplicationStatusOperationstateOperationSyncSyncstrategyApply {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        /**
         * Hook will submit any referenced resources to perform the sync. This is the default strategy
         */
        export interface ApplicationStatusOperationstateOperationSyncSyncstrategyHook {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        /**
         * SyncResult is the result of a Sync operation
         */
        export interface ApplicationStatusOperationstateSyncresult {
            /**
             * Resources contains a list of sync result items for each individual resource in a sync operation
             */
            resources?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultResources[];
            /**
             * Revision holds the revision this sync operation was performed to
             */
            revision: string;
            /**
             * Source records the application source information of the sync, used for comparing auto-sync
             */
            source?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSource;
        }

        /**
         * ResourceResult holds the operation result details of a specific resource
         */
        export interface ApplicationStatusOperationstateSyncresultResources {
            /**
             * Group specifies the API group of the resource
             */
            group: string;
            /**
             * HookPhase contains the state of any operation associated with this resource OR hook This can also contain values for non-hook resources.
             */
            hookPhase?: string;
            /**
             * HookType specifies the type of the hook. Empty for non-hook resources
             */
            hookType?: string;
            /**
             * Kind specifies the API kind of the resource
             */
            kind: string;
            /**
             * Message contains an informational or error message for the last sync OR operation
             */
            message?: string;
            /**
             * Name specifies the name of the resource
             */
            name: string;
            /**
             * Namespace specifies the target namespace of the resource
             */
            namespace: string;
            /**
             * Status holds the final result of the sync. Will be empty if the resources is yet to be applied/pruned and is always zero-value for hooks
             */
            status?: string;
            /**
             * SyncPhase indicates the particular phase of the sync that this result was acquired in
             */
            syncPhase?: string;
            /**
             * Version specifies the API version of the resource
             */
            version: string;
        }

        /**
         * Source records the application source information of the sync, used for comparing auto-sync
         */
        export interface ApplicationStatusOperationstateSyncresultSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourcePlugin;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusOperationstateSyncresultSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusOperationstateSyncresultSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourceDirectoryJsonnetExtvars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationstateSyncresultSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationstateSyncresultSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusOperationstateSyncresultSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourceHelmFileparameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourceHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating (either "2" or "3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationstateSyncresultSourceHelmFileparameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationstateSyncresultSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationStatusOperationstateSyncresultSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationStatusOperationstateSyncresultSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusOperationstateSyncresultSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationStatusOperationstateSyncresultSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourcePluginEnv[];
            name?: string;
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusOperationstateSyncresultSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        /**
         * ResourceStatus holds the current sync and health status of a resource TODO: describe members of this type
         */
        export interface ApplicationStatusResources {
            group?: string;
            /**
             * HealthStatus contains information about the currently observed health state of an application or resource
             */
            health?: outputs.argoproj.v1alpha1.ApplicationStatusResourcesHealth;
            hook?: boolean;
            kind?: string;
            name?: string;
            namespace?: string;
            requiresPruning?: boolean;
            /**
             * SyncStatusCode is a type which represents possible comparison results
             */
            status?: string;
            version?: string;
        }

        /**
         * HealthStatus contains information about the currently observed health state of an application or resource
         */
        export interface ApplicationStatusResourcesHealth {
            /**
             * Message is a human-readable informational message describing the health status
             */
            message?: string;
            /**
             * Status holds the status code of the application or resource
             */
            status?: string;
        }

        /**
         * Summary contains a list of URLs and container images used by this application
         */
        export interface ApplicationStatusSummary {
            /**
             * ExternalURLs holds all external URLs of application child resources.
             */
            externalURLs?: string[];
            /**
             * Images holds all images of application child resources.
             */
            images?: string[];
        }

        /**
         * Sync contains information about the application's current sync status
         */
        export interface ApplicationStatusSync {
            /**
             * ComparedTo contains information about what has been compared
             */
            comparedTo?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedto;
            /**
             * Revision contains information about the revision the comparison has been performed to
             */
            revision?: string;
            /**
             * Status is the sync state of the comparison
             */
            status: string;
        }

        /**
         * ComparedTo contains information about what has been compared
         */
        export interface ApplicationStatusSyncComparedto {
            /**
             * Destination is a reference to the application's destination used for comparison
             */
            destination: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoDestination;
            /**
             * Source is a reference to the application's source used for comparison
             */
            source: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSource;
        }

        /**
         * Destination is a reference to the application's destination used for comparison
         */
        export interface ApplicationStatusSyncComparedtoDestination {
            /**
             * Name is an alternate way of specifying the target cluster by its symbolic name
             */
            name?: string;
            /**
             * Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
             */
            namespace?: string;
            /**
             * Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API
             */
            server?: string;
        }

        /**
         * Source is a reference to the application's source used for comparison
         */
        export interface ApplicationStatusSyncComparedtoSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourcePlugin;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusSyncComparedtoSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusSyncComparedtoSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourceDirectoryJsonnetExtvars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusSyncComparedtoSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusSyncComparedtoSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusSyncComparedtoSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourceHelmFileparameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourceHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating (either "2" or "3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusSyncComparedtoSourceHelmFileparameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusSyncComparedtoSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationStatusSyncComparedtoSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationStatusSyncComparedtoSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusSyncComparedtoSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationStatusSyncComparedtoSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourcePluginEnv[];
            name?: string;
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusSyncComparedtoSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        /**
         * ArgoCDExtensionSpec defines the desired state of ArgoCDExtension
         */
        export interface ArgoCDExtensionSpec {
            /**
             * Sources specifies where the extension should come from
             */
            sources: outputs.argoproj.v1alpha1.ArgoCDExtensionSpecSources[];
        }

        /**
         * ExtensionSource specifies where the extension should be sourced from
         */
        export interface ArgoCDExtensionSpecSources {
            /**
             * Git is specified if the extension should be sourced from a git repository
             */
            git?: outputs.argoproj.v1alpha1.ArgoCDExtensionSpecSourcesGit;
            /**
             * Web is specified if the extension should be sourced from a web file
             */
            web?: outputs.argoproj.v1alpha1.ArgoCDExtensionSpecSourcesWeb;
        }

        /**
         * Git is specified if the extension should be sourced from a git repository
         */
        export interface ArgoCDExtensionSpecSourcesGit {
            /**
             * Revision specifies the revision of the Repository to fetch
             */
            revision?: string;
            /**
             * URL specifies the Git repository URL to fetch
             */
            url?: string;
        }

        /**
         * Web is specified if the extension should be sourced from a web file
         */
        export interface ArgoCDExtensionSpecSourcesWeb {
            /**
             * URK specifies the remote file URL
             */
            url?: string;
        }

        /**
         * ArgoCDExtensionStatus defines the observed state of ArgoCDExtension
         */
        export interface ArgoCDExtensionStatus {
            conditions?: outputs.argoproj.v1alpha1.ArgoCDExtensionStatusConditions[];
        }

        export interface ArgoCDExtensionStatusConditions {
            /**
             * Message contains human-readable message indicating details about condition
             */
            message: string;
            /**
             * Boolean status describing if the condition is currently true
             */
            status: string;
            /**
             * Type is an ArgoCDExtension condition type
             */
            type: string;
        }

        export interface ClusterAnalysisTemplateSpec {
            args?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecArgs[];
            dryRun?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecDryrun[];
            measurementRetention?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMeasurementretention[];
            metrics: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetrics[];
        }

        export interface ClusterAnalysisTemplateSpecArgs {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecArgsValuefrom;
        }

        export interface ClusterAnalysisTemplateSpecArgsValuefrom {
            fieldRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecArgsValuefromFieldref;
            secretKeyRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecArgsValuefromSecretkeyref;
        }

        export interface ClusterAnalysisTemplateSpecArgsValuefromFieldref {
            fieldPath: string;
        }

        export interface ClusterAnalysisTemplateSpecArgsValuefromSecretkeyref {
            key: string;
            name: string;
        }

        export interface ClusterAnalysisTemplateSpecDryrun {
            metricName: string;
        }

        export interface ClusterAnalysisTemplateSpecMeasurementretention {
            limit: number;
            metricName: string;
        }

        export interface ClusterAnalysisTemplateSpecMetrics {
            consecutiveErrorLimit?: number | string;
            count?: number | string;
            failureCondition?: string;
            failureLimit?: number | string;
            inconclusiveLimit?: number | string;
            initialDelay?: string;
            interval?: string;
            name: string;
            provider: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProvider;
            successCondition?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProvider {
            cloudWatch?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderCloudwatch;
            datadog?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderDatadog;
            graphite?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderGraphite;
            influxdb?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderInfluxdb;
            job?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJob;
            kayenta?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderKayenta;
            newRelic?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderNewrelic;
            prometheus?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderPrometheus;
            wavefront?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderWavefront;
            web?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderWeb;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderCloudwatch {
            interval?: string;
            metricDataQueries: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderCloudwatchMetricdataqueries[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderCloudwatchMetricdataqueries {
            expression?: string;
            id?: string;
            label?: string;
            metricStat?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderCloudwatchMetricdataqueriesMetricstat;
            period?: number | string;
            returnData?: boolean;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderCloudwatchMetricdataqueriesMetricstat {
            metric?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderCloudwatchMetricdataqueriesMetricstatMetric;
            period?: number | string;
            stat?: string;
            unit?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderCloudwatchMetricdataqueriesMetricstatMetric {
            dimensions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderCloudwatchMetricdataqueriesMetricstatMetricDimensions[];
            metricName?: string;
            namespace?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderCloudwatchMetricdataqueriesMetricstatMetricDimensions {
            name?: string;
            value?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderDatadog {
            interval?: string;
            query: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderGraphite {
            address?: string;
            query?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderInfluxdb {
            profile?: string;
            query?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJob {
            metadata?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobMetadata;
            spec: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpec;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpec {
            activeDeadlineSeconds?: number;
            backoffLimit?: number;
            completionMode?: string;
            completions?: number;
            manualSelector?: boolean;
            parallelism?: number;
            selector?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecSelector;
            suspend?: boolean;
            template: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplate;
            ttlSecondsAfterFinished?: number;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecSelector {
            matchExpressions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplate {
            metadata?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateMetadata;
            spec?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpec;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpec {
            activeDeadlineSeconds?: number;
            affinity?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinity;
            automountServiceAccountToken?: boolean;
            containers: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainers[];
            dnsConfig?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecDnsconfig;
            dnsPolicy?: string;
            enableServiceLinks?: boolean;
            ephemeralContainers?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainers[];
            hostAliases?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecHostaliases[];
            hostIPC?: boolean;
            hostNetwork?: boolean;
            hostPID?: boolean;
            hostname?: string;
            imagePullSecrets?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecImagepullsecrets[];
            initContainers?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainers[];
            nodeName?: string;
            nodeSelector?: {[key: string]: string};
            os?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecOs;
            overhead?: {[key: string]: number | string};
            preemptionPolicy?: string;
            priority?: number;
            priorityClassName?: string;
            readinessGates?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecReadinessgates[];
            restartPolicy?: string;
            runtimeClassName?: string;
            schedulerName?: string;
            securityContext?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontext;
            serviceAccount?: string;
            serviceAccountName?: string;
            setHostnameAsFQDN?: boolean;
            shareProcessNamespace?: boolean;
            subdomain?: string;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecTolerations[];
            topologySpreadConstraints?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecTopologyspreadconstraints[];
            volumes?: {[key: string]: any};
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinity {
            nodeAffinity?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinity;
            podAffinity?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinity;
            podAntiAffinity?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinity;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainers {
            args?: string[];
            command?: string[];
            env?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnv[];
            envFrom?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecycle;
            livenessProbe?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobe;
            name: string;
            ports?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersPorts[];
            readinessProbe?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobe;
            resources?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersResources;
            securityContext?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontext;
            startupProbe?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersVolumedevices[];
            volumeMounts?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersVolumemounts[];
            workingDir?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefrom;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefrom {
            configMapKeyRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromSecretkeyref;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvfrom {
            configMapRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvfromSecretref;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecycle {
            postStart?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststart;
            preStop?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestop;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststart {
            exec?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartExec;
            httpGet?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartTcpsocket;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestop {
            exec?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopExec;
            httpGet?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopTcpsocket;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobe {
            exec?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeExec {
            command?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * clusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersPortsProvideDefaults sets the appropriate defaults for ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersPorts
         */
        export function clusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersPortsProvideDefaults(val: ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersPorts): ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobe {
            exec?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeExec {
            command?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersResources {
            limits?: {[key: string]: any};
            requests?: {[key: string]: any};
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextWindowsoptions;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobe {
            exec?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeExec {
            command?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeGrpc {
            port: number;
            service?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecContainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecDnsconfig {
            nameservers?: string[];
            options?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecDnsconfigOptions[];
            searches?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecDnsconfigOptions {
            name?: string;
            value?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnv[];
            envFrom?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecycle;
            livenessProbe?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobe;
            name: string;
            ports?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPorts[];
            readinessProbe?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobe;
            resources?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersResources;
            securityContext?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontext;
            startupProbe?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            targetContainerName?: string;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersVolumedevices[];
            volumeMounts?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefrom;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefrom {
            configMapKeyRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromSecretkeyref;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvfrom {
            configMapRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvfromSecretref;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecycle {
            postStart?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststart;
            preStop?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestop;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststart {
            exec?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartExec;
            httpGet?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartTcpsocket;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestop {
            exec?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopExec;
            httpGet?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopTcpsocket;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobe {
            exec?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * clusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPortsProvideDefaults sets the appropriate defaults for ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPorts
         */
        export function clusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPortsProvideDefaults(val: ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPorts): ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobe {
            exec?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersResources {
            limits?: {[key: string]: any};
            requests?: {[key: string]: any};
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextWindowsoptions;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobe {
            exec?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeExec {
            command?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeGrpc {
            port: number;
            service?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecEphemeralcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecHostaliases {
            hostnames?: string[];
            ip?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecImagepullsecrets {
            name?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnv[];
            envFrom?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecycle;
            livenessProbe?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobe;
            name: string;
            ports?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersPorts[];
            readinessProbe?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobe;
            resources?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersResources;
            securityContext?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontext;
            startupProbe?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersVolumedevices[];
            volumeMounts?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefrom;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefrom {
            configMapKeyRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromSecretkeyref;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvfrom {
            configMapRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvfromSecretref;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecycle {
            postStart?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststart;
            preStop?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestop;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststart {
            exec?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartExec;
            httpGet?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartTcpsocket;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestop {
            exec?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopExec;
            httpGet?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopTcpsocket;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobe {
            exec?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * clusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersPortsProvideDefaults sets the appropriate defaults for ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersPorts
         */
        export function clusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersPortsProvideDefaults(val: ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersPorts): ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobe {
            exec?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersResources {
            limits?: {[key: string]: any};
            requests?: {[key: string]: any};
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextWindowsoptions;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobe {
            exec?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeExec {
            command?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeGrpc {
            port: number;
            service?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecInitcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecOs {
            name: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecReadinessgates {
            conditionType: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontextSysctls[];
            windowsOptions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontextWindowsoptions;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecTopologyspreadconstraints {
            labelSelector?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecTopologyspreadconstraintsLabelselector;
            maxSkew: number;
            minDomains?: number;
            topologyKey: string;
            whenUnsatisfiable: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecTopologyspreadconstraintsLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecTopologyspreadconstraintsLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderJobSpecTemplateSpecTopologyspreadconstraintsLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderKayenta {
            address: string;
            application: string;
            canaryConfigName: string;
            configurationAccountName: string;
            metricsAccountName: string;
            scopes: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderKayentaScopes[];
            storageAccountName: string;
            threshold: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderKayentaThreshold;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderKayentaScopes {
            controlScope: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderKayentaScopesControlscope;
            experimentScope: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderKayentaScopesExperimentscope;
            name: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderKayentaScopesControlscope {
            end: string;
            region: string;
            scope: string;
            start: string;
            step: number;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderKayentaScopesExperimentscope {
            end: string;
            region: string;
            scope: string;
            start: string;
            step: number;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderKayentaThreshold {
            marginal: number;
            pass: number;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderNewrelic {
            profile?: string;
            query: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderPrometheus {
            address?: string;
            query?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderWavefront {
            address?: string;
            query?: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderWeb {
            body?: string;
            headers?: outputs.argoproj.v1alpha1.ClusterAnalysisTemplateSpecMetricsProviderWebHeaders[];
            insecure?: boolean;
            jsonPath?: string;
            method?: string;
            timeoutSeconds?: number;
            url: string;
        }

        export interface ClusterAnalysisTemplateSpecMetricsProviderWebHeaders {
            key: string;
            value: string;
        }

        export interface ExperimentSpec {
            analyses?: outputs.argoproj.v1alpha1.ExperimentSpecAnalyses[];
            dryRun?: outputs.argoproj.v1alpha1.ExperimentSpecDryrun[];
            duration?: string;
            measurementRetention?: outputs.argoproj.v1alpha1.ExperimentSpecMeasurementretention[];
            progressDeadlineSeconds?: number;
            scaleDownDelaySeconds?: number;
            templates: outputs.argoproj.v1alpha1.ExperimentSpecTemplates[];
            terminate?: boolean;
        }

        export interface ExperimentSpecAnalyses {
            args?: outputs.argoproj.v1alpha1.ExperimentSpecAnalysesArgs[];
            clusterScope?: boolean;
            name: string;
            requiredForCompletion?: boolean;
            templateName: string;
        }

        export interface ExperimentSpecAnalysesArgs {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.ExperimentSpecAnalysesArgsValuefrom;
        }

        export interface ExperimentSpecAnalysesArgsValuefrom {
            fieldRef?: outputs.argoproj.v1alpha1.ExperimentSpecAnalysesArgsValuefromFieldref;
            secretKeyRef?: outputs.argoproj.v1alpha1.ExperimentSpecAnalysesArgsValuefromSecretkeyref;
        }

        export interface ExperimentSpecAnalysesArgsValuefromFieldref {
            fieldPath: string;
        }

        export interface ExperimentSpecAnalysesArgsValuefromSecretkeyref {
            key: string;
            name: string;
        }

        export interface ExperimentSpecDryrun {
            metricName: string;
        }

        export interface ExperimentSpecMeasurementretention {
            limit: number;
            metricName: string;
        }

        export interface ExperimentSpecTemplates {
            minReadySeconds?: number;
            name: string;
            replicas?: number;
            selector: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesSelector;
            service?: {[key: string]: any};
            template: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplate;
        }

        export interface ExperimentSpecTemplatesSelector {
            matchExpressions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ExperimentSpecTemplatesSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ExperimentSpecTemplatesTemplate {
            metadata?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateMetadata;
            spec?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpec;
        }

        export interface ExperimentSpecTemplatesTemplateMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ExperimentSpecTemplatesTemplateSpec {
            activeDeadlineSeconds?: number;
            affinity?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinity;
            automountServiceAccountToken?: boolean;
            containers: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainers[];
            dnsConfig?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecDnsconfig;
            dnsPolicy?: string;
            enableServiceLinks?: boolean;
            ephemeralContainers?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainers[];
            hostAliases?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecHostaliases[];
            hostIPC?: boolean;
            hostNetwork?: boolean;
            hostPID?: boolean;
            hostname?: string;
            imagePullSecrets?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecImagepullsecrets[];
            initContainers?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainers[];
            nodeName?: string;
            nodeSelector?: {[key: string]: string};
            os?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecOs;
            overhead?: {[key: string]: number | string};
            preemptionPolicy?: string;
            priority?: number;
            priorityClassName?: string;
            readinessGates?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecReadinessgates[];
            restartPolicy?: string;
            runtimeClassName?: string;
            schedulerName?: string;
            securityContext?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecSecuritycontext;
            serviceAccount?: string;
            serviceAccountName?: string;
            setHostnameAsFQDN?: boolean;
            shareProcessNamespace?: boolean;
            subdomain?: string;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecTolerations[];
            topologySpreadConstraints?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecTopologyspreadconstraints[];
            volumes?: {[key: string]: any};
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinity {
            nodeAffinity?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityNodeaffinity;
            podAffinity?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodaffinity;
            podAntiAffinity?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinity;
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ExperimentSpecTemplatesTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainers {
            args?: string[];
            command?: string[];
            env?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersEnv[];
            envFrom?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersLifecycle;
            livenessProbe?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersLivenessprobe;
            name: string;
            ports?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersPorts[];
            readinessProbe?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersReadinessprobe;
            resources?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersResources;
            securityContext?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersSecuritycontext;
            startupProbe?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersVolumedevices[];
            volumeMounts?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersVolumemounts[];
            workingDir?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersEnvValuefrom;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersEnvValuefrom {
            configMapKeyRef?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersEnvValuefromSecretkeyref;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersEnvfrom {
            configMapRef?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersEnvfromSecretref;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersLifecycle {
            postStart?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersLifecyclePoststart;
            preStop?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersLifecyclePrestop;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersLifecyclePoststart {
            exec?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersLifecyclePoststartExec;
            httpGet?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersLifecyclePoststartTcpsocket;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersLifecyclePrestop {
            exec?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersLifecyclePrestopExec;
            httpGet?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersLifecyclePrestopTcpsocket;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersLivenessprobe {
            exec?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersLivenessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersLivenessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersLivenessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersLivenessprobeExec {
            command?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersLivenessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * experimentSpecTemplatesTemplateSpecContainersPortsProvideDefaults sets the appropriate defaults for ExperimentSpecTemplatesTemplateSpecContainersPorts
         */
        export function experimentSpecTemplatesTemplateSpecContainersPortsProvideDefaults(val: ExperimentSpecTemplatesTemplateSpecContainersPorts): ExperimentSpecTemplatesTemplateSpecContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersReadinessprobe {
            exec?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersReadinessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersReadinessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersReadinessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersReadinessprobeExec {
            command?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersReadinessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersResources {
            limits?: {[key: string]: any};
            requests?: {[key: string]: any};
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersSecuritycontextWindowsoptions;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersStartupprobe {
            exec?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersStartupprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersStartupprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersStartupprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersStartupprobeExec {
            command?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersStartupprobeGrpc {
            port: number;
            service?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecContainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecContainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecDnsconfig {
            nameservers?: string[];
            options?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecDnsconfigOptions[];
            searches?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecDnsconfigOptions {
            name?: string;
            value?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersEnv[];
            envFrom?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecycle;
            livenessProbe?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLivenessprobe;
            name: string;
            ports?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersPorts[];
            readinessProbe?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersReadinessprobe;
            resources?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersResources;
            securityContext?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersSecuritycontext;
            startupProbe?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            targetContainerName?: string;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersVolumedevices[];
            volumeMounts?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersEnvValuefrom;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersEnvValuefrom {
            configMapKeyRef?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersEnvValuefromSecretkeyref;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersEnvfrom {
            configMapRef?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersEnvfromSecretref;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecycle {
            postStart?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePoststart;
            preStop?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePrestop;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePoststart {
            exec?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePoststartExec;
            httpGet?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePoststartTcpsocket;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePrestop {
            exec?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePrestopExec;
            httpGet?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePrestopTcpsocket;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLivenessprobe {
            exec?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLivenessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLivenessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLivenessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLivenessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * experimentSpecTemplatesTemplateSpecEphemeralcontainersPortsProvideDefaults sets the appropriate defaults for ExperimentSpecTemplatesTemplateSpecEphemeralcontainersPorts
         */
        export function experimentSpecTemplatesTemplateSpecEphemeralcontainersPortsProvideDefaults(val: ExperimentSpecTemplatesTemplateSpecEphemeralcontainersPorts): ExperimentSpecTemplatesTemplateSpecEphemeralcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersReadinessprobe {
            exec?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersReadinessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersReadinessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersReadinessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersReadinessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersResources {
            limits?: {[key: string]: any};
            requests?: {[key: string]: any};
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersSecuritycontextWindowsoptions;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersStartupprobe {
            exec?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersStartupprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersStartupprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersStartupprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersStartupprobeExec {
            command?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersStartupprobeGrpc {
            port: number;
            service?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecEphemeralcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecEphemeralcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecHostaliases {
            hostnames?: string[];
            ip?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecImagepullsecrets {
            name?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersEnv[];
            envFrom?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersLifecycle;
            livenessProbe?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersLivenessprobe;
            name: string;
            ports?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersPorts[];
            readinessProbe?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersReadinessprobe;
            resources?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersResources;
            securityContext?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersSecuritycontext;
            startupProbe?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersVolumedevices[];
            volumeMounts?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersEnvValuefrom;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersEnvValuefrom {
            configMapKeyRef?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersEnvValuefromSecretkeyref;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersEnvfrom {
            configMapRef?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersEnvfromSecretref;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersLifecycle {
            postStart?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePoststart;
            preStop?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePrestop;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePoststart {
            exec?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePoststartExec;
            httpGet?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePoststartTcpsocket;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePrestop {
            exec?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePrestopExec;
            httpGet?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePrestopTcpsocket;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersLivenessprobe {
            exec?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersLivenessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersLivenessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersLivenessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersLivenessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * experimentSpecTemplatesTemplateSpecInitcontainersPortsProvideDefaults sets the appropriate defaults for ExperimentSpecTemplatesTemplateSpecInitcontainersPorts
         */
        export function experimentSpecTemplatesTemplateSpecInitcontainersPortsProvideDefaults(val: ExperimentSpecTemplatesTemplateSpecInitcontainersPorts): ExperimentSpecTemplatesTemplateSpecInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersReadinessprobe {
            exec?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersReadinessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersReadinessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersReadinessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersReadinessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersResources {
            limits?: {[key: string]: any};
            requests?: {[key: string]: any};
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersSecuritycontextWindowsoptions;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersStartupprobe {
            exec?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersStartupprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersStartupprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersStartupprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersStartupprobeExec {
            command?: string[];
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersStartupprobeGrpc {
            port: number;
            service?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecInitcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecInitcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecOs {
            name: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecReadinessgates {
            conditionType: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecSecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecSecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecSecuritycontextSysctls[];
            windowsOptions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecSecuritycontextWindowsoptions;
        }

        export interface ExperimentSpecTemplatesTemplateSpecSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecSecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecTopologyspreadconstraints {
            labelSelector?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecTopologyspreadconstraintsLabelselector;
            maxSkew: number;
            minDomains?: number;
            topologyKey: string;
            whenUnsatisfiable: string;
        }

        export interface ExperimentSpecTemplatesTemplateSpecTopologyspreadconstraintsLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.ExperimentSpecTemplatesTemplateSpecTopologyspreadconstraintsLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ExperimentSpecTemplatesTemplateSpecTopologyspreadconstraintsLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ExperimentStatus {
            analysisRuns?: outputs.argoproj.v1alpha1.ExperimentStatusAnalysisruns[];
            availableAt?: string;
            conditions?: outputs.argoproj.v1alpha1.ExperimentStatusConditions[];
            message?: string;
            phase?: string;
            templateStatuses?: outputs.argoproj.v1alpha1.ExperimentStatusTemplatestatuses[];
        }

        export interface ExperimentStatusAnalysisruns {
            analysisRun: string;
            message?: string;
            name: string;
            phase: string;
        }

        export interface ExperimentStatusConditions {
            lastTransitionTime: string;
            lastUpdateTime: string;
            message: string;
            reason: string;
            status: string;
            type: string;
        }

        export interface ExperimentStatusTemplatestatuses {
            availableReplicas: number;
            collisionCount?: number;
            lastTransitionTime?: string;
            message?: string;
            name: string;
            podTemplateHash?: string;
            readyReplicas: number;
            replicas: number;
            serviceName?: string;
            status?: string;
            updatedReplicas: number;
        }

        export interface RolloutSpec {
            analysis?: outputs.argoproj.v1alpha1.RolloutSpecAnalysis;
            minReadySeconds?: number;
            paused?: boolean;
            progressDeadlineAbort?: boolean;
            progressDeadlineSeconds?: number;
            replicas?: number;
            restartAt?: string;
            revisionHistoryLimit?: number;
            selector?: outputs.argoproj.v1alpha1.RolloutSpecSelector;
            strategy?: outputs.argoproj.v1alpha1.RolloutSpecStrategy;
            template?: outputs.argoproj.v1alpha1.RolloutSpecTemplate;
            workloadRef?: outputs.argoproj.v1alpha1.RolloutSpecWorkloadref;
        }

        export interface RolloutSpecAnalysis {
            successfulRunHistoryLimit?: number;
            unsuccessfulRunHistoryLimit?: number;
        }

        export interface RolloutSpecSelector {
            matchExpressions?: outputs.argoproj.v1alpha1.RolloutSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RolloutSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RolloutSpecStrategy {
            blueGreen?: outputs.argoproj.v1alpha1.RolloutSpecStrategyBluegreen;
            canary?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanary;
        }

        export interface RolloutSpecStrategyBluegreen {
            abortScaleDownDelaySeconds?: number;
            activeMetadata?: outputs.argoproj.v1alpha1.RolloutSpecStrategyBluegreenActivemetadata;
            activeService: string;
            antiAffinity?: outputs.argoproj.v1alpha1.RolloutSpecStrategyBluegreenAntiaffinity;
            autoPromotionEnabled?: boolean;
            autoPromotionSeconds?: number;
            maxUnavailable?: number | string;
            postPromotionAnalysis?: outputs.argoproj.v1alpha1.RolloutSpecStrategyBluegreenPostpromotionanalysis;
            prePromotionAnalysis?: outputs.argoproj.v1alpha1.RolloutSpecStrategyBluegreenPrepromotionanalysis;
            previewMetadata?: outputs.argoproj.v1alpha1.RolloutSpecStrategyBluegreenPreviewmetadata;
            previewReplicaCount?: number;
            previewService?: string;
            scaleDownDelayRevisionLimit?: number;
            scaleDownDelaySeconds?: number;
        }

        export interface RolloutSpecStrategyBluegreenActivemetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface RolloutSpecStrategyBluegreenAntiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.RolloutSpecStrategyBluegreenAntiaffinityPreferredduringschedulingignoredduringexecution;
            requiredDuringSchedulingIgnoredDuringExecution?: {[key: string]: any};
        }

        export interface RolloutSpecStrategyBluegreenAntiaffinityPreferredduringschedulingignoredduringexecution {
            weight: number;
        }

        export interface RolloutSpecStrategyBluegreenPostpromotionanalysis {
            args?: outputs.argoproj.v1alpha1.RolloutSpecStrategyBluegreenPostpromotionanalysisArgs[];
            dryRun?: outputs.argoproj.v1alpha1.RolloutSpecStrategyBluegreenPostpromotionanalysisDryrun[];
            measurementRetention?: outputs.argoproj.v1alpha1.RolloutSpecStrategyBluegreenPostpromotionanalysisMeasurementretention[];
            templates?: outputs.argoproj.v1alpha1.RolloutSpecStrategyBluegreenPostpromotionanalysisTemplates[];
        }

        export interface RolloutSpecStrategyBluegreenPostpromotionanalysisArgs {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.RolloutSpecStrategyBluegreenPostpromotionanalysisArgsValuefrom;
        }

        export interface RolloutSpecStrategyBluegreenPostpromotionanalysisArgsValuefrom {
            fieldRef?: outputs.argoproj.v1alpha1.RolloutSpecStrategyBluegreenPostpromotionanalysisArgsValuefromFieldref;
            podTemplateHashValue?: string;
        }

        export interface RolloutSpecStrategyBluegreenPostpromotionanalysisArgsValuefromFieldref {
            fieldPath: string;
        }

        export interface RolloutSpecStrategyBluegreenPostpromotionanalysisDryrun {
            metricName: string;
        }

        export interface RolloutSpecStrategyBluegreenPostpromotionanalysisMeasurementretention {
            limit: number;
            metricName: string;
        }

        export interface RolloutSpecStrategyBluegreenPostpromotionanalysisTemplates {
            clusterScope?: boolean;
            templateName?: string;
        }

        export interface RolloutSpecStrategyBluegreenPrepromotionanalysis {
            args?: outputs.argoproj.v1alpha1.RolloutSpecStrategyBluegreenPrepromotionanalysisArgs[];
            dryRun?: outputs.argoproj.v1alpha1.RolloutSpecStrategyBluegreenPrepromotionanalysisDryrun[];
            measurementRetention?: outputs.argoproj.v1alpha1.RolloutSpecStrategyBluegreenPrepromotionanalysisMeasurementretention[];
            templates?: outputs.argoproj.v1alpha1.RolloutSpecStrategyBluegreenPrepromotionanalysisTemplates[];
        }

        export interface RolloutSpecStrategyBluegreenPrepromotionanalysisArgs {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.RolloutSpecStrategyBluegreenPrepromotionanalysisArgsValuefrom;
        }

        export interface RolloutSpecStrategyBluegreenPrepromotionanalysisArgsValuefrom {
            fieldRef?: outputs.argoproj.v1alpha1.RolloutSpecStrategyBluegreenPrepromotionanalysisArgsValuefromFieldref;
            podTemplateHashValue?: string;
        }

        export interface RolloutSpecStrategyBluegreenPrepromotionanalysisArgsValuefromFieldref {
            fieldPath: string;
        }

        export interface RolloutSpecStrategyBluegreenPrepromotionanalysisDryrun {
            metricName: string;
        }

        export interface RolloutSpecStrategyBluegreenPrepromotionanalysisMeasurementretention {
            limit: number;
            metricName: string;
        }

        export interface RolloutSpecStrategyBluegreenPrepromotionanalysisTemplates {
            clusterScope?: boolean;
            templateName?: string;
        }

        export interface RolloutSpecStrategyBluegreenPreviewmetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface RolloutSpecStrategyCanary {
            abortScaleDownDelaySeconds?: number;
            analysis?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryAnalysis;
            antiAffinity?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryAntiaffinity;
            canaryMetadata?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryCanarymetadata;
            canaryService?: string;
            dynamicStableScale?: boolean;
            maxSurge?: number | string;
            maxUnavailable?: number | string;
            pingPong?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryPingpong;
            scaleDownDelayRevisionLimit?: number;
            scaleDownDelaySeconds?: number;
            stableMetadata?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStablemetadata;
            stableService?: string;
            steps?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanarySteps[];
            trafficRouting?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryTrafficrouting;
        }

        export interface RolloutSpecStrategyCanaryAnalysis {
            args?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryAnalysisArgs[];
            dryRun?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryAnalysisDryrun[];
            measurementRetention?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryAnalysisMeasurementretention[];
            startingStep?: number;
            templates?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryAnalysisTemplates[];
        }

        export interface RolloutSpecStrategyCanaryAnalysisArgs {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryAnalysisArgsValuefrom;
        }

        export interface RolloutSpecStrategyCanaryAnalysisArgsValuefrom {
            fieldRef?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryAnalysisArgsValuefromFieldref;
            podTemplateHashValue?: string;
        }

        export interface RolloutSpecStrategyCanaryAnalysisArgsValuefromFieldref {
            fieldPath: string;
        }

        export interface RolloutSpecStrategyCanaryAnalysisDryrun {
            metricName: string;
        }

        export interface RolloutSpecStrategyCanaryAnalysisMeasurementretention {
            limit: number;
            metricName: string;
        }

        export interface RolloutSpecStrategyCanaryAnalysisTemplates {
            clusterScope?: boolean;
            templateName?: string;
        }

        export interface RolloutSpecStrategyCanaryAntiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryAntiaffinityPreferredduringschedulingignoredduringexecution;
            requiredDuringSchedulingIgnoredDuringExecution?: {[key: string]: any};
        }

        export interface RolloutSpecStrategyCanaryAntiaffinityPreferredduringschedulingignoredduringexecution {
            weight: number;
        }

        export interface RolloutSpecStrategyCanaryCanarymetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface RolloutSpecStrategyCanaryPingpong {
            pingService: string;
            pongService: string;
        }

        export interface RolloutSpecStrategyCanaryStablemetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface RolloutSpecStrategyCanarySteps {
            analysis?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsAnalysis;
            experiment?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsExperiment;
            pause?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsPause;
            setCanaryScale?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsSetcanaryscale;
            setHeaderRoute?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsSetheaderroute;
            setMirrorRoute?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsSetmirrorroute;
            setWeight?: number;
        }

        export interface RolloutSpecStrategyCanaryStepsAnalysis {
            args?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsAnalysisArgs[];
            dryRun?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsAnalysisDryrun[];
            measurementRetention?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsAnalysisMeasurementretention[];
            templates?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsAnalysisTemplates[];
        }

        export interface RolloutSpecStrategyCanaryStepsAnalysisArgs {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsAnalysisArgsValuefrom;
        }

        export interface RolloutSpecStrategyCanaryStepsAnalysisArgsValuefrom {
            fieldRef?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsAnalysisArgsValuefromFieldref;
            podTemplateHashValue?: string;
        }

        export interface RolloutSpecStrategyCanaryStepsAnalysisArgsValuefromFieldref {
            fieldPath: string;
        }

        export interface RolloutSpecStrategyCanaryStepsAnalysisDryrun {
            metricName: string;
        }

        export interface RolloutSpecStrategyCanaryStepsAnalysisMeasurementretention {
            limit: number;
            metricName: string;
        }

        export interface RolloutSpecStrategyCanaryStepsAnalysisTemplates {
            clusterScope?: boolean;
            templateName?: string;
        }

        export interface RolloutSpecStrategyCanaryStepsExperiment {
            analyses?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsExperimentAnalyses[];
            duration?: string;
            templates: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsExperimentTemplates[];
        }

        export interface RolloutSpecStrategyCanaryStepsExperimentAnalyses {
            args?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsExperimentAnalysesArgs[];
            clusterScope?: boolean;
            name: string;
            requiredForCompletion?: boolean;
            templateName: string;
        }

        export interface RolloutSpecStrategyCanaryStepsExperimentAnalysesArgs {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsExperimentAnalysesArgsValuefrom;
        }

        export interface RolloutSpecStrategyCanaryStepsExperimentAnalysesArgsValuefrom {
            fieldRef?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsExperimentAnalysesArgsValuefromFieldref;
            podTemplateHashValue?: string;
        }

        export interface RolloutSpecStrategyCanaryStepsExperimentAnalysesArgsValuefromFieldref {
            fieldPath: string;
        }

        export interface RolloutSpecStrategyCanaryStepsExperimentTemplates {
            metadata?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsExperimentTemplatesMetadata;
            name: string;
            replicas?: number;
            selector?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsExperimentTemplatesSelector;
            specRef: string;
            weight?: number;
        }

        export interface RolloutSpecStrategyCanaryStepsExperimentTemplatesMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface RolloutSpecStrategyCanaryStepsExperimentTemplatesSelector {
            matchExpressions?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsExperimentTemplatesSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RolloutSpecStrategyCanaryStepsExperimentTemplatesSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RolloutSpecStrategyCanaryStepsPause {
            duration?: number | string;
        }

        export interface RolloutSpecStrategyCanaryStepsSetcanaryscale {
            matchTrafficWeight?: boolean;
            replicas?: number;
            weight?: number;
        }

        export interface RolloutSpecStrategyCanaryStepsSetheaderroute {
            match?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsSetheaderrouteMatch[];
            name?: string;
        }

        export interface RolloutSpecStrategyCanaryStepsSetheaderrouteMatch {
            headerName: string;
            headerValue: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsSetheaderrouteMatchHeadervalue;
        }

        export interface RolloutSpecStrategyCanaryStepsSetheaderrouteMatchHeadervalue {
            exact?: string;
            prefix?: string;
            regex?: string;
        }

        export interface RolloutSpecStrategyCanaryStepsSetmirrorroute {
            match?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsSetmirrorrouteMatch[];
            name: string;
            percentage?: number;
        }

        export interface RolloutSpecStrategyCanaryStepsSetmirrorrouteMatch {
            headers?: {[key: string]: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsSetmirrorrouteMatchHeaders};
            method?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsSetmirrorrouteMatchMethod;
            path?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryStepsSetmirrorrouteMatchPath;
        }

        export interface RolloutSpecStrategyCanaryStepsSetmirrorrouteMatchHeaders {
            exact?: string;
            prefix?: string;
            regex?: string;
        }

        export interface RolloutSpecStrategyCanaryStepsSetmirrorrouteMatchMethod {
            exact?: string;
            prefix?: string;
            regex?: string;
        }

        export interface RolloutSpecStrategyCanaryStepsSetmirrorrouteMatchPath {
            exact?: string;
            prefix?: string;
            regex?: string;
        }

        export interface RolloutSpecStrategyCanaryTrafficrouting {
            alb?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryTrafficroutingAlb;
            ambassador?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryTrafficroutingAmbassador;
            appMesh?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryTrafficroutingAppmesh;
            istio?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryTrafficroutingIstio;
            managedRoutes?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryTrafficroutingManagedroutes[];
            nginx?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryTrafficroutingNginx;
            smi?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryTrafficroutingSmi;
            traefik?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryTrafficroutingTraefik;
        }

        export interface RolloutSpecStrategyCanaryTrafficroutingAlb {
            annotationPrefix?: string;
            ingress: string;
            rootService?: string;
            servicePort: number;
            stickinessConfig?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryTrafficroutingAlbStickinessconfig;
        }

        export interface RolloutSpecStrategyCanaryTrafficroutingAlbStickinessconfig {
            durationSeconds: number;
            enabled: boolean;
        }

        export interface RolloutSpecStrategyCanaryTrafficroutingAmbassador {
            mappings: string[];
        }

        export interface RolloutSpecStrategyCanaryTrafficroutingAppmesh {
            virtualNodeGroup?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryTrafficroutingAppmeshVirtualnodegroup;
            virtualService?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryTrafficroutingAppmeshVirtualservice;
        }

        export interface RolloutSpecStrategyCanaryTrafficroutingAppmeshVirtualnodegroup {
            canaryVirtualNodeRef: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryTrafficroutingAppmeshVirtualnodegroupCanaryvirtualnoderef;
            stableVirtualNodeRef: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryTrafficroutingAppmeshVirtualnodegroupStablevirtualnoderef;
        }

        export interface RolloutSpecStrategyCanaryTrafficroutingAppmeshVirtualnodegroupCanaryvirtualnoderef {
            name: string;
        }

        export interface RolloutSpecStrategyCanaryTrafficroutingAppmeshVirtualnodegroupStablevirtualnoderef {
            name: string;
        }

        export interface RolloutSpecStrategyCanaryTrafficroutingAppmeshVirtualservice {
            name: string;
            routes?: string[];
        }

        export interface RolloutSpecStrategyCanaryTrafficroutingIstio {
            destinationRule?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryTrafficroutingIstioDestinationrule;
            virtualService?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryTrafficroutingIstioVirtualservice;
            virtualServices?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryTrafficroutingIstioVirtualservices[];
        }

        export interface RolloutSpecStrategyCanaryTrafficroutingIstioDestinationrule {
            canarySubsetName: string;
            name: string;
            stableSubsetName: string;
        }

        export interface RolloutSpecStrategyCanaryTrafficroutingIstioVirtualservice {
            name: string;
            routes?: string[];
            tlsRoutes?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryTrafficroutingIstioVirtualserviceTlsroutes[];
        }

        export interface RolloutSpecStrategyCanaryTrafficroutingIstioVirtualserviceTlsroutes {
            port?: number;
            sniHosts?: string[];
        }

        export interface RolloutSpecStrategyCanaryTrafficroutingIstioVirtualservices {
            name: string;
            routes?: string[];
            tlsRoutes?: outputs.argoproj.v1alpha1.RolloutSpecStrategyCanaryTrafficroutingIstioVirtualservicesTlsroutes[];
        }

        export interface RolloutSpecStrategyCanaryTrafficroutingIstioVirtualservicesTlsroutes {
            port?: number;
            sniHosts?: string[];
        }

        export interface RolloutSpecStrategyCanaryTrafficroutingManagedroutes {
            name: string;
        }

        export interface RolloutSpecStrategyCanaryTrafficroutingNginx {
            additionalIngressAnnotations?: {[key: string]: string};
            annotationPrefix?: string;
            stableIngress: string;
        }

        export interface RolloutSpecStrategyCanaryTrafficroutingSmi {
            rootService?: string;
            trafficSplitName?: string;
        }

        export interface RolloutSpecStrategyCanaryTrafficroutingTraefik {
            weightedTraefikServiceName: string;
        }

        export interface RolloutSpecTemplate {
            metadata?: outputs.argoproj.v1alpha1.RolloutSpecTemplateMetadata;
            spec?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpec;
        }

        export interface RolloutSpecTemplateMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface RolloutSpecTemplateSpec {
            activeDeadlineSeconds?: number;
            affinity?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinity;
            automountServiceAccountToken?: boolean;
            containers: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainers[];
            dnsConfig?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecDnsconfig;
            dnsPolicy?: string;
            enableServiceLinks?: boolean;
            ephemeralContainers?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainers[];
            hostAliases?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecHostaliases[];
            hostIPC?: boolean;
            hostNetwork?: boolean;
            hostPID?: boolean;
            hostname?: string;
            imagePullSecrets?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecImagepullsecrets[];
            initContainers?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainers[];
            nodeName?: string;
            nodeSelector?: {[key: string]: string};
            os?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecOs;
            overhead?: {[key: string]: number | string};
            preemptionPolicy?: string;
            priority?: number;
            priorityClassName?: string;
            readinessGates?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecReadinessgates[];
            restartPolicy?: string;
            runtimeClassName?: string;
            schedulerName?: string;
            securityContext?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecSecuritycontext;
            serviceAccount?: string;
            serviceAccountName?: string;
            setHostnameAsFQDN?: boolean;
            shareProcessNamespace?: boolean;
            subdomain?: string;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecTolerations[];
            topologySpreadConstraints?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecTopologyspreadconstraints[];
            volumes?: {[key: string]: any}[];
        }

        export interface RolloutSpecTemplateSpecAffinity {
            nodeAffinity?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityNodeaffinity;
            podAffinity?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodaffinity;
            podAntiAffinity?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodantiaffinity;
        }

        export interface RolloutSpecTemplateSpecAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface RolloutSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface RolloutSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface RolloutSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RolloutSpecTemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RolloutSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface RolloutSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface RolloutSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RolloutSpecTemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RolloutSpecTemplateSpecAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface RolloutSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface RolloutSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface RolloutSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RolloutSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RolloutSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RolloutSpecTemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RolloutSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface RolloutSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RolloutSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RolloutSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RolloutSpecTemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RolloutSpecTemplateSpecAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface RolloutSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface RolloutSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface RolloutSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RolloutSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RolloutSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RolloutSpecTemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RolloutSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaceSelector?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface RolloutSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RolloutSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RolloutSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            matchExpressions?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RolloutSpecTemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RolloutSpecTemplateSpecContainers {
            args?: string[];
            command?: string[];
            env?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersEnv[];
            envFrom?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersLifecycle;
            livenessProbe?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersLivenessprobe;
            name: string;
            ports?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersPorts[];
            readinessProbe?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersReadinessprobe;
            resources?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersResources;
            securityContext?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersSecuritycontext;
            startupProbe?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersVolumedevices[];
            volumeMounts?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersVolumemounts[];
            workingDir?: string;
        }

        export interface RolloutSpecTemplateSpecContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersEnvValuefrom;
        }

        export interface RolloutSpecTemplateSpecContainersEnvValuefrom {
            configMapKeyRef?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersEnvValuefromSecretkeyref;
        }

        export interface RolloutSpecTemplateSpecContainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface RolloutSpecTemplateSpecContainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface RolloutSpecTemplateSpecContainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface RolloutSpecTemplateSpecContainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface RolloutSpecTemplateSpecContainersEnvfrom {
            configMapRef?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersEnvfromSecretref;
        }

        export interface RolloutSpecTemplateSpecContainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface RolloutSpecTemplateSpecContainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface RolloutSpecTemplateSpecContainersLifecycle {
            postStart?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersLifecyclePoststart;
            preStop?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersLifecyclePrestop;
        }

        export interface RolloutSpecTemplateSpecContainersLifecyclePoststart {
            exec?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersLifecyclePoststartExec;
            httpGet?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersLifecyclePoststartTcpsocket;
        }

        export interface RolloutSpecTemplateSpecContainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface RolloutSpecTemplateSpecContainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface RolloutSpecTemplateSpecContainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface RolloutSpecTemplateSpecContainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface RolloutSpecTemplateSpecContainersLifecyclePrestop {
            exec?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersLifecyclePrestopExec;
            httpGet?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersLifecyclePrestopTcpsocket;
        }

        export interface RolloutSpecTemplateSpecContainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface RolloutSpecTemplateSpecContainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface RolloutSpecTemplateSpecContainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface RolloutSpecTemplateSpecContainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface RolloutSpecTemplateSpecContainersLivenessprobe {
            exec?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersLivenessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersLivenessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersLivenessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface RolloutSpecTemplateSpecContainersLivenessprobeExec {
            command?: string[];
        }

        export interface RolloutSpecTemplateSpecContainersLivenessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface RolloutSpecTemplateSpecContainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface RolloutSpecTemplateSpecContainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface RolloutSpecTemplateSpecContainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface RolloutSpecTemplateSpecContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * rolloutSpecTemplateSpecContainersPortsProvideDefaults sets the appropriate defaults for RolloutSpecTemplateSpecContainersPorts
         */
        export function rolloutSpecTemplateSpecContainersPortsProvideDefaults(val: RolloutSpecTemplateSpecContainersPorts): RolloutSpecTemplateSpecContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface RolloutSpecTemplateSpecContainersReadinessprobe {
            exec?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersReadinessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersReadinessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersReadinessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface RolloutSpecTemplateSpecContainersReadinessprobeExec {
            command?: string[];
        }

        export interface RolloutSpecTemplateSpecContainersReadinessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface RolloutSpecTemplateSpecContainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface RolloutSpecTemplateSpecContainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface RolloutSpecTemplateSpecContainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface RolloutSpecTemplateSpecContainersResources {
            limits?: {[key: string]: any};
            requests?: {[key: string]: any};
        }

        export interface RolloutSpecTemplateSpecContainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersSecuritycontextWindowsoptions;
        }

        export interface RolloutSpecTemplateSpecContainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface RolloutSpecTemplateSpecContainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface RolloutSpecTemplateSpecContainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface RolloutSpecTemplateSpecContainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface RolloutSpecTemplateSpecContainersStartupprobe {
            exec?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersStartupprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersStartupprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersStartupprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface RolloutSpecTemplateSpecContainersStartupprobeExec {
            command?: string[];
        }

        export interface RolloutSpecTemplateSpecContainersStartupprobeGrpc {
            port: number;
            service?: string;
        }

        export interface RolloutSpecTemplateSpecContainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecContainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface RolloutSpecTemplateSpecContainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface RolloutSpecTemplateSpecContainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface RolloutSpecTemplateSpecContainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface RolloutSpecTemplateSpecContainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface RolloutSpecTemplateSpecDnsconfig {
            nameservers?: string[];
            options?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecDnsconfigOptions[];
            searches?: string[];
        }

        export interface RolloutSpecTemplateSpecDnsconfigOptions {
            name?: string;
            value?: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersEnv[];
            envFrom?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersLifecycle;
            livenessProbe?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersLivenessprobe;
            name: string;
            ports?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersPorts[];
            readinessProbe?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersReadinessprobe;
            resources?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersResources;
            securityContext?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersSecuritycontext;
            startupProbe?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            targetContainerName?: string;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersVolumedevices[];
            volumeMounts?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersEnvValuefrom;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersEnvValuefrom {
            configMapKeyRef?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersEnvValuefromSecretkeyref;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersEnvfrom {
            configMapRef?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersEnvfromSecretref;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersLifecycle {
            postStart?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersLifecyclePoststart;
            preStop?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersLifecyclePrestop;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersLifecyclePoststart {
            exec?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersLifecyclePoststartExec;
            httpGet?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersLifecyclePoststartTcpsocket;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersLifecyclePrestop {
            exec?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersLifecyclePrestopExec;
            httpGet?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersLifecyclePrestopTcpsocket;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersLivenessprobe {
            exec?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersLivenessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersLivenessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersLivenessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersLivenessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * rolloutSpecTemplateSpecEphemeralcontainersPortsProvideDefaults sets the appropriate defaults for RolloutSpecTemplateSpecEphemeralcontainersPorts
         */
        export function rolloutSpecTemplateSpecEphemeralcontainersPortsProvideDefaults(val: RolloutSpecTemplateSpecEphemeralcontainersPorts): RolloutSpecTemplateSpecEphemeralcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersReadinessprobe {
            exec?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersReadinessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersReadinessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersReadinessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersReadinessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersResources {
            limits?: {[key: string]: any};
            requests?: {[key: string]: any};
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersSecuritycontextWindowsoptions;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersStartupprobe {
            exec?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersStartupprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersStartupprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersStartupprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersStartupprobeExec {
            command?: string[];
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersStartupprobeGrpc {
            port: number;
            service?: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecEphemeralcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface RolloutSpecTemplateSpecEphemeralcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface RolloutSpecTemplateSpecHostaliases {
            hostnames?: string[];
            ip?: string;
        }

        export interface RolloutSpecTemplateSpecImagepullsecrets {
            name?: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersEnv[];
            envFrom?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersLifecycle;
            livenessProbe?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersLivenessprobe;
            name: string;
            ports?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersPorts[];
            readinessProbe?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersReadinessprobe;
            resources?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersResources;
            securityContext?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersSecuritycontext;
            startupProbe?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersVolumedevices[];
            volumeMounts?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersEnvValuefrom;
        }

        export interface RolloutSpecTemplateSpecInitcontainersEnvValuefrom {
            configMapKeyRef?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersEnvValuefromSecretkeyref;
        }

        export interface RolloutSpecTemplateSpecInitcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface RolloutSpecTemplateSpecInitcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface RolloutSpecTemplateSpecInitcontainersEnvfrom {
            configMapRef?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersEnvfromSecretref;
        }

        export interface RolloutSpecTemplateSpecInitcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface RolloutSpecTemplateSpecInitcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface RolloutSpecTemplateSpecInitcontainersLifecycle {
            postStart?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersLifecyclePoststart;
            preStop?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersLifecyclePrestop;
        }

        export interface RolloutSpecTemplateSpecInitcontainersLifecyclePoststart {
            exec?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersLifecyclePoststartExec;
            httpGet?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersLifecyclePoststartTcpsocket;
        }

        export interface RolloutSpecTemplateSpecInitcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface RolloutSpecTemplateSpecInitcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersLifecyclePrestop {
            exec?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersLifecyclePrestopExec;
            httpGet?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersLifecyclePrestopTcpsocket;
        }

        export interface RolloutSpecTemplateSpecInitcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface RolloutSpecTemplateSpecInitcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersLivenessprobe {
            exec?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersLivenessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersLivenessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersLivenessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface RolloutSpecTemplateSpecInitcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface RolloutSpecTemplateSpecInitcontainersLivenessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * rolloutSpecTemplateSpecInitcontainersPortsProvideDefaults sets the appropriate defaults for RolloutSpecTemplateSpecInitcontainersPorts
         */
        export function rolloutSpecTemplateSpecInitcontainersPortsProvideDefaults(val: RolloutSpecTemplateSpecInitcontainersPorts): RolloutSpecTemplateSpecInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface RolloutSpecTemplateSpecInitcontainersReadinessprobe {
            exec?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersReadinessprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersReadinessprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersReadinessprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface RolloutSpecTemplateSpecInitcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface RolloutSpecTemplateSpecInitcontainersReadinessprobeGrpc {
            port: number;
            service?: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersResources {
            limits?: {[key: string]: any};
            requests?: {[key: string]: any};
        }

        export interface RolloutSpecTemplateSpecInitcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersSecuritycontextWindowsoptions;
        }

        export interface RolloutSpecTemplateSpecInitcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface RolloutSpecTemplateSpecInitcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersStartupprobe {
            exec?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersStartupprobeExec;
            failureThreshold?: number;
            grpc?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersStartupprobeGrpc;
            httpGet?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersStartupprobeTcpsocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface RolloutSpecTemplateSpecInitcontainersStartupprobeExec {
            command?: string[];
        }

        export interface RolloutSpecTemplateSpecInitcontainersStartupprobeGrpc {
            port: number;
            service?: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecInitcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface RolloutSpecTemplateSpecInitcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface RolloutSpecTemplateSpecOs {
            name: string;
        }

        export interface RolloutSpecTemplateSpecReadinessgates {
            conditionType: string;
        }

        export interface RolloutSpecTemplateSpecSecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecSecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecSecuritycontextSysctls[];
            windowsOptions?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecSecuritycontextWindowsoptions;
        }

        export interface RolloutSpecTemplateSpecSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface RolloutSpecTemplateSpecSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface RolloutSpecTemplateSpecSecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface RolloutSpecTemplateSpecSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            hostProcess?: boolean;
            runAsUserName?: string;
        }

        export interface RolloutSpecTemplateSpecTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface RolloutSpecTemplateSpecTopologyspreadconstraints {
            labelSelector?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecTopologyspreadconstraintsLabelselector;
            maxSkew: number;
            minDomains?: number;
            topologyKey: string;
            whenUnsatisfiable: string;
        }

        export interface RolloutSpecTemplateSpecTopologyspreadconstraintsLabelselector {
            matchExpressions?: outputs.argoproj.v1alpha1.RolloutSpecTemplateSpecTopologyspreadconstraintsLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RolloutSpecTemplateSpecTopologyspreadconstraintsLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RolloutSpecWorkloadref {
            apiVersion?: string;
            kind?: string;
            name?: string;
        }

        export interface RolloutStatus {
            HPAReplicas?: number;
            abort?: boolean;
            abortedAt?: string;
            alb?: outputs.argoproj.v1alpha1.RolloutStatusAlb;
            availableReplicas?: number;
            blueGreen?: outputs.argoproj.v1alpha1.RolloutStatusBluegreen;
            canary?: outputs.argoproj.v1alpha1.RolloutStatusCanary;
            collisionCount?: number;
            conditions?: outputs.argoproj.v1alpha1.RolloutStatusConditions[];
            controllerPause?: boolean;
            currentPodHash?: string;
            currentStepHash?: string;
            currentStepIndex?: number;
            message?: string;
            observedGeneration?: string;
            pauseConditions?: outputs.argoproj.v1alpha1.RolloutStatusPauseconditions[];
            phase?: string;
            promoteFull?: boolean;
            readyReplicas?: number;
            replicas?: number;
            restartedAt?: string;
            selector?: string;
            stableRS?: string;
            updatedReplicas?: number;
            workloadObservedGeneration?: string;
        }

        export interface RolloutStatusAlb {
            canaryTargetGroup?: outputs.argoproj.v1alpha1.RolloutStatusAlbCanarytargetgroup;
            loadBalancer?: outputs.argoproj.v1alpha1.RolloutStatusAlbLoadbalancer;
            stableTargetGroup?: outputs.argoproj.v1alpha1.RolloutStatusAlbStabletargetgroup;
        }

        export interface RolloutStatusAlbCanarytargetgroup {
            arn: string;
            name: string;
        }

        export interface RolloutStatusAlbLoadbalancer {
            arn: string;
            name: string;
        }

        export interface RolloutStatusAlbStabletargetgroup {
            arn: string;
            name: string;
        }

        export interface RolloutStatusBluegreen {
            activeSelector?: string;
            postPromotionAnalysisRunStatus?: outputs.argoproj.v1alpha1.RolloutStatusBluegreenPostpromotionanalysisrunstatus;
            prePromotionAnalysisRunStatus?: outputs.argoproj.v1alpha1.RolloutStatusBluegreenPrepromotionanalysisrunstatus;
            previewSelector?: string;
            scaleUpPreviewCheckPoint?: boolean;
        }

        export interface RolloutStatusBluegreenPostpromotionanalysisrunstatus {
            message?: string;
            name: string;
            status: string;
        }

        export interface RolloutStatusBluegreenPrepromotionanalysisrunstatus {
            message?: string;
            name: string;
            status: string;
        }

        export interface RolloutStatusCanary {
            currentBackgroundAnalysisRunStatus?: outputs.argoproj.v1alpha1.RolloutStatusCanaryCurrentbackgroundanalysisrunstatus;
            currentExperiment?: string;
            currentStepAnalysisRunStatus?: outputs.argoproj.v1alpha1.RolloutStatusCanaryCurrentstepanalysisrunstatus;
            stablePingPong?: string;
            weights?: outputs.argoproj.v1alpha1.RolloutStatusCanaryWeights;
        }

        export interface RolloutStatusCanaryCurrentbackgroundanalysisrunstatus {
            message?: string;
            name: string;
            status: string;
        }

        export interface RolloutStatusCanaryCurrentstepanalysisrunstatus {
            message?: string;
            name: string;
            status: string;
        }

        export interface RolloutStatusCanaryWeights {
            additional?: outputs.argoproj.v1alpha1.RolloutStatusCanaryWeightsAdditional[];
            canary: outputs.argoproj.v1alpha1.RolloutStatusCanaryWeightsCanary;
            stable: outputs.argoproj.v1alpha1.RolloutStatusCanaryWeightsStable;
            verified?: boolean;
        }

        export interface RolloutStatusCanaryWeightsAdditional {
            podTemplateHash?: string;
            serviceName?: string;
            weight: number;
        }

        export interface RolloutStatusCanaryWeightsCanary {
            podTemplateHash?: string;
            serviceName?: string;
            weight: number;
        }

        export interface RolloutStatusCanaryWeightsStable {
            podTemplateHash?: string;
            serviceName?: string;
            weight: number;
        }

        export interface RolloutStatusConditions {
            lastTransitionTime: string;
            lastUpdateTime: string;
            message: string;
            reason: string;
            status: string;
            type: string;
        }

        export interface RolloutStatusPauseconditions {
            reason: string;
            startTime: string;
        }

        export interface WorkflowTaskResultOutputs {
            artifacts?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifacts[];
            exitCode?: string;
            parameters?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsParameters[];
            result?: string;
        }

        export interface WorkflowTaskResultOutputsArtifacts {
            archive?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsArchive;
            archiveLogs?: boolean;
            artifactGC?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsArtifactgc;
            artifactory?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsArtifactory;
            azure?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsAzure;
            deleted?: boolean;
            from?: string;
            fromExpression?: string;
            gcs?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsGcs;
            git?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsGit;
            globalName?: string;
            hdfs?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsHdfs;
            http?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsHttp;
            mode?: number;
            name: string;
            optional?: boolean;
            oss?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsOss;
            path?: string;
            raw?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsRaw;
            recurseMode?: boolean;
            s3?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsS3;
            subPath?: string;
        }

        export interface WorkflowTaskResultOutputsArtifactsArchive {
            none?: {[key: string]: any};
            tar?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsArchiveTar;
            zip?: {[key: string]: any};
        }

        export interface WorkflowTaskResultOutputsArtifactsArchiveTar {
            compressionLevel?: number;
        }

        export interface WorkflowTaskResultOutputsArtifactsArtifactgc {
            podMetadata?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsArtifactgcPodmetadata;
            serviceAccountName?: string;
            strategy?: string;
        }

        export interface WorkflowTaskResultOutputsArtifactsArtifactgcPodmetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface WorkflowTaskResultOutputsArtifactsArtifactory {
            passwordSecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsArtifactoryPasswordsecret;
            url: string;
            usernameSecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsArtifactoryUsernamesecret;
        }

        export interface WorkflowTaskResultOutputsArtifactsArtifactoryPasswordsecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsArtifactoryUsernamesecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsAzure {
            accountKeySecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsAzureAccountkeysecret;
            blob: string;
            container: string;
            endpoint: string;
            useSDKCreds?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsAzureAccountkeysecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsGcs {
            bucket?: string;
            key: string;
            serviceAccountKeySecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsGcsServiceaccountkeysecret;
        }

        export interface WorkflowTaskResultOutputsArtifactsGcsServiceaccountkeysecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsGit {
            branch?: string;
            depth?: number;
            disableSubmodules?: boolean;
            fetch?: string[];
            insecureIgnoreHostKey?: boolean;
            passwordSecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsGitPasswordsecret;
            repo: string;
            revision?: string;
            singleBranch?: boolean;
            sshPrivateKeySecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsGitSshprivatekeysecret;
            usernameSecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsGitUsernamesecret;
        }

        export interface WorkflowTaskResultOutputsArtifactsGitPasswordsecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsGitSshprivatekeysecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsGitUsernamesecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsHdfs {
            addresses?: string[];
            force?: boolean;
            hdfsUser?: string;
            krbCCacheSecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsHdfsKrbccachesecret;
            krbConfigConfigMap?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsHdfsKrbconfigconfigmap;
            krbKeytabSecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsHdfsKrbkeytabsecret;
            krbRealm?: string;
            krbServicePrincipalName?: string;
            krbUsername?: string;
            path: string;
        }

        export interface WorkflowTaskResultOutputsArtifactsHdfsKrbccachesecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsHdfsKrbconfigconfigmap {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsHdfsKrbkeytabsecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsHttp {
            auth?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsHttpAuth;
            headers?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsHttpHeaders[];
            url: string;
        }

        export interface WorkflowTaskResultOutputsArtifactsHttpAuth {
            basicAuth?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsHttpAuthBasicauth;
            clientCert?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsHttpAuthClientcert;
            oauth2?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsHttpAuthOauth2;
        }

        export interface WorkflowTaskResultOutputsArtifactsHttpAuthBasicauth {
            passwordSecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsHttpAuthBasicauthPasswordsecret;
            usernameSecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsHttpAuthBasicauthUsernamesecret;
        }

        export interface WorkflowTaskResultOutputsArtifactsHttpAuthBasicauthPasswordsecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsHttpAuthBasicauthUsernamesecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsHttpAuthClientcert {
            clientCertSecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsHttpAuthClientcertClientcertsecret;
            clientKeySecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsHttpAuthClientcertClientkeysecret;
        }

        export interface WorkflowTaskResultOutputsArtifactsHttpAuthClientcertClientcertsecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsHttpAuthClientcertClientkeysecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsHttpAuthOauth2 {
            clientIDSecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsHttpAuthOauth2Clientidsecret;
            clientSecretSecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsHttpAuthOauth2Clientsecretsecret;
            endpointParams?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsHttpAuthOauth2Endpointparams[];
            scopes?: string[];
            tokenURLSecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsHttpAuthOauth2Tokenurlsecret;
        }

        export interface WorkflowTaskResultOutputsArtifactsHttpAuthOauth2Clientidsecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsHttpAuthOauth2Clientsecretsecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsHttpAuthOauth2Endpointparams {
            key: string;
            value?: string;
        }

        export interface WorkflowTaskResultOutputsArtifactsHttpAuthOauth2Tokenurlsecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsHttpHeaders {
            name: string;
            value: string;
        }

        export interface WorkflowTaskResultOutputsArtifactsOss {
            accessKeySecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsOssAccesskeysecret;
            bucket?: string;
            createBucketIfNotPresent?: boolean;
            endpoint?: string;
            key: string;
            lifecycleRule?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsOssLifecyclerule;
            secretKeySecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsOssSecretkeysecret;
            securityToken?: string;
        }

        export interface WorkflowTaskResultOutputsArtifactsOssAccesskeysecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsOssLifecyclerule {
            markDeletionAfterDays?: number;
            markInfrequentAccessAfterDays?: number;
        }

        export interface WorkflowTaskResultOutputsArtifactsOssSecretkeysecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsRaw {
            data: string;
        }

        export interface WorkflowTaskResultOutputsArtifactsS3 {
            accessKeySecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsS3Accesskeysecret;
            bucket?: string;
            createBucketIfNotPresent?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsS3Createbucketifnotpresent;
            encryptionOptions?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsS3Encryptionoptions;
            endpoint?: string;
            insecure?: boolean;
            key?: string;
            region?: string;
            roleARN?: string;
            secretKeySecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsS3Secretkeysecret;
            useSDKCreds?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsS3Accesskeysecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsS3Createbucketifnotpresent {
            objectLocking?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsS3Encryptionoptions {
            enableEncryption?: boolean;
            kmsEncryptionContext?: string;
            kmsKeyId?: string;
            serverSideCustomerKeySecret?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsArtifactsS3EncryptionoptionsServersidecustomerkeysecret;
        }

        export interface WorkflowTaskResultOutputsArtifactsS3EncryptionoptionsServersidecustomerkeysecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsArtifactsS3Secretkeysecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface WorkflowTaskResultOutputsParameters {
            description?: string;
            enum?: string[];
            globalName?: string;
            name: string;
            value?: string;
            valueFrom?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsParametersValuefrom;
        }

        export interface WorkflowTaskResultOutputsParametersValuefrom {
            configMapKeyRef?: outputs.argoproj.v1alpha1.WorkflowTaskResultOutputsParametersValuefromConfigmapkeyref;
            event?: string;
            expression?: string;
            jqFilter?: string;
            jsonPath?: string;
            parameter?: string;
            path?: string;
            supplied?: {[key: string]: any};
        }

        export interface WorkflowTaskResultOutputsParametersValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

    }
}

export namespace bitnami {
    export namespace v1alpha1 {
    }
}

export namespace certmanager {
    export namespace v1 {
        /**
         * Desired state of the CertificateRequest resource.
         */
        export interface CertificateRequestSpec {
            /**
             * The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.
             */
            duration?: string;
            /**
             * Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            extra?: {[key: string]: string[]};
            /**
             * Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            groups?: string[];
            /**
             * IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.
             */
            isCA?: boolean;
            /**
             * IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.
             */
            issuerRef: outputs.certmanager.v1.CertificateRequestSpecIssuerref;
            /**
             * The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.
             */
            request: string;
            /**
             * UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            uid?: string;
            /**
             * Usages is the set of x509 usages that are requested for the certificate. If usages are set they SHOULD be encoded inside the CSR spec Defaults to `digital signature` and `key encipherment` if not specified.
             */
            usages?: string[];
            /**
             * Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            username?: string;
        }

        /**
         * IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.
         */
        export interface CertificateRequestSpecIssuerref {
            /**
             * Group of the resource being referred to.
             */
            group?: string;
            /**
             * Kind of the resource being referred to.
             */
            kind?: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        /**
         * Status of the CertificateRequest. This is set and managed automatically.
         */
        export interface CertificateRequestStatus {
            /**
             * The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.
             */
            ca?: string;
            /**
             * The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.
             */
            certificate?: string;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.
             */
            conditions?: outputs.certmanager.v1.CertificateRequestStatusConditions[];
            /**
             * FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.
             */
            failureTime?: string;
        }

        /**
         * CertificateRequestCondition contains condition information for a CertificateRequest.
         */
        export interface CertificateRequestStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: string;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: string;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).
             */
            type: string;
        }

        /**
         * Desired state of the Certificate resource.
         */
        export interface CertificateSpec {
            /**
             * AdditionalOutputFormats defines extra output formats of the private key and signed certificate chain to be written to this Certificate's target Secret. This is an Alpha Feature and is only enabled with the `--feature-gates=AdditionalCertificateOutputFormats=true` option on both the controller and webhook components.
             */
            additionalOutputFormats?: outputs.certmanager.v1.CertificateSpecAdditionaloutputformats[];
            /**
             * CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4
             */
            commonName?: string;
            /**
             * DNSNames is a list of DNS subjectAltNames to be set on the Certificate.
             */
            dnsNames?: string[];
            /**
             * The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If unset this defaults to 90 days. Certificate will be renewed either 2/3 through its duration or `renewBefore` period before its expiry, whichever is later. Minimum accepted duration is 1 hour. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
             */
            duration?: string;
            /**
             * EmailAddresses is a list of email subjectAltNames to be set on the Certificate.
             */
            emailAddresses?: string[];
            /**
             * EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest
             */
            encodeUsagesInRequest?: boolean;
            /**
             * IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.
             */
            ipAddresses?: string[];
            /**
             * IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.
             */
            isCA?: boolean;
            /**
             * IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
             */
            issuerRef: outputs.certmanager.v1.CertificateSpecIssuerref;
            /**
             * Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
             */
            keystores?: outputs.certmanager.v1.CertificateSpecKeystores;
            /**
             * LiteralSubject is an LDAP formatted string that represents the [X.509 Subject field](https://datatracker.ietf.org/doc/html/rfc5280#"section-4.1.2.6). Use this *instead* of the Subject field if you need to ensure the correct ordering of the RDN sequence, such as when issuing certs for LDAP authentication. See https://github.com/cert-manager/cert-manager/issues/3203, https"://github.com/cert-manager/cert-manager/issues/4424. This field is alpha level and is only supported by cert-manager installations where LiteralCertificateSubject feature gate is enabled on both cert-manager controller and webhook.
             */
            literalSubject?: string;
            /**
             * Options to control private keys used for the Certificate.
             */
            privateKey?: outputs.certmanager.v1.CertificateSpecPrivatekey;
            /**
             * How long before the currently issued certificate's expiry "cert-manager should renew the certificate. The default is 2/3 of the issued certificate's duration. Minimum accepted value is 5 minutes. Value must be in units accepted by Go time.ParseDuration https"://golang.org/pkg/time/#ParseDuration
             */
            renewBefore?: string;
            /**
             * revisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single `CertificateRequest` created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. If set, revisionHistoryLimit must be a value of `1` or greater. If unset (`nil`), revisions will not be garbage collected. Default value is `nil`.
             */
            revisionHistoryLimit?: number;
            /**
             * SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.
             */
            secretName: string;
            /**
             * SecretTemplate defines annotations and labels to be copied to the Certificate's Secret. Labels and annotations on the Secret will be changed as they appear on the SecretTemplate when added or removed. SecretTemplate annotations are added in conjunction with, and cannot overwrite, the base set of annotations cert-manager sets on the Certificate's Secret.
             */
            secretTemplate?: outputs.certmanager.v1.CertificateSpecSecrettemplate;
            /**
             * Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
             */
            subject?: outputs.certmanager.v1.CertificateSpecSubject;
            /**
             * URIs is a list of URI subjectAltNames to be set on the Certificate.
             */
            uris?: string[];
            /**
             * Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
             */
            usages?: string[];
        }

        /**
         * CertificateAdditionalOutputFormat defines an additional output format of a Certificate resource. These contain supplementary data formats of the signed certificate chain and paired private key.
         */
        export interface CertificateSpecAdditionaloutputformats {
            /**
             * Type is the name of the format type that should be written to the Certificate's target Secret.
             */
            type: string;
        }

        /**
         * IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
         */
        export interface CertificateSpecIssuerref {
            /**
             * Group of the resource being referred to.
             */
            group?: string;
            /**
             * Kind of the resource being referred to.
             */
            kind?: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        /**
         * Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
         */
        export interface CertificateSpecKeystores {
            /**
             * JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
             */
            jks?: outputs.certmanager.v1.CertificateSpecKeystoresJks;
            /**
             * PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
             */
            pkcs12?: outputs.certmanager.v1.CertificateSpecKeystoresPkcs12;
        }

        /**
         * JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresJks {
            /**
             * Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance. A file named `truststore.jks` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
             */
            create: boolean;
            /**
             * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
             */
            passwordSecretRef: outputs.certmanager.v1.CertificateSpecKeystoresJksPasswordsecretref;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
         */
        export interface CertificateSpecKeystoresJksPasswordsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresPkcs12 {
            /**
             * Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance. A file named `truststore.p12` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
             */
            create: boolean;
            /**
             * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
             */
            passwordSecretRef: outputs.certmanager.v1.CertificateSpecKeystoresPkcs12Passwordsecretref;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
         */
        export interface CertificateSpecKeystoresPkcs12Passwordsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Options to control private keys used for the Certificate.
         */
        export interface CertificateSpecPrivatekey {
            /**
             * Algorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either `RSA`,`Ed25519` or `ECDSA` If `algorithm` is specified and `size` is not provided, key size of 256 will be used for `ECDSA` key algorithm and key size of 2048 will be used for `RSA` key algorithm. key size is ignored when using the `Ed25519` key algorithm.
             */
            algorithm?: string;
            /**
             * The private key cryptography standards (PKCS) encoding for this certificate's private key to be encoded in. If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1 and PKCS#8, respectively. Defaults to `PKCS1` if not specified.
             */
            encoding?: string;
            /**
             * RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.
             */
            rotationPolicy?: string;
            /**
             * Size is the key bit size of the corresponding private key for this certificate. If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. If `algorithm` is set to `Ed25519`, Size is ignored. No other values are allowed.
             */
            size?: number;
        }

        /**
         * SecretTemplate defines annotations and labels to be copied to the Certificate's Secret. Labels and annotations on the Secret will be changed as they appear on the SecretTemplate when added or removed. SecretTemplate annotations are added in conjunction with, and cannot overwrite, the base set of annotations cert-manager sets on the Certificate's Secret.
         */
        export interface CertificateSpecSecrettemplate {
            /**
             * Annotations is a key value map to be copied to the target Kubernetes Secret.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels is a key value map to be copied to the target Kubernetes Secret.
             */
            labels?: {[key: string]: string};
        }

        /**
         * Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
         */
        export interface CertificateSpecSubject {
            /**
             * Countries to be used on the Certificate.
             */
            countries?: string[];
            /**
             * Cities to be used on the Certificate.
             */
            localities?: string[];
            /**
             * Organizational Units to be used on the Certificate.
             */
            organizationalUnits?: string[];
            /**
             * Organizations to be used on the Certificate.
             */
            organizations?: string[];
            /**
             * Postal codes to be used on the Certificate.
             */
            postalCodes?: string[];
            /**
             * State/Provinces to be used on the Certificate.
             */
            provinces?: string[];
            /**
             * Serial number to be used on the Certificate.
             */
            serialNumber?: string;
            /**
             * Street addresses to be used on the Certificate.
             */
            streetAddresses?: string[];
        }

        /**
         * Status of the Certificate. This is set and managed automatically.
         */
        export interface CertificateStatus {
            /**
             * List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
             */
            conditions?: outputs.certmanager.v1.CertificateStatusConditions[];
            /**
             * The number of continuous failed issuance attempts up till now. This field gets removed (if set) on a successful issuance and gets set to 1 if unset and an issuance has failed. If an issuance has failed, the delay till the next issuance will be calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts - 1).
             */
            failedIssuanceAttempts?: number;
            /**
             * LastFailureTime is the time as recorded by the Certificate controller of the most recent failure to complete a CertificateRequest for this Certificate resource. If set, cert-manager will not re-request another Certificate until 1 hour has elapsed from this time.
             */
            lastFailureTime?: string;
            /**
             * The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
             */
            nextPrivateKeySecretName?: string;
            /**
             * The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
             */
            notAfter?: string;
            /**
             * The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.
             */
            notBefore?: string;
            /**
             * RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
             */
            renewalTime?: string;
            /**
             * The current 'revision' of the certificate as issued. 
             *  When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field. 
             *  Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate. 
             *  Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field.
             */
            revision?: number;
        }

        /**
         * CertificateCondition contains condition information for an Certificate.
         */
        export interface CertificateStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: string;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: string;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Certificate.
             */
            observedGeneration?: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`, `Issuing`).
             */
            type: string;
        }

        /**
         * Desired state of the ClusterIssuer resource.
         */
        export interface ClusterIssuerSpec {
            /**
             * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
             */
            acme?: outputs.certmanager.v1.ClusterIssuerSpecAcme;
            /**
             * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
             */
            ca?: outputs.certmanager.v1.ClusterIssuerSpecCa;
            /**
             * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
             */
            selfSigned?: outputs.certmanager.v1.ClusterIssuerSpecSelfsigned;
            /**
             * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
             */
            vault?: outputs.certmanager.v1.ClusterIssuerSpecVault;
            /**
             * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
             */
            venafi?: outputs.certmanager.v1.ClusterIssuerSpecVenafi;
        }

        /**
         * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
         */
        export interface ClusterIssuerSpecAcme {
            /**
             * Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
             */
            disableAccountKeyGeneration?: boolean;
            /**
             * Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
             */
            email?: string;
            /**
             * Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
             */
            enableDurationFeature?: boolean;
            /**
             * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
             */
            externalAccountBinding?: outputs.certmanager.v1.ClusterIssuerSpecAcmeExternalaccountbinding;
            /**
             * PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
             */
            preferredChain?: string;
            /**
             * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
             */
            privateKeySecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmePrivatekeysecretref;
            /**
             * Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
             */
            server: string;
            /**
             * Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have their TLS certificate validated (i.e. insecure connections will be allowed). Only enable this option in development environments. The cert-manager system installed roots will be used to verify connections to the ACME server if this is false. Defaults to false.
             */
            skipTLSVerify?: boolean;
            /**
             * Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
             */
            solvers?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolvers[];
        }

        /**
         * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
         */
        export interface ClusterIssuerSpecAcmeExternalaccountbinding {
            /**
             * Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.
             */
            keyAlgorithm?: string;
            /**
             * keyID is the ID of the CA key that the External Account is bound to.
             */
            keyID: string;
            /**
             * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
             */
            keySecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeExternalaccountbindingKeysecretref;
        }

        /**
         * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
         */
        export interface ClusterIssuerSpecAcmeExternalaccountbindingKeysecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
         */
        export interface ClusterIssuerSpecAcmePrivatekeysecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.
         */
        export interface ClusterIssuerSpecAcmeSolvers {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversSelector;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01 {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Acmedns;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Akamai;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Azuredns;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Clouddns;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Cloudflare;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: string;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Digitalocean;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Rfc2136;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Webhook;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Acmedns {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AcmednsAccountsecretref;
            host: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AcmednsAccountsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Akamai {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiAccesstokensecretref;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiClientsecretsecretref;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiClienttokensecretref;
            serviceConsumerDomain: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiAccesstokensecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClientsecretsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClienttokensecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Azuredns {
            /**
             * if both this and ClientSecret are left unset MSI will be used
             */
            clientID?: string;
            /**
             * if both this and ClientID are left unset MSI will be used
             */
            clientSecretSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzurednsClientsecretsecretref;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: string;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: string;
            /**
             * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
             */
            managedIdentity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzurednsManagedidentity;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: string;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: string;
            /**
             * when specifying ClientID and ClientSecret then this field is also needed
             */
            tenantID?: string;
        }

        /**
         * if both this and ClientID are left unset MSI will be used
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzurednsClientsecretsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzurednsManagedidentity {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: string;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             */
            resourceID?: string;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Clouddns {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: string;
            project: string;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01ClouddnsServiceaccountsecretref;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01ClouddnsServiceaccountsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Cloudflare {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareApikeysecretref;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareApitokensecretref;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: string;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApikeysecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApitokensecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Digitalocean {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokensecretref;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokensecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136 {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: string;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: string;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: string;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Rfc2136Tsigsecretsecretref;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136Tsigsecretsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53 {
            /**
             * The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we "fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https"://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: string;
            /**
             * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we "fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https"://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyIDSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53Accesskeyidsecretref;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: string;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: string;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: string;
            /**
             * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we "fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https"://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53Secretaccesskeysecretref;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we "fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https"://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53Accesskeyidsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we "fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https"://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53Secretaccesskeysecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Webhook {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: {[key: string]: any};
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: string;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01 {
            /**
             * The Gateway API is a "sig-network community API that models service networking in Kubernetes (https"://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01Gatewayhttproute;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01Ingress;
        }

        /**
         * The Gateway API is a "sig-network community API that models service networking in Kubernetes (https"://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01Gatewayhttproute {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: {[key: string]: string};
            /**
             * When solving an HTTP-01 challenge, "cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https"://gateway-api.sigs.k8s.io/v1alpha2/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefs[];
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * ParentRef identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid. 
         *  References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefs {
            /**
             * Group is the group of the referent. 
             *  Support: Core
             */
            group?: string;
            /**
             * Kind is kind of the referent. 
             *  Support: Core (Gateway) Support: Custom (Other Resources)
             */
            kind?: string;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route. 
             *  Support: Core
             */
            namespace?: string;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: string;
        }
        /**
         * clusterIssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefsProvideDefaults sets the appropriate defaults for ClusterIssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefs
         */
        export function clusterIssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefsProvideDefaults(val: ClusterIssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefs): ClusterIssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01Ingress {
            /**
             * The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.
             */
            class?: string;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressIngresstemplate;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.
             */
            name?: string;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplate;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngresstemplate {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressIngresstemplateMetadata;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngresstemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: {[key: string]: string};
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplate {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateMetadata;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
             */
            spec?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpec;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateMetadata {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: {[key: string]: string};
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpec {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinity;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: string;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecTolerations[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinity {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinity;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinity;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: string;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface ClusterIssuerSpecAcmeSolversSelector {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: string[];
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: string[];
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
         */
        export interface ClusterIssuerSpecCa {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
             */
            crlDistributionPoints?: string[];
            /**
             * The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
             */
            ocspServers?: string[];
            /**
             * SecretName is the name of the secret used to sign Certificates issued by this Issuer.
             */
            secretName: string;
        }

        /**
         * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
         */
        export interface ClusterIssuerSpecSelfsigned {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
             */
            crlDistributionPoints?: string[];
        }

        /**
         * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
         */
        export interface ClusterIssuerSpecVault {
            /**
             * Auth configures how cert-manager authenticates with the Vault server.
             */
            auth: outputs.certmanager.v1.ClusterIssuerSpecVaultAuth;
            /**
             * PEM-encoded CA bundle (base64-encoded) used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.
             */
            caBundle?: string;
            /**
             * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure M"ulti-tenancy. e.g: "ns1" More about namespaces can be found here https"://www.vaultproject.io/docs/enterprise/namespaces
             */
            namespace?: string;
            /**
             * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
             */
            path: string;
            /**
             * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
             */
            server: string;
        }

        /**
         * Auth configures how cert-manager authenticates with the Vault server.
         */
        export interface ClusterIssuerSpecVaultAuth {
            /**
             * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
             */
            appRole?: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthApprole;
            /**
             * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
             */
            kubernetes?: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthKubernetes;
            /**
             * TokenSecretRef authenticates with Vault by presenting a token.
             */
            tokenSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthTokensecretref;
        }

        /**
         * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
         */
        export interface ClusterIssuerSpecVaultAuthApprole {
            /**
             * Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
             */
            path: string;
            /**
             * RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
             */
            roleId: string;
            /**
             * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
             */
            secretRef: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthApproleSecretref;
        }

        /**
         * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
         */
        export interface ClusterIssuerSpecVaultAuthApproleSecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetes {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
             */
            mountPath?: string;
            /**
             * A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
             */
            role: string;
            /**
             * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
             */
            secretRef: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthKubernetesSecretref;
        }

        /**
         * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetesSecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * TokenSecretRef authenticates with Vault by presenting a token.
         */
        export interface ClusterIssuerSpecVaultAuthTokensecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
         */
        export interface ClusterIssuerSpecVenafi {
            /**
             * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
             */
            cloud?: outputs.certmanager.v1.ClusterIssuerSpecVenafiCloud;
            /**
             * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
             */
            tpp?: outputs.certmanager.v1.ClusterIssuerSpecVenafiTpp;
            /**
             * Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
             */
            zone: string;
        }

        /**
         * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface ClusterIssuerSpecVenafiCloud {
            /**
             * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
             */
            apiTokenSecretRef: outputs.certmanager.v1.ClusterIssuerSpecVenafiCloudApitokensecretref;
            /**
             * URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
             */
            url?: string;
        }

        /**
         * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
         */
        export interface ClusterIssuerSpecVenafiCloudApitokensecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface ClusterIssuerSpecVenafiTpp {
            /**
             * CABundle is a PEM encoded TLS certificate to use to verify connections to the TPP instance. If specified, system roots will not be used and the issuing CA for the TPP instance must be verifiable using the provided root. If not specified, the connection will be verified using the cert-manager system root certificates.
             */
            caBundle?: string;
            /**
             * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
             */
            credentialsRef: outputs.certmanager.v1.ClusterIssuerSpecVenafiTppCredentialsref;
            /**
             * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
             */
            url: string;
        }

        /**
         * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
         */
        export interface ClusterIssuerSpecVenafiTppCredentialsref {
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Status of the ClusterIssuer. This is set and managed automatically.
         */
        export interface ClusterIssuerStatus {
            /**
             * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
             */
            acme?: outputs.certmanager.v1.ClusterIssuerStatusAcme;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
             */
            conditions?: outputs.certmanager.v1.ClusterIssuerStatusConditions[];
        }

        /**
         * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
         */
        export interface ClusterIssuerStatusAcme {
            /**
             * LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
             */
            lastRegisteredEmail?: string;
            /**
             * URI is the unique account identifier, which can also be used to retrieve account details from the CA
             */
            uri?: string;
        }

        /**
         * IssuerCondition contains condition information for an Issuer.
         */
        export interface ClusterIssuerStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: string;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: string;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
             */
            observedGeneration?: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`).
             */
            type: string;
        }

        /**
         * Desired state of the Issuer resource.
         */
        export interface IssuerSpec {
            /**
             * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
             */
            acme?: outputs.certmanager.v1.IssuerSpecAcme;
            /**
             * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
             */
            ca?: outputs.certmanager.v1.IssuerSpecCa;
            /**
             * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
             */
            selfSigned?: outputs.certmanager.v1.IssuerSpecSelfsigned;
            /**
             * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
             */
            vault?: outputs.certmanager.v1.IssuerSpecVault;
            /**
             * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
             */
            venafi?: outputs.certmanager.v1.IssuerSpecVenafi;
        }

        /**
         * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
         */
        export interface IssuerSpecAcme {
            /**
             * Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
             */
            disableAccountKeyGeneration?: boolean;
            /**
             * Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
             */
            email?: string;
            /**
             * Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
             */
            enableDurationFeature?: boolean;
            /**
             * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
             */
            externalAccountBinding?: outputs.certmanager.v1.IssuerSpecAcmeExternalaccountbinding;
            /**
             * PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
             */
            preferredChain?: string;
            /**
             * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
             */
            privateKeySecretRef: outputs.certmanager.v1.IssuerSpecAcmePrivatekeysecretref;
            /**
             * Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
             */
            server: string;
            /**
             * Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have their TLS certificate validated (i.e. insecure connections will be allowed). Only enable this option in development environments. The cert-manager system installed roots will be used to verify connections to the ACME server if this is false. Defaults to false.
             */
            skipTLSVerify?: boolean;
            /**
             * Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
             */
            solvers?: outputs.certmanager.v1.IssuerSpecAcmeSolvers[];
        }

        /**
         * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
         */
        export interface IssuerSpecAcmeExternalaccountbinding {
            /**
             * Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.
             */
            keyAlgorithm?: string;
            /**
             * keyID is the ID of the CA key that the External Account is bound to.
             */
            keyID: string;
            /**
             * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
             */
            keySecretRef: outputs.certmanager.v1.IssuerSpecAcmeExternalaccountbindingKeysecretref;
        }

        /**
         * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
         */
        export interface IssuerSpecAcmeExternalaccountbindingKeysecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
         */
        export interface IssuerSpecAcmePrivatekeysecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.
         */
        export interface IssuerSpecAcmeSolvers {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: outputs.certmanager.v1.IssuerSpecAcmeSolversSelector;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface IssuerSpecAcmeSolversDns01 {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Acmedns;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Akamai;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Azuredns;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Clouddns;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Cloudflare;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: string;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Digitalocean;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Rfc2136;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Webhook;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Acmedns {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AcmednsAccountsecretref;
            host: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AcmednsAccountsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Akamai {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiAccesstokensecretref;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiClientsecretsecretref;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiClienttokensecretref;
            serviceConsumerDomain: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiAccesstokensecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiClientsecretsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiClienttokensecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Azuredns {
            /**
             * if both this and ClientSecret are left unset MSI will be used
             */
            clientID?: string;
            /**
             * if both this and ClientID are left unset MSI will be used
             */
            clientSecretSecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzurednsClientsecretsecretref;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: string;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: string;
            /**
             * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
             */
            managedIdentity?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzurednsManagedidentity;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: string;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: string;
            /**
             * when specifying ClientID and ClientSecret then this field is also needed
             */
            tenantID?: string;
        }

        /**
         * if both this and ClientID are left unset MSI will be used
         */
        export interface IssuerSpecAcmeSolversDns01AzurednsClientsecretsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
         */
        export interface IssuerSpecAcmeSolversDns01AzurednsManagedidentity {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: string;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             */
            resourceID?: string;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Clouddns {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: string;
            project: string;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01ClouddnsServiceaccountsecretref;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01ClouddnsServiceaccountsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Cloudflare {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudflareApikeysecretref;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudflareApitokensecretref;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: string;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareApikeysecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareApitokensecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Digitalocean {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01DigitaloceanTokensecretref;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01DigitaloceanTokensecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Rfc2136 {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: string;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: string;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: string;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Rfc2136Tsigsecretsecretref;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface IssuerSpecAcmeSolversDns01Rfc2136Tsigsecretsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Route53 {
            /**
             * The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we "fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https"://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: string;
            /**
             * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we "fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https"://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyIDSecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53Accesskeyidsecretref;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: string;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: string;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: string;
            /**
             * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we "fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https"://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53Secretaccesskeysecretref;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we "fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https"://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface IssuerSpecAcmeSolversDns01Route53Accesskeyidsecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we "fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https"://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface IssuerSpecAcmeSolversDns01Route53Secretaccesskeysecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Webhook {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: {[key: string]: any};
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: string;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface IssuerSpecAcmeSolversHttp01 {
            /**
             * The Gateway API is a "sig-network community API that models service networking in Kubernetes (https"://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01Gatewayhttproute;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01Ingress;
        }

        /**
         * The Gateway API is a "sig-network community API that models service networking in Kubernetes (https"://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface IssuerSpecAcmeSolversHttp01Gatewayhttproute {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: {[key: string]: string};
            /**
             * When solving an HTTP-01 challenge, "cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https"://gateway-api.sigs.k8s.io/v1alpha2/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefs[];
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * ParentRef identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid. 
         *  References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefs {
            /**
             * Group is the group of the referent. 
             *  Support: Core
             */
            group?: string;
            /**
             * Kind is kind of the referent. 
             *  Support: Core (Gateway) Support: Custom (Other Resources)
             */
            kind?: string;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route. 
             *  Support: Core
             */
            namespace?: string;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: string;
        }
        /**
         * issuerSpecAcmeSolversHttp01GatewayhttprouteParentrefsProvideDefaults sets the appropriate defaults for IssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefs
         */
        export function issuerSpecAcmeSolversHttp01GatewayhttprouteParentrefsProvideDefaults(val: IssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefs): IssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface IssuerSpecAcmeSolversHttp01Ingress {
            /**
             * The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.
             */
            class?: string;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressIngresstemplate;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.
             */
            name?: string;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplate;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressIngresstemplate {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressIngresstemplateMetadata;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressIngresstemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: {[key: string]: string};
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplate {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateMetadata;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
             */
            spec?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpec;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateMetadata {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: {[key: string]: string};
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpec {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinity;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: string;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecTolerations[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinity {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinity;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinity;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: string;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface IssuerSpecAcmeSolversSelector {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: string[];
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: string[];
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
         */
        export interface IssuerSpecCa {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
             */
            crlDistributionPoints?: string[];
            /**
             * The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
             */
            ocspServers?: string[];
            /**
             * SecretName is the name of the secret used to sign Certificates issued by this Issuer.
             */
            secretName: string;
        }

        /**
         * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
         */
        export interface IssuerSpecSelfsigned {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
             */
            crlDistributionPoints?: string[];
        }

        /**
         * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
         */
        export interface IssuerSpecVault {
            /**
             * Auth configures how cert-manager authenticates with the Vault server.
             */
            auth: outputs.certmanager.v1.IssuerSpecVaultAuth;
            /**
             * PEM-encoded CA bundle (base64-encoded) used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.
             */
            caBundle?: string;
            /**
             * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure M"ulti-tenancy. e.g: "ns1" More about namespaces can be found here https"://www.vaultproject.io/docs/enterprise/namespaces
             */
            namespace?: string;
            /**
             * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
             */
            path: string;
            /**
             * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
             */
            server: string;
        }

        /**
         * Auth configures how cert-manager authenticates with the Vault server.
         */
        export interface IssuerSpecVaultAuth {
            /**
             * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
             */
            appRole?: outputs.certmanager.v1.IssuerSpecVaultAuthApprole;
            /**
             * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
             */
            kubernetes?: outputs.certmanager.v1.IssuerSpecVaultAuthKubernetes;
            /**
             * TokenSecretRef authenticates with Vault by presenting a token.
             */
            tokenSecretRef?: outputs.certmanager.v1.IssuerSpecVaultAuthTokensecretref;
        }

        /**
         * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
         */
        export interface IssuerSpecVaultAuthApprole {
            /**
             * Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
             */
            path: string;
            /**
             * RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
             */
            roleId: string;
            /**
             * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
             */
            secretRef: outputs.certmanager.v1.IssuerSpecVaultAuthApproleSecretref;
        }

        /**
         * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
         */
        export interface IssuerSpecVaultAuthApproleSecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
         */
        export interface IssuerSpecVaultAuthKubernetes {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
             */
            mountPath?: string;
            /**
             * A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
             */
            role: string;
            /**
             * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
             */
            secretRef: outputs.certmanager.v1.IssuerSpecVaultAuthKubernetesSecretref;
        }

        /**
         * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
         */
        export interface IssuerSpecVaultAuthKubernetesSecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * TokenSecretRef authenticates with Vault by presenting a token.
         */
        export interface IssuerSpecVaultAuthTokensecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
         */
        export interface IssuerSpecVenafi {
            /**
             * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
             */
            cloud?: outputs.certmanager.v1.IssuerSpecVenafiCloud;
            /**
             * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
             */
            tpp?: outputs.certmanager.v1.IssuerSpecVenafiTpp;
            /**
             * Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
             */
            zone: string;
        }

        /**
         * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface IssuerSpecVenafiCloud {
            /**
             * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
             */
            apiTokenSecretRef: outputs.certmanager.v1.IssuerSpecVenafiCloudApitokensecretref;
            /**
             * URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
             */
            url?: string;
        }

        /**
         * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
         */
        export interface IssuerSpecVenafiCloudApitokensecretref {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface IssuerSpecVenafiTpp {
            /**
             * CABundle is a PEM encoded TLS certificate to use to verify connections to the TPP instance. If specified, system roots will not be used and the issuing CA for the TPP instance must be verifiable using the provided root. If not specified, the connection will be verified using the cert-manager system root certificates.
             */
            caBundle?: string;
            /**
             * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
             */
            credentialsRef: outputs.certmanager.v1.IssuerSpecVenafiTppCredentialsref;
            /**
             * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
             */
            url: string;
        }

        /**
         * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
         */
        export interface IssuerSpecVenafiTppCredentialsref {
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Status of the Issuer. This is set and managed automatically.
         */
        export interface IssuerStatus {
            /**
             * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
             */
            acme?: outputs.certmanager.v1.IssuerStatusAcme;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
             */
            conditions?: outputs.certmanager.v1.IssuerStatusConditions[];
        }

        /**
         * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
         */
        export interface IssuerStatusAcme {
            /**
             * LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
             */
            lastRegisteredEmail?: string;
            /**
             * URI is the unique account identifier, which can also be used to retrieve account details from the CA
             */
            uri?: string;
        }

        /**
         * IssuerCondition contains condition information for an Issuer.
         */
        export interface IssuerStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: string;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: string;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
             */
            observedGeneration?: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`).
             */
            type: string;
        }
    }
}

export namespace jetstream {
    export namespace v1beta1 {
        export interface ConsumerSpec {
            /**
             * How messages should be acknowledged.
             */
            ackPolicy?: string;
            /**
             * How long to allow messages to remain un-acknowledged before attempting redelivery.
             */
            ackWait?: string;
            /**
             * The name of a queue group.
             */
            deliverGroup?: string;
            deliverPolicy?: string;
            /**
             * The subject to deliver observed messages, when not set, a pull-based Consumer is created.
             */
            deliverSubject?: string;
            /**
             * The description of the consumer.
             */
            description?: string;
            /**
             * The name of the Consumer.
             */
            durableName?: string;
            /**
             * Select only a specific incoming subjects, supports wildcards.
             */
            filterSubject?: string;
            /**
             * Enables flow control.
             */
            flowControl?: boolean;
            /**
             * The interval used to deliver idle heartbeats for push-based consumers, in Go's time.Duration format.
             */
            heartbeatInterval?: string;
            /**
             * Maximum pending Acks before consumers are paused
             */
            maxAckPending?: number;
            maxDeliver?: number;
            optStartSeq?: number;
            /**
             * Time format must be RFC3339.
             */
            optStartTime?: string;
            /**
             * rate at which messages will be delivered to clients, expressed in bit per second.
             */
            rateLimitBps?: number;
            /**
             * How messages are sent.
             */
            replayPolicy?: string;
            /**
             * What percentage of acknowledgements should be samples for observability.
             */
            sampleFreq?: string;
            /**
             * The name of the Stream to create the Consumer in.
             */
            streamName?: string;
        }
        /**
         * consumerSpecProvideDefaults sets the appropriate defaults for ConsumerSpec
         */
        export function consumerSpecProvideDefaults(val: ConsumerSpec): ConsumerSpec {
            return {
                ...val,
                ackPolicy: (val.ackPolicy) ?? "none",
                ackWait: (val.ackWait) ?? "1ns",
                deliverPolicy: (val.deliverPolicy) ?? "all",
                flowControl: (val.flowControl) ?? false,
                replayPolicy: (val.replayPolicy) ?? "instant",
            };
        }

        export interface ConsumerStatus {
            conditions?: outputs.jetstream.v1beta1.ConsumerStatusConditions[];
            observedGeneration?: number;
        }

        export interface ConsumerStatusConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status?: string;
            type?: string;
        }

        export interface StreamSpec {
            /**
             * The description of the stream.
             */
            description?: string;
            /**
             * When a Stream reach it's limits either old messages are deleted or new ones are denied.
             */
            discard?: string;
            /**
             * The duration window to track duplicate messages for.
             */
            duplicateWindow?: string;
            /**
             * Maximum age of any message in the stream, expressed in Go's time.Duration format. Empty for unlimited.
             */
            maxAge?: string;
            /**
             * How big the Stream may be, when the combined stream size exceeds this old messages are removed. -1 for unlimited.
             */
            maxBytes?: number;
            /**
             * How many Consumers can be defined for a given Stream. -1 for unlimited.
             */
            maxConsumers?: number;
            /**
             * The largest message that will be accepted by the Stream. -1 for unlimited.
             */
            maxMsgSize?: number;
            /**
             * How many messages may be in a Stream, oldest messages will be removed if the Stream exceeds this size. -1 for unlimited.
             */
            maxMsgs?: number;
            /**
             * The maximum of messages per subject.
             */
            maxMsgsPerSubject?: number;
            /**
             * A stream mirror.
             */
            mirror?: outputs.jetstream.v1beta1.StreamSpecMirror;
            /**
             * A unique name for the Stream.
             */
            name?: string;
            /**
             * Disables acknowledging messages that are received by the Stream.
             */
            noAck?: boolean;
            /**
             * A stream's placement.
             */
            placement?: outputs.jetstream.v1beta1.StreamSpecPlacement;
            /**
             * How many replicas to keep for each message.
             */
            replicas?: number;
            /**
             * How messages are retained in the Stream, once this is exceeded old messages are removed.
             */
            retention?: string;
            /**
             * A stream's sources.
             */
            sources?: outputs.jetstream.v1beta1.StreamSpecSources[];
            /**
             * The storage backend to use for the Stream.
             */
            storage?: string;
            /**
             * A list of subjects to consume, supports wildcards.
             */
            subjects?: string[];
        }
        /**
         * streamSpecProvideDefaults sets the appropriate defaults for StreamSpec
         */
        export function streamSpecProvideDefaults(val: StreamSpec): StreamSpec {
            return {
                ...val,
                discard: (val.discard) ?? "old",
                maxAge: (val.maxAge) ?? "",
                maxBytes: (val.maxBytes) ?? -1,
                maxConsumers: (val.maxConsumers) ?? -1,
                maxMsgSize: (val.maxMsgSize) ?? -1,
                maxMsgs: (val.maxMsgs) ?? -1,
                maxMsgsPerSubject: (val.maxMsgsPerSubject) ?? 0,
                noAck: (val.noAck) ?? false,
                replicas: (val.replicas) ?? 1,
                retention: (val.retention) ?? "limits",
                storage: (val.storage) ?? "memory",
            };
        }

        /**
         * A stream mirror.
         */
        export interface StreamSpecMirror {
            externalApiPrefix?: string;
            externalDeliverPrefix?: string;
            filterSubject?: string;
            name?: string;
            optStartSeq?: number;
            /**
             * Time format must be RFC3339.
             */
            optStartTime?: string;
        }

        /**
         * A stream's placement.
         */
        export interface StreamSpecPlacement {
            cluster?: string;
            tags?: string[];
        }

        export interface StreamSpecSources {
            externalApiPrefix?: string;
            externalDeliverPrefix?: string;
            filterSubject?: string;
            name?: string;
            optStartSeq?: number;
            /**
             * Time format must be RFC3339.
             */
            optStartTime?: string;
        }

        export interface StreamStatus {
            conditions?: outputs.jetstream.v1beta1.StreamStatusConditions[];
            observedGeneration?: number;
        }

        export interface StreamStatusConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status?: string;
            type?: string;
        }

        export interface StreamTemplateSpec {
            /**
             * When a Stream reach it's limits either old messages are deleted or new ones are denied.
             */
            discard?: string;
            /**
             * The duration window to track duplicate messages for.
             */
            duplicateWindow?: string;
            /**
             * Maximum age of any message in the stream, expressed in Go's time.Duration format. Empty for unlimited.
             */
            maxAge?: string;
            /**
             * How big the Stream may be, when the combined stream size exceeds this old messages are removed. -1 for unlimited.
             */
            maxBytes?: number;
            /**
             * How many Consumers can be defined for a given Stream. -1 for unlimited.
             */
            maxConsumers?: number;
            /**
             * The largest message that will be accepted by the Stream. -1 for unlimited.
             */
            maxMsgSize?: number;
            /**
             * How many messages may be in a Stream, oldest messages will be removed if the Stream exceeds this size. -1 for unlimited.
             */
            maxMsgs?: number;
            /**
             * The maximum number of Streams this Template can create, -1 for unlimited.
             */
            maxStreams?: number;
            /**
             * A unique name for the Stream Template.
             */
            name?: string;
            /**
             * Disables acknowledging messages that are received by the Stream.
             */
            noAck?: boolean;
            /**
             * How many replicas to keep for each message.
             */
            replicas?: number;
            /**
             * How messages are retained in the Stream, once this is exceeded old messages are removed.
             */
            retention?: string;
            /**
             * The storage backend to use for the Stream.
             */
            storage?: string;
            /**
             * A list of subjects to consume, supports wildcards.
             */
            subjects?: string[];
        }
        /**
         * streamTemplateSpecProvideDefaults sets the appropriate defaults for StreamTemplateSpec
         */
        export function streamTemplateSpecProvideDefaults(val: StreamTemplateSpec): StreamTemplateSpec {
            return {
                ...val,
                discard: (val.discard) ?? "old",
                maxAge: (val.maxAge) ?? "",
                maxBytes: (val.maxBytes) ?? -1,
                maxConsumers: (val.maxConsumers) ?? -1,
                maxMsgSize: (val.maxMsgSize) ?? -1,
                maxMsgs: (val.maxMsgs) ?? -1,
                maxStreams: (val.maxStreams) ?? -1,
                noAck: (val.noAck) ?? false,
                replicas: (val.replicas) ?? 1,
                retention: (val.retention) ?? "limits",
                storage: (val.storage) ?? "memory",
            };
        }

        export interface StreamTemplateStatus {
            conditions?: outputs.jetstream.v1beta1.StreamTemplateStatusConditions[];
            observedGeneration?: number;
        }

        export interface StreamTemplateStatusConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status?: string;
            type?: string;
        }

    }

    export namespace v1beta2 {
        export interface AccountSpec {
            /**
             * The creds to be used to connect to the NATS Service.
             */
            creds?: outputs.jetstream.v1beta2.AccountSpecCreds;
            /**
             * A unique name for the Account.
             */
            name?: string;
            /**
             * A list of servers to connect.
             */
            servers?: string[];
            /**
             * The TLS certs to be used to connect to the NATS Service.
             */
            tls?: outputs.jetstream.v1beta2.AccountSpecTls;
        }

        /**
         * The creds to be used to connect to the NATS Service.
         */
        export interface AccountSpecCreds {
            /**
             * Credentials file.
             */
            file?: string;
            secret?: outputs.jetstream.v1beta2.AccountSpecCredsSecret;
        }

        export interface AccountSpecCredsSecret {
            /**
             * Name of the secret with the creds.
             */
            name?: string;
        }

        /**
         * The TLS certs to be used to connect to the NATS Service.
         */
        export interface AccountSpecTls {
            /**
             * Filename of the Root CA of the TLS cert.
             */
            ca?: string;
            /**
             * Filename of the TLS cert.
             */
            cert?: string;
            /**
             * Filename of the TLS cert key.
             */
            key?: string;
            secret?: outputs.jetstream.v1beta2.AccountSpecTlsSecret;
        }

        export interface AccountSpecTlsSecret {
            /**
             * Name of the TLS secret with the certs.
             */
            name?: string;
        }

        export interface ConsumerSpec {
            /**
             * Name of the account to which the Consumer belongs.
             */
            account?: string;
            /**
             * How messages should be acknowledged.
             */
            ackPolicy?: string;
            /**
             * How long to allow messages to remain un-acknowledged before attempting redelivery.
             */
            ackWait?: string;
            /**
             * NATS user credentials for connecting to servers. Please make sure your controller has mounted the cerds on its path.
             */
            creds?: string;
            /**
             * The name of a queue group.
             */
            deliverGroup?: string;
            deliverPolicy?: string;
            /**
             * The subject to deliver observed messages, when not set, a pull-based Consumer is created.
             */
            deliverSubject?: string;
            /**
             * The description of the consumer.
             */
            description?: string;
            /**
             * The name of the Consumer.
             */
            durableName?: string;
            /**
             * Select only a specific incoming subjects, supports wildcards.
             */
            filterSubject?: string;
            /**
             * Enables flow control.
             */
            flowControl?: boolean;
            /**
             * The interval used to deliver idle heartbeats for push-based consumers, in Go's time.Duration format.
             */
            heartbeatInterval?: string;
            /**
             * Maximum pending Acks before consumers are paused
             */
            maxAckPending?: number;
            maxDeliver?: number;
            /**
             * NATS user NKey for connecting to servers.
             */
            nkey?: string;
            optStartSeq?: number;
            /**
             * Time format must be RFC3339.
             */
            optStartTime?: string;
            /**
             * rate at which messages will be delivered to clients, expressed in bit per second.
             */
            rateLimitBps?: number;
            /**
             * How messages are sent.
             */
            replayPolicy?: string;
            /**
             * What percentage of acknowledgements should be samples for observability.
             */
            sampleFreq?: string;
            /**
             * A list of servers for creating consumer
             */
            servers?: string[];
            /**
             * The name of the Stream to create the Consumer in.
             */
            streamName?: string;
            /**
             * A client's TLS certs and keys.
             */
            tls?: outputs.jetstream.v1beta2.ConsumerSpecTls;
        }
        /**
         * consumerSpecProvideDefaults sets the appropriate defaults for ConsumerSpec
         */
        export function consumerSpecProvideDefaults(val: ConsumerSpec): ConsumerSpec {
            return {
                ...val,
                ackPolicy: (val.ackPolicy) ?? "none",
                ackWait: (val.ackWait) ?? "1ns",
                creds: (val.creds) ?? "",
                deliverPolicy: (val.deliverPolicy) ?? "all",
                flowControl: (val.flowControl) ?? false,
                nkey: (val.nkey) ?? "",
                replayPolicy: (val.replayPolicy) ?? "instant",
            };
        }

        /**
         * A client's TLS certs and keys.
         */
        export interface ConsumerSpecTls {
            /**
             * A client's cert filepath. Should be mounted.
             */
            clientCert?: string;
            /**
             * A client's key filepath. Should be mounted.
             */
            clientKey?: string;
            /**
             * A list of filepaths to CAs. Should be mounted.
             */
            rootCas?: string[];
        }

        export interface ConsumerStatus {
            conditions?: outputs.jetstream.v1beta2.ConsumerStatusConditions[];
            observedGeneration?: number;
        }

        export interface ConsumerStatusConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status?: string;
            type?: string;
        }

        export interface StreamSpec {
            /**
             * Name of the account to which the Stream belongs.
             */
            account?: string;
            /**
             * NATS user credentials for connecting to servers. Please make sure your controller has mounted the cerds on its path.
             */
            creds?: string;
            /**
             * The description of the stream.
             */
            description?: string;
            /**
             * When a Stream reach it's limits either old messages are deleted or new ones are denied.
             */
            discard?: string;
            /**
             * The duration window to track duplicate messages for.
             */
            duplicateWindow?: string;
            /**
             * Maximum age of any message in the stream, expressed in Go's time.Duration format. Empty for unlimited.
             */
            maxAge?: string;
            /**
             * How big the Stream may be, when the combined stream size exceeds this old messages are removed. -1 for unlimited.
             */
            maxBytes?: number;
            /**
             * How many Consumers can be defined for a given Stream. -1 for unlimited.
             */
            maxConsumers?: number;
            /**
             * The largest message that will be accepted by the Stream. -1 for unlimited.
             */
            maxMsgSize?: number;
            /**
             * How many messages may be in a Stream, oldest messages will be removed if the Stream exceeds this size. -1 for unlimited.
             */
            maxMsgs?: number;
            /**
             * The maximum of messages per subject.
             */
            maxMsgsPerSubject?: number;
            /**
             * A stream mirror.
             */
            mirror?: outputs.jetstream.v1beta2.StreamSpecMirror;
            /**
             * A unique name for the Stream.
             */
            name?: string;
            /**
             * NATS user NKey for connecting to servers.
             */
            nkey?: string;
            /**
             * Disables acknowledging messages that are received by the Stream.
             */
            noAck?: boolean;
            /**
             * A stream's placement.
             */
            placement?: outputs.jetstream.v1beta2.StreamSpecPlacement;
            /**
             * How many replicas to keep for each message.
             */
            replicas?: number;
            /**
             * How messages are retained in the Stream, once this is exceeded old messages are removed.
             */
            retention?: string;
            /**
             * A list of servers for creating stream
             */
            servers?: string[];
            /**
             * A stream's sources.
             */
            sources?: outputs.jetstream.v1beta2.StreamSpecSources[];
            /**
             * The storage backend to use for the Stream.
             */
            storage?: string;
            /**
             * A list of subjects to consume, supports wildcards.
             */
            subjects?: string[];
            /**
             * A client's TLS certs and keys.
             */
            tls?: outputs.jetstream.v1beta2.StreamSpecTls;
        }
        /**
         * streamSpecProvideDefaults sets the appropriate defaults for StreamSpec
         */
        export function streamSpecProvideDefaults(val: StreamSpec): StreamSpec {
            return {
                ...val,
                creds: (val.creds) ?? "",
                discard: (val.discard) ?? "old",
                maxAge: (val.maxAge) ?? "",
                maxBytes: (val.maxBytes) ?? -1,
                maxConsumers: (val.maxConsumers) ?? -1,
                maxMsgSize: (val.maxMsgSize) ?? -1,
                maxMsgs: (val.maxMsgs) ?? -1,
                maxMsgsPerSubject: (val.maxMsgsPerSubject) ?? 0,
                nkey: (val.nkey) ?? "",
                noAck: (val.noAck) ?? false,
                replicas: (val.replicas) ?? 1,
                retention: (val.retention) ?? "limits",
                storage: (val.storage) ?? "memory",
            };
        }

        /**
         * A stream mirror.
         */
        export interface StreamSpecMirror {
            externalApiPrefix?: string;
            externalDeliverPrefix?: string;
            filterSubject?: string;
            name?: string;
            optStartSeq?: number;
            /**
             * Time format must be RFC3339.
             */
            optStartTime?: string;
        }

        /**
         * A stream's placement.
         */
        export interface StreamSpecPlacement {
            cluster?: string;
            tags?: string[];
        }

        export interface StreamSpecSources {
            externalApiPrefix?: string;
            externalDeliverPrefix?: string;
            filterSubject?: string;
            name?: string;
            optStartSeq?: number;
            /**
             * Time format must be RFC3339.
             */
            optStartTime?: string;
        }

        /**
         * A client's TLS certs and keys.
         */
        export interface StreamSpecTls {
            /**
             * A client's cert filepath. Should be mounted.
             */
            clientCert?: string;
            /**
             * A client's key filepath. Should be mounted.
             */
            clientKey?: string;
            /**
             * A list of filepaths to CAs. Should be mounted.
             */
            rootCas?: string[];
        }

        export interface StreamStatus {
            conditions?: outputs.jetstream.v1beta2.StreamStatusConditions[];
            observedGeneration?: number;
        }

        export interface StreamStatusConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status?: string;
            type?: string;
        }

    }
}

export namespace linkerd {
    export namespace v1alpha1 {
        /**
         * Spec is the custom resource spec
         */
        export interface ServiceProfileSpec {
            dstOverrides?: outputs.linkerd.v1alpha1.ServiceProfileSpecDstoverrides[];
            opaquePorts?: string[];
            /**
             * RetryBudget describes the maximum number of retries that should be issued to this service.
             */
            retryBudget?: outputs.linkerd.v1alpha1.ServiceProfileSpecRetrybudget;
            routes: outputs.linkerd.v1alpha1.ServiceProfileSpecRoutes[];
        }

        /**
         * WeightedDst is a weighted alternate destination.
         */
        export interface ServiceProfileSpecDstoverrides {
            authority?: string;
            weight?: number | string;
        }

        /**
         * RetryBudget describes the maximum number of retries that should be issued to this service.
         */
        export interface ServiceProfileSpecRetrybudget {
            minRetriesPerSecond: number;
            retryRatio: number;
            ttl: string;
        }

        /**
         * RouteSpec specifies a Route resource.
         */
        export interface ServiceProfileSpecRoutes {
            /**
             * RequestMatch describes the conditions under which to match a Route.
             */
            condition: outputs.linkerd.v1alpha1.ServiceProfileSpecRoutesCondition;
            isRetryable?: boolean;
            name: string;
            responseClasses?: outputs.linkerd.v1alpha1.ServiceProfileSpecRoutesResponseclasses[];
            timeout?: string;
        }

        /**
         * RequestMatch describes the conditions under which to match a Route.
         */
        export interface ServiceProfileSpecRoutesCondition {
            all?: {[key: string]: any}[];
            any?: {[key: string]: any}[];
            method?: string;
            not?: {[key: string]: any}[];
            pathRegex?: string;
        }

        /**
         * ResponseClass describes how to classify a response (e.g. success or failures).
         */
        export interface ServiceProfileSpecRoutesResponseclasses {
            /**
             * ResponseMatch describes the conditions under which to classify a response.
             */
            condition: outputs.linkerd.v1alpha1.ServiceProfileSpecRoutesResponseclassesCondition;
            isFailure?: boolean;
        }

        /**
         * ResponseMatch describes the conditions under which to classify a response.
         */
        export interface ServiceProfileSpecRoutesResponseclassesCondition {
            all?: {[key: string]: any}[];
            any?: {[key: string]: any}[];
            not?: {[key: string]: any}[];
            /**
             * Range describes a range of integers (e.g. status codes).
             */
            status?: outputs.linkerd.v1alpha1.ServiceProfileSpecRoutesResponseclassesConditionStatus;
        }

        /**
         * Range describes a range of integers (e.g. status codes).
         */
        export interface ServiceProfileSpecRoutesResponseclassesConditionStatus {
            max?: number;
            min?: number;
        }
    }

    export namespace v1alpha2 {
        /**
         * Spec is the custom resource spec
         */
        export interface ServiceProfileSpec {
            dstOverrides?: outputs.linkerd.v1alpha2.ServiceProfileSpecDstoverrides[];
            opaquePorts?: string[];
            /**
             * RetryBudget describes the maximum number of retries that should be issued to this service.
             */
            retryBudget?: outputs.linkerd.v1alpha2.ServiceProfileSpecRetrybudget;
            routes?: outputs.linkerd.v1alpha2.ServiceProfileSpecRoutes[];
        }

        /**
         * WeightedDst is a weighted alternate destination.
         */
        export interface ServiceProfileSpecDstoverrides {
            authority?: string;
            weight?: number | string;
        }

        /**
         * RetryBudget describes the maximum number of retries that should be issued to this service.
         */
        export interface ServiceProfileSpecRetrybudget {
            minRetriesPerSecond: number;
            retryRatio: number;
            ttl: string;
        }

        /**
         * RouteSpec specifies a Route resource.
         */
        export interface ServiceProfileSpecRoutes {
            /**
             * RequestMatch describes the conditions under which to match a Route.
             */
            condition: outputs.linkerd.v1alpha2.ServiceProfileSpecRoutesCondition;
            isRetryable?: boolean;
            name: string;
            responseClasses?: outputs.linkerd.v1alpha2.ServiceProfileSpecRoutesResponseclasses[];
            timeout?: string;
        }

        /**
         * RequestMatch describes the conditions under which to match a Route.
         */
        export interface ServiceProfileSpecRoutesCondition {
            all?: {[key: string]: any}[];
            any?: {[key: string]: any}[];
            method?: string;
            not?: {[key: string]: any}[];
            pathRegex?: string;
        }

        /**
         * ResponseClass describes how to classify a response (e.g. success or failures).
         */
        export interface ServiceProfileSpecRoutesResponseclasses {
            /**
             * ResponseMatch describes the conditions under which to classify a response.
             */
            condition: outputs.linkerd.v1alpha2.ServiceProfileSpecRoutesResponseclassesCondition;
            isFailure?: boolean;
        }

        /**
         * ResponseMatch describes the conditions under which to classify a response.
         */
        export interface ServiceProfileSpecRoutesResponseclassesCondition {
            all?: {[key: string]: any}[];
            any?: {[key: string]: any}[];
            not?: {[key: string]: any}[];
            /**
             * Range describes a range of integers (e.g. status codes).
             */
            status?: outputs.linkerd.v1alpha2.ServiceProfileSpecRoutesResponseclassesConditionStatus;
        }

        /**
         * Range describes a range of integers (e.g. status codes).
         */
        export interface ServiceProfileSpecRoutesResponseclassesConditionStatus {
            max?: number;
            min?: number;
        }
    }
}

export namespace longhorn {
    export namespace v1beta1 {
    }

    export namespace v1beta2 {
        /**
         * BackingImageDataSourceSpec defines the desired state of the Longhorn backing image data source
         */
        export interface BackingImageDataSourceSpec {
            checksum?: string;
            diskPath?: string;
            diskUUID?: string;
            fileTransferred?: boolean;
            nodeID?: string;
            parameters?: {[key: string]: string};
            sourceType?: string;
            uuid?: string;
        }

        /**
         * BackingImageDataSourceStatus defines the observed state of the Longhorn backing image data source
         */
        export interface BackingImageDataSourceStatus {
            checksum?: string;
            currentState?: string;
            ip?: string;
            message?: string;
            ownerID?: string;
            progress?: number;
            runningParameters?: {[key: string]: string};
            size?: number;
            storageIP?: string;
        }

        /**
         * BackingImageManagerSpec defines the desired state of the Longhorn backing image manager
         */
        export interface BackingImageManagerSpec {
            backingImages?: {[key: string]: string};
            diskPath?: string;
            diskUUID?: string;
            image?: string;
            nodeID?: string;
        }

        /**
         * BackingImageManagerStatus defines the observed state of the Longhorn backing image manager
         */
        export interface BackingImageManagerStatus {
            apiMinVersion?: number;
            apiVersion?: number;
            backingImageFileMap?: {[key: string]: outputs.longhorn.v1beta2.BackingImageManagerStatusBackingimagefilemap};
            currentState?: string;
            ip?: string;
            ownerID?: string;
            storageIP?: string;
        }

        export interface BackingImageManagerStatusBackingimagefilemap {
            currentChecksum?: string;
            /**
             * Deprecated: This field is useless.
             */
            directory?: string;
            /**
             * Deprecated: This field is renamed to `Progress`.
             */
            downloadProgress?: number;
            message?: string;
            name?: string;
            progress?: number;
            senderManagerAddress?: string;
            sendingReference?: number;
            size?: number;
            state?: string;
            /**
             * Deprecated: This field is useless now. The manager of backing image files doesn't care if a file is downloaded and how.
             */
            url?: string;
            uuid?: string;
        }

        /**
         * BackingImageSpec defines the desired state of the Longhorn backing image
         */
        export interface BackingImageSpec {
            checksum?: string;
            disks?: {[key: string]: string};
            /**
             * Deprecated: This kind of info will be included in the related BackingImageDataSource.
             */
            imageURL?: string;
            sourceParameters?: {[key: string]: string};
            sourceType?: string;
        }

        /**
         * BackingImageStatus defines the observed state of the Longhorn backing image status
         */
        export interface BackingImageStatus {
            checksum?: string;
            /**
             * Deprecated: Replaced by field `Progress` in `DiskFileStatusMap`.
             */
            diskDownloadProgressMap?: {[key: string]: number};
            /**
             * Deprecated: Replaced by field `State` in `DiskFileStatusMap`.
             */
            diskDownloadStateMap?: {[key: string]: string};
            diskFileStatusMap?: {[key: string]: outputs.longhorn.v1beta2.BackingImageStatusDiskfilestatusmap};
            diskLastRefAtMap?: {[key: string]: string};
            ownerID?: string;
            size?: number;
            uuid?: string;
        }

        export interface BackingImageStatusDiskfilestatusmap {
            lastStateTransitionTime?: string;
            message?: string;
            progress?: number;
            state?: string;
        }

        /**
         * BackupSpec defines the desired state of the Longhorn backup
         */
        export interface BackupSpec {
            /**
             * The labels of snapshot backup.
             */
            labels?: {[key: string]: string};
            /**
             * The snapshot name.
             */
            snapshotName?: string;
            /**
             * The time to request run sync the remote backup.
             */
            syncRequestedAt?: string;
        }

        /**
         * BackupStatus defines the observed state of the Longhorn backup
         */
        export interface BackupStatus {
            /**
             * The snapshot backup upload finished time.
             */
            backupCreatedAt?: string;
            /**
             * The error message when taking the snapshot backup.
             */
            error?: string;
            /**
             * The labels of snapshot backup.
             */
            labels?: {[key: string]: string};
            /**
             * The last time that the backup was synced with the remote backup target.
             */
            lastSyncedAt?: string;
            /**
             * The error messages when calling longhorn engine on listing or inspecting backups.
             */
            messages?: {[key: string]: string};
            /**
             * The node ID on which the controller is responsible to reconcile this backup CR.
             */
            ownerID?: string;
            /**
             * The snapshot backup progress.
             */
            progress?: number;
            /**
             * The address of the replica that runs snapshot backup.
             */
            replicaAddress?: string;
            /**
             * The snapshot size.
             */
            size?: string;
            /**
             * The snapshot creation time.
             */
            snapshotCreatedAt?: string;
            /**
             * The snapshot name.
             */
            snapshotName?: string;
            /**
             * The backup creation state. Can be "", "InProgress", "Completed", "Error", "Unknown".
             */
            state?: string;
            /**
             * The snapshot backup URL.
             */
            url?: string;
            /**
             * The volume's backing image name.
             */
            volumeBackingImageName?: string;
            /**
             * The volume creation time.
             */
            volumeCreated?: string;
            /**
             * The volume name.
             */
            volumeName?: string;
            /**
             * The volume size.
             */
            volumeSize?: string;
        }

        /**
         * BackupTargetSpec defines the desired state of the Longhorn backup target
         */
        export interface BackupTargetSpec {
            /**
             * The backup target URL.
             */
            backupTargetURL?: string;
            /**
             * The backup target credential secret.
             */
            credentialSecret?: string;
            /**
             * The interval that the cluster needs to run sync with the backup target.
             */
            pollInterval?: string;
            /**
             * The time to request run sync the remote backup target.
             */
            syncRequestedAt?: string;
        }

        /**
         * BackupTargetStatus defines the observed state of the Longhorn backup target
         */
        export interface BackupTargetStatus {
            /**
             * Available indicates if the remote backup target is available or not.
             */
            available?: boolean;
            /**
             * Records the reason on why the backup target is unavailable.
             */
            conditions?: outputs.longhorn.v1beta2.BackupTargetStatusConditions[];
            /**
             * The last time that the controller synced with the remote backup target.
             */
            lastSyncedAt?: string;
            /**
             * The node ID on which the controller is responsible to reconcile this backup target CR.
             */
            ownerID?: string;
        }

        export interface BackupTargetStatusConditions {
            /**
             * Last time we probed the condition.
             */
            lastProbeTime?: string;
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * Human-readable message indicating details about last transition.
             */
            message?: string;
            /**
             * Unique, one-word, CamelCase reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status is the status of the condition. Can be True, False, Unknown.
             */
            status?: string;
            /**
             * Type is the type of the condition.
             */
            type?: string;
        }

        /**
         * BackupVolumeSpec defines the desired state of the Longhorn backup volume
         */
        export interface BackupVolumeSpec {
            /**
             * The time to request run sync the remote backup volume.
             */
            syncRequestedAt?: string;
        }

        /**
         * BackupVolumeStatus defines the observed state of the Longhorn backup volume
         */
        export interface BackupVolumeStatus {
            /**
             * the backing image checksum.
             */
            backingImageChecksum?: string;
            /**
             * The backing image name.
             */
            backingImageName?: string;
            /**
             * The backup volume creation time.
             */
            createdAt?: string;
            /**
             * The backup volume block count.
             */
            dataStored?: string;
            /**
             * The backup volume labels.
             */
            labels?: {[key: string]: string};
            /**
             * The latest volume backup time.
             */
            lastBackupAt?: string;
            /**
             * The latest volume backup name.
             */
            lastBackupName?: string;
            /**
             * The backup volume config last modification time.
             */
            lastModificationTime?: string;
            /**
             * The last time that the backup volume was synced into the cluster.
             */
            lastSyncedAt?: string;
            /**
             * The error messages when call longhorn engine on list or inspect backup volumes.
             */
            messages?: {[key: string]: string};
            /**
             * The node ID on which the controller is responsible to reconcile this backup volume CR.
             */
            ownerID?: string;
            /**
             * The backup volume size.
             */
            size?: string;
        }

        /**
         * EngineImageSpec defines the desired state of the Longhorn engine image
         */
        export interface EngineImageSpec {
            image: string;
        }

        /**
         * EngineImageStatus defines the observed state of the Longhorn engine image
         */
        export interface EngineImageStatus {
            buildDate?: string;
            cliAPIMinVersion?: number;
            cliAPIVersion?: number;
            conditions?: outputs.longhorn.v1beta2.EngineImageStatusConditions[];
            controllerAPIMinVersion?: number;
            controllerAPIVersion?: number;
            dataFormatMinVersion?: number;
            dataFormatVersion?: number;
            gitCommit?: string;
            noRefSince?: string;
            nodeDeploymentMap?: {[key: string]: boolean};
            ownerID?: string;
            refCount?: number;
            state?: string;
            version?: string;
        }

        export interface EngineImageStatusConditions {
            /**
             * Last time we probed the condition.
             */
            lastProbeTime?: string;
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * Human-readable message indicating details about last transition.
             */
            message?: string;
            /**
             * Unique, one-word, CamelCase reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status is the status of the condition. Can be True, False, Unknown.
             */
            status?: string;
            /**
             * Type is the type of the condition.
             */
            type?: string;
        }

        /**
         * EngineSpec defines the desired state of the Longhorn engine
         */
        export interface EngineSpec {
            active?: boolean;
            backupVolume?: string;
            desireState?: string;
            disableFrontend?: boolean;
            engineImage?: string;
            frontend?: string;
            logRequested?: boolean;
            nodeID?: string;
            replicaAddressMap?: {[key: string]: string};
            requestedBackupRestore?: string;
            requestedDataSource?: string;
            revisionCounterDisabled?: boolean;
            salvageRequested?: boolean;
            upgradedReplicaAddressMap?: {[key: string]: string};
            volumeName?: string;
            volumeSize?: string;
        }

        /**
         * EngineStatus defines the observed state of the Longhorn engine
         */
        export interface EngineStatus {
            backupStatus?: {[key: string]: outputs.longhorn.v1beta2.EngineStatusBackupstatus};
            cloneStatus?: {[key: string]: outputs.longhorn.v1beta2.EngineStatusClonestatus};
            currentImage?: string;
            currentReplicaAddressMap?: {[key: string]: string};
            currentSize?: string;
            currentState?: string;
            endpoint?: string;
            instanceManagerName?: string;
            ip?: string;
            isExpanding?: boolean;
            lastExpansionError?: string;
            lastExpansionFailedAt?: string;
            lastRestoredBackup?: string;
            logFetched?: boolean;
            ownerID?: string;
            port?: number;
            purgeStatus?: {[key: string]: outputs.longhorn.v1beta2.EngineStatusPurgestatus};
            rebuildStatus?: {[key: string]: outputs.longhorn.v1beta2.EngineStatusRebuildstatus};
            replicaModeMap?: {[key: string]: string};
            restoreStatus?: {[key: string]: outputs.longhorn.v1beta2.EngineStatusRestorestatus};
            salvageExecuted?: boolean;
            snapshots?: {[key: string]: outputs.longhorn.v1beta2.EngineStatusSnapshots};
            snapshotsError?: string;
            started?: boolean;
            storageIP?: string;
        }

        export interface EngineStatusBackupstatus {
            backupURL?: string;
            error?: string;
            progress?: number;
            replicaAddress?: string;
            snapshotName?: string;
            state?: string;
        }

        export interface EngineStatusClonestatus {
            error?: string;
            fromReplicaAddress?: string;
            isCloning?: boolean;
            progress?: number;
            snapshotName?: string;
            state?: string;
        }

        export interface EngineStatusPurgestatus {
            error?: string;
            isPurging?: boolean;
            progress?: number;
            state?: string;
        }

        export interface EngineStatusRebuildstatus {
            error?: string;
            fromReplicaAddress?: string;
            isRebuilding?: boolean;
            progress?: number;
            state?: string;
        }

        export interface EngineStatusRestorestatus {
            backupURL?: string;
            currentRestoringBackup?: string;
            error?: string;
            filename?: string;
            isRestoring?: boolean;
            lastRestored?: string;
            progress?: number;
            state?: string;
        }

        export interface EngineStatusSnapshots {
            children?: {[key: string]: boolean};
            created?: string;
            labels?: {[key: string]: string};
            name?: string;
            parent?: string;
            removed?: boolean;
            size?: string;
            usercreated?: boolean;
        }

        /**
         * InstanceManagerSpec defines the desired state of the Longhorn instancer manager
         */
        export interface InstanceManagerSpec {
            /**
             * TODO: deprecate this field
             */
            engineImage?: string;
            image?: string;
            nodeID?: string;
            type?: string;
        }

        /**
         * InstanceManagerStatus defines the observed state of the Longhorn instance manager
         */
        export interface InstanceManagerStatus {
            apiMinVersion?: number;
            apiVersion?: number;
            currentState?: string;
            instances?: {[key: string]: outputs.longhorn.v1beta2.InstanceManagerStatusInstances};
            ip?: string;
            ownerID?: string;
            proxyApiMinVersion?: number;
            proxyApiVersion?: number;
        }

        export interface InstanceManagerStatusInstances {
            spec?: outputs.longhorn.v1beta2.InstanceManagerStatusInstancesSpec;
            status?: outputs.longhorn.v1beta2.InstanceManagerStatusInstancesStatus;
        }

        export interface InstanceManagerStatusInstancesSpec {
            name?: string;
        }

        export interface InstanceManagerStatusInstancesStatus {
            endpoint?: string;
            errorMsg?: string;
            listen?: string;
            portEnd?: number;
            portStart?: number;
            resourceVersion?: number;
            state?: string;
            type?: string;
        }

        /**
         * NodeSpec defines the desired state of the Longhorn node
         */
        export interface NodeSpec {
            allowScheduling?: boolean;
            disks?: {[key: string]: outputs.longhorn.v1beta2.NodeSpecDisks};
            engineManagerCPURequest?: number;
            evictionRequested?: boolean;
            name?: string;
            replicaManagerCPURequest?: number;
            tags?: string[];
        }

        export interface NodeSpecDisks {
            allowScheduling?: boolean;
            evictionRequested?: boolean;
            path?: string;
            storageReserved?: number;
            tags?: string[];
        }

        /**
         * NodeStatus defines the observed state of the Longhorn node
         */
        export interface NodeStatus {
            conditions?: outputs.longhorn.v1beta2.NodeStatusConditions[];
            diskStatus?: {[key: string]: outputs.longhorn.v1beta2.NodeStatusDiskstatus};
            region?: string;
            zone?: string;
        }

        export interface NodeStatusConditions {
            /**
             * Last time we probed the condition.
             */
            lastProbeTime?: string;
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * Human-readable message indicating details about last transition.
             */
            message?: string;
            /**
             * Unique, one-word, CamelCase reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status is the status of the condition. Can be True, False, Unknown.
             */
            status?: string;
            /**
             * Type is the type of the condition.
             */
            type?: string;
        }

        export interface NodeStatusDiskstatus {
            conditions?: outputs.longhorn.v1beta2.NodeStatusDiskstatusConditions[];
            diskUUID?: string;
            scheduledReplica?: {[key: string]: number};
            storageAvailable?: number;
            storageMaximum?: number;
            storageScheduled?: number;
        }

        export interface NodeStatusDiskstatusConditions {
            /**
             * Last time we probed the condition.
             */
            lastProbeTime?: string;
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * Human-readable message indicating details about last transition.
             */
            message?: string;
            /**
             * Unique, one-word, CamelCase reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status is the status of the condition. Can be True, False, Unknown.
             */
            status?: string;
            /**
             * Type is the type of the condition.
             */
            type?: string;
        }

        /**
         * OrphanSpec defines the desired state of the Longhorn orphaned data
         */
        export interface OrphanSpec {
            /**
             * The node ID on which the controller is responsible to reconcile this orphan CR.
             */
            nodeID?: string;
            /**
             * The type of the orphaned data. Can be "replica".
             */
            orphanType?: string;
            /**
             * The parameters of the orphaned data
             */
            parameters?: {[key: string]: string};
        }

        /**
         * OrphanStatus defines the observed state of the Longhorn orphaned data
         */
        export interface OrphanStatus {
            conditions?: outputs.longhorn.v1beta2.OrphanStatusConditions[];
            ownerID?: string;
        }

        export interface OrphanStatusConditions {
            /**
             * Last time we probed the condition.
             */
            lastProbeTime?: string;
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * Human-readable message indicating details about last transition.
             */
            message?: string;
            /**
             * Unique, one-word, CamelCase reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status is the status of the condition. Can be True, False, Unknown.
             */
            status?: string;
            /**
             * Type is the type of the condition.
             */
            type?: string;
        }

        /**
         * RecurringJobSpec defines the desired state of the Longhorn recurring job
         */
        export interface RecurringJobSpec {
            /**
             * The concurrency of taking the snapshot/backup.
             */
            concurrency?: number;
            /**
             * The cron setting.
             */
            cron?: string;
            /**
             * The recurring job group.
             */
            groups?: string[];
            /**
             * The label of the snapshot/backup.
             */
            labels?: {[key: string]: string};
            /**
             * The recurring job name.
             */
            name?: string;
            /**
             * The retain count of the snapshot/backup.
             */
            retain?: number;
            /**
             * The recurring job type. Can be "snapshot" or "backup".
             */
            task?: string;
        }

        /**
         * RecurringJobStatus defines the observed state of the Longhorn recurring job
         */
        export interface RecurringJobStatus {
            /**
             * The owner ID which is responsible to reconcile this recurring job CR.
             */
            ownerID?: string;
        }

        /**
         * ReplicaSpec defines the desired state of the Longhorn replica
         */
        export interface ReplicaSpec {
            active?: boolean;
            backingImage?: string;
            /**
             * Deprecated. Rename to BackingImage
             */
            baseImage?: string;
            dataDirectoryName?: string;
            /**
             * Deprecated
             */
            dataPath?: string;
            desireState?: string;
            diskID?: string;
            diskPath?: string;
            engineImage?: string;
            engineName?: string;
            failedAt?: string;
            hardNodeAffinity?: string;
            healthyAt?: string;
            logRequested?: boolean;
            nodeID?: string;
            rebuildRetryCount?: number;
            revisionCounterDisabled?: boolean;
            salvageRequested?: boolean;
            volumeName?: string;
            volumeSize?: string;
        }

        /**
         * ReplicaStatus defines the observed state of the Longhorn replica
         */
        export interface ReplicaStatus {
            currentImage?: string;
            currentState?: string;
            evictionRequested?: boolean;
            instanceManagerName?: string;
            ip?: string;
            logFetched?: boolean;
            ownerID?: string;
            port?: number;
            salvageExecuted?: boolean;
            started?: boolean;
            storageIP?: string;
        }

        /**
         * ShareManagerSpec defines the desired state of the Longhorn share manager
         */
        export interface ShareManagerSpec {
            image?: string;
        }

        /**
         * ShareManagerStatus defines the observed state of the Longhorn share manager
         */
        export interface ShareManagerStatus {
            endpoint?: string;
            ownerID?: string;
            state?: string;
        }

        /**
         * SnapshotSpec defines the desired state of Longhorn Snapshot
         */
        export interface SnapshotSpec {
            /**
             * require creating a new snapshot
             */
            createSnapshot?: boolean;
            /**
             * The labels of snapshot
             */
            labels?: {[key: string]: string};
            /**
             * the volume that this snapshot belongs to. This field is immutable after creation. Required
             */
            volume: string;
        }

        /**
         * SnapshotStatus defines the observed state of Longhorn Snapshot
         */
        export interface SnapshotStatus {
            children?: {[key: string]: boolean};
            creationTime?: string;
            error?: string;
            labels?: {[key: string]: string};
            markRemoved?: boolean;
            ownerID?: string;
            parent?: string;
            readyToUse?: boolean;
            restoreSize?: number;
            size?: number;
            userCreated?: boolean;
        }

        /**
         * VolumeSpec defines the desired state of the Longhorn volume
         */
        export interface VolumeSpec {
            Standby?: boolean;
            accessMode?: string;
            backingImage?: string;
            /**
             * Deprecated. Rename to BackingImage
             */
            baseImage?: string;
            dataLocality?: string;
            dataSource?: string;
            disableFrontend?: boolean;
            diskSelector?: string[];
            encrypted?: boolean;
            engineImage?: string;
            fromBackup?: string;
            frontend?: string;
            lastAttachedBy?: string;
            migratable?: boolean;
            migrationNodeID?: string;
            nodeID?: string;
            nodeSelector?: string[];
            numberOfReplicas?: number;
            /**
             * Deprecated. Replaced by a separate resource named "RecurringJob"
             */
            recurringJobs?: outputs.longhorn.v1beta2.VolumeSpecRecurringjobs[];
            replicaAutoBalance?: string;
            revisionCounterDisabled?: boolean;
            size?: string;
            staleReplicaTimeout?: number;
        }

        /**
         * VolumeRecurringJobSpec is a deprecated struct. TODO: Should be removed when recurringJobs gets removed from the volume       spec.
         */
        export interface VolumeSpecRecurringjobs {
            concurrency?: number;
            cron?: string;
            groups?: string[];
            labels?: {[key: string]: string};
            name?: string;
            retain?: number;
            task?: string;
        }

        /**
         * VolumeStatus defines the observed state of the Longhorn volume
         */
        export interface VolumeStatus {
            actualSize?: number;
            cloneStatus?: outputs.longhorn.v1beta2.VolumeStatusClonestatus;
            conditions?: outputs.longhorn.v1beta2.VolumeStatusConditions[];
            currentImage?: string;
            currentNodeID?: string;
            expansionRequired?: boolean;
            frontendDisabled?: boolean;
            isStandby?: boolean;
            kubernetesStatus?: outputs.longhorn.v1beta2.VolumeStatusKubernetesstatus;
            lastBackup?: string;
            lastBackupAt?: string;
            lastDegradedAt?: string;
            ownerID?: string;
            pendingNodeID?: string;
            remountRequestedAt?: string;
            restoreInitiated?: boolean;
            restoreRequired?: boolean;
            robustness?: string;
            shareEndpoint?: string;
            shareState?: string;
            state?: string;
        }

        export interface VolumeStatusClonestatus {
            snapshot?: string;
            sourceVolume?: string;
            state?: string;
        }

        export interface VolumeStatusConditions {
            /**
             * Last time we probed the condition.
             */
            lastProbeTime?: string;
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * Human-readable message indicating details about last transition.
             */
            message?: string;
            /**
             * Unique, one-word, CamelCase reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status is the status of the condition. Can be True, False, Unknown.
             */
            status?: string;
            /**
             * Type is the type of the condition.
             */
            type?: string;
        }

        export interface VolumeStatusKubernetesstatus {
            lastPVCRefAt?: string;
            lastPodRefAt?: string;
            /**
             * determine if PVC/Namespace is history or not
             */
            namespace?: string;
            pvName?: string;
            pvStatus?: string;
            pvcName?: string;
            /**
             * determine if Pod/Workload is history or not
             */
            workloadsStatus?: outputs.longhorn.v1beta2.VolumeStatusKubernetesstatusWorkloadsstatus[];
        }

        export interface VolumeStatusKubernetesstatusWorkloadsstatus {
            podName?: string;
            podStatus?: string;
            workloadName?: string;
            workloadType?: string;
        }

    }
}

export namespace metallb {
    export namespace v1alpha1 {
        /**
         * AddressPoolSpec defines the desired state of AddressPool.
         */
        export interface AddressPoolSpec {
            /**
             * A list of IP address ranges over which MetalLB has authority. You can list multiple ranges in a single pool, they will all share the same settings. Each range can be either a CIDR prefix, or an explicit start-end range of IPs.
             */
            addresses: string[];
            /**
             * AutoAssign flag used to prevent MetallB from automatic allocation for a pool.
             */
            autoAssign?: boolean;
            /**
             * When an IP is allocated from this pool, how should it be translated into BGP announcements?
             */
            bgpAdvertisements?: outputs.metallb.v1alpha1.AddressPoolSpecBgpadvertisements[];
            /**
             * Protocol can be used to select how the announcement is done.
             */
            protocol: string;
        }
        /**
         * addressPoolSpecProvideDefaults sets the appropriate defaults for AddressPoolSpec
         */
        export function addressPoolSpecProvideDefaults(val: AddressPoolSpec): AddressPoolSpec {
            return {
                ...val,
                autoAssign: (val.autoAssign) ?? true,
            };
        }

        export interface AddressPoolSpecBgpadvertisements {
            /**
             * The aggregation-length advertisement option lets you “roll up” the /32s into a larger prefix.
             */
            aggregationLength?: number;
            /**
             * Optional, defaults to 128 (i.e. no aggregation) if not specified.
             */
            aggregationLengthV6?: number;
            /**
             * BGP communities
             */
            communities?: string[];
            /**
             * BGP LOCAL_PREF attribute which is used by BGP best path algorithm, Path with higher localpref is preferred over one with lower localpref.
             */
            localPref?: number;
        }
        /**
         * addressPoolSpecBgpadvertisementsProvideDefaults sets the appropriate defaults for AddressPoolSpecBgpadvertisements
         */
        export function addressPoolSpecBgpadvertisementsProvideDefaults(val: AddressPoolSpecBgpadvertisements): AddressPoolSpecBgpadvertisements {
            return {
                ...val,
                aggregationLength: (val.aggregationLength) ?? 32,
                aggregationLengthV6: (val.aggregationLengthV6) ?? 128,
            };
        }

    }

    export namespace v1beta1 {
        /**
         * AddressPoolSpec defines the desired state of AddressPool.
         */
        export interface AddressPoolSpec {
            /**
             * A list of IP address ranges over which MetalLB has authority. You can list multiple ranges in a single pool, they will all share the same settings. Each range can be either a CIDR prefix, or an explicit start-end range of IPs.
             */
            addresses: string[];
            /**
             * AutoAssign flag used to prevent MetallB from automatic allocation for a pool.
             */
            autoAssign?: boolean;
            /**
             * Drives how an IP allocated from this pool should translated into BGP announcements.
             */
            bgpAdvertisements?: outputs.metallb.v1beta1.AddressPoolSpecBgpadvertisements[];
            /**
             * Protocol can be used to select how the announcement is done.
             */
            protocol: string;
        }
        /**
         * addressPoolSpecProvideDefaults sets the appropriate defaults for AddressPoolSpec
         */
        export function addressPoolSpecProvideDefaults(val: AddressPoolSpec): AddressPoolSpec {
            return {
                ...val,
                autoAssign: (val.autoAssign) ?? true,
            };
        }

        export interface AddressPoolSpecBgpadvertisements {
            /**
             * The aggregation-length advertisement option lets you “roll up” the /32s into a larger prefix.
             */
            aggregationLength?: number;
            /**
             * Optional, defaults to 128 (i.e. no aggregation) if not specified.
             */
            aggregationLengthV6?: number;
            /**
             * BGP communities to be associated with the given advertisement.
             */
            communities?: string[];
            /**
             * BGP LOCAL_PREF attribute which is used by BGP best path algorithm, Path with higher localpref is preferred over one with lower localpref.
             */
            localPref?: number;
        }
        /**
         * addressPoolSpecBgpadvertisementsProvideDefaults sets the appropriate defaults for AddressPoolSpecBgpadvertisements
         */
        export function addressPoolSpecBgpadvertisementsProvideDefaults(val: AddressPoolSpecBgpadvertisements): AddressPoolSpecBgpadvertisements {
            return {
                ...val,
                aggregationLength: (val.aggregationLength) ?? 32,
                aggregationLengthV6: (val.aggregationLengthV6) ?? 128,
            };
        }

        /**
         * BFDProfileSpec defines the desired state of BFDProfile.
         */
        export interface BFDProfileSpec {
            /**
             * Configures the detection multiplier to determine packet loss. The remote transmission interval will be multiplied by this value to determine the connection loss detection timer.
             */
            detectMultiplier?: number;
            /**
             * Configures the minimal echo receive transmission interval that this system is capable of handling in milliseconds. Defaults to 50ms
             */
            echoInterval?: number;
            /**
             * Enables or disables the echo transmission mode. This mode is disabled by default, and not supported on multi hops setups.
             */
            echoMode?: boolean;
            /**
             * For multi hop sessions only: configure the minimum expected TTL for an incoming BFD control packet.
             */
            minimumTtl?: number;
            /**
             * Mark session as passive: a passive session will not attempt to start the connection and will wait for control packets from peer before it begins replying.
             */
            passiveMode?: boolean;
            /**
             * The minimum interval that this system is capable of receiving control packets in milliseconds. Defaults to 300ms.
             */
            receiveInterval?: number;
            /**
             * The minimum transmission interval (less jitter) that this system wants to use to send BFD control packets in milliseconds. Defaults to 300ms
             */
            transmitInterval?: number;
        }

        /**
         * BGPAdvertisementSpec defines the desired state of BGPAdvertisement.
         */
        export interface BGPAdvertisementSpec {
            /**
             * The aggregation-length advertisement option lets you “roll up” the /32s into a larger prefix. Defaults to 32. Works for IPv4 addresses.
             */
            aggregationLength?: number;
            /**
             * The aggregation-length advertisement option lets you “roll up” the /128s into a larger prefix. Defaults to 128. Works for IPv6 addresses.
             */
            aggregationLengthV6?: number;
            /**
             * The BGP communities to be associated with the announcement. Each item can be a community of the form 1234:1234 or the name of an alias defined in the Community CRD.
             */
            communities?: string[];
            /**
             * A selector for the IPAddressPools which would get advertised via this advertisement. If no IPAddressPool is selected by this or by the list, the advertisement is applied to all the IPAddressPools.
             */
            ipAddressPoolSelectors?: outputs.metallb.v1beta1.BGPAdvertisementSpecIpaddresspoolselectors[];
            /**
             * The list of IPAddressPools to advertise via this advertisement, selected by name.
             */
            ipAddressPools?: string[];
            /**
             * The BGP LOCAL_PREF attribute which is used by BGP best path algorithm, Path with higher localpref is preferred over one with lower localpref.
             */
            localPref?: number;
            /**
             * NodeSelectors allows to limit the nodes to announce as next hops for the LoadBalancer IP. When empty, all the nodes having  are announced as next hops.
             */
            nodeSelectors?: outputs.metallb.v1beta1.BGPAdvertisementSpecNodeselectors[];
            /**
             * Peers limits the bgppeer to advertise the ips of the selected pools to. When empty, the loadbalancer IP is announced to all the BGPPeers configured.
             */
            peers?: string[];
        }
        /**
         * bgpadvertisementSpecProvideDefaults sets the appropriate defaults for BGPAdvertisementSpec
         */
        export function bgpadvertisementSpecProvideDefaults(val: BGPAdvertisementSpec): BGPAdvertisementSpec {
            return {
                ...val,
                aggregationLength: (val.aggregationLength) ?? 32,
                aggregationLengthV6: (val.aggregationLengthV6) ?? 128,
            };
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface BGPAdvertisementSpecIpaddresspoolselectors {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.metallb.v1beta1.BGPAdvertisementSpecIpaddresspoolselectorsMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface BGPAdvertisementSpecIpaddresspoolselectorsMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface BGPAdvertisementSpecNodeselectors {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.metallb.v1beta1.BGPAdvertisementSpecNodeselectorsMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface BGPAdvertisementSpecNodeselectorsMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * BGPPeerSpec defines the desired state of Peer.
         */
        export interface BGPPeerSpec {
            bfdProfile?: string;
            /**
             * EBGP peer is multi-hops away
             */
            ebgpMultiHop?: boolean;
            /**
             * Requested BGP hold time, per RFC4271.
             */
            holdTime?: string;
            /**
             * Requested BGP keepalive time, per RFC4271.
             */
            keepaliveTime?: string;
            /**
             * AS number to use for the local end of the session.
             */
            myASN: number;
            /**
             * Only connect to this peer on nodes that match one of these selectors.
             */
            nodeSelectors?: outputs.metallb.v1beta1.BGPPeerSpecNodeselectors[];
            /**
             * Authentication password for routers enforcing TCP MD5 authenticated sessions
             */
            password?: string;
            /**
             * AS number to expect from the remote end of the session.
             */
            peerASN: number;
            /**
             * Address to dial when establishing the session.
             */
            peerAddress: string;
            /**
             * Port to dial when establishing the session.
             */
            peerPort?: number;
            /**
             * BGP router ID to advertise to the peer
             */
            routerID?: string;
            /**
             * Source address to use when establishing the session.
             */
            sourceAddress?: string;
        }

        export interface BGPPeerSpecNodeselectors {
            matchExpressions?: outputs.metallb.v1beta1.BGPPeerSpecNodeselectorsMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BGPPeerSpecNodeselectorsMatchexpressions {
            key: string;
            operator: string;
            values: string[];
        }

        /**
         * CommunitySpec defines the desired state of Community.
         */
        export interface CommunitySpec {
            communities?: outputs.metallb.v1beta1.CommunitySpecCommunities[];
        }

        export interface CommunitySpecCommunities {
            /**
             * The name of the alias for the community.
             */
            name?: string;
            /**
             * The BGP community value corresponding to the given name.
             */
            value?: string;
        }

        /**
         * IPAddressPoolSpec defines the desired state of IPAddressPool.
         */
        export interface IPAddressPoolSpec {
            /**
             * A list of IP address ranges over which MetalLB has authority. You can list multiple ranges in a single pool, they will all share the same settings. Each range can be either a CIDR prefix, or an explicit start-end range of IPs.
             */
            addresses: string[];
            /**
             * AutoAssign flag used to prevent MetallB from automatic allocation for a pool.
             */
            autoAssign?: boolean;
            /**
             * AvoidBuggyIPs prevents addresses ending with .0 and .255 to be used by a pool.
             */
            avoidBuggyIPs?: boolean;
        }
        /**
         * ipaddressPoolSpecProvideDefaults sets the appropriate defaults for IPAddressPoolSpec
         */
        export function ipaddressPoolSpecProvideDefaults(val: IPAddressPoolSpec): IPAddressPoolSpec {
            return {
                ...val,
                autoAssign: (val.autoAssign) ?? true,
                avoidBuggyIPs: (val.avoidBuggyIPs) ?? false,
            };
        }

        /**
         * L2AdvertisementSpec defines the desired state of L2Advertisement.
         */
        export interface L2AdvertisementSpec {
            /**
             * A selector for the IPAddressPools which would get advertised via this advertisement. If no IPAddressPool is selected by this or by the list, the advertisement is applied to all the IPAddressPools.
             */
            ipAddressPoolSelectors?: outputs.metallb.v1beta1.L2AdvertisementSpecIpaddresspoolselectors[];
            /**
             * The list of IPAddressPools to advertise via this advertisement, selected by name.
             */
            ipAddressPools?: string[];
            /**
             * NodeSelectors allows to limit the nodes to announce as next hops for the LoadBalancer IP. When empty, all the nodes having  are announced as next hops.
             */
            nodeSelectors?: outputs.metallb.v1beta1.L2AdvertisementSpecNodeselectors[];
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface L2AdvertisementSpecIpaddresspoolselectors {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.metallb.v1beta1.L2AdvertisementSpecIpaddresspoolselectorsMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface L2AdvertisementSpecIpaddresspoolselectorsMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface L2AdvertisementSpecNodeselectors {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.metallb.v1beta1.L2AdvertisementSpecNodeselectorsMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface L2AdvertisementSpecNodeselectorsMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

    }

    export namespace v1beta2 {
        /**
         * BGPPeerSpec defines the desired state of Peer.
         */
        export interface BGPPeerSpec {
            /**
             * The name of the BFD Profile to be used for the BFD session associated to the BGP session. If not set, the BFD session won't be set up.
             */
            bfdProfile?: string;
            /**
             * To set if the BGPPeer is multi-hops away. Needed for FRR mode only.
             */
            ebgpMultiHop?: boolean;
            /**
             * Requested BGP hold time, per RFC4271.
             */
            holdTime?: string;
            /**
             * Requested BGP keepalive time, per RFC4271.
             */
            keepaliveTime?: string;
            /**
             * AS number to use for the local end of the session.
             */
            myASN: number;
            /**
             * Only connect to this peer on nodes that match one of these selectors.
             */
            nodeSelectors?: outputs.metallb.v1beta2.BGPPeerSpecNodeselectors[];
            /**
             * Authentication password for routers enforcing TCP MD5 authenticated sessions
             */
            password?: string;
            /**
             * passwordSecret is name of the authentication secret for BGP Peer. the secret must be of type "kubernetes.io/basic-auth", and created in the same namespace as the MetalLB deployment. The password is stored in the secret as the key "password".
             */
            passwordSecret?: outputs.metallb.v1beta2.BGPPeerSpecPasswordsecret;
            /**
             * AS number to expect from the remote end of the session.
             */
            peerASN: number;
            /**
             * Address to dial when establishing the session.
             */
            peerAddress: string;
            /**
             * Port to dial when establishing the session.
             */
            peerPort?: number;
            /**
             * BGP router ID to advertise to the peer
             */
            routerID?: string;
            /**
             * Source address to use when establishing the session.
             */
            sourceAddress?: string;
        }
        /**
         * bgppeerSpecProvideDefaults sets the appropriate defaults for BGPPeerSpec
         */
        export function bgppeerSpecProvideDefaults(val: BGPPeerSpec): BGPPeerSpec {
            return {
                ...val,
                peerPort: (val.peerPort) ?? 179,
            };
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface BGPPeerSpecNodeselectors {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.metallb.v1beta2.BGPPeerSpecNodeselectorsMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface BGPPeerSpecNodeselectorsMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * passwordSecret is name of the authentication secret for BGP Peer. the secret must be of type "kubernetes.io/basic-auth", and created in the same namespace as the MetalLB deployment. The password is stored in the secret as the key "password".
         */
        export interface BGPPeerSpecPasswordsecret {
            /**
             * Name is unique within a namespace to reference a secret resource.
             */
            name?: string;
            /**
             * Namespace defines the space within which the secret name must be unique.
             */
            namespace?: string;
        }

    }
}

export namespace monitoring {
    export namespace v1 {
        /**
         * Specification of the desired behavior of the Alertmanager cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface AlertmanagerSpec {
            /**
             * AdditionalPeers allows injecting a set of additional Alertmanagers to peer with to form a highly available cluster.
             */
            additionalPeers?: string[];
            /**
             * If specified, the pod's scheduling constraints.
             */
            affinity?: outputs.monitoring.v1.AlertmanagerSpecAffinity;
            /**
             * Namespaces to be selected for AlertmanagerConfig discovery. If nil, only check own namespace.
             */
            alertmanagerConfigNamespaceSelector?: outputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfignamespaceselector;
            /**
             * AlertmanagerConfigs to be selected for to merge and configure Alertmanager with.
             */
            alertmanagerConfigSelector?: outputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigselector;
            /**
             * EXPERIMENTAL: alertmanagerConfiguration specifies the global Alertmanager configuration. If defined, it takes precedence over the `configSecret` field. This field may change in future releases.
             */
            alertmanagerConfiguration?: outputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfiguration;
            /**
             * Base image that is used to deploy pods, without tag. Deprecated: use 'image' instead
             */
            baseImage?: string;
            /**
             * ClusterAdvertiseAddress is the explicit address to advertise in cluster. Needs to be provided for non RFC1918 [1] (public) addresses. [1] RFC1918: https://tools.ietf.org/html/rfc1918
             */
            clusterAdvertiseAddress?: string;
            /**
             * Interval between gossip attempts.
             */
            clusterGossipInterval?: string;
            /**
             * Timeout for cluster peering.
             */
            clusterPeerTimeout?: string;
            /**
             * Interval between pushpull attempts.
             */
            clusterPushpullInterval?: string;
            /**
             * ConfigMaps is a list of ConfigMaps in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The ConfigMaps are mounted into /etc/alertmanager/configmaps/<configmap-name>.
             */
            configMaps?: string[];
            /**
             * ConfigSecret is the name of a Kubernetes Secret in the same namespace as the Alertmanager object, which contains the configuration for this Alertmanager instance. If empty, it defaults to 'alertmanager-<alertmanager-name>'. 
             *  The Alertmanager configuration should be available under the `alertmanager.yaml` key. Additional keys from the original secret are copied to the generated secret. 
             *  If either the secret or the `alertmanager.yaml` key is missing, the operator provisions an Alertmanager configuration with one empty receiver (effectively dropping alert notifications).
             */
            configSecret?: string;
            /**
             * Containers allows injecting additional containers. This is meant to allow adding an authentication proxy to an Alertmanager pod. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `alertmanager` and `config-reloader`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
             */
            containers?: outputs.monitoring.v1.AlertmanagerSpecContainers[];
            /**
             * The external URL the Alertmanager instances will be available under. This is necessary to generate correct URLs. This is necessary if Alertmanager is not served from root of a DNS name.
             */
            externalUrl?: string;
            /**
             * ForceEnableClusterMode ensures Alertmanager does not deactivate the cluster mode when running with a single replica. Use case is e.g. spanning an Alertmanager cluster across Kubernetes clusters with a single replica in each.
             */
            forceEnableClusterMode?: boolean;
            /**
             * Pods' hostAliases configuration
             */
            hostAliases?: outputs.monitoring.v1.AlertmanagerSpecHostaliases[];
            /**
             * Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Alertmanager is being configured.
             */
            image?: string;
            /**
             * An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets?: outputs.monitoring.v1.AlertmanagerSpecImagepullsecrets[];
            /**
             * InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Alertmanager configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
             */
            initContainers?: outputs.monitoring.v1.AlertmanagerSpecInitcontainers[];
            /**
             * ListenLocal makes the Alertmanager server listen on loopback, so that it does not bind against the Pod IP. Note this is only for the Alertmanager UI, not the gossip communication.
             */
            listenLocal?: boolean;
            /**
             * Log format for Alertmanager to be configured with.
             */
            logFormat?: string;
            /**
             * Log level for Alertmanager to be configured with.
             */
            logLevel?: string;
            /**
             * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) This is an alpha field and requires enabling StatefulSetMinReadySeconds feature gate.
             */
            minReadySeconds?: number;
            /**
             * Define which Nodes the Pods are scheduled on.
             */
            nodeSelector?: {[key: string]: string};
            /**
             * If set to true all actions on the underlying managed objects are not goint to be performed, except for delete actions.
             */
            paused?: boolean;
            /**
             * PodMetadata configures Labels and Annotations which are propagated to the alertmanager pods.
             */
            podMetadata?: outputs.monitoring.v1.AlertmanagerSpecPodmetadata;
            /**
             * Port name used for the pods and governing service. This defaults to web
             */
            portName?: string;
            /**
             * Priority class assigned to the Pods
             */
            priorityClassName?: string;
            /**
             * Size is the expected size of the alertmanager cluster. The controller will eventually make the size of the running cluster equal to the expected size.
             */
            replicas?: number;
            /**
             * Define resources requests and limits for single Pods.
             */
            resources?: outputs.monitoring.v1.AlertmanagerSpecResources;
            /**
             * Time duration Alertmanager shall retain data for. Default is '120h', and must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).
             */
            retention?: string;
            /**
             * The route prefix Alertmanager registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.
             */
            routePrefix?: string;
            /**
             * Secrets is a list of Secrets in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The Secrets are mounted into /etc/alertmanager/secrets/<secret-name>.
             */
            secrets?: string[];
            /**
             * SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.
             */
            securityContext?: outputs.monitoring.v1.AlertmanagerSpecSecuritycontext;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.
             */
            serviceAccountName?: string;
            /**
             * SHA of Alertmanager container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use 'image' instead.  The image digest can be specified as part of the image URL.
             */
            sha?: string;
            /**
             * Storage is the definition of how storage will be used by the Alertmanager instances.
             */
            storage?: outputs.monitoring.v1.AlertmanagerSpecStorage;
            /**
             * Tag of Alertmanager container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set. Deprecated: use 'image' instead.  The image tag can be specified as part of the image URL.
             */
            tag?: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: outputs.monitoring.v1.AlertmanagerSpecTolerations[];
            /**
             * If specified, the pod's topology spread constraints.
             */
            topologySpreadConstraints?: outputs.monitoring.v1.AlertmanagerSpecTopologyspreadconstraints[];
            /**
             * Version the cluster should be on.
             */
            version?: string;
            /**
             * VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the alertmanager container, that are generated as a result of StorageSpec objects.
             */
            volumeMounts?: outputs.monitoring.v1.AlertmanagerSpecVolumemounts[];
            /**
             * Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.
             */
            volumes?: outputs.monitoring.v1.AlertmanagerSpecVolumes[];
        }

        /**
         * If specified, the pod's scheduling constraints.
         */
        export interface AlertmanagerSpecAffinity {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: outputs.monitoring.v1.AlertmanagerSpecAffinityNodeaffinity;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinity;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface AlertmanagerSpecAffinityNodeaffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.monitoring.v1.AlertmanagerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.monitoring.v1.AlertmanagerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface AlertmanagerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: outputs.monitoring.v1.AlertmanagerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface AlertmanagerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.monitoring.v1.AlertmanagerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.monitoring.v1.AlertmanagerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface AlertmanagerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.monitoring.v1.AlertmanagerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface AlertmanagerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.monitoring.v1.AlertmanagerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.monitoring.v1.AlertmanagerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface AlertmanagerSpecAffinityPodaffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface AlertmanagerSpecAffinityPodantiaffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Namespaces to be selected for AlertmanagerConfig discovery. If nil, only check own namespace.
         */
        export interface AlertmanagerSpecAlertmanagerconfignamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfignamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAlertmanagerconfignamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * AlertmanagerConfigs to be selected for to merge and configure Alertmanager with.
         */
        export interface AlertmanagerSpecAlertmanagerconfigselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAlertmanagerconfigselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * EXPERIMENTAL: alertmanagerConfiguration specifies the global Alertmanager configuration. If defined, it takes precedence over the `configSecret` field. This field may change in future releases.
         */
        export interface AlertmanagerSpecAlertmanagerconfiguration {
            /**
             * The name of the AlertmanagerConfig resource which is used to generate the global configuration. It must be defined in the same namespace as the Alertmanager object. The operator will not enforce a `namespace` label for routes and inhibition rules.
             */
            name?: string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface AlertmanagerSpecContainers {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: string[];
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: outputs.monitoring.v1.AlertmanagerSpecContainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: outputs.monitoring.v1.AlertmanagerSpecContainersEnvfrom[];
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: string;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: outputs.monitoring.v1.AlertmanagerSpecContainersLifecycle;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: outputs.monitoring.v1.AlertmanagerSpecContainersLivenessprobe;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: outputs.monitoring.v1.AlertmanagerSpecContainersPorts[];
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: outputs.monitoring.v1.AlertmanagerSpecContainersReadinessprobe;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: outputs.monitoring.v1.AlertmanagerSpecContainersResources;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: outputs.monitoring.v1.AlertmanagerSpecContainersSecuritycontext;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during "steady-state operation. This cannot be updated. More info: https"://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: outputs.monitoring.v1.AlertmanagerSpecContainersStartupprobe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: outputs.monitoring.v1.AlertmanagerSpecContainersVolumedevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: outputs.monitoring.v1.AlertmanagerSpecContainersVolumemounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface AlertmanagerSpecContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: string;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.monitoring.v1.AlertmanagerSpecContainersEnvValuefrom;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface AlertmanagerSpecContainersEnvValuefrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.monitoring.v1.AlertmanagerSpecContainersEnvValuefromConfigmapkeyref;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: outputs.monitoring.v1.AlertmanagerSpecContainersEnvValuefromFieldref;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: outputs.monitoring.v1.AlertmanagerSpecContainersEnvValuefromResourcefieldref;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: outputs.monitoring.v1.AlertmanagerSpecContainersEnvValuefromSecretkeyref;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface AlertmanagerSpecContainersEnvValuefromConfigmapkeyref {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface AlertmanagerSpecContainersEnvValuefromFieldref {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface AlertmanagerSpecContainersEnvValuefromResourcefieldref {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface AlertmanagerSpecContainersEnvValuefromSecretkeyref {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface AlertmanagerSpecContainersEnvfrom {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: outputs.monitoring.v1.AlertmanagerSpecContainersEnvfromConfigmapref;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: string;
            /**
             * The Secret to select from
             */
            secretRef?: outputs.monitoring.v1.AlertmanagerSpecContainersEnvfromSecretref;
        }

        /**
         * The ConfigMap to select from
         */
        export interface AlertmanagerSpecContainersEnvfromConfigmapref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface AlertmanagerSpecContainersEnvfromSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: boolean;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface AlertmanagerSpecContainersLifecycle {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: outputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePoststart;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: outputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePrestop;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface AlertmanagerSpecContainersLifecyclePoststart {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePoststartExec;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePoststartHttpget;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: outputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePoststartTcpsocket;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecContainersLifecyclePoststartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecContainersLifecyclePoststartHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePoststartHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecContainersLifecyclePoststartHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface AlertmanagerSpecContainersLifecyclePoststartTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface AlertmanagerSpecContainersLifecyclePrestop {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePrestopExec;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePrestopHttpget;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: outputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePrestopTcpsocket;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecContainersLifecyclePrestopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecContainersLifecyclePrestopHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePrestopHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecContainersLifecyclePrestopHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface AlertmanagerSpecContainersLifecyclePrestopTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface AlertmanagerSpecContainersLivenessprobe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.AlertmanagerSpecContainersLivenessprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.monitoring.v1.AlertmanagerSpecContainersLivenessprobeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.AlertmanagerSpecContainersLivenessprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.monitoring.v1.AlertmanagerSpecContainersLivenessprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecContainersLivenessprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface AlertmanagerSpecContainersLivenessprobeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecContainersLivenessprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.AlertmanagerSpecContainersLivenessprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecContainersLivenessprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface AlertmanagerSpecContainersLivenessprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface AlertmanagerSpecContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: string;
        }
        /**
         * alertmanagerSpecContainersPortsProvideDefaults sets the appropriate defaults for AlertmanagerSpecContainersPorts
         */
        export function alertmanagerSpecContainersPortsProvideDefaults(val: AlertmanagerSpecContainersPorts): AlertmanagerSpecContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface AlertmanagerSpecContainersReadinessprobe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.AlertmanagerSpecContainersReadinessprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.monitoring.v1.AlertmanagerSpecContainersReadinessprobeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.AlertmanagerSpecContainersReadinessprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.monitoring.v1.AlertmanagerSpecContainersReadinessprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecContainersReadinessprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface AlertmanagerSpecContainersReadinessprobeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecContainersReadinessprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.AlertmanagerSpecContainersReadinessprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecContainersReadinessprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface AlertmanagerSpecContainersReadinessprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface AlertmanagerSpecContainersResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface AlertmanagerSpecContainersSecuritycontext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: boolean;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: outputs.monitoring.v1.AlertmanagerSpecContainersSecuritycontextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: number;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: outputs.monitoring.v1.AlertmanagerSpecContainersSecuritycontextSelinuxoptions;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: outputs.monitoring.v1.AlertmanagerSpecContainersSecuritycontextSeccompprofile;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: outputs.monitoring.v1.AlertmanagerSpecContainersSecuritycontextWindowsoptions;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface AlertmanagerSpecContainersSecuritycontextCapabilities {
            /**
             * Added capabilities
             */
            add?: string[];
            /**
             * Removed capabilities
             */
            drop?: string[];
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface AlertmanagerSpecContainersSecuritycontextSeccompprofile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface AlertmanagerSpecContainersSecuritycontextSelinuxoptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: string;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface AlertmanagerSpecContainersSecuritycontextWindowsoptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during "steady-state operation. This cannot be updated. More info: https"://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface AlertmanagerSpecContainersStartupprobe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.AlertmanagerSpecContainersStartupprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.monitoring.v1.AlertmanagerSpecContainersStartupprobeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.AlertmanagerSpecContainersStartupprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.monitoring.v1.AlertmanagerSpecContainersStartupprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecContainersStartupprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface AlertmanagerSpecContainersStartupprobeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecContainersStartupprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.AlertmanagerSpecContainersStartupprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecContainersStartupprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface AlertmanagerSpecContainersStartupprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface AlertmanagerSpecContainersVolumedevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface AlertmanagerSpecContainersVolumemounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: string;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        export interface AlertmanagerSpecHostaliases {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface AlertmanagerSpecImagepullsecrets {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface AlertmanagerSpecInitcontainers {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: string[];
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersEnvfrom[];
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: string;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecycle;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersLivenessprobe;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersPorts[];
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersReadinessprobe;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersResources;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersSecuritycontext;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during "steady-state operation. This cannot be updated. More info: https"://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersStartupprobe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersVolumedevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersVolumemounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface AlertmanagerSpecInitcontainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: string;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersEnvValuefrom;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface AlertmanagerSpecInitcontainersEnvValuefrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersEnvValuefromConfigmapkeyref;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersEnvValuefromFieldref;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersEnvValuefromResourcefieldref;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersEnvValuefromSecretkeyref;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface AlertmanagerSpecInitcontainersEnvValuefromConfigmapkeyref {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface AlertmanagerSpecInitcontainersEnvValuefromFieldref {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface AlertmanagerSpecInitcontainersEnvValuefromResourcefieldref {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface AlertmanagerSpecInitcontainersEnvValuefromSecretkeyref {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface AlertmanagerSpecInitcontainersEnvfrom {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersEnvfromConfigmapref;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: string;
            /**
             * The Secret to select from
             */
            secretRef?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersEnvfromSecretref;
        }

        /**
         * The ConfigMap to select from
         */
        export interface AlertmanagerSpecInitcontainersEnvfromConfigmapref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface AlertmanagerSpecInitcontainersEnvfromSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: boolean;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface AlertmanagerSpecInitcontainersLifecycle {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePoststart;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePrestop;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePoststart {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePoststartExec;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePoststartHttpget;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePoststartTcpsocket;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePoststartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePoststartHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePoststartHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePoststartTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePrestop {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePrestopExec;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePrestopHttpget;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePrestopTcpsocket;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePrestopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePrestopHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePrestopHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePrestopTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface AlertmanagerSpecInitcontainersLivenessprobe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersLivenessprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersLivenessprobeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersLivenessprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersLivenessprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecInitcontainersLivenessprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface AlertmanagerSpecInitcontainersLivenessprobeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecInitcontainersLivenessprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersLivenessprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecInitcontainersLivenessprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface AlertmanagerSpecInitcontainersLivenessprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface AlertmanagerSpecInitcontainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: string;
        }
        /**
         * alertmanagerSpecInitcontainersPortsProvideDefaults sets the appropriate defaults for AlertmanagerSpecInitcontainersPorts
         */
        export function alertmanagerSpecInitcontainersPortsProvideDefaults(val: AlertmanagerSpecInitcontainersPorts): AlertmanagerSpecInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface AlertmanagerSpecInitcontainersReadinessprobe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersReadinessprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersReadinessprobeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersReadinessprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersReadinessprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecInitcontainersReadinessprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface AlertmanagerSpecInitcontainersReadinessprobeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecInitcontainersReadinessprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersReadinessprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecInitcontainersReadinessprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface AlertmanagerSpecInitcontainersReadinessprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface AlertmanagerSpecInitcontainersResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface AlertmanagerSpecInitcontainersSecuritycontext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: boolean;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersSecuritycontextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: number;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersSecuritycontextSelinuxoptions;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersSecuritycontextSeccompprofile;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersSecuritycontextWindowsoptions;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface AlertmanagerSpecInitcontainersSecuritycontextCapabilities {
            /**
             * Added capabilities
             */
            add?: string[];
            /**
             * Removed capabilities
             */
            drop?: string[];
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface AlertmanagerSpecInitcontainersSecuritycontextSeccompprofile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface AlertmanagerSpecInitcontainersSecuritycontextSelinuxoptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: string;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface AlertmanagerSpecInitcontainersSecuritycontextWindowsoptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during "steady-state operation. This cannot be updated. More info: https"://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface AlertmanagerSpecInitcontainersStartupprobe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersStartupprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersStartupprobeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersStartupprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersStartupprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecInitcontainersStartupprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface AlertmanagerSpecInitcontainersStartupprobeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecInitcontainersStartupprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.AlertmanagerSpecInitcontainersStartupprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecInitcontainersStartupprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface AlertmanagerSpecInitcontainersStartupprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface AlertmanagerSpecInitcontainersVolumedevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface AlertmanagerSpecInitcontainersVolumemounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: string;
        }

        /**
         * PodMetadata configures Labels and Annotations which are propagated to the alertmanager pods.
         */
        export interface AlertmanagerSpecPodmetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
             */
            name?: string;
        }

        /**
         * Define resources requests and limits for single Pods.
         */
        export interface AlertmanagerSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.
         */
        export interface AlertmanagerSpecSecuritycontext {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup?: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy?: string;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: number;
            /**
             * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: outputs.monitoring.v1.AlertmanagerSpecSecuritycontextSelinuxoptions;
            /**
             * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: outputs.monitoring.v1.AlertmanagerSpecSecuritycontextSeccompprofile;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups?: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls?: outputs.monitoring.v1.AlertmanagerSpecSecuritycontextSysctls[];
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: outputs.monitoring.v1.AlertmanagerSpecSecuritycontextWindowsoptions;
        }

        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface AlertmanagerSpecSecuritycontextSeccompprofile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface AlertmanagerSpecSecuritycontextSelinuxoptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface AlertmanagerSpecSecuritycontextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface AlertmanagerSpecSecuritycontextWindowsoptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: string;
        }

        /**
         * Storage is the definition of how storage will be used by the Alertmanager instances.
         */
        export interface AlertmanagerSpecStorage {
            /**
             * Deprecated: subPath usage will be disabled by default in a future release, this option will become unnecessary. DisableMountSubPath allows to remove any subPath usage in volume mounts.
             */
            disableMountSubPath?: boolean;
            /**
             * EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
             */
            emptyDir?: outputs.monitoring.v1.AlertmanagerSpecStorageEmptydir;
            /**
             * EphemeralVolumeSource to be used by the Prometheus StatefulSets. This is a beta field in k8s 1.21, for lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
             */
            ephemeral?: outputs.monitoring.v1.AlertmanagerSpecStorageEphemeral;
            /**
             * A PVC spec to be used by the Prometheus StatefulSets.
             */
            volumeClaimTemplate?: outputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplate;
        }

        /**
         * EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
         */
        export interface AlertmanagerSpecStorageEmptydir {
            /**
             * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium?: string;
            /**
             * Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit?: number | string;
        }

        /**
         * EphemeralVolumeSource to be used by the Prometheus StatefulSets. This is a beta field in k8s 1.21, for lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
         */
        export interface AlertmanagerSpecStorageEphemeral {
            /**
             * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
             *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
             *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
             *  Required, must not be nil.
             */
            volumeClaimTemplate?: outputs.monitoring.v1.AlertmanagerSpecStorageEphemeralVolumeclaimtemplate;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         *  Required, must not be nil.
         */
        export interface AlertmanagerSpecStorageEphemeralVolumeclaimtemplate {
            /**
             * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
             */
            metadata?: {[key: string]: any};
            /**
             * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
             */
            spec: outputs.monitoring.v1.AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpec;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        export interface AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpec {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: string[];
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
             */
            dataSource?: outputs.monitoring.v1.AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecDatasource;
            /**
             * Specifies the object from which to populate the volume with data, if a "non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef": * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: outputs.monitoring.v1.AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecDatasourceref;
            /**
             * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: outputs.monitoring.v1.AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecResources;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: outputs.monitoring.v1.AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecSelector;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: string;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: string;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecDatasource {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a "non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef": * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecDatasourceref {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A PVC spec to be used by the Prometheus StatefulSets.
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplate {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: string;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * EmbeddedMetadata contains metadata relevant to an EmbeddedResource.
             */
            metadata?: outputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplateMetadata;
            /**
             * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            spec?: outputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplateSpec;
            /**
             * Status represents the current information/status of a persistent volume claim. R"ead-only. More info: https"://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            status?: outputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplateStatus;
        }

        /**
         * EmbeddedMetadata contains metadata relevant to an EmbeddedResource.
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplateMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
             */
            name?: string;
        }

        /**
         * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplateSpec {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: string[];
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
             */
            dataSource?: outputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplateSpecDatasource;
            /**
             * Specifies the object from which to populate the volume with data, if a "non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef": * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: outputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplateSpecDatasourceref;
            /**
             * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: outputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplateSpecResources;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: outputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplateSpecSelector;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: string;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: string;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplateSpecDatasource {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a "non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef": * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplateSpecDatasourceref {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplateSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplateSpecSelectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplateSpecSelectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Status represents the current information/status of a persistent volume claim. R"ead-only. More info: https"://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplateStatus {
            /**
             * AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: string[];
            /**
             * The storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
             */
            allocatedResources?: {[key: string]: number | string};
            /**
             * Represents the actual resources of the underlying volume.
             */
            capacity?: {[key: string]: number | string};
            /**
             * Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
             */
            conditions?: outputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplateStatusConditions[];
            /**
             * Phase represents the current phase of PersistentVolumeClaim.
             */
            phase?: string;
            /**
             * ResizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
             */
            resizeStatus?: string;
        }

        /**
         * PersistentVolumeClaimCondition contails details about state of pvc
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplateStatusConditions {
            /**
             * Last time we probed the condition.
             */
            lastProbeTime?: string;
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * Human-readable message indicating details about last transition.
             */
            message?: string;
            /**
             * Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
             */
            reason?: string;
            status: string;
            /**
             * PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
             */
            type: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface AlertmanagerSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: string;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface AlertmanagerSpecTopologyspreadconstraints {
            /**
             * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
             */
            labelSelector?: outputs.monitoring.v1.AlertmanagerSpecTopologyspreadconstraintsLabelselector;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       |  if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: string;
        }

        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        export interface AlertmanagerSpecTopologyspreadconstraintsLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.AlertmanagerSpecTopologyspreadconstraintsLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecTopologyspreadconstraintsLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface AlertmanagerSpecVolumemounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: string;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface AlertmanagerSpecVolumes {
            /**
             * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            awsElasticBlockStore?: outputs.monitoring.v1.AlertmanagerSpecVolumesAwselasticblockstore;
            /**
             * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
             */
            azureDisk?: outputs.monitoring.v1.AlertmanagerSpecVolumesAzuredisk;
            /**
             * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
             */
            azureFile?: outputs.monitoring.v1.AlertmanagerSpecVolumesAzurefile;
            /**
             * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
             */
            cephfs?: outputs.monitoring.v1.AlertmanagerSpecVolumesCephfs;
            /**
             * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            cinder?: outputs.monitoring.v1.AlertmanagerSpecVolumesCinder;
            /**
             * ConfigMap represents a configMap that should populate this volume
             */
            configMap?: outputs.monitoring.v1.AlertmanagerSpecVolumesConfigmap;
            /**
             * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
             */
            csi?: outputs.monitoring.v1.AlertmanagerSpecVolumesCsi;
            /**
             * DownwardAPI represents downward API about the pod that should populate this volume
             */
            downwardAPI?: outputs.monitoring.v1.AlertmanagerSpecVolumesDownwardapi;
            /**
             * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            emptyDir?: outputs.monitoring.v1.AlertmanagerSpecVolumesEmptydir;
            /**
             * Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
             *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
             *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
             *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
             *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
             */
            ephemeral?: outputs.monitoring.v1.AlertmanagerSpecVolumesEphemeral;
            /**
             * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
             */
            fc?: outputs.monitoring.v1.AlertmanagerSpecVolumesFc;
            /**
             * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
             */
            flexVolume?: outputs.monitoring.v1.AlertmanagerSpecVolumesFlexvolume;
            /**
             * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
             */
            flocker?: outputs.monitoring.v1.AlertmanagerSpecVolumesFlocker;
            /**
             * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            gcePersistentDisk?: outputs.monitoring.v1.AlertmanagerSpecVolumesGcepersistentdisk;
            /**
             * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
             */
            gitRepo?: outputs.monitoring.v1.AlertmanagerSpecVolumesGitrepo;
            /**
             * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
             */
            glusterfs?: outputs.monitoring.v1.AlertmanagerSpecVolumesGlusterfs;
            /**
             * HostPath represents a "pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https"://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
             */
            hostPath?: outputs.monitoring.v1.AlertmanagerSpecVolumesHostpath;
            /**
             * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
             */
            iscsi?: outputs.monitoring.v1.AlertmanagerSpecVolumesIscsi;
            /**
             * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            nfs?: outputs.monitoring.v1.AlertmanagerSpecVolumesNfs;
            /**
             * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            persistentVolumeClaim?: outputs.monitoring.v1.AlertmanagerSpecVolumesPersistentvolumeclaim;
            /**
             * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
             */
            photonPersistentDisk?: outputs.monitoring.v1.AlertmanagerSpecVolumesPhotonpersistentdisk;
            /**
             * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
             */
            portworxVolume?: outputs.monitoring.v1.AlertmanagerSpecVolumesPortworxvolume;
            /**
             * Items for all in one resources secrets, configmaps, and downward API
             */
            projected?: outputs.monitoring.v1.AlertmanagerSpecVolumesProjected;
            /**
             * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
             */
            quobyte?: outputs.monitoring.v1.AlertmanagerSpecVolumesQuobyte;
            /**
             * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
             */
            rbd?: outputs.monitoring.v1.AlertmanagerSpecVolumesRbd;
            /**
             * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
             */
            scaleIO?: outputs.monitoring.v1.AlertmanagerSpecVolumesScaleio;
            /**
             * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secret?: outputs.monitoring.v1.AlertmanagerSpecVolumesSecret;
            /**
             * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
             */
            storageos?: outputs.monitoring.v1.AlertmanagerSpecVolumesStorageos;
            /**
             * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
             */
            vsphereVolume?: outputs.monitoring.v1.AlertmanagerSpecVolumesVspherevolume;
        }

        /**
         * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface AlertmanagerSpecVolumesAwselasticblockstore {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: string;
            /**
             * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition?: number;
            /**
             * Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly?: boolean;
            /**
             * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }

        /**
         * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        export interface AlertmanagerSpecVolumesAzuredisk {
            /**
             * Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode?: string;
            /**
             * The Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * The URI the data disk in the blob storage
             */
            diskURI: string;
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: string;
            /**
             * Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind?: string;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
        }

        /**
         * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        export interface AlertmanagerSpecVolumesAzurefile {
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
            /**
             * the name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * Share Name
             */
            shareName: string;
        }

        /**
         * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        export interface AlertmanagerSpecVolumesCephfs {
            /**
             * Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path?: string;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly?: boolean;
            /**
             * Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile?: string;
            /**
             * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretRef?: outputs.monitoring.v1.AlertmanagerSpecVolumesCephfsSecretref;
            /**
             * Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user?: string;
        }

        /**
         * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface AlertmanagerSpecVolumesCephfsSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface AlertmanagerSpecVolumesCinder {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType?: string;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly?: boolean;
            /**
             * Optional: points to a secret object containing parameters used to connect to OpenStack.
             */
            secretRef?: outputs.monitoring.v1.AlertmanagerSpecVolumesCinderSecretref;
            /**
             * volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }

        /**
         * Optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        export interface AlertmanagerSpecVolumesCinderSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * ConfigMap represents a configMap that should populate this volume
         */
        export interface AlertmanagerSpecVolumesConfigmap {
            /**
             * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: number;
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: outputs.monitoring.v1.AlertmanagerSpecVolumesConfigmapItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface AlertmanagerSpecVolumesConfigmapItems {
            /**
             * The key to project.
             */
            key: string;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: number;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }

        /**
         * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        export interface AlertmanagerSpecVolumesCsi {
            /**
             * Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType?: string;
            /**
             * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
             */
            nodePublishSecretRef?: outputs.monitoring.v1.AlertmanagerSpecVolumesCsiNodepublishsecretref;
            /**
             * Specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly?: boolean;
            /**
             * VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes?: {[key: string]: string};
        }

        /**
         * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        export interface AlertmanagerSpecVolumesCsiNodepublishsecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * DownwardAPI represents downward API about the pod that should populate this volume
         */
        export interface AlertmanagerSpecVolumesDownwardapi {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: number;
            /**
             * Items is a list of downward API volume file
             */
            items?: outputs.monitoring.v1.AlertmanagerSpecVolumesDownwardapiItems[];
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface AlertmanagerSpecVolumesDownwardapiItems {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: outputs.monitoring.v1.AlertmanagerSpecVolumesDownwardapiItemsFieldref;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: outputs.monitoring.v1.AlertmanagerSpecVolumesDownwardapiItemsResourcefieldref;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface AlertmanagerSpecVolumesDownwardapiItemsFieldref {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface AlertmanagerSpecVolumesDownwardapiItemsResourcefieldref {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface AlertmanagerSpecVolumesEmptydir {
            /**
             * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium?: string;
            /**
             * Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit?: number | string;
        }

        /**
         * Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        export interface AlertmanagerSpecVolumesEphemeral {
            /**
             * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
             *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
             *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
             *  Required, must not be nil.
             */
            volumeClaimTemplate?: outputs.monitoring.v1.AlertmanagerSpecVolumesEphemeralVolumeclaimtemplate;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         *  Required, must not be nil.
         */
        export interface AlertmanagerSpecVolumesEphemeralVolumeclaimtemplate {
            /**
             * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
             */
            metadata?: {[key: string]: any};
            /**
             * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
             */
            spec: outputs.monitoring.v1.AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpec;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        export interface AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpec {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: string[];
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
             */
            dataSource?: outputs.monitoring.v1.AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecDatasource;
            /**
             * Specifies the object from which to populate the volume with data, if a "non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef": * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: outputs.monitoring.v1.AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecDatasourceref;
            /**
             * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: outputs.monitoring.v1.AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecResources;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: outputs.monitoring.v1.AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecSelector;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: string;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: string;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecDatasource {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a "non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef": * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecDatasourceref {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface AlertmanagerSpecVolumesFc {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: string;
            /**
             * Optional: FC target lun number
             */
            lun?: number;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
            /**
             * Optional: FC target worldwide names (WWNs)
             */
            targetWWNs?: string[];
            /**
             * Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids?: string[];
        }

        /**
         * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        export interface AlertmanagerSpecVolumesFlexvolume {
            /**
             * Driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType?: string;
            /**
             * Optional: Extra command options if any.
             */
            options?: {[key: string]: string};
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
            /**
             * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
             */
            secretRef?: outputs.monitoring.v1.AlertmanagerSpecVolumesFlexvolumeSecretref;
        }

        /**
         * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        export interface AlertmanagerSpecVolumesFlexvolumeSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        export interface AlertmanagerSpecVolumesFlocker {
            /**
             * Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName?: string;
            /**
             * UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID?: string;
        }

        /**
         * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface AlertmanagerSpecVolumesGcepersistentdisk {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: string;
            /**
             * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition?: number;
            /**
             * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly?: boolean;
        }

        /**
         * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        export interface AlertmanagerSpecVolumesGitrepo {
            /**
             * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory?: string;
            /**
             * Repository URL
             */
            repository: string;
            /**
             * Commit hash for the specified revision.
             */
            revision?: string;
        }

        /**
         * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface AlertmanagerSpecVolumesGlusterfs {
            /**
             * EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * ReadOnly here will force the Glusterfs volume to be mounted with "read-only permissions. Defaults to false. More info: https"://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly?: boolean;
        }

        /**
         * HostPath represents a "pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https"://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        export interface AlertmanagerSpecVolumesHostpath {
            /**
             * Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type?: string;
        }

        /**
         * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface AlertmanagerSpecVolumesIscsi {
            /**
             * whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery?: boolean;
            /**
             * whether support iSCSI Session CHAP authentication
             */
            chapAuthSession?: boolean;
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: string;
            /**
             * Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName?: string;
            /**
             * Target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface?: string;
            /**
             * iSCSI Target Lun number.
             */
            lun: number;
            /**
             * iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals?: string[];
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly?: boolean;
            /**
             * CHAP Secret for iSCSI target and initiator authentication
             */
            secretRef?: outputs.monitoring.v1.AlertmanagerSpecVolumesIscsiSecretref;
            /**
             * iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }

        /**
         * CHAP Secret for iSCSI target and initiator authentication
         */
        export interface AlertmanagerSpecVolumesIscsiSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface AlertmanagerSpecVolumesNfs {
            /**
             * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * ReadOnly here will force the NFS export to be mounted with "read-only permissions. Defaults to false. More info: https"://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly?: boolean;
            /**
             * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface AlertmanagerSpecVolumesPersistentvolumeclaim {
            /**
             * ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly?: boolean;
        }

        /**
         * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        export interface AlertmanagerSpecVolumesPhotonpersistentdisk {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: string;
            /**
             * ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }

        /**
         * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        export interface AlertmanagerSpecVolumesPortworxvolume {
            /**
             * FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: string;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
            /**
             * VolumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }

        /**
         * Items for all in one resources secrets, configmaps, and downward API
         */
        export interface AlertmanagerSpecVolumesProjected {
            /**
             * Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: number;
            /**
             * list of volume projections
             */
            sources?: outputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSources[];
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface AlertmanagerSpecVolumesProjectedSources {
            /**
             * information about the configMap data to project
             */
            configMap?: outputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSourcesConfigmap;
            /**
             * information about the downwardAPI data to project
             */
            downwardAPI?: outputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSourcesDownwardapi;
            /**
             * information about the secret data to project
             */
            secret?: outputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSourcesSecret;
            /**
             * information about the serviceAccountToken data to project
             */
            serviceAccountToken?: outputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSourcesServiceaccounttoken;
        }

        /**
         * information about the configMap data to project
         */
        export interface AlertmanagerSpecVolumesProjectedSourcesConfigmap {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: outputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSourcesConfigmapItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface AlertmanagerSpecVolumesProjectedSourcesConfigmapItems {
            /**
             * The key to project.
             */
            key: string;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: number;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }

        /**
         * information about the downwardAPI data to project
         */
        export interface AlertmanagerSpecVolumesProjectedSourcesDownwardapi {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: outputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSourcesDownwardapiItems[];
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface AlertmanagerSpecVolumesProjectedSourcesDownwardapiItems {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: outputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSourcesDownwardapiItemsFieldref;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: outputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSourcesDownwardapiItemsResourcefieldref;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface AlertmanagerSpecVolumesProjectedSourcesDownwardapiItemsFieldref {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface AlertmanagerSpecVolumesProjectedSourcesDownwardapiItemsResourcefieldref {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * information about the secret data to project
         */
        export interface AlertmanagerSpecVolumesProjectedSourcesSecret {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: outputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSourcesSecretItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface AlertmanagerSpecVolumesProjectedSourcesSecretItems {
            /**
             * The key to project.
             */
            key: string;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: number;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }

        /**
         * information about the serviceAccountToken data to project
         */
        export interface AlertmanagerSpecVolumesProjectedSourcesServiceaccounttoken {
            /**
             * Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: string;
            /**
             * ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: number;
            /**
             * Path is the path relative to the mount point of the file to project the token into.
             */
            path: string;
        }

        /**
         * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        export interface AlertmanagerSpecVolumesQuobyte {
            /**
             * Group to map volume access to Default is no group
             */
            group?: string;
            /**
             * ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly?: boolean;
            /**
             * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: string;
            /**
             * Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant?: string;
            /**
             * User to map volume access to Defaults to serivceaccount user
             */
            user?: string;
            /**
             * Volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }

        /**
         * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface AlertmanagerSpecVolumesRbd {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: string;
            /**
             * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring?: string;
            /**
             * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool?: string;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly?: boolean;
            /**
             * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            secretRef?: outputs.monitoring.v1.AlertmanagerSpecVolumesRbdSecretref;
            /**
             * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user?: string;
        }

        /**
         * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface AlertmanagerSpecVolumesRbdSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        export interface AlertmanagerSpecVolumesScaleio {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType?: string;
            /**
             * The host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * The name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain?: string;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
            /**
             * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
             */
            secretRef: outputs.monitoring.v1.AlertmanagerSpecVolumesScaleioSecretref;
            /**
             * Flag to enable/disable SSL communication with Gateway, default false
             */
            sslEnabled?: boolean;
            /**
             * Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode?: string;
            /**
             * The ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool?: string;
            /**
             * The name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * The name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName?: string;
        }

        /**
         * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        export interface AlertmanagerSpecVolumesScaleioSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface AlertmanagerSpecVolumesSecret {
            /**
             * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: number;
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: outputs.monitoring.v1.AlertmanagerSpecVolumesSecretItems[];
            /**
             * Specify whether the Secret or its keys must be defined
             */
            optional?: boolean;
            /**
             * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface AlertmanagerSpecVolumesSecretItems {
            /**
             * The key to project.
             */
            key: string;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: number;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }

        /**
         * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        export interface AlertmanagerSpecVolumesStorageos {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: string;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
            /**
             * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
             */
            secretRef?: outputs.monitoring.v1.AlertmanagerSpecVolumesStorageosSecretref;
            /**
             * VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName?: string;
            /**
             * VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace?: string;
        }

        /**
         * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        export interface AlertmanagerSpecVolumesStorageosSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        export interface AlertmanagerSpecVolumesVspherevolume {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: string;
            /**
             * Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID?: string;
            /**
             * Storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName?: string;
            /**
             * Path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }

        /**
         * Most recent observed status of the Alertmanager cluster. R"ead-only. Not included when requesting from the apiserver, only from the Prometheus Operator API itself. More info: https"://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface AlertmanagerStatus {
            /**
             * Total number of available pods (ready for at least minReadySeconds) targeted by this Alertmanager cluster.
             */
            availableReplicas: number;
            /**
             * Represents whether any actions on the underlying managed objects are being performed. Only delete actions will be performed.
             */
            paused: boolean;
            /**
             * Total number of non-terminated pods targeted by this Alertmanager cluster (their labels match the selector).
             */
            replicas: number;
            /**
             * Total number of unavailable pods targeted by this Alertmanager cluster.
             */
            unavailableReplicas: number;
            /**
             * Total number of non-terminated pods targeted by this Alertmanager cluster that have the desired version spec.
             */
            updatedReplicas: number;
        }

        /**
         * Specification of desired Pod selection for target discovery by Prometheus.
         */
        export interface PodMonitorSpec {
            /**
             * Attaches node metadata to discovered targets. Only valid for role: pod. Only valid in Prometheus versions 2.35.0 and newer.
             */
            attachMetadata?: outputs.monitoring.v1.PodMonitorSpecAttachmetadata;
            /**
             * The label to use to retrieve the job name from.
             */
            jobLabel?: string;
            /**
             * Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
             */
            labelLimit?: number;
            /**
             * Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
             */
            labelNameLengthLimit?: number;
            /**
             * Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
             */
            labelValueLengthLimit?: number;
            /**
             * Selector to select which namespaces the Endpoints objects are discovered from.
             */
            namespaceSelector?: outputs.monitoring.v1.PodMonitorSpecNamespaceselector;
            /**
             * A list of endpoints allowed as part of this PodMonitor.
             */
            podMetricsEndpoints: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpoints[];
            /**
             * PodTargetLabels transfers labels on the Kubernetes Pod onto the target.
             */
            podTargetLabels?: string[];
            /**
             * SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
             */
            sampleLimit?: number;
            /**
             * Selector to select Pod objects.
             */
            selector: outputs.monitoring.v1.PodMonitorSpecSelector;
            /**
             * TargetLimit defines a limit on the number of scraped targets that will be accepted.
             */
            targetLimit?: number;
        }

        /**
         * Attaches node metadata to discovered targets. Only valid for role: pod. Only valid in Prometheus versions 2.35.0 and newer.
         */
        export interface PodMonitorSpecAttachmetadata {
            /**
             * When set to true, Prometheus must have permissions to get Nodes.
             */
            node?: boolean;
        }

        /**
         * Selector to select which namespaces the Endpoints objects are discovered from.
         */
        export interface PodMonitorSpecNamespaceselector {
            /**
             * Boolean describing whether all namespaces are selected in contrast to a list restricting them.
             */
            any?: boolean;
            /**
             * List of namespace names to select from.
             */
            matchNames?: string[];
        }

        /**
         * PodMetricsEndpoint defines a scrapeable endpoint of a Kubernetes Pod serving Prometheus metrics.
         */
        export interface PodMonitorSpecPodmetricsendpoints {
            /**
             * Authorization section for this endpoint
             */
            authorization?: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsAuthorization;
            /**
             * BasicAuth allow an endpoint to authenticate over basic authentication. More info: https://prometheus.io/docs/operating/configuration/#endpoint
             */
            basicAuth?: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsBasicauth;
            /**
             * Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the pod monitor and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsBearertokensecret;
            /**
             * FollowRedirects configures whether scrape requests follow HTTP 3xx redirects.
             */
            followRedirects?: boolean;
            /**
             * HonorLabels chooses the metric's labels on collisions with target labels.
             */
            honorLabels?: boolean;
            /**
             * HonorTimestamps controls whether Prometheus respects the timestamps present in scraped data.
             */
            honorTimestamps?: boolean;
            /**
             * Interval at which metrics should be scraped If not specified Prometheus' global scrape interval is used.
             */
            interval?: string;
            /**
             * MetricRelabelConfigs to apply to samples before ingestion.
             */
            metricRelabelings?: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsMetricrelabelings[];
            /**
             * OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.
             */
            oauth2?: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsOauth2;
            /**
             * Optional HTTP URL parameters
             */
            params?: {[key: string]: string[]};
            /**
             * HTTP path to scrape for metrics.
             */
            path?: string;
            /**
             * Name of the pod port this endpoint refers to. Mutually exclusive with targetPort.
             */
            port?: string;
            /**
             * ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.
             */
            proxyUrl?: string;
            /**
             * RelabelConfigs to apply to samples before scraping. Prometheus Operator automatically adds relabelings for a few standard Kubernetes fields. The original scrape job's name is available via the `__tmp_prometheus_job_name` label. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
             */
            relabelings?: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsRelabelings[];
            /**
             * HTTP scheme to use for scraping.
             */
            scheme?: string;
            /**
             * Timeout after which the scrape is ended If not specified, the Prometheus global scrape interval is used.
             */
            scrapeTimeout?: string;
            /**
             * Deprecated: Use 'port' instead.
             */
            targetPort?: number | string;
            /**
             * TLS configuration to use when scraping the endpoint.
             */
            tlsConfig?: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsTlsconfig;
        }

        /**
         * Authorization section for this endpoint
         */
        export interface PodMonitorSpecPodmetricsendpointsAuthorization {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsAuthorizationCredentials;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: string;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface PodMonitorSpecPodmetricsendpointsAuthorizationCredentials {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * BasicAuth allow an endpoint to authenticate over basic authentication. More info: https://prometheus.io/docs/operating/configuration/#endpoint
         */
        export interface PodMonitorSpecPodmetricsendpointsBasicauth {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsBasicauthPassword;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsBasicauthUsername;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface PodMonitorSpecPodmetricsendpointsBasicauthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface PodMonitorSpecPodmetricsendpointsBasicauthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the pod monitor and accessible by the Prometheus Operator.
         */
        export interface PodMonitorSpecPodmetricsendpointsBearertokensecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
         */
        export interface PodMonitorSpecPodmetricsendpointsMetricrelabelings {
            /**
             * Action to perform based on regex matching. Default is 'replace'
             */
            action?: string;
            /**
             * Modulus to take of the hash of the source label values.
             */
            modulus?: number;
            /**
             * Regular expression against which the extracted value is matched. Default is '(.*)'
             */
            regex?: string;
            /**
             * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
             */
            replacement?: string;
            /**
             * Separator placed between concatenated source label values. default is ';'.
             */
            separator?: string;
            /**
             * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
             */
            sourceLabels?: string[];
            /**
             * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
             */
            targetLabel?: string;
        }
        /**
         * podMonitorSpecPodmetricsendpointsMetricrelabelingsProvideDefaults sets the appropriate defaults for PodMonitorSpecPodmetricsendpointsMetricrelabelings
         */
        export function podMonitorSpecPodmetricsendpointsMetricrelabelingsProvideDefaults(val: PodMonitorSpecPodmetricsendpointsMetricrelabelings): PodMonitorSpecPodmetricsendpointsMetricrelabelings {
            return {
                ...val,
                action: (val.action) ?? "replace",
            };
        }

        /**
         * OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.
         */
        export interface PodMonitorSpecPodmetricsendpointsOauth2 {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsOauth2Clientid;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsOauth2Clientsecret;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: {[key: string]: string};
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: string[];
            /**
             * The URL to fetch the token from
             */
            tokenUrl: string;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface PodMonitorSpecPodmetricsendpointsOauth2Clientid {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsOauth2ClientidConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsOauth2ClientidSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PodMonitorSpecPodmetricsendpointsOauth2ClientidConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PodMonitorSpecPodmetricsendpointsOauth2ClientidSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface PodMonitorSpecPodmetricsendpointsOauth2Clientsecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
         */
        export interface PodMonitorSpecPodmetricsendpointsRelabelings {
            /**
             * Action to perform based on regex matching. Default is 'replace'
             */
            action?: string;
            /**
             * Modulus to take of the hash of the source label values.
             */
            modulus?: number;
            /**
             * Regular expression against which the extracted value is matched. Default is '(.*)'
             */
            regex?: string;
            /**
             * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
             */
            replacement?: string;
            /**
             * Separator placed between concatenated source label values. default is ';'.
             */
            separator?: string;
            /**
             * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
             */
            sourceLabels?: string[];
            /**
             * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
             */
            targetLabel?: string;
        }
        /**
         * podMonitorSpecPodmetricsendpointsRelabelingsProvideDefaults sets the appropriate defaults for PodMonitorSpecPodmetricsendpointsRelabelings
         */
        export function podMonitorSpecPodmetricsendpointsRelabelingsProvideDefaults(val: PodMonitorSpecPodmetricsendpointsRelabelings): PodMonitorSpecPodmetricsendpointsRelabelings {
            return {
                ...val,
                action: (val.action) ?? "replace",
            };
        }

        /**
         * TLS configuration to use when scraping the endpoint.
         */
        export interface PodMonitorSpecPodmetricsendpointsTlsconfig {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsTlsconfigCa;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsTlsconfigCert;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: boolean;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsTlsconfigKeysecret;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: string;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface PodMonitorSpecPodmetricsendpointsTlsconfigCa {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsTlsconfigCaConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsTlsconfigCaSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PodMonitorSpecPodmetricsendpointsTlsconfigCaConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PodMonitorSpecPodmetricsendpointsTlsconfigCaSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface PodMonitorSpecPodmetricsendpointsTlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsTlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsTlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PodMonitorSpecPodmetricsendpointsTlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PodMonitorSpecPodmetricsendpointsTlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface PodMonitorSpecPodmetricsendpointsTlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selector to select Pod objects.
         */
        export interface PodMonitorSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PodMonitorSpecSelectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PodMonitorSpecSelectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Specification of desired Ingress selection for target discovery by Prometheus.
         */
        export interface ProbeSpec {
            /**
             * Authorization section for this endpoint
             */
            authorization?: outputs.monitoring.v1.ProbeSpecAuthorization;
            /**
             * BasicAuth allow an endpoint to authenticate over basic authentication. More info: https://prometheus.io/docs/operating/configuration/#endpoint
             */
            basicAuth?: outputs.monitoring.v1.ProbeSpecBasicauth;
            /**
             * Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the probe and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: outputs.monitoring.v1.ProbeSpecBearertokensecret;
            /**
             * Interval at which targets are probed using the configured prober. If not specified Prometheus' global scrape interval is used.
             */
            interval?: string;
            /**
             * The job name assigned to scraped metrics by default.
             */
            jobName?: string;
            /**
             * Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
             */
            labelLimit?: number;
            /**
             * Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
             */
            labelNameLengthLimit?: number;
            /**
             * Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
             */
            labelValueLengthLimit?: number;
            /**
             * MetricRelabelConfigs to apply to samples before ingestion.
             */
            metricRelabelings?: outputs.monitoring.v1.ProbeSpecMetricrelabelings[];
            /**
             * The module to use for probing specifying how to probe the target. Example module configuring in the blackbox exporter: https://github.com/prometheus/blackbox_exporter/blob/master/example.yml
             */
            module?: string;
            /**
             * OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.
             */
            oauth2?: outputs.monitoring.v1.ProbeSpecOauth2;
            /**
             * Specification for the prober to use for probing targets. The prober.URL parameter is required. Targets cannot be probed if left empty.
             */
            prober?: outputs.monitoring.v1.ProbeSpecProber;
            /**
             * SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
             */
            sampleLimit?: number;
            /**
             * Timeout for scraping metrics from the Prometheus exporter. If not specified, the Prometheus global scrape interval is used.
             */
            scrapeTimeout?: string;
            /**
             * TargetLimit defines a limit on the number of scraped targets that will be accepted.
             */
            targetLimit?: number;
            /**
             * Targets defines a set of static or dynamically discovered targets to probe.
             */
            targets?: outputs.monitoring.v1.ProbeSpecTargets;
            /**
             * TLS configuration to use when scraping the endpoint.
             */
            tlsConfig?: outputs.monitoring.v1.ProbeSpecTlsconfig;
        }

        /**
         * Authorization section for this endpoint
         */
        export interface ProbeSpecAuthorization {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: outputs.monitoring.v1.ProbeSpecAuthorizationCredentials;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: string;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface ProbeSpecAuthorizationCredentials {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * BasicAuth allow an endpoint to authenticate over basic authentication. More info: https://prometheus.io/docs/operating/configuration/#endpoint
         */
        export interface ProbeSpecBasicauth {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: outputs.monitoring.v1.ProbeSpecBasicauthPassword;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: outputs.monitoring.v1.ProbeSpecBasicauthUsername;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface ProbeSpecBasicauthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface ProbeSpecBasicauthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the probe and accessible by the Prometheus Operator.
         */
        export interface ProbeSpecBearertokensecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
         */
        export interface ProbeSpecMetricrelabelings {
            /**
             * Action to perform based on regex matching. Default is 'replace'
             */
            action?: string;
            /**
             * Modulus to take of the hash of the source label values.
             */
            modulus?: number;
            /**
             * Regular expression against which the extracted value is matched. Default is '(.*)'
             */
            regex?: string;
            /**
             * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
             */
            replacement?: string;
            /**
             * Separator placed between concatenated source label values. default is ';'.
             */
            separator?: string;
            /**
             * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
             */
            sourceLabels?: string[];
            /**
             * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
             */
            targetLabel?: string;
        }
        /**
         * probeSpecMetricrelabelingsProvideDefaults sets the appropriate defaults for ProbeSpecMetricrelabelings
         */
        export function probeSpecMetricrelabelingsProvideDefaults(val: ProbeSpecMetricrelabelings): ProbeSpecMetricrelabelings {
            return {
                ...val,
                action: (val.action) ?? "replace",
            };
        }

        /**
         * OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.
         */
        export interface ProbeSpecOauth2 {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: outputs.monitoring.v1.ProbeSpecOauth2Clientid;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: outputs.monitoring.v1.ProbeSpecOauth2Clientsecret;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: {[key: string]: string};
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: string[];
            /**
             * The URL to fetch the token from
             */
            tokenUrl: string;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface ProbeSpecOauth2Clientid {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.ProbeSpecOauth2ClientidConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.ProbeSpecOauth2ClientidSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface ProbeSpecOauth2ClientidConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface ProbeSpecOauth2ClientidSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface ProbeSpecOauth2Clientsecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Specification for the prober to use for probing targets. The prober.URL parameter is required. Targets cannot be probed if left empty.
         */
        export interface ProbeSpecProber {
            /**
             * Path to collect metrics from. Defaults to `/probe`.
             */
            path?: string;
            /**
             * Optional ProxyURL.
             */
            proxyUrl?: string;
            /**
             * HTTP scheme to use for scraping. Defaults to `http`.
             */
            scheme?: string;
            /**
             * Mandatory URL of the prober.
             */
            url: string;
        }

        /**
         * Targets defines a set of static or dynamically discovered targets to probe.
         */
        export interface ProbeSpecTargets {
            /**
             * ingress defines the Ingress objects to probe and the relabeling configuration. If `staticConfig` is also defined, `staticConfig` takes precedence.
             */
            ingress?: outputs.monitoring.v1.ProbeSpecTargetsIngress;
            /**
             * staticConfig defines the static list of targets to probe and the relabeling configuration. If `ingress` is also defined, `staticConfig` takes precedence. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#static_config.
             */
            staticConfig?: outputs.monitoring.v1.ProbeSpecTargetsStaticconfig;
        }

        /**
         * ingress defines the Ingress objects to probe and the relabeling configuration. If `staticConfig` is also defined, `staticConfig` takes precedence.
         */
        export interface ProbeSpecTargetsIngress {
            /**
             * From which namespaces to select Ingress objects.
             */
            namespaceSelector?: outputs.monitoring.v1.ProbeSpecTargetsIngressNamespaceselector;
            /**
             * RelabelConfigs to apply to the label set of the target before it gets scraped. The original ingress address is available via the `__tmp_prometheus_ingress_address` label. It can be used to customize the probed URL. The original scrape job's name is available via the `__tmp_prometheus_job_name` label. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
             */
            relabelingConfigs?: outputs.monitoring.v1.ProbeSpecTargetsIngressRelabelingconfigs[];
            /**
             * Selector to select the Ingress objects.
             */
            selector?: outputs.monitoring.v1.ProbeSpecTargetsIngressSelector;
        }

        /**
         * From which namespaces to select Ingress objects.
         */
        export interface ProbeSpecTargetsIngressNamespaceselector {
            /**
             * Boolean describing whether all namespaces are selected in contrast to a list restricting them.
             */
            any?: boolean;
            /**
             * List of namespace names to select from.
             */
            matchNames?: string[];
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
         */
        export interface ProbeSpecTargetsIngressRelabelingconfigs {
            /**
             * Action to perform based on regex matching. Default is 'replace'
             */
            action?: string;
            /**
             * Modulus to take of the hash of the source label values.
             */
            modulus?: number;
            /**
             * Regular expression against which the extracted value is matched. Default is '(.*)'
             */
            regex?: string;
            /**
             * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
             */
            replacement?: string;
            /**
             * Separator placed between concatenated source label values. default is ';'.
             */
            separator?: string;
            /**
             * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
             */
            sourceLabels?: string[];
            /**
             * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
             */
            targetLabel?: string;
        }
        /**
         * probeSpecTargetsIngressRelabelingconfigsProvideDefaults sets the appropriate defaults for ProbeSpecTargetsIngressRelabelingconfigs
         */
        export function probeSpecTargetsIngressRelabelingconfigsProvideDefaults(val: ProbeSpecTargetsIngressRelabelingconfigs): ProbeSpecTargetsIngressRelabelingconfigs {
            return {
                ...val,
                action: (val.action) ?? "replace",
            };
        }

        /**
         * Selector to select the Ingress objects.
         */
        export interface ProbeSpecTargetsIngressSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.ProbeSpecTargetsIngressSelectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ProbeSpecTargetsIngressSelectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * staticConfig defines the static list of targets to probe and the relabeling configuration. If `ingress` is also defined, `staticConfig` takes precedence. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#static_config.
         */
        export interface ProbeSpecTargetsStaticconfig {
            /**
             * Labels assigned to all metrics scraped from the targets.
             */
            labels?: {[key: string]: string};
            /**
             * RelabelConfigs to apply to the label set of the targets before it gets scraped. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
             */
            relabelingConfigs?: outputs.monitoring.v1.ProbeSpecTargetsStaticconfigRelabelingconfigs[];
            /**
             * The list of hosts to probe.
             */
            static?: string[];
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
         */
        export interface ProbeSpecTargetsStaticconfigRelabelingconfigs {
            /**
             * Action to perform based on regex matching. Default is 'replace'
             */
            action?: string;
            /**
             * Modulus to take of the hash of the source label values.
             */
            modulus?: number;
            /**
             * Regular expression against which the extracted value is matched. Default is '(.*)'
             */
            regex?: string;
            /**
             * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
             */
            replacement?: string;
            /**
             * Separator placed between concatenated source label values. default is ';'.
             */
            separator?: string;
            /**
             * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
             */
            sourceLabels?: string[];
            /**
             * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
             */
            targetLabel?: string;
        }
        /**
         * probeSpecTargetsStaticconfigRelabelingconfigsProvideDefaults sets the appropriate defaults for ProbeSpecTargetsStaticconfigRelabelingconfigs
         */
        export function probeSpecTargetsStaticconfigRelabelingconfigsProvideDefaults(val: ProbeSpecTargetsStaticconfigRelabelingconfigs): ProbeSpecTargetsStaticconfigRelabelingconfigs {
            return {
                ...val,
                action: (val.action) ?? "replace",
            };
        }

        /**
         * TLS configuration to use when scraping the endpoint.
         */
        export interface ProbeSpecTlsconfig {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: outputs.monitoring.v1.ProbeSpecTlsconfigCa;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: outputs.monitoring.v1.ProbeSpecTlsconfigCert;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: boolean;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: outputs.monitoring.v1.ProbeSpecTlsconfigKeysecret;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: string;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface ProbeSpecTlsconfigCa {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.ProbeSpecTlsconfigCaConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.ProbeSpecTlsconfigCaSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface ProbeSpecTlsconfigCaConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface ProbeSpecTlsconfigCaSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface ProbeSpecTlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.ProbeSpecTlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.ProbeSpecTlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface ProbeSpecTlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface ProbeSpecTlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface ProbeSpecTlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Specification of desired alerting rule definitions for Prometheus.
         */
        export interface PrometheusRuleSpec {
            /**
             * Content of Prometheus rule file
             */
            groups?: outputs.monitoring.v1.PrometheusRuleSpecGroups[];
        }

        /**
         * RuleGroup is a list of sequentially evaluated recording and alerting rules. Note: PartialResponseStrategy is only used by ThanosRuler and will be ignored by Prometheus instances.  Valid values for this field are 'warn' or 'abort'.  More info: https://github.com/thanos-io/thanos/blob/main/docs/components/rule.md#partial-response
         */
        export interface PrometheusRuleSpecGroups {
            interval?: string;
            name: string;
            partial_response_strategy?: string;
            rules: outputs.monitoring.v1.PrometheusRuleSpecGroupsRules[];
        }

        /**
         * Rule describes an alerting or recording rule See Prometheus documentation: [alerting](https://www.prometheus.io/docs/prometheus/latest/configuration/alerting_rules/) or [recording](https://www.prometheus.io/docs/prometheus/latest/configuration/recording_rules/#recording-rules) rule
         */
        export interface PrometheusRuleSpecGroupsRules {
            alert?: string;
            annotations?: {[key: string]: string};
            expr: number | string;
            for?: string;
            labels?: {[key: string]: string};
            record?: string;
        }

        /**
         * Specification of the desired behavior of the Prometheus cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface PrometheusSpec {
            /**
             * AdditionalAlertManagerConfigs allows specifying a key of a Secret containing additional Prometheus AlertManager configurations. AlertManager configurations specified are appended to the configurations generated by the Prometheus Operator. Job configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alertmanager_config. As AlertManager configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible AlertManager configs are going to break Prometheus after the upgrade.
             */
            additionalAlertManagerConfigs?: outputs.monitoring.v1.PrometheusSpecAdditionalalertmanagerconfigs;
            /**
             * AdditionalAlertRelabelConfigs allows specifying a key of a Secret containing additional Prometheus alert relabel configurations. Alert relabel configurations specified are appended to the configurations generated by the Prometheus Operator. Alert relabel configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs. As alert relabel configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible alert relabel configs are going to break Prometheus after the upgrade.
             */
            additionalAlertRelabelConfigs?: outputs.monitoring.v1.PrometheusSpecAdditionalalertrelabelconfigs;
            /**
             * AdditionalScrapeConfigs allows specifying a key of a Secret containing additional Prometheus scrape configurations. Scrape configurations specified are appended to the configurations generated by the Prometheus Operator. Job configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config. As scrape configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible scrape configs are going to break Prometheus after the upgrade.
             */
            additionalScrapeConfigs?: outputs.monitoring.v1.PrometheusSpecAdditionalscrapeconfigs;
            /**
             * If specified, the pod's scheduling constraints.
             */
            affinity?: outputs.monitoring.v1.PrometheusSpecAffinity;
            /**
             * Define details regarding alerting.
             */
            alerting?: outputs.monitoring.v1.PrometheusSpecAlerting;
            /**
             * AllowOverlappingBlocks enables vertical compaction and vertical query merge in Prometheus. This is still experimental in Prometheus so it may change in any upcoming release.
             */
            allowOverlappingBlocks?: boolean;
            /**
             * APIServerConfig allows specifying a host and auth methods to access apiserver. If left empty, Prometheus is assumed to run inside of the cluster and will discover API servers automatically and use the pod's CA certificate and bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.
             */
            apiserverConfig?: outputs.monitoring.v1.PrometheusSpecApiserverconfig;
            /**
             * ArbitraryFSAccessThroughSMs configures whether configuration based on a service monitor can access arbitrary files on the file system of the Prometheus container e.g. bearer token files.
             */
            arbitraryFSAccessThroughSMs?: outputs.monitoring.v1.PrometheusSpecArbitraryfsaccessthroughsms;
            /**
             * Base image to use for a Prometheus deployment. Deprecated: use 'image' instead
             */
            baseImage?: string;
            /**
             * ConfigMaps is a list of ConfigMaps in the same namespace as the Prometheus object, which shall be mounted into the Prometheus Pods. The ConfigMaps are mounted into /etc/prometheus/configmaps/<configmap-name>.
             */
            configMaps?: string[];
            /**
             * Containers allows injecting additional containers or modifying operator generated containers. This can be used to allow adding an authentication proxy to a Prometheus pod or to change the behavior of an operator generated container. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `prometheus`, `config-reloader`, and `thanos-sidecar`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
             */
            containers?: outputs.monitoring.v1.PrometheusSpecContainers[];
            /**
             * Disable prometheus compaction.
             */
            disableCompaction?: boolean;
            /**
             * Enable access to prometheus web admin API. Defaults to the value of `false`. WARNING: Enabling the admin APIs enables mutating endpoints, to delete data, shutdown Prometheus, and more. Enabling this should be done with care and the user is advised to add additional authentication authorization via a proxy to ensure only clients authorized to perform these actions can do so. For more information see https://prometheus.io/docs/prometheus/latest/querying/api/#tsdb-admin-apis
             */
            enableAdminAPI?: boolean;
            /**
             * Enable access to Prometheus disabled features. By default, no features are enabled. Enabling disabled features is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice. For more information see https://prometheus.io/docs/prometheus/latest/disabled_features/
             */
            enableFeatures?: string[];
            /**
             * Enable Prometheus to be used as a receiver for the Prometheus remote write protocol. Defaults to the value of `false`. WARNING: This is not considered an efficient way of ingesting samples. Use it with caution for specific "low-volume use cases. It is not suitable for replacing the ingestion via scraping and turning Prometheus into a push-based metrics collection system. For more information see https"://prometheus.io/docs/prometheus/latest/querying/api/#remote-write-receiver Only valid in Prometheus versions 2.33.0 and newer.
             */
            enableRemoteWriteReceiver?: boolean;
            /**
             * EnforcedBodySizeLimit defines the maximum size of uncompressed response body that will be accepted by Prometheus. Targets responding with a body larger than this many bytes will cause the scrape to fail. Example: 100MB. If defined, the limit will apply to all service/pod monitors and probes. This is an experimental feature, this behaviour could change or be removed in the future. Only valid in Prometheus versions 2.28.0 and newer.
             */
            enforcedBodySizeLimit?: string;
            /**
             * Per-scrape limit on number of labels that will be accepted for a sample. If more than this number of labels are present post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Only valid in Prometheus versions 2.27.0 and newer.
             */
            enforcedLabelLimit?: number;
            /**
             * Per-scrape limit on length of labels name that will be accepted for a sample. If a label name is longer than this number post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Only valid in Prometheus versions 2.27.0 and newer.
             */
            enforcedLabelNameLengthLimit?: number;
            /**
             * Per-scrape limit on length of labels value that will be accepted for a sample. If a label value is longer than this number post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Only valid in Prometheus versions 2.27.0 and newer.
             */
            enforcedLabelValueLengthLimit?: number;
            /**
             * EnforcedNamespaceLabel If set, a label will be added to 
             *  1. all user-metrics (created by `ServiceMonitor`, `PodMonitor` and `Probe` objects) and 2. in all `PrometheusRule` objects (except the ones excluded in `prometheusRulesExcludedFromEnforce`) to * alerting & recording rules and * the metrics used in their expressions (`expr`). 
             *  Label name is this field's value. Label value is the namespace of the created object (mentioned above).
             */
            enforcedNamespaceLabel?: string;
            /**
             * EnforcedSampleLimit defines global limit on number of scraped samples that will be accepted. This overrides any SampleLimit set per ServiceMonitor or/and PodMonitor. It is meant to be used by admins to enforce the SampleLimit to keep overall number of samples/series under the desired limit. Note that if SampleLimit is lower that value will be taken instead.
             */
            enforcedSampleLimit?: number;
            /**
             * EnforcedTargetLimit defines a global limit on the number of scraped targets.  This overrides any TargetLimit set per ServiceMonitor or/and PodMonitor.  It is meant to be used by admins to enforce the TargetLimit to keep the overall number of targets under the desired limit. Note that if TargetLimit is lower, that value will be taken instead, except if either value is zero, in which case the non-zero value will be used.  If both values are zero, no limit is enforced.
             */
            enforcedTargetLimit?: number;
            /**
             * Interval between consecutive evaluations. Default: `30s`
             */
            evaluationInterval?: string;
            /**
             * List of references to PodMonitor, ServiceMonitor, Probe and PrometheusRule objects to be excluded from enforcing a namespace label of origin. Applies only if enforcedNamespaceLabel set to true.
             */
            excludedFromEnforcement?: outputs.monitoring.v1.PrometheusSpecExcludedfromenforcement[];
            /**
             * The labels to add to any time series or alerts when communicating with external systems (federation, remote storage, Alertmanager).
             */
            externalLabels?: {[key: string]: string};
            /**
             * The external URL the Prometheus instances will be available under. This is necessary to generate correct URLs. This is necessary if Prometheus is not served from root of a DNS name.
             */
            externalUrl?: string;
            /**
             * Pods' hostAliases configuration
             */
            hostAliases?: outputs.monitoring.v1.PrometheusSpecHostaliases[];
            /**
             * IgnoreNamespaceSelectors if set to true will ignore NamespaceSelector settings from all PodMonitor, ServiceMonitor and Probe objects. They will only discover endpoints within their current namespace. Defaults to false.
             */
            ignoreNamespaceSelectors?: boolean;
            /**
             * Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Prometheus is being configured.
             */
            image?: string;
            /**
             * An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets?: outputs.monitoring.v1.PrometheusSpecImagepullsecrets[];
            /**
             * InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Prometheus configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/"init-containers/ InitContainers described here modify an operator generated init containers if they share the same name and modifications are done via a strategic merge patch. The current init container name is": `init-config-reloader`. Overriding init containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
             */
            initContainers?: outputs.monitoring.v1.PrometheusSpecInitcontainers[];
            /**
             * ListenLocal makes the Prometheus server listen on loopback, so that it does not bind against the Pod IP.
             */
            listenLocal?: boolean;
            /**
             * Log format for Prometheus to be configured with.
             */
            logFormat?: string;
            /**
             * Log level for Prometheus to be configured with.
             */
            logLevel?: string;
            /**
             * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) This is an alpha field and requires enabling StatefulSetMinReadySeconds feature gate.
             */
            minReadySeconds?: number;
            /**
             * Define which Nodes the Pods are scheduled on.
             */
            nodeSelector?: {[key: string]: string};
            /**
             * When true, Prometheus resolves label conflicts by renaming the labels in the scraped data to "exported_<label value>" for all targets created from service and pod monitors. Otherwise the HonorLabels field of the service or pod monitor applies.
             */
            overrideHonorLabels?: boolean;
            /**
             * When true, Prometheus ignores the timestamps for all the targets created from service and pod monitors. Otherwise the HonorTimestamps field of the service or pod monitor applies.
             */
            overrideHonorTimestamps?: boolean;
            /**
             * When a Prometheus deployment is paused, no actions except for deletion will be performed on the underlying objects.
             */
            paused?: boolean;
            /**
             * PodMetadata configures Labels and Annotations which are propagated to the prometheus pods.
             */
            podMetadata?: outputs.monitoring.v1.PrometheusSpecPodmetadata;
            /**
             * Namespace's labels to match for PodMonitor discovery. If nil, only check own namespace.
             */
            podMonitorNamespaceSelector?: outputs.monitoring.v1.PrometheusSpecPodmonitornamespaceselector;
            /**
             * *Experimental* PodMonitors to be selected for target discovery. *Deprecated:* if neither this nor serviceMonitorSelector are specified, configuration is unmanaged.
             */
            podMonitorSelector?: outputs.monitoring.v1.PrometheusSpecPodmonitorselector;
            /**
             * Port name used for the pods and governing service. This defaults to web
             */
            portName?: string;
            /**
             * Priority class assigned to the Pods
             */
            priorityClassName?: string;
            /**
             * *Experimental* Namespaces to be selected for Probe discovery. If nil, only check own namespace.
             */
            probeNamespaceSelector?: outputs.monitoring.v1.PrometheusSpecProbenamespaceselector;
            /**
             * *Experimental* Probes to be selected for target discovery.
             */
            probeSelector?: outputs.monitoring.v1.PrometheusSpecProbeselector;
            /**
             * Name of Prometheus external label used to denote Prometheus instance name. Defaults to the value of `prometheus`. External label will _not_ be added when value is set to empty string (`""`).
             */
            prometheusExternalLabelName?: string;
            /**
             * PrometheusRulesExcludedFromEnforce - list of prometheus rules to be excluded from enforcing of adding namespace labels. Works only if enforcedNamespaceLabel set to true. Make sure both ruleNamespace and ruleName are set for each pair. Deprecated: use excludedFromEnforcement instead.
             */
            prometheusRulesExcludedFromEnforce?: outputs.monitoring.v1.PrometheusSpecPrometheusrulesexcludedfromenforce[];
            /**
             * QuerySpec defines the query command line flags when starting Prometheus.
             */
            query?: outputs.monitoring.v1.PrometheusSpecQuery;
            /**
             * QueryLogFile specifies the file to which PromQL queries are logged. If the filename has an empty path, e.g. 'query.log', "prometheus-operator will mount the file into an emptyDir volume at `/var/log/prometheus`. If a full path is provided, e.g. /var/log/prometheus/query.log, you must mount a volume in the specified directory and it must be writable. This is because the prometheus container runs with a read-only root filesystem for security reasons. Alternatively, the location can be set to a stdout location such as `/dev/stdout` to log query information to the default Prometheus log stream. This is only available in versions of Prometheus >= 2.16.0. For more details, see the Prometheus docs (https"://prometheus.io/docs/guides/query-log/)
             */
            queryLogFile?: string;
            /**
             * remoteRead is the list of remote read configurations.
             */
            remoteRead?: outputs.monitoring.v1.PrometheusSpecRemoteread[];
            /**
             * remoteWrite is the list of remote write configurations.
             */
            remoteWrite?: outputs.monitoring.v1.PrometheusSpecRemotewrite[];
            /**
             * Name of Prometheus external label used to denote replica name. Defaults to the value of `prometheus_replica`. External label will _not_ be added when value is set to empty string (`""`).
             */
            replicaExternalLabelName?: string;
            /**
             * Number of replicas of each shard to deploy for a Prometheus deployment. Number of replicas multiplied by shards is the total number of Pods created.
             */
            replicas?: number;
            /**
             * Define resources requests and limits for single Pods.
             */
            resources?: outputs.monitoring.v1.PrometheusSpecResources;
            /**
             * Time duration Prometheus shall retain data for. Default is '24h' if retentionSize is not set, and must match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds minutes hours days weeks years).
             */
            retention?: string;
            /**
             * Maximum amount of disk space used by blocks.
             */
            retentionSize?: string;
            /**
             * The route prefix Prometheus registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.
             */
            routePrefix?: string;
            /**
             * Namespaces to be selected for PrometheusRules discovery. If unspecified, only the same namespace as the Prometheus object is in is used.
             */
            ruleNamespaceSelector?: outputs.monitoring.v1.PrometheusSpecRulenamespaceselector;
            /**
             * A selector to select which PrometheusRules to mount for loading alerting/recording rules from. Until (excluding) Prometheus Operator v0.24.0 Prometheus Operator will migrate any legacy rule ConfigMaps to PrometheusRule custom resources selected by RuleSelector. Make sure it does not match any config maps that you do not want to be migrated.
             */
            ruleSelector?: outputs.monitoring.v1.PrometheusSpecRuleselector;
            /**
             * /--rules.*&#47; command-line arguments.
             */
            rules?: outputs.monitoring.v1.PrometheusSpecRules;
            /**
             * Interval between consecutive scrapes. Default: `30s`
             */
            scrapeInterval?: string;
            /**
             * Number of seconds to wait for target to respond before erroring.
             */
            scrapeTimeout?: string;
            /**
             * Secrets is a list of Secrets in the same namespace as the Prometheus object, which shall be mounted into the Prometheus Pods. The Secrets are mounted into /etc/prometheus/secrets/<secret-name>.
             */
            secrets?: string[];
            /**
             * SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.
             */
            securityContext?: outputs.monitoring.v1.PrometheusSpecSecuritycontext;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.
             */
            serviceAccountName?: string;
            /**
             * Namespace's labels to match for ServiceMonitor discovery. If nil, only check own namespace.
             */
            serviceMonitorNamespaceSelector?: outputs.monitoring.v1.PrometheusSpecServicemonitornamespaceselector;
            /**
             * ServiceMonitors to be selected for target discovery. *Deprecated:* if neither this nor podMonitorSelector are specified, configuration is unmanaged.
             */
            serviceMonitorSelector?: outputs.monitoring.v1.PrometheusSpecServicemonitorselector;
            /**
             * SHA of Prometheus container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use 'image' instead.  The image digest can be specified as part of the image URL.
             */
            sha?: string;
            /**
             * EXPERIMENTAL: Number of shards to distribute targets onto. Number of replicas multiplied by shards is the total number of Pods created. Note that scaling down shards will not reshard data onto remaining instances, it must be manually moved. Increasing shards will not reshard data either but it will continue to be available from the same instances. To query globally use Thanos sidecar and Thanos querier or remote write data to a central location. Sharding is done on the content of the `__address__` target meta-label.
             */
            shards?: number;
            /**
             * Storage spec to specify how storage shall be used.
             */
            storage?: outputs.monitoring.v1.PrometheusSpecStorage;
            /**
             * Tag of Prometheus container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set. Deprecated: use 'image' instead.  The image tag can be specified as part of the image URL.
             */
            tag?: string;
            /**
             * Thanos configuration allows configuring various aspects of a Prometheus server in a Thanos environment. 
             *  This section is experimental, it may change significantly without deprecation notice in any release. 
             *  This is experimental and may change significantly without backward compatibility in any release.
             */
            thanos?: outputs.monitoring.v1.PrometheusSpecThanos;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: outputs.monitoring.v1.PrometheusSpecTolerations[];
            /**
             * If specified, the pod's topology spread constraints.
             */
            topologySpreadConstraints?: outputs.monitoring.v1.PrometheusSpecTopologyspreadconstraints[];
            /**
             * Version of Prometheus to be deployed.
             */
            version?: string;
            /**
             * VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the prometheus container, that are generated as a result of StorageSpec objects.
             */
            volumeMounts?: outputs.monitoring.v1.PrometheusSpecVolumemounts[];
            /**
             * Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.
             */
            volumes?: outputs.monitoring.v1.PrometheusSpecVolumes[];
            /**
             * Enable compression of the write-ahead log using Snappy. This flag is only available in versions of Prometheus >= 2.11.0.
             */
            walCompression?: boolean;
            /**
             * WebSpec defines the web command line flags when starting Prometheus.
             */
            web?: outputs.monitoring.v1.PrometheusSpecWeb;
        }
        /**
         * prometheusSpecProvideDefaults sets the appropriate defaults for PrometheusSpec
         */
        export function prometheusSpecProvideDefaults(val: PrometheusSpec): PrometheusSpec {
            return {
                ...val,
                evaluationInterval: (val.evaluationInterval) ?? "30s",
                scrapeInterval: (val.scrapeInterval) ?? "30s",
            };
        }

        /**
         * AdditionalAlertManagerConfigs allows specifying a key of a Secret containing additional Prometheus AlertManager configurations. AlertManager configurations specified are appended to the configurations generated by the Prometheus Operator. Job configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alertmanager_config. As AlertManager configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible AlertManager configs are going to break Prometheus after the upgrade.
         */
        export interface PrometheusSpecAdditionalalertmanagerconfigs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * AdditionalAlertRelabelConfigs allows specifying a key of a Secret containing additional Prometheus alert relabel configurations. Alert relabel configurations specified are appended to the configurations generated by the Prometheus Operator. Alert relabel configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs. As alert relabel configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible alert relabel configs are going to break Prometheus after the upgrade.
         */
        export interface PrometheusSpecAdditionalalertrelabelconfigs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * AdditionalScrapeConfigs allows specifying a key of a Secret containing additional Prometheus scrape configurations. Scrape configurations specified are appended to the configurations generated by the Prometheus Operator. Job configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config. As scrape configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible scrape configs are going to break Prometheus after the upgrade.
         */
        export interface PrometheusSpecAdditionalscrapeconfigs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * If specified, the pod's scheduling constraints.
         */
        export interface PrometheusSpecAffinity {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: outputs.monitoring.v1.PrometheusSpecAffinityNodeaffinity;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: outputs.monitoring.v1.PrometheusSpecAffinityPodaffinity;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: outputs.monitoring.v1.PrometheusSpecAffinityPodantiaffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface PrometheusSpecAffinityNodeaffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.monitoring.v1.PrometheusSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.monitoring.v1.PrometheusSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface PrometheusSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: outputs.monitoring.v1.PrometheusSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface PrometheusSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.monitoring.v1.PrometheusSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface PrometheusSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.monitoring.v1.PrometheusSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface PrometheusSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.monitoring.v1.PrometheusSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PrometheusSpecAffinityPodaffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.monitoring.v1.PrometheusSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.monitoring.v1.PrometheusSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PrometheusSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.monitoring.v1.PrometheusSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PrometheusSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.monitoring.v1.PrometheusSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.monitoring.v1.PrometheusSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PrometheusSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface PrometheusSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface PrometheusSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.monitoring.v1.PrometheusSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.monitoring.v1.PrometheusSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PrometheusSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface PrometheusSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PrometheusSpecAffinityPodantiaffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.monitoring.v1.PrometheusSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.monitoring.v1.PrometheusSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PrometheusSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.monitoring.v1.PrometheusSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PrometheusSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.monitoring.v1.PrometheusSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.monitoring.v1.PrometheusSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PrometheusSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface PrometheusSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface PrometheusSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.monitoring.v1.PrometheusSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.monitoring.v1.PrometheusSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PrometheusSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface PrometheusSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Define details regarding alerting.
         */
        export interface PrometheusSpecAlerting {
            /**
             * AlertmanagerEndpoints Prometheus should fire alerts against.
             */
            alertmanagers: outputs.monitoring.v1.PrometheusSpecAlertingAlertmanagers[];
        }

        /**
         * AlertmanagerEndpoints defines a selection of a single Endpoints object containing alertmanager IPs to fire alerts against.
         */
        export interface PrometheusSpecAlertingAlertmanagers {
            /**
             * Version of the Alertmanager API that Prometheus uses to send alerts. It can be "v1" or "v2".
             */
            apiVersion?: string;
            /**
             * Authorization section for this alertmanager endpoint
             */
            authorization?: outputs.monitoring.v1.PrometheusSpecAlertingAlertmanagersAuthorization;
            /**
             * BearerTokenFile to read from filesystem to use when authenticating to Alertmanager.
             */
            bearerTokenFile?: string;
            /**
             * Name of Endpoints object in Namespace.
             */
            name: string;
            /**
             * Namespace of Endpoints object.
             */
            namespace: string;
            /**
             * Prefix for the HTTP path alerts are pushed to.
             */
            pathPrefix?: string;
            /**
             * Port the Alertmanager API is exposed on.
             */
            port: number | string;
            /**
             * Scheme to use when firing alerts.
             */
            scheme?: string;
            /**
             * Timeout is a per-target Alertmanager timeout when pushing alerts.
             */
            timeout?: string;
            /**
             * TLS Config to use for alertmanager connection.
             */
            tlsConfig?: outputs.monitoring.v1.PrometheusSpecAlertingAlertmanagersTlsconfig;
        }

        /**
         * Authorization section for this alertmanager endpoint
         */
        export interface PrometheusSpecAlertingAlertmanagersAuthorization {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: outputs.monitoring.v1.PrometheusSpecAlertingAlertmanagersAuthorizationCredentials;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: string;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface PrometheusSpecAlertingAlertmanagersAuthorizationCredentials {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * TLS Config to use for alertmanager connection.
         */
        export interface PrometheusSpecAlertingAlertmanagersTlsconfig {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: outputs.monitoring.v1.PrometheusSpecAlertingAlertmanagersTlsconfigCa;
            /**
             * Path to the CA cert in the Prometheus container to use for the targets.
             */
            caFile?: string;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: outputs.monitoring.v1.PrometheusSpecAlertingAlertmanagersTlsconfigCert;
            /**
             * Path to the client cert file in the Prometheus container for the targets.
             */
            certFile?: string;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: boolean;
            /**
             * Path to the client key file in the Prometheus container for the targets.
             */
            keyFile?: string;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: outputs.monitoring.v1.PrometheusSpecAlertingAlertmanagersTlsconfigKeysecret;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: string;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface PrometheusSpecAlertingAlertmanagersTlsconfigCa {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.PrometheusSpecAlertingAlertmanagersTlsconfigCaConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.PrometheusSpecAlertingAlertmanagersTlsconfigCaSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PrometheusSpecAlertingAlertmanagersTlsconfigCaConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PrometheusSpecAlertingAlertmanagersTlsconfigCaSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface PrometheusSpecAlertingAlertmanagersTlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.PrometheusSpecAlertingAlertmanagersTlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.PrometheusSpecAlertingAlertmanagersTlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PrometheusSpecAlertingAlertmanagersTlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PrometheusSpecAlertingAlertmanagersTlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface PrometheusSpecAlertingAlertmanagersTlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * APIServerConfig allows specifying a host and auth methods to access apiserver. If left empty, Prometheus is assumed to run inside of the cluster and will discover API servers automatically and use the pod's CA certificate and bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.
         */
        export interface PrometheusSpecApiserverconfig {
            /**
             * Authorization section for accessing apiserver
             */
            authorization?: outputs.monitoring.v1.PrometheusSpecApiserverconfigAuthorization;
            /**
             * BasicAuth allow an endpoint to authenticate over basic authentication
             */
            basicAuth?: outputs.monitoring.v1.PrometheusSpecApiserverconfigBasicauth;
            /**
             * Bearer token for accessing apiserver.
             */
            bearerToken?: string;
            /**
             * File to read bearer token for accessing apiserver.
             */
            bearerTokenFile?: string;
            /**
             * Host of apiserver. A valid string consisting of a hostname or IP followed by an optional port number
             */
            host: string;
            /**
             * TLS Config to use for accessing apiserver.
             */
            tlsConfig?: outputs.monitoring.v1.PrometheusSpecApiserverconfigTlsconfig;
        }

        /**
         * Authorization section for accessing apiserver
         */
        export interface PrometheusSpecApiserverconfigAuthorization {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: outputs.monitoring.v1.PrometheusSpecApiserverconfigAuthorizationCredentials;
            /**
             * File to read a secret from, mutually exclusive with Credentials (from SafeAuthorization)
             */
            credentialsFile?: string;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: string;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface PrometheusSpecApiserverconfigAuthorizationCredentials {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * BasicAuth allow an endpoint to authenticate over basic authentication
         */
        export interface PrometheusSpecApiserverconfigBasicauth {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: outputs.monitoring.v1.PrometheusSpecApiserverconfigBasicauthPassword;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: outputs.monitoring.v1.PrometheusSpecApiserverconfigBasicauthUsername;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface PrometheusSpecApiserverconfigBasicauthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface PrometheusSpecApiserverconfigBasicauthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * TLS Config to use for accessing apiserver.
         */
        export interface PrometheusSpecApiserverconfigTlsconfig {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: outputs.monitoring.v1.PrometheusSpecApiserverconfigTlsconfigCa;
            /**
             * Path to the CA cert in the Prometheus container to use for the targets.
             */
            caFile?: string;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: outputs.monitoring.v1.PrometheusSpecApiserverconfigTlsconfigCert;
            /**
             * Path to the client cert file in the Prometheus container for the targets.
             */
            certFile?: string;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: boolean;
            /**
             * Path to the client key file in the Prometheus container for the targets.
             */
            keyFile?: string;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: outputs.monitoring.v1.PrometheusSpecApiserverconfigTlsconfigKeysecret;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: string;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface PrometheusSpecApiserverconfigTlsconfigCa {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.PrometheusSpecApiserverconfigTlsconfigCaConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.PrometheusSpecApiserverconfigTlsconfigCaSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PrometheusSpecApiserverconfigTlsconfigCaConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PrometheusSpecApiserverconfigTlsconfigCaSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface PrometheusSpecApiserverconfigTlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.PrometheusSpecApiserverconfigTlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.PrometheusSpecApiserverconfigTlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PrometheusSpecApiserverconfigTlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PrometheusSpecApiserverconfigTlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface PrometheusSpecApiserverconfigTlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * ArbitraryFSAccessThroughSMs configures whether configuration based on a service monitor can access arbitrary files on the file system of the Prometheus container e.g. bearer token files.
         */
        export interface PrometheusSpecArbitraryfsaccessthroughsms {
            deny?: boolean;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface PrometheusSpecContainers {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: string[];
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: outputs.monitoring.v1.PrometheusSpecContainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: outputs.monitoring.v1.PrometheusSpecContainersEnvfrom[];
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: string;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: outputs.monitoring.v1.PrometheusSpecContainersLifecycle;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: outputs.monitoring.v1.PrometheusSpecContainersLivenessprobe;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: outputs.monitoring.v1.PrometheusSpecContainersPorts[];
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: outputs.monitoring.v1.PrometheusSpecContainersReadinessprobe;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: outputs.monitoring.v1.PrometheusSpecContainersResources;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: outputs.monitoring.v1.PrometheusSpecContainersSecuritycontext;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during "steady-state operation. This cannot be updated. More info: https"://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: outputs.monitoring.v1.PrometheusSpecContainersStartupprobe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: outputs.monitoring.v1.PrometheusSpecContainersVolumedevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: outputs.monitoring.v1.PrometheusSpecContainersVolumemounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface PrometheusSpecContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: string;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.monitoring.v1.PrometheusSpecContainersEnvValuefrom;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface PrometheusSpecContainersEnvValuefrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.monitoring.v1.PrometheusSpecContainersEnvValuefromConfigmapkeyref;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: outputs.monitoring.v1.PrometheusSpecContainersEnvValuefromFieldref;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: outputs.monitoring.v1.PrometheusSpecContainersEnvValuefromResourcefieldref;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: outputs.monitoring.v1.PrometheusSpecContainersEnvValuefromSecretkeyref;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface PrometheusSpecContainersEnvValuefromConfigmapkeyref {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface PrometheusSpecContainersEnvValuefromFieldref {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface PrometheusSpecContainersEnvValuefromResourcefieldref {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface PrometheusSpecContainersEnvValuefromSecretkeyref {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface PrometheusSpecContainersEnvfrom {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: outputs.monitoring.v1.PrometheusSpecContainersEnvfromConfigmapref;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: string;
            /**
             * The Secret to select from
             */
            secretRef?: outputs.monitoring.v1.PrometheusSpecContainersEnvfromSecretref;
        }

        /**
         * The ConfigMap to select from
         */
        export interface PrometheusSpecContainersEnvfromConfigmapref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface PrometheusSpecContainersEnvfromSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: boolean;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface PrometheusSpecContainersLifecycle {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: outputs.monitoring.v1.PrometheusSpecContainersLifecyclePoststart;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: outputs.monitoring.v1.PrometheusSpecContainersLifecyclePrestop;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PrometheusSpecContainersLifecyclePoststart {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.PrometheusSpecContainersLifecyclePoststartExec;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.PrometheusSpecContainersLifecyclePoststartHttpget;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: outputs.monitoring.v1.PrometheusSpecContainersLifecyclePoststartTcpsocket;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PrometheusSpecContainersLifecyclePoststartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PrometheusSpecContainersLifecyclePoststartHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.PrometheusSpecContainersLifecyclePoststartHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PrometheusSpecContainersLifecyclePoststartHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PrometheusSpecContainersLifecyclePoststartTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PrometheusSpecContainersLifecyclePrestop {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.PrometheusSpecContainersLifecyclePrestopExec;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.PrometheusSpecContainersLifecyclePrestopHttpget;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: outputs.monitoring.v1.PrometheusSpecContainersLifecyclePrestopTcpsocket;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PrometheusSpecContainersLifecyclePrestopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PrometheusSpecContainersLifecyclePrestopHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.PrometheusSpecContainersLifecyclePrestopHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PrometheusSpecContainersLifecyclePrestopHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PrometheusSpecContainersLifecyclePrestopTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PrometheusSpecContainersLivenessprobe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.PrometheusSpecContainersLivenessprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.monitoring.v1.PrometheusSpecContainersLivenessprobeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.PrometheusSpecContainersLivenessprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.monitoring.v1.PrometheusSpecContainersLivenessprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PrometheusSpecContainersLivenessprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface PrometheusSpecContainersLivenessprobeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PrometheusSpecContainersLivenessprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.PrometheusSpecContainersLivenessprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PrometheusSpecContainersLivenessprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PrometheusSpecContainersLivenessprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface PrometheusSpecContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: string;
        }
        /**
         * prometheusSpecContainersPortsProvideDefaults sets the appropriate defaults for PrometheusSpecContainersPorts
         */
        export function prometheusSpecContainersPortsProvideDefaults(val: PrometheusSpecContainersPorts): PrometheusSpecContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PrometheusSpecContainersReadinessprobe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.PrometheusSpecContainersReadinessprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.monitoring.v1.PrometheusSpecContainersReadinessprobeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.PrometheusSpecContainersReadinessprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.monitoring.v1.PrometheusSpecContainersReadinessprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PrometheusSpecContainersReadinessprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface PrometheusSpecContainersReadinessprobeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PrometheusSpecContainersReadinessprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.PrometheusSpecContainersReadinessprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PrometheusSpecContainersReadinessprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PrometheusSpecContainersReadinessprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface PrometheusSpecContainersResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface PrometheusSpecContainersSecuritycontext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: boolean;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: outputs.monitoring.v1.PrometheusSpecContainersSecuritycontextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: number;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: outputs.monitoring.v1.PrometheusSpecContainersSecuritycontextSelinuxoptions;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: outputs.monitoring.v1.PrometheusSpecContainersSecuritycontextSeccompprofile;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: outputs.monitoring.v1.PrometheusSpecContainersSecuritycontextWindowsoptions;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PrometheusSpecContainersSecuritycontextCapabilities {
            /**
             * Added capabilities
             */
            add?: string[];
            /**
             * Removed capabilities
             */
            drop?: string[];
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PrometheusSpecContainersSecuritycontextSeccompprofile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PrometheusSpecContainersSecuritycontextSelinuxoptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: string;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface PrometheusSpecContainersSecuritycontextWindowsoptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during "steady-state operation. This cannot be updated. More info: https"://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PrometheusSpecContainersStartupprobe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.PrometheusSpecContainersStartupprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.monitoring.v1.PrometheusSpecContainersStartupprobeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.PrometheusSpecContainersStartupprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.monitoring.v1.PrometheusSpecContainersStartupprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PrometheusSpecContainersStartupprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface PrometheusSpecContainersStartupprobeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PrometheusSpecContainersStartupprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.PrometheusSpecContainersStartupprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PrometheusSpecContainersStartupprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PrometheusSpecContainersStartupprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface PrometheusSpecContainersVolumedevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface PrometheusSpecContainersVolumemounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: string;
        }

        /**
         * ObjectReference references a PodMonitor, ServiceMonitor, Probe or PrometheusRule object.
         */
        export interface PrometheusSpecExcludedfromenforcement {
            /**
             * Group of the referent. When not specified, it defaults to `monitoring.coreos.com`
             */
            group?: string;
            /**
             * Name of the referent. When not set, all resources are matched.
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace: string;
            /**
             * Resource of the referent.
             */
            resource: string;
        }
        /**
         * prometheusSpecExcludedfromenforcementProvideDefaults sets the appropriate defaults for PrometheusSpecExcludedfromenforcement
         */
        export function prometheusSpecExcludedfromenforcementProvideDefaults(val: PrometheusSpecExcludedfromenforcement): PrometheusSpecExcludedfromenforcement {
            return {
                ...val,
                group: (val.group) ?? "monitoring.coreos.com",
            };
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        export interface PrometheusSpecHostaliases {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface PrometheusSpecImagepullsecrets {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface PrometheusSpecInitcontainers {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: string[];
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: outputs.monitoring.v1.PrometheusSpecInitcontainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: outputs.monitoring.v1.PrometheusSpecInitcontainersEnvfrom[];
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: string;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: outputs.monitoring.v1.PrometheusSpecInitcontainersLifecycle;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: outputs.monitoring.v1.PrometheusSpecInitcontainersLivenessprobe;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: outputs.monitoring.v1.PrometheusSpecInitcontainersPorts[];
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: outputs.monitoring.v1.PrometheusSpecInitcontainersReadinessprobe;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: outputs.monitoring.v1.PrometheusSpecInitcontainersResources;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: outputs.monitoring.v1.PrometheusSpecInitcontainersSecuritycontext;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during "steady-state operation. This cannot be updated. More info: https"://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: outputs.monitoring.v1.PrometheusSpecInitcontainersStartupprobe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: outputs.monitoring.v1.PrometheusSpecInitcontainersVolumedevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: outputs.monitoring.v1.PrometheusSpecInitcontainersVolumemounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface PrometheusSpecInitcontainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: string;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.monitoring.v1.PrometheusSpecInitcontainersEnvValuefrom;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface PrometheusSpecInitcontainersEnvValuefrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.monitoring.v1.PrometheusSpecInitcontainersEnvValuefromConfigmapkeyref;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: outputs.monitoring.v1.PrometheusSpecInitcontainersEnvValuefromFieldref;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: outputs.monitoring.v1.PrometheusSpecInitcontainersEnvValuefromResourcefieldref;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: outputs.monitoring.v1.PrometheusSpecInitcontainersEnvValuefromSecretkeyref;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface PrometheusSpecInitcontainersEnvValuefromConfigmapkeyref {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface PrometheusSpecInitcontainersEnvValuefromFieldref {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface PrometheusSpecInitcontainersEnvValuefromResourcefieldref {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface PrometheusSpecInitcontainersEnvValuefromSecretkeyref {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface PrometheusSpecInitcontainersEnvfrom {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: outputs.monitoring.v1.PrometheusSpecInitcontainersEnvfromConfigmapref;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: string;
            /**
             * The Secret to select from
             */
            secretRef?: outputs.monitoring.v1.PrometheusSpecInitcontainersEnvfromSecretref;
        }

        /**
         * The ConfigMap to select from
         */
        export interface PrometheusSpecInitcontainersEnvfromConfigmapref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface PrometheusSpecInitcontainersEnvfromSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: boolean;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface PrometheusSpecInitcontainersLifecycle {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: outputs.monitoring.v1.PrometheusSpecInitcontainersLifecyclePoststart;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: outputs.monitoring.v1.PrometheusSpecInitcontainersLifecyclePrestop;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PrometheusSpecInitcontainersLifecyclePoststart {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.PrometheusSpecInitcontainersLifecyclePoststartExec;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.PrometheusSpecInitcontainersLifecyclePoststartHttpget;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: outputs.monitoring.v1.PrometheusSpecInitcontainersLifecyclePoststartTcpsocket;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PrometheusSpecInitcontainersLifecyclePoststartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PrometheusSpecInitcontainersLifecyclePoststartHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.PrometheusSpecInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PrometheusSpecInitcontainersLifecyclePoststartHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PrometheusSpecInitcontainersLifecyclePoststartTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PrometheusSpecInitcontainersLifecyclePrestop {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.PrometheusSpecInitcontainersLifecyclePrestopExec;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.PrometheusSpecInitcontainersLifecyclePrestopHttpget;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: outputs.monitoring.v1.PrometheusSpecInitcontainersLifecyclePrestopTcpsocket;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PrometheusSpecInitcontainersLifecyclePrestopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PrometheusSpecInitcontainersLifecyclePrestopHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.PrometheusSpecInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PrometheusSpecInitcontainersLifecyclePrestopHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PrometheusSpecInitcontainersLifecyclePrestopTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PrometheusSpecInitcontainersLivenessprobe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.PrometheusSpecInitcontainersLivenessprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.monitoring.v1.PrometheusSpecInitcontainersLivenessprobeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.PrometheusSpecInitcontainersLivenessprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.monitoring.v1.PrometheusSpecInitcontainersLivenessprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PrometheusSpecInitcontainersLivenessprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface PrometheusSpecInitcontainersLivenessprobeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PrometheusSpecInitcontainersLivenessprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.PrometheusSpecInitcontainersLivenessprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PrometheusSpecInitcontainersLivenessprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PrometheusSpecInitcontainersLivenessprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface PrometheusSpecInitcontainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: string;
        }
        /**
         * prometheusSpecInitcontainersPortsProvideDefaults sets the appropriate defaults for PrometheusSpecInitcontainersPorts
         */
        export function prometheusSpecInitcontainersPortsProvideDefaults(val: PrometheusSpecInitcontainersPorts): PrometheusSpecInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PrometheusSpecInitcontainersReadinessprobe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.PrometheusSpecInitcontainersReadinessprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.monitoring.v1.PrometheusSpecInitcontainersReadinessprobeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.PrometheusSpecInitcontainersReadinessprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.monitoring.v1.PrometheusSpecInitcontainersReadinessprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PrometheusSpecInitcontainersReadinessprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface PrometheusSpecInitcontainersReadinessprobeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PrometheusSpecInitcontainersReadinessprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.PrometheusSpecInitcontainersReadinessprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PrometheusSpecInitcontainersReadinessprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PrometheusSpecInitcontainersReadinessprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface PrometheusSpecInitcontainersResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface PrometheusSpecInitcontainersSecuritycontext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: boolean;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: outputs.monitoring.v1.PrometheusSpecInitcontainersSecuritycontextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: number;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: outputs.monitoring.v1.PrometheusSpecInitcontainersSecuritycontextSelinuxoptions;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: outputs.monitoring.v1.PrometheusSpecInitcontainersSecuritycontextSeccompprofile;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: outputs.monitoring.v1.PrometheusSpecInitcontainersSecuritycontextWindowsoptions;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PrometheusSpecInitcontainersSecuritycontextCapabilities {
            /**
             * Added capabilities
             */
            add?: string[];
            /**
             * Removed capabilities
             */
            drop?: string[];
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PrometheusSpecInitcontainersSecuritycontextSeccompprofile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PrometheusSpecInitcontainersSecuritycontextSelinuxoptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: string;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface PrometheusSpecInitcontainersSecuritycontextWindowsoptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during "steady-state operation. This cannot be updated. More info: https"://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PrometheusSpecInitcontainersStartupprobe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.PrometheusSpecInitcontainersStartupprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.monitoring.v1.PrometheusSpecInitcontainersStartupprobeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.PrometheusSpecInitcontainersStartupprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.monitoring.v1.PrometheusSpecInitcontainersStartupprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PrometheusSpecInitcontainersStartupprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface PrometheusSpecInitcontainersStartupprobeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PrometheusSpecInitcontainersStartupprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.PrometheusSpecInitcontainersStartupprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PrometheusSpecInitcontainersStartupprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PrometheusSpecInitcontainersStartupprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface PrometheusSpecInitcontainersVolumedevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface PrometheusSpecInitcontainersVolumemounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: string;
        }

        /**
         * PodMetadata configures Labels and Annotations which are propagated to the prometheus pods.
         */
        export interface PrometheusSpecPodmetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
             */
            name?: string;
        }

        /**
         * Namespace's labels to match for PodMonitor discovery. If nil, only check own namespace.
         */
        export interface PrometheusSpecPodmonitornamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecPodmonitornamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecPodmonitornamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * *Experimental* PodMonitors to be selected for target discovery. *Deprecated:* if neither this nor serviceMonitorSelector are specified, configuration is unmanaged.
         */
        export interface PrometheusSpecPodmonitorselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecPodmonitorselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecPodmonitorselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * *Experimental* Namespaces to be selected for Probe discovery. If nil, only check own namespace.
         */
        export interface PrometheusSpecProbenamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecProbenamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecProbenamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * *Experimental* Probes to be selected for target discovery.
         */
        export interface PrometheusSpecProbeselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecProbeselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecProbeselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * PrometheusRuleExcludeConfig enables users to configure excluded PrometheusRule names and their namespaces to be ignored while enforcing namespace label for alerts and metrics.
         */
        export interface PrometheusSpecPrometheusrulesexcludedfromenforce {
            /**
             * RuleNamespace - name of excluded rule
             */
            ruleName: string;
            /**
             * RuleNamespace - namespace of excluded rule
             */
            ruleNamespace: string;
        }

        /**
         * QuerySpec defines the query command line flags when starting Prometheus.
         */
        export interface PrometheusSpecQuery {
            /**
             * The delta difference allowed for retrieving metrics during expression evaluations.
             */
            lookbackDelta?: string;
            /**
             * Number of concurrent queries that can be run at once.
             */
            maxConcurrency?: number;
            /**
             * Maximum number of samples a single query can load into memory. Note that queries will fail if they would load more samples than this into memory, so this also limits the number of samples a query can return.
             */
            maxSamples?: number;
            /**
             * Maximum time a query may take before being aborted.
             */
            timeout?: string;
        }

        /**
         * RemoteReadSpec defines the configuration for Prometheus to read back samples from a remote endpoint.
         */
        export interface PrometheusSpecRemoteread {
            /**
             * Authorization section for remote read
             */
            authorization?: outputs.monitoring.v1.PrometheusSpecRemotereadAuthorization;
            /**
             * BasicAuth for the URL.
             */
            basicAuth?: outputs.monitoring.v1.PrometheusSpecRemotereadBasicauth;
            /**
             * Bearer token for remote read.
             */
            bearerToken?: string;
            /**
             * File to read bearer token for remote read.
             */
            bearerTokenFile?: string;
            /**
             * Custom HTTP headers to be sent along with each remote read request. Be aware that headers that are set by Prometheus itself can't be overwritten. Only valid in Prometheus versions 2.26.0 and newer.
             */
            headers?: {[key: string]: string};
            /**
             * The name of the remote read queue, it must be unique if specified. The name is used in metrics and logging in order to differentiate read configurations.  Only valid in Prometheus versions 2.15.0 and newer.
             */
            name?: string;
            /**
             * OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.
             */
            oauth2?: outputs.monitoring.v1.PrometheusSpecRemotereadOauth2;
            /**
             * Optional ProxyURL.
             */
            proxyUrl?: string;
            /**
             * Whether reads should be made for queries for time ranges that the local storage should have complete data for.
             */
            readRecent?: boolean;
            /**
             * Timeout for requests to the remote read endpoint.
             */
            remoteTimeout?: string;
            /**
             * An optional list of equality matchers which have to be present in a selector to query the remote read endpoint.
             */
            requiredMatchers?: {[key: string]: string};
            /**
             * TLS Config to use for remote read.
             */
            tlsConfig?: outputs.monitoring.v1.PrometheusSpecRemotereadTlsconfig;
            /**
             * The URL of the endpoint to query from.
             */
            url: string;
        }

        /**
         * Authorization section for remote read
         */
        export interface PrometheusSpecRemotereadAuthorization {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: outputs.monitoring.v1.PrometheusSpecRemotereadAuthorizationCredentials;
            /**
             * File to read a secret from, mutually exclusive with Credentials (from SafeAuthorization)
             */
            credentialsFile?: string;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: string;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface PrometheusSpecRemotereadAuthorizationCredentials {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * BasicAuth for the URL.
         */
        export interface PrometheusSpecRemotereadBasicauth {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: outputs.monitoring.v1.PrometheusSpecRemotereadBasicauthPassword;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: outputs.monitoring.v1.PrometheusSpecRemotereadBasicauthUsername;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface PrometheusSpecRemotereadBasicauthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface PrometheusSpecRemotereadBasicauthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.
         */
        export interface PrometheusSpecRemotereadOauth2 {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: outputs.monitoring.v1.PrometheusSpecRemotereadOauth2Clientid;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: outputs.monitoring.v1.PrometheusSpecRemotereadOauth2Clientsecret;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: {[key: string]: string};
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: string[];
            /**
             * The URL to fetch the token from
             */
            tokenUrl: string;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface PrometheusSpecRemotereadOauth2Clientid {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.PrometheusSpecRemotereadOauth2ClientidConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.PrometheusSpecRemotereadOauth2ClientidSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PrometheusSpecRemotereadOauth2ClientidConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PrometheusSpecRemotereadOauth2ClientidSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface PrometheusSpecRemotereadOauth2Clientsecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * TLS Config to use for remote read.
         */
        export interface PrometheusSpecRemotereadTlsconfig {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: outputs.monitoring.v1.PrometheusSpecRemotereadTlsconfigCa;
            /**
             * Path to the CA cert in the Prometheus container to use for the targets.
             */
            caFile?: string;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: outputs.monitoring.v1.PrometheusSpecRemotereadTlsconfigCert;
            /**
             * Path to the client cert file in the Prometheus container for the targets.
             */
            certFile?: string;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: boolean;
            /**
             * Path to the client key file in the Prometheus container for the targets.
             */
            keyFile?: string;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: outputs.monitoring.v1.PrometheusSpecRemotereadTlsconfigKeysecret;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: string;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface PrometheusSpecRemotereadTlsconfigCa {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.PrometheusSpecRemotereadTlsconfigCaConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.PrometheusSpecRemotereadTlsconfigCaSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PrometheusSpecRemotereadTlsconfigCaConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PrometheusSpecRemotereadTlsconfigCaSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface PrometheusSpecRemotereadTlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.PrometheusSpecRemotereadTlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.PrometheusSpecRemotereadTlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PrometheusSpecRemotereadTlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PrometheusSpecRemotereadTlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface PrometheusSpecRemotereadTlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * RemoteWriteSpec defines the configuration to write samples from Prometheus to a remote endpoint.
         */
        export interface PrometheusSpecRemotewrite {
            /**
             * Authorization section for remote write
             */
            authorization?: outputs.monitoring.v1.PrometheusSpecRemotewriteAuthorization;
            /**
             * BasicAuth for the URL.
             */
            basicAuth?: outputs.monitoring.v1.PrometheusSpecRemotewriteBasicauth;
            /**
             * Bearer token for remote write.
             */
            bearerToken?: string;
            /**
             * File to read bearer token for remote write.
             */
            bearerTokenFile?: string;
            /**
             * Custom HTTP headers to be sent along with each remote write request. Be aware that headers that are set by Prometheus itself can't be overwritten. Only valid in Prometheus versions 2.25.0 and newer.
             */
            headers?: {[key: string]: string};
            /**
             * MetadataConfig configures the sending of series metadata to the remote storage.
             */
            metadataConfig?: outputs.monitoring.v1.PrometheusSpecRemotewriteMetadataconfig;
            /**
             * The name of the remote write queue, it must be unique if specified. The name is used in metrics and logging in order to differentiate queues. Only valid in Prometheus versions 2.15.0 and newer.
             */
            name?: string;
            /**
             * OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.
             */
            oauth2?: outputs.monitoring.v1.PrometheusSpecRemotewriteOauth2;
            /**
             * Optional ProxyURL.
             */
            proxyUrl?: string;
            /**
             * QueueConfig allows tuning of the remote write queue parameters.
             */
            queueConfig?: outputs.monitoring.v1.PrometheusSpecRemotewriteQueueconfig;
            /**
             * Timeout for requests to the remote write endpoint.
             */
            remoteTimeout?: string;
            /**
             * Enables sending of exemplars over remote write. Note that exemplar-storage itself must be enabled using the enableFeature option for exemplars to be scraped in the first place.  Only valid in Prometheus versions 2.27.0 and newer.
             */
            sendExemplars?: boolean;
            /**
             * Sigv4 allows to configures AWS's Signature Verification 4
             */
            sigv4?: outputs.monitoring.v1.PrometheusSpecRemotewriteSigv4;
            /**
             * TLS Config to use for remote write.
             */
            tlsConfig?: outputs.monitoring.v1.PrometheusSpecRemotewriteTlsconfig;
            /**
             * The URL of the endpoint to send samples to.
             */
            url: string;
            /**
             * The list of remote write relabel configurations.
             */
            writeRelabelConfigs?: outputs.monitoring.v1.PrometheusSpecRemotewriteWriterelabelconfigs[];
        }

        /**
         * Authorization section for remote write
         */
        export interface PrometheusSpecRemotewriteAuthorization {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: outputs.monitoring.v1.PrometheusSpecRemotewriteAuthorizationCredentials;
            /**
             * File to read a secret from, mutually exclusive with Credentials (from SafeAuthorization)
             */
            credentialsFile?: string;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: string;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface PrometheusSpecRemotewriteAuthorizationCredentials {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * BasicAuth for the URL.
         */
        export interface PrometheusSpecRemotewriteBasicauth {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: outputs.monitoring.v1.PrometheusSpecRemotewriteBasicauthPassword;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: outputs.monitoring.v1.PrometheusSpecRemotewriteBasicauthUsername;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface PrometheusSpecRemotewriteBasicauthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface PrometheusSpecRemotewriteBasicauthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * MetadataConfig configures the sending of series metadata to the remote storage.
         */
        export interface PrometheusSpecRemotewriteMetadataconfig {
            /**
             * Whether metric metadata is sent to the remote storage or not.
             */
            send?: boolean;
            /**
             * How frequently metric metadata is sent to the remote storage.
             */
            sendInterval?: string;
        }

        /**
         * OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.
         */
        export interface PrometheusSpecRemotewriteOauth2 {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: outputs.monitoring.v1.PrometheusSpecRemotewriteOauth2Clientid;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: outputs.monitoring.v1.PrometheusSpecRemotewriteOauth2Clientsecret;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: {[key: string]: string};
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: string[];
            /**
             * The URL to fetch the token from
             */
            tokenUrl: string;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface PrometheusSpecRemotewriteOauth2Clientid {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.PrometheusSpecRemotewriteOauth2ClientidConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.PrometheusSpecRemotewriteOauth2ClientidSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PrometheusSpecRemotewriteOauth2ClientidConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PrometheusSpecRemotewriteOauth2ClientidSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface PrometheusSpecRemotewriteOauth2Clientsecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * QueueConfig allows tuning of the remote write queue parameters.
         */
        export interface PrometheusSpecRemotewriteQueueconfig {
            /**
             * BatchSendDeadline is the maximum time a sample will wait in buffer.
             */
            batchSendDeadline?: string;
            /**
             * Capacity is the number of samples to buffer per shard before we start dropping them.
             */
            capacity?: number;
            /**
             * MaxBackoff is the maximum retry delay.
             */
            maxBackoff?: string;
            /**
             * MaxRetries is the maximum number of times to retry a batch on recoverable errors.
             */
            maxRetries?: number;
            /**
             * MaxSamplesPerSend is the maximum number of samples per send.
             */
            maxSamplesPerSend?: number;
            /**
             * MaxShards is the maximum number of shards, i.e. amount of concurrency.
             */
            maxShards?: number;
            /**
             * MinBackoff is the initial retry delay. Gets doubled for every retry.
             */
            minBackoff?: string;
            /**
             * MinShards is the minimum number of shards, i.e. amount of concurrency.
             */
            minShards?: number;
            /**
             * Retry upon receiving a 429 status code from the remote-write storage. This is experimental feature and might change in the future.
             */
            retryOnRateLimit?: boolean;
        }

        /**
         * Sigv4 allows to configures AWS's Signature Verification 4
         */
        export interface PrometheusSpecRemotewriteSigv4 {
            /**
             * AccessKey is the AWS API key. If blank, the environment variable `AWS_ACCESS_KEY_ID` is used.
             */
            accessKey?: outputs.monitoring.v1.PrometheusSpecRemotewriteSigv4Accesskey;
            /**
             * Profile is the named AWS profile used to authenticate.
             */
            profile?: string;
            /**
             * Region is the AWS region. If blank, the region from the default credentials chain used.
             */
            region?: string;
            /**
             * RoleArn is the named AWS profile used to authenticate.
             */
            roleArn?: string;
            /**
             * SecretKey is the AWS API secret. If blank, the environment variable `AWS_SECRET_ACCESS_KEY` is used.
             */
            secretKey?: outputs.monitoring.v1.PrometheusSpecRemotewriteSigv4Secretkey;
        }

        /**
         * AccessKey is the AWS API key. If blank, the environment variable `AWS_ACCESS_KEY_ID` is used.
         */
        export interface PrometheusSpecRemotewriteSigv4Accesskey {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * SecretKey is the AWS API secret. If blank, the environment variable `AWS_SECRET_ACCESS_KEY` is used.
         */
        export interface PrometheusSpecRemotewriteSigv4Secretkey {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * TLS Config to use for remote write.
         */
        export interface PrometheusSpecRemotewriteTlsconfig {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: outputs.monitoring.v1.PrometheusSpecRemotewriteTlsconfigCa;
            /**
             * Path to the CA cert in the Prometheus container to use for the targets.
             */
            caFile?: string;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: outputs.monitoring.v1.PrometheusSpecRemotewriteTlsconfigCert;
            /**
             * Path to the client cert file in the Prometheus container for the targets.
             */
            certFile?: string;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: boolean;
            /**
             * Path to the client key file in the Prometheus container for the targets.
             */
            keyFile?: string;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: outputs.monitoring.v1.PrometheusSpecRemotewriteTlsconfigKeysecret;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: string;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface PrometheusSpecRemotewriteTlsconfigCa {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.PrometheusSpecRemotewriteTlsconfigCaConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.PrometheusSpecRemotewriteTlsconfigCaSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PrometheusSpecRemotewriteTlsconfigCaConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PrometheusSpecRemotewriteTlsconfigCaSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface PrometheusSpecRemotewriteTlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.PrometheusSpecRemotewriteTlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.PrometheusSpecRemotewriteTlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PrometheusSpecRemotewriteTlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PrometheusSpecRemotewriteTlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface PrometheusSpecRemotewriteTlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
         */
        export interface PrometheusSpecRemotewriteWriterelabelconfigs {
            /**
             * Action to perform based on regex matching. Default is 'replace'
             */
            action?: string;
            /**
             * Modulus to take of the hash of the source label values.
             */
            modulus?: number;
            /**
             * Regular expression against which the extracted value is matched. Default is '(.*)'
             */
            regex?: string;
            /**
             * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
             */
            replacement?: string;
            /**
             * Separator placed between concatenated source label values. default is ';'.
             */
            separator?: string;
            /**
             * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
             */
            sourceLabels?: string[];
            /**
             * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
             */
            targetLabel?: string;
        }
        /**
         * prometheusSpecRemotewriteWriterelabelconfigsProvideDefaults sets the appropriate defaults for PrometheusSpecRemotewriteWriterelabelconfigs
         */
        export function prometheusSpecRemotewriteWriterelabelconfigsProvideDefaults(val: PrometheusSpecRemotewriteWriterelabelconfigs): PrometheusSpecRemotewriteWriterelabelconfigs {
            return {
                ...val,
                action: (val.action) ?? "replace",
            };
        }

        /**
         * Define resources requests and limits for single Pods.
         */
        export interface PrometheusSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * Namespaces to be selected for PrometheusRules discovery. If unspecified, only the same namespace as the Prometheus object is in is used.
         */
        export interface PrometheusSpecRulenamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecRulenamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecRulenamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * /--rules.*&#47; command-line arguments.
         */
        export interface PrometheusSpecRules {
            /**
             * /--rules.alert.*&#47; command-line arguments
             */
            alert?: outputs.monitoring.v1.PrometheusSpecRulesAlert;
        }

        /**
         * /--rules.alert.*&#47; command-line arguments
         */
        export interface PrometheusSpecRulesAlert {
            /**
             * Minimum duration between alert and restored 'for' state. This is maintained only for alerts with configured 'for' time greater than grace period.
             */
            forGracePeriod?: string;
            /**
             * Max time to tolerate prometheus outage for restoring 'for' state of alert.
             */
            forOutageTolerance?: string;
            /**
             * Minimum amount of time to wait before resending an alert to Alertmanager.
             */
            resendDelay?: string;
        }

        /**
         * A selector to select which PrometheusRules to mount for loading alerting/recording rules from. Until (excluding) Prometheus Operator v0.24.0 Prometheus Operator will migrate any legacy rule ConfigMaps to PrometheusRule custom resources selected by RuleSelector. Make sure it does not match any config maps that you do not want to be migrated.
         */
        export interface PrometheusSpecRuleselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecRuleselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecRuleselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.
         */
        export interface PrometheusSpecSecuritycontext {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup?: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy?: string;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: number;
            /**
             * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: outputs.monitoring.v1.PrometheusSpecSecuritycontextSelinuxoptions;
            /**
             * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: outputs.monitoring.v1.PrometheusSpecSecuritycontextSeccompprofile;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups?: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls?: outputs.monitoring.v1.PrometheusSpecSecuritycontextSysctls[];
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: outputs.monitoring.v1.PrometheusSpecSecuritycontextWindowsoptions;
        }

        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PrometheusSpecSecuritycontextSeccompprofile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PrometheusSpecSecuritycontextSelinuxoptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface PrometheusSpecSecuritycontextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface PrometheusSpecSecuritycontextWindowsoptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: string;
        }

        /**
         * Namespace's labels to match for ServiceMonitor discovery. If nil, only check own namespace.
         */
        export interface PrometheusSpecServicemonitornamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecServicemonitornamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecServicemonitornamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * ServiceMonitors to be selected for target discovery. *Deprecated:* if neither this nor podMonitorSelector are specified, configuration is unmanaged.
         */
        export interface PrometheusSpecServicemonitorselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecServicemonitorselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecServicemonitorselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Storage spec to specify how storage shall be used.
         */
        export interface PrometheusSpecStorage {
            /**
             * Deprecated: subPath usage will be disabled by default in a future release, this option will become unnecessary. DisableMountSubPath allows to remove any subPath usage in volume mounts.
             */
            disableMountSubPath?: boolean;
            /**
             * EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
             */
            emptyDir?: outputs.monitoring.v1.PrometheusSpecStorageEmptydir;
            /**
             * EphemeralVolumeSource to be used by the Prometheus StatefulSets. This is a beta field in k8s 1.21, for lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
             */
            ephemeral?: outputs.monitoring.v1.PrometheusSpecStorageEphemeral;
            /**
             * A PVC spec to be used by the Prometheus StatefulSets.
             */
            volumeClaimTemplate?: outputs.monitoring.v1.PrometheusSpecStorageVolumeclaimtemplate;
        }

        /**
         * EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
         */
        export interface PrometheusSpecStorageEmptydir {
            /**
             * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium?: string;
            /**
             * Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit?: number | string;
        }

        /**
         * EphemeralVolumeSource to be used by the Prometheus StatefulSets. This is a beta field in k8s 1.21, for lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
         */
        export interface PrometheusSpecStorageEphemeral {
            /**
             * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
             *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
             *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
             *  Required, must not be nil.
             */
            volumeClaimTemplate?: outputs.monitoring.v1.PrometheusSpecStorageEphemeralVolumeclaimtemplate;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         *  Required, must not be nil.
         */
        export interface PrometheusSpecStorageEphemeralVolumeclaimtemplate {
            /**
             * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
             */
            metadata?: {[key: string]: any};
            /**
             * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
             */
            spec: outputs.monitoring.v1.PrometheusSpecStorageEphemeralVolumeclaimtemplateSpec;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        export interface PrometheusSpecStorageEphemeralVolumeclaimtemplateSpec {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: string[];
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
             */
            dataSource?: outputs.monitoring.v1.PrometheusSpecStorageEphemeralVolumeclaimtemplateSpecDatasource;
            /**
             * Specifies the object from which to populate the volume with data, if a "non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef": * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: outputs.monitoring.v1.PrometheusSpecStorageEphemeralVolumeclaimtemplateSpecDatasourceref;
            /**
             * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: outputs.monitoring.v1.PrometheusSpecStorageEphemeralVolumeclaimtemplateSpecResources;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: outputs.monitoring.v1.PrometheusSpecStorageEphemeralVolumeclaimtemplateSpecSelector;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: string;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: string;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface PrometheusSpecStorageEphemeralVolumeclaimtemplateSpecDatasource {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a "non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef": * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface PrometheusSpecStorageEphemeralVolumeclaimtemplateSpecDatasourceref {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface PrometheusSpecStorageEphemeralVolumeclaimtemplateSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface PrometheusSpecStorageEphemeralVolumeclaimtemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecStorageEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecStorageEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A PVC spec to be used by the Prometheus StatefulSets.
         */
        export interface PrometheusSpecStorageVolumeclaimtemplate {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: string;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * EmbeddedMetadata contains metadata relevant to an EmbeddedResource.
             */
            metadata?: outputs.monitoring.v1.PrometheusSpecStorageVolumeclaimtemplateMetadata;
            /**
             * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            spec?: outputs.monitoring.v1.PrometheusSpecStorageVolumeclaimtemplateSpec;
            /**
             * Status represents the current information/status of a persistent volume claim. R"ead-only. More info: https"://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            status?: outputs.monitoring.v1.PrometheusSpecStorageVolumeclaimtemplateStatus;
        }

        /**
         * EmbeddedMetadata contains metadata relevant to an EmbeddedResource.
         */
        export interface PrometheusSpecStorageVolumeclaimtemplateMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
             */
            name?: string;
        }

        /**
         * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface PrometheusSpecStorageVolumeclaimtemplateSpec {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: string[];
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
             */
            dataSource?: outputs.monitoring.v1.PrometheusSpecStorageVolumeclaimtemplateSpecDatasource;
            /**
             * Specifies the object from which to populate the volume with data, if a "non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef": * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: outputs.monitoring.v1.PrometheusSpecStorageVolumeclaimtemplateSpecDatasourceref;
            /**
             * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: outputs.monitoring.v1.PrometheusSpecStorageVolumeclaimtemplateSpecResources;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: outputs.monitoring.v1.PrometheusSpecStorageVolumeclaimtemplateSpecSelector;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: string;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: string;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface PrometheusSpecStorageVolumeclaimtemplateSpecDatasource {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a "non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef": * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface PrometheusSpecStorageVolumeclaimtemplateSpecDatasourceref {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface PrometheusSpecStorageVolumeclaimtemplateSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface PrometheusSpecStorageVolumeclaimtemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecStorageVolumeclaimtemplateSpecSelectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecStorageVolumeclaimtemplateSpecSelectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Status represents the current information/status of a persistent volume claim. R"ead-only. More info: https"://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface PrometheusSpecStorageVolumeclaimtemplateStatus {
            /**
             * AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: string[];
            /**
             * The storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
             */
            allocatedResources?: {[key: string]: number | string};
            /**
             * Represents the actual resources of the underlying volume.
             */
            capacity?: {[key: string]: number | string};
            /**
             * Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
             */
            conditions?: outputs.monitoring.v1.PrometheusSpecStorageVolumeclaimtemplateStatusConditions[];
            /**
             * Phase represents the current phase of PersistentVolumeClaim.
             */
            phase?: string;
            /**
             * ResizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
             */
            resizeStatus?: string;
        }

        /**
         * PersistentVolumeClaimCondition contails details about state of pvc
         */
        export interface PrometheusSpecStorageVolumeclaimtemplateStatusConditions {
            /**
             * Last time we probed the condition.
             */
            lastProbeTime?: string;
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * Human-readable message indicating details about last transition.
             */
            message?: string;
            /**
             * Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
             */
            reason?: string;
            status: string;
            /**
             * PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
             */
            type: string;
        }

        /**
         * Thanos configuration allows configuring various aspects of a Prometheus server in a Thanos environment. 
         *  This section is experimental, it may change significantly without deprecation notice in any release. 
         *  This is experimental and may change significantly without backward compatibility in any release.
         */
        export interface PrometheusSpecThanos {
            /**
             * Thanos base image if other than default. Deprecated: use 'image' instead
             */
            baseImage?: string;
            /**
             * GRPCServerTLSConfig configures the gRPC server from which Thanos Querier reads recorded rule data. Note: Currently only the CAFile, CertFile, and KeyFile fields are supported. Maps to the '--grpc-server-tls-*' CLI args.
             */
            grpcServerTlsConfig?: outputs.monitoring.v1.PrometheusSpecThanosGrpcservertlsconfig;
            /**
             * Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Thanos is being configured.
             */
            image?: string;
            /**
             * ListenLocal makes the Thanos sidecar listen on loopback, so that it does not bind against the Pod IP.
             */
            listenLocal?: boolean;
            /**
             * LogFormat for Thanos sidecar to be configured with.
             */
            logFormat?: string;
            /**
             * LogLevel for Thanos sidecar to be configured with.
             */
            logLevel?: string;
            /**
             * MinTime for Thanos sidecar to be configured with. Option can be a constant time in RFC3339 format or time duration relative to current time, such as -1d or 2h45m. Valid duration units are ms, s, m, h, d, w, y.
             */
            minTime?: string;
            /**
             * ObjectStorageConfig configures object storage in Thanos. Alternative to ObjectStorageConfigFile, and lower order priority.
             */
            objectStorageConfig?: outputs.monitoring.v1.PrometheusSpecThanosObjectstorageconfig;
            /**
             * ObjectStorageConfigFile specifies the path of the object storage configuration file. When used alongside with ObjectStorageConfig, ObjectStorageConfigFile takes precedence.
             */
            objectStorageConfigFile?: string;
            /**
             * ReadyTimeout is the maximum time Thanos sidecar will wait for Prometheus to start. Eg 10m
             */
            readyTimeout?: string;
            /**
             * Resources defines the resource requirements for the Thanos sidecar. If not provided, no requests/limits will be set
             */
            resources?: outputs.monitoring.v1.PrometheusSpecThanosResources;
            /**
             * SHA of Thanos container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use 'image' instead.  The image digest can be specified as part of the image URL.
             */
            sha?: string;
            /**
             * Tag of Thanos sidecar container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set. Deprecated: use 'image' instead.  The image tag can be specified as part of the image URL.
             */
            tag?: string;
            /**
             * TracingConfig configures tracing in Thanos. This is an experimental feature, it may change in any upcoming release in a breaking way.
             */
            tracingConfig?: outputs.monitoring.v1.PrometheusSpecThanosTracingconfig;
            /**
             * TracingConfig specifies the path of the tracing configuration file. When used alongside with TracingConfig, TracingConfigFile takes precedence.
             */
            tracingConfigFile?: string;
            /**
             * Version describes the version of Thanos to use.
             */
            version?: string;
            /**
             * VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the thanos-sidecar container.
             */
            volumeMounts?: outputs.monitoring.v1.PrometheusSpecThanosVolumemounts[];
        }

        /**
         * GRPCServerTLSConfig configures the gRPC server from which Thanos Querier reads recorded rule data. Note: Currently only the CAFile, CertFile, and KeyFile fields are supported. Maps to the '--grpc-server-tls-*' CLI args.
         */
        export interface PrometheusSpecThanosGrpcservertlsconfig {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: outputs.monitoring.v1.PrometheusSpecThanosGrpcservertlsconfigCa;
            /**
             * Path to the CA cert in the Prometheus container to use for the targets.
             */
            caFile?: string;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: outputs.monitoring.v1.PrometheusSpecThanosGrpcservertlsconfigCert;
            /**
             * Path to the client cert file in the Prometheus container for the targets.
             */
            certFile?: string;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: boolean;
            /**
             * Path to the client key file in the Prometheus container for the targets.
             */
            keyFile?: string;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: outputs.monitoring.v1.PrometheusSpecThanosGrpcservertlsconfigKeysecret;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: string;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface PrometheusSpecThanosGrpcservertlsconfigCa {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.PrometheusSpecThanosGrpcservertlsconfigCaConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.PrometheusSpecThanosGrpcservertlsconfigCaSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PrometheusSpecThanosGrpcservertlsconfigCaConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PrometheusSpecThanosGrpcservertlsconfigCaSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface PrometheusSpecThanosGrpcservertlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.PrometheusSpecThanosGrpcservertlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.PrometheusSpecThanosGrpcservertlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PrometheusSpecThanosGrpcservertlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PrometheusSpecThanosGrpcservertlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface PrometheusSpecThanosGrpcservertlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * ObjectStorageConfig configures object storage in Thanos. Alternative to ObjectStorageConfigFile, and lower order priority.
         */
        export interface PrometheusSpecThanosObjectstorageconfig {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Resources defines the resource requirements for the Thanos sidecar. If not provided, no requests/limits will be set
         */
        export interface PrometheusSpecThanosResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * TracingConfig configures tracing in Thanos. This is an experimental feature, it may change in any upcoming release in a breaking way.
         */
        export interface PrometheusSpecThanosTracingconfig {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface PrometheusSpecThanosVolumemounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface PrometheusSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: string;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface PrometheusSpecTopologyspreadconstraints {
            /**
             * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
             */
            labelSelector?: outputs.monitoring.v1.PrometheusSpecTopologyspreadconstraintsLabelselector;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       |  if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: string;
        }

        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        export interface PrometheusSpecTopologyspreadconstraintsLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecTopologyspreadconstraintsLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecTopologyspreadconstraintsLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface PrometheusSpecVolumemounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: string;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface PrometheusSpecVolumes {
            /**
             * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            awsElasticBlockStore?: outputs.monitoring.v1.PrometheusSpecVolumesAwselasticblockstore;
            /**
             * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
             */
            azureDisk?: outputs.monitoring.v1.PrometheusSpecVolumesAzuredisk;
            /**
             * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
             */
            azureFile?: outputs.monitoring.v1.PrometheusSpecVolumesAzurefile;
            /**
             * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
             */
            cephfs?: outputs.monitoring.v1.PrometheusSpecVolumesCephfs;
            /**
             * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            cinder?: outputs.monitoring.v1.PrometheusSpecVolumesCinder;
            /**
             * ConfigMap represents a configMap that should populate this volume
             */
            configMap?: outputs.monitoring.v1.PrometheusSpecVolumesConfigmap;
            /**
             * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
             */
            csi?: outputs.monitoring.v1.PrometheusSpecVolumesCsi;
            /**
             * DownwardAPI represents downward API about the pod that should populate this volume
             */
            downwardAPI?: outputs.monitoring.v1.PrometheusSpecVolumesDownwardapi;
            /**
             * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            emptyDir?: outputs.monitoring.v1.PrometheusSpecVolumesEmptydir;
            /**
             * Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
             *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
             *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
             *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
             *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
             */
            ephemeral?: outputs.monitoring.v1.PrometheusSpecVolumesEphemeral;
            /**
             * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
             */
            fc?: outputs.monitoring.v1.PrometheusSpecVolumesFc;
            /**
             * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
             */
            flexVolume?: outputs.monitoring.v1.PrometheusSpecVolumesFlexvolume;
            /**
             * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
             */
            flocker?: outputs.monitoring.v1.PrometheusSpecVolumesFlocker;
            /**
             * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            gcePersistentDisk?: outputs.monitoring.v1.PrometheusSpecVolumesGcepersistentdisk;
            /**
             * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
             */
            gitRepo?: outputs.monitoring.v1.PrometheusSpecVolumesGitrepo;
            /**
             * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
             */
            glusterfs?: outputs.monitoring.v1.PrometheusSpecVolumesGlusterfs;
            /**
             * HostPath represents a "pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https"://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
             */
            hostPath?: outputs.monitoring.v1.PrometheusSpecVolumesHostpath;
            /**
             * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
             */
            iscsi?: outputs.monitoring.v1.PrometheusSpecVolumesIscsi;
            /**
             * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            nfs?: outputs.monitoring.v1.PrometheusSpecVolumesNfs;
            /**
             * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            persistentVolumeClaim?: outputs.monitoring.v1.PrometheusSpecVolumesPersistentvolumeclaim;
            /**
             * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
             */
            photonPersistentDisk?: outputs.monitoring.v1.PrometheusSpecVolumesPhotonpersistentdisk;
            /**
             * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
             */
            portworxVolume?: outputs.monitoring.v1.PrometheusSpecVolumesPortworxvolume;
            /**
             * Items for all in one resources secrets, configmaps, and downward API
             */
            projected?: outputs.monitoring.v1.PrometheusSpecVolumesProjected;
            /**
             * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
             */
            quobyte?: outputs.monitoring.v1.PrometheusSpecVolumesQuobyte;
            /**
             * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
             */
            rbd?: outputs.monitoring.v1.PrometheusSpecVolumesRbd;
            /**
             * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
             */
            scaleIO?: outputs.monitoring.v1.PrometheusSpecVolumesScaleio;
            /**
             * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secret?: outputs.monitoring.v1.PrometheusSpecVolumesSecret;
            /**
             * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
             */
            storageos?: outputs.monitoring.v1.PrometheusSpecVolumesStorageos;
            /**
             * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
             */
            vsphereVolume?: outputs.monitoring.v1.PrometheusSpecVolumesVspherevolume;
        }

        /**
         * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface PrometheusSpecVolumesAwselasticblockstore {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: string;
            /**
             * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition?: number;
            /**
             * Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly?: boolean;
            /**
             * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }

        /**
         * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        export interface PrometheusSpecVolumesAzuredisk {
            /**
             * Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode?: string;
            /**
             * The Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * The URI the data disk in the blob storage
             */
            diskURI: string;
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: string;
            /**
             * Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind?: string;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
        }

        /**
         * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        export interface PrometheusSpecVolumesAzurefile {
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
            /**
             * the name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * Share Name
             */
            shareName: string;
        }

        /**
         * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        export interface PrometheusSpecVolumesCephfs {
            /**
             * Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path?: string;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly?: boolean;
            /**
             * Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile?: string;
            /**
             * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretRef?: outputs.monitoring.v1.PrometheusSpecVolumesCephfsSecretref;
            /**
             * Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user?: string;
        }

        /**
         * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface PrometheusSpecVolumesCephfsSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface PrometheusSpecVolumesCinder {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType?: string;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly?: boolean;
            /**
             * Optional: points to a secret object containing parameters used to connect to OpenStack.
             */
            secretRef?: outputs.monitoring.v1.PrometheusSpecVolumesCinderSecretref;
            /**
             * volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }

        /**
         * Optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        export interface PrometheusSpecVolumesCinderSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * ConfigMap represents a configMap that should populate this volume
         */
        export interface PrometheusSpecVolumesConfigmap {
            /**
             * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: number;
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: outputs.monitoring.v1.PrometheusSpecVolumesConfigmapItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PrometheusSpecVolumesConfigmapItems {
            /**
             * The key to project.
             */
            key: string;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: number;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }

        /**
         * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        export interface PrometheusSpecVolumesCsi {
            /**
             * Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType?: string;
            /**
             * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
             */
            nodePublishSecretRef?: outputs.monitoring.v1.PrometheusSpecVolumesCsiNodepublishsecretref;
            /**
             * Specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly?: boolean;
            /**
             * VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes?: {[key: string]: string};
        }

        /**
         * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        export interface PrometheusSpecVolumesCsiNodepublishsecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * DownwardAPI represents downward API about the pod that should populate this volume
         */
        export interface PrometheusSpecVolumesDownwardapi {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: number;
            /**
             * Items is a list of downward API volume file
             */
            items?: outputs.monitoring.v1.PrometheusSpecVolumesDownwardapiItems[];
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface PrometheusSpecVolumesDownwardapiItems {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: outputs.monitoring.v1.PrometheusSpecVolumesDownwardapiItemsFieldref;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: outputs.monitoring.v1.PrometheusSpecVolumesDownwardapiItemsResourcefieldref;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface PrometheusSpecVolumesDownwardapiItemsFieldref {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface PrometheusSpecVolumesDownwardapiItemsResourcefieldref {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface PrometheusSpecVolumesEmptydir {
            /**
             * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium?: string;
            /**
             * Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit?: number | string;
        }

        /**
         * Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        export interface PrometheusSpecVolumesEphemeral {
            /**
             * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
             *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
             *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
             *  Required, must not be nil.
             */
            volumeClaimTemplate?: outputs.monitoring.v1.PrometheusSpecVolumesEphemeralVolumeclaimtemplate;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         *  Required, must not be nil.
         */
        export interface PrometheusSpecVolumesEphemeralVolumeclaimtemplate {
            /**
             * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
             */
            metadata?: {[key: string]: any};
            /**
             * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
             */
            spec: outputs.monitoring.v1.PrometheusSpecVolumesEphemeralVolumeclaimtemplateSpec;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        export interface PrometheusSpecVolumesEphemeralVolumeclaimtemplateSpec {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: string[];
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
             */
            dataSource?: outputs.monitoring.v1.PrometheusSpecVolumesEphemeralVolumeclaimtemplateSpecDatasource;
            /**
             * Specifies the object from which to populate the volume with data, if a "non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef": * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: outputs.monitoring.v1.PrometheusSpecVolumesEphemeralVolumeclaimtemplateSpecDatasourceref;
            /**
             * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: outputs.monitoring.v1.PrometheusSpecVolumesEphemeralVolumeclaimtemplateSpecResources;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: outputs.monitoring.v1.PrometheusSpecVolumesEphemeralVolumeclaimtemplateSpecSelector;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: string;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: string;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface PrometheusSpecVolumesEphemeralVolumeclaimtemplateSpecDatasource {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a "non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef": * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface PrometheusSpecVolumesEphemeralVolumeclaimtemplateSpecDatasourceref {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface PrometheusSpecVolumesEphemeralVolumeclaimtemplateSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface PrometheusSpecVolumesEphemeralVolumeclaimtemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.PrometheusSpecVolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PrometheusSpecVolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface PrometheusSpecVolumesFc {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: string;
            /**
             * Optional: FC target lun number
             */
            lun?: number;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
            /**
             * Optional: FC target worldwide names (WWNs)
             */
            targetWWNs?: string[];
            /**
             * Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids?: string[];
        }

        /**
         * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        export interface PrometheusSpecVolumesFlexvolume {
            /**
             * Driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType?: string;
            /**
             * Optional: Extra command options if any.
             */
            options?: {[key: string]: string};
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
            /**
             * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
             */
            secretRef?: outputs.monitoring.v1.PrometheusSpecVolumesFlexvolumeSecretref;
        }

        /**
         * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        export interface PrometheusSpecVolumesFlexvolumeSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        export interface PrometheusSpecVolumesFlocker {
            /**
             * Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName?: string;
            /**
             * UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID?: string;
        }

        /**
         * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface PrometheusSpecVolumesGcepersistentdisk {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: string;
            /**
             * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition?: number;
            /**
             * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly?: boolean;
        }

        /**
         * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        export interface PrometheusSpecVolumesGitrepo {
            /**
             * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory?: string;
            /**
             * Repository URL
             */
            repository: string;
            /**
             * Commit hash for the specified revision.
             */
            revision?: string;
        }

        /**
         * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface PrometheusSpecVolumesGlusterfs {
            /**
             * EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * ReadOnly here will force the Glusterfs volume to be mounted with "read-only permissions. Defaults to false. More info: https"://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly?: boolean;
        }

        /**
         * HostPath represents a "pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https"://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        export interface PrometheusSpecVolumesHostpath {
            /**
             * Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type?: string;
        }

        /**
         * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface PrometheusSpecVolumesIscsi {
            /**
             * whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery?: boolean;
            /**
             * whether support iSCSI Session CHAP authentication
             */
            chapAuthSession?: boolean;
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: string;
            /**
             * Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName?: string;
            /**
             * Target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface?: string;
            /**
             * iSCSI Target Lun number.
             */
            lun: number;
            /**
             * iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals?: string[];
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly?: boolean;
            /**
             * CHAP Secret for iSCSI target and initiator authentication
             */
            secretRef?: outputs.monitoring.v1.PrometheusSpecVolumesIscsiSecretref;
            /**
             * iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }

        /**
         * CHAP Secret for iSCSI target and initiator authentication
         */
        export interface PrometheusSpecVolumesIscsiSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface PrometheusSpecVolumesNfs {
            /**
             * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * ReadOnly here will force the NFS export to be mounted with "read-only permissions. Defaults to false. More info: https"://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly?: boolean;
            /**
             * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface PrometheusSpecVolumesPersistentvolumeclaim {
            /**
             * ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly?: boolean;
        }

        /**
         * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        export interface PrometheusSpecVolumesPhotonpersistentdisk {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: string;
            /**
             * ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }

        /**
         * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        export interface PrometheusSpecVolumesPortworxvolume {
            /**
             * FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: string;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
            /**
             * VolumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }

        /**
         * Items for all in one resources secrets, configmaps, and downward API
         */
        export interface PrometheusSpecVolumesProjected {
            /**
             * Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: number;
            /**
             * list of volume projections
             */
            sources?: outputs.monitoring.v1.PrometheusSpecVolumesProjectedSources[];
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface PrometheusSpecVolumesProjectedSources {
            /**
             * information about the configMap data to project
             */
            configMap?: outputs.monitoring.v1.PrometheusSpecVolumesProjectedSourcesConfigmap;
            /**
             * information about the downwardAPI data to project
             */
            downwardAPI?: outputs.monitoring.v1.PrometheusSpecVolumesProjectedSourcesDownwardapi;
            /**
             * information about the secret data to project
             */
            secret?: outputs.monitoring.v1.PrometheusSpecVolumesProjectedSourcesSecret;
            /**
             * information about the serviceAccountToken data to project
             */
            serviceAccountToken?: outputs.monitoring.v1.PrometheusSpecVolumesProjectedSourcesServiceaccounttoken;
        }

        /**
         * information about the configMap data to project
         */
        export interface PrometheusSpecVolumesProjectedSourcesConfigmap {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: outputs.monitoring.v1.PrometheusSpecVolumesProjectedSourcesConfigmapItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PrometheusSpecVolumesProjectedSourcesConfigmapItems {
            /**
             * The key to project.
             */
            key: string;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: number;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }

        /**
         * information about the downwardAPI data to project
         */
        export interface PrometheusSpecVolumesProjectedSourcesDownwardapi {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: outputs.monitoring.v1.PrometheusSpecVolumesProjectedSourcesDownwardapiItems[];
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface PrometheusSpecVolumesProjectedSourcesDownwardapiItems {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: outputs.monitoring.v1.PrometheusSpecVolumesProjectedSourcesDownwardapiItemsFieldref;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: outputs.monitoring.v1.PrometheusSpecVolumesProjectedSourcesDownwardapiItemsResourcefieldref;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface PrometheusSpecVolumesProjectedSourcesDownwardapiItemsFieldref {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface PrometheusSpecVolumesProjectedSourcesDownwardapiItemsResourcefieldref {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * information about the secret data to project
         */
        export interface PrometheusSpecVolumesProjectedSourcesSecret {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: outputs.monitoring.v1.PrometheusSpecVolumesProjectedSourcesSecretItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PrometheusSpecVolumesProjectedSourcesSecretItems {
            /**
             * The key to project.
             */
            key: string;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: number;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }

        /**
         * information about the serviceAccountToken data to project
         */
        export interface PrometheusSpecVolumesProjectedSourcesServiceaccounttoken {
            /**
             * Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: string;
            /**
             * ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: number;
            /**
             * Path is the path relative to the mount point of the file to project the token into.
             */
            path: string;
        }

        /**
         * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        export interface PrometheusSpecVolumesQuobyte {
            /**
             * Group to map volume access to Default is no group
             */
            group?: string;
            /**
             * ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly?: boolean;
            /**
             * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: string;
            /**
             * Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant?: string;
            /**
             * User to map volume access to Defaults to serivceaccount user
             */
            user?: string;
            /**
             * Volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }

        /**
         * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface PrometheusSpecVolumesRbd {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: string;
            /**
             * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring?: string;
            /**
             * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool?: string;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly?: boolean;
            /**
             * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            secretRef?: outputs.monitoring.v1.PrometheusSpecVolumesRbdSecretref;
            /**
             * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user?: string;
        }

        /**
         * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface PrometheusSpecVolumesRbdSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        export interface PrometheusSpecVolumesScaleio {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType?: string;
            /**
             * The host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * The name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain?: string;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
            /**
             * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
             */
            secretRef: outputs.monitoring.v1.PrometheusSpecVolumesScaleioSecretref;
            /**
             * Flag to enable/disable SSL communication with Gateway, default false
             */
            sslEnabled?: boolean;
            /**
             * Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode?: string;
            /**
             * The ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool?: string;
            /**
             * The name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * The name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName?: string;
        }

        /**
         * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        export interface PrometheusSpecVolumesScaleioSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface PrometheusSpecVolumesSecret {
            /**
             * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: number;
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: outputs.monitoring.v1.PrometheusSpecVolumesSecretItems[];
            /**
             * Specify whether the Secret or its keys must be defined
             */
            optional?: boolean;
            /**
             * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PrometheusSpecVolumesSecretItems {
            /**
             * The key to project.
             */
            key: string;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: number;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }

        /**
         * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        export interface PrometheusSpecVolumesStorageos {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: string;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
            /**
             * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
             */
            secretRef?: outputs.monitoring.v1.PrometheusSpecVolumesStorageosSecretref;
            /**
             * VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName?: string;
            /**
             * VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace?: string;
        }

        /**
         * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        export interface PrometheusSpecVolumesStorageosSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        export interface PrometheusSpecVolumesVspherevolume {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: string;
            /**
             * Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID?: string;
            /**
             * Storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName?: string;
            /**
             * Path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }

        /**
         * WebSpec defines the web command line flags when starting Prometheus.
         */
        export interface PrometheusSpecWeb {
            /**
             * The prometheus web page title
             */
            pageTitle?: string;
            /**
             * WebTLSConfig defines the TLS parameters for HTTPS.
             */
            tlsConfig?: outputs.monitoring.v1.PrometheusSpecWebTlsconfig;
        }

        /**
         * WebTLSConfig defines the TLS parameters for HTTPS.
         */
        export interface PrometheusSpecWebTlsconfig {
            /**
             * Contains the TLS certificate for the server.
             */
            cert: outputs.monitoring.v1.PrometheusSpecWebTlsconfigCert;
            /**
             * List of supported cipher suites for TLS versions up to TLS 1.2. If empty, Go default cipher suites are used. Available cipher suites are documented in the go documentation: https://golang.org/pkg/crypto/tls/#pkg-constants
             */
            cipherSuites?: string[];
            /**
             * Server policy for client authentication. Maps to ClientAuth Policies. For more detail on clientAuth options: https://golang.org/pkg/crypto/tls/#ClientAuthType
             */
            clientAuthType?: string;
            /**
             * Contains the CA certificate for client certificate authentication to the server.
             */
            client_ca?: outputs.monitoring.v1.PrometheusSpecWebTlsconfigClient_ca;
            /**
             * Elliptic curves that will be used in an ECDHE handshake, in preference order. Available curves are documented in the go documentation: https://golang.org/pkg/crypto/tls/#CurveID
             */
            curvePreferences?: string[];
            /**
             * Secret containing the TLS key for the server.
             */
            keySecret: outputs.monitoring.v1.PrometheusSpecWebTlsconfigKeysecret;
            /**
             * Maximum TLS version that is acceptable. Defaults to TLS13.
             */
            maxVersion?: string;
            /**
             * Minimum TLS version that is acceptable. Defaults to TLS12.
             */
            minVersion?: string;
            /**
             * Controls whether the server selects the client's most preferred cipher suite, or the server's most preferred cipher suite. If true then the server's preference, as expressed in the order of elements in cipherSuites, is used.
             */
            preferServerCipherSuites?: boolean;
        }

        /**
         * Contains the TLS certificate for the server.
         */
        export interface PrometheusSpecWebTlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.PrometheusSpecWebTlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.PrometheusSpecWebTlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PrometheusSpecWebTlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PrometheusSpecWebTlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Contains the CA certificate for client certificate authentication to the server.
         */
        export interface PrometheusSpecWebTlsconfigClient_ca {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.PrometheusSpecWebTlsconfigClient_caConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.PrometheusSpecWebTlsconfigClient_caSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PrometheusSpecWebTlsconfigClient_caConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PrometheusSpecWebTlsconfigClient_caSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the TLS key for the server.
         */
        export interface PrometheusSpecWebTlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Most recent observed status of the Prometheus cluster. R"ead-only. More info: https"://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface PrometheusStatus {
            /**
             * Total number of available pods (ready for at least minReadySeconds) targeted by this Prometheus deployment.
             */
            availableReplicas: number;
            /**
             * The current state of the Prometheus deployment.
             */
            conditions?: outputs.monitoring.v1.PrometheusStatusConditions[];
            /**
             * Represents whether any actions on the underlying managed objects are being performed. Only delete actions will be performed.
             */
            paused: boolean;
            /**
             * Total number of non-terminated pods targeted by this Prometheus deployment (their labels match the selector).
             */
            replicas: number;
            /**
             * The list has one entry per shard. Each entry provides a summary of the shard status.
             */
            shardStatuses?: outputs.monitoring.v1.PrometheusStatusShardstatuses[];
            /**
             * Total number of unavailable pods targeted by this Prometheus deployment.
             */
            unavailableReplicas: number;
            /**
             * Total number of non-terminated pods targeted by this Prometheus deployment that have the desired version spec.
             */
            updatedReplicas: number;
        }

        /**
         * PrometheusCondition represents the state of the resources associated with the Prometheus resource.
         */
        export interface PrometheusStatusConditions {
            /**
             * lastTransitionTime is the time of the last update to the current status property.
             */
            lastTransitionTime: string;
            /**
             * Human-readable message indicating details for the condition's last transition.
             */
            message?: string;
            /**
             * Reason for the condition's last transition.
             */
            reason?: string;
            /**
             * status of the condition.
             */
            status: string;
            /**
             * Type of the condition being reported.
             */
            type: string;
        }

        export interface PrometheusStatusShardstatuses {
            /**
             * Total number of available pods (ready for at least minReadySeconds) targeted by this shard.
             */
            availableReplicas: number;
            /**
             * Total number of pods targeted by this shard.
             */
            replicas: number;
            /**
             * Identifier of the shard.
             */
            shardID: string;
            /**
             * Total number of unavailable pods targeted by this shard.
             */
            unavailableReplicas: number;
            /**
             * Total number of non-terminated pods targeted by this shard that have the desired spec.
             */
            updatedReplicas: number;
        }

        /**
         * Specification of desired Service selection for target discovery by Prometheus.
         */
        export interface ServiceMonitorSpec {
            /**
             * A list of endpoints allowed as part of this ServiceMonitor.
             */
            endpoints: outputs.monitoring.v1.ServiceMonitorSpecEndpoints[];
            /**
             * Chooses the label of the Kubernetes `Endpoints`. Its value will be used for the `job`-label's value of the created metrics. 
             *  Default & fallback value: the name of the respective Kubernetes `Endpoint`.
             */
            jobLabel?: string;
            /**
             * Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
             */
            labelLimit?: number;
            /**
             * Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
             */
            labelNameLengthLimit?: number;
            /**
             * Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
             */
            labelValueLengthLimit?: number;
            /**
             * Selector to select which namespaces the Kubernetes Endpoints objects are discovered from.
             */
            namespaceSelector?: outputs.monitoring.v1.ServiceMonitorSpecNamespaceselector;
            /**
             * PodTargetLabels transfers labels on the Kubernetes `Pod` onto the created metrics.
             */
            podTargetLabels?: string[];
            /**
             * SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
             */
            sampleLimit?: number;
            /**
             * Selector to select Endpoints objects.
             */
            selector: outputs.monitoring.v1.ServiceMonitorSpecSelector;
            /**
             * TargetLabels transfers labels from the Kubernetes `Service` onto the created metrics.
             */
            targetLabels?: string[];
            /**
             * TargetLimit defines a limit on the number of scraped targets that will be accepted.
             */
            targetLimit?: number;
        }

        /**
         * Endpoint defines a scrapeable endpoint serving Prometheus metrics.
         */
        export interface ServiceMonitorSpecEndpoints {
            /**
             * Authorization section for this endpoint
             */
            authorization?: outputs.monitoring.v1.ServiceMonitorSpecEndpointsAuthorization;
            /**
             * BasicAuth allow an endpoint to authenticate over basic authentication More info: https://prometheus.io/docs/operating/configuration/#endpoints
             */
            basicAuth?: outputs.monitoring.v1.ServiceMonitorSpecEndpointsBasicauth;
            /**
             * File to read bearer token for scraping targets.
             */
            bearerTokenFile?: string;
            /**
             * Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the service monitor and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: outputs.monitoring.v1.ServiceMonitorSpecEndpointsBearertokensecret;
            /**
             * FollowRedirects configures whether scrape requests follow HTTP 3xx redirects.
             */
            followRedirects?: boolean;
            /**
             * HonorLabels chooses the metric's labels on collisions with target labels.
             */
            honorLabels?: boolean;
            /**
             * HonorTimestamps controls whether Prometheus respects the timestamps present in scraped data.
             */
            honorTimestamps?: boolean;
            /**
             * Interval at which metrics should be scraped If not specified Prometheus' global scrape interval is used.
             */
            interval?: string;
            /**
             * MetricRelabelConfigs to apply to samples before ingestion.
             */
            metricRelabelings?: outputs.monitoring.v1.ServiceMonitorSpecEndpointsMetricrelabelings[];
            /**
             * OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.
             */
            oauth2?: outputs.monitoring.v1.ServiceMonitorSpecEndpointsOauth2;
            /**
             * Optional HTTP URL parameters
             */
            params?: {[key: string]: string[]};
            /**
             * HTTP path to scrape for metrics.
             */
            path?: string;
            /**
             * Name of the service port this endpoint refers to. Mutually exclusive with targetPort.
             */
            port?: string;
            /**
             * ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.
             */
            proxyUrl?: string;
            /**
             * RelabelConfigs to apply to samples before scraping. Prometheus Operator automatically adds relabelings for a few standard Kubernetes fields. The original scrape job's name is available via the `__tmp_prometheus_job_name` label. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
             */
            relabelings?: outputs.monitoring.v1.ServiceMonitorSpecEndpointsRelabelings[];
            /**
             * HTTP scheme to use for scraping.
             */
            scheme?: string;
            /**
             * Timeout after which the scrape is ended If not specified, the Prometheus global scrape timeout is used unless it is less than `Interval` in which the latter is used.
             */
            scrapeTimeout?: string;
            /**
             * Name or number of the target port of the Pod behind the Service, the port must be specified with container port property. Mutually exclusive with port.
             */
            targetPort?: number | string;
            /**
             * TLS configuration to use when scraping the endpoint
             */
            tlsConfig?: outputs.monitoring.v1.ServiceMonitorSpecEndpointsTlsconfig;
        }

        /**
         * Authorization section for this endpoint
         */
        export interface ServiceMonitorSpecEndpointsAuthorization {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: outputs.monitoring.v1.ServiceMonitorSpecEndpointsAuthorizationCredentials;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: string;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface ServiceMonitorSpecEndpointsAuthorizationCredentials {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * BasicAuth allow an endpoint to authenticate over basic authentication More info: https://prometheus.io/docs/operating/configuration/#endpoints
         */
        export interface ServiceMonitorSpecEndpointsBasicauth {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: outputs.monitoring.v1.ServiceMonitorSpecEndpointsBasicauthPassword;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: outputs.monitoring.v1.ServiceMonitorSpecEndpointsBasicauthUsername;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface ServiceMonitorSpecEndpointsBasicauthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface ServiceMonitorSpecEndpointsBasicauthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the service monitor and accessible by the Prometheus Operator.
         */
        export interface ServiceMonitorSpecEndpointsBearertokensecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
         */
        export interface ServiceMonitorSpecEndpointsMetricrelabelings {
            /**
             * Action to perform based on regex matching. Default is 'replace'
             */
            action?: string;
            /**
             * Modulus to take of the hash of the source label values.
             */
            modulus?: number;
            /**
             * Regular expression against which the extracted value is matched. Default is '(.*)'
             */
            regex?: string;
            /**
             * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
             */
            replacement?: string;
            /**
             * Separator placed between concatenated source label values. default is ';'.
             */
            separator?: string;
            /**
             * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
             */
            sourceLabels?: string[];
            /**
             * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
             */
            targetLabel?: string;
        }
        /**
         * serviceMonitorSpecEndpointsMetricrelabelingsProvideDefaults sets the appropriate defaults for ServiceMonitorSpecEndpointsMetricrelabelings
         */
        export function serviceMonitorSpecEndpointsMetricrelabelingsProvideDefaults(val: ServiceMonitorSpecEndpointsMetricrelabelings): ServiceMonitorSpecEndpointsMetricrelabelings {
            return {
                ...val,
                action: (val.action) ?? "replace",
            };
        }

        /**
         * OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.
         */
        export interface ServiceMonitorSpecEndpointsOauth2 {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: outputs.monitoring.v1.ServiceMonitorSpecEndpointsOauth2Clientid;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: outputs.monitoring.v1.ServiceMonitorSpecEndpointsOauth2Clientsecret;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: {[key: string]: string};
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: string[];
            /**
             * The URL to fetch the token from
             */
            tokenUrl: string;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface ServiceMonitorSpecEndpointsOauth2Clientid {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.ServiceMonitorSpecEndpointsOauth2ClientidConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.ServiceMonitorSpecEndpointsOauth2ClientidSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface ServiceMonitorSpecEndpointsOauth2ClientidConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface ServiceMonitorSpecEndpointsOauth2ClientidSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface ServiceMonitorSpecEndpointsOauth2Clientsecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
         */
        export interface ServiceMonitorSpecEndpointsRelabelings {
            /**
             * Action to perform based on regex matching. Default is 'replace'
             */
            action?: string;
            /**
             * Modulus to take of the hash of the source label values.
             */
            modulus?: number;
            /**
             * Regular expression against which the extracted value is matched. Default is '(.*)'
             */
            regex?: string;
            /**
             * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
             */
            replacement?: string;
            /**
             * Separator placed between concatenated source label values. default is ';'.
             */
            separator?: string;
            /**
             * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
             */
            sourceLabels?: string[];
            /**
             * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
             */
            targetLabel?: string;
        }
        /**
         * serviceMonitorSpecEndpointsRelabelingsProvideDefaults sets the appropriate defaults for ServiceMonitorSpecEndpointsRelabelings
         */
        export function serviceMonitorSpecEndpointsRelabelingsProvideDefaults(val: ServiceMonitorSpecEndpointsRelabelings): ServiceMonitorSpecEndpointsRelabelings {
            return {
                ...val,
                action: (val.action) ?? "replace",
            };
        }

        /**
         * TLS configuration to use when scraping the endpoint
         */
        export interface ServiceMonitorSpecEndpointsTlsconfig {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: outputs.monitoring.v1.ServiceMonitorSpecEndpointsTlsconfigCa;
            /**
             * Path to the CA cert in the Prometheus container to use for the targets.
             */
            caFile?: string;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: outputs.monitoring.v1.ServiceMonitorSpecEndpointsTlsconfigCert;
            /**
             * Path to the client cert file in the Prometheus container for the targets.
             */
            certFile?: string;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: boolean;
            /**
             * Path to the client key file in the Prometheus container for the targets.
             */
            keyFile?: string;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: outputs.monitoring.v1.ServiceMonitorSpecEndpointsTlsconfigKeysecret;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: string;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface ServiceMonitorSpecEndpointsTlsconfigCa {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.ServiceMonitorSpecEndpointsTlsconfigCaConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.ServiceMonitorSpecEndpointsTlsconfigCaSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface ServiceMonitorSpecEndpointsTlsconfigCaConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface ServiceMonitorSpecEndpointsTlsconfigCaSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface ServiceMonitorSpecEndpointsTlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.ServiceMonitorSpecEndpointsTlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.ServiceMonitorSpecEndpointsTlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface ServiceMonitorSpecEndpointsTlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface ServiceMonitorSpecEndpointsTlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface ServiceMonitorSpecEndpointsTlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selector to select which namespaces the Kubernetes Endpoints objects are discovered from.
         */
        export interface ServiceMonitorSpecNamespaceselector {
            /**
             * Boolean describing whether all namespaces are selected in contrast to a list restricting them.
             */
            any?: boolean;
            /**
             * List of namespace names to select from.
             */
            matchNames?: string[];
        }

        /**
         * Selector to select Endpoints objects.
         */
        export interface ServiceMonitorSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.ServiceMonitorSpecSelectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ServiceMonitorSpecSelectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Specification of the desired behavior of the ThanosRuler cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ThanosRulerSpec {
            /**
             * If specified, the pod's scheduling constraints.
             */
            affinity?: outputs.monitoring.v1.ThanosRulerSpecAffinity;
            /**
             * AlertDropLabels configure the label names which should be dropped in ThanosRuler alerts. The replica label `thanos_ruler_replica` will always be dropped in alerts.
             */
            alertDropLabels?: string[];
            /**
             * The external Query URL the Thanos Ruler will set in the 'Source' field of all alerts. Maps to the '--alert.query-url' CLI arg.
             */
            alertQueryUrl?: string;
            /**
             * AlertRelabelConfigFile specifies the path of the alert relabeling configuration file. When used alongside with AlertRelabelConfigs, alertRelabelConfigFile takes precedence.
             */
            alertRelabelConfigFile?: string;
            /**
             * AlertRelabelConfigs configures alert relabeling in ThanosRuler. Alert relabel configurations must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs Alternative to AlertRelabelConfigFile, and lower order priority.
             */
            alertRelabelConfigs?: outputs.monitoring.v1.ThanosRulerSpecAlertrelabelconfigs;
            /**
             * Define configuration for connecting to alertmanager.  Only available with thanos v0.10.0 and higher.  Maps to the `alertmanagers.config` arg.
             */
            alertmanagersConfig?: outputs.monitoring.v1.ThanosRulerSpecAlertmanagersconfig;
            /**
             * Define URLs to send alerts to Alertmanager.  For Thanos v0.10.0 and higher, AlertManagersConfig should be used instead.  Note: this field will be ignored if AlertManagersConfig is specified. Maps to the `alertmanagers.url` arg.
             */
            alertmanagersUrl?: string[];
            /**
             * Containers allows injecting additional containers or modifying operator generated containers. This can be used to allow adding an authentication proxy to a ThanosRuler pod or to change the behavior of an operator generated container. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `thanos-ruler` and `config-reloader`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
             */
            containers?: outputs.monitoring.v1.ThanosRulerSpecContainers[];
            /**
             * EnforcedNamespaceLabel enforces adding a namespace label of origin for each alert and metric that is user created. The label value will always be the namespace of the object that is being created.
             */
            enforcedNamespaceLabel?: string;
            /**
             * Interval between consecutive evaluations.
             */
            evaluationInterval?: string;
            /**
             * List of references to PrometheusRule objects to be excluded from enforcing a namespace label of origin. Applies only if enforcedNamespaceLabel set to true.
             */
            excludedFromEnforcement?: outputs.monitoring.v1.ThanosRulerSpecExcludedfromenforcement[];
            /**
             * The external URL the Thanos Ruler instances will be available under. This is necessary to generate correct URLs. This is necessary if Thanos Ruler is not served from root of a DNS name.
             */
            externalPrefix?: string;
            /**
             * GRPCServerTLSConfig configures the gRPC server from which Thanos Querier reads recorded rule data. Note: Currently only the CAFile, CertFile, and KeyFile fields are supported. Maps to the '--grpc-server-tls-*' CLI args.
             */
            grpcServerTlsConfig?: outputs.monitoring.v1.ThanosRulerSpecGrpcservertlsconfig;
            /**
             * Pods' hostAliases configuration
             */
            hostAliases?: outputs.monitoring.v1.ThanosRulerSpecHostaliases[];
            /**
             * Thanos container image URL.
             */
            image?: string;
            /**
             * An optional list of references to secrets in the same namespace to use for pulling thanos images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets?: outputs.monitoring.v1.ThanosRulerSpecImagepullsecrets[];
            /**
             * InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the ThanosRuler configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
             */
            initContainers?: outputs.monitoring.v1.ThanosRulerSpecInitcontainers[];
            /**
             * Labels configure the external label pairs to ThanosRuler. A default replica label `thanos_ruler_replica` will be always added  as a label with the value of the pod's name and it will be dropped in the alerts.
             */
            labels?: {[key: string]: string};
            /**
             * ListenLocal makes the Thanos ruler listen on loopback, so that it does not bind against the Pod IP.
             */
            listenLocal?: boolean;
            /**
             * Log format for ThanosRuler to be configured with.
             */
            logFormat?: string;
            /**
             * Log level for ThanosRuler to be configured with.
             */
            logLevel?: string;
            /**
             * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) This is an alpha field and requires enabling StatefulSetMinReadySeconds feature gate.
             */
            minReadySeconds?: number;
            /**
             * Define which Nodes the Pods are scheduled on.
             */
            nodeSelector?: {[key: string]: string};
            /**
             * ObjectStorageConfig configures object storage in Thanos. Alternative to ObjectStorageConfigFile, and lower order priority.
             */
            objectStorageConfig?: outputs.monitoring.v1.ThanosRulerSpecObjectstorageconfig;
            /**
             * ObjectStorageConfigFile specifies the path of the object storage configuration file. When used alongside with ObjectStorageConfig, ObjectStorageConfigFile takes precedence.
             */
            objectStorageConfigFile?: string;
            /**
             * When a ThanosRuler deployment is paused, no actions except for deletion will be performed on the underlying objects.
             */
            paused?: boolean;
            /**
             * PodMetadata contains Labels and Annotations gets propagated to the thanos ruler pods.
             */
            podMetadata?: outputs.monitoring.v1.ThanosRulerSpecPodmetadata;
            /**
             * Port name used for the pods and governing service. This defaults to web
             */
            portName?: string;
            /**
             * Priority class assigned to the Pods
             */
            priorityClassName?: string;
            /**
             * PrometheusRulesExcludedFromEnforce - list of Prometheus rules to be excluded from enforcing of adding namespace labels. Works only if enforcedNamespaceLabel set to true. Make sure both ruleNamespace and ruleName are set for each pair Deprecated: use excludedFromEnforcement instead.
             */
            prometheusRulesExcludedFromEnforce?: outputs.monitoring.v1.ThanosRulerSpecPrometheusrulesexcludedfromenforce[];
            /**
             * Define configuration for connecting to thanos query instances. If this is defined, the QueryEndpoints field will be ignored. Maps to the `query.config` CLI argument. Only available with thanos v0.11.0 and higher.
             */
            queryConfig?: outputs.monitoring.v1.ThanosRulerSpecQueryconfig;
            /**
             * QueryEndpoints defines Thanos querier endpoints from which to query metrics. Maps to the --query flag of thanos ruler.
             */
            queryEndpoints?: string[];
            /**
             * Number of thanos ruler instances to deploy.
             */
            replicas?: number;
            /**
             * Resources defines the resource requirements for single Pods. If not provided, no requests/limits will be set
             */
            resources?: outputs.monitoring.v1.ThanosRulerSpecResources;
            /**
             * Time duration ThanosRuler shall retain data for. Default is '24h', and must match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds minutes hours days weeks years).
             */
            retention?: string;
            /**
             * The route prefix ThanosRuler registers HTTP handlers for. This allows thanos UI to be served on a sub-path.
             */
            routePrefix?: string;
            /**
             * Namespaces to be selected for Rules discovery. If unspecified, only the same namespace as the ThanosRuler object is in is used.
             */
            ruleNamespaceSelector?: outputs.monitoring.v1.ThanosRulerSpecRulenamespaceselector;
            /**
             * A label selector to select which PrometheusRules to mount for alerting and recording.
             */
            ruleSelector?: outputs.monitoring.v1.ThanosRulerSpecRuleselector;
            /**
             * SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.
             */
            securityContext?: outputs.monitoring.v1.ThanosRulerSpecSecuritycontext;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run the Thanos Ruler Pods.
             */
            serviceAccountName?: string;
            /**
             * Storage spec to specify how storage shall be used.
             */
            storage?: outputs.monitoring.v1.ThanosRulerSpecStorage;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: outputs.monitoring.v1.ThanosRulerSpecTolerations[];
            /**
             * If specified, the pod's topology spread constraints.
             */
            topologySpreadConstraints?: outputs.monitoring.v1.ThanosRulerSpecTopologyspreadconstraints[];
            /**
             * TracingConfig configures tracing in Thanos. This is an experimental feature, it may change in any upcoming release in a breaking way.
             */
            tracingConfig?: outputs.monitoring.v1.ThanosRulerSpecTracingconfig;
            /**
             * Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.
             */
            volumes?: outputs.monitoring.v1.ThanosRulerSpecVolumes[];
        }
        /**
         * thanosRulerSpecProvideDefaults sets the appropriate defaults for ThanosRulerSpec
         */
        export function thanosRulerSpecProvideDefaults(val: ThanosRulerSpec): ThanosRulerSpec {
            return {
                ...val,
                evaluationInterval: (val.evaluationInterval) ?? "15s",
                retention: (val.retention) ?? "24h",
            };
        }

        /**
         * If specified, the pod's scheduling constraints.
         */
        export interface ThanosRulerSpecAffinity {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: outputs.monitoring.v1.ThanosRulerSpecAffinityNodeaffinity;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodaffinity;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodantiaffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ThanosRulerSpecAffinityNodeaffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.monitoring.v1.ThanosRulerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.monitoring.v1.ThanosRulerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ThanosRulerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: outputs.monitoring.v1.ThanosRulerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ThanosRulerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.monitoring.v1.ThanosRulerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.monitoring.v1.ThanosRulerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ThanosRulerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ThanosRulerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface ThanosRulerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.monitoring.v1.ThanosRulerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ThanosRulerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.monitoring.v1.ThanosRulerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.monitoring.v1.ThanosRulerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ThanosRulerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ThanosRulerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ThanosRulerSpecAffinityPodaffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ThanosRulerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.monitoring.v1.ThanosRulerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ThanosRulerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ThanosRulerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ThanosRulerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface ThanosRulerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ThanosRulerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ThanosRulerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ThanosRulerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ThanosRulerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface ThanosRulerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ThanosRulerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ThanosRulerSpecAffinityPodantiaffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ThanosRulerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.monitoring.v1.ThanosRulerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ThanosRulerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ThanosRulerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ThanosRulerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface ThanosRulerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ThanosRulerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ThanosRulerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ThanosRulerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ThanosRulerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface ThanosRulerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.ThanosRulerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ThanosRulerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Define configuration for connecting to alertmanager.  Only available with thanos v0.10.0 and higher.  Maps to the `alertmanagers.config` arg.
         */
        export interface ThanosRulerSpecAlertmanagersconfig {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * AlertRelabelConfigs configures alert relabeling in ThanosRuler. Alert relabel configurations must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs Alternative to AlertRelabelConfigFile, and lower order priority.
         */
        export interface ThanosRulerSpecAlertrelabelconfigs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface ThanosRulerSpecContainers {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: string[];
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: outputs.monitoring.v1.ThanosRulerSpecContainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: outputs.monitoring.v1.ThanosRulerSpecContainersEnvfrom[];
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: string;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: outputs.monitoring.v1.ThanosRulerSpecContainersLifecycle;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: outputs.monitoring.v1.ThanosRulerSpecContainersLivenessprobe;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: outputs.monitoring.v1.ThanosRulerSpecContainersPorts[];
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: outputs.monitoring.v1.ThanosRulerSpecContainersReadinessprobe;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: outputs.monitoring.v1.ThanosRulerSpecContainersResources;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: outputs.monitoring.v1.ThanosRulerSpecContainersSecuritycontext;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during "steady-state operation. This cannot be updated. More info: https"://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: outputs.monitoring.v1.ThanosRulerSpecContainersStartupprobe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: outputs.monitoring.v1.ThanosRulerSpecContainersVolumedevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: outputs.monitoring.v1.ThanosRulerSpecContainersVolumemounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface ThanosRulerSpecContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: string;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.monitoring.v1.ThanosRulerSpecContainersEnvValuefrom;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface ThanosRulerSpecContainersEnvValuefrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.monitoring.v1.ThanosRulerSpecContainersEnvValuefromConfigmapkeyref;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: outputs.monitoring.v1.ThanosRulerSpecContainersEnvValuefromFieldref;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: outputs.monitoring.v1.ThanosRulerSpecContainersEnvValuefromResourcefieldref;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: outputs.monitoring.v1.ThanosRulerSpecContainersEnvValuefromSecretkeyref;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface ThanosRulerSpecContainersEnvValuefromConfigmapkeyref {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface ThanosRulerSpecContainersEnvValuefromFieldref {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface ThanosRulerSpecContainersEnvValuefromResourcefieldref {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface ThanosRulerSpecContainersEnvValuefromSecretkeyref {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface ThanosRulerSpecContainersEnvfrom {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: outputs.monitoring.v1.ThanosRulerSpecContainersEnvfromConfigmapref;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: string;
            /**
             * The Secret to select from
             */
            secretRef?: outputs.monitoring.v1.ThanosRulerSpecContainersEnvfromSecretref;
        }

        /**
         * The ConfigMap to select from
         */
        export interface ThanosRulerSpecContainersEnvfromConfigmapref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface ThanosRulerSpecContainersEnvfromSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: boolean;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface ThanosRulerSpecContainersLifecycle {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: outputs.monitoring.v1.ThanosRulerSpecContainersLifecyclePoststart;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: outputs.monitoring.v1.ThanosRulerSpecContainersLifecyclePrestop;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface ThanosRulerSpecContainersLifecyclePoststart {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.ThanosRulerSpecContainersLifecyclePoststartExec;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.ThanosRulerSpecContainersLifecyclePoststartHttpget;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: outputs.monitoring.v1.ThanosRulerSpecContainersLifecyclePoststartTcpsocket;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ThanosRulerSpecContainersLifecyclePoststartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ThanosRulerSpecContainersLifecyclePoststartHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.ThanosRulerSpecContainersLifecyclePoststartHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ThanosRulerSpecContainersLifecyclePoststartHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface ThanosRulerSpecContainersLifecyclePoststartTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface ThanosRulerSpecContainersLifecyclePrestop {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.ThanosRulerSpecContainersLifecyclePrestopExec;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.ThanosRulerSpecContainersLifecyclePrestopHttpget;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: outputs.monitoring.v1.ThanosRulerSpecContainersLifecyclePrestopTcpsocket;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ThanosRulerSpecContainersLifecyclePrestopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ThanosRulerSpecContainersLifecyclePrestopHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.ThanosRulerSpecContainersLifecyclePrestopHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ThanosRulerSpecContainersLifecyclePrestopHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface ThanosRulerSpecContainersLifecyclePrestopTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ThanosRulerSpecContainersLivenessprobe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.ThanosRulerSpecContainersLivenessprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.monitoring.v1.ThanosRulerSpecContainersLivenessprobeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.ThanosRulerSpecContainersLivenessprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.monitoring.v1.ThanosRulerSpecContainersLivenessprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ThanosRulerSpecContainersLivenessprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface ThanosRulerSpecContainersLivenessprobeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ThanosRulerSpecContainersLivenessprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.ThanosRulerSpecContainersLivenessprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ThanosRulerSpecContainersLivenessprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface ThanosRulerSpecContainersLivenessprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface ThanosRulerSpecContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: string;
        }
        /**
         * thanosRulerSpecContainersPortsProvideDefaults sets the appropriate defaults for ThanosRulerSpecContainersPorts
         */
        export function thanosRulerSpecContainersPortsProvideDefaults(val: ThanosRulerSpecContainersPorts): ThanosRulerSpecContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ThanosRulerSpecContainersReadinessprobe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.ThanosRulerSpecContainersReadinessprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.monitoring.v1.ThanosRulerSpecContainersReadinessprobeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.ThanosRulerSpecContainersReadinessprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.monitoring.v1.ThanosRulerSpecContainersReadinessprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ThanosRulerSpecContainersReadinessprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface ThanosRulerSpecContainersReadinessprobeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ThanosRulerSpecContainersReadinessprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.ThanosRulerSpecContainersReadinessprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ThanosRulerSpecContainersReadinessprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface ThanosRulerSpecContainersReadinessprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface ThanosRulerSpecContainersResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface ThanosRulerSpecContainersSecuritycontext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: boolean;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: outputs.monitoring.v1.ThanosRulerSpecContainersSecuritycontextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: number;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: outputs.monitoring.v1.ThanosRulerSpecContainersSecuritycontextSelinuxoptions;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: outputs.monitoring.v1.ThanosRulerSpecContainersSecuritycontextSeccompprofile;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: outputs.monitoring.v1.ThanosRulerSpecContainersSecuritycontextWindowsoptions;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ThanosRulerSpecContainersSecuritycontextCapabilities {
            /**
             * Added capabilities
             */
            add?: string[];
            /**
             * Removed capabilities
             */
            drop?: string[];
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ThanosRulerSpecContainersSecuritycontextSeccompprofile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ThanosRulerSpecContainersSecuritycontextSelinuxoptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: string;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface ThanosRulerSpecContainersSecuritycontextWindowsoptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during "steady-state operation. This cannot be updated. More info: https"://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ThanosRulerSpecContainersStartupprobe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.ThanosRulerSpecContainersStartupprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.monitoring.v1.ThanosRulerSpecContainersStartupprobeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.ThanosRulerSpecContainersStartupprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.monitoring.v1.ThanosRulerSpecContainersStartupprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ThanosRulerSpecContainersStartupprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface ThanosRulerSpecContainersStartupprobeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ThanosRulerSpecContainersStartupprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.ThanosRulerSpecContainersStartupprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ThanosRulerSpecContainersStartupprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface ThanosRulerSpecContainersStartupprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface ThanosRulerSpecContainersVolumedevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface ThanosRulerSpecContainersVolumemounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: string;
        }

        /**
         * ObjectReference references a PodMonitor, ServiceMonitor, Probe or PrometheusRule object.
         */
        export interface ThanosRulerSpecExcludedfromenforcement {
            /**
             * Group of the referent. When not specified, it defaults to `monitoring.coreos.com`
             */
            group?: string;
            /**
             * Name of the referent. When not set, all resources are matched.
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace: string;
            /**
             * Resource of the referent.
             */
            resource: string;
        }
        /**
         * thanosRulerSpecExcludedfromenforcementProvideDefaults sets the appropriate defaults for ThanosRulerSpecExcludedfromenforcement
         */
        export function thanosRulerSpecExcludedfromenforcementProvideDefaults(val: ThanosRulerSpecExcludedfromenforcement): ThanosRulerSpecExcludedfromenforcement {
            return {
                ...val,
                group: (val.group) ?? "monitoring.coreos.com",
            };
        }

        /**
         * GRPCServerTLSConfig configures the gRPC server from which Thanos Querier reads recorded rule data. Note: Currently only the CAFile, CertFile, and KeyFile fields are supported. Maps to the '--grpc-server-tls-*' CLI args.
         */
        export interface ThanosRulerSpecGrpcservertlsconfig {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: outputs.monitoring.v1.ThanosRulerSpecGrpcservertlsconfigCa;
            /**
             * Path to the CA cert in the Prometheus container to use for the targets.
             */
            caFile?: string;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: outputs.monitoring.v1.ThanosRulerSpecGrpcservertlsconfigCert;
            /**
             * Path to the client cert file in the Prometheus container for the targets.
             */
            certFile?: string;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: boolean;
            /**
             * Path to the client key file in the Prometheus container for the targets.
             */
            keyFile?: string;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: outputs.monitoring.v1.ThanosRulerSpecGrpcservertlsconfigKeysecret;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: string;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface ThanosRulerSpecGrpcservertlsconfigCa {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.ThanosRulerSpecGrpcservertlsconfigCaConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.ThanosRulerSpecGrpcservertlsconfigCaSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface ThanosRulerSpecGrpcservertlsconfigCaConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface ThanosRulerSpecGrpcservertlsconfigCaSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface ThanosRulerSpecGrpcservertlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1.ThanosRulerSpecGrpcservertlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1.ThanosRulerSpecGrpcservertlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface ThanosRulerSpecGrpcservertlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface ThanosRulerSpecGrpcservertlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface ThanosRulerSpecGrpcservertlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        export interface ThanosRulerSpecHostaliases {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface ThanosRulerSpecImagepullsecrets {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface ThanosRulerSpecInitcontainers {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: string[];
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersEnvfrom[];
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: string;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersLifecycle;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersLivenessprobe;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersPorts[];
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersReadinessprobe;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersResources;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersSecuritycontext;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during "steady-state operation. This cannot be updated. More info: https"://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersStartupprobe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersVolumedevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersVolumemounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface ThanosRulerSpecInitcontainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: string;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersEnvValuefrom;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface ThanosRulerSpecInitcontainersEnvValuefrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersEnvValuefromConfigmapkeyref;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersEnvValuefromFieldref;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersEnvValuefromResourcefieldref;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersEnvValuefromSecretkeyref;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface ThanosRulerSpecInitcontainersEnvValuefromConfigmapkeyref {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface ThanosRulerSpecInitcontainersEnvValuefromFieldref {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface ThanosRulerSpecInitcontainersEnvValuefromResourcefieldref {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface ThanosRulerSpecInitcontainersEnvValuefromSecretkeyref {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface ThanosRulerSpecInitcontainersEnvfrom {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersEnvfromConfigmapref;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: string;
            /**
             * The Secret to select from
             */
            secretRef?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersEnvfromSecretref;
        }

        /**
         * The ConfigMap to select from
         */
        export interface ThanosRulerSpecInitcontainersEnvfromConfigmapref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface ThanosRulerSpecInitcontainersEnvfromSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: boolean;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface ThanosRulerSpecInitcontainersLifecycle {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersLifecyclePoststart;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersLifecyclePrestop;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface ThanosRulerSpecInitcontainersLifecyclePoststart {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersLifecyclePoststartExec;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersLifecyclePoststartHttpget;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersLifecyclePoststartTcpsocket;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ThanosRulerSpecInitcontainersLifecyclePoststartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ThanosRulerSpecInitcontainersLifecyclePoststartHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ThanosRulerSpecInitcontainersLifecyclePoststartHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface ThanosRulerSpecInitcontainersLifecyclePoststartTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface ThanosRulerSpecInitcontainersLifecyclePrestop {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersLifecyclePrestopExec;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersLifecyclePrestopHttpget;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersLifecyclePrestopTcpsocket;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ThanosRulerSpecInitcontainersLifecyclePrestopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ThanosRulerSpecInitcontainersLifecyclePrestopHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ThanosRulerSpecInitcontainersLifecyclePrestopHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface ThanosRulerSpecInitcontainersLifecyclePrestopTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ThanosRulerSpecInitcontainersLivenessprobe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersLivenessprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersLivenessprobeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersLivenessprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersLivenessprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ThanosRulerSpecInitcontainersLivenessprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface ThanosRulerSpecInitcontainersLivenessprobeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ThanosRulerSpecInitcontainersLivenessprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersLivenessprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ThanosRulerSpecInitcontainersLivenessprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface ThanosRulerSpecInitcontainersLivenessprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface ThanosRulerSpecInitcontainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: string;
        }
        /**
         * thanosRulerSpecInitcontainersPortsProvideDefaults sets the appropriate defaults for ThanosRulerSpecInitcontainersPorts
         */
        export function thanosRulerSpecInitcontainersPortsProvideDefaults(val: ThanosRulerSpecInitcontainersPorts): ThanosRulerSpecInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ThanosRulerSpecInitcontainersReadinessprobe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersReadinessprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersReadinessprobeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersReadinessprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersReadinessprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ThanosRulerSpecInitcontainersReadinessprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface ThanosRulerSpecInitcontainersReadinessprobeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ThanosRulerSpecInitcontainersReadinessprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersReadinessprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ThanosRulerSpecInitcontainersReadinessprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface ThanosRulerSpecInitcontainersReadinessprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface ThanosRulerSpecInitcontainersResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface ThanosRulerSpecInitcontainersSecuritycontext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: boolean;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersSecuritycontextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: number;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersSecuritycontextSelinuxoptions;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersSecuritycontextSeccompprofile;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersSecuritycontextWindowsoptions;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ThanosRulerSpecInitcontainersSecuritycontextCapabilities {
            /**
             * Added capabilities
             */
            add?: string[];
            /**
             * Removed capabilities
             */
            drop?: string[];
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ThanosRulerSpecInitcontainersSecuritycontextSeccompprofile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ThanosRulerSpecInitcontainersSecuritycontextSelinuxoptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: string;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface ThanosRulerSpecInitcontainersSecuritycontextWindowsoptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during "steady-state operation. This cannot be updated. More info: https"://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ThanosRulerSpecInitcontainersStartupprobe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersStartupprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersStartupprobeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersStartupprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersStartupprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ThanosRulerSpecInitcontainersStartupprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface ThanosRulerSpecInitcontainersStartupprobeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ThanosRulerSpecInitcontainersStartupprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.monitoring.v1.ThanosRulerSpecInitcontainersStartupprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ThanosRulerSpecInitcontainersStartupprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface ThanosRulerSpecInitcontainersStartupprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface ThanosRulerSpecInitcontainersVolumedevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface ThanosRulerSpecInitcontainersVolumemounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: string;
        }

        /**
         * ObjectStorageConfig configures object storage in Thanos. Alternative to ObjectStorageConfigFile, and lower order priority.
         */
        export interface ThanosRulerSpecObjectstorageconfig {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * PodMetadata contains Labels and Annotations gets propagated to the thanos ruler pods.
         */
        export interface ThanosRulerSpecPodmetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
             */
            name?: string;
        }

        /**
         * PrometheusRuleExcludeConfig enables users to configure excluded PrometheusRule names and their namespaces to be ignored while enforcing namespace label for alerts and metrics.
         */
        export interface ThanosRulerSpecPrometheusrulesexcludedfromenforce {
            /**
             * RuleNamespace - name of excluded rule
             */
            ruleName: string;
            /**
             * RuleNamespace - namespace of excluded rule
             */
            ruleNamespace: string;
        }

        /**
         * Define configuration for connecting to thanos query instances. If this is defined, the QueryEndpoints field will be ignored. Maps to the `query.config` CLI argument. Only available with thanos v0.11.0 and higher.
         */
        export interface ThanosRulerSpecQueryconfig {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Resources defines the resource requirements for single Pods. If not provided, no requests/limits will be set
         */
        export interface ThanosRulerSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * Namespaces to be selected for Rules discovery. If unspecified, only the same namespace as the ThanosRuler object is in is used.
         */
        export interface ThanosRulerSpecRulenamespaceselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.ThanosRulerSpecRulenamespaceselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ThanosRulerSpecRulenamespaceselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label selector to select which PrometheusRules to mount for alerting and recording.
         */
        export interface ThanosRulerSpecRuleselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.ThanosRulerSpecRuleselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ThanosRulerSpecRuleselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.
         */
        export interface ThanosRulerSpecSecuritycontext {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup?: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy?: string;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: number;
            /**
             * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: outputs.monitoring.v1.ThanosRulerSpecSecuritycontextSelinuxoptions;
            /**
             * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: outputs.monitoring.v1.ThanosRulerSpecSecuritycontextSeccompprofile;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups?: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls?: outputs.monitoring.v1.ThanosRulerSpecSecuritycontextSysctls[];
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: outputs.monitoring.v1.ThanosRulerSpecSecuritycontextWindowsoptions;
        }

        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ThanosRulerSpecSecuritycontextSeccompprofile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ThanosRulerSpecSecuritycontextSelinuxoptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface ThanosRulerSpecSecuritycontextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface ThanosRulerSpecSecuritycontextWindowsoptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: string;
        }

        /**
         * Storage spec to specify how storage shall be used.
         */
        export interface ThanosRulerSpecStorage {
            /**
             * Deprecated: subPath usage will be disabled by default in a future release, this option will become unnecessary. DisableMountSubPath allows to remove any subPath usage in volume mounts.
             */
            disableMountSubPath?: boolean;
            /**
             * EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
             */
            emptyDir?: outputs.monitoring.v1.ThanosRulerSpecStorageEmptydir;
            /**
             * EphemeralVolumeSource to be used by the Prometheus StatefulSets. This is a beta field in k8s 1.21, for lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
             */
            ephemeral?: outputs.monitoring.v1.ThanosRulerSpecStorageEphemeral;
            /**
             * A PVC spec to be used by the Prometheus StatefulSets.
             */
            volumeClaimTemplate?: outputs.monitoring.v1.ThanosRulerSpecStorageVolumeclaimtemplate;
        }

        /**
         * EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
         */
        export interface ThanosRulerSpecStorageEmptydir {
            /**
             * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium?: string;
            /**
             * Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit?: number | string;
        }

        /**
         * EphemeralVolumeSource to be used by the Prometheus StatefulSets. This is a beta field in k8s 1.21, for lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
         */
        export interface ThanosRulerSpecStorageEphemeral {
            /**
             * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
             *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
             *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
             *  Required, must not be nil.
             */
            volumeClaimTemplate?: outputs.monitoring.v1.ThanosRulerSpecStorageEphemeralVolumeclaimtemplate;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         *  Required, must not be nil.
         */
        export interface ThanosRulerSpecStorageEphemeralVolumeclaimtemplate {
            /**
             * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
             */
            metadata?: {[key: string]: any};
            /**
             * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
             */
            spec: outputs.monitoring.v1.ThanosRulerSpecStorageEphemeralVolumeclaimtemplateSpec;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        export interface ThanosRulerSpecStorageEphemeralVolumeclaimtemplateSpec {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: string[];
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
             */
            dataSource?: outputs.monitoring.v1.ThanosRulerSpecStorageEphemeralVolumeclaimtemplateSpecDatasource;
            /**
             * Specifies the object from which to populate the volume with data, if a "non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef": * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: outputs.monitoring.v1.ThanosRulerSpecStorageEphemeralVolumeclaimtemplateSpecDatasourceref;
            /**
             * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: outputs.monitoring.v1.ThanosRulerSpecStorageEphemeralVolumeclaimtemplateSpecResources;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: outputs.monitoring.v1.ThanosRulerSpecStorageEphemeralVolumeclaimtemplateSpecSelector;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: string;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: string;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface ThanosRulerSpecStorageEphemeralVolumeclaimtemplateSpecDatasource {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a "non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef": * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface ThanosRulerSpecStorageEphemeralVolumeclaimtemplateSpecDatasourceref {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface ThanosRulerSpecStorageEphemeralVolumeclaimtemplateSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface ThanosRulerSpecStorageEphemeralVolumeclaimtemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.ThanosRulerSpecStorageEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ThanosRulerSpecStorageEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A PVC spec to be used by the Prometheus StatefulSets.
         */
        export interface ThanosRulerSpecStorageVolumeclaimtemplate {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: string;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * EmbeddedMetadata contains metadata relevant to an EmbeddedResource.
             */
            metadata?: outputs.monitoring.v1.ThanosRulerSpecStorageVolumeclaimtemplateMetadata;
            /**
             * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            spec?: outputs.monitoring.v1.ThanosRulerSpecStorageVolumeclaimtemplateSpec;
            /**
             * Status represents the current information/status of a persistent volume claim. R"ead-only. More info: https"://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            status?: outputs.monitoring.v1.ThanosRulerSpecStorageVolumeclaimtemplateStatus;
        }

        /**
         * EmbeddedMetadata contains metadata relevant to an EmbeddedResource.
         */
        export interface ThanosRulerSpecStorageVolumeclaimtemplateMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: {[key: string]: string};
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
             */
            name?: string;
        }

        /**
         * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface ThanosRulerSpecStorageVolumeclaimtemplateSpec {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: string[];
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
             */
            dataSource?: outputs.monitoring.v1.ThanosRulerSpecStorageVolumeclaimtemplateSpecDatasource;
            /**
             * Specifies the object from which to populate the volume with data, if a "non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef": * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: outputs.monitoring.v1.ThanosRulerSpecStorageVolumeclaimtemplateSpecDatasourceref;
            /**
             * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: outputs.monitoring.v1.ThanosRulerSpecStorageVolumeclaimtemplateSpecResources;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: outputs.monitoring.v1.ThanosRulerSpecStorageVolumeclaimtemplateSpecSelector;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: string;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: string;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface ThanosRulerSpecStorageVolumeclaimtemplateSpecDatasource {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a "non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef": * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface ThanosRulerSpecStorageVolumeclaimtemplateSpecDatasourceref {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface ThanosRulerSpecStorageVolumeclaimtemplateSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface ThanosRulerSpecStorageVolumeclaimtemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.ThanosRulerSpecStorageVolumeclaimtemplateSpecSelectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ThanosRulerSpecStorageVolumeclaimtemplateSpecSelectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Status represents the current information/status of a persistent volume claim. R"ead-only. More info: https"://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface ThanosRulerSpecStorageVolumeclaimtemplateStatus {
            /**
             * AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: string[];
            /**
             * The storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
             */
            allocatedResources?: {[key: string]: number | string};
            /**
             * Represents the actual resources of the underlying volume.
             */
            capacity?: {[key: string]: number | string};
            /**
             * Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
             */
            conditions?: outputs.monitoring.v1.ThanosRulerSpecStorageVolumeclaimtemplateStatusConditions[];
            /**
             * Phase represents the current phase of PersistentVolumeClaim.
             */
            phase?: string;
            /**
             * ResizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
             */
            resizeStatus?: string;
        }

        /**
         * PersistentVolumeClaimCondition contails details about state of pvc
         */
        export interface ThanosRulerSpecStorageVolumeclaimtemplateStatusConditions {
            /**
             * Last time we probed the condition.
             */
            lastProbeTime?: string;
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * Human-readable message indicating details about last transition.
             */
            message?: string;
            /**
             * Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
             */
            reason?: string;
            status: string;
            /**
             * PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
             */
            type: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ThanosRulerSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: string;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface ThanosRulerSpecTopologyspreadconstraints {
            /**
             * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
             */
            labelSelector?: outputs.monitoring.v1.ThanosRulerSpecTopologyspreadconstraintsLabelselector;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       |  if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: string;
        }

        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        export interface ThanosRulerSpecTopologyspreadconstraintsLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.ThanosRulerSpecTopologyspreadconstraintsLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ThanosRulerSpecTopologyspreadconstraintsLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * TracingConfig configures tracing in Thanos. This is an experimental feature, it may change in any upcoming release in a breaking way.
         */
        export interface ThanosRulerSpecTracingconfig {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface ThanosRulerSpecVolumes {
            /**
             * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            awsElasticBlockStore?: outputs.monitoring.v1.ThanosRulerSpecVolumesAwselasticblockstore;
            /**
             * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
             */
            azureDisk?: outputs.monitoring.v1.ThanosRulerSpecVolumesAzuredisk;
            /**
             * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
             */
            azureFile?: outputs.monitoring.v1.ThanosRulerSpecVolumesAzurefile;
            /**
             * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
             */
            cephfs?: outputs.monitoring.v1.ThanosRulerSpecVolumesCephfs;
            /**
             * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            cinder?: outputs.monitoring.v1.ThanosRulerSpecVolumesCinder;
            /**
             * ConfigMap represents a configMap that should populate this volume
             */
            configMap?: outputs.monitoring.v1.ThanosRulerSpecVolumesConfigmap;
            /**
             * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
             */
            csi?: outputs.monitoring.v1.ThanosRulerSpecVolumesCsi;
            /**
             * DownwardAPI represents downward API about the pod that should populate this volume
             */
            downwardAPI?: outputs.monitoring.v1.ThanosRulerSpecVolumesDownwardapi;
            /**
             * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            emptyDir?: outputs.monitoring.v1.ThanosRulerSpecVolumesEmptydir;
            /**
             * Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
             *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
             *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
             *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
             *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
             */
            ephemeral?: outputs.monitoring.v1.ThanosRulerSpecVolumesEphemeral;
            /**
             * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
             */
            fc?: outputs.monitoring.v1.ThanosRulerSpecVolumesFc;
            /**
             * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
             */
            flexVolume?: outputs.monitoring.v1.ThanosRulerSpecVolumesFlexvolume;
            /**
             * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
             */
            flocker?: outputs.monitoring.v1.ThanosRulerSpecVolumesFlocker;
            /**
             * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            gcePersistentDisk?: outputs.monitoring.v1.ThanosRulerSpecVolumesGcepersistentdisk;
            /**
             * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
             */
            gitRepo?: outputs.monitoring.v1.ThanosRulerSpecVolumesGitrepo;
            /**
             * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
             */
            glusterfs?: outputs.monitoring.v1.ThanosRulerSpecVolumesGlusterfs;
            /**
             * HostPath represents a "pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https"://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
             */
            hostPath?: outputs.monitoring.v1.ThanosRulerSpecVolumesHostpath;
            /**
             * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
             */
            iscsi?: outputs.monitoring.v1.ThanosRulerSpecVolumesIscsi;
            /**
             * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            nfs?: outputs.monitoring.v1.ThanosRulerSpecVolumesNfs;
            /**
             * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            persistentVolumeClaim?: outputs.monitoring.v1.ThanosRulerSpecVolumesPersistentvolumeclaim;
            /**
             * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
             */
            photonPersistentDisk?: outputs.monitoring.v1.ThanosRulerSpecVolumesPhotonpersistentdisk;
            /**
             * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
             */
            portworxVolume?: outputs.monitoring.v1.ThanosRulerSpecVolumesPortworxvolume;
            /**
             * Items for all in one resources secrets, configmaps, and downward API
             */
            projected?: outputs.monitoring.v1.ThanosRulerSpecVolumesProjected;
            /**
             * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
             */
            quobyte?: outputs.monitoring.v1.ThanosRulerSpecVolumesQuobyte;
            /**
             * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
             */
            rbd?: outputs.monitoring.v1.ThanosRulerSpecVolumesRbd;
            /**
             * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
             */
            scaleIO?: outputs.monitoring.v1.ThanosRulerSpecVolumesScaleio;
            /**
             * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secret?: outputs.monitoring.v1.ThanosRulerSpecVolumesSecret;
            /**
             * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
             */
            storageos?: outputs.monitoring.v1.ThanosRulerSpecVolumesStorageos;
            /**
             * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
             */
            vsphereVolume?: outputs.monitoring.v1.ThanosRulerSpecVolumesVspherevolume;
        }

        /**
         * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface ThanosRulerSpecVolumesAwselasticblockstore {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: string;
            /**
             * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition?: number;
            /**
             * Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly?: boolean;
            /**
             * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }

        /**
         * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        export interface ThanosRulerSpecVolumesAzuredisk {
            /**
             * Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode?: string;
            /**
             * The Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * The URI the data disk in the blob storage
             */
            diskURI: string;
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: string;
            /**
             * Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind?: string;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
        }

        /**
         * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        export interface ThanosRulerSpecVolumesAzurefile {
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
            /**
             * the name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * Share Name
             */
            shareName: string;
        }

        /**
         * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        export interface ThanosRulerSpecVolumesCephfs {
            /**
             * Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path?: string;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly?: boolean;
            /**
             * Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile?: string;
            /**
             * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretRef?: outputs.monitoring.v1.ThanosRulerSpecVolumesCephfsSecretref;
            /**
             * Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user?: string;
        }

        /**
         * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface ThanosRulerSpecVolumesCephfsSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface ThanosRulerSpecVolumesCinder {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType?: string;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly?: boolean;
            /**
             * Optional: points to a secret object containing parameters used to connect to OpenStack.
             */
            secretRef?: outputs.monitoring.v1.ThanosRulerSpecVolumesCinderSecretref;
            /**
             * volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }

        /**
         * Optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        export interface ThanosRulerSpecVolumesCinderSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * ConfigMap represents a configMap that should populate this volume
         */
        export interface ThanosRulerSpecVolumesConfigmap {
            /**
             * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: number;
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: outputs.monitoring.v1.ThanosRulerSpecVolumesConfigmapItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface ThanosRulerSpecVolumesConfigmapItems {
            /**
             * The key to project.
             */
            key: string;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: number;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }

        /**
         * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        export interface ThanosRulerSpecVolumesCsi {
            /**
             * Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType?: string;
            /**
             * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
             */
            nodePublishSecretRef?: outputs.monitoring.v1.ThanosRulerSpecVolumesCsiNodepublishsecretref;
            /**
             * Specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly?: boolean;
            /**
             * VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes?: {[key: string]: string};
        }

        /**
         * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        export interface ThanosRulerSpecVolumesCsiNodepublishsecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * DownwardAPI represents downward API about the pod that should populate this volume
         */
        export interface ThanosRulerSpecVolumesDownwardapi {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: number;
            /**
             * Items is a list of downward API volume file
             */
            items?: outputs.monitoring.v1.ThanosRulerSpecVolumesDownwardapiItems[];
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface ThanosRulerSpecVolumesDownwardapiItems {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: outputs.monitoring.v1.ThanosRulerSpecVolumesDownwardapiItemsFieldref;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: outputs.monitoring.v1.ThanosRulerSpecVolumesDownwardapiItemsResourcefieldref;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface ThanosRulerSpecVolumesDownwardapiItemsFieldref {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface ThanosRulerSpecVolumesDownwardapiItemsResourcefieldref {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface ThanosRulerSpecVolumesEmptydir {
            /**
             * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium?: string;
            /**
             * Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit?: number | string;
        }

        /**
         * Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        export interface ThanosRulerSpecVolumesEphemeral {
            /**
             * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
             *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
             *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
             *  Required, must not be nil.
             */
            volumeClaimTemplate?: outputs.monitoring.v1.ThanosRulerSpecVolumesEphemeralVolumeclaimtemplate;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         *  Required, must not be nil.
         */
        export interface ThanosRulerSpecVolumesEphemeralVolumeclaimtemplate {
            /**
             * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
             */
            metadata?: {[key: string]: any};
            /**
             * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
             */
            spec: outputs.monitoring.v1.ThanosRulerSpecVolumesEphemeralVolumeclaimtemplateSpec;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        export interface ThanosRulerSpecVolumesEphemeralVolumeclaimtemplateSpec {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: string[];
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
             */
            dataSource?: outputs.monitoring.v1.ThanosRulerSpecVolumesEphemeralVolumeclaimtemplateSpecDatasource;
            /**
             * Specifies the object from which to populate the volume with data, if a "non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef": * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: outputs.monitoring.v1.ThanosRulerSpecVolumesEphemeralVolumeclaimtemplateSpecDatasourceref;
            /**
             * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: outputs.monitoring.v1.ThanosRulerSpecVolumesEphemeralVolumeclaimtemplateSpecResources;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: outputs.monitoring.v1.ThanosRulerSpecVolumesEphemeralVolumeclaimtemplateSpecSelector;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: string;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: string;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface ThanosRulerSpecVolumesEphemeralVolumeclaimtemplateSpecDatasource {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a "non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef": * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface ThanosRulerSpecVolumesEphemeralVolumeclaimtemplateSpecDatasourceref {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface ThanosRulerSpecVolumesEphemeralVolumeclaimtemplateSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface ThanosRulerSpecVolumesEphemeralVolumeclaimtemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.monitoring.v1.ThanosRulerSpecVolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ThanosRulerSpecVolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface ThanosRulerSpecVolumesFc {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: string;
            /**
             * Optional: FC target lun number
             */
            lun?: number;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
            /**
             * Optional: FC target worldwide names (WWNs)
             */
            targetWWNs?: string[];
            /**
             * Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids?: string[];
        }

        /**
         * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        export interface ThanosRulerSpecVolumesFlexvolume {
            /**
             * Driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType?: string;
            /**
             * Optional: Extra command options if any.
             */
            options?: {[key: string]: string};
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
            /**
             * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
             */
            secretRef?: outputs.monitoring.v1.ThanosRulerSpecVolumesFlexvolumeSecretref;
        }

        /**
         * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        export interface ThanosRulerSpecVolumesFlexvolumeSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        export interface ThanosRulerSpecVolumesFlocker {
            /**
             * Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName?: string;
            /**
             * UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID?: string;
        }

        /**
         * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface ThanosRulerSpecVolumesGcepersistentdisk {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: string;
            /**
             * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition?: number;
            /**
             * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly?: boolean;
        }

        /**
         * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        export interface ThanosRulerSpecVolumesGitrepo {
            /**
             * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory?: string;
            /**
             * Repository URL
             */
            repository: string;
            /**
             * Commit hash for the specified revision.
             */
            revision?: string;
        }

        /**
         * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface ThanosRulerSpecVolumesGlusterfs {
            /**
             * EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * ReadOnly here will force the Glusterfs volume to be mounted with "read-only permissions. Defaults to false. More info: https"://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly?: boolean;
        }

        /**
         * HostPath represents a "pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https"://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        export interface ThanosRulerSpecVolumesHostpath {
            /**
             * Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type?: string;
        }

        /**
         * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface ThanosRulerSpecVolumesIscsi {
            /**
             * whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery?: boolean;
            /**
             * whether support iSCSI Session CHAP authentication
             */
            chapAuthSession?: boolean;
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: string;
            /**
             * Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName?: string;
            /**
             * Target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface?: string;
            /**
             * iSCSI Target Lun number.
             */
            lun: number;
            /**
             * iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals?: string[];
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly?: boolean;
            /**
             * CHAP Secret for iSCSI target and initiator authentication
             */
            secretRef?: outputs.monitoring.v1.ThanosRulerSpecVolumesIscsiSecretref;
            /**
             * iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }

        /**
         * CHAP Secret for iSCSI target and initiator authentication
         */
        export interface ThanosRulerSpecVolumesIscsiSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface ThanosRulerSpecVolumesNfs {
            /**
             * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * ReadOnly here will force the NFS export to be mounted with "read-only permissions. Defaults to false. More info: https"://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly?: boolean;
            /**
             * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface ThanosRulerSpecVolumesPersistentvolumeclaim {
            /**
             * ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly?: boolean;
        }

        /**
         * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        export interface ThanosRulerSpecVolumesPhotonpersistentdisk {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: string;
            /**
             * ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }

        /**
         * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        export interface ThanosRulerSpecVolumesPortworxvolume {
            /**
             * FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: string;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
            /**
             * VolumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }

        /**
         * Items for all in one resources secrets, configmaps, and downward API
         */
        export interface ThanosRulerSpecVolumesProjected {
            /**
             * Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: number;
            /**
             * list of volume projections
             */
            sources?: outputs.monitoring.v1.ThanosRulerSpecVolumesProjectedSources[];
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface ThanosRulerSpecVolumesProjectedSources {
            /**
             * information about the configMap data to project
             */
            configMap?: outputs.monitoring.v1.ThanosRulerSpecVolumesProjectedSourcesConfigmap;
            /**
             * information about the downwardAPI data to project
             */
            downwardAPI?: outputs.monitoring.v1.ThanosRulerSpecVolumesProjectedSourcesDownwardapi;
            /**
             * information about the secret data to project
             */
            secret?: outputs.monitoring.v1.ThanosRulerSpecVolumesProjectedSourcesSecret;
            /**
             * information about the serviceAccountToken data to project
             */
            serviceAccountToken?: outputs.monitoring.v1.ThanosRulerSpecVolumesProjectedSourcesServiceaccounttoken;
        }

        /**
         * information about the configMap data to project
         */
        export interface ThanosRulerSpecVolumesProjectedSourcesConfigmap {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: outputs.monitoring.v1.ThanosRulerSpecVolumesProjectedSourcesConfigmapItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface ThanosRulerSpecVolumesProjectedSourcesConfigmapItems {
            /**
             * The key to project.
             */
            key: string;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: number;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }

        /**
         * information about the downwardAPI data to project
         */
        export interface ThanosRulerSpecVolumesProjectedSourcesDownwardapi {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: outputs.monitoring.v1.ThanosRulerSpecVolumesProjectedSourcesDownwardapiItems[];
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface ThanosRulerSpecVolumesProjectedSourcesDownwardapiItems {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: outputs.monitoring.v1.ThanosRulerSpecVolumesProjectedSourcesDownwardapiItemsFieldref;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: outputs.monitoring.v1.ThanosRulerSpecVolumesProjectedSourcesDownwardapiItemsResourcefieldref;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface ThanosRulerSpecVolumesProjectedSourcesDownwardapiItemsFieldref {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface ThanosRulerSpecVolumesProjectedSourcesDownwardapiItemsResourcefieldref {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * information about the secret data to project
         */
        export interface ThanosRulerSpecVolumesProjectedSourcesSecret {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: outputs.monitoring.v1.ThanosRulerSpecVolumesProjectedSourcesSecretItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface ThanosRulerSpecVolumesProjectedSourcesSecretItems {
            /**
             * The key to project.
             */
            key: string;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: number;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }

        /**
         * information about the serviceAccountToken data to project
         */
        export interface ThanosRulerSpecVolumesProjectedSourcesServiceaccounttoken {
            /**
             * Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: string;
            /**
             * ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: number;
            /**
             * Path is the path relative to the mount point of the file to project the token into.
             */
            path: string;
        }

        /**
         * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        export interface ThanosRulerSpecVolumesQuobyte {
            /**
             * Group to map volume access to Default is no group
             */
            group?: string;
            /**
             * ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly?: boolean;
            /**
             * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: string;
            /**
             * Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant?: string;
            /**
             * User to map volume access to Defaults to serivceaccount user
             */
            user?: string;
            /**
             * Volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }

        /**
         * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface ThanosRulerSpecVolumesRbd {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: string;
            /**
             * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring?: string;
            /**
             * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool?: string;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly?: boolean;
            /**
             * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            secretRef?: outputs.monitoring.v1.ThanosRulerSpecVolumesRbdSecretref;
            /**
             * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user?: string;
        }

        /**
         * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface ThanosRulerSpecVolumesRbdSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        export interface ThanosRulerSpecVolumesScaleio {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType?: string;
            /**
             * The host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * The name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain?: string;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
            /**
             * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
             */
            secretRef: outputs.monitoring.v1.ThanosRulerSpecVolumesScaleioSecretref;
            /**
             * Flag to enable/disable SSL communication with Gateway, default false
             */
            sslEnabled?: boolean;
            /**
             * Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode?: string;
            /**
             * The ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool?: string;
            /**
             * The name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * The name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName?: string;
        }

        /**
         * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        export interface ThanosRulerSpecVolumesScaleioSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface ThanosRulerSpecVolumesSecret {
            /**
             * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: number;
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: outputs.monitoring.v1.ThanosRulerSpecVolumesSecretItems[];
            /**
             * Specify whether the Secret or its keys must be defined
             */
            optional?: boolean;
            /**
             * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface ThanosRulerSpecVolumesSecretItems {
            /**
             * The key to project.
             */
            key: string;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: number;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }

        /**
         * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        export interface ThanosRulerSpecVolumesStorageos {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: string;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: boolean;
            /**
             * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
             */
            secretRef?: outputs.monitoring.v1.ThanosRulerSpecVolumesStorageosSecretref;
            /**
             * VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName?: string;
            /**
             * VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace?: string;
        }

        /**
         * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        export interface ThanosRulerSpecVolumesStorageosSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        export interface ThanosRulerSpecVolumesVspherevolume {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: string;
            /**
             * Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID?: string;
            /**
             * Storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName?: string;
            /**
             * Path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }

        /**
         * Most recent observed status of the ThanosRuler cluster. R"ead-only. Not included when requesting from the apiserver, only from the ThanosRuler Operator API itself. More info: https"://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ThanosRulerStatus {
            /**
             * Total number of available pods (ready for at least minReadySeconds) targeted by this ThanosRuler deployment.
             */
            availableReplicas: number;
            /**
             * Represents whether any actions on the underlying managed objects are being performed. Only delete actions will be performed.
             */
            paused: boolean;
            /**
             * Total number of non-terminated pods targeted by this ThanosRuler deployment (their labels match the selector).
             */
            replicas: number;
            /**
             * Total number of unavailable pods targeted by this ThanosRuler deployment.
             */
            unavailableReplicas: number;
            /**
             * Total number of non-terminated pods targeted by this ThanosRuler deployment that have the desired version spec.
             */
            updatedReplicas: number;
        }

    }

    export namespace v1alpha1 {
        /**
         * AlertmanagerConfigSpec is a specification of the desired behavior of the Alertmanager configuration. By definition, the Alertmanager configuration only applies to alerts for which the `namespace` label is equal to the namespace of the AlertmanagerConfig resource.
         */
        export interface AlertmanagerConfigSpec {
            /**
             * List of inhibition rules. The rules will only apply to alerts matching the resource’s namespace.
             */
            inhibitRules?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecInhibitrules[];
            /**
             * List of MuteTimeInterval specifying when the routes should be muted.
             */
            muteTimeIntervals?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecMutetimeintervals[];
            /**
             * List of receivers.
             */
            receivers?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceivers[];
            /**
             * The Alertmanager route definition for alerts matching the resource’s namespace. If present, it will be added to the generated Alertmanager configuration as a first-level route.
             */
            route?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecRoute;
        }

        /**
         * InhibitRule defines an inhibition rule that allows to mute alerts when other alerts are already firing. See https://prometheus.io/docs/alerting/latest/configuration/#inhibit_rule
         */
        export interface AlertmanagerConfigSpecInhibitrules {
            /**
             * Labels that must have an equal value in the source and target alert for the inhibition to take effect.
             */
            equal?: string[];
            /**
             * Matchers for which one or more alerts have to exist for the inhibition to take effect. The operator enforces that the alert matches the resource’s namespace.
             */
            sourceMatch?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecInhibitrulesSourcematch[];
            /**
             * Matchers that have to be fulfilled in the alerts to be muted. The operator enforces that the alert matches the resource’s namespace.
             */
            targetMatch?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecInhibitrulesTargetmatch[];
        }

        /**
         * Matcher defines how to match on alert's labels.
         */
        export interface AlertmanagerConfigSpecInhibitrulesSourcematch {
            /**
             * Match operation available with AlertManager >= v0.22.0 and takes precedence over Regex (deprecated) if non-empty.
             */
            matchType?: string;
            /**
             * Label to match.
             */
            name: string;
            /**
             * Whether to match on equality (false) or regular-expression (true). Deprecated as of AlertManager >= v0.22.0 where a user should use MatchType instead.
             */
            regex?: boolean;
            /**
             * Label value to match.
             */
            value?: string;
        }

        /**
         * Matcher defines how to match on alert's labels.
         */
        export interface AlertmanagerConfigSpecInhibitrulesTargetmatch {
            /**
             * Match operation available with AlertManager >= v0.22.0 and takes precedence over Regex (deprecated) if non-empty.
             */
            matchType?: string;
            /**
             * Label to match.
             */
            name: string;
            /**
             * Whether to match on equality (false) or regular-expression (true). Deprecated as of AlertManager >= v0.22.0 where a user should use MatchType instead.
             */
            regex?: boolean;
            /**
             * Label value to match.
             */
            value?: string;
        }

        /**
         * MuteTimeInterval specifies the periods in time when notifications will be muted
         */
        export interface AlertmanagerConfigSpecMutetimeintervals {
            /**
             * Name of the time interval
             */
            name?: string;
            /**
             * TimeIntervals is a list of TimeInterval
             */
            timeIntervals?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecMutetimeintervalsTimeintervals[];
        }

        /**
         * TimeInterval describes intervals of time
         */
        export interface AlertmanagerConfigSpecMutetimeintervalsTimeintervals {
            /**
             * DaysOfMonth is a list of DayOfMonthRange
             */
            daysOfMonth?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecMutetimeintervalsTimeintervalsDaysofmonth[];
            /**
             * Months is a list of MonthRange
             */
            months?: string[];
            /**
             * Times is a list of TimeRange
             */
            times?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecMutetimeintervalsTimeintervalsTimes[];
            /**
             * Weekdays is a list of WeekdayRange
             */
            weekdays?: string[];
            /**
             * Years is a list of YearRange
             */
            years?: string[];
        }

        /**
         * DayOfMonthRange is an inclusive range of days of the month beginning at 1
         */
        export interface AlertmanagerConfigSpecMutetimeintervalsTimeintervalsDaysofmonth {
            /**
             * End of the inclusive range
             */
            end?: number;
            /**
             * Start of the inclusive range
             */
            start?: number;
        }

        /**
         * TimeRange defines a start and end time in 24hr format
         */
        export interface AlertmanagerConfigSpecMutetimeintervalsTimeintervalsTimes {
            /**
             * EndTime is the end time in 24hr format.
             */
            endTime?: string;
            /**
             * StartTime is the start time in 24hr format.
             */
            startTime?: string;
        }

        /**
         * Receiver defines one or more notification integrations.
         */
        export interface AlertmanagerConfigSpecReceivers {
            /**
             * List of Email configurations.
             */
            emailConfigs?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigs[];
            /**
             * Name of the receiver. Must be unique across all items from the list.
             */
            name: string;
            /**
             * List of OpsGenie configurations.
             */
            opsgenieConfigs?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigs[];
            /**
             * List of PagerDuty configurations.
             */
            pagerdutyConfigs?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigs[];
            /**
             * List of Pushover configurations.
             */
            pushoverConfigs?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigs[];
            /**
             * List of Slack configurations.
             */
            slackConfigs?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigs[];
            /**
             * List of SNS configurations
             */
            snsConfigs?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigs[];
            /**
             * List of Telegram configurations.
             */
            telegramConfigs?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigs[];
            /**
             * List of VictorOps configurations.
             */
            victoropsConfigs?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigs[];
            /**
             * List of webhook configurations.
             */
            webhookConfigs?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigs[];
            /**
             * List of WeChat configurations.
             */
            wechatConfigs?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigs[];
        }

        /**
         * EmailConfig configures notifications via Email.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigs {
            /**
             * The identity to use for authentication.
             */
            authIdentity?: string;
            /**
             * The secret's key that contains the password to use for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            authPassword?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsAuthpassword;
            /**
             * The secret's key that contains the CRAM-MD5 secret. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            authSecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsAuthsecret;
            /**
             * The username to use for authentication.
             */
            authUsername?: string;
            /**
             * The sender address.
             */
            from?: string;
            /**
             * Further headers email header key/value pairs. Overrides any headers previously set by the notification implementation.
             */
            headers?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsHeaders[];
            /**
             * The hostname to identify to the SMTP server.
             */
            hello?: string;
            /**
             * The HTML body of the email notification.
             */
            html?: string;
            /**
             * The SMTP TLS requirement. Note that Go does not support unencrypted connections to remote SMTP endpoints.
             */
            requireTLS?: boolean;
            /**
             * Whether or not to notify about resolved alerts.
             */
            sendResolved?: boolean;
            /**
             * The SMTP host and port through which emails are sent. E.g. example.com:25
             */
            smarthost?: string;
            /**
             * The text body of the email notification.
             */
            text?: string;
            /**
             * TLS configuration
             */
            tlsConfig?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsTlsconfig;
            /**
             * The email address to send notifications to.
             */
            to?: string;
        }

        /**
         * The secret's key that contains the password to use for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsAuthpassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret's key that contains the CRAM-MD5 secret. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsAuthsecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * KeyValue defines a (key, value) tuple.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsHeaders {
            /**
             * Key of the tuple.
             */
            key: string;
            /**
             * Value of the tuple.
             */
            value: string;
        }

        /**
         * TLS configuration
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsTlsconfig {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCa;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCert;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: boolean;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigKeysecret;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: string;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCa {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCaConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCaSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCaConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCaSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * OpsGenieConfig configures notifications via OpsGenie. See https://prometheus.io/docs/alerting/latest/configuration/#opsgenie_config
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigs {
            /**
             * Comma separated list of actions that will be available for the alert.
             */
            actions?: string;
            /**
             * The secret's key that contains the OpsGenie API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            apiKey?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsApikey;
            /**
             * The URL to send OpsGenie API requests to.
             */
            apiURL?: string;
            /**
             * Description of the incident.
             */
            description?: string;
            /**
             * A set of arbitrary key/value pairs that provide further detail about the incident.
             */
            details?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsDetails[];
            /**
             * Optional field that can be used to specify which domain alert is related to.
             */
            entity?: string;
            /**
             * HTTP client configuration.
             */
            httpConfig?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfig;
            /**
             * Alert text limited to 130 characters.
             */
            message?: string;
            /**
             * Additional alert note.
             */
            note?: string;
            /**
             * Priority level of alert. Possible values are P1, P2, P3, P4, and P5.
             */
            priority?: string;
            /**
             * List of responders responsible for notifications.
             */
            responders?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsResponders[];
            /**
             * Whether or not to notify about resolved alerts.
             */
            sendResolved?: boolean;
            /**
             * Backlink to the sender of the notification.
             */
            source?: string;
            /**
             * Comma separated list of tags attached to the notifications.
             */
            tags?: string;
            /**
             * Whether to update message and description of the alert in OpsGenie if it already exists By default, the alert is never updated in OpsGenie, the new message only appears in activity log.
             */
            updateAlerts?: boolean;
        }

        /**
         * The secret's key that contains the OpsGenie API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsApikey {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * KeyValue defines a (key, value) tuple.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsDetails {
            /**
             * Key of the tuple.
             */
            key: string;
            /**
             * Value of the tuple.
             */
            value: string;
        }

        /**
         * HTTP client configuration.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfig {
            /**
             * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
             */
            authorization?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigAuthorization;
            /**
             * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
             */
            basicAuth?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigBasicauth;
            /**
             * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigBearertokensecret;
            /**
             * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
             */
            followRedirects?: boolean;
            /**
             * OAuth2 client credentials used to fetch a token for the targets.
             */
            oauth2?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2;
            /**
             * Optional proxy URL.
             */
            proxyURL?: string;
            /**
             * TLS configuration for the client.
             */
            tlsConfig?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfig;
        }

        /**
         * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigAuthorization {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigAuthorizationCredentials;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: string;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigAuthorizationCredentials {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigBasicauth {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigBasicauthPassword;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigBasicauthUsername;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigBasicauthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigBasicauthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigBearertokensecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * OAuth2 client credentials used to fetch a token for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2 {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2Clientid;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2Clientsecret;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: {[key: string]: string};
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: string[];
            /**
             * The URL to fetch the token from
             */
            tokenUrl: string;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2Clientid {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2ClientidConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2ClientidSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2ClientidConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2ClientidSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2Clientsecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * TLS configuration for the client.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfig {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCa;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCert;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: boolean;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigKeysecret;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: string;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCa {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCaConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCaSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCaConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCaSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * OpsGenieConfigResponder defines a responder to an incident. One of `id`, `name` or `username` has to be defined.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsResponders {
            /**
             * ID of the responder.
             */
            id?: string;
            /**
             * Name of the responder.
             */
            name?: string;
            /**
             * Type of responder.
             */
            type: string;
            /**
             * Username of the responder.
             */
            username?: string;
        }

        /**
         * PagerDutyConfig configures notifications via PagerDuty. See https://prometheus.io/docs/alerting/latest/configuration/#pagerduty_config
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigs {
            /**
             * The class/type of the event.
             */
            class?: string;
            /**
             * Client identification.
             */
            client?: string;
            /**
             * Backlink to the sender of notification.
             */
            clientURL?: string;
            /**
             * The part or component of the affected system that is broken.
             */
            component?: string;
            /**
             * Description of the incident.
             */
            description?: string;
            /**
             * Arbitrary key/value pairs that provide further detail about the incident.
             */
            details?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsDetails[];
            /**
             * A cluster or grouping of sources.
             */
            group?: string;
            /**
             * HTTP client configuration.
             */
            httpConfig?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfig;
            /**
             * A list of image details to attach that provide further detail about an incident.
             */
            pagerDutyImageConfigs?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsPagerdutyimageconfigs[];
            /**
             * A list of link details to attach that provide further detail about an incident.
             */
            pagerDutyLinkConfigs?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsPagerdutylinkconfigs[];
            /**
             * The secret's key that contains the PagerDuty integration key (when using Events API v2). Either this field or `serviceKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            routingKey?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsRoutingkey;
            /**
             * Whether or not to notify about resolved alerts.
             */
            sendResolved?: boolean;
            /**
             * The secret's key that contains the PagerDuty service key (when using integration type "Prometheus"). Either this field or `routingKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            serviceKey?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsServicekey;
            /**
             * Severity of the incident.
             */
            severity?: string;
            /**
             * The URL to send requests to.
             */
            url?: string;
        }

        /**
         * KeyValue defines a (key, value) tuple.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsDetails {
            /**
             * Key of the tuple.
             */
            key: string;
            /**
             * Value of the tuple.
             */
            value: string;
        }

        /**
         * HTTP client configuration.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfig {
            /**
             * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
             */
            authorization?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigAuthorization;
            /**
             * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
             */
            basicAuth?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigBasicauth;
            /**
             * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigBearertokensecret;
            /**
             * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
             */
            followRedirects?: boolean;
            /**
             * OAuth2 client credentials used to fetch a token for the targets.
             */
            oauth2?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2;
            /**
             * Optional proxy URL.
             */
            proxyURL?: string;
            /**
             * TLS configuration for the client.
             */
            tlsConfig?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfig;
        }

        /**
         * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigAuthorization {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigAuthorizationCredentials;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: string;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigAuthorizationCredentials {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigBasicauth {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigBasicauthPassword;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigBasicauthUsername;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigBasicauthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigBasicauthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigBearertokensecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * OAuth2 client credentials used to fetch a token for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2 {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2Clientid;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2Clientsecret;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: {[key: string]: string};
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: string[];
            /**
             * The URL to fetch the token from
             */
            tokenUrl: string;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2Clientid {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2ClientidConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2ClientidSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2ClientidConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2ClientidSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2Clientsecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * TLS configuration for the client.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfig {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCa;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCert;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: boolean;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigKeysecret;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: string;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCa {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCaConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCaSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCaConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCaSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * PagerDutyImageConfig attaches images to an incident
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsPagerdutyimageconfigs {
            /**
             * Alt is the optional alternative text for the image.
             */
            alt?: string;
            /**
             * Optional URL; makes the image a clickable link.
             */
            href?: string;
            /**
             * Src of the image being attached to the incident
             */
            src?: string;
        }

        /**
         * PagerDutyLinkConfig attaches text links to an incident
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsPagerdutylinkconfigs {
            /**
             * Text that describes the purpose of the link, and can be used as the link's text.
             */
            alt?: string;
            /**
             * Href is the URL of the link to be attached
             */
            href?: string;
        }

        /**
         * The secret's key that contains the PagerDuty integration key (when using Events API v2). Either this field or `serviceKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsRoutingkey {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret's key that contains the PagerDuty service key (when using integration type "Prometheus"). Either this field or `routingKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsServicekey {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * PushoverConfig configures notifications via Pushover. See https://prometheus.io/docs/alerting/latest/configuration/#pushover_config
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigs {
            /**
             * How long your notification will continue to be retried for, unless the user acknowledges the notification.
             */
            expire?: string;
            /**
             * Whether notification message is HTML or plain text.
             */
            html?: boolean;
            /**
             * HTTP client configuration.
             */
            httpConfig?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfig;
            /**
             * Notification message.
             */
            message?: string;
            /**
             * Priority, see https://pushover.net/api#priority
             */
            priority?: string;
            /**
             * How often the Pushover servers will send the same notification to the user. Must be at least 30 seconds.
             */
            retry?: string;
            /**
             * Whether or not to notify about resolved alerts.
             */
            sendResolved?: boolean;
            /**
             * The name of one of the sounds supported by device clients to override the user's default sound choice
             */
            sound?: string;
            /**
             * Notification title.
             */
            title?: string;
            /**
             * The secret's key that contains the registered application’s API token, see https://pushover.net/apps. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            token?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsToken;
            /**
             * A supplementary URL shown alongside the message.
             */
            url?: string;
            /**
             * A title for supplementary URL, otherwise just the URL is shown
             */
            urlTitle?: string;
            /**
             * The secret's key that contains the recipient user’s user key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            userKey?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsUserkey;
        }

        /**
         * HTTP client configuration.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfig {
            /**
             * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
             */
            authorization?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigAuthorization;
            /**
             * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
             */
            basicAuth?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigBasicauth;
            /**
             * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigBearertokensecret;
            /**
             * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
             */
            followRedirects?: boolean;
            /**
             * OAuth2 client credentials used to fetch a token for the targets.
             */
            oauth2?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2;
            /**
             * Optional proxy URL.
             */
            proxyURL?: string;
            /**
             * TLS configuration for the client.
             */
            tlsConfig?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfig;
        }

        /**
         * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigAuthorization {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigAuthorizationCredentials;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: string;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigAuthorizationCredentials {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigBasicauth {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigBasicauthPassword;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigBasicauthUsername;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigBasicauthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigBasicauthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigBearertokensecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * OAuth2 client credentials used to fetch a token for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2 {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2Clientid;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2Clientsecret;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: {[key: string]: string};
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: string[];
            /**
             * The URL to fetch the token from
             */
            tokenUrl: string;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2Clientid {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2ClientidConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2ClientidSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2ClientidConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2ClientidSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2Clientsecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * TLS configuration for the client.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfig {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCa;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCert;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: boolean;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigKeysecret;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: string;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCa {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCaConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCaSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCaConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCaSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret's key that contains the registered application’s API token, see https://pushover.net/apps. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsToken {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret's key that contains the recipient user’s user key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsUserkey {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * SlackConfig configures notifications via Slack. See https://prometheus.io/docs/alerting/latest/configuration/#slack_config
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigs {
            /**
             * A list of Slack actions that are sent with each notification.
             */
            actions?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsActions[];
            /**
             * The secret's key that contains the Slack webhook URL. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            apiURL?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsApiurl;
            callbackId?: string;
            /**
             * The channel or user to send notifications to.
             */
            channel?: string;
            color?: string;
            fallback?: string;
            /**
             * A list of Slack fields that are sent with each notification.
             */
            fields?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsFields[];
            footer?: string;
            /**
             * HTTP client configuration.
             */
            httpConfig?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfig;
            iconEmoji?: string;
            iconURL?: string;
            imageURL?: string;
            linkNames?: boolean;
            mrkdwnIn?: string[];
            pretext?: string;
            /**
             * Whether or not to notify about resolved alerts.
             */
            sendResolved?: boolean;
            shortFields?: boolean;
            text?: string;
            thumbURL?: string;
            title?: string;
            titleLink?: string;
            username?: string;
        }

        /**
         * SlackAction configures a single Slack action that is sent with each notification. See https://api.slack.com/docs/"message-attachments#action_fields and https"://api.slack.com/docs/message-buttons for more information.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsActions {
            /**
             * SlackConfirmationField protect users from destructive actions or particularly distinguished decisions by asking them to confirm their button click one more time. See https://api.slack.com/docs/interactive-message-field-guide#confirmation_fields for more information.
             */
            confirm?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsActionsConfirm;
            name?: string;
            style?: string;
            text: string;
            type: string;
            url?: string;
            value?: string;
        }

        /**
         * SlackConfirmationField protect users from destructive actions or particularly distinguished decisions by asking them to confirm their button click one more time. See https://api.slack.com/docs/interactive-message-field-guide#confirmation_fields for more information.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsActionsConfirm {
            dismissText?: string;
            okText?: string;
            text: string;
            title?: string;
        }

        /**
         * The secret's key that contains the Slack webhook URL. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsApiurl {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * SlackField configures a single Slack field that is sent with each notification. Each field must contain a title, value, and optionally, a boolean value to indicate if the field is short enough to be displayed next to other fields designated as short. See https://api.slack.com/docs/message-attachments#fields for more information.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsFields {
            short?: boolean;
            title: string;
            value: string;
        }

        /**
         * HTTP client configuration.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfig {
            /**
             * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
             */
            authorization?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigAuthorization;
            /**
             * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
             */
            basicAuth?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigBasicauth;
            /**
             * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigBearertokensecret;
            /**
             * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
             */
            followRedirects?: boolean;
            /**
             * OAuth2 client credentials used to fetch a token for the targets.
             */
            oauth2?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2;
            /**
             * Optional proxy URL.
             */
            proxyURL?: string;
            /**
             * TLS configuration for the client.
             */
            tlsConfig?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfig;
        }

        /**
         * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigAuthorization {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigAuthorizationCredentials;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: string;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigAuthorizationCredentials {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigBasicauth {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigBasicauthPassword;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigBasicauthUsername;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigBasicauthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigBasicauthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigBearertokensecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * OAuth2 client credentials used to fetch a token for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2 {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2Clientid;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2Clientsecret;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: {[key: string]: string};
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: string[];
            /**
             * The URL to fetch the token from
             */
            tokenUrl: string;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2Clientid {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2ClientidConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2ClientidSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2ClientidConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2ClientidSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2Clientsecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * TLS configuration for the client.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfig {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCa;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCert;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: boolean;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigKeysecret;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: string;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCa {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCaConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCaSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCaConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCaSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * SNSConfig configures notifications via AWS SNS. See https://prometheus.io/docs/alerting/latest/configuration/#sns_configs
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigs {
            /**
             * The SNS API URL i.e. https://sns.us-east-2.amazonaws.com. If not specified, the SNS API URL from the SNS SDK will be used.
             */
            apiURL?: string;
            /**
             * SNS message attributes.
             */
            attributes?: {[key: string]: string};
            /**
             * HTTP client configuration.
             */
            httpConfig?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfig;
            /**
             * The message content of the SNS notification.
             */
            message?: string;
            /**
             * Phone number if message is delivered via SMS in E.164 format. If you don't specify this value, you must specify a value for the TopicARN or TargetARN.
             */
            phoneNumber?: string;
            /**
             * Whether or not to notify about resolved alerts.
             */
            sendResolved?: boolean;
            /**
             * Configures AWS's Signature Verification 4 signing process to sign requests.
             */
            sigv4?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsSigv4;
            /**
             * Subject line when the message is delivered to email endpoints.
             */
            subject?: string;
            /**
             * The  mobile platform endpoint ARN if message is delivered via mobile notifications. If you don't specify this value, you must specify a value for the topic_arn or PhoneNumber.
             */
            targetARN?: string;
            /**
             * SNS topic ARN, i.e. arn:aws:sns:us-east-2:698519295917:My-Topic If you don't specify this value, you must specify a value for the PhoneNumber or TargetARN.
             */
            topicARN?: string;
        }

        /**
         * HTTP client configuration.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfig {
            /**
             * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
             */
            authorization?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigAuthorization;
            /**
             * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
             */
            basicAuth?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigBasicauth;
            /**
             * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigBearertokensecret;
            /**
             * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
             */
            followRedirects?: boolean;
            /**
             * OAuth2 client credentials used to fetch a token for the targets.
             */
            oauth2?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2;
            /**
             * Optional proxy URL.
             */
            proxyURL?: string;
            /**
             * TLS configuration for the client.
             */
            tlsConfig?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfig;
        }

        /**
         * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigAuthorization {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigAuthorizationCredentials;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: string;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigAuthorizationCredentials {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigBasicauth {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigBasicauthPassword;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigBasicauthUsername;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigBasicauthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigBasicauthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigBearertokensecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * OAuth2 client credentials used to fetch a token for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2 {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2Clientid;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2Clientsecret;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: {[key: string]: string};
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: string[];
            /**
             * The URL to fetch the token from
             */
            tokenUrl: string;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2Clientid {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2ClientidConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2ClientidSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2ClientidConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2ClientidSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2Clientsecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * TLS configuration for the client.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfig {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCa;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCert;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: boolean;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigKeysecret;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: string;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCa {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCaConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCaSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCaConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCaSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Configures AWS's Signature Verification 4 signing process to sign requests.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsSigv4 {
            /**
             * AccessKey is the AWS API key. If blank, the environment variable `AWS_ACCESS_KEY_ID` is used.
             */
            accessKey?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsSigv4Accesskey;
            /**
             * Profile is the named AWS profile used to authenticate.
             */
            profile?: string;
            /**
             * Region is the AWS region. If blank, the region from the default credentials chain used.
             */
            region?: string;
            /**
             * RoleArn is the named AWS profile used to authenticate.
             */
            roleArn?: string;
            /**
             * SecretKey is the AWS API secret. If blank, the environment variable `AWS_SECRET_ACCESS_KEY` is used.
             */
            secretKey?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsSigv4Secretkey;
        }

        /**
         * AccessKey is the AWS API key. If blank, the environment variable `AWS_ACCESS_KEY_ID` is used.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsSigv4Accesskey {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * SecretKey is the AWS API secret. If blank, the environment variable `AWS_SECRET_ACCESS_KEY` is used.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsSigv4Secretkey {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * TelegramConfig configures notifications via Telegram. See https://prometheus.io/docs/alerting/latest/configuration/#telegram_config
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigs {
            /**
             * The Telegram API URL i.e. https://api.telegram.org. If not specified, default API URL will be used.
             */
            apiURL?: string;
            /**
             * Telegram bot token The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            botToken?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsBottoken;
            /**
             * The Telegram chat ID.
             */
            chatID?: number;
            /**
             * Disable telegram notifications
             */
            disableNotifications?: boolean;
            /**
             * HTTP client configuration.
             */
            httpConfig?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfig;
            /**
             * Message template
             */
            message?: string;
            /**
             * Parse mode for telegram message
             */
            parseMode?: string;
            /**
             * Whether to notify about resolved alerts.
             */
            sendResolved?: boolean;
        }

        /**
         * Telegram bot token The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsBottoken {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * HTTP client configuration.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfig {
            /**
             * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
             */
            authorization?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigAuthorization;
            /**
             * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
             */
            basicAuth?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigBasicauth;
            /**
             * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigBearertokensecret;
            /**
             * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
             */
            followRedirects?: boolean;
            /**
             * OAuth2 client credentials used to fetch a token for the targets.
             */
            oauth2?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2;
            /**
             * Optional proxy URL.
             */
            proxyURL?: string;
            /**
             * TLS configuration for the client.
             */
            tlsConfig?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfig;
        }

        /**
         * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigAuthorization {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigAuthorizationCredentials;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: string;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigAuthorizationCredentials {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigBasicauth {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigBasicauthPassword;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigBasicauthUsername;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigBasicauthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigBasicauthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigBearertokensecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * OAuth2 client credentials used to fetch a token for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2 {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2Clientid;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2Clientsecret;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: {[key: string]: string};
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: string[];
            /**
             * The URL to fetch the token from
             */
            tokenUrl: string;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2Clientid {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2ClientidConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2ClientidSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2ClientidConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2ClientidSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2Clientsecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * TLS configuration for the client.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfig {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCa;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCert;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: boolean;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigKeysecret;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: string;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCa {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCaConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCaSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCaConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCaSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * VictorOpsConfig configures notifications via VictorOps. See https://prometheus.io/docs/alerting/latest/configuration/#victorops_config
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigs {
            /**
             * The secret's key that contains the API key to use when talking to the VictorOps API. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            apiKey?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsApikey;
            /**
             * The VictorOps API URL.
             */
            apiUrl?: string;
            /**
             * Additional custom fields for notification.
             */
            customFields?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsCustomfields[];
            /**
             * Contains summary of the alerted problem.
             */
            entityDisplayName?: string;
            /**
             * The HTTP client's configuration.
             */
            httpConfig?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfig;
            /**
             * Describes the behavior of the alert (CRITICAL, WARNING, INFO).
             */
            messageType?: string;
            /**
             * The monitoring tool the state message is from.
             */
            monitoringTool?: string;
            /**
             * A key used to map the alert to a team.
             */
            routingKey?: string;
            /**
             * Whether or not to notify about resolved alerts.
             */
            sendResolved?: boolean;
            /**
             * Contains long explanation of the alerted problem.
             */
            stateMessage?: string;
        }

        /**
         * The secret's key that contains the API key to use when talking to the VictorOps API. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsApikey {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * KeyValue defines a (key, value) tuple.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsCustomfields {
            /**
             * Key of the tuple.
             */
            key: string;
            /**
             * Value of the tuple.
             */
            value: string;
        }

        /**
         * The HTTP client's configuration.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfig {
            /**
             * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
             */
            authorization?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigAuthorization;
            /**
             * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
             */
            basicAuth?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigBasicauth;
            /**
             * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigBearertokensecret;
            /**
             * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
             */
            followRedirects?: boolean;
            /**
             * OAuth2 client credentials used to fetch a token for the targets.
             */
            oauth2?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2;
            /**
             * Optional proxy URL.
             */
            proxyURL?: string;
            /**
             * TLS configuration for the client.
             */
            tlsConfig?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfig;
        }

        /**
         * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigAuthorization {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigAuthorizationCredentials;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: string;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigAuthorizationCredentials {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigBasicauth {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigBasicauthPassword;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigBasicauthUsername;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigBasicauthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigBasicauthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigBearertokensecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * OAuth2 client credentials used to fetch a token for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2 {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2Clientid;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2Clientsecret;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: {[key: string]: string};
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: string[];
            /**
             * The URL to fetch the token from
             */
            tokenUrl: string;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2Clientid {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2ClientidConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2ClientidSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2ClientidConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2ClientidSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2Clientsecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * TLS configuration for the client.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfig {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCa;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCert;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: boolean;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigKeysecret;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: string;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCa {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCaConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCaSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCaConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCaSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * WebhookConfig configures notifications via a generic receiver supporting the webhook payload. See https://prometheus.io/docs/alerting/latest/configuration/#webhook_config
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigs {
            /**
             * HTTP client configuration.
             */
            httpConfig?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfig;
            /**
             * Maximum number of alerts to be sent per webhook message. When 0, all alerts are included.
             */
            maxAlerts?: number;
            /**
             * Whether or not to notify about resolved alerts.
             */
            sendResolved?: boolean;
            /**
             * The URL to send HTTP POST requests to. `urlSecret` takes precedence over `url`. One of `urlSecret` and `url` should be defined.
             */
            url?: string;
            /**
             * The secret's key that contains the webhook URL to send HTTP requests to. `urlSecret` takes precedence over `url`. One of `urlSecret` and `url` should be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            urlSecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsUrlsecret;
        }

        /**
         * HTTP client configuration.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfig {
            /**
             * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
             */
            authorization?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigAuthorization;
            /**
             * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
             */
            basicAuth?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigBasicauth;
            /**
             * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigBearertokensecret;
            /**
             * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
             */
            followRedirects?: boolean;
            /**
             * OAuth2 client credentials used to fetch a token for the targets.
             */
            oauth2?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2;
            /**
             * Optional proxy URL.
             */
            proxyURL?: string;
            /**
             * TLS configuration for the client.
             */
            tlsConfig?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfig;
        }

        /**
         * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigAuthorization {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigAuthorizationCredentials;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: string;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigAuthorizationCredentials {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigBasicauth {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigBasicauthPassword;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigBasicauthUsername;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigBasicauthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigBasicauthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigBearertokensecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * OAuth2 client credentials used to fetch a token for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2 {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2Clientid;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2Clientsecret;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: {[key: string]: string};
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: string[];
            /**
             * The URL to fetch the token from
             */
            tokenUrl: string;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2Clientid {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2ClientidConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2ClientidSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2ClientidConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2ClientidSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2Clientsecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * TLS configuration for the client.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfig {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCa;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCert;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: boolean;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigKeysecret;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: string;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCa {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCaConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCaSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCaConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCaSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret's key that contains the webhook URL to send HTTP requests to. `urlSecret` takes precedence over `url`. One of `urlSecret` and `url` should be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsUrlsecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * WeChatConfig configures notifications via WeChat. See https://prometheus.io/docs/alerting/latest/configuration/#wechat_config
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigs {
            agentID?: string;
            /**
             * The secret's key that contains the WeChat API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            apiSecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsApisecret;
            /**
             * The WeChat API URL.
             */
            apiURL?: string;
            /**
             * The corp id for authentication.
             */
            corpID?: string;
            /**
             * HTTP client configuration.
             */
            httpConfig?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfig;
            /**
             * API request data as defined by the WeChat API.
             */
            message?: string;
            messageType?: string;
            /**
             * Whether or not to notify about resolved alerts.
             */
            sendResolved?: boolean;
            toParty?: string;
            toTag?: string;
            toUser?: string;
        }

        /**
         * The secret's key that contains the WeChat API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsApisecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * HTTP client configuration.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfig {
            /**
             * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
             */
            authorization?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigAuthorization;
            /**
             * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
             */
            basicAuth?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigBasicauth;
            /**
             * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigBearertokensecret;
            /**
             * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
             */
            followRedirects?: boolean;
            /**
             * OAuth2 client credentials used to fetch a token for the targets.
             */
            oauth2?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2;
            /**
             * Optional proxy URL.
             */
            proxyURL?: string;
            /**
             * TLS configuration for the client.
             */
            tlsConfig?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfig;
        }

        /**
         * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigAuthorization {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigAuthorizationCredentials;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: string;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigAuthorizationCredentials {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigBasicauth {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigBasicauthPassword;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigBasicauthUsername;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigBasicauthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigBasicauthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigBearertokensecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * OAuth2 client credentials used to fetch a token for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2 {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2Clientid;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2Clientsecret;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: {[key: string]: string};
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: string[];
            /**
             * The URL to fetch the token from
             */
            tokenUrl: string;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2Clientid {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2ClientidConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2ClientidSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2ClientidConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2ClientidSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2Clientsecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * TLS configuration for the client.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfig {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCa;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCert;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: boolean;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigKeysecret;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: string;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCa {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCaConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCaSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCaConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCaSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCert {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCertConfigmap;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCertSecret;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCertConfigmap {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCertSecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigKeysecret {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * The Alertmanager route definition for alerts matching the resource’s namespace. If present, it will be added to the generated Alertmanager configuration as a first-level route.
         */
        export interface AlertmanagerConfigSpecRoute {
            /**
             * Boolean indicating whether an alert should continue matching subsequent sibling nodes. It will always be overridden to true for the first-level route by the Prometheus operator.
             */
            continue?: boolean;
            /**
             * List of labels to group by. Labels must not be repeated (unique list). Special label "..." (aggregate by all possible labels), if provided, must be the only element in the list.
             */
            groupBy?: string[];
            /**
             * How long to wait before sending an updated notification. Must match the regular expression`^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$` Example: "5m"
             */
            groupInterval?: string;
            /**
             * How long to wait before sending the initial notification. Must match the regular expression`^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$` Example: "30s"
             */
            groupWait?: string;
            /**
             * List of matchers that the alert’s labels should match. For the first level route, the operator removes any existing equality and regexp matcher on the `namespace` label and adds a `namespace: <object namespace>` matcher.
             */
            matchers?: outputs.monitoring.v1alpha1.AlertmanagerConfigSpecRouteMatchers[];
            /**
             * Note: this comment applies to the field definition above but appears below otherwise it gets included in the generated manifest. CRD schema doesn't support "self-referential types for now (see https"://github.com/kubernetes/kubernetes/issues/62872). We have to use an alternative type to circumvent the limitation. The downside is that the Kube API can't validate the data beyond the fact that it is a valid JSON representation. MuteTimeIntervals is a list of MuteTimeInterval names that will mute this route when matched,
             */
            muteTimeIntervals?: string[];
            /**
             * Name of the receiver for this route. If not empty, it should be listed in the `receivers` field.
             */
            receiver?: string;
            /**
             * How long to wait before repeating the last notification. Must match the regular expression`^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$` Example: "4h"
             */
            repeatInterval?: string;
            /**
             * Child routes.
             */
            routes?: {[key: string]: any}[];
        }

        /**
         * Matcher defines how to match on alert's labels.
         */
        export interface AlertmanagerConfigSpecRouteMatchers {
            /**
             * Match operation available with AlertManager >= v0.22.0 and takes precedence over Regex (deprecated) if non-empty.
             */
            matchType?: string;
            /**
             * Label to match.
             */
            name: string;
            /**
             * Whether to match on equality (false) or regular-expression (true). Deprecated as of AlertManager >= v0.22.0 where a user should use MatchType instead.
             */
            regex?: boolean;
            /**
             * Label value to match.
             */
            value?: string;
        }

    }
}

export namespace nats {
    export namespace v1alpha2 {
        export interface NatsClusterSpec {
            auth?: outputs.nats.v1alpha2.NatsClusterSpecAuth;
            extraRoutes?: outputs.nats.v1alpha2.NatsClusterSpecExtraroutes[];
            gatewayConfig?: outputs.nats.v1alpha2.NatsClusterSpecGatewayconfig;
            lameDuckDurationSeconds?: number;
            leafnodeConfig?: outputs.nats.v1alpha2.NatsClusterSpecLeafnodeconfig;
            natsConfig?: outputs.nats.v1alpha2.NatsClusterSpecNatsconfig;
            noAdvertise?: boolean;
            operatorConfig?: outputs.nats.v1alpha2.NatsClusterSpecOperatorconfig;
            paused?: boolean;
            pod?: outputs.nats.v1alpha2.NatsClusterSpecPod;
            serverImage?: string;
            size?: number;
            template?: {[key: string]: any};
            tls?: outputs.nats.v1alpha2.NatsClusterSpecTls;
            useServerName?: boolean;
            version?: string;
            websocketConfig?: outputs.nats.v1alpha2.NatsClusterSpecWebsocketconfig;
        }

        export interface NatsClusterSpecAuth {
            clientsAuthFile?: string;
            clientsAuthSecret?: string;
            clientsAuthTimeout?: number;
            enableServiceAccounts?: boolean;
            tlsVerifyAndMap?: boolean;
        }

        export interface NatsClusterSpecExtraroutes {
            cluster?: string;
            route?: string;
        }

        export interface NatsClusterSpecGatewayconfig {
            gateways?: outputs.nats.v1alpha2.NatsClusterSpecGatewayconfigGateways[];
            hostPort?: number;
            name?: string;
            rejectUnknown?: boolean;
        }

        export interface NatsClusterSpecGatewayconfigGateways {
            name?: string;
            url?: string;
        }

        export interface NatsClusterSpecLeafnodeconfig {
            port?: number;
            remotes?: outputs.nats.v1alpha2.NatsClusterSpecLeafnodeconfigRemotes[];
        }

        export interface NatsClusterSpecLeafnodeconfigRemotes {
            credentials?: string;
            url?: string;
            urls?: string[];
        }

        export interface NatsClusterSpecNatsconfig {
            debug?: boolean;
            disableLogtime?: boolean;
            maxConnections?: number;
            maxControlLine?: number;
            maxPayload?: number;
            maxPending?: number;
            maxSubscriptions?: number;
            trace?: boolean;
            write_deadline?: string;
        }

        export interface NatsClusterSpecOperatorconfig {
            resolver?: string;
            secret?: string;
            systemAccount?: string;
        }

        export interface NatsClusterSpecPod {
            advertiseExternalIP?: boolean;
            annotations?: {[key: string]: any};
            antiAffinity?: boolean;
            bootconfigImage?: string;
            bootconfigImageTag?: string;
            enableClientsHostPort?: boolean;
            enableConfigReload?: boolean;
            enableMetrics?: boolean;
            labels?: {[key: string]: any};
            metricsImage?: string;
            metricsImagePullPolicy?: string;
            metricsImageTag?: string;
            natsEnv?: {[key: string]: any}[];
            nodeSelector?: {[key: string]: any};
            reloaderImage?: string;
            reloaderImagePullPolicy?: string;
            reloaderImageTag?: string;
            reloaderResources?: {[key: string]: any};
            resources?: {[key: string]: any};
            tolerations?: {[key: string]: any}[];
            volumeMounts?: {[key: string]: any}[];
        }

        export interface NatsClusterSpecTls {
            cipherSuites?: string[];
            clientsTLSTimeout?: number;
            curvePreferences?: string[];
            enableHttps?: boolean;
            gatewaySecret?: string;
            gatewaySecretCAFileName?: string;
            gatewaySecretCertFileName?: string;
            gatewaySecretKeyFileName?: string;
            gatewaysTLSTimeout?: number;
            leafnodeSecret?: string;
            leafnodeSecretCAFileName?: string;
            leafnodeSecretCertFileName?: string;
            leafnodeSecretKeyFileName?: string;
            leafnodesTLSTimeout?: number;
            routesSecret?: string;
            routesSecretCAFileName?: string;
            routesSecretCertFileName?: string;
            routesSecretKeyFileName?: string;
            routesTLSTimeout?: number;
            serverSecret?: string;
            serverSecretCAFileName?: string;
            serverSecretCertFileName?: string;
            serverSecretKeyFileName?: string;
            verify?: boolean;
            websocketSecret?: string;
            websocketSecretCAFileName?: string;
            websocketSecretCertFileName?: string;
            websocketSecretKeyFileName?: string;
            websocketTLSTimeout?: number;
        }

        export interface NatsClusterSpecWebsocketconfig {
            compression?: boolean;
            handshakeTimeout?: number;
            port?: number;
        }

        export interface NatsServiceRoleSpec {
            permissions?: outputs.nats.v1alpha2.NatsServiceRoleSpecPermissions;
        }

        export interface NatsServiceRoleSpecPermissions {
            publish?: string[];
            subscribe?: string[];
        }

    }
}

export namespace pingcap {
    export namespace v1alpha1 {
        export interface BackupScheduleSpec {
            backupTemplate: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplate;
            imagePullSecrets?: outputs.pingcap.v1alpha1.BackupScheduleSpecImagepullsecrets[];
            maxBackups?: number;
            maxReservedTime?: string;
            pause?: boolean;
            schedule: string;
            storageClassName?: string;
            storageSize?: string;
        }
        /**
         * backupScheduleSpecProvideDefaults sets the appropriate defaults for BackupScheduleSpec
         */
        export function backupScheduleSpecProvideDefaults(val: BackupScheduleSpec): BackupScheduleSpec {
            return {
                ...val,
                backupTemplate: outputs.pingcap.v1alpha1.backupScheduleSpecBackuptemplateProvideDefaults(val.backupTemplate),
            };
        }

        export interface BackupScheduleSpecBackuptemplate {
            affinity?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinity;
            azblob?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAzblob;
            backupType?: string;
            br?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateBr;
            cleanOption?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateCleanoption;
            cleanPolicy?: string;
            dumpling?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateDumpling;
            env?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateEnv[];
            from?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateFrom;
            gcs?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateGcs;
            imagePullSecrets?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateImagepullsecrets[];
            local?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocal;
            podSecurityContext?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplatePodsecuritycontext;
            priorityClassName?: string;
            resources?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateResources;
            s3?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateS3;
            serviceAccount?: string;
            storageClassName?: string;
            storageSize?: string;
            tableFilter?: string[];
            tikvGCLifeTime?: string;
            tolerations?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateTolerations[];
            toolImage?: string;
            useKMS?: boolean;
        }
        /**
         * backupScheduleSpecBackuptemplateProvideDefaults sets the appropriate defaults for BackupScheduleSpecBackuptemplate
         */
        export function backupScheduleSpecBackuptemplateProvideDefaults(val: BackupScheduleSpecBackuptemplate): BackupScheduleSpecBackuptemplate {
            return {
                ...val,
                cleanOption: (val.cleanOption ? outputs.pingcap.v1alpha1.backupScheduleSpecBackuptemplateCleanoptionProvideDefaults(val.cleanOption) : undefined),
            };
        }

        export interface BackupScheduleSpecBackuptemplateAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityNodeaffinity;
            podAffinity?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityPodaffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityPodantiaffinity;
        }

        export interface BackupScheduleSpecBackuptemplateAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface BackupScheduleSpecBackuptemplateAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface BackupScheduleSpecBackuptemplateAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface BackupScheduleSpecBackuptemplateAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupScheduleSpecBackuptemplateAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupScheduleSpecBackuptemplateAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface BackupScheduleSpecBackuptemplateAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface BackupScheduleSpecBackuptemplateAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupScheduleSpecBackuptemplateAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupScheduleSpecBackuptemplateAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface BackupScheduleSpecBackuptemplateAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface BackupScheduleSpecBackuptemplateAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface BackupScheduleSpecBackuptemplateAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupScheduleSpecBackuptemplateAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupScheduleSpecBackuptemplateAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface BackupScheduleSpecBackuptemplateAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupScheduleSpecBackuptemplateAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupScheduleSpecBackuptemplateAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface BackupScheduleSpecBackuptemplateAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface BackupScheduleSpecBackuptemplateAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface BackupScheduleSpecBackuptemplateAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupScheduleSpecBackuptemplateAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupScheduleSpecBackuptemplateAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface BackupScheduleSpecBackuptemplateAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupScheduleSpecBackuptemplateAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupScheduleSpecBackuptemplateAzblob {
            accessTier?: string;
            container?: string;
            path?: string;
            prefix?: string;
            secretName?: string;
        }

        export interface BackupScheduleSpecBackuptemplateBr {
            checksum?: boolean;
            cluster: string;
            clusterNamespace?: string;
            concurrency?: number;
            db?: string;
            logLevel?: string;
            onLine?: boolean;
            options?: string[];
            rateLimit?: number;
            sendCredToTikv?: boolean;
            statusAddr?: string;
            table?: string;
            timeAgo?: string;
        }

        export interface BackupScheduleSpecBackuptemplateCleanoption {
            backoffEnabled?: boolean;
            batchConcurrency?: number;
            disableBatchConcurrency?: boolean;
            pageSize?: number;
            retryCount?: number;
            routineConcurrency?: number;
        }
        /**
         * backupScheduleSpecBackuptemplateCleanoptionProvideDefaults sets the appropriate defaults for BackupScheduleSpecBackuptemplateCleanoption
         */
        export function backupScheduleSpecBackuptemplateCleanoptionProvideDefaults(val: BackupScheduleSpecBackuptemplateCleanoption): BackupScheduleSpecBackuptemplateCleanoption {
            return {
                ...val,
                retryCount: (val.retryCount) ?? 5,
            };
        }

        export interface BackupScheduleSpecBackuptemplateDumpling {
            options?: string[];
            tableFilter?: string[];
        }

        export interface BackupScheduleSpecBackuptemplateEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateEnvValuefrom;
        }

        export interface BackupScheduleSpecBackuptemplateEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateEnvValuefromSecretkeyref;
        }

        export interface BackupScheduleSpecBackuptemplateEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface BackupScheduleSpecBackuptemplateEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface BackupScheduleSpecBackuptemplateEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface BackupScheduleSpecBackuptemplateEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface BackupScheduleSpecBackuptemplateFrom {
            host: string;
            port?: number;
            secretName: string;
            tlsClientSecretName?: string;
            user?: string;
        }

        export interface BackupScheduleSpecBackuptemplateGcs {
            bucket?: string;
            bucketAcl?: string;
            location?: string;
            objectAcl?: string;
            path?: string;
            prefix?: string;
            projectId: string;
            secretName?: string;
            storageClass?: string;
        }

        export interface BackupScheduleSpecBackuptemplateImagepullsecrets {
            name?: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocal {
            prefix?: string;
            volume: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolume;
            volumeMount: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumemount;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolume {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeAwselasticblockstore;
            azureDisk?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeAzuredisk;
            azureFile?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeAzurefile;
            cephfs?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeCephfs;
            cinder?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeCinder;
            configMap?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeConfigmap;
            csi?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeDownwardapi;
            emptyDir?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeEmptydir;
            ephemeral?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeEphemeral;
            fc?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeFc;
            flexVolume?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeFlexvolume;
            flocker?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeGcepersistentdisk;
            gitRepo?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeGitrepo;
            glusterfs?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeHostpath;
            iscsi?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumePersistentvolumeclaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumePhotonpersistentdisk;
            portworxVolume?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumePortworxvolume;
            projected?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeProjected;
            quobyte?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeQuobyte;
            rbd?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeRbd;
            scaleIO?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeScaleio;
            secret?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeSecret;
            storageos?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeVspherevolume;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeAwselasticblockstore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeAzuredisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeAzurefile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeCephfsSecretref;
            user?: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeCephfsSecretref {
            name?: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeCinderSecretref;
            volumeID: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeCinderSecretref {
            name?: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeConfigmap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeCsiNodepublishsecretref;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeCsiNodepublishsecretref {
            name?: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeDownwardapi {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeDownwardapiItems[];
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeDownwardapiItemsResourcefieldref;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeEmptydir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeEphemeralVolumeclaimtemplate;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeEphemeralVolumeclaimtemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeEphemeralVolumeclaimtemplateSpec;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeEphemeralVolumeclaimtemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeEphemeralVolumeclaimtemplateSpecDatasource;
            resources?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeEphemeralVolumeclaimtemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeEphemeralVolumeclaimtemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeEphemeralVolumeclaimtemplateSpecDatasource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeEphemeralVolumeclaimtemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeEphemeralVolumeclaimtemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeFlexvolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeFlexvolumeSecretref;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeFlexvolumeSecretref {
            name?: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeGcepersistentdisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeGitrepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeHostpath {
            path: string;
            type?: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeIscsiSecretref;
            targetPortal: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeIscsiSecretref {
            name?: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumePersistentvolumeclaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumePhotonpersistentdisk {
            fsType?: string;
            pdID: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumePortworxvolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeProjectedSources[];
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeProjectedSourcesConfigmap;
            downwardAPI?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeProjectedSourcesDownwardapi;
            secret?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeProjectedSourcesServiceaccounttoken;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeProjectedSourcesConfigmap {
            items?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeProjectedSourcesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeProjectedSourcesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeProjectedSourcesDownwardapi {
            items?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeProjectedSourcesDownwardapiItems[];
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeProjectedSourcesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeProjectedSourcesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeProjectedSourcesDownwardapiItemsResourcefieldref;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeProjectedSourcesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeProjectedSourcesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeProjectedSourcesServiceaccounttoken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeRbdSecretref;
            user?: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeRbdSecretref {
            name?: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeScaleio {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeScaleioSecretref;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeScaleioSecretref {
            name?: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplateLocalVolumeStorageosSecretref;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeStorageosSecretref {
            name?: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumeVspherevolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface BackupScheduleSpecBackuptemplateLocalVolumemount {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface BackupScheduleSpecBackuptemplatePodsecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplatePodsecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplatePodsecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplatePodsecuritycontextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackuptemplatePodsecuritycontextWindowsoptions;
        }

        export interface BackupScheduleSpecBackuptemplatePodsecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface BackupScheduleSpecBackuptemplatePodsecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface BackupScheduleSpecBackuptemplatePodsecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface BackupScheduleSpecBackuptemplatePodsecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface BackupScheduleSpecBackuptemplateResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface BackupScheduleSpecBackuptemplateS3 {
            acl?: string;
            bucket?: string;
            endpoint?: string;
            options?: string[];
            path?: string;
            prefix?: string;
            provider: string;
            region?: string;
            secretName?: string;
            sse?: string;
            storageClass?: string;
        }

        export interface BackupScheduleSpecBackuptemplateTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface BackupScheduleSpecImagepullsecrets {
            name?: string;
        }

        export interface BackupScheduleStatus {
            allBackupCleanTime?: string;
            lastBackup?: string;
            lastBackupTime?: string;
        }

        export interface BackupSpec {
            affinity?: outputs.pingcap.v1alpha1.BackupSpecAffinity;
            azblob?: outputs.pingcap.v1alpha1.BackupSpecAzblob;
            backupType?: string;
            br?: outputs.pingcap.v1alpha1.BackupSpecBr;
            cleanOption?: outputs.pingcap.v1alpha1.BackupSpecCleanoption;
            cleanPolicy?: string;
            dumpling?: outputs.pingcap.v1alpha1.BackupSpecDumpling;
            env?: outputs.pingcap.v1alpha1.BackupSpecEnv[];
            from?: outputs.pingcap.v1alpha1.BackupSpecFrom;
            gcs?: outputs.pingcap.v1alpha1.BackupSpecGcs;
            imagePullSecrets?: outputs.pingcap.v1alpha1.BackupSpecImagepullsecrets[];
            local?: outputs.pingcap.v1alpha1.BackupSpecLocal;
            podSecurityContext?: outputs.pingcap.v1alpha1.BackupSpecPodsecuritycontext;
            priorityClassName?: string;
            resources?: outputs.pingcap.v1alpha1.BackupSpecResources;
            s3?: outputs.pingcap.v1alpha1.BackupSpecS3;
            serviceAccount?: string;
            storageClassName?: string;
            storageSize?: string;
            tableFilter?: string[];
            tikvGCLifeTime?: string;
            tolerations?: outputs.pingcap.v1alpha1.BackupSpecTolerations[];
            toolImage?: string;
            useKMS?: boolean;
        }
        /**
         * backupSpecProvideDefaults sets the appropriate defaults for BackupSpec
         */
        export function backupSpecProvideDefaults(val: BackupSpec): BackupSpec {
            return {
                ...val,
                cleanOption: (val.cleanOption ? outputs.pingcap.v1alpha1.backupSpecCleanoptionProvideDefaults(val.cleanOption) : undefined),
            };
        }

        export interface BackupSpecAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.BackupSpecAffinityNodeaffinity;
            podAffinity?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodaffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodantiaffinity;
        }

        export interface BackupSpecAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface BackupSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.pingcap.v1alpha1.BackupSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface BackupSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.BackupSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface BackupSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.BackupSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface BackupSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.BackupSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface BackupSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupSpecAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface BackupSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.BackupSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface BackupSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface BackupSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface BackupSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupSpecAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface BackupSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.BackupSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface BackupSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface BackupSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface BackupSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupSpecAzblob {
            accessTier?: string;
            container?: string;
            path?: string;
            prefix?: string;
            secretName?: string;
        }

        export interface BackupSpecBr {
            checksum?: boolean;
            cluster: string;
            clusterNamespace?: string;
            concurrency?: number;
            db?: string;
            logLevel?: string;
            onLine?: boolean;
            options?: string[];
            rateLimit?: number;
            sendCredToTikv?: boolean;
            statusAddr?: string;
            table?: string;
            timeAgo?: string;
        }

        export interface BackupSpecCleanoption {
            backoffEnabled?: boolean;
            batchConcurrency?: number;
            disableBatchConcurrency?: boolean;
            pageSize?: number;
            retryCount?: number;
            routineConcurrency?: number;
        }
        /**
         * backupSpecCleanoptionProvideDefaults sets the appropriate defaults for BackupSpecCleanoption
         */
        export function backupSpecCleanoptionProvideDefaults(val: BackupSpecCleanoption): BackupSpecCleanoption {
            return {
                ...val,
                retryCount: (val.retryCount) ?? 5,
            };
        }

        export interface BackupSpecDumpling {
            options?: string[];
            tableFilter?: string[];
        }

        export interface BackupSpecEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.BackupSpecEnvValuefrom;
        }

        export interface BackupSpecEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.BackupSpecEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.BackupSpecEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.BackupSpecEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.BackupSpecEnvValuefromSecretkeyref;
        }

        export interface BackupSpecEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface BackupSpecEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface BackupSpecEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface BackupSpecEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface BackupSpecFrom {
            host: string;
            port?: number;
            secretName: string;
            tlsClientSecretName?: string;
            user?: string;
        }

        export interface BackupSpecGcs {
            bucket?: string;
            bucketAcl?: string;
            location?: string;
            objectAcl?: string;
            path?: string;
            prefix?: string;
            projectId: string;
            secretName?: string;
            storageClass?: string;
        }

        export interface BackupSpecImagepullsecrets {
            name?: string;
        }

        export interface BackupSpecLocal {
            prefix?: string;
            volume: outputs.pingcap.v1alpha1.BackupSpecLocalVolume;
            volumeMount: outputs.pingcap.v1alpha1.BackupSpecLocalVolumemount;
        }

        export interface BackupSpecLocalVolume {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeAwselasticblockstore;
            azureDisk?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeAzuredisk;
            azureFile?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeAzurefile;
            cephfs?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeCephfs;
            cinder?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeCinder;
            configMap?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeConfigmap;
            csi?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeDownwardapi;
            emptyDir?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeEmptydir;
            ephemeral?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeEphemeral;
            fc?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeFc;
            flexVolume?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeFlexvolume;
            flocker?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeGcepersistentdisk;
            gitRepo?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeGitrepo;
            glusterfs?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeHostpath;
            iscsi?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumePersistentvolumeclaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumePhotonpersistentdisk;
            portworxVolume?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumePortworxvolume;
            projected?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjected;
            quobyte?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeQuobyte;
            rbd?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeRbd;
            scaleIO?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeScaleio;
            secret?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeSecret;
            storageos?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeVspherevolume;
        }

        export interface BackupSpecLocalVolumeAwselasticblockstore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface BackupSpecLocalVolumeAzuredisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface BackupSpecLocalVolumeAzurefile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface BackupSpecLocalVolumeCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeCephfsSecretref;
            user?: string;
        }

        export interface BackupSpecLocalVolumeCephfsSecretref {
            name?: string;
        }

        export interface BackupSpecLocalVolumeCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeCinderSecretref;
            volumeID: string;
        }

        export interface BackupSpecLocalVolumeCinderSecretref {
            name?: string;
        }

        export interface BackupSpecLocalVolumeConfigmap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface BackupSpecLocalVolumeConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface BackupSpecLocalVolumeCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeCsiNodepublishsecretref;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface BackupSpecLocalVolumeCsiNodepublishsecretref {
            name?: string;
        }

        export interface BackupSpecLocalVolumeDownwardapi {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeDownwardapiItems[];
        }

        export interface BackupSpecLocalVolumeDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeDownwardapiItemsResourcefieldref;
        }

        export interface BackupSpecLocalVolumeDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface BackupSpecLocalVolumeDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface BackupSpecLocalVolumeEmptydir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface BackupSpecLocalVolumeEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeEphemeralVolumeclaimtemplate;
        }

        export interface BackupSpecLocalVolumeEphemeralVolumeclaimtemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeEphemeralVolumeclaimtemplateSpec;
        }

        export interface BackupSpecLocalVolumeEphemeralVolumeclaimtemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeEphemeralVolumeclaimtemplateSpecDatasource;
            resources?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeEphemeralVolumeclaimtemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeEphemeralVolumeclaimtemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface BackupSpecLocalVolumeEphemeralVolumeclaimtemplateSpecDatasource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface BackupSpecLocalVolumeEphemeralVolumeclaimtemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface BackupSpecLocalVolumeEphemeralVolumeclaimtemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupSpecLocalVolumeEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupSpecLocalVolumeFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface BackupSpecLocalVolumeFlexvolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeFlexvolumeSecretref;
        }

        export interface BackupSpecLocalVolumeFlexvolumeSecretref {
            name?: string;
        }

        export interface BackupSpecLocalVolumeFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface BackupSpecLocalVolumeGcepersistentdisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface BackupSpecLocalVolumeGitrepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface BackupSpecLocalVolumeGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface BackupSpecLocalVolumeHostpath {
            path: string;
            type?: string;
        }

        export interface BackupSpecLocalVolumeIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeIscsiSecretref;
            targetPortal: string;
        }

        export interface BackupSpecLocalVolumeIscsiSecretref {
            name?: string;
        }

        export interface BackupSpecLocalVolumeNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface BackupSpecLocalVolumePersistentvolumeclaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface BackupSpecLocalVolumePhotonpersistentdisk {
            fsType?: string;
            pdID: string;
        }

        export interface BackupSpecLocalVolumePortworxvolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface BackupSpecLocalVolumeProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSources[];
        }

        export interface BackupSpecLocalVolumeProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSourcesConfigmap;
            downwardAPI?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSourcesDownwardapi;
            secret?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSourcesServiceaccounttoken;
        }

        export interface BackupSpecLocalVolumeProjectedSourcesConfigmap {
            items?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSourcesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface BackupSpecLocalVolumeProjectedSourcesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface BackupSpecLocalVolumeProjectedSourcesDownwardapi {
            items?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSourcesDownwardapiItems[];
        }

        export interface BackupSpecLocalVolumeProjectedSourcesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSourcesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSourcesDownwardapiItemsResourcefieldref;
        }

        export interface BackupSpecLocalVolumeProjectedSourcesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface BackupSpecLocalVolumeProjectedSourcesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface BackupSpecLocalVolumeProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface BackupSpecLocalVolumeProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface BackupSpecLocalVolumeProjectedSourcesServiceaccounttoken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface BackupSpecLocalVolumeQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface BackupSpecLocalVolumeRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeRbdSecretref;
            user?: string;
        }

        export interface BackupSpecLocalVolumeRbdSecretref {
            name?: string;
        }

        export interface BackupSpecLocalVolumeScaleio {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeScaleioSecretref;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface BackupSpecLocalVolumeScaleioSecretref {
            name?: string;
        }

        export interface BackupSpecLocalVolumeSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface BackupSpecLocalVolumeSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface BackupSpecLocalVolumeStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeStorageosSecretref;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface BackupSpecLocalVolumeStorageosSecretref {
            name?: string;
        }

        export interface BackupSpecLocalVolumeVspherevolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface BackupSpecLocalVolumemount {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface BackupSpecPodsecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.BackupSpecPodsecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.BackupSpecPodsecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.BackupSpecPodsecuritycontextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.BackupSpecPodsecuritycontextWindowsoptions;
        }

        export interface BackupSpecPodsecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface BackupSpecPodsecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface BackupSpecPodsecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface BackupSpecPodsecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface BackupSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface BackupSpecS3 {
            acl?: string;
            bucket?: string;
            endpoint?: string;
            options?: string[];
            path?: string;
            prefix?: string;
            provider: string;
            region?: string;
            secretName?: string;
            sse?: string;
            storageClass?: string;
        }

        export interface BackupSpecTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface BackupStatus {
            backupPath?: string;
            backupSize?: number;
            backupSizeReadable?: string;
            commitTs?: string;
            conditions?: outputs.pingcap.v1alpha1.BackupStatusConditions[];
            phase?: string;
            timeCompleted?: string;
            timeStarted?: string;
        }

        export interface BackupStatusConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface DMClusterSpec {
            affinity?: outputs.pingcap.v1alpha1.DMClusterSpecAffinity;
            annotations?: {[key: string]: string};
            configUpdateStrategy?: string;
            discovery?: outputs.pingcap.v1alpha1.DMClusterSpecDiscovery;
            dnsConfig?: outputs.pingcap.v1alpha1.DMClusterSpecDnsconfig;
            dnsPolicy?: string;
            enablePVReclaim?: boolean;
            hostNetwork?: boolean;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.DMClusterSpecImagepullsecrets[];
            labels?: {[key: string]: string};
            master?: outputs.pingcap.v1alpha1.DMClusterSpecMaster;
            nodeSelector?: {[key: string]: string};
            paused?: boolean;
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.DMClusterSpecPodsecuritycontext;
            priorityClassName?: string;
            pvReclaimPolicy?: string;
            schedulerName?: string;
            statefulSetUpdateStrategy?: string;
            suspendAction?: outputs.pingcap.v1alpha1.DMClusterSpecSuspendaction;
            timezone?: string;
            tlsClientSecretNames?: string[];
            tlsCluster?: outputs.pingcap.v1alpha1.DMClusterSpecTlscluster;
            tolerations?: outputs.pingcap.v1alpha1.DMClusterSpecTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.DMClusterSpecTopologyspreadconstraints[];
            version?: string;
            worker?: outputs.pingcap.v1alpha1.DMClusterSpecWorker;
        }
        /**
         * dmclusterSpecProvideDefaults sets the appropriate defaults for DMClusterSpec
         */
        export function dmclusterSpecProvideDefaults(val: DMClusterSpec): DMClusterSpec {
            return {
                ...val,
                imagePullPolicy: (val.imagePullPolicy) ?? "IfNotPresent",
                master: (val.master ? outputs.pingcap.v1alpha1.dmclusterSpecMasterProvideDefaults(val.master) : undefined),
                pvReclaimPolicy: (val.pvReclaimPolicy) ?? "Retain",
                worker: (val.worker ? outputs.pingcap.v1alpha1.dmclusterSpecWorkerProvideDefaults(val.worker) : undefined),
            };
        }

        export interface DMClusterSpecAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityNodeaffinity;
            podAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodaffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodantiaffinity;
        }

        export interface DMClusterSpecAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface DMClusterSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.pingcap.v1alpha1.DMClusterSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface DMClusterSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface DMClusterSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.DMClusterSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface DMClusterSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface DMClusterSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface DMClusterSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface DMClusterSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface DMClusterSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface DMClusterSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscovery {
            additionalContainers?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumemounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumes[];
            address?: string;
            affinity?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinity;
            annotations?: {[key: string]: string};
            configUpdateStrategy?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryDnsconfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryEnv[];
            envFrom?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryEnvfrom[];
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryImagepullsecrets[];
            initContainers?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainers[];
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryPodsecuritycontext;
            priorityClassName?: string;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            statefulSetUpdateStrategy?: string;
            suspendAction?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoverySuspendaction;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryTopologyspreadconstraints[];
            version?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersEnvValuefrom;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersEnvValuefromSecretkeyref;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersEnvfromSecretref;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersLifecyclePrestop;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersLifecyclePoststartTcpsocket;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersLifecyclePrestopTcpsocket;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * dmclusterSpecDiscoveryAdditionalcontainersPortsProvideDefaults sets the appropriate defaults for DMClusterSpecDiscoveryAdditionalcontainersPorts
         */
        export function dmclusterSpecDiscoveryAdditionalcontainersPortsProvideDefaults(val: DMClusterSpecDiscoveryAdditionalcontainersPorts): DMClusterSpecDiscoveryAdditionalcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersSecuritycontextWindowsoptions;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersStartupprobeExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesAwselasticblockstore;
            azureDisk?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesAzuredisk;
            azureFile?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesAzurefile;
            cephfs?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesConfigmap;
            csi?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesDownwardapi;
            emptyDir?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesEmptydir;
            ephemeral?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesFlexvolume;
            flocker?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesGcepersistentdisk;
            gitRepo?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesGitrepo;
            glusterfs?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesHostpath;
            iscsi?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesPersistentvolumeclaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesPhotonpersistentdisk;
            portworxVolume?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesPortworxvolume;
            projected?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesScaleio;
            secret?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesVspherevolume;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesAwselasticblockstore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesAzuredisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesAzurefile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesCephfsSecretref;
            user?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesCephfsSecretref {
            name?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesCinderSecretref;
            volumeID: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesCinderSecretref {
            name?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesConfigmap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesCsiNodepublishsecretref;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesCsiNodepublishsecretref {
            name?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesDownwardapi {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesDownwardapiItems[];
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesDownwardapiItemsResourcefieldref;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesEmptydir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplate;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpec;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource;
            resources?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesFlexvolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesFlexvolumeSecretref;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesFlexvolumeSecretref {
            name?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesGcepersistentdisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesGitrepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesHostpath {
            path: string;
            type?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesIscsiSecretref;
            targetPortal: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesIscsiSecretref {
            name?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesPersistentvolumeclaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesPhotonpersistentdisk {
            fsType?: string;
            pdID: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesPortworxvolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesProjectedSources[];
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesProjectedSourcesConfigmap;
            downwardAPI?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesProjectedSourcesDownwardapi;
            secret?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesProjectedSourcesServiceaccounttoken;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesProjectedSourcesConfigmap {
            items?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesProjectedSourcesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesProjectedSourcesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesProjectedSourcesDownwardapi {
            items?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesProjectedSourcesDownwardapiItems[];
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesProjectedSourcesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesProjectedSourcesServiceaccounttoken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesRbdSecretref;
            user?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesRbdSecretref {
            name?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesScaleio {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesScaleioSecretref;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesScaleioSecretref {
            name?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalvolumesStorageosSecretref;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesStorageosSecretref {
            name?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalvolumesVspherevolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface DMClusterSpecDiscoveryAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityNodeaffinity;
            podAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodaffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodantiaffinity;
        }

        export interface DMClusterSpecDiscoveryAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface DMClusterSpecDiscoveryAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface DMClusterSpecDiscoveryAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface DMClusterSpecDiscoveryAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscoveryAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscoveryAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface DMClusterSpecDiscoveryAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface DMClusterSpecDiscoveryAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscoveryAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscoveryAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface DMClusterSpecDiscoveryAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface DMClusterSpecDiscoveryAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecDiscoveryAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecDiscoveryAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscoveryAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecDiscoveryAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecDiscoveryAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscoveryAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface DMClusterSpecDiscoveryAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface DMClusterSpecDiscoveryAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecDiscoveryAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecDiscoveryAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscoveryAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecDiscoveryAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecDiscoveryAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscoveryDnsconfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryDnsconfigOptions[];
            searches?: string[];
        }

        export interface DMClusterSpecDiscoveryDnsconfigOptions {
            name?: string;
            value?: string;
        }

        export interface DMClusterSpecDiscoveryEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryEnvValuefrom;
        }

        export interface DMClusterSpecDiscoveryEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryEnvValuefromSecretkeyref;
        }

        export interface DMClusterSpecDiscoveryEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecDiscoveryEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecDiscoveryEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryEnvfromSecretref;
        }

        export interface DMClusterSpecDiscoveryEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryImagepullsecrets {
            name?: string;
        }

        export interface DMClusterSpecDiscoveryInitcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersEnvValuefrom;
        }

        export interface DMClusterSpecDiscoveryInitcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersEnvValuefromSecretkeyref;
        }

        export interface DMClusterSpecDiscoveryInitcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryInitcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryInitcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersEnvfromSecretref;
        }

        export interface DMClusterSpecDiscoveryInitcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryInitcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryInitcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersLifecyclePrestop;
        }

        export interface DMClusterSpecDiscoveryInitcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersLifecyclePoststartTcpsocket;
        }

        export interface DMClusterSpecDiscoveryInitcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryInitcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersLifecyclePrestopTcpsocket;
        }

        export interface DMClusterSpecDiscoveryInitcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryInitcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecDiscoveryInitcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryInitcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * dmclusterSpecDiscoveryInitcontainersPortsProvideDefaults sets the appropriate defaults for DMClusterSpecDiscoveryInitcontainersPorts
         */
        export function dmclusterSpecDiscoveryInitcontainersPortsProvideDefaults(val: DMClusterSpecDiscoveryInitcontainersPorts): DMClusterSpecDiscoveryInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface DMClusterSpecDiscoveryInitcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecDiscoveryInitcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryInitcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface DMClusterSpecDiscoveryInitcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersSecuritycontextWindowsoptions;
        }

        export interface DMClusterSpecDiscoveryInitcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface DMClusterSpecDiscoveryInitcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecDiscoveryInitcontainersStartupprobeExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryInitcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface DMClusterSpecDiscoveryInitcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface DMClusterSpecDiscoveryPodsecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryPodsecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryPodsecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryPodsecuritycontextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryPodsecuritycontextWindowsoptions;
        }

        export interface DMClusterSpecDiscoveryPodsecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecDiscoveryPodsecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecDiscoveryPodsecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryPodsecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecDiscoverySuspendaction {
            suspendStatefulSet?: boolean;
        }

        export interface DMClusterSpecDiscoveryTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface DMClusterSpecDiscoveryTopologyspreadconstraints {
            topologyKey: string;
        }

        export interface DMClusterSpecDnsconfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.DMClusterSpecDnsconfigOptions[];
            searches?: string[];
        }

        export interface DMClusterSpecDnsconfigOptions {
            name?: string;
            value?: string;
        }

        export interface DMClusterSpecImagepullsecrets {
            name?: string;
        }

        export interface DMClusterSpecMaster {
            additionalContainers?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumemounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumes[];
            affinity?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinity;
            annotations?: {[key: string]: string};
            baseImage?: string;
            config?: {[key: string]: any};
            configUpdateStrategy?: string;
            dataSubDir?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.DMClusterSpecMasterDnsconfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.DMClusterSpecMasterEnv[];
            envFrom?: outputs.pingcap.v1alpha1.DMClusterSpecMasterEnvfrom[];
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.DMClusterSpecMasterImagepullsecrets[];
            initContainers?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainers[];
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            maxFailoverCount?: number;
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.DMClusterSpecMasterPodsecuritycontext;
            priorityClassName?: string;
            replicas: number;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            service?: outputs.pingcap.v1alpha1.DMClusterSpecMasterService;
            statefulSetUpdateStrategy?: string;
            storageClassName?: string;
            storageSize?: string;
            suspendAction?: outputs.pingcap.v1alpha1.DMClusterSpecMasterSuspendaction;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.pingcap.v1alpha1.DMClusterSpecMasterTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.DMClusterSpecMasterTopologyspreadconstraints[];
            version?: string;
        }
        /**
         * dmclusterSpecMasterProvideDefaults sets the appropriate defaults for DMClusterSpecMaster
         */
        export function dmclusterSpecMasterProvideDefaults(val: DMClusterSpecMaster): DMClusterSpecMaster {
            return {
                ...val,
                baseImage: (val.baseImage) ?? "pingcap/dm",
            };
        }

        export interface DMClusterSpecMasterAdditionalcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersEnvValuefrom;
        }

        export interface DMClusterSpecMasterAdditionalcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersEnvValuefromSecretkeyref;
        }

        export interface DMClusterSpecMasterAdditionalcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersEnvfromSecretref;
        }

        export interface DMClusterSpecMasterAdditionalcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersLifecyclePrestop;
        }

        export interface DMClusterSpecMasterAdditionalcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersLifecyclePoststartTcpsocket;
        }

        export interface DMClusterSpecMasterAdditionalcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterAdditionalcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersLifecyclePrestopTcpsocket;
        }

        export interface DMClusterSpecMasterAdditionalcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterAdditionalcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecMasterAdditionalcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterAdditionalcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * dmclusterSpecMasterAdditionalcontainersPortsProvideDefaults sets the appropriate defaults for DMClusterSpecMasterAdditionalcontainersPorts
         */
        export function dmclusterSpecMasterAdditionalcontainersPortsProvideDefaults(val: DMClusterSpecMasterAdditionalcontainersPorts): DMClusterSpecMasterAdditionalcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface DMClusterSpecMasterAdditionalcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecMasterAdditionalcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterAdditionalcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface DMClusterSpecMasterAdditionalcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersSecuritycontextWindowsoptions;
        }

        export interface DMClusterSpecMasterAdditionalcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface DMClusterSpecMasterAdditionalcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecMasterAdditionalcontainersStartupprobeExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterAdditionalcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface DMClusterSpecMasterAdditionalcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesAwselasticblockstore;
            azureDisk?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesAzuredisk;
            azureFile?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesAzurefile;
            cephfs?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesConfigmap;
            csi?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesDownwardapi;
            emptyDir?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesEmptydir;
            ephemeral?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesFlexvolume;
            flocker?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesGcepersistentdisk;
            gitRepo?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesGitrepo;
            glusterfs?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesHostpath;
            iscsi?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesPersistentvolumeclaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesPhotonpersistentdisk;
            portworxVolume?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesPortworxvolume;
            projected?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesScaleio;
            secret?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesVspherevolume;
        }

        export interface DMClusterSpecMasterAdditionalvolumesAwselasticblockstore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesAzuredisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalvolumesAzurefile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesCephfsSecretref;
            user?: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesCephfsSecretref {
            name?: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesCinderSecretref;
            volumeID: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesCinderSecretref {
            name?: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesConfigmap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalvolumesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesCsiNodepublishsecretref;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface DMClusterSpecMasterAdditionalvolumesCsiNodepublishsecretref {
            name?: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesDownwardapi {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesDownwardapiItems[];
        }

        export interface DMClusterSpecMasterAdditionalvolumesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesDownwardapiItemsResourcefieldref;
        }

        export interface DMClusterSpecMasterAdditionalvolumesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesEmptydir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesEphemeralVolumeclaimtemplate;
        }

        export interface DMClusterSpecMasterAdditionalvolumesEphemeralVolumeclaimtemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesEphemeralVolumeclaimtemplateSpec;
        }

        export interface DMClusterSpecMasterAdditionalvolumesEphemeralVolumeclaimtemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource;
            resources?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface DMClusterSpecMasterAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecMasterAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecMasterAdditionalvolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface DMClusterSpecMasterAdditionalvolumesFlexvolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesFlexvolumeSecretref;
        }

        export interface DMClusterSpecMasterAdditionalvolumesFlexvolumeSecretref {
            name?: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesGcepersistentdisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalvolumesGitrepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalvolumesHostpath {
            path: string;
            type?: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesIscsiSecretref;
            targetPortal: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesIscsiSecretref {
            name?: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesPersistentvolumeclaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalvolumesPhotonpersistentdisk {
            fsType?: string;
            pdID: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesPortworxvolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesProjectedSources[];
        }

        export interface DMClusterSpecMasterAdditionalvolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesProjectedSourcesConfigmap;
            downwardAPI?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesProjectedSourcesDownwardapi;
            secret?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesProjectedSourcesServiceaccounttoken;
        }

        export interface DMClusterSpecMasterAdditionalvolumesProjectedSourcesConfigmap {
            items?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesProjectedSourcesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalvolumesProjectedSourcesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesProjectedSourcesDownwardapi {
            items?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesProjectedSourcesDownwardapiItems[];
        }

        export interface DMClusterSpecMasterAdditionalvolumesProjectedSourcesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref;
        }

        export interface DMClusterSpecMasterAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalvolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesProjectedSourcesServiceaccounttoken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesRbdSecretref;
            user?: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesRbdSecretref {
            name?: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesScaleio {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesScaleioSecretref;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesScaleioSecretref {
            name?: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalvolumesStorageosSecretref;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesStorageosSecretref {
            name?: string;
        }

        export interface DMClusterSpecMasterAdditionalvolumesVspherevolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface DMClusterSpecMasterAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityNodeaffinity;
            podAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodaffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodantiaffinity;
        }

        export interface DMClusterSpecMasterAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface DMClusterSpecMasterAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface DMClusterSpecMasterAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface DMClusterSpecMasterAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecMasterAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecMasterAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface DMClusterSpecMasterAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface DMClusterSpecMasterAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecMasterAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecMasterAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface DMClusterSpecMasterAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface DMClusterSpecMasterAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecMasterAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecMasterAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecMasterAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecMasterAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecMasterAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecMasterAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface DMClusterSpecMasterAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface DMClusterSpecMasterAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecMasterAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecMasterAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecMasterAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecMasterAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecMasterAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecMasterDnsconfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.DMClusterSpecMasterDnsconfigOptions[];
            searches?: string[];
        }

        export interface DMClusterSpecMasterDnsconfigOptions {
            name?: string;
            value?: string;
        }

        export interface DMClusterSpecMasterEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.DMClusterSpecMasterEnvValuefrom;
        }

        export interface DMClusterSpecMasterEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterEnvValuefromSecretkeyref;
        }

        export interface DMClusterSpecMasterEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecMasterEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecMasterEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterEnvfromSecretref;
        }

        export interface DMClusterSpecMasterEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterImagepullsecrets {
            name?: string;
        }

        export interface DMClusterSpecMasterInitcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface DMClusterSpecMasterInitcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersEnvValuefrom;
        }

        export interface DMClusterSpecMasterInitcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersEnvValuefromSecretkeyref;
        }

        export interface DMClusterSpecMasterInitcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterInitcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecMasterInitcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecMasterInitcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterInitcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersEnvfromSecretref;
        }

        export interface DMClusterSpecMasterInitcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterInitcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterInitcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersLifecyclePrestop;
        }

        export interface DMClusterSpecMasterInitcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersLifecyclePoststartTcpsocket;
        }

        export interface DMClusterSpecMasterInitcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterInitcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterInitcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterInitcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterInitcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersLifecyclePrestopTcpsocket;
        }

        export interface DMClusterSpecMasterInitcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterInitcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterInitcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterInitcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterInitcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecMasterInitcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterInitcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterInitcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterInitcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterInitcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * dmclusterSpecMasterInitcontainersPortsProvideDefaults sets the appropriate defaults for DMClusterSpecMasterInitcontainersPorts
         */
        export function dmclusterSpecMasterInitcontainersPortsProvideDefaults(val: DMClusterSpecMasterInitcontainersPorts): DMClusterSpecMasterInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface DMClusterSpecMasterInitcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecMasterInitcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterInitcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterInitcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterInitcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterInitcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface DMClusterSpecMasterInitcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersSecuritycontextWindowsoptions;
        }

        export interface DMClusterSpecMasterInitcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface DMClusterSpecMasterInitcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecMasterInitcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecMasterInitcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecMasterInitcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecMasterInitcontainersStartupprobeExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterInitcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterInitcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterInitcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterInitcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface DMClusterSpecMasterInitcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface DMClusterSpecMasterPodsecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterPodsecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecMasterPodsecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.DMClusterSpecMasterPodsecuritycontextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterPodsecuritycontextWindowsoptions;
        }

        export interface DMClusterSpecMasterPodsecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecMasterPodsecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecMasterPodsecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterPodsecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecMasterService {
            annotations?: {[key: string]: string};
            clusterIP?: string;
            externalTrafficPolicy?: string;
            labels?: {[key: string]: string};
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            masterNodePort?: number;
            port?: number;
            portName?: string;
            type?: string;
        }

        export interface DMClusterSpecMasterSuspendaction {
            suspendStatefulSet?: boolean;
        }

        export interface DMClusterSpecMasterTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface DMClusterSpecMasterTopologyspreadconstraints {
            topologyKey: string;
        }

        export interface DMClusterSpecPodsecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecPodsecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecPodsecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.DMClusterSpecPodsecuritycontextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecPodsecuritycontextWindowsoptions;
        }

        export interface DMClusterSpecPodsecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecPodsecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecPodsecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface DMClusterSpecPodsecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecSuspendaction {
            suspendStatefulSet?: boolean;
        }

        export interface DMClusterSpecTlscluster {
            enabled?: boolean;
        }

        export interface DMClusterSpecTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface DMClusterSpecTopologyspreadconstraints {
            topologyKey: string;
        }

        export interface DMClusterSpecWorker {
            additionalContainers?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumemounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumes[];
            affinity?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinity;
            annotations?: {[key: string]: string};
            baseImage?: string;
            config?: {[key: string]: any};
            configUpdateStrategy?: string;
            dataSubDir?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerDnsconfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerEnv[];
            envFrom?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerEnvfrom[];
            failover?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerFailover;
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerImagepullsecrets[];
            initContainers?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainers[];
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            maxFailoverCount?: number;
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerPodsecuritycontext;
            priorityClassName?: string;
            recoverFailover?: boolean;
            replicas: number;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            statefulSetUpdateStrategy?: string;
            storageClassName?: string;
            storageSize?: string;
            suspendAction?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerSuspendaction;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerTopologyspreadconstraints[];
            version?: string;
        }
        /**
         * dmclusterSpecWorkerProvideDefaults sets the appropriate defaults for DMClusterSpecWorker
         */
        export function dmclusterSpecWorkerProvideDefaults(val: DMClusterSpecWorker): DMClusterSpecWorker {
            return {
                ...val,
                baseImage: (val.baseImage) ?? "pingcap/dm",
            };
        }

        export interface DMClusterSpecWorkerAdditionalcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersEnvValuefrom;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersEnvValuefromSecretkeyref;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersEnvfromSecretref;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersLifecyclePrestop;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersLifecyclePoststartTcpsocket;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerAdditionalcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersLifecyclePrestopTcpsocket;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerAdditionalcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerAdditionalcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * dmclusterSpecWorkerAdditionalcontainersPortsProvideDefaults sets the appropriate defaults for DMClusterSpecWorkerAdditionalcontainersPorts
         */
        export function dmclusterSpecWorkerAdditionalcontainersPortsProvideDefaults(val: DMClusterSpecWorkerAdditionalcontainersPorts): DMClusterSpecWorkerAdditionalcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface DMClusterSpecWorkerAdditionalcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerAdditionalcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface DMClusterSpecWorkerAdditionalcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersSecuritycontextWindowsoptions;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface DMClusterSpecWorkerAdditionalcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersStartupprobeExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerAdditionalcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface DMClusterSpecWorkerAdditionalcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesAwselasticblockstore;
            azureDisk?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesAzuredisk;
            azureFile?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesAzurefile;
            cephfs?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesConfigmap;
            csi?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesDownwardapi;
            emptyDir?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesEmptydir;
            ephemeral?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesFlexvolume;
            flocker?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesGcepersistentdisk;
            gitRepo?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesGitrepo;
            glusterfs?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesHostpath;
            iscsi?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesPersistentvolumeclaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesPhotonpersistentdisk;
            portworxVolume?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesPortworxvolume;
            projected?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesScaleio;
            secret?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesVspherevolume;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesAwselasticblockstore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesAzuredisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesAzurefile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesCephfsSecretref;
            user?: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesCephfsSecretref {
            name?: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesCinderSecretref;
            volumeID: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesCinderSecretref {
            name?: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesConfigmap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesCsiNodepublishsecretref;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface DMClusterSpecWorkerAdditionalvolumesCsiNodepublishsecretref {
            name?: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesDownwardapi {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesDownwardapiItems[];
        }

        export interface DMClusterSpecWorkerAdditionalvolumesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesDownwardapiItemsResourcefieldref;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesEmptydir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesEphemeralVolumeclaimtemplate;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesEphemeralVolumeclaimtemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesEphemeralVolumeclaimtemplateSpec;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesEphemeralVolumeclaimtemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource;
            resources?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface DMClusterSpecWorkerAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecWorkerAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecWorkerAdditionalvolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface DMClusterSpecWorkerAdditionalvolumesFlexvolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesFlexvolumeSecretref;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesFlexvolumeSecretref {
            name?: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesGcepersistentdisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesGitrepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesHostpath {
            path: string;
            type?: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesIscsiSecretref;
            targetPortal: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesIscsiSecretref {
            name?: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesPersistentvolumeclaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesPhotonpersistentdisk {
            fsType?: string;
            pdID: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesPortworxvolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesProjectedSources[];
        }

        export interface DMClusterSpecWorkerAdditionalvolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesProjectedSourcesConfigmap;
            downwardAPI?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesProjectedSourcesDownwardapi;
            secret?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesProjectedSourcesServiceaccounttoken;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesProjectedSourcesConfigmap {
            items?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesProjectedSourcesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesProjectedSourcesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesProjectedSourcesDownwardapi {
            items?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesProjectedSourcesDownwardapiItems[];
        }

        export interface DMClusterSpecWorkerAdditionalvolumesProjectedSourcesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesProjectedSourcesServiceaccounttoken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesRbdSecretref;
            user?: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesRbdSecretref {
            name?: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesScaleio {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesScaleioSecretref;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesScaleioSecretref {
            name?: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalvolumesStorageosSecretref;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesStorageosSecretref {
            name?: string;
        }

        export interface DMClusterSpecWorkerAdditionalvolumesVspherevolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface DMClusterSpecWorkerAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityNodeaffinity;
            podAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodaffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodantiaffinity;
        }

        export interface DMClusterSpecWorkerAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface DMClusterSpecWorkerAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface DMClusterSpecWorkerAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface DMClusterSpecWorkerAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecWorkerAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecWorkerAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface DMClusterSpecWorkerAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface DMClusterSpecWorkerAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecWorkerAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecWorkerAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface DMClusterSpecWorkerAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface DMClusterSpecWorkerAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecWorkerAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecWorkerAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecWorkerAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecWorkerAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecWorkerAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecWorkerAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface DMClusterSpecWorkerAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface DMClusterSpecWorkerAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecWorkerAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecWorkerAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecWorkerAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecWorkerAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecWorkerAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecWorkerDnsconfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerDnsconfigOptions[];
            searches?: string[];
        }

        export interface DMClusterSpecWorkerDnsconfigOptions {
            name?: string;
            value?: string;
        }

        export interface DMClusterSpecWorkerEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerEnvValuefrom;
        }

        export interface DMClusterSpecWorkerEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerEnvValuefromSecretkeyref;
        }

        export interface DMClusterSpecWorkerEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecWorkerEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecWorkerEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerEnvfromSecretref;
        }

        export interface DMClusterSpecWorkerEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerFailover {
            recoverByUID?: string;
        }

        export interface DMClusterSpecWorkerImagepullsecrets {
            name?: string;
        }

        export interface DMClusterSpecWorkerInitcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface DMClusterSpecWorkerInitcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersEnvValuefrom;
        }

        export interface DMClusterSpecWorkerInitcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersEnvValuefromSecretkeyref;
        }

        export interface DMClusterSpecWorkerInitcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerInitcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecWorkerInitcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecWorkerInitcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerInitcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersEnvfromSecretref;
        }

        export interface DMClusterSpecWorkerInitcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerInitcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerInitcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersLifecyclePrestop;
        }

        export interface DMClusterSpecWorkerInitcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersLifecyclePoststartTcpsocket;
        }

        export interface DMClusterSpecWorkerInitcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerInitcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerInitcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerInitcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerInitcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersLifecyclePrestopTcpsocket;
        }

        export interface DMClusterSpecWorkerInitcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerInitcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerInitcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerInitcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerInitcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecWorkerInitcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerInitcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerInitcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerInitcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerInitcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * dmclusterSpecWorkerInitcontainersPortsProvideDefaults sets the appropriate defaults for DMClusterSpecWorkerInitcontainersPorts
         */
        export function dmclusterSpecWorkerInitcontainersPortsProvideDefaults(val: DMClusterSpecWorkerInitcontainersPorts): DMClusterSpecWorkerInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface DMClusterSpecWorkerInitcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecWorkerInitcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerInitcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerInitcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerInitcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerInitcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface DMClusterSpecWorkerInitcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersSecuritycontextWindowsoptions;
        }

        export interface DMClusterSpecWorkerInitcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface DMClusterSpecWorkerInitcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecWorkerInitcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecWorkerInitcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecWorkerInitcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecWorkerInitcontainersStartupprobeExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerInitcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerInitcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerInitcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerInitcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface DMClusterSpecWorkerInitcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface DMClusterSpecWorkerPodsecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerPodsecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerPodsecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerPodsecuritycontextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerPodsecuritycontextWindowsoptions;
        }

        export interface DMClusterSpecWorkerPodsecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecWorkerPodsecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecWorkerPodsecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerPodsecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecWorkerSuspendaction {
            suspendStatefulSet?: boolean;
        }

        export interface DMClusterSpecWorkerTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface DMClusterSpecWorkerTopologyspreadconstraints {
            topologyKey: string;
        }

        export interface DMClusterStatus {
            conditions?: outputs.pingcap.v1alpha1.DMClusterStatusConditions[];
            master?: outputs.pingcap.v1alpha1.DMClusterStatusMaster;
            worker?: outputs.pingcap.v1alpha1.DMClusterStatusWorker;
        }

        export interface DMClusterStatusConditions {
            lastTransitionTime?: string;
            lastUpdateTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface DMClusterStatusMaster {
            conditions?: outputs.pingcap.v1alpha1.DMClusterStatusMasterConditions[];
            failureMembers?: {[key: string]: outputs.pingcap.v1alpha1.DMClusterStatusMasterFailuremembers};
            image?: string;
            leader?: outputs.pingcap.v1alpha1.DMClusterStatusMasterLeader;
            members?: {[key: string]: outputs.pingcap.v1alpha1.DMClusterStatusMasterMembers};
            phase?: string;
            statefulSet?: outputs.pingcap.v1alpha1.DMClusterStatusMasterStatefulset;
            synced?: boolean;
            unjoinedMembers?: {[key: string]: outputs.pingcap.v1alpha1.DMClusterStatusMasterUnjoinedmembers};
            volumes?: {[key: string]: outputs.pingcap.v1alpha1.DMClusterStatusMasterVolumes};
        }

        export interface DMClusterStatusMasterConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration?: number;
            reason: string;
            status: string;
            type: string;
        }

        export interface DMClusterStatusMasterFailuremembers {
            createdAt?: string;
            memberDeleted?: boolean;
            memberID?: string;
            podName?: string;
            pvcUID?: string;
        }

        export interface DMClusterStatusMasterLeader {
            clientURL: string;
            health: boolean;
            id: string;
            lastTransitionTime?: string;
            name: string;
        }

        export interface DMClusterStatusMasterMembers {
            clientURL: string;
            health: boolean;
            id: string;
            lastTransitionTime?: string;
            name: string;
        }

        export interface DMClusterStatusMasterStatefulset {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.DMClusterStatusMasterStatefulsetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface DMClusterStatusMasterStatefulsetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface DMClusterStatusMasterUnjoinedmembers {
            createdAt?: string;
            podName?: string;
            pvcUID?: string;
            pvcUIDSet?: {[key: string]: {[key: string]: any}};
        }

        export interface DMClusterStatusMasterVolumes {
            boundCount?: number;
            currentCapacity: number | string;
            currentCount?: number;
            name: string;
            resizedCapacity: number | string;
            resizedCount?: number;
        }

        export interface DMClusterStatusWorker {
            conditions?: outputs.pingcap.v1alpha1.DMClusterStatusWorkerConditions[];
            failoverUID?: string;
            failureMembers?: {[key: string]: outputs.pingcap.v1alpha1.DMClusterStatusWorkerFailuremembers};
            image?: string;
            members?: {[key: string]: outputs.pingcap.v1alpha1.DMClusterStatusWorkerMembers};
            phase?: string;
            statefulSet?: outputs.pingcap.v1alpha1.DMClusterStatusWorkerStatefulset;
            synced?: boolean;
            volumes?: {[key: string]: outputs.pingcap.v1alpha1.DMClusterStatusWorkerVolumes};
        }

        export interface DMClusterStatusWorkerConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration?: number;
            reason: string;
            status: string;
            type: string;
        }

        export interface DMClusterStatusWorkerFailuremembers {
            createdAt?: string;
            podName?: string;
        }

        export interface DMClusterStatusWorkerMembers {
            addr?: string;
            lastTransitionTime?: string;
            name?: string;
            stage: string;
        }

        export interface DMClusterStatusWorkerStatefulset {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.DMClusterStatusWorkerStatefulsetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface DMClusterStatusWorkerStatefulsetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface DMClusterStatusWorkerVolumes {
            boundCount?: number;
            currentCapacity: number | string;
            currentCount?: number;
            name: string;
            resizedCapacity: number | string;
            resizedCount?: number;
        }

        export interface RestoreSpec {
            affinity?: outputs.pingcap.v1alpha1.RestoreSpecAffinity;
            azblob?: outputs.pingcap.v1alpha1.RestoreSpecAzblob;
            backupType?: string;
            br?: outputs.pingcap.v1alpha1.RestoreSpecBr;
            env?: outputs.pingcap.v1alpha1.RestoreSpecEnv[];
            gcs?: outputs.pingcap.v1alpha1.RestoreSpecGcs;
            imagePullSecrets?: outputs.pingcap.v1alpha1.RestoreSpecImagepullsecrets[];
            local?: outputs.pingcap.v1alpha1.RestoreSpecLocal;
            podSecurityContext?: outputs.pingcap.v1alpha1.RestoreSpecPodsecuritycontext;
            priorityClassName?: string;
            resources?: outputs.pingcap.v1alpha1.RestoreSpecResources;
            s3?: outputs.pingcap.v1alpha1.RestoreSpecS3;
            serviceAccount?: string;
            storageClassName?: string;
            storageSize?: string;
            tableFilter?: string[];
            tikvGCLifeTime?: string;
            to?: outputs.pingcap.v1alpha1.RestoreSpecTo;
            tolerations?: outputs.pingcap.v1alpha1.RestoreSpecTolerations[];
            toolImage?: string;
            useKMS?: boolean;
        }

        export interface RestoreSpecAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.RestoreSpecAffinityNodeaffinity;
            podAffinity?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodaffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodantiaffinity;
        }

        export interface RestoreSpecAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.RestoreSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.RestoreSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface RestoreSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.pingcap.v1alpha1.RestoreSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface RestoreSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.RestoreSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.RestoreSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface RestoreSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RestoreSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RestoreSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.RestoreSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface RestoreSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.pingcap.v1alpha1.RestoreSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.RestoreSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface RestoreSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RestoreSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RestoreSpecAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface RestoreSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface RestoreSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface RestoreSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RestoreSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RestoreSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface RestoreSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RestoreSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RestoreSpecAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface RestoreSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface RestoreSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface RestoreSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RestoreSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RestoreSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface RestoreSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RestoreSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RestoreSpecAzblob {
            accessTier?: string;
            container?: string;
            path?: string;
            prefix?: string;
            secretName?: string;
        }

        export interface RestoreSpecBr {
            checksum?: boolean;
            cluster: string;
            clusterNamespace?: string;
            concurrency?: number;
            db?: string;
            logLevel?: string;
            onLine?: boolean;
            options?: string[];
            rateLimit?: number;
            sendCredToTikv?: boolean;
            statusAddr?: string;
            table?: string;
            timeAgo?: string;
        }

        export interface RestoreSpecEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.RestoreSpecEnvValuefrom;
        }

        export interface RestoreSpecEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.RestoreSpecEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.RestoreSpecEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.RestoreSpecEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.RestoreSpecEnvValuefromSecretkeyref;
        }

        export interface RestoreSpecEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface RestoreSpecEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface RestoreSpecEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface RestoreSpecEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface RestoreSpecGcs {
            bucket?: string;
            bucketAcl?: string;
            location?: string;
            objectAcl?: string;
            path?: string;
            prefix?: string;
            projectId: string;
            secretName?: string;
            storageClass?: string;
        }

        export interface RestoreSpecImagepullsecrets {
            name?: string;
        }

        export interface RestoreSpecLocal {
            prefix?: string;
            volume: outputs.pingcap.v1alpha1.RestoreSpecLocalVolume;
            volumeMount: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumemount;
        }

        export interface RestoreSpecLocalVolume {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeAwselasticblockstore;
            azureDisk?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeAzuredisk;
            azureFile?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeAzurefile;
            cephfs?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeCephfs;
            cinder?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeCinder;
            configMap?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeConfigmap;
            csi?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeDownwardapi;
            emptyDir?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeEmptydir;
            ephemeral?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeEphemeral;
            fc?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeFc;
            flexVolume?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeFlexvolume;
            flocker?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeGcepersistentdisk;
            gitRepo?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeGitrepo;
            glusterfs?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeHostpath;
            iscsi?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumePersistentvolumeclaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumePhotonpersistentdisk;
            portworxVolume?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumePortworxvolume;
            projected?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjected;
            quobyte?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeQuobyte;
            rbd?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeRbd;
            scaleIO?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeScaleio;
            secret?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeSecret;
            storageos?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeVspherevolume;
        }

        export interface RestoreSpecLocalVolumeAwselasticblockstore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface RestoreSpecLocalVolumeAzuredisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface RestoreSpecLocalVolumeAzurefile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface RestoreSpecLocalVolumeCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeCephfsSecretref;
            user?: string;
        }

        export interface RestoreSpecLocalVolumeCephfsSecretref {
            name?: string;
        }

        export interface RestoreSpecLocalVolumeCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeCinderSecretref;
            volumeID: string;
        }

        export interface RestoreSpecLocalVolumeCinderSecretref {
            name?: string;
        }

        export interface RestoreSpecLocalVolumeConfigmap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface RestoreSpecLocalVolumeConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface RestoreSpecLocalVolumeCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeCsiNodepublishsecretref;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface RestoreSpecLocalVolumeCsiNodepublishsecretref {
            name?: string;
        }

        export interface RestoreSpecLocalVolumeDownwardapi {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeDownwardapiItems[];
        }

        export interface RestoreSpecLocalVolumeDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeDownwardapiItemsResourcefieldref;
        }

        export interface RestoreSpecLocalVolumeDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface RestoreSpecLocalVolumeDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface RestoreSpecLocalVolumeEmptydir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface RestoreSpecLocalVolumeEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeEphemeralVolumeclaimtemplate;
        }

        export interface RestoreSpecLocalVolumeEphemeralVolumeclaimtemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeEphemeralVolumeclaimtemplateSpec;
        }

        export interface RestoreSpecLocalVolumeEphemeralVolumeclaimtemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeEphemeralVolumeclaimtemplateSpecDatasource;
            resources?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeEphemeralVolumeclaimtemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeEphemeralVolumeclaimtemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface RestoreSpecLocalVolumeEphemeralVolumeclaimtemplateSpecDatasource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface RestoreSpecLocalVolumeEphemeralVolumeclaimtemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface RestoreSpecLocalVolumeEphemeralVolumeclaimtemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RestoreSpecLocalVolumeEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RestoreSpecLocalVolumeFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface RestoreSpecLocalVolumeFlexvolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeFlexvolumeSecretref;
        }

        export interface RestoreSpecLocalVolumeFlexvolumeSecretref {
            name?: string;
        }

        export interface RestoreSpecLocalVolumeFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface RestoreSpecLocalVolumeGcepersistentdisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface RestoreSpecLocalVolumeGitrepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface RestoreSpecLocalVolumeGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface RestoreSpecLocalVolumeHostpath {
            path: string;
            type?: string;
        }

        export interface RestoreSpecLocalVolumeIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeIscsiSecretref;
            targetPortal: string;
        }

        export interface RestoreSpecLocalVolumeIscsiSecretref {
            name?: string;
        }

        export interface RestoreSpecLocalVolumeNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface RestoreSpecLocalVolumePersistentvolumeclaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface RestoreSpecLocalVolumePhotonpersistentdisk {
            fsType?: string;
            pdID: string;
        }

        export interface RestoreSpecLocalVolumePortworxvolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface RestoreSpecLocalVolumeProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSources[];
        }

        export interface RestoreSpecLocalVolumeProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSourcesConfigmap;
            downwardAPI?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSourcesDownwardapi;
            secret?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSourcesServiceaccounttoken;
        }

        export interface RestoreSpecLocalVolumeProjectedSourcesConfigmap {
            items?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSourcesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface RestoreSpecLocalVolumeProjectedSourcesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface RestoreSpecLocalVolumeProjectedSourcesDownwardapi {
            items?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSourcesDownwardapiItems[];
        }

        export interface RestoreSpecLocalVolumeProjectedSourcesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSourcesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSourcesDownwardapiItemsResourcefieldref;
        }

        export interface RestoreSpecLocalVolumeProjectedSourcesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface RestoreSpecLocalVolumeProjectedSourcesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface RestoreSpecLocalVolumeProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface RestoreSpecLocalVolumeProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface RestoreSpecLocalVolumeProjectedSourcesServiceaccounttoken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface RestoreSpecLocalVolumeQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface RestoreSpecLocalVolumeRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeRbdSecretref;
            user?: string;
        }

        export interface RestoreSpecLocalVolumeRbdSecretref {
            name?: string;
        }

        export interface RestoreSpecLocalVolumeScaleio {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeScaleioSecretref;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface RestoreSpecLocalVolumeScaleioSecretref {
            name?: string;
        }

        export interface RestoreSpecLocalVolumeSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface RestoreSpecLocalVolumeSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface RestoreSpecLocalVolumeStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeStorageosSecretref;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface RestoreSpecLocalVolumeStorageosSecretref {
            name?: string;
        }

        export interface RestoreSpecLocalVolumeVspherevolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface RestoreSpecLocalVolumemount {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface RestoreSpecPodsecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.RestoreSpecPodsecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.RestoreSpecPodsecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.RestoreSpecPodsecuritycontextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.RestoreSpecPodsecuritycontextWindowsoptions;
        }

        export interface RestoreSpecPodsecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface RestoreSpecPodsecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface RestoreSpecPodsecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface RestoreSpecPodsecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface RestoreSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface RestoreSpecS3 {
            acl?: string;
            bucket?: string;
            endpoint?: string;
            options?: string[];
            path?: string;
            prefix?: string;
            provider: string;
            region?: string;
            secretName?: string;
            sse?: string;
            storageClass?: string;
        }

        export interface RestoreSpecTo {
            host: string;
            port?: number;
            secretName: string;
            tlsClientSecretName?: string;
            user?: string;
        }

        export interface RestoreSpecTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface RestoreStatus {
            commitTs?: string;
            conditions?: outputs.pingcap.v1alpha1.RestoreStatusConditions[];
            phase?: string;
            timeCompleted?: string;
            timeStarted?: string;
        }

        export interface RestoreStatusConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbClusterAutoScalerSpec {
            cluster: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecCluster;
            tidb?: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTidb;
            tikv?: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTikv;
        }

        export interface TidbClusterAutoScalerSpecCluster {
            clusterDomain?: string;
            name: string;
            namespace?: string;
        }

        export interface TidbClusterAutoScalerSpecTidb {
            external?: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTidbExternal;
            resources?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTidbResources};
            rules?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTidbRules};
            scaleInIntervalSeconds?: number;
            scaleOutIntervalSeconds?: number;
        }

        export interface TidbClusterAutoScalerSpecTidbExternal {
            endpoint?: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTidbExternalEndpoint;
            maxReplicas: number;
        }

        export interface TidbClusterAutoScalerSpecTidbExternalEndpoint {
            host: string;
            path: string;
            port: number;
            tlsSecret?: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTidbExternalEndpointTlssecret;
        }

        export interface TidbClusterAutoScalerSpecTidbExternalEndpointTlssecret {
            name: string;
            namespace: string;
        }

        export interface TidbClusterAutoScalerSpecTidbResources {
            count?: number;
            cpu: number | string;
            memory: number | string;
            storage?: number | string;
        }

        export interface TidbClusterAutoScalerSpecTidbRules {
            max_threshold: number;
            min_threshold?: number;
            resource_types?: string[];
        }

        export interface TidbClusterAutoScalerSpecTikv {
            external?: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTikvExternal;
            resources?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTikvResources};
            rules?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTikvRules};
            scaleInIntervalSeconds?: number;
            scaleOutIntervalSeconds?: number;
        }

        export interface TidbClusterAutoScalerSpecTikvExternal {
            endpoint?: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTikvExternalEndpoint;
            maxReplicas: number;
        }

        export interface TidbClusterAutoScalerSpecTikvExternalEndpoint {
            host: string;
            path: string;
            port: number;
            tlsSecret?: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTikvExternalEndpointTlssecret;
        }

        export interface TidbClusterAutoScalerSpecTikvExternalEndpointTlssecret {
            name: string;
            namespace: string;
        }

        export interface TidbClusterAutoScalerSpecTikvResources {
            count?: number;
            cpu: number | string;
            memory: number | string;
            storage?: number | string;
        }

        export interface TidbClusterAutoScalerSpecTikvRules {
            max_threshold: number;
            min_threshold?: number;
            resource_types?: string[];
        }

        export interface TidbClusterAutoScalerStatus {
            tidb?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterAutoScalerStatusTidb};
            tikv?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterAutoScalerStatusTikv};
        }

        export interface TidbClusterAutoScalerStatusTidb {
            lastAutoScalingTimestamp?: string;
        }

        export interface TidbClusterAutoScalerStatusTikv {
            lastAutoScalingTimestamp?: string;
        }

        export interface TidbClusterSpec {
            acrossK8s?: boolean;
            affinity?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinity;
            annotations?: {[key: string]: string};
            cluster?: outputs.pingcap.v1alpha1.TidbClusterSpecCluster;
            clusterDomain?: string;
            configUpdateStrategy?: string;
            discovery?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscovery;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbClusterSpecDnsconfig;
            dnsPolicy?: string;
            enableDynamicConfiguration?: boolean;
            enablePVReclaim?: boolean;
            helper?: outputs.pingcap.v1alpha1.TidbClusterSpecHelper;
            hostNetwork?: boolean;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbClusterSpecImagepullsecrets[];
            labels?: {[key: string]: string};
            nodeSelector?: {[key: string]: string};
            paused?: boolean;
            pd?: outputs.pingcap.v1alpha1.TidbClusterSpecPd;
            pdAddresses?: string[];
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecPodsecuritycontext;
            priorityClassName?: string;
            pump?: outputs.pingcap.v1alpha1.TidbClusterSpecPump;
            pvReclaimPolicy?: string;
            schedulerName?: string;
            serviceAccount?: string;
            services?: outputs.pingcap.v1alpha1.TidbClusterSpecServices[];
            statefulSetUpdateStrategy?: string;
            suspendAction?: outputs.pingcap.v1alpha1.TidbClusterSpecSuspendaction;
            ticdc?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdc;
            tidb?: outputs.pingcap.v1alpha1.TidbClusterSpecTidb;
            tiflash?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflash;
            tikv?: outputs.pingcap.v1alpha1.TidbClusterSpecTikv;
            timezone?: string;
            tlsCluster?: outputs.pingcap.v1alpha1.TidbClusterSpecTlscluster;
            tolerations?: outputs.pingcap.v1alpha1.TidbClusterSpecTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbClusterSpecTopologyspreadconstraints[];
            version?: string;
        }
        /**
         * tidbClusterSpecProvideDefaults sets the appropriate defaults for TidbClusterSpec
         */
        export function tidbClusterSpecProvideDefaults(val: TidbClusterSpec): TidbClusterSpec {
            return {
                ...val,
                imagePullPolicy: (val.imagePullPolicy) ?? "IfNotPresent",
                pd: (val.pd ? outputs.pingcap.v1alpha1.tidbClusterSpecPdProvideDefaults(val.pd) : undefined),
                pump: (val.pump ? outputs.pingcap.v1alpha1.tidbClusterSpecPumpProvideDefaults(val.pump) : undefined),
                pvReclaimPolicy: (val.pvReclaimPolicy) ?? "Retain",
                ticdc: (val.ticdc ? outputs.pingcap.v1alpha1.tidbClusterSpecTicdcProvideDefaults(val.ticdc) : undefined),
                tidb: (val.tidb ? outputs.pingcap.v1alpha1.tidbClusterSpecTidbProvideDefaults(val.tidb) : undefined),
                tiflash: (val.tiflash ? outputs.pingcap.v1alpha1.tidbClusterSpecTiflashProvideDefaults(val.tiflash) : undefined),
                tikv: (val.tikv ? outputs.pingcap.v1alpha1.tidbClusterSpecTikvProvideDefaults(val.tikv) : undefined),
            };
        }

        export interface TidbClusterSpecAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeaffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodaffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodantiaffinity;
        }

        export interface TidbClusterSpecAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface TidbClusterSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface TidbClusterSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface TidbClusterSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface TidbClusterSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface TidbClusterSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbClusterSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbClusterSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbClusterSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbClusterSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecCluster {
            clusterDomain?: string;
            name: string;
            namespace?: string;
        }

        export interface TidbClusterSpecDiscovery {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumemounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumes[];
            affinity?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinity;
            annotations?: {[key: string]: string};
            configUpdateStrategy?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryDnsconfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryEnvfrom[];
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryImagepullsecrets[];
            initContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainers[];
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryPodsecuritycontext;
            priorityClassName?: string;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            statefulSetUpdateStrategy?: string;
            suspendAction?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoverySuspendaction;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryTopologyspreadconstraints[];
            version?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersEnvValuefrom;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersEnvfromSecretref;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePrestop;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePoststartTcpsocket;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePrestopTcpsocket;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecDiscoveryAdditionalcontainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecDiscoveryAdditionalcontainersPorts
         */
        export function tidbClusterSpecDiscoveryAdditionalcontainersPortsProvideDefaults(val: TidbClusterSpecDiscoveryAdditionalcontainersPorts): TidbClusterSpecDiscoveryAdditionalcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersSecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersStartupprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesAwselasticblockstore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesAzuredisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesAzurefile;
            cephfs?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesConfigmap;
            csi?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesDownwardapi;
            emptyDir?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesEmptydir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesFlexvolume;
            flocker?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesGcepersistentdisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesGitrepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesHostpath;
            iscsi?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesPersistentvolumeclaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesPhotonpersistentdisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesPortworxvolume;
            projected?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesScaleio;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesVspherevolume;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesAwselasticblockstore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesAzuredisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesAzurefile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesCephfsSecretref;
            user?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesCephfsSecretref {
            name?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesCinderSecretref;
            volumeID: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesCinderSecretref {
            name?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesConfigmap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesCsiNodepublishsecretref;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesCsiNodepublishsecretref {
            name?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesDownwardapi {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesDownwardapiItems[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesDownwardapiItemsResourcefieldref;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesEmptydir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplate;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpec;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesFlexvolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesFlexvolumeSecretref;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesFlexvolumeSecretref {
            name?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesGcepersistentdisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesGitrepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesHostpath {
            path: string;
            type?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesIscsiSecretref;
            targetPortal: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesIscsiSecretref {
            name?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesPersistentvolumeclaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesPhotonpersistentdisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesPortworxvolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesProjectedSources[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesProjectedSourcesConfigmap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesProjectedSourcesDownwardapi;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesProjectedSourcesServiceaccounttoken;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesProjectedSourcesConfigmap {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesProjectedSourcesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesProjectedSourcesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesProjectedSourcesDownwardapi {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesProjectedSourcesDownwardapiItems[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesProjectedSourcesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesProjectedSourcesServiceaccounttoken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesRbdSecretref;
            user?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesRbdSecretref {
            name?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesScaleio {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesScaleioSecretref;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesScaleioSecretref {
            name?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalvolumesStorageosSecretref;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesStorageosSecretref {
            name?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalvolumesVspherevolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbClusterSpecDiscoveryAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityNodeaffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodaffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodantiaffinity;
        }

        export interface TidbClusterSpecDiscoveryAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface TidbClusterSpecDiscoveryAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface TidbClusterSpecDiscoveryAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface TidbClusterSpecDiscoveryAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecDiscoveryAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecDiscoveryAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface TidbClusterSpecDiscoveryAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface TidbClusterSpecDiscoveryAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecDiscoveryAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecDiscoveryAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbClusterSpecDiscoveryAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbClusterSpecDiscoveryAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecDiscoveryAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecDiscoveryAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecDiscoveryAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecDiscoveryAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecDiscoveryAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecDiscoveryAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbClusterSpecDiscoveryAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbClusterSpecDiscoveryAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecDiscoveryAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecDiscoveryAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecDiscoveryAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecDiscoveryAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecDiscoveryAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecDiscoveryDnsconfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryDnsconfigOptions[];
            searches?: string[];
        }

        export interface TidbClusterSpecDiscoveryDnsconfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbClusterSpecDiscoveryEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryEnvValuefrom;
        }

        export interface TidbClusterSpecDiscoveryEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecDiscoveryEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecDiscoveryEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecDiscoveryEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryEnvfromSecretref;
        }

        export interface TidbClusterSpecDiscoveryEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryImagepullsecrets {
            name?: string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersEnvValuefrom;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersEnvfromSecretref;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersLifecyclePrestop;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersLifecyclePoststartTcpsocket;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryInitcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersLifecyclePrestopTcpsocket;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryInitcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryInitcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecDiscoveryInitcontainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecDiscoveryInitcontainersPorts
         */
        export function tidbClusterSpecDiscoveryInitcontainersPortsProvideDefaults(val: TidbClusterSpecDiscoveryInitcontainersPorts): TidbClusterSpecDiscoveryInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecDiscoveryInitcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryInitcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecDiscoveryInitcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersSecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecDiscoveryInitcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersStartupprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryInitcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecDiscoveryInitcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecDiscoveryPodsecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryPodsecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryPodsecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryPodsecuritycontextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryPodsecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecDiscoveryPodsecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecDiscoveryPodsecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecDiscoveryPodsecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryPodsecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecDiscoverySuspendaction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbClusterSpecDiscoveryTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbClusterSpecDiscoveryTopologyspreadconstraints {
            topologyKey: string;
        }

        export interface TidbClusterSpecDnsconfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbClusterSpecDnsconfigOptions[];
            searches?: string[];
        }

        export interface TidbClusterSpecDnsconfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbClusterSpecHelper {
            image?: string;
            imagePullPolicy?: string;
        }

        export interface TidbClusterSpecImagepullsecrets {
            name?: string;
        }

        export interface TidbClusterSpecPd {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumemounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumes[];
            affinity?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinity;
            annotations?: {[key: string]: string};
            baseImage?: string;
            config?: {[key: string]: any};
            configUpdateStrategy?: string;
            dataSubDir?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbClusterSpecPdDnsconfig;
            dnsPolicy?: string;
            enableDashboardInternalProxy?: boolean;
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecPdEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPdEnvfrom[];
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbClusterSpecPdImagepullsecrets[];
            initContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainers[];
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            maxFailoverCount?: number;
            mountClusterClientSecret?: boolean;
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecPdPodsecuritycontext;
            priorityClassName?: string;
            replicas: number;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            service?: outputs.pingcap.v1alpha1.TidbClusterSpecPdService;
            serviceAccount?: string;
            startUpScriptVersion?: string;
            statefulSetUpdateStrategy?: string;
            storageClassName?: string;
            storageVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecPdStoragevolumes[];
            suspendAction?: outputs.pingcap.v1alpha1.TidbClusterSpecPdSuspendaction;
            terminationGracePeriodSeconds?: number;
            tlsClientSecretName?: string;
            tolerations?: outputs.pingcap.v1alpha1.TidbClusterSpecPdTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbClusterSpecPdTopologyspreadconstraints[];
            version?: string;
        }
        /**
         * tidbClusterSpecPdProvideDefaults sets the appropriate defaults for TidbClusterSpecPd
         */
        export function tidbClusterSpecPdProvideDefaults(val: TidbClusterSpecPd): TidbClusterSpecPd {
            return {
                ...val,
                baseImage: (val.baseImage) ?? "pingcap/pd",
            };
        }

        export interface TidbClusterSpecPdAdditionalcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersEnvValuefrom;
        }

        export interface TidbClusterSpecPdAdditionalcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecPdAdditionalcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersEnvfromSecretref;
        }

        export interface TidbClusterSpecPdAdditionalcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersLifecyclePrestop;
        }

        export interface TidbClusterSpecPdAdditionalcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersLifecyclePoststartTcpsocket;
        }

        export interface TidbClusterSpecPdAdditionalcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdAdditionalcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersLifecyclePrestopTcpsocket;
        }

        export interface TidbClusterSpecPdAdditionalcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdAdditionalcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPdAdditionalcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdAdditionalcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecPdAdditionalcontainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecPdAdditionalcontainersPorts
         */
        export function tidbClusterSpecPdAdditionalcontainersPortsProvideDefaults(val: TidbClusterSpecPdAdditionalcontainersPorts): TidbClusterSpecPdAdditionalcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecPdAdditionalcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPdAdditionalcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdAdditionalcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecPdAdditionalcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersSecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecPdAdditionalcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecPdAdditionalcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPdAdditionalcontainersStartupprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdAdditionalcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecPdAdditionalcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesAwselasticblockstore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesAzuredisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesAzurefile;
            cephfs?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesConfigmap;
            csi?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesDownwardapi;
            emptyDir?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesEmptydir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesFlexvolume;
            flocker?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesGcepersistentdisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesGitrepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesHostpath;
            iscsi?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesPersistentvolumeclaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesPhotonpersistentdisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesPortworxvolume;
            projected?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesScaleio;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesVspherevolume;
        }

        export interface TidbClusterSpecPdAdditionalvolumesAwselasticblockstore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesAzuredisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalvolumesAzurefile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesCephfsSecretref;
            user?: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesCephfsSecretref {
            name?: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesCinderSecretref;
            volumeID: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesCinderSecretref {
            name?: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesConfigmap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalvolumesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesCsiNodepublishsecretref;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbClusterSpecPdAdditionalvolumesCsiNodepublishsecretref {
            name?: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesDownwardapi {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesDownwardapiItems[];
        }

        export interface TidbClusterSpecPdAdditionalvolumesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesDownwardapiItemsResourcefieldref;
        }

        export interface TidbClusterSpecPdAdditionalvolumesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesEmptydir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesEphemeralVolumeclaimtemplate;
        }

        export interface TidbClusterSpecPdAdditionalvolumesEphemeralVolumeclaimtemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesEphemeralVolumeclaimtemplateSpec;
        }

        export interface TidbClusterSpecPdAdditionalvolumesEphemeralVolumeclaimtemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecPdAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPdAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPdAdditionalvolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbClusterSpecPdAdditionalvolumesFlexvolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesFlexvolumeSecretref;
        }

        export interface TidbClusterSpecPdAdditionalvolumesFlexvolumeSecretref {
            name?: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesGcepersistentdisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalvolumesGitrepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalvolumesHostpath {
            path: string;
            type?: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesIscsiSecretref;
            targetPortal: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesIscsiSecretref {
            name?: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesPersistentvolumeclaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalvolumesPhotonpersistentdisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesPortworxvolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesProjectedSources[];
        }

        export interface TidbClusterSpecPdAdditionalvolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesProjectedSourcesConfigmap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesProjectedSourcesDownwardapi;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesProjectedSourcesServiceaccounttoken;
        }

        export interface TidbClusterSpecPdAdditionalvolumesProjectedSourcesConfigmap {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesProjectedSourcesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalvolumesProjectedSourcesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesProjectedSourcesDownwardapi {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesProjectedSourcesDownwardapiItems[];
        }

        export interface TidbClusterSpecPdAdditionalvolumesProjectedSourcesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref;
        }

        export interface TidbClusterSpecPdAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalvolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesProjectedSourcesServiceaccounttoken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesRbdSecretref;
            user?: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesRbdSecretref {
            name?: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesScaleio {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesScaleioSecretref;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesScaleioSecretref {
            name?: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalvolumesStorageosSecretref;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesStorageosSecretref {
            name?: string;
        }

        export interface TidbClusterSpecPdAdditionalvolumesVspherevolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbClusterSpecPdAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeaffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodaffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodantiaffinity;
        }

        export interface TidbClusterSpecPdAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface TidbClusterSpecPdAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface TidbClusterSpecPdAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface TidbClusterSpecPdAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPdAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPdAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface TidbClusterSpecPdAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface TidbClusterSpecPdAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPdAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPdAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbClusterSpecPdAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbClusterSpecPdAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecPdAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPdAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPdAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecPdAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPdAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPdAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbClusterSpecPdAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbClusterSpecPdAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecPdAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPdAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPdAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecPdAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPdAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPdDnsconfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbClusterSpecPdDnsconfigOptions[];
            searches?: string[];
        }

        export interface TidbClusterSpecPdDnsconfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbClusterSpecPdEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPdEnvValuefrom;
        }

        export interface TidbClusterSpecPdEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecPdEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPdEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPdEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdEnvfromSecretref;
        }

        export interface TidbClusterSpecPdEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdImagepullsecrets {
            name?: string;
        }

        export interface TidbClusterSpecPdInitcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecPdInitcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersEnvValuefrom;
        }

        export interface TidbClusterSpecPdInitcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecPdInitcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdInitcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPdInitcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPdInitcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdInitcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersEnvfromSecretref;
        }

        export interface TidbClusterSpecPdInitcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdInitcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdInitcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersLifecyclePrestop;
        }

        export interface TidbClusterSpecPdInitcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersLifecyclePoststartTcpsocket;
        }

        export interface TidbClusterSpecPdInitcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdInitcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdInitcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdInitcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdInitcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersLifecyclePrestopTcpsocket;
        }

        export interface TidbClusterSpecPdInitcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdInitcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdInitcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdInitcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdInitcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPdInitcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdInitcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdInitcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdInitcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdInitcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecPdInitcontainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecPdInitcontainersPorts
         */
        export function tidbClusterSpecPdInitcontainersPortsProvideDefaults(val: TidbClusterSpecPdInitcontainersPorts): TidbClusterSpecPdInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecPdInitcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPdInitcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdInitcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdInitcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdInitcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdInitcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecPdInitcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersSecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecPdInitcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecPdInitcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecPdInitcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecPdInitcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecPdInitcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPdInitcontainersStartupprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdInitcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdInitcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdInitcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdInitcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecPdInitcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecPdPodsecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdPodsecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecPdPodsecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbClusterSpecPdPodsecuritycontextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdPodsecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecPdPodsecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecPdPodsecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecPdPodsecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdPodsecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecPdService {
            annotations?: {[key: string]: string};
            clusterIP?: string;
            labels?: {[key: string]: string};
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            port?: number;
            portName?: string;
            type?: string;
        }

        export interface TidbClusterSpecPdStoragevolumes {
            mountPath?: string;
            name: string;
            storageClassName?: string;
            storageSize: string;
        }

        export interface TidbClusterSpecPdSuspendaction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbClusterSpecPdTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbClusterSpecPdTopologyspreadconstraints {
            topologyKey: string;
        }

        export interface TidbClusterSpecPodsecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPodsecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecPodsecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbClusterSpecPodsecuritycontextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPodsecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecPodsecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecPodsecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecPodsecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPodsecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecPump {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumemounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumes[];
            affinity?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinity;
            annotations?: {[key: string]: string};
            baseImage?: string;
            config?: {[key: string]: any};
            configUpdateStrategy?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpDnsconfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvfrom[];
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpImagepullsecrets[];
            initContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainers[];
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpPodsecuritycontext;
            priorityClassName?: string;
            replicas: number;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            serviceAccount?: string;
            setTimeZone?: boolean;
            statefulSetUpdateStrategy?: string;
            storageClassName?: string;
            suspendAction?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpSuspendaction;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpTopologyspreadconstraints[];
            version?: string;
        }
        /**
         * tidbClusterSpecPumpProvideDefaults sets the appropriate defaults for TidbClusterSpecPump
         */
        export function tidbClusterSpecPumpProvideDefaults(val: TidbClusterSpecPump): TidbClusterSpecPump {
            return {
                ...val,
                baseImage: (val.baseImage) ?? "pingcap/tidb-binlog",
            };
        }

        export interface TidbClusterSpecPumpAdditionalcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersEnvValuefrom;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersEnvfromSecretref;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersLifecyclePrestop;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersLifecyclePoststartTcpsocket;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpAdditionalcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersLifecyclePrestopTcpsocket;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpAdditionalcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpAdditionalcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecPumpAdditionalcontainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecPumpAdditionalcontainersPorts
         */
        export function tidbClusterSpecPumpAdditionalcontainersPortsProvideDefaults(val: TidbClusterSpecPumpAdditionalcontainersPorts): TidbClusterSpecPumpAdditionalcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecPumpAdditionalcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpAdditionalcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecPumpAdditionalcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersSecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecPumpAdditionalcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersStartupprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpAdditionalcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecPumpAdditionalcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesAwselasticblockstore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesAzuredisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesAzurefile;
            cephfs?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesConfigmap;
            csi?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesDownwardapi;
            emptyDir?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesEmptydir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesFlexvolume;
            flocker?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesGcepersistentdisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesGitrepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesHostpath;
            iscsi?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesPersistentvolumeclaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesPhotonpersistentdisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesPortworxvolume;
            projected?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesScaleio;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesVspherevolume;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesAwselasticblockstore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesAzuredisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesAzurefile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesCephfsSecretref;
            user?: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesCephfsSecretref {
            name?: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesCinderSecretref;
            volumeID: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesCinderSecretref {
            name?: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesConfigmap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesCsiNodepublishsecretref;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbClusterSpecPumpAdditionalvolumesCsiNodepublishsecretref {
            name?: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesDownwardapi {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesDownwardapiItems[];
        }

        export interface TidbClusterSpecPumpAdditionalvolumesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesDownwardapiItemsResourcefieldref;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesEmptydir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesEphemeralVolumeclaimtemplate;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesEphemeralVolumeclaimtemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesEphemeralVolumeclaimtemplateSpec;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesEphemeralVolumeclaimtemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecPumpAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPumpAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPumpAdditionalvolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbClusterSpecPumpAdditionalvolumesFlexvolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesFlexvolumeSecretref;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesFlexvolumeSecretref {
            name?: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesGcepersistentdisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesGitrepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesHostpath {
            path: string;
            type?: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesIscsiSecretref;
            targetPortal: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesIscsiSecretref {
            name?: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesPersistentvolumeclaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesPhotonpersistentdisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesPortworxvolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesProjectedSources[];
        }

        export interface TidbClusterSpecPumpAdditionalvolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesProjectedSourcesConfigmap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesProjectedSourcesDownwardapi;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesProjectedSourcesServiceaccounttoken;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesProjectedSourcesConfigmap {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesProjectedSourcesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesProjectedSourcesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesProjectedSourcesDownwardapi {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesProjectedSourcesDownwardapiItems[];
        }

        export interface TidbClusterSpecPumpAdditionalvolumesProjectedSourcesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesProjectedSourcesServiceaccounttoken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesRbdSecretref;
            user?: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesRbdSecretref {
            name?: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesScaleio {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesScaleioSecretref;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesScaleioSecretref {
            name?: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalvolumesStorageosSecretref;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesStorageosSecretref {
            name?: string;
        }

        export interface TidbClusterSpecPumpAdditionalvolumesVspherevolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbClusterSpecPumpAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeaffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodaffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodantiaffinity;
        }

        export interface TidbClusterSpecPumpAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface TidbClusterSpecPumpAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface TidbClusterSpecPumpAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface TidbClusterSpecPumpAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPumpAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPumpAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface TidbClusterSpecPumpAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface TidbClusterSpecPumpAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPumpAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPumpAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbClusterSpecPumpAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbClusterSpecPumpAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecPumpAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPumpAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPumpAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecPumpAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPumpAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPumpAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbClusterSpecPumpAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbClusterSpecPumpAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecPumpAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPumpAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPumpAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecPumpAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPumpAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPumpDnsconfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpDnsconfigOptions[];
            searches?: string[];
        }

        export interface TidbClusterSpecPumpDnsconfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbClusterSpecPumpEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvValuefrom;
        }

        export interface TidbClusterSpecPumpEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecPumpEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPumpEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPumpEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvfromSecretref;
        }

        export interface TidbClusterSpecPumpEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpImagepullsecrets {
            name?: string;
        }

        export interface TidbClusterSpecPumpInitcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecPumpInitcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersEnvValuefrom;
        }

        export interface TidbClusterSpecPumpInitcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecPumpInitcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpInitcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPumpInitcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPumpInitcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpInitcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersEnvfromSecretref;
        }

        export interface TidbClusterSpecPumpInitcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpInitcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpInitcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersLifecyclePrestop;
        }

        export interface TidbClusterSpecPumpInitcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersLifecyclePoststartTcpsocket;
        }

        export interface TidbClusterSpecPumpInitcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpInitcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpInitcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpInitcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpInitcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersLifecyclePrestopTcpsocket;
        }

        export interface TidbClusterSpecPumpInitcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpInitcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpInitcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpInitcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpInitcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPumpInitcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpInitcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpInitcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpInitcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpInitcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecPumpInitcontainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecPumpInitcontainersPorts
         */
        export function tidbClusterSpecPumpInitcontainersPortsProvideDefaults(val: TidbClusterSpecPumpInitcontainersPorts): TidbClusterSpecPumpInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecPumpInitcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPumpInitcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpInitcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpInitcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpInitcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpInitcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecPumpInitcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersSecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecPumpInitcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecPumpInitcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecPumpInitcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecPumpInitcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecPumpInitcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPumpInitcontainersStartupprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpInitcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpInitcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpInitcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpInitcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecPumpInitcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecPumpPodsecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpPodsecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpPodsecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpPodsecuritycontextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpPodsecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecPumpPodsecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecPumpPodsecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecPumpPodsecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpPodsecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecPumpSuspendaction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbClusterSpecPumpTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbClusterSpecPumpTopologyspreadconstraints {
            topologyKey: string;
        }

        export interface TidbClusterSpecServices {
            name?: string;
            type?: string;
        }

        export interface TidbClusterSpecSuspendaction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbClusterSpecTicdc {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumemounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumes[];
            affinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinity;
            annotations?: {[key: string]: string};
            baseImage?: string;
            config?: {[key: string]: any};
            configUpdateStrategy?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcDnsconfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvfrom[];
            gracefulShutdownTimeout?: string;
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcImagepullsecrets[];
            initContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainers[];
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcPodsecuritycontext;
            priorityClassName?: string;
            replicas: number;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            serviceAccount?: string;
            statefulSetUpdateStrategy?: string;
            storageClassName?: string;
            storageVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcStoragevolumes[];
            suspendAction?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcSuspendaction;
            terminationGracePeriodSeconds?: number;
            tlsClientSecretNames?: string[];
            tolerations?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcTopologyspreadconstraints[];
            version?: string;
        }
        /**
         * tidbClusterSpecTicdcProvideDefaults sets the appropriate defaults for TidbClusterSpecTicdc
         */
        export function tidbClusterSpecTicdcProvideDefaults(val: TidbClusterSpecTicdc): TidbClusterSpecTicdc {
            return {
                ...val,
                baseImage: (val.baseImage) ?? "pingcap/ticdc",
            };
        }

        export interface TidbClusterSpecTicdcAdditionalcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersEnvValuefrom;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersEnvfromSecretref;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersLifecyclePrestop;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersLifecyclePoststartTcpsocket;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersLifecyclePrestopTcpsocket;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecTicdcAdditionalcontainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecTicdcAdditionalcontainersPorts
         */
        export function tidbClusterSpecTicdcAdditionalcontainersPortsProvideDefaults(val: TidbClusterSpecTicdcAdditionalcontainersPorts): TidbClusterSpecTicdcAdditionalcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersSecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersStartupprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecTicdcAdditionalcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesAwselasticblockstore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesAzuredisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesAzurefile;
            cephfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesConfigmap;
            csi?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesDownwardapi;
            emptyDir?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesEmptydir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesFlexvolume;
            flocker?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesGcepersistentdisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesGitrepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesHostpath;
            iscsi?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesPersistentvolumeclaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesPhotonpersistentdisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesPortworxvolume;
            projected?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesScaleio;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesVspherevolume;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesAwselasticblockstore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesAzuredisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesAzurefile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesCephfsSecretref;
            user?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesCephfsSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesCinderSecretref;
            volumeID: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesCinderSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesConfigmap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesCsiNodepublishsecretref;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesCsiNodepublishsecretref {
            name?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesDownwardapi {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesDownwardapiItems[];
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesDownwardapiItemsResourcefieldref;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesEmptydir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesEphemeralVolumeclaimtemplate;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesEphemeralVolumeclaimtemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesEphemeralVolumeclaimtemplateSpec;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesEphemeralVolumeclaimtemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesFlexvolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesFlexvolumeSecretref;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesFlexvolumeSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesGcepersistentdisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesGitrepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesHostpath {
            path: string;
            type?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesIscsiSecretref;
            targetPortal: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesIscsiSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesPersistentvolumeclaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesPhotonpersistentdisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesPortworxvolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesProjectedSources[];
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesProjectedSourcesConfigmap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesProjectedSourcesDownwardapi;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesProjectedSourcesServiceaccounttoken;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesProjectedSourcesConfigmap {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesProjectedSourcesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesProjectedSourcesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesProjectedSourcesDownwardapi {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesProjectedSourcesDownwardapiItems[];
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesProjectedSourcesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesProjectedSourcesServiceaccounttoken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesRbdSecretref;
            user?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesRbdSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesScaleio {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesScaleioSecretref;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesScaleioSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalvolumesStorageosSecretref;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesStorageosSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalvolumesVspherevolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbClusterSpecTicdcAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeaffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodaffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodantiaffinity;
        }

        export interface TidbClusterSpecTicdcAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface TidbClusterSpecTicdcAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface TidbClusterSpecTicdcAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface TidbClusterSpecTicdcAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTicdcAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTicdcAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface TidbClusterSpecTicdcAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface TidbClusterSpecTicdcAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTicdcAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTicdcAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbClusterSpecTicdcAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbClusterSpecTicdcAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTicdcAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTicdcAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTicdcAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTicdcAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTicdcAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTicdcAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbClusterSpecTicdcAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbClusterSpecTicdcAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTicdcAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTicdcAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTicdcAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTicdcAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTicdcAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTicdcDnsconfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcDnsconfigOptions[];
            searches?: string[];
        }

        export interface TidbClusterSpecTicdcDnsconfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbClusterSpecTicdcEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvValuefrom;
        }

        export interface TidbClusterSpecTicdcEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecTicdcEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTicdcEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTicdcEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvfromSecretref;
        }

        export interface TidbClusterSpecTicdcEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcImagepullsecrets {
            name?: string;
        }

        export interface TidbClusterSpecTicdcInitcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecTicdcInitcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersEnvValuefrom;
        }

        export interface TidbClusterSpecTicdcInitcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecTicdcInitcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcInitcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTicdcInitcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTicdcInitcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcInitcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersEnvfromSecretref;
        }

        export interface TidbClusterSpecTicdcInitcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcInitcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcInitcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersLifecyclePrestop;
        }

        export interface TidbClusterSpecTicdcInitcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersLifecyclePoststartTcpsocket;
        }

        export interface TidbClusterSpecTicdcInitcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcInitcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcInitcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcInitcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcInitcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersLifecyclePrestopTcpsocket;
        }

        export interface TidbClusterSpecTicdcInitcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcInitcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcInitcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcInitcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcInitcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTicdcInitcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcInitcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcInitcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcInitcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcInitcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecTicdcInitcontainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecTicdcInitcontainersPorts
         */
        export function tidbClusterSpecTicdcInitcontainersPortsProvideDefaults(val: TidbClusterSpecTicdcInitcontainersPorts): TidbClusterSpecTicdcInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecTicdcInitcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTicdcInitcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcInitcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcInitcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcInitcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcInitcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTicdcInitcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersSecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecTicdcInitcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecTicdcInitcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTicdcInitcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTicdcInitcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTicdcInitcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTicdcInitcontainersStartupprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcInitcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcInitcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcInitcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcInitcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecTicdcInitcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTicdcPodsecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcPodsecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcPodsecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcPodsecuritycontextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcPodsecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecTicdcPodsecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTicdcPodsecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTicdcPodsecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcPodsecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTicdcStoragevolumes {
            mountPath?: string;
            name: string;
            storageClassName?: string;
            storageSize: string;
        }

        export interface TidbClusterSpecTicdcSuspendaction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbClusterSpecTicdcTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbClusterSpecTicdcTopologyspreadconstraints {
            topologyKey: string;
        }

        export interface TidbClusterSpecTidb {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumemounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumes[];
            affinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinity;
            annotations?: {[key: string]: string};
            baseImage?: string;
            binlogEnabled?: boolean;
            config?: {[key: string]: any};
            configUpdateStrategy?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbDnsconfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvfrom[];
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbImagepullsecrets[];
            initContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainers[];
            initializer?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitializer;
            labels?: {[key: string]: string};
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecycle;
            limits?: {[key: string]: number | string};
            maxFailoverCount?: number;
            nodeSelector?: {[key: string]: string};
            plugins?: string[];
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbPodsecuritycontext;
            priorityClassName?: string;
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbReadinessprobe;
            replicas: number;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            separateSlowLog?: boolean;
            service?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbService;
            serviceAccount?: string;
            slowLogTailer?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbSlowlogtailer;
            slowLogVolumeName?: string;
            statefulSetUpdateStrategy?: string;
            storageClassName?: string;
            storageVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbStoragevolumes[];
            suspendAction?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbSuspendaction;
            terminationGracePeriodSeconds?: number;
            tlsClient?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbTlsclient;
            tolerations?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbTopologyspreadconstraints[];
            version?: string;
        }
        /**
         * tidbClusterSpecTidbProvideDefaults sets the appropriate defaults for TidbClusterSpecTidb
         */
        export function tidbClusterSpecTidbProvideDefaults(val: TidbClusterSpecTidb): TidbClusterSpecTidb {
            return {
                ...val,
                baseImage: (val.baseImage) ?? "pingcap/tidb",
            };
        }

        export interface TidbClusterSpecTidbAdditionalcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersEnvValuefrom;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersEnvfromSecretref;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersLifecyclePrestop;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersLifecyclePoststartTcpsocket;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbAdditionalcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersLifecyclePrestopTcpsocket;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbAdditionalcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbAdditionalcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecTidbAdditionalcontainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecTidbAdditionalcontainersPorts
         */
        export function tidbClusterSpecTidbAdditionalcontainersPortsProvideDefaults(val: TidbClusterSpecTidbAdditionalcontainersPorts): TidbClusterSpecTidbAdditionalcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecTidbAdditionalcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbAdditionalcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTidbAdditionalcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersSecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecTidbAdditionalcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersStartupprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbAdditionalcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecTidbAdditionalcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesAwselasticblockstore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesAzuredisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesAzurefile;
            cephfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesConfigmap;
            csi?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesDownwardapi;
            emptyDir?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesEmptydir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesFlexvolume;
            flocker?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesGcepersistentdisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesGitrepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesHostpath;
            iscsi?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesPersistentvolumeclaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesPhotonpersistentdisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesPortworxvolume;
            projected?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesScaleio;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesVspherevolume;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesAwselasticblockstore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesAzuredisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesAzurefile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesCephfsSecretref;
            user?: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesCephfsSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesCinderSecretref;
            volumeID: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesCinderSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesConfigmap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesCsiNodepublishsecretref;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbClusterSpecTidbAdditionalvolumesCsiNodepublishsecretref {
            name?: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesDownwardapi {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesDownwardapiItems[];
        }

        export interface TidbClusterSpecTidbAdditionalvolumesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesDownwardapiItemsResourcefieldref;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesEmptydir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesEphemeralVolumeclaimtemplate;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesEphemeralVolumeclaimtemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesEphemeralVolumeclaimtemplateSpec;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesEphemeralVolumeclaimtemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTidbAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTidbAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTidbAdditionalvolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbClusterSpecTidbAdditionalvolumesFlexvolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesFlexvolumeSecretref;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesFlexvolumeSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesGcepersistentdisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesGitrepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesHostpath {
            path: string;
            type?: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesIscsiSecretref;
            targetPortal: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesIscsiSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesPersistentvolumeclaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesPhotonpersistentdisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesPortworxvolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesProjectedSources[];
        }

        export interface TidbClusterSpecTidbAdditionalvolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesProjectedSourcesConfigmap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesProjectedSourcesDownwardapi;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesProjectedSourcesServiceaccounttoken;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesProjectedSourcesConfigmap {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesProjectedSourcesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesProjectedSourcesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesProjectedSourcesDownwardapi {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesProjectedSourcesDownwardapiItems[];
        }

        export interface TidbClusterSpecTidbAdditionalvolumesProjectedSourcesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesProjectedSourcesServiceaccounttoken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesRbdSecretref;
            user?: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesRbdSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesScaleio {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesScaleioSecretref;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesScaleioSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalvolumesStorageosSecretref;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesStorageosSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTidbAdditionalvolumesVspherevolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbClusterSpecTidbAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeaffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodaffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodantiaffinity;
        }

        export interface TidbClusterSpecTidbAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface TidbClusterSpecTidbAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface TidbClusterSpecTidbAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface TidbClusterSpecTidbAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTidbAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTidbAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface TidbClusterSpecTidbAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface TidbClusterSpecTidbAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTidbAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTidbAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbClusterSpecTidbAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbClusterSpecTidbAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTidbAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTidbAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTidbAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTidbAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTidbAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTidbAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbClusterSpecTidbAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbClusterSpecTidbAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTidbAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTidbAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTidbAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTidbAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTidbAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTidbDnsconfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbDnsconfigOptions[];
            searches?: string[];
        }

        export interface TidbClusterSpecTidbDnsconfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbClusterSpecTidbEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvValuefrom;
        }

        export interface TidbClusterSpecTidbEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecTidbEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTidbEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTidbEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvfromSecretref;
        }

        export interface TidbClusterSpecTidbEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbImagepullsecrets {
            name?: string;
        }

        export interface TidbClusterSpecTidbInitcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecTidbInitcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersEnvValuefrom;
        }

        export interface TidbClusterSpecTidbInitcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecTidbInitcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbInitcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTidbInitcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTidbInitcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbInitcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersEnvfromSecretref;
        }

        export interface TidbClusterSpecTidbInitcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbInitcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbInitcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersLifecyclePrestop;
        }

        export interface TidbClusterSpecTidbInitcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersLifecyclePoststartTcpsocket;
        }

        export interface TidbClusterSpecTidbInitcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbInitcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbInitcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbInitcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbInitcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersLifecyclePrestopTcpsocket;
        }

        export interface TidbClusterSpecTidbInitcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbInitcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbInitcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbInitcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbInitcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTidbInitcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbInitcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbInitcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbInitcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbInitcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecTidbInitcontainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecTidbInitcontainersPorts
         */
        export function tidbClusterSpecTidbInitcontainersPortsProvideDefaults(val: TidbClusterSpecTidbInitcontainersPorts): TidbClusterSpecTidbInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecTidbInitcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTidbInitcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbInitcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbInitcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbInitcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbInitcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTidbInitcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersSecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecTidbInitcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecTidbInitcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTidbInitcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTidbInitcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTidbInitcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTidbInitcontainersStartupprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbInitcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbInitcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbInitcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbInitcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecTidbInitcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTidbInitializer {
            createPassword?: boolean;
        }

        export interface TidbClusterSpecTidbLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePrestop;
        }

        export interface TidbClusterSpecTidbLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePoststartTcpsocket;
        }

        export interface TidbClusterSpecTidbLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePrestopTcpsocket;
        }

        export interface TidbClusterSpecTidbLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbPodsecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbPodsecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbPodsecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbPodsecuritycontextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbPodsecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecTidbPodsecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTidbPodsecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTidbPodsecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbPodsecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTidbReadinessprobe {
            initialDelaySeconds?: number;
            periodSeconds?: number;
            type?: string;
        }

        export interface TidbClusterSpecTidbService {
            additionalPorts?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbServiceAdditionalports[];
            annotations?: {[key: string]: string};
            clusterIP?: string;
            exposeStatus?: boolean;
            externalTrafficPolicy?: string;
            labels?: {[key: string]: string};
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            mysqlNodePort?: number;
            port?: number;
            portName?: string;
            statusNodePort?: number;
            type?: string;
        }

        export interface TidbClusterSpecTidbServiceAdditionalports {
            appProtocol?: string;
            name?: string;
            nodePort?: number;
            port: number;
            protocol?: string;
            targetPort?: number | string;
        }
        /**
         * tidbClusterSpecTidbServiceAdditionalportsProvideDefaults sets the appropriate defaults for TidbClusterSpecTidbServiceAdditionalports
         */
        export function tidbClusterSpecTidbServiceAdditionalportsProvideDefaults(val: TidbClusterSpecTidbServiceAdditionalports): TidbClusterSpecTidbServiceAdditionalports {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecTidbSlowlogtailer {
            image?: string;
            imagePullPolicy?: string;
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTidbStoragevolumes {
            mountPath?: string;
            name: string;
            storageClassName?: string;
            storageSize: string;
        }

        export interface TidbClusterSpecTidbSuspendaction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbClusterSpecTidbTlsclient {
            disableClientAuthn?: boolean;
            enabled?: boolean;
            skipInternalClientCA?: boolean;
        }

        export interface TidbClusterSpecTidbTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbClusterSpecTidbTopologyspreadconstraints {
            topologyKey: string;
        }

        export interface TidbClusterSpecTiflash {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumemounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumes[];
            affinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinity;
            annotations?: {[key: string]: string};
            baseImage?: string;
            config?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashConfig;
            configUpdateStrategy?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashDnsconfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvfrom[];
            failover?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashFailover;
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashImagepullsecrets[];
            initContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainers[];
            initializer?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitializer;
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            logTailer?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashLogtailer;
            maxFailoverCount?: number;
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashPodsecuritycontext;
            priorityClassName?: string;
            privileged?: boolean;
            recoverFailover?: boolean;
            replicas: number;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            serviceAccount?: string;
            statefulSetUpdateStrategy?: string;
            storageClaims: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashStorageclaims[];
            suspendAction?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashSuspendaction;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashTopologyspreadconstraints[];
            version?: string;
        }
        /**
         * tidbClusterSpecTiflashProvideDefaults sets the appropriate defaults for TidbClusterSpecTiflash
         */
        export function tidbClusterSpecTiflashProvideDefaults(val: TidbClusterSpecTiflash): TidbClusterSpecTiflash {
            return {
                ...val,
                baseImage: (val.baseImage) ?? "pingcap/tiflash",
            };
        }

        export interface TidbClusterSpecTiflashAdditionalcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersEnvValuefrom;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersEnvfromSecretref;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersLifecyclePrestop;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersLifecyclePoststartTcpsocket;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersLifecyclePrestopTcpsocket;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecTiflashAdditionalcontainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecTiflashAdditionalcontainersPorts
         */
        export function tidbClusterSpecTiflashAdditionalcontainersPortsProvideDefaults(val: TidbClusterSpecTiflashAdditionalcontainersPorts): TidbClusterSpecTiflashAdditionalcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersSecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersStartupprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecTiflashAdditionalcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesAwselasticblockstore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesAzuredisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesAzurefile;
            cephfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesConfigmap;
            csi?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesDownwardapi;
            emptyDir?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesEmptydir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesFlexvolume;
            flocker?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesGcepersistentdisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesGitrepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesHostpath;
            iscsi?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesPersistentvolumeclaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesPhotonpersistentdisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesPortworxvolume;
            projected?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesScaleio;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesVspherevolume;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesAwselasticblockstore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesAzuredisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesAzurefile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesCephfsSecretref;
            user?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesCephfsSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesCinderSecretref;
            volumeID: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesCinderSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesConfigmap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesCsiNodepublishsecretref;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesCsiNodepublishsecretref {
            name?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesDownwardapi {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesDownwardapiItems[];
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesDownwardapiItemsResourcefieldref;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesEmptydir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesEphemeralVolumeclaimtemplate;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesEphemeralVolumeclaimtemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesEphemeralVolumeclaimtemplateSpec;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesEphemeralVolumeclaimtemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesFlexvolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesFlexvolumeSecretref;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesFlexvolumeSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesGcepersistentdisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesGitrepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesHostpath {
            path: string;
            type?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesIscsiSecretref;
            targetPortal: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesIscsiSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesPersistentvolumeclaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesPhotonpersistentdisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesPortworxvolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesProjectedSources[];
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesProjectedSourcesConfigmap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesProjectedSourcesDownwardapi;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesProjectedSourcesServiceaccounttoken;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesProjectedSourcesConfigmap {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesProjectedSourcesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesProjectedSourcesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesProjectedSourcesDownwardapi {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesProjectedSourcesDownwardapiItems[];
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesProjectedSourcesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesProjectedSourcesServiceaccounttoken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesRbdSecretref;
            user?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesRbdSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesScaleio {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesScaleioSecretref;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesScaleioSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalvolumesStorageosSecretref;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesStorageosSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalvolumesVspherevolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbClusterSpecTiflashAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeaffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodaffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodantiaffinity;
        }

        export interface TidbClusterSpecTiflashAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface TidbClusterSpecTiflashAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface TidbClusterSpecTiflashAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface TidbClusterSpecTiflashAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTiflashAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTiflashAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface TidbClusterSpecTiflashAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface TidbClusterSpecTiflashAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTiflashAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTiflashAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbClusterSpecTiflashAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbClusterSpecTiflashAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTiflashAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTiflashAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTiflashAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTiflashAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTiflashAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTiflashAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbClusterSpecTiflashAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbClusterSpecTiflashAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTiflashAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTiflashAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTiflashAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTiflashAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTiflashAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTiflashConfig {
            config?: {[key: string]: any};
            proxy?: {[key: string]: any};
        }

        export interface TidbClusterSpecTiflashDnsconfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashDnsconfigOptions[];
            searches?: string[];
        }

        export interface TidbClusterSpecTiflashDnsconfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbClusterSpecTiflashEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvValuefrom;
        }

        export interface TidbClusterSpecTiflashEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecTiflashEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTiflashEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTiflashEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvfromSecretref;
        }

        export interface TidbClusterSpecTiflashEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashFailover {
            recoverByUID?: string;
        }

        export interface TidbClusterSpecTiflashImagepullsecrets {
            name?: string;
        }

        export interface TidbClusterSpecTiflashInitcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecTiflashInitcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersEnvValuefrom;
        }

        export interface TidbClusterSpecTiflashInitcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecTiflashInitcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashInitcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTiflashInitcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTiflashInitcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashInitcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersEnvfromSecretref;
        }

        export interface TidbClusterSpecTiflashInitcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashInitcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashInitcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersLifecyclePrestop;
        }

        export interface TidbClusterSpecTiflashInitcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersLifecyclePoststartTcpsocket;
        }

        export interface TidbClusterSpecTiflashInitcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashInitcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashInitcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashInitcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashInitcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersLifecyclePrestopTcpsocket;
        }

        export interface TidbClusterSpecTiflashInitcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashInitcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashInitcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashInitcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashInitcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTiflashInitcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashInitcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashInitcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashInitcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashInitcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecTiflashInitcontainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecTiflashInitcontainersPorts
         */
        export function tidbClusterSpecTiflashInitcontainersPortsProvideDefaults(val: TidbClusterSpecTiflashInitcontainersPorts): TidbClusterSpecTiflashInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecTiflashInitcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTiflashInitcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashInitcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashInitcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashInitcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashInitcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTiflashInitcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersSecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecTiflashInitcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecTiflashInitcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTiflashInitcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTiflashInitcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTiflashInitcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTiflashInitcontainersStartupprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashInitcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashInitcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashInitcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashInitcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecTiflashInitcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTiflashInitializer {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTiflashLogtailer {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTiflashPodsecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashPodsecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashPodsecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashPodsecuritycontextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashPodsecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecTiflashPodsecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTiflashPodsecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTiflashPodsecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashPodsecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTiflashStorageclaims {
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashStorageclaimsResources;
            storageClassName?: string;
        }

        export interface TidbClusterSpecTiflashStorageclaimsResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTiflashSuspendaction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbClusterSpecTiflashTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbClusterSpecTiflashTopologyspreadconstraints {
            topologyKey: string;
        }

        export interface TidbClusterSpecTikv {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumemounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumes[];
            affinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinity;
            annotations?: {[key: string]: string};
            baseImage?: string;
            config?: {[key: string]: any};
            configUpdateStrategy?: string;
            dataSubDir?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvDnsconfig;
            dnsPolicy?: string;
            enableNamedStatusPort?: boolean;
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvfrom[];
            evictLeaderTimeout?: string;
            failover?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvFailover;
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvImagepullsecrets[];
            initContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainers[];
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            logTailer?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvLogtailer;
            maxFailoverCount?: number;
            mountClusterClientSecret?: boolean;
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvPodsecuritycontext;
            priorityClassName?: string;
            privileged?: boolean;
            raftLogVolumeName?: string;
            recoverFailover?: boolean;
            replicas: number;
            requests?: {[key: string]: number | string};
            rocksDBLogVolumeName?: string;
            schedulerName?: string;
            separateRaftLog?: boolean;
            separateRocksDBLog?: boolean;
            serviceAccount?: string;
            statefulSetUpdateStrategy?: string;
            storageClassName?: string;
            storageVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvStoragevolumes[];
            storeLabels?: string[];
            suspendAction?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvSuspendaction;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvTopologyspreadconstraints[];
            version?: string;
        }
        /**
         * tidbClusterSpecTikvProvideDefaults sets the appropriate defaults for TidbClusterSpecTikv
         */
        export function tidbClusterSpecTikvProvideDefaults(val: TidbClusterSpecTikv): TidbClusterSpecTikv {
            return {
                ...val,
                baseImage: (val.baseImage) ?? "pingcap/tikv",
            };
        }

        export interface TidbClusterSpecTikvAdditionalcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersEnvValuefrom;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersEnvfromSecretref;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersLifecyclePrestop;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersLifecyclePoststartTcpsocket;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvAdditionalcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersLifecyclePrestopTcpsocket;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvAdditionalcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvAdditionalcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecTikvAdditionalcontainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecTikvAdditionalcontainersPorts
         */
        export function tidbClusterSpecTikvAdditionalcontainersPortsProvideDefaults(val: TidbClusterSpecTikvAdditionalcontainersPorts): TidbClusterSpecTikvAdditionalcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecTikvAdditionalcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvAdditionalcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTikvAdditionalcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersSecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecTikvAdditionalcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersStartupprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvAdditionalcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecTikvAdditionalcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesAwselasticblockstore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesAzuredisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesAzurefile;
            cephfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesConfigmap;
            csi?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesDownwardapi;
            emptyDir?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesEmptydir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesFlexvolume;
            flocker?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesGcepersistentdisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesGitrepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesHostpath;
            iscsi?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesPersistentvolumeclaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesPhotonpersistentdisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesPortworxvolume;
            projected?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesScaleio;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesVspherevolume;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesAwselasticblockstore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesAzuredisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesAzurefile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesCephfsSecretref;
            user?: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesCephfsSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesCinderSecretref;
            volumeID: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesCinderSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesConfigmap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesCsiNodepublishsecretref;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbClusterSpecTikvAdditionalvolumesCsiNodepublishsecretref {
            name?: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesDownwardapi {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesDownwardapiItems[];
        }

        export interface TidbClusterSpecTikvAdditionalvolumesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesDownwardapiItemsResourcefieldref;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesEmptydir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesEphemeralVolumeclaimtemplate;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesEphemeralVolumeclaimtemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesEphemeralVolumeclaimtemplateSpec;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesEphemeralVolumeclaimtemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTikvAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTikvAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTikvAdditionalvolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbClusterSpecTikvAdditionalvolumesFlexvolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesFlexvolumeSecretref;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesFlexvolumeSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesGcepersistentdisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesGitrepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesHostpath {
            path: string;
            type?: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesIscsiSecretref;
            targetPortal: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesIscsiSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesPersistentvolumeclaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesPhotonpersistentdisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesPortworxvolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesProjectedSources[];
        }

        export interface TidbClusterSpecTikvAdditionalvolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesProjectedSourcesConfigmap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesProjectedSourcesDownwardapi;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesProjectedSourcesServiceaccounttoken;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesProjectedSourcesConfigmap {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesProjectedSourcesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesProjectedSourcesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesProjectedSourcesDownwardapi {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesProjectedSourcesDownwardapiItems[];
        }

        export interface TidbClusterSpecTikvAdditionalvolumesProjectedSourcesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesProjectedSourcesServiceaccounttoken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesRbdSecretref;
            user?: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesRbdSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesScaleio {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesScaleioSecretref;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesScaleioSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalvolumesStorageosSecretref;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesStorageosSecretref {
            name?: string;
        }

        export interface TidbClusterSpecTikvAdditionalvolumesVspherevolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbClusterSpecTikvAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeaffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodaffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodantiaffinity;
        }

        export interface TidbClusterSpecTikvAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface TidbClusterSpecTikvAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface TidbClusterSpecTikvAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface TidbClusterSpecTikvAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTikvAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTikvAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface TidbClusterSpecTikvAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface TidbClusterSpecTikvAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTikvAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTikvAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbClusterSpecTikvAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbClusterSpecTikvAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTikvAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTikvAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTikvAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTikvAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTikvAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTikvAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbClusterSpecTikvAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbClusterSpecTikvAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTikvAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTikvAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTikvAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTikvAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTikvAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTikvDnsconfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvDnsconfigOptions[];
            searches?: string[];
        }

        export interface TidbClusterSpecTikvDnsconfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbClusterSpecTikvEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvValuefrom;
        }

        export interface TidbClusterSpecTikvEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecTikvEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTikvEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTikvEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvfromSecretref;
        }

        export interface TidbClusterSpecTikvEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvFailover {
            recoverByUID?: string;
        }

        export interface TidbClusterSpecTikvImagepullsecrets {
            name?: string;
        }

        export interface TidbClusterSpecTikvInitcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecTikvInitcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersEnvValuefrom;
        }

        export interface TidbClusterSpecTikvInitcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersEnvValuefromSecretkeyref;
        }

        export interface TidbClusterSpecTikvInitcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvInitcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTikvInitcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTikvInitcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvInitcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersEnvfromSecretref;
        }

        export interface TidbClusterSpecTikvInitcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvInitcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvInitcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersLifecyclePrestop;
        }

        export interface TidbClusterSpecTikvInitcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersLifecyclePoststartTcpsocket;
        }

        export interface TidbClusterSpecTikvInitcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvInitcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvInitcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvInitcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvInitcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersLifecyclePrestopTcpsocket;
        }

        export interface TidbClusterSpecTikvInitcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvInitcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvInitcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvInitcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvInitcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTikvInitcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvInitcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvInitcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvInitcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvInitcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecTikvInitcontainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecTikvInitcontainersPorts
         */
        export function tidbClusterSpecTikvInitcontainersPortsProvideDefaults(val: TidbClusterSpecTikvInitcontainersPorts): TidbClusterSpecTikvInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecTikvInitcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTikvInitcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvInitcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvInitcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvInitcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvInitcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTikvInitcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersSecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecTikvInitcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecTikvInitcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTikvInitcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTikvInitcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTikvInitcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTikvInitcontainersStartupprobeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvInitcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvInitcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvInitcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvInitcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecTikvInitcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTikvLogtailer {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTikvPodsecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvPodsecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvPodsecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvPodsecuritycontextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvPodsecuritycontextWindowsoptions;
        }

        export interface TidbClusterSpecTikvPodsecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTikvPodsecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTikvPodsecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvPodsecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTikvStoragevolumes {
            mountPath?: string;
            name: string;
            storageClassName?: string;
            storageSize: string;
        }

        export interface TidbClusterSpecTikvSuspendaction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbClusterSpecTikvTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbClusterSpecTikvTopologyspreadconstraints {
            topologyKey: string;
        }

        export interface TidbClusterSpecTlscluster {
            enabled?: boolean;
        }

        export interface TidbClusterSpecTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbClusterSpecTopologyspreadconstraints {
            topologyKey: string;
        }

        export interface TidbClusterStatus {
            "auto-scaler"?: outputs.pingcap.v1alpha1.TidbClusterStatusAutoScaler;
            clusterID?: string;
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusConditions[];
            pd?: outputs.pingcap.v1alpha1.TidbClusterStatusPd;
            pump?: outputs.pingcap.v1alpha1.TidbClusterStatusPump;
            ticdc?: outputs.pingcap.v1alpha1.TidbClusterStatusTicdc;
            tidb?: outputs.pingcap.v1alpha1.TidbClusterStatusTidb;
            tiflash?: outputs.pingcap.v1alpha1.TidbClusterStatusTiflash;
            tikv?: outputs.pingcap.v1alpha1.TidbClusterStatusTikv;
        }

        export interface TidbClusterStatusAutoScaler {
            name: string;
            namespace: string;
        }

        export interface TidbClusterStatusConditions {
            lastTransitionTime?: string;
            lastUpdateTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusPd {
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusPdConditions[];
            failureMembers?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusPdFailuremembers};
            image?: string;
            leader?: outputs.pingcap.v1alpha1.TidbClusterStatusPdLeader;
            members?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusPdMembers};
            peerMembers?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusPdPeermembers};
            phase?: string;
            statefulSet?: outputs.pingcap.v1alpha1.TidbClusterStatusPdStatefulset;
            synced?: boolean;
            unjoinedMembers?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusPdUnjoinedmembers};
            volumes?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusPdVolumes};
        }

        export interface TidbClusterStatusPdConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration?: number;
            reason: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusPdFailuremembers {
            createdAt?: string;
            memberDeleted?: boolean;
            memberID?: string;
            podName?: string;
            pvcUID?: string;
            pvcUIDSet?: {[key: string]: {[key: string]: any}};
        }

        export interface TidbClusterStatusPdLeader {
            clientURL: string;
            health: boolean;
            id: string;
            lastTransitionTime?: string;
            name: string;
        }

        export interface TidbClusterStatusPdMembers {
            clientURL: string;
            health: boolean;
            id: string;
            lastTransitionTime?: string;
            name: string;
        }

        export interface TidbClusterStatusPdPeermembers {
            clientURL: string;
            health: boolean;
            id: string;
            lastTransitionTime?: string;
            name: string;
        }

        export interface TidbClusterStatusPdStatefulset {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusPdStatefulsetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface TidbClusterStatusPdStatefulsetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusPdUnjoinedmembers {
            createdAt?: string;
            podName?: string;
            pvcUID?: string;
            pvcUIDSet?: {[key: string]: {[key: string]: any}};
        }

        export interface TidbClusterStatusPdVolumes {
            boundCount?: number;
            currentCapacity: number | string;
            currentCount?: number;
            name: string;
            resizedCapacity: number | string;
            resizedCount?: number;
        }

        export interface TidbClusterStatusPump {
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusPumpConditions[];
            members?: outputs.pingcap.v1alpha1.TidbClusterStatusPumpMembers[];
            phase?: string;
            statefulSet?: outputs.pingcap.v1alpha1.TidbClusterStatusPumpStatefulset;
            volumes?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusPumpVolumes};
        }

        export interface TidbClusterStatusPumpConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration?: number;
            reason: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusPumpMembers {
            host: string;
            nodeId: string;
            state: string;
        }

        export interface TidbClusterStatusPumpStatefulset {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusPumpStatefulsetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface TidbClusterStatusPumpStatefulsetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusPumpVolumes {
            boundCount?: number;
            currentCapacity: number | string;
            currentCount?: number;
            name: string;
            resizedCapacity: number | string;
            resizedCount?: number;
        }

        export interface TidbClusterStatusTicdc {
            captures?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTicdcCaptures};
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusTicdcConditions[];
            phase?: string;
            statefulSet?: outputs.pingcap.v1alpha1.TidbClusterStatusTicdcStatefulset;
            synced?: boolean;
            volumes?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTicdcVolumes};
        }

        export interface TidbClusterStatusTicdcCaptures {
            id?: string;
            isOwner?: boolean;
            podName?: string;
            ready?: boolean;
            version?: string;
        }

        export interface TidbClusterStatusTicdcConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration?: number;
            reason: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusTicdcStatefulset {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusTicdcStatefulsetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface TidbClusterStatusTicdcStatefulsetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusTicdcVolumes {
            boundCount?: number;
            currentCapacity: number | string;
            currentCount?: number;
            name: string;
            resizedCapacity: number | string;
            resizedCount?: number;
        }

        export interface TidbClusterStatusTidb {
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusTidbConditions[];
            failureMembers?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTidbFailuremembers};
            image?: string;
            members?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTidbMembers};
            passwordInitialized?: boolean;
            phase?: string;
            resignDDLOwnerRetryCount?: number;
            statefulSet?: outputs.pingcap.v1alpha1.TidbClusterStatusTidbStatefulset;
            volumes?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTidbVolumes};
        }

        export interface TidbClusterStatusTidbConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration?: number;
            reason: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusTidbFailuremembers {
            createdAt?: string;
            podName?: string;
        }

        export interface TidbClusterStatusTidbMembers {
            health: boolean;
            lastTransitionTime?: string;
            name: string;
            node?: string;
        }

        export interface TidbClusterStatusTidbStatefulset {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusTidbStatefulsetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface TidbClusterStatusTidbStatefulsetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusTidbVolumes {
            boundCount?: number;
            currentCapacity: number | string;
            currentCount?: number;
            name: string;
            resizedCapacity: number | string;
            resizedCount?: number;
        }

        export interface TidbClusterStatusTiflash {
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusTiflashConditions[];
            failoverUID?: string;
            failureStores?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTiflashFailurestores};
            image?: string;
            peerStores?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTiflashPeerstores};
            phase?: string;
            statefulSet?: outputs.pingcap.v1alpha1.TidbClusterStatusTiflashStatefulset;
            stores?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTiflashStores};
            synced?: boolean;
            tombstoneStores?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTiflashTombstonestores};
            volumes?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTiflashVolumes};
        }

        export interface TidbClusterStatusTiflashConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration?: number;
            reason: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusTiflashFailurestores {
            createdAt?: string;
            podName?: string;
            storeID?: string;
        }

        export interface TidbClusterStatusTiflashPeerstores {
            id: string;
            ip: string;
            lastTransitionTime?: string;
            leaderCount: number;
            podName: string;
            state: string;
        }

        export interface TidbClusterStatusTiflashStatefulset {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusTiflashStatefulsetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface TidbClusterStatusTiflashStatefulsetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusTiflashStores {
            id: string;
            ip: string;
            lastTransitionTime?: string;
            leaderCount: number;
            podName: string;
            state: string;
        }

        export interface TidbClusterStatusTiflashTombstonestores {
            id: string;
            ip: string;
            lastTransitionTime?: string;
            leaderCount: number;
            podName: string;
            state: string;
        }

        export interface TidbClusterStatusTiflashVolumes {
            boundCount?: number;
            currentCapacity: number | string;
            currentCount?: number;
            name: string;
            resizedCapacity: number | string;
            resizedCount?: number;
        }

        export interface TidbClusterStatusTikv {
            bootStrapped?: boolean;
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusTikvConditions[];
            evictLeader?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTikvEvictleader};
            failoverUID?: string;
            failureStores?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTikvFailurestores};
            image?: string;
            peerStores?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTikvPeerstores};
            phase?: string;
            statefulSet?: outputs.pingcap.v1alpha1.TidbClusterStatusTikvStatefulset;
            stores?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTikvStores};
            synced?: boolean;
            tombstoneStores?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTikvTombstonestores};
            volumes?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTikvVolumes};
        }

        export interface TidbClusterStatusTikvConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration?: number;
            reason: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusTikvEvictleader {
            beginTime?: string;
            podCreateTime?: string;
            value?: string;
        }

        export interface TidbClusterStatusTikvFailurestores {
            createdAt?: string;
            podName?: string;
            storeID?: string;
        }

        export interface TidbClusterStatusTikvPeerstores {
            id: string;
            ip: string;
            lastTransitionTime?: string;
            leaderCount: number;
            podName: string;
            state: string;
        }

        export interface TidbClusterStatusTikvStatefulset {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusTikvStatefulsetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface TidbClusterStatusTikvStatefulsetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusTikvStores {
            id: string;
            ip: string;
            lastTransitionTime?: string;
            leaderCount: number;
            podName: string;
            state: string;
        }

        export interface TidbClusterStatusTikvTombstonestores {
            id: string;
            ip: string;
            lastTransitionTime?: string;
            leaderCount: number;
            podName: string;
            state: string;
        }

        export interface TidbClusterStatusTikvVolumes {
            boundCount?: number;
            currentCapacity: number | string;
            currentCount?: number;
            name: string;
            resizedCapacity: number | string;
            resizedCount?: number;
        }

        export interface TidbInitializerSpec {
            cluster: outputs.pingcap.v1alpha1.TidbInitializerSpecCluster;
            image: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbInitializerSpecImagepullsecrets[];
            initSql?: string;
            initSqlConfigMap?: string;
            passwordSecret?: string;
            permitHost?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbInitializerSpecPodsecuritycontext;
            resources?: outputs.pingcap.v1alpha1.TidbInitializerSpecResources;
            timezone?: string;
            tlsClientSecretName?: string;
        }

        export interface TidbInitializerSpecCluster {
            clusterDomain?: string;
            name: string;
            namespace?: string;
        }

        export interface TidbInitializerSpecImagepullsecrets {
            name?: string;
        }

        export interface TidbInitializerSpecPodsecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbInitializerSpecPodsecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbInitializerSpecPodsecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbInitializerSpecPodsecuritycontextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbInitializerSpecPodsecuritycontextWindowsoptions;
        }

        export interface TidbInitializerSpecPodsecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbInitializerSpecPodsecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbInitializerSpecPodsecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface TidbInitializerSpecPodsecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbInitializerSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbInitializerStatus {
            active?: number;
            completionTime?: string;
            conditions?: outputs.pingcap.v1alpha1.TidbInitializerStatusConditions[];
            failed?: number;
            phase?: string;
            startTime?: string;
            succeeded?: number;
        }

        export interface TidbInitializerStatusConditions {
            lastProbeTime?: string;
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbMonitorSpec {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainers[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumes[];
            alertManagerRulesVersion?: string;
            alertmanagerURL?: string;
            annotations?: {[key: string]: string};
            clusterScoped?: boolean;
            clusters?: outputs.pingcap.v1alpha1.TidbMonitorSpecClusters[];
            dm?: outputs.pingcap.v1alpha1.TidbMonitorSpecDm;
            enableAlertRules?: boolean;
            externalLabels?: {[key: string]: string};
            grafana?: outputs.pingcap.v1alpha1.TidbMonitorSpecGrafana;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbMonitorSpecImagepullsecrets[];
            initializer: outputs.pingcap.v1alpha1.TidbMonitorSpecInitializer;
            kubePrometheusURL?: string;
            labels?: {[key: string]: string};
            nodeSelector?: {[key: string]: string};
            persistent?: boolean;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbMonitorSpecPodsecuritycontext;
            prometheus: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheus;
            prometheusReloader?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusreloader;
            pvReclaimPolicy?: string;
            reloader: outputs.pingcap.v1alpha1.TidbMonitorSpecReloader;
            replicaExternalLabelName?: string;
            replicas?: number;
            shards?: number;
            storage?: string;
            storageClassName?: string;
            thanos?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanos;
            timezone?: string;
            tolerations?: outputs.pingcap.v1alpha1.TidbMonitorSpecTolerations[];
        }
        /**
         * tidbMonitorSpecProvideDefaults sets the appropriate defaults for TidbMonitorSpec
         */
        export function tidbMonitorSpecProvideDefaults(val: TidbMonitorSpec): TidbMonitorSpec {
            return {
                ...val,
                pvReclaimPolicy: (val.pvReclaimPolicy) ?? "Retain",
            };
        }

        export interface TidbMonitorSpecAdditionalcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface TidbMonitorSpecAdditionalcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersEnvValuefrom;
        }

        export interface TidbMonitorSpecAdditionalcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersEnvValuefromSecretkeyref;
        }

        export interface TidbMonitorSpecAdditionalcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecAdditionalcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbMonitorSpecAdditionalcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbMonitorSpecAdditionalcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecAdditionalcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersEnvfromSecretref;
        }

        export interface TidbMonitorSpecAdditionalcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecAdditionalcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecAdditionalcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersLifecyclePrestop;
        }

        export interface TidbMonitorSpecAdditionalcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersLifecyclePoststartTcpsocket;
        }

        export interface TidbMonitorSpecAdditionalcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbMonitorSpecAdditionalcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbMonitorSpecAdditionalcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbMonitorSpecAdditionalcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbMonitorSpecAdditionalcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersLifecyclePrestopTcpsocket;
        }

        export interface TidbMonitorSpecAdditionalcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbMonitorSpecAdditionalcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbMonitorSpecAdditionalcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbMonitorSpecAdditionalcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbMonitorSpecAdditionalcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbMonitorSpecAdditionalcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface TidbMonitorSpecAdditionalcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbMonitorSpecAdditionalcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbMonitorSpecAdditionalcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbMonitorSpecAdditionalcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbMonitorSpecAdditionalcontainersPortsProvideDefaults sets the appropriate defaults for TidbMonitorSpecAdditionalcontainersPorts
         */
        export function tidbMonitorSpecAdditionalcontainersPortsProvideDefaults(val: TidbMonitorSpecAdditionalcontainersPorts): TidbMonitorSpecAdditionalcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbMonitorSpecAdditionalcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbMonitorSpecAdditionalcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface TidbMonitorSpecAdditionalcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbMonitorSpecAdditionalcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbMonitorSpecAdditionalcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbMonitorSpecAdditionalcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbMonitorSpecAdditionalcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersSecuritycontextWindowsoptions;
        }

        export interface TidbMonitorSpecAdditionalcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbMonitorSpecAdditionalcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbMonitorSpecAdditionalcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbMonitorSpecAdditionalcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbMonitorSpecAdditionalcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbMonitorSpecAdditionalcontainersStartupprobeExec {
            command?: string[];
        }

        export interface TidbMonitorSpecAdditionalcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbMonitorSpecAdditionalcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbMonitorSpecAdditionalcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbMonitorSpecAdditionalcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface TidbMonitorSpecAdditionalcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbMonitorSpecAdditionalvolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesAwselasticblockstore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesAzuredisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesAzurefile;
            cephfs?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesConfigmap;
            csi?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesDownwardapi;
            emptyDir?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesEmptydir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesFlexvolume;
            flocker?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesGcepersistentdisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesGitrepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesHostpath;
            iscsi?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesPersistentvolumeclaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesPhotonpersistentdisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesPortworxvolume;
            projected?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesScaleio;
            secret?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesVspherevolume;
        }

        export interface TidbMonitorSpecAdditionalvolumesAwselasticblockstore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesAzuredisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbMonitorSpecAdditionalvolumesAzurefile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesCephfsSecretref;
            user?: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesCephfsSecretref {
            name?: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesCinderSecretref;
            volumeID: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesCinderSecretref {
            name?: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesConfigmap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecAdditionalvolumesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesCsiNodepublishsecretref;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbMonitorSpecAdditionalvolumesCsiNodepublishsecretref {
            name?: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesDownwardapi {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesDownwardapiItems[];
        }

        export interface TidbMonitorSpecAdditionalvolumesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesDownwardapiItemsResourcefieldref;
        }

        export interface TidbMonitorSpecAdditionalvolumesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesEmptydir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbMonitorSpecAdditionalvolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesEphemeralVolumeclaimtemplate;
        }

        export interface TidbMonitorSpecAdditionalvolumesEphemeralVolumeclaimtemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpec;
        }

        export interface TidbMonitorSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource;
            resources?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbMonitorSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbMonitorSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbMonitorSpecAdditionalvolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbMonitorSpecAdditionalvolumesFlexvolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesFlexvolumeSecretref;
        }

        export interface TidbMonitorSpecAdditionalvolumesFlexvolumeSecretref {
            name?: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesGcepersistentdisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbMonitorSpecAdditionalvolumesGitrepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbMonitorSpecAdditionalvolumesHostpath {
            path: string;
            type?: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesIscsiSecretref;
            targetPortal: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesIscsiSecretref {
            name?: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesPersistentvolumeclaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbMonitorSpecAdditionalvolumesPhotonpersistentdisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesPortworxvolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesProjectedSources[];
        }

        export interface TidbMonitorSpecAdditionalvolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesProjectedSourcesConfigmap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesProjectedSourcesDownwardapi;
            secret?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesProjectedSourcesServiceaccounttoken;
        }

        export interface TidbMonitorSpecAdditionalvolumesProjectedSourcesConfigmap {
            items?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesProjectedSourcesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecAdditionalvolumesProjectedSourcesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesProjectedSourcesDownwardapi {
            items?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesProjectedSourcesDownwardapiItems[];
        }

        export interface TidbMonitorSpecAdditionalvolumesProjectedSourcesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref;
        }

        export interface TidbMonitorSpecAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecAdditionalvolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesProjectedSourcesServiceaccounttoken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesRbdSecretref;
            user?: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesRbdSecretref {
            name?: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesScaleio {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesScaleioSecretref;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesScaleioSecretref {
            name?: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalvolumesStorageosSecretref;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesStorageosSecretref {
            name?: string;
        }

        export interface TidbMonitorSpecAdditionalvolumesVspherevolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbMonitorSpecClusters {
            clusterDomain?: string;
            name: string;
            namespace?: string;
        }

        export interface TidbMonitorSpecDm {
            clusters: outputs.pingcap.v1alpha1.TidbMonitorSpecDmClusters[];
            initializer: outputs.pingcap.v1alpha1.TidbMonitorSpecDmInitializer;
        }

        export interface TidbMonitorSpecDmClusters {
            clusterDomain?: string;
            name: string;
            namespace?: string;
        }

        export interface TidbMonitorSpecDmInitializer {
            baseImage?: string;
            envs?: {[key: string]: string};
            imagePullPolicy?: string;
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
            version?: string;
        }

        export interface TidbMonitorSpecGrafana {
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbMonitorSpecGrafanaAdditionalvolumemounts[];
            baseImage?: string;
            envs?: {[key: string]: string};
            imagePullPolicy?: string;
            ingress?: outputs.pingcap.v1alpha1.TidbMonitorSpecGrafanaIngress;
            limits?: {[key: string]: number | string};
            logLevel?: string;
            password?: string;
            passwordSecret?: outputs.pingcap.v1alpha1.TidbMonitorSpecGrafanaPasswordsecret;
            requests?: {[key: string]: number | string};
            service?: outputs.pingcap.v1alpha1.TidbMonitorSpecGrafanaService;
            username?: string;
            usernameSecret?: outputs.pingcap.v1alpha1.TidbMonitorSpecGrafanaUsernamesecret;
            version?: string;
        }

        export interface TidbMonitorSpecGrafanaAdditionalvolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbMonitorSpecGrafanaIngress {
            annotations?: {[key: string]: string};
            hosts: string[];
            tls?: outputs.pingcap.v1alpha1.TidbMonitorSpecGrafanaIngressTls[];
        }

        export interface TidbMonitorSpecGrafanaIngressTls {
            hosts?: string[];
            secretName?: string;
        }

        export interface TidbMonitorSpecGrafanaPasswordsecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecGrafanaService {
            annotations?: {[key: string]: string};
            clusterIP?: string;
            labels?: {[key: string]: string};
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            port?: number;
            portName?: string;
            type?: string;
        }

        export interface TidbMonitorSpecGrafanaUsernamesecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecImagepullsecrets {
            name?: string;
        }

        export interface TidbMonitorSpecInitializer {
            baseImage?: string;
            envs?: {[key: string]: string};
            imagePullPolicy?: string;
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
            version?: string;
        }

        export interface TidbMonitorSpecPodsecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbMonitorSpecPodsecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbMonitorSpecPodsecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbMonitorSpecPodsecuritycontextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbMonitorSpecPodsecuritycontextWindowsoptions;
        }

        export interface TidbMonitorSpecPodsecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbMonitorSpecPodsecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbMonitorSpecPodsecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface TidbMonitorSpecPodsecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbMonitorSpecPrometheus {
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusAdditionalvolumemounts[];
            baseImage?: string;
            config?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusConfig;
            disableCompaction?: boolean;
            imagePullPolicy?: string;
            ingress?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusIngress;
            limits?: {[key: string]: number | string};
            logLevel?: string;
            remoteWrite?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemotewrite[];
            requests?: {[key: string]: number | string};
            reserveDays?: number;
            retentionTime?: string;
            service?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusService;
            version?: string;
        }

        export interface TidbMonitorSpecPrometheusAdditionalvolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbMonitorSpecPrometheusConfig {
            commandOptions?: string[];
            configMapRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusConfigConfigmapref;
            ruleConfigRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusConfigRuleconfigref;
        }

        export interface TidbMonitorSpecPrometheusConfigConfigmapref {
            name?: string;
            namespace?: string;
        }

        export interface TidbMonitorSpecPrometheusConfigRuleconfigref {
            name?: string;
            namespace?: string;
        }

        export interface TidbMonitorSpecPrometheusIngress {
            annotations?: {[key: string]: string};
            hosts: string[];
            tls?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusIngressTls[];
        }

        export interface TidbMonitorSpecPrometheusIngressTls {
            hosts?: string[];
            secretName?: string;
        }

        export interface TidbMonitorSpecPrometheusRemotewrite {
            basicAuth?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemotewriteBasicauth;
            bearerToken?: string;
            bearerTokenFile?: string;
            proxyUrl?: string;
            queueConfig?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemotewriteQueueconfig;
            remoteTimeout?: number;
            tlsConfig?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemotewriteTlsconfig;
            url: string;
            writeRelabelConfigs?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemotewriteWriterelabelconfigs[];
        }

        export interface TidbMonitorSpecPrometheusRemotewriteBasicauth {
            password?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemotewriteBasicauthPassword;
            username?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemotewriteBasicauthUsername;
        }

        export interface TidbMonitorSpecPrometheusRemotewriteBasicauthPassword {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecPrometheusRemotewriteBasicauthUsername {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecPrometheusRemotewriteQueueconfig {
            batchSendDeadline?: number;
            capacity?: number;
            maxBackoff?: number;
            maxRetries?: number;
            maxSamplesPerSend?: number;
            maxShards?: number;
            minBackoff?: number;
        }

        export interface TidbMonitorSpecPrometheusRemotewriteTlsconfig {
            ca?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemotewriteTlsconfigCa;
            caFile?: string;
            cert?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemotewriteTlsconfigCert;
            certFile?: string;
            insecureSkipVerify?: boolean;
            keyFile?: string;
            keySecret?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemotewriteTlsconfigKeysecret;
            serverName?: string;
        }

        export interface TidbMonitorSpecPrometheusRemotewriteTlsconfigCa {
            configMap?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemotewriteTlsconfigCaConfigmap;
            secret?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemotewriteTlsconfigCaSecret;
        }

        export interface TidbMonitorSpecPrometheusRemotewriteTlsconfigCaConfigmap {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecPrometheusRemotewriteTlsconfigCaSecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecPrometheusRemotewriteTlsconfigCert {
            configMap?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemotewriteTlsconfigCertConfigmap;
            secret?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemotewriteTlsconfigCertSecret;
        }

        export interface TidbMonitorSpecPrometheusRemotewriteTlsconfigCertConfigmap {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecPrometheusRemotewriteTlsconfigCertSecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecPrometheusRemotewriteTlsconfigKeysecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecPrometheusRemotewriteWriterelabelconfigs {
            action?: string;
            modulus?: number;
            regex?: string;
            replacement?: string;
            separator?: string;
            sourceLabels?: string[];
            targetLabel?: string;
        }

        export interface TidbMonitorSpecPrometheusService {
            annotations?: {[key: string]: string};
            clusterIP?: string;
            labels?: {[key: string]: string};
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            port?: number;
            portName?: string;
            type?: string;
        }

        export interface TidbMonitorSpecPrometheusreloader {
            baseImage?: string;
            imagePullPolicy?: string;
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
            version?: string;
        }

        export interface TidbMonitorSpecReloader {
            baseImage?: string;
            imagePullPolicy?: string;
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
            service?: outputs.pingcap.v1alpha1.TidbMonitorSpecReloaderService;
            version?: string;
        }

        export interface TidbMonitorSpecReloaderService {
            annotations?: {[key: string]: string};
            clusterIP?: string;
            labels?: {[key: string]: string};
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            port?: number;
            portName?: string;
            type?: string;
        }

        export interface TidbMonitorSpecThanos {
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosAdditionalvolumemounts[];
            baseImage?: string;
            grpcServerTlsConfig?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosGrpcservertlsconfig;
            imagePullPolicy?: string;
            limits?: {[key: string]: number | string};
            listenLocal?: boolean;
            logFormat?: string;
            logLevel?: string;
            minTime?: string;
            objectStorageConfig?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosObjectstorageconfig;
            objectStorageConfigFile?: string;
            requests?: {[key: string]: number | string};
            routePrefix?: string;
            tracingConfig?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosTracingconfig;
            tracingConfigFile?: string;
            version?: string;
        }

        export interface TidbMonitorSpecThanosAdditionalvolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbMonitorSpecThanosGrpcservertlsconfig {
            ca?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosGrpcservertlsconfigCa;
            caFile?: string;
            cert?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosGrpcservertlsconfigCert;
            certFile?: string;
            insecureSkipVerify?: boolean;
            keyFile?: string;
            keySecret?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosGrpcservertlsconfigKeysecret;
            serverName?: string;
        }

        export interface TidbMonitorSpecThanosGrpcservertlsconfigCa {
            configMap?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosGrpcservertlsconfigCaConfigmap;
            secret?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosGrpcservertlsconfigCaSecret;
        }

        export interface TidbMonitorSpecThanosGrpcservertlsconfigCaConfigmap {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecThanosGrpcservertlsconfigCaSecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecThanosGrpcservertlsconfigCert {
            configMap?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosGrpcservertlsconfigCertConfigmap;
            secret?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosGrpcservertlsconfigCertSecret;
        }

        export interface TidbMonitorSpecThanosGrpcservertlsconfigCertConfigmap {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecThanosGrpcservertlsconfigCertSecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecThanosGrpcservertlsconfigKeysecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecThanosObjectstorageconfig {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecThanosTracingconfig {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbMonitorStatus {
            deploymentStorageStatus?: outputs.pingcap.v1alpha1.TidbMonitorStatusDeploymentstoragestatus;
            statefulSet?: outputs.pingcap.v1alpha1.TidbMonitorStatusStatefulset;
        }

        export interface TidbMonitorStatusDeploymentstoragestatus {
            pvName?: string;
        }

        export interface TidbMonitorStatusStatefulset {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.TidbMonitorStatusStatefulsetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface TidbMonitorStatusStatefulsetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbNGMonitoringSpec {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumemounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumes[];
            affinity?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinity;
            annotations?: {[key: string]: string};
            clusterDomain?: string;
            clusters: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecClusters[];
            configUpdateStrategy?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecDnsconfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecEnvfrom[];
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecImagepullsecrets[];
            initContainers?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainers[];
            labels?: {[key: string]: string};
            ngMonitoring: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoring;
            nodeSelector?: {[key: string]: string};
            paused?: boolean;
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecPodsecuritycontext;
            priorityClassName?: string;
            pvReclaimPolicy?: string;
            schedulerName?: string;
            statefulSetUpdateStrategy?: string;
            suspendAction?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecSuspendaction;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecTopologyspreadconstraints[];
            version?: string;
        }
        /**
         * tidbNGMonitoringSpecProvideDefaults sets the appropriate defaults for TidbNGMonitoringSpec
         */
        export function tidbNGMonitoringSpecProvideDefaults(val: TidbNGMonitoringSpec): TidbNGMonitoringSpec {
            return {
                ...val,
                ngMonitoring: outputs.pingcap.v1alpha1.tidbNGMonitoringSpecNgmonitoringProvideDefaults(val.ngMonitoring),
                pvReclaimPolicy: (val.pvReclaimPolicy) ?? "Retain",
            };
        }

        export interface TidbNGMonitoringSpecAdditionalcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersEnvValuefrom;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersEnvValuefromSecretkeyref;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersEnvfromSecretref;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersLifecyclePrestop;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersLifecyclePoststartTcpsocket;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersLifecyclePrestopTcpsocket;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbNGMonitoringSpecAdditionalcontainersPortsProvideDefaults sets the appropriate defaults for TidbNGMonitoringSpecAdditionalcontainersPorts
         */
        export function tidbNGMonitoringSpecAdditionalcontainersPortsProvideDefaults(val: TidbNGMonitoringSpecAdditionalcontainersPorts): TidbNGMonitoringSpecAdditionalcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersSecuritycontextWindowsoptions;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersStartupprobeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface TidbNGMonitoringSpecAdditionalcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesAwselasticblockstore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesAzuredisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesAzurefile;
            cephfs?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesConfigmap;
            csi?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesDownwardapi;
            emptyDir?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesEmptydir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesFlexvolume;
            flocker?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesGcepersistentdisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesGitrepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesHostpath;
            iscsi?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesPersistentvolumeclaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesPhotonpersistentdisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesPortworxvolume;
            projected?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesScaleio;
            secret?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesVspherevolume;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesAwselasticblockstore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesAzuredisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesAzurefile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesCephfsSecretref;
            user?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesCephfsSecretref {
            name?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesCinderSecretref;
            volumeID: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesCinderSecretref {
            name?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesConfigmap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesCsiNodepublishsecretref;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesCsiNodepublishsecretref {
            name?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesDownwardapi {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesDownwardapiItems[];
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesDownwardapiItemsResourcefieldref;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesEmptydir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesEphemeralVolumeclaimtemplate;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesEphemeralVolumeclaimtemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpec;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource;
            resources?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesFlexvolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesFlexvolumeSecretref;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesFlexvolumeSecretref {
            name?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesGcepersistentdisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesGitrepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesHostpath {
            path: string;
            type?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesIscsiSecretref;
            targetPortal: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesIscsiSecretref {
            name?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesPersistentvolumeclaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesPhotonpersistentdisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesPortworxvolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesProjectedSources[];
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesProjectedSourcesConfigmap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesProjectedSourcesDownwardapi;
            secret?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesProjectedSourcesServiceaccounttoken;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesProjectedSourcesConfigmap {
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesProjectedSourcesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesProjectedSourcesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesProjectedSourcesDownwardapi {
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesProjectedSourcesDownwardapiItems[];
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesProjectedSourcesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesProjectedSourcesServiceaccounttoken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesRbdSecretref;
            user?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesRbdSecretref {
            name?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesScaleio {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesScaleioSecretref;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesScaleioSecretref {
            name?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalvolumesStorageosSecretref;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesStorageosSecretref {
            name?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalvolumesVspherevolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbNGMonitoringSpecAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityNodeaffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodaffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodantiaffinity;
        }

        export interface TidbNGMonitoringSpecAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface TidbNGMonitoringSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface TidbNGMonitoringSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface TidbNGMonitoringSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface TidbNGMonitoringSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface TidbNGMonitoringSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbNGMonitoringSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbNGMonitoringSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbNGMonitoringSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbNGMonitoringSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbNGMonitoringSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbNGMonitoringSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbNGMonitoringSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbNGMonitoringSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecClusters {
            clusterDomain?: string;
            name: string;
            namespace?: string;
        }

        export interface TidbNGMonitoringSpecDnsconfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecDnsconfigOptions[];
            searches?: string[];
        }

        export interface TidbNGMonitoringSpecDnsconfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbNGMonitoringSpecEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecEnvValuefrom;
        }

        export interface TidbNGMonitoringSpecEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecEnvValuefromSecretkeyref;
        }

        export interface TidbNGMonitoringSpecEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecEnvfromSecretref;
        }

        export interface TidbNGMonitoringSpecEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecImagepullsecrets {
            name?: string;
        }

        export interface TidbNGMonitoringSpecInitcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface TidbNGMonitoringSpecInitcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersEnvValuefrom;
        }

        export interface TidbNGMonitoringSpecInitcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersEnvValuefromSecretkeyref;
        }

        export interface TidbNGMonitoringSpecInitcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecInitcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecInitcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecInitcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecInitcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersEnvfromSecretref;
        }

        export interface TidbNGMonitoringSpecInitcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecInitcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecInitcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersLifecyclePrestop;
        }

        export interface TidbNGMonitoringSpecInitcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersLifecyclePoststartTcpsocket;
        }

        export interface TidbNGMonitoringSpecInitcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecInitcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecInitcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecInitcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecInitcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersLifecyclePrestopTcpsocket;
        }

        export interface TidbNGMonitoringSpecInitcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecInitcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecInitcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecInitcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecInitcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecInitcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecInitcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecInitcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecInitcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecInitcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbNGMonitoringSpecInitcontainersPortsProvideDefaults sets the appropriate defaults for TidbNGMonitoringSpecInitcontainersPorts
         */
        export function tidbNGMonitoringSpecInitcontainersPortsProvideDefaults(val: TidbNGMonitoringSpecInitcontainersPorts): TidbNGMonitoringSpecInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbNGMonitoringSpecInitcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecInitcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecInitcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecInitcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecInitcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecInitcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbNGMonitoringSpecInitcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersSecuritycontextWindowsoptions;
        }

        export interface TidbNGMonitoringSpecInitcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbNGMonitoringSpecInitcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbNGMonitoringSpecInitcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbNGMonitoringSpecInitcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbNGMonitoringSpecInitcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecInitcontainersStartupprobeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecInitcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecInitcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecInitcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecInitcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface TidbNGMonitoringSpecInitcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoring {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumemounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumes[];
            affinity?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinity;
            annotations?: {[key: string]: string};
            baseImage?: string;
            config?: {[key: string]: any};
            configUpdateStrategy?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringDnsconfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringEnvfrom[];
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringImagepullsecrets[];
            initContainers?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainers[];
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringPodsecuritycontext;
            priorityClassName?: string;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            statefulSetUpdateStrategy?: string;
            storageClassName?: string;
            storageVolumes?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringStoragevolumes[];
            suspendAction?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringSuspendaction;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringTopologyspreadconstraints[];
            version?: string;
        }
        /**
         * tidbNGMonitoringSpecNgmonitoringProvideDefaults sets the appropriate defaults for TidbNGMonitoringSpecNgmonitoring
         */
        export function tidbNGMonitoringSpecNgmonitoringProvideDefaults(val: TidbNGMonitoringSpecNgmonitoring): TidbNGMonitoringSpecNgmonitoring {
            return {
                ...val,
                baseImage: (val.baseImage) ?? "pingcap/ng-monitoring",
            };
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersEnvValuefrom;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersEnvValuefromSecretkeyref;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersEnvfromSecretref;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePrestop;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePoststartTcpsocket;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePrestopTcpsocket;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbNGMonitoringSpecNgmonitoringAdditionalcontainersPortsProvideDefaults sets the appropriate defaults for TidbNGMonitoringSpecNgmonitoringAdditionalcontainersPorts
         */
        export function tidbNGMonitoringSpecNgmonitoringAdditionalcontainersPortsProvideDefaults(val: TidbNGMonitoringSpecNgmonitoringAdditionalcontainersPorts): TidbNGMonitoringSpecNgmonitoringAdditionalcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersSecuritycontextWindowsoptions;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersStartupprobeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesAwselasticblockstore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesAzuredisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesAzurefile;
            cephfs?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesConfigmap;
            csi?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesDownwardapi;
            emptyDir?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesEmptydir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesFlexvolume;
            flocker?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesGcepersistentdisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesGitrepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesHostpath;
            iscsi?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesPersistentvolumeclaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesPhotonpersistentdisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesPortworxvolume;
            projected?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesScaleio;
            secret?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesVspherevolume;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesAwselasticblockstore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesAzuredisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesAzurefile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesCephfsSecretref;
            user?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesCephfsSecretref {
            name?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesCinderSecretref;
            volumeID: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesCinderSecretref {
            name?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesConfigmap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesCsiNodepublishsecretref;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesCsiNodepublishsecretref {
            name?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesDownwardapi {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesDownwardapiItems[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesDownwardapiItemsResourcefieldref;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesEmptydir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesEphemeralVolumeclaimtemplate;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesEphemeralVolumeclaimtemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesEphemeralVolumeclaimtemplateSpec;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesEphemeralVolumeclaimtemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource;
            resources?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesEphemeralVolumeclaimtemplateSpecDatasource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesEphemeralVolumeclaimtemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesFlexvolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesFlexvolumeSecretref;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesFlexvolumeSecretref {
            name?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesGcepersistentdisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesGitrepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesHostpath {
            path: string;
            type?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesIscsiSecretref;
            targetPortal: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesIscsiSecretref {
            name?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesPersistentvolumeclaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesPhotonpersistentdisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesPortworxvolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSources[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSourcesConfigmap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSourcesDownwardapi;
            secret?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSourcesServiceaccounttoken;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSourcesConfigmap {
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSourcesConfigmapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSourcesConfigmapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSourcesDownwardapi {
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSourcesDownwardapiItems[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSourcesDownwardapiItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSourcesDownwardapiItemsFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSourcesDownwardapiItemsResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesProjectedSourcesServiceaccounttoken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesRbdSecretref;
            user?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesRbdSecretref {
            name?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesScaleio {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesScaleioSecretref;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesScaleioSecretref {
            name?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAdditionalvolumesStorageosSecretref;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesStorageosSecretref {
            name?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAdditionalvolumesVspherevolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityNodeaffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityPodaffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityPodantiaffinity;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityNodeaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityNodeaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityNodeaffinityRequiredduringschedulingignoredduringexecution;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityNodeaffinityPreferredduringschedulingignoredduringexecution {
            preference: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference;
            weight: number;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityNodeaffinityRequiredduringschedulingignoredduringexecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectorterms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityPodaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityPodaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityPodaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityPodaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityPodaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityPodantiaffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityPodantiaffinityPreferredduringschedulingignoredduringexecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm;
            weight: number;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinityterm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityPodantiaffinityRequiredduringschedulingignoredduringexecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecNgmonitoringAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringDnsconfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringDnsconfigOptions[];
            searches?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringDnsconfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringEnvValuefrom;
        }

        export interface TidbNGMonitoringSpecNgmonitoringEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringEnvValuefromSecretkeyref;
        }

        export interface TidbNGMonitoringSpecNgmonitoringEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringEnvfromSecretref;
        }

        export interface TidbNGMonitoringSpecNgmonitoringEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringImagepullsecrets {
            name?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersEnvfrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersLivenessprobe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersReadinessprobe;
            resources?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersSecuritycontext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersStartupprobe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersVolumedevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersVolumemounts[];
            workingDir?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersEnvValuefrom;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersEnvValuefrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersEnvValuefromConfigmapkeyref;
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersEnvValuefromFieldref;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersEnvValuefromResourcefieldref;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersEnvValuefromSecretkeyref;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersEnvValuefromConfigmapkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersEnvValuefromFieldref {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersEnvValuefromResourcefieldref {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersEnvValuefromSecretkeyref {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersEnvfrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersEnvfromConfigmapref;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersEnvfromSecretref;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersEnvfromConfigmapref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersEnvfromSecretref {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePoststart;
            preStop?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePrestop;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePoststart {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePoststartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePoststartHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePoststartTcpsocket;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePoststartExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePoststartHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePoststartHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePoststartTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePrestop {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePrestopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePrestopHttpget;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePrestopTcpsocket;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePrestopExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePrestopHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePrestopHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersLifecyclePrestopTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersLivenessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersLivenessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersLivenessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersLivenessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersLivenessprobeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersLivenessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersLivenessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersLivenessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersLivenessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbNGMonitoringSpecNgmonitoringInitcontainersPortsProvideDefaults sets the appropriate defaults for TidbNGMonitoringSpecNgmonitoringInitcontainersPorts
         */
        export function tidbNGMonitoringSpecNgmonitoringInitcontainersPortsProvideDefaults(val: TidbNGMonitoringSpecNgmonitoringInitcontainersPorts): TidbNGMonitoringSpecNgmonitoringInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersReadinessprobe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersReadinessprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersReadinessprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersReadinessprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersReadinessprobeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersReadinessprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersReadinessprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersReadinessprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersReadinessprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersSecuritycontext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersSecuritycontextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersSecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersSecuritycontextSeccompprofile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersSecuritycontextWindowsoptions;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersSecuritycontextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersSecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersSecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersSecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersStartupprobe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersStartupprobeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersStartupprobeHttpget;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersStartupprobeTcpsocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersStartupprobeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersStartupprobeHttpget {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringInitcontainersStartupprobeHttpgetHttpheaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersStartupprobeHttpgetHttpheaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersStartupprobeTcpsocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersVolumedevices {
            devicePath: string;
            name: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringInitcontainersVolumemounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringPodsecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringPodsecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringPodsecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringPodsecuritycontextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgmonitoringPodsecuritycontextWindowsoptions;
        }

        export interface TidbNGMonitoringSpecNgmonitoringPodsecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringPodsecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringPodsecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringPodsecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringStoragevolumes {
            mountPath?: string;
            name: string;
            storageClassName?: string;
            storageSize: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringSuspendaction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbNGMonitoringSpecNgmonitoringTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbNGMonitoringSpecNgmonitoringTopologyspreadconstraints {
            topologyKey: string;
        }

        export interface TidbNGMonitoringSpecPodsecuritycontext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecPodsecuritycontextSelinuxoptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecPodsecuritycontextSeccompprofile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecPodsecuritycontextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecPodsecuritycontextWindowsoptions;
        }

        export interface TidbNGMonitoringSpecPodsecuritycontextSeccompprofile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbNGMonitoringSpecPodsecuritycontextSelinuxoptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbNGMonitoringSpecPodsecuritycontextSysctls {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecPodsecuritycontextWindowsoptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbNGMonitoringSpecSuspendaction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbNGMonitoringSpecTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbNGMonitoringSpecTopologyspreadconstraints {
            topologyKey: string;
        }

        export interface TidbNGMonitoringStatus {
            ngMonitoring?: outputs.pingcap.v1alpha1.TidbNGMonitoringStatusNgmonitoring;
        }

        export interface TidbNGMonitoringStatusNgmonitoring {
            phase?: string;
            statefulSet?: outputs.pingcap.v1alpha1.TidbNGMonitoringStatusNgmonitoringStatefulset;
            synced?: boolean;
        }

        export interface TidbNGMonitoringStatusNgmonitoringStatefulset {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.TidbNGMonitoringStatusNgmonitoringStatefulsetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface TidbNGMonitoringStatusNgmonitoringStatefulsetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }
    }
}

export namespace policy {
    export namespace v1alpha1 {
        /**
         * Authorizes clients to communicate with Linkerd-proxied server resources.
         */
        export interface AuthorizationPolicySpec {
            /**
             * RequiredAuthenticationRefs enumerates a set of required authentications. ALL authentications must be satisfied for the authorization to apply. If any of the referred objects cannot be found, the authorization will be ignored.
             */
            requiredAuthenticationRefs: outputs.policy.v1alpha1.AuthorizationPolicySpecRequiredauthenticationrefs[];
            /**
             * TargetRef references a resource to which the authorization policy applies.
             */
            targetRef: outputs.policy.v1alpha1.AuthorizationPolicySpecTargetref;
        }

        export interface AuthorizationPolicySpecRequiredauthenticationrefs {
            /**
             * Group is the group of the referent. When empty, the Kubernetes core API group is inferred."
             */
            group?: string;
            /**
             * Kind is the kind of the referent.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Name is the name of the referent. When unspecified, this authentication refers to the local namespace.
             */
            namespace?: string;
        }

        /**
         * TargetRef references a resource to which the authorization policy applies.
         */
        export interface AuthorizationPolicySpecTargetref {
            /**
             * Group is the group of the referent. When empty, the Kubernetes core API group is inferred.
             */
            group?: string;
            /**
             * Kind is the kind of the referent.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * Spec defines the desired state of HTTPRoute.
         */
        export interface HTTPRouteSpec {
            /**
             * Hostnames defines a set of hostname that should match against the HTTP Host header to select a HTTPRoute to process the request. This matches the RFC 1123 definition of a hostname with 2 notable exceptions: 
             *  1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard    label must appear by itself as the first label. 
             *  If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example: 
             *  * A Listener with `test.example.com` as the hostname matches HTTPRoutes   that have either not specified any hostnames, or have specified at   least one of `test.example.com` or `*.example.com`. * A Listener with `*.example.com` as the hostname matches HTTPRoutes   that have either not specified any hostnames or have specified at least   one hostname that matches the Listener hostname. For example,   `*.example.com`, `test.example.com`, and `foo.test.example.com` would   all match. On the other hand, `example.com` and `test.example.net` would   not match. 
             *  Hostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`. 
             *  If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified `*.example.com`, and the HTTPRoute specified `test.example.com` and `test.example.net`, `test.example.net` must not be considered for a match. 
             *  If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of `False` in the corresponding RouteParentStatus. 
             *  Support: Core
             */
            hostnames?: string[];
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. 
             *  The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources such as one of the route kinds. 
             *  It is invalid to reference an identical parent more than once. It is valid to reference multiple distinct sections within the same parent resource, such as 2 Listeners within a Gateway. 
             *  It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged.
             */
            parentRefs?: outputs.policy.v1alpha1.HTTPRouteSpecParentrefs[];
            /**
             * Rules are a list of HTTP matchers, filters and actions.
             */
            rules?: outputs.policy.v1alpha1.HTTPRouteSpecRules[];
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface HTTPRouteSpecParentrefs {
            /**
             * Group is the group of the referent. 
             *  Support: Core
             */
            group?: string;
            /**
             * Kind is kind of the referent. 
             *  Support: Core (Gateway) Support: Custom (Other Resources)
             */
            kind?: string;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route. 
             *  Support: Core
             */
            namespace?: string;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: string;
        }
        /**
         * httprouteSpecParentrefsProvideDefaults sets the appropriate defaults for HTTPRouteSpecParentrefs
         */
        export function httprouteSpecParentrefsProvideDefaults(val: HTTPRouteSpecParentrefs): HTTPRouteSpecParentrefs {
            return {
                ...val,
                group: (val.group) ?? "policy.linkerd.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * HTTPRouteRule defines semantics for matching an HTTP request based on conditions (matches) and processing it (filters).
         */
        export interface HTTPRouteSpecRules {
            /**
             * Filters define the filters that are applied to requests that match this rule. 
             *  The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. 
             *  C"onformance-levels at this level are defined based on the type of filter": 
             *  - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across   implementations. 
             *  Specifying a core filter multiple times has unspecified or custom conformance. 
             *  All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In all cases where incompatible or unsupported filters are specified, implementations MUST add a warning condition to status. 
             *  Support: Core
             */
            filters?: outputs.policy.v1alpha1.HTTPRouteSpecRulesFilters[];
            /**
             * Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if **any** one of the matches is satisfied. 
             *  For example, take the following matches configuration: 
             *  ``` matches: - path:     value: "/foo"   headers:   - name: "version"     value: "v2" - path:     value: "/v2/foo" ``` 
             *  For a request to match against this rule, a request must satisfy EITHER of the two conditions: 
             *  - path prefixed with `/foo` AND contains the header `version: v2` - path prefix of `/v2/foo` 
             *  See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. 
             *  If no matches are specified, the default is a prefix path match on "/", which has the effect of matching every HTTP request. 
             *  Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize rules based on the following criteria, continuing on ties. Precedence must be given to the the Rule with the largest number of: 
             *  * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. * Characters in a matching path. * Header matches. * Query param matches. 
             *  If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: 
             *  * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by   "{namespace}/{name}". 
             *  If ties still exist within the Route that has been given precedence, matching precedence MUST be granted to the first matching rule meeting the above criteria. 
             *  When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.
             */
            matches?: outputs.policy.v1alpha1.HTTPRouteSpecRulesMatches[];
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the request or response lifecycle. HTTPRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesFilters {
            /**
             * RequestHeaderModifier defines a schema for a filter that modifies request headers. 
             *  Support: Core
             */
            requestHeaderModifier?: outputs.policy.v1alpha1.HTTPRouteSpecRulesFiltersRequestheadermodifier;
            /**
             * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. 
             *  Support: Core
             */
            requestRedirect?: outputs.policy.v1alpha1.HTTPRouteSpecRulesFiltersRequestredirect;
            /**
             * Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: 
             *  - Core: Filter types and their corresponding configuration defined by   "Support: Core" in this package, e.g. "RequestHeaderModifier". All   implementations must support core filters. 
             *
             *  
             */
            type: string;
        }
        /**
         * httprouteSpecRulesFiltersProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesFilters
         */
        export function httprouteSpecRulesFiltersProvideDefaults(val: HTTPRouteSpecRulesFilters): HTTPRouteSpecRulesFilters {
            return {
                ...val,
                requestRedirect: (val.requestRedirect ? outputs.policy.v1alpha1.httprouteSpecRulesFiltersRequestredirectProvideDefaults(val.requestRedirect) : undefined),
            };
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request headers. 
         *  Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestheadermodifier {
            /**
             * Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
             *  Input:   GET /foo HTTP/1.1   "my-header": foo 
             *  Config:   add:   - name: ""my-header"     value": "bar" 
             *  Output:   GET /foo HTTP/1.1   "my-header: foo   my-header": bar
             */
            add?: outputs.policy.v1alpha1.HTTPRouteSpecRulesFiltersRequestheadermodifierAdd[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are "case-insensitive (see https"://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
             *  Input:   GET /foo HTTP/1.1   my-header1: foo   my-header2: bar   my-header3: baz 
             *  Config:   remove: ["my-header1", "my-header3"] 
             *  Output:   GET /foo HTTP/1.1   my-header2: bar
             */
            remove?: string[];
            /**
             * Set overwrites the request with the given header (name, value) before the action. 
             *  Input:   GET /foo HTTP/1.1   "my-header": foo 
             *  Config:   set:   - name: ""my-header"     value": "bar" 
             *  Output:   GET /foo HTTP/1.1   "my-header": bar
             */
            set?: outputs.policy.v1alpha1.HTTPRouteSpecRulesFiltersRequestheadermodifierSet[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestheadermodifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestheadermodifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. 
         *  Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestredirect {
            /**
             * Hostname is the hostname to be used in the value of the `Location` header in the response. When empty, the hostname of the request is used. 
             *  Support: Core
             */
            hostname?: string;
            /**
             * Port is the port to be used in the value of the `Location` header in the response. When empty, port (if specified) of the request is used. 
             *  Support: Extended
             */
            port?: number;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used. 
             *  Support: Extended
             */
            scheme?: string;
            /**
             * StatusCode is the HTTP status code to be used in response. 
             *  Support: Core
             */
            statusCode?: number;
        }
        /**
         * httprouteSpecRulesFiltersRequestredirectProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesFiltersRequestredirect
         */
        export function httprouteSpecRulesFiltersRequestredirectProvideDefaults(val: HTTPRouteSpecRulesFiltersRequestredirect): HTTPRouteSpecRulesFiltersRequestredirect {
            return {
                ...val,
                statusCode: (val.statusCode) ?? 302,
            };
        }

        /**
         * HTTPRouteMatch defines the predicate used to match requests to a given action. Multiple match types are ANDed together, i.e. the match will evaluate to true only if all conditions are satisfied. 
         *  For example, the match below will match a HTTP request only if its path starts with `/foo` AND it contains the `version: v1` header: 
         *  ``` match:   path:     value: "/foo"   headers:   - name: "version"     value "v1" ```
         */
        export interface HTTPRouteSpecRulesMatches {
            /**
             * Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.
             */
            headers?: outputs.policy.v1alpha1.HTTPRouteSpecRulesMatchesHeaders[];
            /**
             * Method specifies HTTP method matcher. When specified, this route will be matched only if the request has the specified method. 
             *  Support: Extended
             */
            method?: string;
            /**
             * Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the "/" path is provided.
             */
            path?: outputs.policy.v1alpha1.HTTPRouteSpecRulesMatchesPath;
            /**
             * QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route.
             */
            queryParams?: outputs.policy.v1alpha1.HTTPRouteSpecRulesMatchesQueryparams[];
        }
        /**
         * httprouteSpecRulesMatchesProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesMatches
         */
        export function httprouteSpecRulesMatchesProvideDefaults(val: HTTPRouteSpecRulesMatches): HTTPRouteSpecRulesMatches {
            return {
                ...val,
                path: (val.path ? outputs.policy.v1alpha1.httprouteSpecRulesMatchesPathProvideDefaults(val.path) : undefined),
            };
        }

        /**
         * HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request headers.
         */
        export interface HTTPRouteSpecRulesMatchesHeaders {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent. 
             *  When a header is repeated in an HTTP request, it is "implementation-specific behavior as to how this is represented. Generally, proxies should follow the guidance from the RFC: https"://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding processing a repeated header, with special handling for "Set-Cookie".
             */
            name: string;
            /**
             * Type specifies how to match against the value of the header. 
             *  Support: Core (Exact) 
             *  Support: Custom (RegularExpression) 
             *  Since RegularExpression HeaderMatchType has custom conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
             */
            type?: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }
        /**
         * httprouteSpecRulesMatchesHeadersProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesMatchesHeaders
         */
        export function httprouteSpecRulesMatchesHeadersProvideDefaults(val: HTTPRouteSpecRulesMatchesHeaders): HTTPRouteSpecRulesMatchesHeaders {
            return {
                ...val,
                type: (val.type) ?? "Exact",
            };
        }

        /**
         * Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the "/" path is provided.
         */
        export interface HTTPRouteSpecRulesMatchesPath {
            /**
             * Type specifies how to match against the path Value. 
             *  Support: Core (Exact, PathPrefix) 
             *  Support: Custom (RegularExpression)
             */
            type?: string;
            /**
             * Value of the HTTP path to match against.
             */
            value?: string;
        }
        /**
         * httprouteSpecRulesMatchesPathProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesMatchesPath
         */
        export function httprouteSpecRulesMatchesPathProvideDefaults(val: HTTPRouteSpecRulesMatchesPath): HTTPRouteSpecRulesMatchesPath {
            return {
                ...val,
                type: (val.type) ?? "PathPrefix",
                value: (val.value) ?? "/",
            };
        }

        /**
         * HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP query parameters.
         */
        export interface HTTPRouteSpecRulesMatchesQueryparams {
            /**
             * Name is the name of the HTTP query param to be matched. This must be an exact string match. (See https://tools.ietf.org/html/rfc7230#section-2.7.3).
             */
            name: string;
            /**
             * Type specifies how to match against the value of the query parameter. 
             *  Support: Extended (Exact) 
             *  Support: Custom (RegularExpression) 
             *  Since RegularExpression QueryParamMatchType has custom conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
             */
            type?: string;
            /**
             * Value is the value of HTTP query param to be matched.
             */
            value: string;
        }
        /**
         * httprouteSpecRulesMatchesQueryparamsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesMatchesQueryparams
         */
        export function httprouteSpecRulesMatchesQueryparamsProvideDefaults(val: HTTPRouteSpecRulesMatchesQueryparams): HTTPRouteSpecRulesMatchesQueryparams {
            return {
                ...val,
                type: (val.type) ?? "Exact",
            };
        }

        /**
         * Status defines the current state of HTTPRoute.
         */
        export interface HTTPRouteStatus {
            /**
             * Parents is a list of parent resources (usually Gateways) that are associated with the route, and the status of the route with respect to each parent. When this route attaches to a parent, the controller that manages the parent must add an entry to this list when the controller first sees the route and should update the entry as appropriate when the route or gateway is modified. 
             *  Note that parent references that cannot be resolved by an implementation of this API will not be added to this list. Implementations of this API can only populate Route status for the Gateways/parent resources they are responsible for. 
             *  A maximum of 32 Gateways will be represented in this list. An empty list means the route has not been attached to any Gateway.
             */
            parents: outputs.policy.v1alpha1.HTTPRouteStatusParents[];
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an associated Parent.
         */
        export interface HTTPRouteStatusParents {
            /**
             * Conditions describes the status of the route with respect to the Gateway. Note that the route's availability is also subject to the Gateway's own status conditions and listener status. 
             *  If the Route's ParentRef specifies an existing Gateway that supports Routes of this kind AND that Gateway's controller has sufficient access, then that Gateway's controller MUST set the "Accepted" condition on the Route, to indicate whether the route has been accepted or rejected by the Gateway, and why. 
             *  A Route MUST be considered "Accepted" if at least one of the Route's rules is implemented by the Gateway. 
             *  There are a number of cases where the "Accepted" condition may not be set due to lack of controller visibility, that includes when: 
             *  * The Route refers to a non-existent parent. * The Route is of a type that the controller does not support. * The Route is in a namespace the the controller does not have access to.
             */
            conditions?: outputs.policy.v1alpha1.HTTPRouteStatusParentsConditions[];
            /**
             * ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
             *  Example: "example.net/gateway-controller". 
             *  The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
             *  Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
             */
            controllerName: string;
            /**
             * ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
             */
            parentRef: outputs.policy.v1alpha1.HTTPRouteStatusParentsParentref;
        }
        /**
         * httprouteStatusParentsProvideDefaults sets the appropriate defaults for HTTPRouteStatusParents
         */
        export function httprouteStatusParentsProvideDefaults(val: HTTPRouteStatusParents): HTTPRouteStatusParents {
            return {
                ...val,
                parentRef: outputs.policy.v1alpha1.httprouteStatusParentsParentrefProvideDefaults(val.parentRef),
            };
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *      // other fields }
         */
        export interface HTTPRouteStatusParentsConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: string;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
         */
        export interface HTTPRouteStatusParentsParentref {
            /**
             * Group is the group of the referent. 
             *  Support: Core
             */
            group?: string;
            /**
             * Kind is kind of the referent. 
             *  Support: Core (Gateway) Support: Custom (Other Resources)
             */
            kind?: string;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route. 
             *  Support: Core
             */
            namespace?: string;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: string;
        }
        /**
         * httprouteStatusParentsParentrefProvideDefaults sets the appropriate defaults for HTTPRouteStatusParentsParentref
         */
        export function httprouteStatusParentsParentrefProvideDefaults(val: HTTPRouteStatusParentsParentref): HTTPRouteStatusParentsParentref {
            return {
                ...val,
                group: (val.group) ?? "policy.linkerd.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * NetworkAuthentication defines a list of authenticated client networks to be referenced by an `AuthorizationPolicy`. If a client connection originates from ANY of the of the provided networks, the connection is considered authenticated.
         */
        export interface NetworkAuthenticationSpec {
            networks: outputs.policy.v1alpha1.NetworkAuthenticationSpecNetworks[];
        }

        export interface NetworkAuthenticationSpecNetworks {
            /**
             * The CIDR of the network to be authorized.
             */
            cidr: string;
            /**
             * A list of IP networks/addresses not to be included in the above `cidr`.
             */
            except?: string[];
        }

        /**
         * Authorizes clients to communicate with Linkerd-proxied servers.
         */
        export interface ServerAuthorizationSpec {
            /**
             * Describes clients authorized to access a server.
             */
            client: outputs.policy.v1alpha1.ServerAuthorizationSpecClient;
            /**
             * Identifies servers in the same namespace for which this authorization applies.
             * Only one of `name` or `selector` may be specified.
             */
            server: any;
        }

        /**
         * Describes clients authorized to access a server.
         */
        export interface ServerAuthorizationSpecClient {
            meshTLS?: outputs.policy.v1alpha1.ServerAuthorizationSpecClientMeshtls;
            /**
             * Limits the client IP addresses to which this authorization applies. If unset, the server chooses a default (typically, all IPs or the cluster's pod network).
             */
            networks?: outputs.policy.v1alpha1.ServerAuthorizationSpecClientNetworks[];
            /**
             * Authorizes unauthenticated clients to access a server.
             */
            unauthenticated?: boolean;
        }

        export interface ServerAuthorizationSpecClientMeshtls {
            /**
             * Authorizes clients with the provided proxy identity strings (as provided via MTLS)
             * The `*` prefix can be used to match all identities in a domain. An identity string of `*` indicates that all authentication clients are authorized.
             */
            identities?: string[];
            /**
             * Authorizes clients with the provided proxy identity service accounts (as provided via MTLS)
             */
            serviceAccounts?: outputs.policy.v1alpha1.ServerAuthorizationSpecClientMeshtlsServiceaccounts[];
            /**
             * Indicates that no client identity is required for communication.
             * This is mostly important for the identity controller, which must terminate TLS connections from clients that do not yet have a certificate.
             */
            unauthenticatedTLS?: boolean;
        }

        export interface ServerAuthorizationSpecClientMeshtlsServiceaccounts {
            /**
             * The ServiceAccount's name.
             */
            name: string;
            /**
             * The ServiceAccount's namespace. If unset, the authorization's namespace is used.
             */
            namespace?: string;
        }

        export interface ServerAuthorizationSpecClientNetworks {
            cidr: string;
            except?: string[];
        }

        export interface ServerSpec {
            /**
             * Selects pods in the same namespace.
             */
            podSelector: any;
            /**
             * A port name or number. Must exist in a pod spec.
             */
            port: number | string;
            /**
             * Configures protocol discovery for inbound connections.
             * Supersedes the `config.linkerd.io/opaque-ports` annotation.
             */
            proxyProtocol?: string;
        }
        /**
         * serverSpecProvideDefaults sets the appropriate defaults for ServerSpec
         */
        export function serverSpecProvideDefaults(val: ServerSpec): ServerSpec {
            return {
                ...val,
                proxyProtocol: (val.proxyProtocol) ?? "unknown",
            };
        }

    }

    export namespace v1beta1 {
        /**
         * Spec defines the desired state of HTTPRoute.
         */
        export interface HTTPRouteSpec {
            /**
             * Hostnames defines a set of hostname that should match against the HTTP Host header to select a HTTPRoute to process the request. This matches the RFC 1123 definition of a hostname with 2 notable exceptions: 
             *  1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard    label must appear by itself as the first label. 
             *  If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example: 
             *  * A Listener with `test.example.com` as the hostname matches HTTPRoutes   that have either not specified any hostnames, or have specified at   least one of `test.example.com` or `*.example.com`. * A Listener with `*.example.com` as the hostname matches HTTPRoutes   that have either not specified any hostnames or have specified at least   one hostname that matches the Listener hostname. For example,   `*.example.com`, `test.example.com`, and `foo.test.example.com` would   all match. On the other hand, `example.com` and `test.example.net` would   not match. 
             *  Hostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`. 
             *  If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified `*.example.com`, and the HTTPRoute specified `test.example.com` and `test.example.net`, `test.example.net` must not be considered for a match. 
             *  If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of `False` in the corresponding RouteParentStatus. 
             *  Support: Core
             */
            hostnames?: string[];
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. 
             *  The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources such as one of the route kinds. 
             *  It is invalid to reference an identical parent more than once. It is valid to reference multiple distinct sections within the same parent resource, such as 2 Listeners within a Gateway. 
             *  It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged.
             */
            parentRefs?: outputs.policy.v1beta1.HTTPRouteSpecParentrefs[];
            /**
             * Rules are a list of HTTP matchers, filters and actions.
             */
            rules?: outputs.policy.v1beta1.HTTPRouteSpecRules[];
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface HTTPRouteSpecParentrefs {
            /**
             * Group is the group of the referent. 
             *  Support: Core
             */
            group?: string;
            /**
             * Kind is kind of the referent. 
             *  Support: Core (Gateway) Support: Custom (Other Resources)
             */
            kind?: string;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route. 
             *  Support: Core
             */
            namespace?: string;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: string;
        }
        /**
         * httprouteSpecParentrefsProvideDefaults sets the appropriate defaults for HTTPRouteSpecParentrefs
         */
        export function httprouteSpecParentrefsProvideDefaults(val: HTTPRouteSpecParentrefs): HTTPRouteSpecParentrefs {
            return {
                ...val,
                group: (val.group) ?? "policy.linkerd.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * HTTPRouteRule defines semantics for matching an HTTP request based on conditions (matches) and processing it (filters).
         */
        export interface HTTPRouteSpecRules {
            /**
             * Filters define the filters that are applied to requests that match this rule. 
             *  The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. 
             *  C"onformance-levels at this level are defined based on the type of filter": 
             *  - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across   implementations. 
             *  Specifying a core filter multiple times has unspecified or custom conformance. 
             *  All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In all cases where incompatible or unsupported filters are specified, implementations MUST add a warning condition to status. 
             *  Support: Core
             */
            filters?: outputs.policy.v1beta1.HTTPRouteSpecRulesFilters[];
            /**
             * Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if **any** one of the matches is satisfied. 
             *  For example, take the following matches configuration: 
             *  ``` matches: - path:     value: "/foo"   headers:   - name: "version"     value: "v2" - path:     value: "/v2/foo" ``` 
             *  For a request to match against this rule, a request must satisfy EITHER of the two conditions: 
             *  - path prefixed with `/foo` AND contains the header `version: v2` - path prefix of `/v2/foo` 
             *  See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. 
             *  If no matches are specified, the default is a prefix path match on "/", which has the effect of matching every HTTP request. 
             *  Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize rules based on the following criteria, continuing on ties. Precedence must be given to the the Rule with the largest number of: 
             *  * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. * Characters in a matching path. * Header matches. * Query param matches. 
             *  If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: 
             *  * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by   "{namespace}/{name}". 
             *  If ties still exist within the Route that has been given precedence, matching precedence MUST be granted to the first matching rule meeting the above criteria. 
             *  When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.
             */
            matches?: outputs.policy.v1beta1.HTTPRouteSpecRulesMatches[];
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the request or response lifecycle. HTTPRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesFilters {
            /**
             * RequestHeaderModifier defines a schema for a filter that modifies request headers. 
             *  Support: Core
             */
            requestHeaderModifier?: outputs.policy.v1beta1.HTTPRouteSpecRulesFiltersRequestheadermodifier;
            /**
             * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. 
             *  Support: Core
             */
            requestRedirect?: outputs.policy.v1beta1.HTTPRouteSpecRulesFiltersRequestredirect;
            /**
             * Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: 
             *  - Core: Filter types and their corresponding configuration defined by   "Support: Core" in this package, e.g. "RequestHeaderModifier".
             */
            type: string;
        }
        /**
         * httprouteSpecRulesFiltersProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesFilters
         */
        export function httprouteSpecRulesFiltersProvideDefaults(val: HTTPRouteSpecRulesFilters): HTTPRouteSpecRulesFilters {
            return {
                ...val,
                requestRedirect: (val.requestRedirect ? outputs.policy.v1beta1.httprouteSpecRulesFiltersRequestredirectProvideDefaults(val.requestRedirect) : undefined),
            };
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request headers. 
         *  Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestheadermodifier {
            /**
             * Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
             *  Input:   GET /foo HTTP/1.1   "my-header": foo 
             *  Config:   add:   - name: ""my-header"     value": "bar" 
             *  Output:   GET /foo HTTP/1.1   "my-header: foo   my-header": bar
             */
            add?: outputs.policy.v1beta1.HTTPRouteSpecRulesFiltersRequestheadermodifierAdd[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are "case-insensitive (see https"://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
             *  Input:   GET /foo HTTP/1.1   my-header1: foo   my-header2: bar   my-header3: baz 
             *  Config:   remove: ["my-header1", "my-header3"] 
             *  Output:   GET /foo HTTP/1.1   my-header2: bar
             */
            remove?: string[];
            /**
             * Set overwrites the request with the given header (name, value) before the action. 
             *  Input:   GET /foo HTTP/1.1   "my-header": foo 
             *  Config:   set:   - name: ""my-header"     value": "bar" 
             *  Output:   GET /foo HTTP/1.1   "my-header": bar
             */
            set?: outputs.policy.v1beta1.HTTPRouteSpecRulesFiltersRequestheadermodifierSet[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestheadermodifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestheadermodifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. 
         *  Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestredirect {
            /**
             * Hostname is the hostname to be used in the value of the `Location` header in the response. When empty, the hostname of the request is used. 
             *  Support: Core
             */
            hostname?: string;
            /**
             * Port is the port to be used in the value of the `Location` header in the response. When empty, port (if specified) of the request is used. 
             *  Support: Extended
             */
            port?: number;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used. 
             *  Support: Extended
             */
            scheme?: string;
            /**
             * StatusCode is the HTTP status code to be used in response. 
             *  Support: Core
             */
            statusCode?: number;
        }
        /**
         * httprouteSpecRulesFiltersRequestredirectProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesFiltersRequestredirect
         */
        export function httprouteSpecRulesFiltersRequestredirectProvideDefaults(val: HTTPRouteSpecRulesFiltersRequestredirect): HTTPRouteSpecRulesFiltersRequestredirect {
            return {
                ...val,
                statusCode: (val.statusCode) ?? 302,
            };
        }

        /**
         * HTTPRouteMatch defines the predicate used to match requests to a given action. Multiple match types are ANDed together, i.e. the match will evaluate to true only if all conditions are satisfied. 
         *  For example, the match below will match a HTTP request only if its path starts with `/foo` AND it contains the `version: v1` header: 
         *  ``` match:   path:     value: "/foo"   headers:   - name: "version"     value "v1" ```
         */
        export interface HTTPRouteSpecRulesMatches {
            /**
             * Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.
             */
            headers?: outputs.policy.v1beta1.HTTPRouteSpecRulesMatchesHeaders[];
            /**
             * Method specifies HTTP method matcher. When specified, this route will be matched only if the request has the specified method. 
             *  Support: Extended
             */
            method?: string;
            /**
             * Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the "/" path is provided.
             */
            path?: outputs.policy.v1beta1.HTTPRouteSpecRulesMatchesPath;
            /**
             * QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route.
             */
            queryParams?: outputs.policy.v1beta1.HTTPRouteSpecRulesMatchesQueryparams[];
        }
        /**
         * httprouteSpecRulesMatchesProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesMatches
         */
        export function httprouteSpecRulesMatchesProvideDefaults(val: HTTPRouteSpecRulesMatches): HTTPRouteSpecRulesMatches {
            return {
                ...val,
                path: (val.path ? outputs.policy.v1beta1.httprouteSpecRulesMatchesPathProvideDefaults(val.path) : undefined),
            };
        }

        /**
         * HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request headers.
         */
        export interface HTTPRouteSpecRulesMatchesHeaders {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent. 
             *  When a header is repeated in an HTTP request, it is "implementation-specific behavior as to how this is represented. Generally, proxies should follow the guidance from the RFC: https"://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding processing a repeated header, with special handling for "Set-Cookie".
             */
            name: string;
            /**
             * Type specifies how to match against the value of the header. 
             *  Support: Core (Exact) 
             *  Support: Custom (RegularExpression) 
             *  Since RegularExpression HeaderMatchType has custom conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
             */
            type?: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }
        /**
         * httprouteSpecRulesMatchesHeadersProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesMatchesHeaders
         */
        export function httprouteSpecRulesMatchesHeadersProvideDefaults(val: HTTPRouteSpecRulesMatchesHeaders): HTTPRouteSpecRulesMatchesHeaders {
            return {
                ...val,
                type: (val.type) ?? "Exact",
            };
        }

        /**
         * Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the "/" path is provided.
         */
        export interface HTTPRouteSpecRulesMatchesPath {
            /**
             * Type specifies how to match against the path Value. 
             *  Support: Core (Exact, PathPrefix) 
             *  Support: Custom (RegularExpression)
             */
            type?: string;
            /**
             * Value of the HTTP path to match against.
             */
            value?: string;
        }
        /**
         * httprouteSpecRulesMatchesPathProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesMatchesPath
         */
        export function httprouteSpecRulesMatchesPathProvideDefaults(val: HTTPRouteSpecRulesMatchesPath): HTTPRouteSpecRulesMatchesPath {
            return {
                ...val,
                type: (val.type) ?? "PathPrefix",
                value: (val.value) ?? "/",
            };
        }

        /**
         * HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP query parameters.
         */
        export interface HTTPRouteSpecRulesMatchesQueryparams {
            /**
             * Name is the name of the HTTP query param to be matched. This must be an exact string match. (See https://tools.ietf.org/html/rfc7230#section-2.7.3).
             */
            name: string;
            /**
             * Type specifies how to match against the value of the query parameter. 
             *  Support: Extended (Exact) 
             *  Support: Custom (RegularExpression) 
             *  Since RegularExpression QueryParamMatchType has custom conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
             */
            type?: string;
            /**
             * Value is the value of HTTP query param to be matched.
             */
            value: string;
        }
        /**
         * httprouteSpecRulesMatchesQueryparamsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesMatchesQueryparams
         */
        export function httprouteSpecRulesMatchesQueryparamsProvideDefaults(val: HTTPRouteSpecRulesMatchesQueryparams): HTTPRouteSpecRulesMatchesQueryparams {
            return {
                ...val,
                type: (val.type) ?? "Exact",
            };
        }

        /**
         * Status defines the current state of HTTPRoute.
         */
        export interface HTTPRouteStatus {
            /**
             * Parents is a list of parent resources (usually Gateways) that are associated with the route, and the status of the route with respect to each parent. When this route attaches to a parent, the controller that manages the parent must add an entry to this list when the controller first sees the route and should update the entry as appropriate when the route or gateway is modified. 
             *  Note that parent references that cannot be resolved by an implementation of this API will not be added to this list. Implementations of this API can only populate Route status for the Gateways/parent resources they are responsible for. 
             *  A maximum of 32 Gateways will be represented in this list. An empty list means the route has not been attached to any Gateway.
             */
            parents: outputs.policy.v1beta1.HTTPRouteStatusParents[];
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an associated Parent.
         */
        export interface HTTPRouteStatusParents {
            /**
             * Conditions describes the status of the route with respect to the Gateway. Note that the route's availability is also subject to the Gateway's own status conditions and listener status. 
             *  If the Route's ParentRef specifies an existing Gateway that supports Routes of this kind AND that Gateway's controller has sufficient access, then that Gateway's controller MUST set the "Accepted" condition on the Route, to indicate whether the route has been accepted or rejected by the Gateway, and why. 
             *  A Route MUST be considered "Accepted" if at least one of the Route's rules is implemented by the Gateway. 
             *  There are a number of cases where the "Accepted" condition may not be set due to lack of controller visibility, that includes when: 
             *  * The Route refers to a non-existent parent. * The Route is of a type that the controller does not support. * The Route is in a namespace the the controller does not have access to.
             */
            conditions?: outputs.policy.v1beta1.HTTPRouteStatusParentsConditions[];
            /**
             * ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
             *  Example: "example.net/gateway-controller". 
             *  The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
             *  Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
             */
            controllerName: string;
            /**
             * ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
             */
            parentRef: outputs.policy.v1beta1.HTTPRouteStatusParentsParentref;
        }
        /**
         * httprouteStatusParentsProvideDefaults sets the appropriate defaults for HTTPRouteStatusParents
         */
        export function httprouteStatusParentsProvideDefaults(val: HTTPRouteStatusParents): HTTPRouteStatusParents {
            return {
                ...val,
                parentRef: outputs.policy.v1beta1.httprouteStatusParentsParentrefProvideDefaults(val.parentRef),
            };
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *      // other fields }
         */
        export interface HTTPRouteStatusParentsConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: string;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
         */
        export interface HTTPRouteStatusParentsParentref {
            /**
             * Group is the group of the referent. 
             *  Support: Core
             */
            group?: string;
            /**
             * Kind is kind of the referent. 
             *  Support: Core (Gateway) Support: Custom (Other Resources)
             */
            kind?: string;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route. 
             *  Support: Core
             */
            namespace?: string;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: string;
        }
        /**
         * httprouteStatusParentsParentrefProvideDefaults sets the appropriate defaults for HTTPRouteStatusParentsParentref
         */
        export function httprouteStatusParentsParentrefProvideDefaults(val: HTTPRouteStatusParentsParentref): HTTPRouteStatusParentsParentref {
            return {
                ...val,
                group: (val.group) ?? "policy.linkerd.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * Authorizes clients to communicate with Linkerd-proxied servers.
         */
        export interface ServerAuthorizationSpec {
            /**
             * Describes clients authorized to access a server.
             */
            client: outputs.policy.v1beta1.ServerAuthorizationSpecClient;
            /**
             * Identifies servers in the same namespace for which this authorization applies.
             * Only one of `name` or `selector` may be specified.
             */
            server: any;
        }

        /**
         * Describes clients authorized to access a server.
         */
        export interface ServerAuthorizationSpecClient {
            meshTLS?: outputs.policy.v1beta1.ServerAuthorizationSpecClientMeshtls;
            /**
             * Limits the client IP addresses to which this authorization applies. If unset, the server chooses a default (typically, all IPs or the cluster's pod network).
             */
            networks?: outputs.policy.v1beta1.ServerAuthorizationSpecClientNetworks[];
            /**
             * Authorizes unauthenticated clients to access a server.
             */
            unauthenticated?: boolean;
        }

        export interface ServerAuthorizationSpecClientMeshtls {
            /**
             * Authorizes clients with the provided proxy identity strings (as provided via MTLS)
             * The `*` prefix can be used to match all identities in a domain. An identity string of `*` indicates that all authentication clients are authorized.
             */
            identities?: string[];
            /**
             * Authorizes clients with the provided proxy identity service accounts (as provided via MTLS)
             */
            serviceAccounts?: outputs.policy.v1beta1.ServerAuthorizationSpecClientMeshtlsServiceaccounts[];
            /**
             * Indicates that no client identity is required for communication.
             * This is mostly important for the identity controller, which must terminate TLS connections from clients that do not yet have a certificate.
             */
            unauthenticatedTLS?: boolean;
        }

        export interface ServerAuthorizationSpecClientMeshtlsServiceaccounts {
            /**
             * The ServiceAccount's name.
             */
            name: string;
            /**
             * The ServiceAccount's namespace. If unset, the authorization's namespace is used.
             */
            namespace?: string;
        }

        export interface ServerAuthorizationSpecClientNetworks {
            cidr: string;
            except?: string[];
        }

        export interface ServerSpec {
            /**
             * Selects pods in the same namespace.
             * The result of matchLabels and matchExpressions are ANDed. Selects all if empty.
             */
            podSelector: outputs.policy.v1beta1.ServerSpecPodselector;
            /**
             * A port name or number. Must exist in a pod spec.
             */
            port: number | string;
            /**
             * Configures protocol discovery for inbound connections.
             * Supersedes the `config.linkerd.io/opaque-ports` annotation.
             */
            proxyProtocol?: string;
        }
        /**
         * serverSpecProvideDefaults sets the appropriate defaults for ServerSpec
         */
        export function serverSpecProvideDefaults(val: ServerSpec): ServerSpec {
            return {
                ...val,
                proxyProtocol: (val.proxyProtocol) ?? "unknown",
            };
        }

        /**
         * Selects pods in the same namespace.
         * The result of matchLabels and matchExpressions are ANDed. Selects all if empty.
         */
        export interface ServerSpecPodselector {
            matchExpressions?: outputs.policy.v1beta1.ServerSpecPodselectorMatchexpressions[];
            matchLabels?: {[key: string]: any};
        }

        export interface ServerSpecPodselectorMatchexpressions {
            key: string;
            operator: string;
            values?: string[];
        }
    }
}

export namespace trust {
    export namespace v1alpha1 {
        /**
         * Desired state of the Bundle resource.
         */
        export interface BundleSpec {
            /**
             * Sources is a set of references to data whose data will sync to the target.
             */
            sources: outputs.trust.v1alpha1.BundleSpecSources[];
            /**
             * Target is the target location in all namespaces to sync source data to.
             */
            target: outputs.trust.v1alpha1.BundleSpecTarget;
        }

        /**
         * BundleSource is the set of sources whose data will be appended and synced to the BundleTarget in all Namespaces.
         */
        export interface BundleSpecSources {
            /**
             * ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.
             */
            configMap?: outputs.trust.v1alpha1.BundleSpecSourcesConfigmap;
            /**
             * InLine is a simple string to append as the source data.
             */
            inLine?: string;
            /**
             * Secret is a reference to a Secrets's `data` key, in the trust Namespace.
             */
            secret?: outputs.trust.v1alpha1.BundleSpecSourcesSecret;
        }

        /**
         * ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.
         */
        export interface BundleSpecSourcesConfigmap {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: string;
            /**
             * Name is the name of the source object in the trust Namespace.
             */
            name: string;
        }

        /**
         * Secret is a reference to a Secrets's `data` key, in the trust Namespace.
         */
        export interface BundleSpecSourcesSecret {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: string;
            /**
             * Name is the name of the source object in the trust Namespace.
             */
            name: string;
        }

        /**
         * Target is the target location in all namespaces to sync source data to.
         */
        export interface BundleSpecTarget {
            /**
             * ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
             */
            configMap?: outputs.trust.v1alpha1.BundleSpecTargetConfigmap;
            /**
             * NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
             */
            namespaceSelector?: outputs.trust.v1alpha1.BundleSpecTargetNamespaceselector;
        }

        /**
         * ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
         */
        export interface BundleSpecTargetConfigmap {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: string;
        }

        /**
         * NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
         */
        export interface BundleSpecTargetNamespaceselector {
            /**
             * MatchLabels matches on the set of labels that must be present on a Namespace for the Bundle target to be synced there.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * Status of the Bundle. This is set and managed automatically.
         */
        export interface BundleStatus {
            /**
             * List of status conditions to indicate the status of the Bundle. Known condition types are `Bundle`.
             */
            conditions?: outputs.trust.v1alpha1.BundleStatusConditions[];
            /**
             * Target is the current Target that the Bundle is attempting or has completed syncing the source data to.
             */
            target?: outputs.trust.v1alpha1.BundleStatusTarget;
        }

        /**
         * BundleCondition contains condition information for a Bundle.
         */
        export interface BundleStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: string;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: string;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Bundle.
             */
            observedGeneration?: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of ('True', 'False', 'Unknown').
             */
            status: string;
            /**
             * Type of the condition, known values are (`Synced`).
             */
            type: string;
        }

        /**
         * Target is the current Target that the Bundle is attempting or has completed syncing the source data to.
         */
        export interface BundleStatusTarget {
            /**
             * ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
             */
            configMap?: outputs.trust.v1alpha1.BundleStatusTargetConfigmap;
            /**
             * NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
             */
            namespaceSelector?: outputs.trust.v1alpha1.BundleStatusTargetNamespaceselector;
        }

        /**
         * ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
         */
        export interface BundleStatusTargetConfigmap {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: string;
        }

        /**
         * NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
         */
        export interface BundleStatusTargetNamespaceselector {
            /**
             * MatchLabels matches on the set of labels that must be present on a Namespace for the Bundle target to be synced there.
             */
            matchLabels?: {[key: string]: string};
        }

    }
}

export namespace velero {
    export namespace v1 {
        /**
         * BackupSpec defines the specification for a Velero backup.
         */
        export interface BackupSpec {
            /**
             * CSISnapshotTimeout specifies the time used to wait for CSI VolumeSnapshot status turns to ReadyToUse during creation, before returning error as timeout. The default value is 10 minute.
             */
            csiSnapshotTimeout?: string;
            /**
             * DefaultVolumesToRestic specifies whether restic should be used to take a backup of all pod volumes by default.
             */
            defaultVolumesToRestic?: boolean;
            /**
             * ExcludedNamespaces contains a list of namespaces that are not included in the backup.
             */
            excludedNamespaces?: string[];
            /**
             * ExcludedResources is a slice of resource names that are not included in the backup.
             */
            excludedResources?: string[];
            /**
             * Hooks represent custom behaviors that should be executed at different phases of the backup.
             */
            hooks?: outputs.velero.v1.BackupSpecHooks;
            /**
             * IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup.
             */
            includeClusterResources?: boolean;
            /**
             * IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.
             */
            includedNamespaces?: string[];
            /**
             * IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included.
             */
            includedResources?: string[];
            /**
             * LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
             */
            labelSelector?: outputs.velero.v1.BackupSpecLabelselector;
            metadata?: outputs.velero.v1.BackupSpecMetadata;
            /**
             * OrLabelSelectors is list of metav1.LabelSelector to filter with when adding individual objects to the backup. If multiple provided they will be joined by the OR operator. LabelSelector as well as OrLabelSelectors cannot co-exist in backup request, only one of them can be used.
             */
            orLabelSelectors?: outputs.velero.v1.BackupSpecOrlabelselectors[];
            /**
             * OrderedResources specifies the backup order of resources of specific Kind. The map key is the Kind name and value is a list of resource names separated by commas. Each resource name has format "namespace/resourcename".  For cluster resources, simply use "resourcename".
             */
            orderedResources?: {[key: string]: string};
            /**
             * SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup.
             */
            snapshotVolumes?: boolean;
            /**
             * StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.
             */
            storageLocation?: string;
            /**
             * TTL is a time.Duration-parseable string describing how long the Backup should be retained for.
             */
            ttl?: string;
            /**
             * VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.
             */
            volumeSnapshotLocations?: string[];
        }

        /**
         * Hooks represent custom behaviors that should be executed at different phases of the backup.
         */
        export interface BackupSpecHooks {
            /**
             * Resources are hooks that should be executed when backing up individual instances of a resource.
             */
            resources?: outputs.velero.v1.BackupSpecHooksResources[];
        }

        /**
         * BackupResourceHookSpec defines one or more BackupResourceHooks that should be executed based on the rules defined for namespaces, resources, and label selector.
         */
        export interface BackupSpecHooksResources {
            /**
             * ExcludedNamespaces specifies the namespaces to which this hook spec does not apply.
             */
            excludedNamespaces?: string[];
            /**
             * ExcludedResources specifies the resources to which this hook spec does not apply.
             */
            excludedResources?: string[];
            /**
             * IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies to all namespaces.
             */
            includedNamespaces?: string[];
            /**
             * IncludedResources specifies the resources to which this hook spec applies. If empty, it applies to all resources.
             */
            includedResources?: string[];
            /**
             * LabelSelector, if specified, filters the resources to which this hook spec applies.
             */
            labelSelector?: outputs.velero.v1.BackupSpecHooksResourcesLabelselector;
            /**
             * Name is the name of this hook.
             */
            name: string;
            /**
             * PostHooks is a list of BackupResourceHooks to execute after storing the item in the backup. These are executed after all "additional items" from item actions are processed.
             */
            post?: outputs.velero.v1.BackupSpecHooksResourcesPost[];
            /**
             * PreHooks is a list of BackupResourceHooks to execute prior to storing the item in the backup. These are executed before any "additional items" from item actions are processed.
             */
            pre?: outputs.velero.v1.BackupSpecHooksResourcesPre[];
        }

        /**
         * LabelSelector, if specified, filters the resources to which this hook spec applies.
         */
        export interface BackupSpecHooksResourcesLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.velero.v1.BackupSpecHooksResourcesLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface BackupSpecHooksResourcesLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * BackupResourceHook defines a hook for a resource.
         */
        export interface BackupSpecHooksResourcesPost {
            /**
             * Exec defines an exec hook.
             */
            exec: outputs.velero.v1.BackupSpecHooksResourcesPostExec;
        }

        /**
         * Exec defines an exec hook.
         */
        export interface BackupSpecHooksResourcesPostExec {
            /**
             * Command is the command and arguments to execute.
             */
            command: string[];
            /**
             * Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
             */
            container?: string;
            /**
             * OnError specifies how Velero should behave if it encounters an error executing this hook.
             */
            onError?: string;
            /**
             * Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
             */
            timeout?: string;
        }

        /**
         * BackupResourceHook defines a hook for a resource.
         */
        export interface BackupSpecHooksResourcesPre {
            /**
             * Exec defines an exec hook.
             */
            exec: outputs.velero.v1.BackupSpecHooksResourcesPreExec;
        }

        /**
         * Exec defines an exec hook.
         */
        export interface BackupSpecHooksResourcesPreExec {
            /**
             * Command is the command and arguments to execute.
             */
            command: string[];
            /**
             * Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
             */
            container?: string;
            /**
             * OnError specifies how Velero should behave if it encounters an error executing this hook.
             */
            onError?: string;
            /**
             * Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
             */
            timeout?: string;
        }

        /**
         * LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
         */
        export interface BackupSpecLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.velero.v1.BackupSpecLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface BackupSpecLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        export interface BackupSpecMetadata {
            labels?: {[key: string]: string};
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface BackupSpecOrlabelselectors {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.velero.v1.BackupSpecOrlabelselectorsMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface BackupSpecOrlabelselectorsMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * BackupStatus captures the current status of a Velero backup.
         */
        export interface BackupStatus {
            /**
             * CompletionTimestamp records the time a backup was completed. Completion time is recorded even on failed backups. Completion time is recorded before uploading the backup object. The server's time is used for CompletionTimestamps
             */
            completionTimestamp?: string;
            /**
             * CSIVolumeSnapshotsAttempted is the total number of attempted CSI VolumeSnapshots for this backup.
             */
            csiVolumeSnapshotsAttempted?: number;
            /**
             * CSIVolumeSnapshotsCompleted is the total number of successfully completed CSI VolumeSnapshots for this backup.
             */
            csiVolumeSnapshotsCompleted?: number;
            /**
             * Errors is a count of all error messages that were generated during execution of the backup.  The actual errors are in the backup's log file in object storage.
             */
            errors?: number;
            /**
             * Expiration is when this Backup is eligible for garbage-collection.
             */
            expiration?: string;
            /**
             * FailureReason is an error that caused the entire backup to fail.
             */
            failureReason?: string;
            /**
             * FormatVersion is the backup format version, including major, minor, and patch version.
             */
            formatVersion?: string;
            /**
             * Phase is the current state of the Backup.
             */
            phase?: string;
            /**
             * Progress contains information about the backup's execution progress. Note that this information is best-effort only -- if Velero fails to update it during a backup for any reason, it may be inaccurate/stale.
             */
            progress?: outputs.velero.v1.BackupStatusProgress;
            /**
             * StartTimestamp records the time a backup was started. Separate from CreationTimestamp, since that value changes on restores. The server's time is used for StartTimestamps
             */
            startTimestamp?: string;
            /**
             * ValidationErrors is a slice of all validation errors (if applicable).
             */
            validationErrors?: string[];
            /**
             * Version is the backup format major version. Deprecated: Please see FormatVersion
             */
            version?: number;
            /**
             * VolumeSnapshotsAttempted is the total number of attempted volume snapshots for this backup.
             */
            volumeSnapshotsAttempted?: number;
            /**
             * VolumeSnapshotsCompleted is the total number of successfully completed volume snapshots for this backup.
             */
            volumeSnapshotsCompleted?: number;
            /**
             * Warnings is a count of all warning messages that were generated during execution of the backup. The actual warnings are in the backup's log file in object storage.
             */
            warnings?: number;
        }

        /**
         * Progress contains information about the backup's execution progress. Note that this information is best-effort only -- if Velero fails to update it during a backup for any reason, it may be inaccurate/stale.
         */
        export interface BackupStatusProgress {
            /**
             * ItemsBackedUp is the number of items that have actually been written to the backup tarball so far.
             */
            itemsBackedUp?: number;
            /**
             * TotalItems is the total number of items to be backed up. This number may change throughout the execution of the backup due to plugins that return additional related items to back up, the velero.io/exclude-from-backup label, and various other filters that happen as items are processed.
             */
            totalItems?: number;
        }

        /**
         * BackupStorageLocationSpec defines the desired state of a Velero BackupStorageLocation
         */
        export interface BackupStorageLocationSpec {
            /**
             * AccessMode defines the permissions for the backup storage location.
             */
            accessMode?: string;
            /**
             * BackupSyncPeriod defines how frequently to sync backup API objects from object storage. A value of 0 disables sync.
             */
            backupSyncPeriod?: string;
            /**
             * Config is for provider-specific configuration fields.
             */
            config?: {[key: string]: string};
            /**
             * Credential contains the credential information intended to be used with this location
             */
            credential?: outputs.velero.v1.BackupStorageLocationSpecCredential;
            /**
             * ObjectStorageLocation specifies the settings necessary to connect to a provider's object storage.
             */
            objectStorage: outputs.velero.v1.BackupStorageLocationSpecObjectstorage;
            /**
             * Provider is the provider of the backup storage.
             */
            provider: string;
            /**
             * ValidationFrequency defines how frequently to validate the corresponding object storage. A value of 0 disables validation.
             */
            validationFrequency?: string;
        }

        /**
         * Credential contains the credential information intended to be used with this location
         */
        export interface BackupStorageLocationSpecCredential {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * ObjectStorageLocation specifies the settings necessary to connect to a provider's object storage.
         */
        export interface BackupStorageLocationSpecObjectstorage {
            /**
             * Bucket is the bucket to use for object storage.
             */
            bucket: string;
            /**
             * CACert defines a CA bundle to use when verifying TLS connections to the provider.
             */
            caCert?: string;
            /**
             * Prefix is the path inside a bucket to use for Velero storage. Optional.
             */
            prefix?: string;
        }

        /**
         * BackupStorageLocationStatus defines the observed state of BackupStorageLocation
         */
        export interface BackupStorageLocationStatus {
            /**
             * AccessMode is an unused field. 
             *  Deprecated: there is now an AccessMode field on the Spec and this field will be removed entirely as of v2.0.
             */
            accessMode?: string;
            /**
             * LastSyncedRevision is the value of the `metadata/revision` file in the backup storage location the last time the BSL's contents were synced into the cluster. 
             *  Deprecated: this field is no longer updated or used for detecting changes to the location's contents and will be removed entirely in v2.0.
             */
            lastSyncedRevision?: string;
            /**
             * LastSyncedTime is the last time the contents of the location were synced into the cluster.
             */
            lastSyncedTime?: string;
            /**
             * LastValidationTime is the last time the backup store location was validated the cluster.
             */
            lastValidationTime?: string;
            /**
             * Message is a message about the backup storage location's status.
             */
            message?: string;
            /**
             * Phase is the current state of the BackupStorageLocation.
             */
            phase?: string;
        }

        /**
         * DeleteBackupRequestSpec is the specification for which backups to delete.
         */
        export interface DeleteBackupRequestSpec {
            backupName: string;
        }

        /**
         * DeleteBackupRequestStatus is the current status of a DeleteBackupRequest.
         */
        export interface DeleteBackupRequestStatus {
            /**
             * Errors contains any errors that were encountered during the deletion process.
             */
            errors?: string[];
            /**
             * Phase is the current state of the DeleteBackupRequest.
             */
            phase?: string;
        }

        /**
         * DownloadRequestSpec is the specification for a download request.
         */
        export interface DownloadRequestSpec {
            /**
             * Target is what to download (e.g. logs for a backup).
             */
            target: outputs.velero.v1.DownloadRequestSpecTarget;
        }

        /**
         * Target is what to download (e.g. logs for a backup).
         */
        export interface DownloadRequestSpecTarget {
            /**
             * Kind is the type of file to download.
             */
            kind: string;
            /**
             * Name is the name of the kubernetes resource with which the file is associated.
             */
            name: string;
        }

        /**
         * DownloadRequestStatus is the current status of a DownloadRequest.
         */
        export interface DownloadRequestStatus {
            /**
             * DownloadURL contains the pre-signed URL for the target file.
             */
            downloadURL?: string;
            /**
             * Expiration is when this DownloadRequest expires and can be deleted by the system.
             */
            expiration?: string;
            /**
             * Phase is the current state of the DownloadRequest.
             */
            phase?: string;
        }

        /**
         * PodVolumeBackupSpec is the specification for a PodVolumeBackup.
         */
        export interface PodVolumeBackupSpec {
            /**
             * BackupStorageLocation is the name of the backup storage location where the restic repository is stored.
             */
            backupStorageLocation: string;
            /**
             * Node is the name of the node that the Pod is running on.
             */
            node: string;
            /**
             * Pod is a reference to the pod containing the volume to be backed up.
             */
            pod: outputs.velero.v1.PodVolumeBackupSpecPod;
            /**
             * RepoIdentifier is the restic repository identifier.
             */
            repoIdentifier: string;
            /**
             * Tags are a map of key-value pairs that should be applied to the volume backup as tags.
             */
            tags?: {[key: string]: string};
            /**
             * Volume is the name of the volume within the Pod to be backed up.
             */
            volume: string;
        }

        /**
         * Pod is a reference to the pod containing the volume to be backed up.
         */
        export interface PodVolumeBackupSpecPod {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * PodVolumeBackupStatus is the current status of a PodVolumeBackup.
         */
        export interface PodVolumeBackupStatus {
            /**
             * CompletionTimestamp records the time a backup was completed. Completion time is recorded even on failed backups. Completion time is recorded before uploading the backup object. The server's time is used for CompletionTimestamps
             */
            completionTimestamp?: string;
            /**
             * Message is a message about the pod volume backup's status.
             */
            message?: string;
            /**
             * Path is the full path within the controller pod being backed up.
             */
            path?: string;
            /**
             * Phase is the current state of the PodVolumeBackup.
             */
            phase?: string;
            /**
             * Progress holds the total number of bytes of the volume and the current number of backed up bytes. This can be used to display progress information about the backup operation.
             */
            progress?: outputs.velero.v1.PodVolumeBackupStatusProgress;
            /**
             * SnapshotID is the identifier for the snapshot of the pod volume.
             */
            snapshotID?: string;
            /**
             * StartTimestamp records the time a backup was started. Separate from CreationTimestamp, since that value changes on restores. The server's time is used for StartTimestamps
             */
            startTimestamp?: string;
        }

        /**
         * Progress holds the total number of bytes of the volume and the current number of backed up bytes. This can be used to display progress information about the backup operation.
         */
        export interface PodVolumeBackupStatusProgress {
            bytesDone?: number;
            totalBytes?: number;
        }

        /**
         * PodVolumeRestoreSpec is the specification for a PodVolumeRestore.
         */
        export interface PodVolumeRestoreSpec {
            /**
             * BackupStorageLocation is the name of the backup storage location where the restic repository is stored.
             */
            backupStorageLocation: string;
            /**
             * Pod is a reference to the pod containing the volume to be restored.
             */
            pod: outputs.velero.v1.PodVolumeRestoreSpecPod;
            /**
             * RepoIdentifier is the restic repository identifier.
             */
            repoIdentifier: string;
            /**
             * SnapshotID is the ID of the volume snapshot to be restored.
             */
            snapshotID: string;
            /**
             * Volume is the name of the volume within the Pod to be restored.
             */
            volume: string;
        }

        /**
         * Pod is a reference to the pod containing the volume to be restored.
         */
        export interface PodVolumeRestoreSpecPod {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * PodVolumeRestoreStatus is the current status of a PodVolumeRestore.
         */
        export interface PodVolumeRestoreStatus {
            /**
             * CompletionTimestamp records the time a restore was completed. Completion time is recorded even on failed restores. The server's time is used for CompletionTimestamps
             */
            completionTimestamp?: string;
            /**
             * Message is a message about the pod volume restore's status.
             */
            message?: string;
            /**
             * Phase is the current state of the PodVolumeRestore.
             */
            phase?: string;
            /**
             * Progress holds the total number of bytes of the snapshot and the current number of restored bytes. This can be used to display progress information about the restore operation.
             */
            progress?: outputs.velero.v1.PodVolumeRestoreStatusProgress;
            /**
             * StartTimestamp records the time a restore was started. The server's time is used for StartTimestamps
             */
            startTimestamp?: string;
        }

        /**
         * Progress holds the total number of bytes of the snapshot and the current number of restored bytes. This can be used to display progress information about the restore operation.
         */
        export interface PodVolumeRestoreStatusProgress {
            bytesDone?: number;
            totalBytes?: number;
        }

        /**
         * ResticRepositorySpec is the specification for a ResticRepository.
         */
        export interface ResticRepositorySpec {
            /**
             * BackupStorageLocation is the name of the BackupStorageLocation that should contain this repository.
             */
            backupStorageLocation: string;
            /**
             * MaintenanceFrequency is how often maintenance should be run.
             */
            maintenanceFrequency: string;
            /**
             * ResticIdentifier is the full restic-compatible string for identifying this repository.
             */
            resticIdentifier: string;
            /**
             * VolumeNamespace is the namespace this restic repository contains pod volume backups for.
             */
            volumeNamespace: string;
        }

        /**
         * ResticRepositoryStatus is the current status of a ResticRepository.
         */
        export interface ResticRepositoryStatus {
            /**
             * LastMaintenanceTime is the last time maintenance was run.
             */
            lastMaintenanceTime?: string;
            /**
             * Message is a message about the current status of the ResticRepository.
             */
            message?: string;
            /**
             * Phase is the current state of the ResticRepository.
             */
            phase?: string;
        }

        /**
         * RestoreSpec defines the specification for a Velero restore.
         */
        export interface RestoreSpec {
            /**
             * BackupName is the unique name of the Velero backup to restore from.
             */
            backupName: string;
            /**
             * ExcludedNamespaces contains a list of namespaces that are not included in the restore.
             */
            excludedNamespaces?: string[];
            /**
             * ExcludedResources is a slice of resource names that are not included in the restore.
             */
            excludedResources?: string[];
            /**
             * ExistingResourcePolicy specifies the restore behaviour for the kubernetes resource to be restored
             */
            existingResourcePolicy?: string;
            /**
             * Hooks represent custom behaviors that should be executed during or post restore.
             */
            hooks?: outputs.velero.v1.RestoreSpecHooks;
            /**
             * IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the restore. If null, defaults to true.
             */
            includeClusterResources?: boolean;
            /**
             * IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.
             */
            includedNamespaces?: string[];
            /**
             * IncludedResources is a slice of resource names to include in the restore. If empty, all resources in the backup are included.
             */
            includedResources?: string[];
            /**
             * LabelSelector is a metav1.LabelSelector to filter with when restoring individual objects from the backup. If empty or nil, all objects are included. Optional.
             */
            labelSelector?: outputs.velero.v1.RestoreSpecLabelselector;
            /**
             * NamespaceMapping is a map of source namespace names to target namespace names to restore into. Any source namespaces not included in the map will be restored into namespaces of the same name.
             */
            namespaceMapping?: {[key: string]: string};
            /**
             * OrLabelSelectors is list of metav1.LabelSelector to filter with when restoring individual objects from the backup. If multiple provided they will be joined by the OR operator. LabelSelector as well as OrLabelSelectors cannot co-exist in restore request, only one of them can be used
             */
            orLabelSelectors?: outputs.velero.v1.RestoreSpecOrlabelselectors[];
            /**
             * PreserveNodePorts specifies whether to restore old nodePorts from backup.
             */
            preserveNodePorts?: boolean;
            /**
             * RestorePVs specifies whether to restore all included PVs from snapshot (via the cloudprovider).
             */
            restorePVs?: boolean;
            /**
             * RestoreStatus specifies which resources we should restore the status field. If nil, no objects are included. Optional.
             */
            restoreStatus?: outputs.velero.v1.RestoreSpecRestorestatus;
            /**
             * ScheduleName is the unique name of the Velero schedule to restore from. If specified, and BackupName is empty, Velero will restore from the most recent successful backup created from this schedule.
             */
            scheduleName?: string;
        }

        /**
         * Hooks represent custom behaviors that should be executed during or post restore.
         */
        export interface RestoreSpecHooks {
            resources?: outputs.velero.v1.RestoreSpecHooksResources[];
        }

        /**
         * RestoreResourceHookSpec defines one or more RestoreResrouceHooks that should be executed based on the rules defined for namespaces, resources, and label selector.
         */
        export interface RestoreSpecHooksResources {
            /**
             * ExcludedNamespaces specifies the namespaces to which this hook spec does not apply.
             */
            excludedNamespaces?: string[];
            /**
             * ExcludedResources specifies the resources to which this hook spec does not apply.
             */
            excludedResources?: string[];
            /**
             * IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies to all namespaces.
             */
            includedNamespaces?: string[];
            /**
             * IncludedResources specifies the resources to which this hook spec applies. If empty, it applies to all resources.
             */
            includedResources?: string[];
            /**
             * LabelSelector, if specified, filters the resources to which this hook spec applies.
             */
            labelSelector?: outputs.velero.v1.RestoreSpecHooksResourcesLabelselector;
            /**
             * Name is the name of this hook.
             */
            name: string;
            /**
             * PostHooks is a list of RestoreResourceHooks to execute during and after restoring a resource.
             */
            postHooks?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooks[];
        }

        /**
         * LabelSelector, if specified, filters the resources to which this hook spec applies.
         */
        export interface RestoreSpecHooksResourcesLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.velero.v1.RestoreSpecHooksResourcesLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RestoreSpecHooksResourcesLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * RestoreResourceHook defines a restore hook for a resource.
         */
        export interface RestoreSpecHooksResourcesPosthooks {
            /**
             * Exec defines an exec restore hook.
             */
            exec?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksExec;
            /**
             * Init defines an init restore hook.
             */
            init?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInit;
        }

        /**
         * Exec defines an exec restore hook.
         */
        export interface RestoreSpecHooksResourcesPosthooksExec {
            /**
             * Command is the command and arguments to execute from within a container after a pod has been restored.
             */
            command: string[];
            /**
             * Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
             */
            container?: string;
            /**
             * ExecTimeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
             */
            execTimeout?: string;
            /**
             * OnError specifies how Velero should behave if it encounters an error executing this hook.
             */
            onError?: string;
            /**
             * WaitTimeout defines the maximum amount of time Velero should wait for the container to be Ready before attempting to run the command.
             */
            waitTimeout?: string;
        }

        /**
         * Init defines an init restore hook.
         */
        export interface RestoreSpecHooksResourcesPosthooksInit {
            /**
             * InitContainers is list of init containers to be added to a pod during its restore.
             */
            initContainers?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainers[];
            /**
             * Timeout defines the maximum amount of time Velero should wait for the initContainers to complete.
             */
            timeout?: string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainers {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: string[];
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersEnvfrom[];
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: string;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecycle;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersLivenessprobe;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersPorts[];
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersReadinessprobe;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersResources;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersSecuritycontext;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during "steady-state operation. This cannot be updated. More info: https"://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersStartupprobe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersVolumedevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersVolumemounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: string;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersEnvValuefrom;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersEnvValuefrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersEnvValuefromConfigmapkeyref;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersEnvValuefromFieldref;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersEnvValuefromResourcefieldref;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersEnvValuefromSecretkeyref;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersEnvValuefromConfigmapkeyref {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersEnvValuefromFieldref {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersEnvValuefromResourcefieldref {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersEnvValuefromSecretkeyref {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersEnvfrom {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersEnvfromConfigmapref;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: string;
            /**
             * The Secret to select from
             */
            secretRef?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersEnvfromSecretref;
        }

        /**
         * The ConfigMap to select from
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersEnvfromConfigmapref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersEnvfromSecretref {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: boolean;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecycle {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePoststart;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePrestop;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePoststart {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePoststartExec;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePoststartHttpget;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePoststartTcpsocket;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePoststartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePoststartHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePoststartHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePoststartHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePoststartTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePrestop {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePrestopExec;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePrestopHttpget;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePrestopTcpsocket;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePrestopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePrestopHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePrestopHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePrestopHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersLifecyclePrestopTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersLivenessprobe {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersLivenessprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersLivenessprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersLivenessprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersLivenessprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersLivenessprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersLivenessprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersLivenessprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersLivenessprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * restoreSpecHooksResourcesPosthooksInitInitcontainersPortsProvideDefaults sets the appropriate defaults for RestoreSpecHooksResourcesPosthooksInitInitcontainersPorts
         */
        export function restoreSpecHooksResourcesPosthooksInitInitcontainersPortsProvideDefaults(val: RestoreSpecHooksResourcesPosthooksInitInitcontainersPorts): RestoreSpecHooksResourcesPosthooksInitInitcontainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersReadinessprobe {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersReadinessprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersReadinessprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersReadinessprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersReadinessprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersReadinessprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersReadinessprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersReadinessprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersReadinessprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an "implementation-defined value. More info: https"://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: number | string};
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersSecuritycontext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
             */
            allowPrivilegeEscalation?: boolean;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
             */
            capabilities?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersSecuritycontextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
             */
            privileged?: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
             */
            procMount?: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false.
             */
            readOnlyRootFilesystem?: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsGroup?: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUser?: number;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            seLinuxOptions?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersSecuritycontextSelinuxoptions;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
             */
            seccompProfile?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersSecuritycontextSeccompprofile;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            windowsOptions?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersSecuritycontextWindowsoptions;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersSecuritycontextCapabilities {
            /**
             * Added capabilities
             */
            add?: string[];
            /**
             * Removed capabilities
             */
            drop?: string[];
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersSecuritycontextSeccompprofile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersSecuritycontextSelinuxoptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: string;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersSecuritycontextWindowsoptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during "steady-state operation. This cannot be updated. More info: https"://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersStartupprobe {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersStartupprobeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersStartupprobeHttpget;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersStartupprobeTcpsocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersStartupprobeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersStartupprobeHttpget {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.velero.v1.RestoreSpecHooksResourcesPosthooksInitInitcontainersStartupprobeHttpgetHttpheaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersStartupprobeHttpgetHttpheaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersStartupprobeTcpsocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersVolumedevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface RestoreSpecHooksResourcesPosthooksInitInitcontainersVolumemounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: string;
        }

        /**
         * LabelSelector is a metav1.LabelSelector to filter with when restoring individual objects from the backup. If empty or nil, all objects are included. Optional.
         */
        export interface RestoreSpecLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.velero.v1.RestoreSpecLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RestoreSpecLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface RestoreSpecOrlabelselectors {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.velero.v1.RestoreSpecOrlabelselectorsMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RestoreSpecOrlabelselectorsMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * RestoreStatus specifies which resources we should restore the status field. If nil, no objects are included. Optional.
         */
        export interface RestoreSpecRestorestatus {
            /**
             * ExcludedResources specifies the resources to which will not restore the status.
             */
            excludedResources?: string[];
            /**
             * IncludedResources specifies the resources to which will restore the status. If empty, it applies to all resources.
             */
            includedResources?: string[];
        }

        /**
         * RestoreStatus captures the current status of a Velero restore
         */
        export interface RestoreStatus {
            /**
             * CompletionTimestamp records the time the restore operation was completed. Completion time is recorded even on failed restore. The server's time is used for StartTimestamps
             */
            completionTimestamp?: string;
            /**
             * Errors is a count of all error messages that were generated during execution of the restore. The actual errors are stored in object storage.
             */
            errors?: number;
            /**
             * FailureReason is an error that caused the entire restore to fail.
             */
            failureReason?: string;
            /**
             * Phase is the current state of the Restore
             */
            phase?: string;
            /**
             * Progress contains information about the restore's execution progress. Note that this information is best-effort only -- if Velero fails to update it during a restore for any reason, it may be inaccurate/stale.
             */
            progress?: outputs.velero.v1.RestoreStatusProgress;
            /**
             * StartTimestamp records the time the restore operation was started. The server's time is used for StartTimestamps
             */
            startTimestamp?: string;
            /**
             * ValidationErrors is a slice of all validation errors (if applicable)
             */
            validationErrors?: string[];
            /**
             * Warnings is a count of all warning messages that were generated during execution of the restore. The actual warnings are stored in object storage.
             */
            warnings?: number;
        }

        /**
         * Progress contains information about the restore's execution progress. Note that this information is best-effort only -- if Velero fails to update it during a restore for any reason, it may be inaccurate/stale.
         */
        export interface RestoreStatusProgress {
            /**
             * ItemsRestored is the number of items that have actually been restored so far
             */
            itemsRestored?: number;
            /**
             * TotalItems is the total number of items to be restored. This number may change throughout the execution of the restore due to plugins that return additional related items to restore
             */
            totalItems?: number;
        }

        /**
         * ScheduleSpec defines the specification for a Velero schedule
         */
        export interface ScheduleSpec {
            /**
             * Schedule is a Cron expression defining when to run the Backup.
             */
            schedule: string;
            /**
             * Template is the definition of the Backup to be run on the provided schedule
             */
            template: outputs.velero.v1.ScheduleSpecTemplate;
            /**
             * UseOwnerReferencesBackup specifies whether to use OwnerReferences on backups created by this Schedule.
             */
            useOwnerReferencesInBackup?: boolean;
        }

        /**
         * Template is the definition of the Backup to be run on the provided schedule
         */
        export interface ScheduleSpecTemplate {
            /**
             * CSISnapshotTimeout specifies the time used to wait for CSI VolumeSnapshot status turns to ReadyToUse during creation, before returning error as timeout. The default value is 10 minute.
             */
            csiSnapshotTimeout?: string;
            /**
             * DefaultVolumesToRestic specifies whether restic should be used to take a backup of all pod volumes by default.
             */
            defaultVolumesToRestic?: boolean;
            /**
             * ExcludedNamespaces contains a list of namespaces that are not included in the backup.
             */
            excludedNamespaces?: string[];
            /**
             * ExcludedResources is a slice of resource names that are not included in the backup.
             */
            excludedResources?: string[];
            /**
             * Hooks represent custom behaviors that should be executed at different phases of the backup.
             */
            hooks?: outputs.velero.v1.ScheduleSpecTemplateHooks;
            /**
             * IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup.
             */
            includeClusterResources?: boolean;
            /**
             * IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.
             */
            includedNamespaces?: string[];
            /**
             * IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included.
             */
            includedResources?: string[];
            /**
             * LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
             */
            labelSelector?: outputs.velero.v1.ScheduleSpecTemplateLabelselector;
            metadata?: outputs.velero.v1.ScheduleSpecTemplateMetadata;
            /**
             * OrLabelSelectors is list of metav1.LabelSelector to filter with when adding individual objects to the backup. If multiple provided they will be joined by the OR operator. LabelSelector as well as OrLabelSelectors cannot co-exist in backup request, only one of them can be used.
             */
            orLabelSelectors?: outputs.velero.v1.ScheduleSpecTemplateOrlabelselectors[];
            /**
             * OrderedResources specifies the backup order of resources of specific Kind. The map key is the Kind name and value is a list of resource names separated by commas. Each resource name has format "namespace/resourcename".  For cluster resources, simply use "resourcename".
             */
            orderedResources?: {[key: string]: string};
            /**
             * SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup.
             */
            snapshotVolumes?: boolean;
            /**
             * StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.
             */
            storageLocation?: string;
            /**
             * TTL is a time.Duration-parseable string describing how long the Backup should be retained for.
             */
            ttl?: string;
            /**
             * VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.
             */
            volumeSnapshotLocations?: string[];
        }

        /**
         * Hooks represent custom behaviors that should be executed at different phases of the backup.
         */
        export interface ScheduleSpecTemplateHooks {
            /**
             * Resources are hooks that should be executed when backing up individual instances of a resource.
             */
            resources?: outputs.velero.v1.ScheduleSpecTemplateHooksResources[];
        }

        /**
         * BackupResourceHookSpec defines one or more BackupResourceHooks that should be executed based on the rules defined for namespaces, resources, and label selector.
         */
        export interface ScheduleSpecTemplateHooksResources {
            /**
             * ExcludedNamespaces specifies the namespaces to which this hook spec does not apply.
             */
            excludedNamespaces?: string[];
            /**
             * ExcludedResources specifies the resources to which this hook spec does not apply.
             */
            excludedResources?: string[];
            /**
             * IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies to all namespaces.
             */
            includedNamespaces?: string[];
            /**
             * IncludedResources specifies the resources to which this hook spec applies. If empty, it applies to all resources.
             */
            includedResources?: string[];
            /**
             * LabelSelector, if specified, filters the resources to which this hook spec applies.
             */
            labelSelector?: outputs.velero.v1.ScheduleSpecTemplateHooksResourcesLabelselector;
            /**
             * Name is the name of this hook.
             */
            name: string;
            /**
             * PostHooks is a list of BackupResourceHooks to execute after storing the item in the backup. These are executed after all "additional items" from item actions are processed.
             */
            post?: outputs.velero.v1.ScheduleSpecTemplateHooksResourcesPost[];
            /**
             * PreHooks is a list of BackupResourceHooks to execute prior to storing the item in the backup. These are executed before any "additional items" from item actions are processed.
             */
            pre?: outputs.velero.v1.ScheduleSpecTemplateHooksResourcesPre[];
        }

        /**
         * LabelSelector, if specified, filters the resources to which this hook spec applies.
         */
        export interface ScheduleSpecTemplateHooksResourcesLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.velero.v1.ScheduleSpecTemplateHooksResourcesLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ScheduleSpecTemplateHooksResourcesLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * BackupResourceHook defines a hook for a resource.
         */
        export interface ScheduleSpecTemplateHooksResourcesPost {
            /**
             * Exec defines an exec hook.
             */
            exec: outputs.velero.v1.ScheduleSpecTemplateHooksResourcesPostExec;
        }

        /**
         * Exec defines an exec hook.
         */
        export interface ScheduleSpecTemplateHooksResourcesPostExec {
            /**
             * Command is the command and arguments to execute.
             */
            command: string[];
            /**
             * Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
             */
            container?: string;
            /**
             * OnError specifies how Velero should behave if it encounters an error executing this hook.
             */
            onError?: string;
            /**
             * Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
             */
            timeout?: string;
        }

        /**
         * BackupResourceHook defines a hook for a resource.
         */
        export interface ScheduleSpecTemplateHooksResourcesPre {
            /**
             * Exec defines an exec hook.
             */
            exec: outputs.velero.v1.ScheduleSpecTemplateHooksResourcesPreExec;
        }

        /**
         * Exec defines an exec hook.
         */
        export interface ScheduleSpecTemplateHooksResourcesPreExec {
            /**
             * Command is the command and arguments to execute.
             */
            command: string[];
            /**
             * Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
             */
            container?: string;
            /**
             * OnError specifies how Velero should behave if it encounters an error executing this hook.
             */
            onError?: string;
            /**
             * Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
             */
            timeout?: string;
        }

        /**
         * LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
         */
        export interface ScheduleSpecTemplateLabelselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.velero.v1.ScheduleSpecTemplateLabelselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ScheduleSpecTemplateLabelselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        export interface ScheduleSpecTemplateMetadata {
            labels?: {[key: string]: string};
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface ScheduleSpecTemplateOrlabelselectors {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.velero.v1.ScheduleSpecTemplateOrlabelselectorsMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ScheduleSpecTemplateOrlabelselectorsMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * ScheduleStatus captures the current state of a Velero schedule
         */
        export interface ScheduleStatus {
            /**
             * LastBackup is the last time a Backup was run for this Schedule schedule
             */
            lastBackup?: string;
            /**
             * Phase is the current phase of the Schedule
             */
            phase?: string;
            /**
             * ValidationErrors is a slice of all validation errors (if applicable)
             */
            validationErrors?: string[];
        }

        /**
         * ServerStatusRequestStatus is the current status of a ServerStatusRequest.
         */
        export interface ServerStatusRequestStatus {
            /**
             * Phase is the current lifecycle phase of the ServerStatusRequest.
             */
            phase?: string;
            /**
             * Plugins list information about the plugins running on the Velero server
             */
            plugins?: outputs.velero.v1.ServerStatusRequestStatusPlugins[];
            /**
             * ProcessedTimestamp is when the ServerStatusRequest was processed by the ServerStatusRequestController.
             */
            processedTimestamp?: string;
            /**
             * ServerVersion is the Velero server version.
             */
            serverVersion?: string;
        }

        /**
         * PluginInfo contains attributes of a Velero plugin
         */
        export interface ServerStatusRequestStatusPlugins {
            kind: string;
            name: string;
        }

        /**
         * VolumeSnapshotLocationSpec defines the specification for a Velero VolumeSnapshotLocation.
         */
        export interface VolumeSnapshotLocationSpec {
            /**
             * Config is for provider-specific configuration fields.
             */
            config?: {[key: string]: string};
            /**
             * Provider is the provider of the volume storage.
             */
            provider: string;
        }

        /**
         * VolumeSnapshotLocationStatus describes the current status of a Velero VolumeSnapshotLocation.
         */
        export interface VolumeSnapshotLocationStatus {
            /**
             * VolumeSnapshotLocationPhase is the lifecycle phase of a Velero VolumeSnapshotLocation.
             */
            phase?: string;
        }
    }
}
