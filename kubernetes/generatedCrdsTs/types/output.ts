// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

import * as utilities from "../utilities";

import {ObjectMeta} from "../meta/v1";

export namespace acme {
    export namespace v1 {
        export interface ChallengeSpec {
            /**
             * The URL to the ACME Authorization resource that this challenge is a part of.
             */
            authorizationURL: string;
            /**
             * dnsName is the identifier that this challenge is for, e.g. example.com. If the requested DNSName is a 'wildcard', this field MUST be set to the non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
             */
            dnsName: string;
            /**
             * References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
             */
            issuerRef: outputs.acme.v1.ChallengeSpecIssuerRef;
            /**
             * The ACME challenge key for this challenge For HTTP01 challenges, this is the value that must be responded with to complete the HTTP01 challenge in the format: `<private key JWK thumbprint>.<key from acme server for challenge>`. For DNS01 challenges, this is the base64 encoded SHA256 sum of the `<private key JWK thumbprint>.<key from acme server for challenge>` text that must be set as the TXT record content.
             */
            key: string;
            /**
             * Contains the domain solving configuration that should be used to solve this challenge resource.
             */
            solver: outputs.acme.v1.ChallengeSpecSolver;
            /**
             * The ACME challenge token for this challenge. This is the raw value returned from the ACME server.
             */
            token: string;
            /**
             * The type of ACME challenge this resource represents. One of "HTTP-01" or "DNS-01".
             */
            type: string;
            /**
             * The URL of the ACME Challenge resource for this challenge. This can be used to lookup details about the status of this challenge.
             */
            url: string;
            /**
             * wildcard will be true if this challenge is for a wildcard identifier, for example '*.example.com'.
             */
            wildcard?: boolean;
        }

        /**
         * References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
         */
        export interface ChallengeSpecIssuerRef {
            /**
             * Group of the resource being referred to.
             */
            group?: string;
            /**
             * Kind of the resource being referred to.
             */
            kind?: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        /**
         * Contains the domain solving configuration that should be used to solve this challenge resource.
         */
        export interface ChallengeSpecSolver {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: outputs.acme.v1.ChallengeSpecSolverDns01;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: outputs.acme.v1.ChallengeSpecSolverHttp01;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: outputs.acme.v1.ChallengeSpecSolverSelector;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface ChallengeSpecSolverDns01 {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: outputs.acme.v1.ChallengeSpecSolverDns01AcmeDNS;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: outputs.acme.v1.ChallengeSpecSolverDns01Akamai;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: outputs.acme.v1.ChallengeSpecSolverDns01AzureDNS;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: outputs.acme.v1.ChallengeSpecSolverDns01CloudDNS;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: outputs.acme.v1.ChallengeSpecSolverDns01Cloudflare;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: string;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: outputs.acme.v1.ChallengeSpecSolverDns01Digitalocean;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: outputs.acme.v1.ChallengeSpecSolverDns01Rfc2136;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: outputs.acme.v1.ChallengeSpecSolverDns01Route53;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: outputs.acme.v1.ChallengeSpecSolverDns01Webhook;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AcmeDNS {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AcmeDNSAccountSecretRef;
            host: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AcmeDNSAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Akamai {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AkamaiAccessTokenSecretRef;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AkamaiClientSecretSecretRef;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AkamaiClientTokenSecretRef;
            serviceConsumerDomain: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiAccessTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiClientTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AzureDNS {
            /**
             * if both this and ClientSecret are left unset MSI will be used
             */
            clientID?: string;
            /**
             * if both this and ClientID are left unset MSI will be used
             */
            clientSecretSecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01AzureDNSClientSecretSecretRef;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: string;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: string;
            /**
             * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
             */
            managedIdentity?: outputs.acme.v1.ChallengeSpecSolverDns01AzureDNSManagedIdentity;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: string;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: string;
            /**
             * when specifying ClientID and ClientSecret then this field is also needed
             */
            tenantID?: string;
        }

        /**
         * if both this and ClientID are left unset MSI will be used
         */
        export interface ChallengeSpecSolverDns01AzureDNSClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
         */
        export interface ChallengeSpecSolverDns01AzureDNSManagedIdentity {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: string;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             */
            resourceID?: string;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01CloudDNS {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: string;
            project: string;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRef;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Cloudflare {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01CloudflareApiKeySecretRef;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01CloudflareApiTokenSecretRef;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: string;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface ChallengeSpecSolverDns01CloudflareApiKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface ChallengeSpecSolverDns01CloudflareApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Digitalocean {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01DigitaloceanTokenSecretRef;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01DigitaloceanTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Rfc2136 {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: string;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: string;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: string;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRef;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Route53 {
            /**
             * The AccessKeyID is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: string;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: string;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: string;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: string;
            /**
             * The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef;
        }

        /**
         * The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Webhook {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: {[key: string]: any};
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: string;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface ChallengeSpecSolverHttp01 {
            /**
             * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoute;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: outputs.acme.v1.ChallengeSpecSolverHttp01Ingress;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoute {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: {[key: string]: string};
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/v1alpha2/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefs[];
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * ParentRef identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid. 
         *  References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefs {
            /**
             * Group is the group of the referent. 
             *  Support: Core
             */
            group?: string;
            /**
             * Kind is kind of the referent. 
             *  Support: Core (Gateway) Support: Custom (Other Resources)
             */
            kind?: string;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route. 
             *  Support: Core
             */
            namespace?: string;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: string;
        }
        /**
         * challengeSpecSolverHttp01GatewayHTTPRouteParentRefsProvideDefaults sets the appropriate defaults for ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefs
         */
        export function challengeSpecSolverHttp01GatewayHTTPRouteParentRefsProvideDefaults(val: ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefs): ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface ChallengeSpecSolverHttp01Ingress {
            /**
             * The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.
             */
            class?: string;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressIngressTemplate;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.
             */
            name?: string;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplate;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01IngressIngressTemplate {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressIngressTemplateMetadata;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01IngressIngressTemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: {[key: string]: string};
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplate {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateMetadata;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
             */
            spec?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpec;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateMetadata {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: {[key: string]: string};
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpec {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: string;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: string;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface ChallengeSpecSolverSelector {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: string[];
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: string[];
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: {[key: string]: string};
        }

        export interface ChallengeStatus {
            /**
             * presented will be set to true if the challenge values for this challenge are currently 'presented'. This *does not* imply the self check is passing. Only that the values have been 'submitted' for the appropriate challenge mechanism (i.e. the DNS01 TXT record has been presented, or the HTTP01 configuration has been configured).
             */
            presented?: boolean;
            /**
             * Used to denote whether this challenge should be processed or not. This field will only be set to true by the 'scheduling' component. It will only be set to false by the 'challenges' controller, after the challenge has reached a final state or timed out. If this field is set to false, the challenge controller will not take any more action.
             */
            processing?: boolean;
            /**
             * Contains human readable information on why the Challenge is in the current state.
             */
            reason?: string;
            /**
             * Contains the current 'state' of the challenge. If not set, the state of the challenge is unknown.
             */
            state?: string;
        }

        export interface OrderSpec {
            /**
             * CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.
             */
            commonName?: string;
            /**
             * DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
             */
            dnsNames?: string[];
            /**
             * Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.
             */
            duration?: string;
            /**
             * IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
             */
            ipAddresses?: string[];
            /**
             * IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
             */
            issuerRef: outputs.acme.v1.OrderSpecIssuerRef;
            /**
             * Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.
             */
            request: string;
        }

        /**
         * IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
         */
        export interface OrderSpecIssuerRef {
            /**
             * Group of the resource being referred to.
             */
            group?: string;
            /**
             * Kind of the resource being referred to.
             */
            kind?: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        export interface OrderStatus {
            /**
             * Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.
             */
            authorizations?: outputs.acme.v1.OrderStatusAuthorizations[];
            /**
             * Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.
             */
            certificate?: string;
            /**
             * FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.
             */
            failureTime?: string;
            /**
             * FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.
             */
            finalizeURL?: string;
            /**
             * Reason optionally provides more information about a why the order is in the current state.
             */
            reason?: string;
            /**
             * State contains the current state of this Order resource. States 'success' and 'expired' are 'final'
             */
            state?: string;
            /**
             * URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.
             */
            url?: string;
        }

        /**
         * ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.
         */
        export interface OrderStatusAuthorizations {
            /**
             * Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.
             */
            challenges?: outputs.acme.v1.OrderStatusAuthorizationsChallenges[];
            /**
             * Identifier is the DNS name to be validated as part of this authorization
             */
            identifier?: string;
            /**
             * InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.
             */
            initialState?: string;
            /**
             * URL is the URL of the Authorization that must be completed
             */
            url: string;
            /**
             * Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.
             */
            wildcard?: boolean;
        }

        /**
         * Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.
         */
        export interface OrderStatusAuthorizationsChallenges {
            /**
             * Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.
             */
            token: string;
            /**
             * Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.
             */
            type: string;
            /**
             * URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.
             */
            url: string;
        }
    }
}

export namespace argoproj {
    export namespace v1alpha1 {
        /**
         * AppProjectSpec is the specification of an AppProject
         */
        export interface AppProjectSpec {
            /**
             * ClusterResourceBlacklist contains list of blacklisted cluster level resources
             */
            clusterResourceBlacklist?: outputs.argoproj.v1alpha1.AppProjectSpecClusterResourceBlacklist[];
            /**
             * ClusterResourceWhitelist contains list of whitelisted cluster level resources
             */
            clusterResourceWhitelist?: outputs.argoproj.v1alpha1.AppProjectSpecClusterResourceWhitelist[];
            /**
             * Description contains optional project description
             */
            description?: string;
            /**
             * Destinations contains list of destinations available for deployment
             */
            destinations?: outputs.argoproj.v1alpha1.AppProjectSpecDestinations[];
            /**
             * NamespaceResourceBlacklist contains list of blacklisted namespace level resources
             */
            namespaceResourceBlacklist?: outputs.argoproj.v1alpha1.AppProjectSpecNamespaceResourceBlacklist[];
            /**
             * NamespaceResourceWhitelist contains list of whitelisted namespace level resources
             */
            namespaceResourceWhitelist?: outputs.argoproj.v1alpha1.AppProjectSpecNamespaceResourceWhitelist[];
            /**
             * OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
             */
            orphanedResources?: outputs.argoproj.v1alpha1.AppProjectSpecOrphanedResources;
            /**
             * Roles are user defined RBAC roles associated with this project
             */
            roles?: outputs.argoproj.v1alpha1.AppProjectSpecRoles[];
            /**
             * SignatureKeys contains a list of PGP key IDs that commits in Git must be signed with in order to be allowed for sync
             */
            signatureKeys?: outputs.argoproj.v1alpha1.AppProjectSpecSignatureKeys[];
            /**
             * SourceRepos contains list of repository URLs which can be used for deployment
             */
            sourceRepos?: string[];
            /**
             * SyncWindows controls when syncs can be run for apps in this project
             */
            syncWindows?: outputs.argoproj.v1alpha1.AppProjectSpecSyncWindows[];
        }

        /**
         * GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
         */
        export interface AppProjectSpecClusterResourceBlacklist {
            group: string;
            kind: string;
        }

        /**
         * GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
         */
        export interface AppProjectSpecClusterResourceWhitelist {
            group: string;
            kind: string;
        }

        /**
         * ApplicationDestination holds information about the application's destination
         */
        export interface AppProjectSpecDestinations {
            /**
             * Name is an alternate way of specifying the target cluster by its symbolic name
             */
            name?: string;
            /**
             * Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
             */
            namespace?: string;
            /**
             * Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API
             */
            server?: string;
        }

        /**
         * GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
         */
        export interface AppProjectSpecNamespaceResourceBlacklist {
            group: string;
            kind: string;
        }

        /**
         * GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
         */
        export interface AppProjectSpecNamespaceResourceWhitelist {
            group: string;
            kind: string;
        }

        /**
         * OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
         */
        export interface AppProjectSpecOrphanedResources {
            /**
             * Ignore contains a list of resources that are to be excluded from orphaned resources monitoring
             */
            ignore?: outputs.argoproj.v1alpha1.AppProjectSpecOrphanedResourcesIgnore[];
            /**
             * Warn indicates if warning condition should be created for apps which have orphaned resources
             */
            warn?: boolean;
        }

        /**
         * OrphanedResourceKey is a reference to a resource to be ignored from
         */
        export interface AppProjectSpecOrphanedResourcesIgnore {
            group?: string;
            kind?: string;
            name?: string;
        }

        /**
         * ProjectRole represents a role that has access to a project
         */
        export interface AppProjectSpecRoles {
            /**
             * Description is a description of the role
             */
            description?: string;
            /**
             * Groups are a list of OIDC group claims bound to this role
             */
            groups?: string[];
            /**
             * JWTTokens are a list of generated JWT tokens bound to this role
             */
            jwtTokens?: outputs.argoproj.v1alpha1.AppProjectSpecRolesJwtTokens[];
            /**
             * Name is a name for this role
             */
            name: string;
            /**
             * Policies Stores a list of casbin formatted strings that define access policies for the role in the project
             */
            policies?: string[];
        }

        /**
         * JWTToken holds the issuedAt and expiresAt values of a token
         */
        export interface AppProjectSpecRolesJwtTokens {
            exp?: number;
            iat: number;
            id?: string;
        }

        /**
         * SignatureKey is the specification of a key required to verify commit signatures with
         */
        export interface AppProjectSpecSignatureKeys {
            /**
             * The ID of the key in hexadecimal notation
             */
            keyID: string;
        }

        /**
         * SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps
         */
        export interface AppProjectSpecSyncWindows {
            /**
             * Applications contains a list of applications that the window will apply to
             */
            applications?: string[];
            /**
             * Clusters contains a list of clusters that the window will apply to
             */
            clusters?: string[];
            /**
             * Duration is the amount of time the sync window will be open
             */
            duration?: string;
            /**
             * Kind defines if the window allows or blocks syncs
             */
            kind?: string;
            /**
             * ManualSync enables manual syncs when they would otherwise be blocked
             */
            manualSync?: boolean;
            /**
             * Namespaces contains a list of namespaces that the window will apply to
             */
            namespaces?: string[];
            /**
             * Schedule is the time the window will begin, specified in cron format
             */
            schedule?: string;
            /**
             * TimeZone of the sync that will be applied to the schedule
             */
            timeZone?: string;
        }

        /**
         * AppProjectStatus contains status information for AppProject CRs
         */
        export interface AppProjectStatus {
            /**
             * JWTTokensByRole contains a list of JWT tokens issued for a given role
             */
            jwtTokensByRole?: {[key: string]: outputs.argoproj.v1alpha1.AppProjectStatusJwtTokensByRole};
        }

        /**
         * JWTTokens represents a list of JWT tokens
         */
        export interface AppProjectStatusJwtTokensByRole {
            items?: outputs.argoproj.v1alpha1.AppProjectStatusJwtTokensByRoleItems[];
        }

        /**
         * JWTToken holds the issuedAt and expiresAt values of a token
         */
        export interface AppProjectStatusJwtTokensByRoleItems {
            exp?: number;
            iat: number;
            id?: string;
        }

        /**
         * Operation contains information about a requested or running operation
         */
        export interface ApplicationOperation {
            /**
             * Info is a list of informational items for this operation
             */
            info?: outputs.argoproj.v1alpha1.ApplicationOperationInfo[];
            /**
             * InitiatedBy contains information about who initiated the operations
             */
            initiatedBy?: outputs.argoproj.v1alpha1.ApplicationOperationInitiatedBy;
            /**
             * Retry controls the strategy to apply if a sync fails
             */
            retry?: outputs.argoproj.v1alpha1.ApplicationOperationRetry;
            /**
             * Sync contains parameters for the operation
             */
            sync?: outputs.argoproj.v1alpha1.ApplicationOperationSync;
        }

        export interface ApplicationOperationInfo {
            name: string;
            value: string;
        }

        /**
         * InitiatedBy contains information about who initiated the operations
         */
        export interface ApplicationOperationInitiatedBy {
            /**
             * Automated is set to true if operation was initiated automatically by the application controller.
             */
            automated?: boolean;
            /**
             * Username contains the name of a user who started operation
             */
            username?: string;
        }

        /**
         * Retry controls the strategy to apply if a sync fails
         */
        export interface ApplicationOperationRetry {
            /**
             * Backoff controls how to backoff on subsequent retries of failed syncs
             */
            backoff?: outputs.argoproj.v1alpha1.ApplicationOperationRetryBackoff;
            /**
             * Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
             */
            limit?: number;
        }

        /**
         * Backoff controls how to backoff on subsequent retries of failed syncs
         */
        export interface ApplicationOperationRetryBackoff {
            /**
             * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
             */
            duration?: string;
            /**
             * Factor is a factor to multiply the base duration after each failed retry
             */
            factor?: number;
            /**
             * MaxDuration is the maximum amount of time allowed for the backoff strategy
             */
            maxDuration?: string;
        }

        /**
         * Sync contains parameters for the operation
         */
        export interface ApplicationOperationSync {
            /**
             * DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
             */
            dryRun?: boolean;
            /**
             * Manifests is an optional field that overrides sync source with a local directory for development
             */
            manifests?: string[];
            /**
             * Prune specifies to delete resources from the cluster that are no longer tracked in git
             */
            prune?: boolean;
            /**
             * Resources describes which resources shall be part of the sync
             */
            resources?: outputs.argoproj.v1alpha1.ApplicationOperationSyncResources[];
            /**
             * Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.
             */
            revision?: string;
            /**
             * Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
             */
            source?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSource;
            /**
             * SyncOptions provide per-sync sync-options, e.g. Validate=false
             */
            syncOptions?: string[];
            /**
             * SyncStrategy describes how to perform the sync
             */
            syncStrategy?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSyncStrategy;
        }

        /**
         * SyncOperationResource contains resources to sync.
         */
        export interface ApplicationOperationSyncResources {
            group?: string;
            kind: string;
            name: string;
            namespace?: string;
        }

        /**
         * Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
         */
        export interface ApplicationOperationSyncSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcePlugin;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationOperationSyncSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationOperationSyncSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectoryJsonnetExtVars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationOperationSyncSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationOperationSyncSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationOperationSyncSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceHelmFileParameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating (either "2" or "3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationOperationSyncSourceHelmFileParameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationOperationSyncSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationOperationSyncSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationOperationSyncSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationOperationSyncSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationOperationSyncSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcePluginEnv[];
            name?: string;
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationOperationSyncSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        /**
         * SyncStrategy describes how to perform the sync
         */
        export interface ApplicationOperationSyncSyncStrategy {
            /**
             * Apply will perform a `kubectl apply` to perform the sync.
             */
            apply?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSyncStrategyApply;
            /**
             * Hook will submit any referenced resources to perform the sync. This is the default strategy
             */
            hook?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSyncStrategyHook;
        }

        /**
         * Apply will perform a `kubectl apply` to perform the sync.
         */
        export interface ApplicationOperationSyncSyncStrategyApply {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        /**
         * Hook will submit any referenced resources to perform the sync. This is the default strategy
         */
        export interface ApplicationOperationSyncSyncStrategyHook {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        export interface ApplicationSetSpec {
            generators: outputs.argoproj.v1alpha1.ApplicationSetSpecGenerators[];
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecSyncPolicy;
            template: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplate;
        }

        export interface ApplicationSetSpecGenerators {
            clusterDecisionResource?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResource;
            clusters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusters;
            git?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGit;
            list?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsList;
            matrix?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrix;
            merge?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMerge;
            pullRequest?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequest;
            scmProvider?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProvider;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResource {
            configMapRef: string;
            labelSelector?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceLabelSelector;
            name?: string;
            requeueAfterSeconds?: number;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplate;
            values?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceLabelSelector {
            matchExpressions?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsClusters {
            selector?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersSelector;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplate;
            values?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsClustersSelector {
            matchExpressions?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsClustersSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsClustersTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsClustersTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsGit {
            directories?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitDirectories[];
            files?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitFiles[];
            repoURL: string;
            requeueAfterSeconds?: number;
            revision: string;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplate;
        }

        export interface ApplicationSetSpecGeneratorsGitDirectories {
            exclude?: boolean;
            path: string;
        }

        export interface ApplicationSetSpecGeneratorsGitFiles {
            path: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsGitTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsGitTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsList {
            elements: {[key: string]: any}[];
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplate;
        }

        export interface ApplicationSetSpecGeneratorsListTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsListTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsListTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrix {
            generators: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGenerators[];
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGenerators {
            clusterDecisionResource?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResource;
            clusters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusters;
            git?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGit;
            list?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsList;
            matrix?: {[key: string]: any};
            merge?: {[key: string]: any};
            pullRequest?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequest;
            scmProvider?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProvider;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResource {
            configMapRef: string;
            labelSelector?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceLabelSelector;
            name?: string;
            requeueAfterSeconds?: number;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplate;
            values?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceLabelSelector {
            matchExpressions?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClusters {
            selector?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersSelector;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplate;
            values?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersSelector {
            matchExpressions?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsClustersTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGit {
            directories?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitDirectories[];
            files?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitFiles[];
            repoURL: string;
            requeueAfterSeconds?: number;
            revision: string;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitDirectories {
            exclude?: boolean;
            path: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitFiles {
            path: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsGitTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsList {
            elements: {[key: string]: any}[];
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsListTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequest {
            github?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestGithub;
            requeueAfterSeconds?: number;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestGithub {
            api?: string;
            labels?: string[];
            owner: string;
            repo: string;
            tokenRef?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestGithubTokenRef;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestGithubTokenRef {
            key: string;
            secretName: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsPullRequestTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProvider {
            cloneProtocol?: string;
            filters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderFilters[];
            github?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderGithub;
            gitlab?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderGitlab;
            requeueAfterSeconds?: number;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderFilters {
            branchMatch?: string;
            labelMatch?: string;
            pathsExist?: string[];
            repositoryMatch?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderGithub {
            allBranches?: boolean;
            api?: string;
            organization: string;
            tokenRef?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderGithubTokenRef;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderGithubTokenRef {
            key: string;
            secretName: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderGitlab {
            allBranches?: boolean;
            api?: string;
            group: string;
            includeSubgroups?: boolean;
            tokenRef?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderGitlabTokenRef;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderGitlabTokenRef {
            key: string;
            secretName: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMatrixGeneratorsScmProviderTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMatrixTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMatrixTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMerge {
            generators: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGenerators[];
            mergeKeys: string[];
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMergeGenerators {
            clusterDecisionResource?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResource;
            clusters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusters;
            git?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGit;
            list?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsList;
            matrix?: {[key: string]: any};
            merge?: {[key: string]: any};
            pullRequest?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequest;
            scmProvider?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProvider;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResource {
            configMapRef: string;
            labelSelector?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceLabelSelector;
            name?: string;
            requeueAfterSeconds?: number;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplate;
            values?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceLabelSelector {
            matchExpressions?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClusters {
            selector?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersSelector;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplate;
            values?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersSelector {
            matchExpressions?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsClustersTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGit {
            directories?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitDirectories[];
            files?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitFiles[];
            repoURL: string;
            requeueAfterSeconds?: number;
            revision: string;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitDirectories {
            exclude?: boolean;
            path: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitFiles {
            path: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsGitTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsList {
            elements: {[key: string]: any}[];
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsListTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequest {
            github?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestGithub;
            requeueAfterSeconds?: number;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestGithub {
            api?: string;
            labels?: string[];
            owner: string;
            repo: string;
            tokenRef?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestGithubTokenRef;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestGithubTokenRef {
            key: string;
            secretName: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsPullRequestTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProvider {
            cloneProtocol?: string;
            filters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderFilters[];
            github?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderGithub;
            gitlab?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderGitlab;
            requeueAfterSeconds?: number;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplate;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderFilters {
            branchMatch?: string;
            labelMatch?: string;
            pathsExist?: string[];
            repositoryMatch?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderGithub {
            allBranches?: boolean;
            api?: string;
            organization: string;
            tokenRef?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderGithubTokenRef;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderGithubTokenRef {
            key: string;
            secretName: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderGitlab {
            allBranches?: boolean;
            api?: string;
            group: string;
            includeSubgroups?: boolean;
            tokenRef?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderGitlabTokenRef;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderGitlabTokenRef {
            key: string;
            secretName: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMergeGeneratorsScmProviderTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsMergeTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsMergeTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullRequest {
            github?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestGithub;
            requeueAfterSeconds?: number;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplate;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestGithub {
            api?: string;
            labels?: string[];
            owner: string;
            repo: string;
            tokenRef?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestGithubTokenRef;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestGithubTokenRef {
            key: string;
            secretName: string;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsPullRequestTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsPullRequestTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmProvider {
            cloneProtocol?: string;
            filters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderFilters[];
            github?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderGithub;
            gitlab?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderGitlab;
            requeueAfterSeconds?: number;
            template?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplate;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderFilters {
            branchMatch?: string;
            labelMatch?: string;
            pathsExist?: string[];
            repositoryMatch?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderGithub {
            allBranches?: boolean;
            api?: string;
            organization: string;
            tokenRef?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderGithubTokenRef;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderGithubTokenRef {
            key: string;
            secretName: string;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderGitlab {
            allBranches?: boolean;
            api?: string;
            group: string;
            includeSubgroups?: boolean;
            tokenRef?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderGitlabTokenRef;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderGitlabTokenRef {
            key: string;
            secretName: string;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpec;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecGeneratorsScmProviderTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecGeneratorsScmProviderTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetSpecSyncPolicy {
            preserveResourcesOnDeletion?: boolean;
        }

        export interface ApplicationSetSpecTemplate {
            metadata: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateMetadata;
            spec: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpec;
        }

        export interface ApplicationSetSpecTemplateMetadata {
            annotations?: {[key: string]: string};
            finalizers?: string[];
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecTemplateSpec {
            destination: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecDestination;
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecIgnoreDifferences[];
            info?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecInfo[];
            project: string;
            revisionHistoryLimit?: number;
            source: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSource;
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSyncPolicy;
        }

        export interface ApplicationSetSpecTemplateSpecDestination {
            name?: string;
            namespace?: string;
            server?: string;
        }

        export interface ApplicationSetSpecTemplateSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSetSpecTemplateSpecInfo {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecTemplateSpecSource {
            chart?: string;
            directory?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceDirectory;
            helm?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceHelm;
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceKsonnet;
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceKustomize;
            path?: string;
            plugin?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourcePlugin;
            repoURL: string;
            targetRevision?: string;
        }

        export interface ApplicationSetSpecTemplateSpecSourceDirectory {
            exclude?: string;
            include?: string;
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        export interface ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet {
            extVars?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVars[];
            libs?: string[];
            tlas?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTlas[];
        }

        export interface ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecTemplateSpecSourceHelm {
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceHelmFileParameters[];
            ignoreMissingValueFiles?: boolean;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceHelmParameters[];
            passCredentials?: boolean;
            releaseName?: string;
            skipCrds?: boolean;
            valueFiles?: string[];
            values?: string;
            version?: string;
        }

        export interface ApplicationSetSpecTemplateSpecSourceHelmFileParameters {
            name?: string;
            path?: string;
        }

        export interface ApplicationSetSpecTemplateSpecSourceHelmParameters {
            forceString?: boolean;
            name?: string;
            value?: string;
        }

        export interface ApplicationSetSpecTemplateSpecSourceKsonnet {
            environment?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourceKsonnetParameters[];
        }

        export interface ApplicationSetSpecTemplateSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecTemplateSpecSourceKustomize {
            commonAnnotations?: {[key: string]: string};
            commonLabels?: {[key: string]: string};
            forceCommonAnnotations?: boolean;
            forceCommonLabels?: boolean;
            images?: string[];
            namePrefix?: string;
            nameSuffix?: string;
            version?: string;
        }

        export interface ApplicationSetSpecTemplateSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSetSpecTemplateSpecSourcePluginEnv {
            name: string;
            value: string;
        }

        export interface ApplicationSetSpecTemplateSpecSyncPolicy {
            automated?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSyncPolicyAutomated;
            retry?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSyncPolicyRetry;
            syncOptions?: string[];
        }

        export interface ApplicationSetSpecTemplateSpecSyncPolicyAutomated {
            allowEmpty?: boolean;
            prune?: boolean;
            selfHeal?: boolean;
        }

        export interface ApplicationSetSpecTemplateSpecSyncPolicyRetry {
            backoff?: outputs.argoproj.v1alpha1.ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff;
            limit?: number;
        }

        export interface ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff {
            duration?: string;
            factor?: number;
            maxDuration?: string;
        }

        export interface ApplicationSetStatus {
            conditions?: outputs.argoproj.v1alpha1.ApplicationSetStatusConditions[];
        }

        export interface ApplicationSetStatusConditions {
            lastTransitionTime?: string;
            message: string;
            reason: string;
            status: string;
            type: string;
        }

        /**
         * ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
         */
        export interface ApplicationSpec {
            /**
             * Destination is a reference to the target Kubernetes server and namespace
             */
            destination: outputs.argoproj.v1alpha1.ApplicationSpecDestination;
            /**
             * IgnoreDifferences is a list of resources and their fields which should be ignored during comparison
             */
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSpecIgnoreDifferences[];
            /**
             * Info contains a list of information (URLs, email addresses, and plain text) that relates to the application
             */
            info?: outputs.argoproj.v1alpha1.ApplicationSpecInfo[];
            /**
             * Project is a reference to the project this application belongs to. The empty string means that application belongs to the 'default' project.
             */
            project: string;
            /**
             * RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
             */
            revisionHistoryLimit?: number;
            /**
             * Source is a reference to the location of the application's manifests or chart
             */
            source: outputs.argoproj.v1alpha1.ApplicationSpecSource;
            /**
             * SyncPolicy controls when and how a sync will be performed
             */
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSpecSyncPolicy;
        }

        /**
         * Destination is a reference to the target Kubernetes server and namespace
         */
        export interface ApplicationSpecDestination {
            /**
             * Name is an alternate way of specifying the target cluster by its symbolic name
             */
            name?: string;
            /**
             * Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
             */
            namespace?: string;
            /**
             * Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API
             */
            server?: string;
        }

        /**
         * ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
         */
        export interface ApplicationSpecIgnoreDifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            /**
             * ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take precedence over the desired state defined in the SCM and won't be displayed in diffs
             */
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSpecInfo {
            name: string;
            value: string;
        }

        /**
         * Source is a reference to the location of the application's manifests or chart
         */
        export interface ApplicationSpecSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationSpecSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSpecSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSpecSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationSpecSourcePlugin;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationSpecSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationSpecSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectoryJsonnetExtVars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationSpecSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSpecSourceHelmFileParameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationSpecSourceHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating (either "2" or "3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationSpecSourceHelmFileParameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationSpecSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationSpecSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationSpecSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationSpecSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationSpecSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationSpecSourcePluginEnv[];
            name?: string;
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationSpecSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        /**
         * SyncPolicy controls when and how a sync will be performed
         */
        export interface ApplicationSpecSyncPolicy {
            /**
             * Automated will keep an application synced to the target revision
             */
            automated?: outputs.argoproj.v1alpha1.ApplicationSpecSyncPolicyAutomated;
            /**
             * Retry controls failed sync retry behavior
             */
            retry?: outputs.argoproj.v1alpha1.ApplicationSpecSyncPolicyRetry;
            /**
             * Options allow you to specify whole app sync-options
             */
            syncOptions?: string[];
        }

        /**
         * Automated will keep an application synced to the target revision
         */
        export interface ApplicationSpecSyncPolicyAutomated {
            /**
             * AllowEmpty allows apps have zero live resources (default: false)
             */
            allowEmpty?: boolean;
            /**
             * Prune specifies whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false)
             */
            prune?: boolean;
            /**
             * SelfHeal specifes whether to revert resources back to their desired state upon modification in the cluster (default: false)
             */
            selfHeal?: boolean;
        }

        /**
         * Retry controls failed sync retry behavior
         */
        export interface ApplicationSpecSyncPolicyRetry {
            /**
             * Backoff controls how to backoff on subsequent retries of failed syncs
             */
            backoff?: outputs.argoproj.v1alpha1.ApplicationSpecSyncPolicyRetryBackoff;
            /**
             * Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
             */
            limit?: number;
        }

        /**
         * Backoff controls how to backoff on subsequent retries of failed syncs
         */
        export interface ApplicationSpecSyncPolicyRetryBackoff {
            /**
             * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
             */
            duration?: string;
            /**
             * Factor is a factor to multiply the base duration after each failed retry
             */
            factor?: number;
            /**
             * MaxDuration is the maximum amount of time allowed for the backoff strategy
             */
            maxDuration?: string;
        }

        /**
         * ApplicationStatus contains status information for the application
         */
        export interface ApplicationStatus {
            /**
             * Conditions is a list of currently observed application conditions
             */
            conditions?: outputs.argoproj.v1alpha1.ApplicationStatusConditions[];
            /**
             * Health contains information about the application's current health status
             */
            health?: outputs.argoproj.v1alpha1.ApplicationStatusHealth;
            /**
             * History contains information about the application's sync history
             */
            history?: outputs.argoproj.v1alpha1.ApplicationStatusHistory[];
            /**
             * ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field
             */
            observedAt?: string;
            /**
             * OperationState contains information about any ongoing operations, such as a sync
             */
            operationState?: outputs.argoproj.v1alpha1.ApplicationStatusOperationState;
            /**
             * ReconciledAt indicates when the application state was reconciled using the latest git version
             */
            reconciledAt?: string;
            /**
             * Resources is a list of Kubernetes resources managed by this application
             */
            resources?: outputs.argoproj.v1alpha1.ApplicationStatusResources[];
            /**
             * SourceType specifies the type of this application
             */
            sourceType?: string;
            /**
             * Summary contains a list of URLs and container images used by this application
             */
            summary?: outputs.argoproj.v1alpha1.ApplicationStatusSummary;
            /**
             * Sync contains information about the application's current sync status
             */
            sync?: outputs.argoproj.v1alpha1.ApplicationStatusSync;
        }

        /**
         * ApplicationCondition contains details about an application condition, which is usually an error or warning
         */
        export interface ApplicationStatusConditions {
            /**
             * LastTransitionTime is the time the condition was last observed
             */
            lastTransitionTime?: string;
            /**
             * Message contains human-readable message indicating details about condition
             */
            message: string;
            /**
             * Type is an application condition type
             */
            type: string;
        }

        /**
         * Health contains information about the application's current health status
         */
        export interface ApplicationStatusHealth {
            /**
             * Message is a human-readable informational message describing the health status
             */
            message?: string;
            /**
             * Status holds the status code of the application or resource
             */
            status?: string;
        }

        /**
         * RevisionHistory contains history information about a previous sync
         */
        export interface ApplicationStatusHistory {
            /**
             * DeployStartedAt holds the time the sync operation started
             */
            deployStartedAt?: string;
            /**
             * DeployedAt holds the time the sync operation completed
             */
            deployedAt: string;
            /**
             * ID is an auto incrementing identifier of the RevisionHistory
             */
            id: number;
            /**
             * Revision holds the revision the sync was performed against
             */
            revision: string;
            /**
             * Source is a reference to the application source used for the sync operation
             */
            source?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySource;
        }

        /**
         * Source is a reference to the application source used for the sync operation
         */
        export interface ApplicationStatusHistorySource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcePlugin;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusHistorySourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusHistorySourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectoryJsonnetExtVars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusHistorySourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusHistorySourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusHistorySourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceHelmFileParameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating (either "2" or "3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusHistorySourceHelmFileParameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusHistorySourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationStatusHistorySourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationStatusHistorySourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusHistorySourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationStatusHistorySourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcePluginEnv[];
            name?: string;
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusHistorySourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        /**
         * OperationState contains information about any ongoing operations, such as a sync
         */
        export interface ApplicationStatusOperationState {
            /**
             * FinishedAt contains time of operation completion
             */
            finishedAt?: string;
            /**
             * Message holds any pertinent messages when attempting to perform operation (typically errors).
             */
            message?: string;
            /**
             * Operation is the original requested operation
             */
            operation: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperation;
            /**
             * Phase is the current phase of the operation
             */
            phase: string;
            /**
             * RetryCount contains time of operation retries
             */
            retryCount?: number;
            /**
             * StartedAt contains time of operation start
             */
            startedAt: string;
            /**
             * SyncResult is the result of a Sync operation
             */
            syncResult?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResult;
        }

        /**
         * Operation is the original requested operation
         */
        export interface ApplicationStatusOperationStateOperation {
            /**
             * Info is a list of informational items for this operation
             */
            info?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationInfo[];
            /**
             * InitiatedBy contains information about who initiated the operations
             */
            initiatedBy?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationInitiatedBy;
            /**
             * Retry controls the strategy to apply if a sync fails
             */
            retry?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationRetry;
            /**
             * Sync contains parameters for the operation
             */
            sync?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSync;
        }

        export interface ApplicationStatusOperationStateOperationInfo {
            name: string;
            value: string;
        }

        /**
         * InitiatedBy contains information about who initiated the operations
         */
        export interface ApplicationStatusOperationStateOperationInitiatedBy {
            /**
             * Automated is set to true if operation was initiated automatically by the application controller.
             */
            automated?: boolean;
            /**
             * Username contains the name of a user who started operation
             */
            username?: string;
        }

        /**
         * Retry controls the strategy to apply if a sync fails
         */
        export interface ApplicationStatusOperationStateOperationRetry {
            /**
             * Backoff controls how to backoff on subsequent retries of failed syncs
             */
            backoff?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationRetryBackoff;
            /**
             * Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
             */
            limit?: number;
        }

        /**
         * Backoff controls how to backoff on subsequent retries of failed syncs
         */
        export interface ApplicationStatusOperationStateOperationRetryBackoff {
            /**
             * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
             */
            duration?: string;
            /**
             * Factor is a factor to multiply the base duration after each failed retry
             */
            factor?: number;
            /**
             * MaxDuration is the maximum amount of time allowed for the backoff strategy
             */
            maxDuration?: string;
        }

        /**
         * Sync contains parameters for the operation
         */
        export interface ApplicationStatusOperationStateOperationSync {
            /**
             * DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
             */
            dryRun?: boolean;
            /**
             * Manifests is an optional field that overrides sync source with a local directory for development
             */
            manifests?: string[];
            /**
             * Prune specifies to delete resources from the cluster that are no longer tracked in git
             */
            prune?: boolean;
            /**
             * Resources describes which resources shall be part of the sync
             */
            resources?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncResources[];
            /**
             * Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.
             */
            revision?: string;
            /**
             * Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
             */
            source?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSource;
            /**
             * SyncOptions provide per-sync sync-options, e.g. Validate=false
             */
            syncOptions?: string[];
            /**
             * SyncStrategy describes how to perform the sync
             */
            syncStrategy?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSyncStrategy;
        }

        /**
         * SyncOperationResource contains resources to sync.
         */
        export interface ApplicationStatusOperationStateOperationSyncResources {
            group?: string;
            kind: string;
            name: string;
            namespace?: string;
        }

        /**
         * Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
         */
        export interface ApplicationStatusOperationStateOperationSyncSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourcePlugin;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating (either "2" or "3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationStatusOperationStateOperationSyncSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourcePluginEnv[];
            name?: string;
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusOperationStateOperationSyncSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        /**
         * SyncStrategy describes how to perform the sync
         */
        export interface ApplicationStatusOperationStateOperationSyncSyncStrategy {
            /**
             * Apply will perform a `kubectl apply` to perform the sync.
             */
            apply?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSyncStrategyApply;
            /**
             * Hook will submit any referenced resources to perform the sync. This is the default strategy
             */
            hook?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSyncStrategyHook;
        }

        /**
         * Apply will perform a `kubectl apply` to perform the sync.
         */
        export interface ApplicationStatusOperationStateOperationSyncSyncStrategyApply {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        /**
         * Hook will submit any referenced resources to perform the sync. This is the default strategy
         */
        export interface ApplicationStatusOperationStateOperationSyncSyncStrategyHook {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        /**
         * SyncResult is the result of a Sync operation
         */
        export interface ApplicationStatusOperationStateSyncResult {
            /**
             * Resources contains a list of sync result items for each individual resource in a sync operation
             */
            resources?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultResources[];
            /**
             * Revision holds the revision this sync operation was performed to
             */
            revision: string;
            /**
             * Source records the application source information of the sync, used for comparing auto-sync
             */
            source?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSource;
        }

        /**
         * ResourceResult holds the operation result details of a specific resource
         */
        export interface ApplicationStatusOperationStateSyncResultResources {
            /**
             * Group specifies the API group of the resource
             */
            group: string;
            /**
             * HookPhase contains the state of any operation associated with this resource OR hook This can also contain values for non-hook resources.
             */
            hookPhase?: string;
            /**
             * HookType specifies the type of the hook. Empty for non-hook resources
             */
            hookType?: string;
            /**
             * Kind specifies the API kind of the resource
             */
            kind: string;
            /**
             * Message contains an informational or error message for the last sync OR operation
             */
            message?: string;
            /**
             * Name specifies the name of the resource
             */
            name: string;
            /**
             * Namespace specifies the target namespace of the resource
             */
            namespace: string;
            /**
             * Status holds the final result of the sync. Will be empty if the resources is yet to be applied/pruned and is always zero-value for hooks
             */
            status?: string;
            /**
             * SyncPhase indicates the particular phase of the sync that this result was acquired in
             */
            syncPhase?: string;
            /**
             * Version specifies the API version of the resource
             */
            version: string;
        }

        /**
         * Source records the application source information of the sync, used for comparing auto-sync
         */
        export interface ApplicationStatusOperationStateSyncResultSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourcePlugin;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusOperationStateSyncResultSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusOperationStateSyncResultSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceHelmFileParameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating (either "2" or "3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationStateSyncResultSourceHelmFileParameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationStateSyncResultSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationStatusOperationStateSyncResultSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationStatusOperationStateSyncResultSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusOperationStateSyncResultSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationStatusOperationStateSyncResultSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourcePluginEnv[];
            name?: string;
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusOperationStateSyncResultSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        /**
         * ResourceStatus holds the current sync and health status of a resource TODO: describe members of this type
         */
        export interface ApplicationStatusResources {
            group?: string;
            /**
             * HealthStatus contains information about the currently observed health state of an application or resource
             */
            health?: outputs.argoproj.v1alpha1.ApplicationStatusResourcesHealth;
            hook?: boolean;
            kind?: string;
            name?: string;
            namespace?: string;
            requiresPruning?: boolean;
            /**
             * SyncStatusCode is a type which represents possible comparison results
             */
            status?: string;
            version?: string;
        }

        /**
         * HealthStatus contains information about the currently observed health state of an application or resource
         */
        export interface ApplicationStatusResourcesHealth {
            /**
             * Message is a human-readable informational message describing the health status
             */
            message?: string;
            /**
             * Status holds the status code of the application or resource
             */
            status?: string;
        }

        /**
         * Summary contains a list of URLs and container images used by this application
         */
        export interface ApplicationStatusSummary {
            /**
             * ExternalURLs holds all external URLs of application child resources.
             */
            externalURLs?: string[];
            /**
             * Images holds all images of application child resources.
             */
            images?: string[];
        }

        /**
         * Sync contains information about the application's current sync status
         */
        export interface ApplicationStatusSync {
            /**
             * ComparedTo contains information about what has been compared
             */
            comparedTo?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedTo;
            /**
             * Revision contains information about the revision the comparison has been performed to
             */
            revision?: string;
            /**
             * Status is the sync state of the comparison
             */
            status: string;
        }

        /**
         * ComparedTo contains information about what has been compared
         */
        export interface ApplicationStatusSyncComparedTo {
            /**
             * Destination is a reference to the application's destination used for comparison
             */
            destination: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToDestination;
            /**
             * Source is a reference to the application's source used for comparison
             */
            source: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSource;
        }

        /**
         * Destination is a reference to the application's destination used for comparison
         */
        export interface ApplicationStatusSyncComparedToDestination {
            /**
             * Name is an alternate way of specifying the target cluster by its symbolic name
             */
            name?: string;
            /**
             * Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
             */
            namespace?: string;
            /**
             * Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API
             */
            server?: string;
        }

        /**
         * Source is a reference to the application's source used for comparison
         */
        export interface ApplicationStatusSyncComparedToSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourcePlugin;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusSyncComparedToSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusSyncComparedToSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusSyncComparedToSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceHelmFileParameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating (either "2" or "3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusSyncComparedToSourceHelmFileParameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusSyncComparedToSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationStatusSyncComparedToSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationStatusSyncComparedToSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusSyncComparedToSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationStatusSyncComparedToSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourcePluginEnv[];
            name?: string;
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusSyncComparedToSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }
    }
}

export namespace bitnami {
    export namespace v1alpha1 {
    }
}

export namespace certmanager {
    export namespace v1 {
        /**
         * Desired state of the CertificateRequest resource.
         */
        export interface CertificateRequestSpec {
            /**
             * The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.
             */
            duration?: string;
            /**
             * Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            extra?: {[key: string]: string[]};
            /**
             * Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            groups?: string[];
            /**
             * IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.
             */
            isCA?: boolean;
            /**
             * IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.
             */
            issuerRef: outputs.certmanager.v1.CertificateRequestSpecIssuerRef;
            /**
             * The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.
             */
            request: string;
            /**
             * UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            uid?: string;
            /**
             * Usages is the set of x509 usages that are requested for the certificate. If usages are set they SHOULD be encoded inside the CSR spec Defaults to `digital signature` and `key encipherment` if not specified.
             */
            usages?: string[];
            /**
             * Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            username?: string;
        }

        /**
         * IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.
         */
        export interface CertificateRequestSpecIssuerRef {
            /**
             * Group of the resource being referred to.
             */
            group?: string;
            /**
             * Kind of the resource being referred to.
             */
            kind?: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        /**
         * Status of the CertificateRequest. This is set and managed automatically.
         */
        export interface CertificateRequestStatus {
            /**
             * The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.
             */
            ca?: string;
            /**
             * The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.
             */
            certificate?: string;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.
             */
            conditions?: outputs.certmanager.v1.CertificateRequestStatusConditions[];
            /**
             * FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.
             */
            failureTime?: string;
        }

        /**
         * CertificateRequestCondition contains condition information for a CertificateRequest.
         */
        export interface CertificateRequestStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: string;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: string;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).
             */
            type: string;
        }

        /**
         * Desired state of the Certificate resource.
         */
        export interface CertificateSpec {
            /**
             * AdditionalOutputFormats defines extra output formats of the private key and signed certificate chain to be written to this Certificate's target Secret. This is an Alpha Feature and is only enabled with the `--feature-gates=AdditionalCertificateOutputFormats=true` option on both the controller and webhook components.
             */
            additionalOutputFormats?: outputs.certmanager.v1.CertificateSpecAdditionalOutputFormats[];
            /**
             * CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4
             */
            commonName?: string;
            /**
             * DNSNames is a list of DNS subjectAltNames to be set on the Certificate.
             */
            dnsNames?: string[];
            /**
             * The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If unset this defaults to 90 days. Certificate will be renewed either 2/3 through its duration or `renewBefore` period before its expiry, whichever is later. Minimum accepted duration is 1 hour. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
             */
            duration?: string;
            /**
             * EmailAddresses is a list of email subjectAltNames to be set on the Certificate.
             */
            emailAddresses?: string[];
            /**
             * EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest
             */
            encodeUsagesInRequest?: boolean;
            /**
             * IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.
             */
            ipAddresses?: string[];
            /**
             * IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.
             */
            isCA?: boolean;
            /**
             * IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
             */
            issuerRef: outputs.certmanager.v1.CertificateSpecIssuerRef;
            /**
             * Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
             */
            keystores?: outputs.certmanager.v1.CertificateSpecKeystores;
            /**
             * Options to control private keys used for the Certificate.
             */
            privateKey?: outputs.certmanager.v1.CertificateSpecPrivateKey;
            /**
             * How long before the currently issued certificate's expiry cert-manager should renew the certificate. The default is 2/3 of the issued certificate's duration. Minimum accepted value is 5 minutes. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
             */
            renewBefore?: string;
            /**
             * revisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single `CertificateRequest` created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. If set, revisionHistoryLimit must be a value of `1` or greater. If unset (`nil`), revisions will not be garbage collected. Default value is `nil`.
             */
            revisionHistoryLimit?: number;
            /**
             * SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.
             */
            secretName: string;
            /**
             * SecretTemplate defines annotations and labels to be copied to the Certificate's Secret. Labels and annotations on the Secret will be changed as they appear on the SecretTemplate when added or removed. SecretTemplate annotations are added in conjunction with, and cannot overwrite, the base set of annotations cert-manager sets on the Certificate's Secret.
             */
            secretTemplate?: outputs.certmanager.v1.CertificateSpecSecretTemplate;
            /**
             * Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
             */
            subject?: outputs.certmanager.v1.CertificateSpecSubject;
            /**
             * URIs is a list of URI subjectAltNames to be set on the Certificate.
             */
            uris?: string[];
            /**
             * Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
             */
            usages?: string[];
        }

        /**
         * CertificateAdditionalOutputFormat defines an additional output format of a Certificate resource. These contain supplementary data formats of the signed certificate chain and paired private key.
         */
        export interface CertificateSpecAdditionalOutputFormats {
            /**
             * Type is the name of the format type that should be written to the Certificate's target Secret.
             */
            type: string;
        }

        /**
         * IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
         */
        export interface CertificateSpecIssuerRef {
            /**
             * Group of the resource being referred to.
             */
            group?: string;
            /**
             * Kind of the resource being referred to.
             */
            kind?: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        /**
         * Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
         */
        export interface CertificateSpecKeystores {
            /**
             * JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
             */
            jks?: outputs.certmanager.v1.CertificateSpecKeystoresJks;
            /**
             * PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
             */
            pkcs12?: outputs.certmanager.v1.CertificateSpecKeystoresPkcs12;
        }

        /**
         * JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresJks {
            /**
             * Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance. A file named `truststore.jks` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
             */
            create: boolean;
            /**
             * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
             */
            passwordSecretRef: outputs.certmanager.v1.CertificateSpecKeystoresJksPasswordSecretRef;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
         */
        export interface CertificateSpecKeystoresJksPasswordSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresPkcs12 {
            /**
             * Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance. A file named `truststore.p12` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
             */
            create: boolean;
            /**
             * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
             */
            passwordSecretRef: outputs.certmanager.v1.CertificateSpecKeystoresPkcs12PasswordSecretRef;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
         */
        export interface CertificateSpecKeystoresPkcs12PasswordSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Options to control private keys used for the Certificate.
         */
        export interface CertificateSpecPrivateKey {
            /**
             * Algorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either `RSA`,`Ed25519` or `ECDSA` If `algorithm` is specified and `size` is not provided, key size of 256 will be used for `ECDSA` key algorithm and key size of 2048 will be used for `RSA` key algorithm. key size is ignored when using the `Ed25519` key algorithm.
             */
            algorithm?: string;
            /**
             * The private key cryptography standards (PKCS) encoding for this certificate's private key to be encoded in. If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1 and PKCS#8, respectively. Defaults to `PKCS1` if not specified.
             */
            encoding?: string;
            /**
             * RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.
             */
            rotationPolicy?: string;
            /**
             * Size is the key bit size of the corresponding private key for this certificate. If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. If `algorithm` is set to `Ed25519`, Size is ignored. No other values are allowed.
             */
            size?: number;
        }

        /**
         * SecretTemplate defines annotations and labels to be copied to the Certificate's Secret. Labels and annotations on the Secret will be changed as they appear on the SecretTemplate when added or removed. SecretTemplate annotations are added in conjunction with, and cannot overwrite, the base set of annotations cert-manager sets on the Certificate's Secret.
         */
        export interface CertificateSpecSecretTemplate {
            /**
             * Annotations is a key value map to be copied to the target Kubernetes Secret.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels is a key value map to be copied to the target Kubernetes Secret.
             */
            labels?: {[key: string]: string};
        }

        /**
         * Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
         */
        export interface CertificateSpecSubject {
            /**
             * Countries to be used on the Certificate.
             */
            countries?: string[];
            /**
             * Cities to be used on the Certificate.
             */
            localities?: string[];
            /**
             * Organizational Units to be used on the Certificate.
             */
            organizationalUnits?: string[];
            /**
             * Organizations to be used on the Certificate.
             */
            organizations?: string[];
            /**
             * Postal codes to be used on the Certificate.
             */
            postalCodes?: string[];
            /**
             * State/Provinces to be used on the Certificate.
             */
            provinces?: string[];
            /**
             * Serial number to be used on the Certificate.
             */
            serialNumber?: string;
            /**
             * Street addresses to be used on the Certificate.
             */
            streetAddresses?: string[];
        }

        /**
         * Status of the Certificate. This is set and managed automatically.
         */
        export interface CertificateStatus {
            /**
             * List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
             */
            conditions?: outputs.certmanager.v1.CertificateStatusConditions[];
            /**
             * The number of continuous failed issuance attempts up till now. This field gets removed (if set) on a successful issuance and gets set to 1 if unset and an issuance has failed. If an issuance has failed, the delay till the next issuance will be calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts - 1).
             */
            failedIssuanceAttempts?: number;
            /**
             * LastFailureTime is the time as recorded by the Certificate controller of the most recent failure to complete a CertificateRequest for this Certificate resource. If set, cert-manager will not re-request another Certificate until 1 hour has elapsed from this time.
             */
            lastFailureTime?: string;
            /**
             * The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
             */
            nextPrivateKeySecretName?: string;
            /**
             * The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
             */
            notAfter?: string;
            /**
             * The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.
             */
            notBefore?: string;
            /**
             * RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
             */
            renewalTime?: string;
            /**
             * The current 'revision' of the certificate as issued. 
             *  When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field. 
             *  Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate. 
             *  Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field.
             */
            revision?: number;
        }

        /**
         * CertificateCondition contains condition information for an Certificate.
         */
        export interface CertificateStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: string;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: string;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Certificate.
             */
            observedGeneration?: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`, `Issuing`).
             */
            type: string;
        }

        /**
         * Desired state of the ClusterIssuer resource.
         */
        export interface ClusterIssuerSpec {
            /**
             * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
             */
            acme?: outputs.certmanager.v1.ClusterIssuerSpecAcme;
            /**
             * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
             */
            ca?: outputs.certmanager.v1.ClusterIssuerSpecCa;
            /**
             * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
             */
            selfSigned?: outputs.certmanager.v1.ClusterIssuerSpecSelfSigned;
            /**
             * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
             */
            vault?: outputs.certmanager.v1.ClusterIssuerSpecVault;
            /**
             * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
             */
            venafi?: outputs.certmanager.v1.ClusterIssuerSpecVenafi;
        }

        /**
         * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
         */
        export interface ClusterIssuerSpecAcme {
            /**
             * Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
             */
            disableAccountKeyGeneration?: boolean;
            /**
             * Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
             */
            email?: string;
            /**
             * Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
             */
            enableDurationFeature?: boolean;
            /**
             * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
             */
            externalAccountBinding?: outputs.certmanager.v1.ClusterIssuerSpecAcmeExternalAccountBinding;
            /**
             * PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
             */
            preferredChain?: string;
            /**
             * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
             */
            privateKeySecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmePrivateKeySecretRef;
            /**
             * Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
             */
            server: string;
            /**
             * Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have their TLS certificate validated (i.e. insecure connections will be allowed). Only enable this option in development environments. The cert-manager system installed roots will be used to verify connections to the ACME server if this is false. Defaults to false.
             */
            skipTLSVerify?: boolean;
            /**
             * Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
             */
            solvers?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolvers[];
        }

        /**
         * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
         */
        export interface ClusterIssuerSpecAcmeExternalAccountBinding {
            /**
             * Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.
             */
            keyAlgorithm?: string;
            /**
             * keyID is the ID of the CA key that the External Account is bound to.
             */
            keyID: string;
            /**
             * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
             */
            keySecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRef;
        }

        /**
         * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
         */
        export interface ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
         */
        export interface ClusterIssuerSpecAcmePrivateKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.
         */
        export interface ClusterIssuerSpecAcmeSolvers {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversSelector;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01 {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AcmeDNS;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Akamai;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDNS;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudDNS;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Cloudflare;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: string;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Digitalocean;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Rfc2136;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Webhook;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AcmeDNS {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRef;
            host: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Akamai {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef;
            serviceConsumerDomain: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDNS {
            /**
             * if both this and ClientSecret are left unset MSI will be used
             */
            clientID?: string;
            /**
             * if both this and ClientID are left unset MSI will be used
             */
            clientSecretSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRef;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: string;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: string;
            /**
             * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
             */
            managedIdentity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentity;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: string;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: string;
            /**
             * when specifying ClientID and ClientSecret then this field is also needed
             */
            tenantID?: string;
        }

        /**
         * if both this and ClientID are left unset MSI will be used
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentity {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: string;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             */
            resourceID?: string;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudDNS {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: string;
            project: string;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRef;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Cloudflare {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: string;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Digitalocean {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136 {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: string;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: string;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: string;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53 {
            /**
             * The AccessKeyID is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: string;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: string;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: string;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: string;
            /**
             * The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef;
        }

        /**
         * The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Webhook {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: {[key: string]: any};
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: string;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01 {
            /**
             * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoute;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01Ingress;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoute {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: {[key: string]: string};
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/v1alpha2/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs[];
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * ParentRef identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid. 
         *  References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs {
            /**
             * Group is the group of the referent. 
             *  Support: Core
             */
            group?: string;
            /**
             * Kind is kind of the referent. 
             *  Support: Core (Gateway) Support: Custom (Other Resources)
             */
            kind?: string;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route. 
             *  Support: Core
             */
            namespace?: string;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: string;
        }
        /**
         * clusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsProvideDefaults sets the appropriate defaults for ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs
         */
        export function clusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsProvideDefaults(val: ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs): ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01Ingress {
            /**
             * The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.
             */
            class?: string;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplate;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.
             */
            name?: string;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplate;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplate {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: {[key: string]: string};
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplate {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
             */
            spec?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: {[key: string]: string};
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: string;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: string;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface ClusterIssuerSpecAcmeSolversSelector {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: string[];
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: string[];
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
         */
        export interface ClusterIssuerSpecCa {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
             */
            crlDistributionPoints?: string[];
            /**
             * The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
             */
            ocspServers?: string[];
            /**
             * SecretName is the name of the secret used to sign Certificates issued by this Issuer.
             */
            secretName: string;
        }

        /**
         * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
         */
        export interface ClusterIssuerSpecSelfSigned {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
             */
            crlDistributionPoints?: string[];
        }

        /**
         * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
         */
        export interface ClusterIssuerSpecVault {
            /**
             * Auth configures how cert-manager authenticates with the Vault server.
             */
            auth: outputs.certmanager.v1.ClusterIssuerSpecVaultAuth;
            /**
             * PEM-encoded CA bundle (base64-encoded) used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.
             */
            caBundle?: string;
            /**
             * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
             */
            namespace?: string;
            /**
             * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
             */
            path: string;
            /**
             * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
             */
            server: string;
        }

        /**
         * Auth configures how cert-manager authenticates with the Vault server.
         */
        export interface ClusterIssuerSpecVaultAuth {
            /**
             * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
             */
            appRole?: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthAppRole;
            /**
             * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
             */
            kubernetes?: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthKubernetes;
            /**
             * TokenSecretRef authenticates with Vault by presenting a token.
             */
            tokenSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthTokenSecretRef;
        }

        /**
         * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
         */
        export interface ClusterIssuerSpecVaultAuthAppRole {
            /**
             * Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
             */
            path: string;
            /**
             * RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
             */
            roleId: string;
            /**
             * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
             */
            secretRef: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthAppRoleSecretRef;
        }

        /**
         * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
         */
        export interface ClusterIssuerSpecVaultAuthAppRoleSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetes {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
             */
            mountPath?: string;
            /**
             * A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
             */
            role: string;
            /**
             * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
             */
            secretRef: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthKubernetesSecretRef;
        }

        /**
         * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetesSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * TokenSecretRef authenticates with Vault by presenting a token.
         */
        export interface ClusterIssuerSpecVaultAuthTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
         */
        export interface ClusterIssuerSpecVenafi {
            /**
             * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
             */
            cloud?: outputs.certmanager.v1.ClusterIssuerSpecVenafiCloud;
            /**
             * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
             */
            tpp?: outputs.certmanager.v1.ClusterIssuerSpecVenafiTpp;
            /**
             * Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
             */
            zone: string;
        }

        /**
         * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface ClusterIssuerSpecVenafiCloud {
            /**
             * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
             */
            apiTokenSecretRef: outputs.certmanager.v1.ClusterIssuerSpecVenafiCloudApiTokenSecretRef;
            /**
             * URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
             */
            url?: string;
        }

        /**
         * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
         */
        export interface ClusterIssuerSpecVenafiCloudApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface ClusterIssuerSpecVenafiTpp {
            /**
             * CABundle is a PEM encoded TLS certificate to use to verify connections to the TPP instance. If specified, system roots will not be used and the issuing CA for the TPP instance must be verifiable using the provided root. If not specified, the connection will be verified using the cert-manager system root certificates.
             */
            caBundle?: string;
            /**
             * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
             */
            credentialsRef: outputs.certmanager.v1.ClusterIssuerSpecVenafiTppCredentialsRef;
            /**
             * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
             */
            url: string;
        }

        /**
         * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
         */
        export interface ClusterIssuerSpecVenafiTppCredentialsRef {
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Status of the ClusterIssuer. This is set and managed automatically.
         */
        export interface ClusterIssuerStatus {
            /**
             * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
             */
            acme?: outputs.certmanager.v1.ClusterIssuerStatusAcme;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
             */
            conditions?: outputs.certmanager.v1.ClusterIssuerStatusConditions[];
        }

        /**
         * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
         */
        export interface ClusterIssuerStatusAcme {
            /**
             * LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
             */
            lastRegisteredEmail?: string;
            /**
             * URI is the unique account identifier, which can also be used to retrieve account details from the CA
             */
            uri?: string;
        }

        /**
         * IssuerCondition contains condition information for an Issuer.
         */
        export interface ClusterIssuerStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: string;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: string;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
             */
            observedGeneration?: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`).
             */
            type: string;
        }

        /**
         * Desired state of the Issuer resource.
         */
        export interface IssuerSpec {
            /**
             * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
             */
            acme?: outputs.certmanager.v1.IssuerSpecAcme;
            /**
             * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
             */
            ca?: outputs.certmanager.v1.IssuerSpecCa;
            /**
             * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
             */
            selfSigned?: outputs.certmanager.v1.IssuerSpecSelfSigned;
            /**
             * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
             */
            vault?: outputs.certmanager.v1.IssuerSpecVault;
            /**
             * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
             */
            venafi?: outputs.certmanager.v1.IssuerSpecVenafi;
        }

        /**
         * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
         */
        export interface IssuerSpecAcme {
            /**
             * Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
             */
            disableAccountKeyGeneration?: boolean;
            /**
             * Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
             */
            email?: string;
            /**
             * Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
             */
            enableDurationFeature?: boolean;
            /**
             * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
             */
            externalAccountBinding?: outputs.certmanager.v1.IssuerSpecAcmeExternalAccountBinding;
            /**
             * PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
             */
            preferredChain?: string;
            /**
             * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
             */
            privateKeySecretRef: outputs.certmanager.v1.IssuerSpecAcmePrivateKeySecretRef;
            /**
             * Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
             */
            server: string;
            /**
             * Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have their TLS certificate validated (i.e. insecure connections will be allowed). Only enable this option in development environments. The cert-manager system installed roots will be used to verify connections to the ACME server if this is false. Defaults to false.
             */
            skipTLSVerify?: boolean;
            /**
             * Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
             */
            solvers?: outputs.certmanager.v1.IssuerSpecAcmeSolvers[];
        }

        /**
         * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
         */
        export interface IssuerSpecAcmeExternalAccountBinding {
            /**
             * Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.
             */
            keyAlgorithm?: string;
            /**
             * keyID is the ID of the CA key that the External Account is bound to.
             */
            keyID: string;
            /**
             * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
             */
            keySecretRef: outputs.certmanager.v1.IssuerSpecAcmeExternalAccountBindingKeySecretRef;
        }

        /**
         * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
         */
        export interface IssuerSpecAcmeExternalAccountBindingKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
         */
        export interface IssuerSpecAcmePrivateKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.
         */
        export interface IssuerSpecAcmeSolvers {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: outputs.certmanager.v1.IssuerSpecAcmeSolversSelector;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface IssuerSpecAcmeSolversDns01 {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AcmeDNS;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Akamai;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzureDNS;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudDNS;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Cloudflare;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: string;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Digitalocean;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Rfc2136;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Webhook;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AcmeDNS {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRef;
            host: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Akamai {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef;
            serviceConsumerDomain: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AzureDNS {
            /**
             * if both this and ClientSecret are left unset MSI will be used
             */
            clientID?: string;
            /**
             * if both this and ClientID are left unset MSI will be used
             */
            clientSecretSecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRef;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: string;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: string;
            /**
             * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
             */
            managedIdentity?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzureDNSManagedIdentity;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: string;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: string;
            /**
             * when specifying ClientID and ClientSecret then this field is also needed
             */
            tenantID?: string;
        }

        /**
         * if both this and ClientID are left unset MSI will be used
         */
        export interface IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
         */
        export interface IssuerSpecAcmeSolversDns01AzureDNSManagedIdentity {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: string;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             */
            resourceID?: string;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01CloudDNS {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: string;
            project: string;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRef;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Cloudflare {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: string;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Digitalocean {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Rfc2136 {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: string;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: string;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: string;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Route53 {
            /**
             * The AccessKeyID is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: string;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: string;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: string;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: string;
            /**
             * The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef;
        }

        /**
         * The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Webhook {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: {[key: string]: any};
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: string;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface IssuerSpecAcmeSolversHttp01 {
            /**
             * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoute;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01Ingress;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoute {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: {[key: string]: string};
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/v1alpha2/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs[];
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * ParentRef identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid. 
         *  References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs {
            /**
             * Group is the group of the referent. 
             *  Support: Core
             */
            group?: string;
            /**
             * Kind is kind of the referent. 
             *  Support: Core (Gateway) Support: Custom (Other Resources)
             */
            kind?: string;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route. 
             *  Support: Core
             */
            namespace?: string;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: string;
        }
        /**
         * issuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsProvideDefaults sets the appropriate defaults for IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs
         */
        export function issuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsProvideDefaults(val: IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs): IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface IssuerSpecAcmeSolversHttp01Ingress {
            /**
             * The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.
             */
            class?: string;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressIngressTemplate;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.
             */
            name?: string;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplate;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressIngressTemplate {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: {[key: string]: string};
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplate {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
             */
            spec?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpec;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: {[key: string]: string};
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpec {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: string;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: string;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface IssuerSpecAcmeSolversSelector {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: string[];
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: string[];
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
         */
        export interface IssuerSpecCa {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
             */
            crlDistributionPoints?: string[];
            /**
             * The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
             */
            ocspServers?: string[];
            /**
             * SecretName is the name of the secret used to sign Certificates issued by this Issuer.
             */
            secretName: string;
        }

        /**
         * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
         */
        export interface IssuerSpecSelfSigned {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
             */
            crlDistributionPoints?: string[];
        }

        /**
         * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
         */
        export interface IssuerSpecVault {
            /**
             * Auth configures how cert-manager authenticates with the Vault server.
             */
            auth: outputs.certmanager.v1.IssuerSpecVaultAuth;
            /**
             * PEM-encoded CA bundle (base64-encoded) used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.
             */
            caBundle?: string;
            /**
             * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
             */
            namespace?: string;
            /**
             * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
             */
            path: string;
            /**
             * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
             */
            server: string;
        }

        /**
         * Auth configures how cert-manager authenticates with the Vault server.
         */
        export interface IssuerSpecVaultAuth {
            /**
             * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
             */
            appRole?: outputs.certmanager.v1.IssuerSpecVaultAuthAppRole;
            /**
             * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
             */
            kubernetes?: outputs.certmanager.v1.IssuerSpecVaultAuthKubernetes;
            /**
             * TokenSecretRef authenticates with Vault by presenting a token.
             */
            tokenSecretRef?: outputs.certmanager.v1.IssuerSpecVaultAuthTokenSecretRef;
        }

        /**
         * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
         */
        export interface IssuerSpecVaultAuthAppRole {
            /**
             * Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
             */
            path: string;
            /**
             * RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
             */
            roleId: string;
            /**
             * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
             */
            secretRef: outputs.certmanager.v1.IssuerSpecVaultAuthAppRoleSecretRef;
        }

        /**
         * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
         */
        export interface IssuerSpecVaultAuthAppRoleSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
         */
        export interface IssuerSpecVaultAuthKubernetes {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
             */
            mountPath?: string;
            /**
             * A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
             */
            role: string;
            /**
             * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
             */
            secretRef: outputs.certmanager.v1.IssuerSpecVaultAuthKubernetesSecretRef;
        }

        /**
         * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
         */
        export interface IssuerSpecVaultAuthKubernetesSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * TokenSecretRef authenticates with Vault by presenting a token.
         */
        export interface IssuerSpecVaultAuthTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
         */
        export interface IssuerSpecVenafi {
            /**
             * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
             */
            cloud?: outputs.certmanager.v1.IssuerSpecVenafiCloud;
            /**
             * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
             */
            tpp?: outputs.certmanager.v1.IssuerSpecVenafiTpp;
            /**
             * Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
             */
            zone: string;
        }

        /**
         * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface IssuerSpecVenafiCloud {
            /**
             * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
             */
            apiTokenSecretRef: outputs.certmanager.v1.IssuerSpecVenafiCloudApiTokenSecretRef;
            /**
             * URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
             */
            url?: string;
        }

        /**
         * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
         */
        export interface IssuerSpecVenafiCloudApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface IssuerSpecVenafiTpp {
            /**
             * CABundle is a PEM encoded TLS certificate to use to verify connections to the TPP instance. If specified, system roots will not be used and the issuing CA for the TPP instance must be verifiable using the provided root. If not specified, the connection will be verified using the cert-manager system root certificates.
             */
            caBundle?: string;
            /**
             * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
             */
            credentialsRef: outputs.certmanager.v1.IssuerSpecVenafiTppCredentialsRef;
            /**
             * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
             */
            url: string;
        }

        /**
         * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
         */
        export interface IssuerSpecVenafiTppCredentialsRef {
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Status of the Issuer. This is set and managed automatically.
         */
        export interface IssuerStatus {
            /**
             * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
             */
            acme?: outputs.certmanager.v1.IssuerStatusAcme;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
             */
            conditions?: outputs.certmanager.v1.IssuerStatusConditions[];
        }

        /**
         * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
         */
        export interface IssuerStatusAcme {
            /**
             * LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
             */
            lastRegisteredEmail?: string;
            /**
             * URI is the unique account identifier, which can also be used to retrieve account details from the CA
             */
            uri?: string;
        }

        /**
         * IssuerCondition contains condition information for an Issuer.
         */
        export interface IssuerStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: string;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: string;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
             */
            observedGeneration?: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`).
             */
            type: string;
        }
    }
}

export namespace linkerd {
    export namespace v1alpha1 {
        /**
         * Spec is the custom resource spec
         */
        export interface ServiceProfileSpec {
            dstOverrides?: outputs.linkerd.v1alpha1.ServiceProfileSpecDstOverrides[];
            opaquePorts?: string[];
            /**
             * RetryBudget describes the maximum number of retries that should be issued to this service.
             */
            retryBudget?: outputs.linkerd.v1alpha1.ServiceProfileSpecRetryBudget;
            routes: outputs.linkerd.v1alpha1.ServiceProfileSpecRoutes[];
        }

        /**
         * WeightedDst is a weighted alternate destination.
         */
        export interface ServiceProfileSpecDstOverrides {
            authority?: string;
            weight?: number | string;
        }

        /**
         * RetryBudget describes the maximum number of retries that should be issued to this service.
         */
        export interface ServiceProfileSpecRetryBudget {
            minRetriesPerSecond: number;
            retryRatio: number;
            ttl: string;
        }

        /**
         * RouteSpec specifies a Route resource.
         */
        export interface ServiceProfileSpecRoutes {
            /**
             * RequestMatch describes the conditions under which to match a Route.
             */
            condition: outputs.linkerd.v1alpha1.ServiceProfileSpecRoutesCondition;
            isRetryable?: boolean;
            name: string;
            responseClasses?: outputs.linkerd.v1alpha1.ServiceProfileSpecRoutesResponseClasses[];
            timeout?: string;
        }

        /**
         * RequestMatch describes the conditions under which to match a Route.
         */
        export interface ServiceProfileSpecRoutesCondition {
            all?: {[key: string]: any}[];
            any?: {[key: string]: any}[];
            method?: string;
            not?: {[key: string]: any}[];
            pathRegex?: string;
        }

        /**
         * ResponseClass describes how to classify a response (e.g. success or failures).
         */
        export interface ServiceProfileSpecRoutesResponseClasses {
            /**
             * ResponseMatch describes the conditions under which to classify a response.
             */
            condition: outputs.linkerd.v1alpha1.ServiceProfileSpecRoutesResponseClassesCondition;
            isFailure?: boolean;
        }

        /**
         * ResponseMatch describes the conditions under which to classify a response.
         */
        export interface ServiceProfileSpecRoutesResponseClassesCondition {
            all?: {[key: string]: any}[];
            any?: {[key: string]: any}[];
            not?: {[key: string]: any}[];
            /**
             * Range describes a range of integers (e.g. status codes).
             */
            status?: outputs.linkerd.v1alpha1.ServiceProfileSpecRoutesResponseClassesConditionStatus;
        }

        /**
         * Range describes a range of integers (e.g. status codes).
         */
        export interface ServiceProfileSpecRoutesResponseClassesConditionStatus {
            max?: number;
            min?: number;
        }
    }

    export namespace v1alpha2 {
        /**
         * Spec is the custom resource spec
         */
        export interface ServiceProfileSpec {
            dstOverrides?: outputs.linkerd.v1alpha2.ServiceProfileSpecDstOverrides[];
            opaquePorts?: string[];
            /**
             * RetryBudget describes the maximum number of retries that should be issued to this service.
             */
            retryBudget?: outputs.linkerd.v1alpha2.ServiceProfileSpecRetryBudget;
            routes?: outputs.linkerd.v1alpha2.ServiceProfileSpecRoutes[];
        }

        /**
         * WeightedDst is a weighted alternate destination.
         */
        export interface ServiceProfileSpecDstOverrides {
            authority?: string;
            weight?: number | string;
        }

        /**
         * RetryBudget describes the maximum number of retries that should be issued to this service.
         */
        export interface ServiceProfileSpecRetryBudget {
            minRetriesPerSecond: number;
            retryRatio: number;
            ttl: string;
        }

        /**
         * RouteSpec specifies a Route resource.
         */
        export interface ServiceProfileSpecRoutes {
            /**
             * RequestMatch describes the conditions under which to match a Route.
             */
            condition: outputs.linkerd.v1alpha2.ServiceProfileSpecRoutesCondition;
            isRetryable?: boolean;
            name: string;
            responseClasses?: outputs.linkerd.v1alpha2.ServiceProfileSpecRoutesResponseClasses[];
            timeout?: string;
        }

        /**
         * RequestMatch describes the conditions under which to match a Route.
         */
        export interface ServiceProfileSpecRoutesCondition {
            all?: {[key: string]: any}[];
            any?: {[key: string]: any}[];
            method?: string;
            not?: {[key: string]: any}[];
            pathRegex?: string;
        }

        /**
         * ResponseClass describes how to classify a response (e.g. success or failures).
         */
        export interface ServiceProfileSpecRoutesResponseClasses {
            /**
             * ResponseMatch describes the conditions under which to classify a response.
             */
            condition: outputs.linkerd.v1alpha2.ServiceProfileSpecRoutesResponseClassesCondition;
            isFailure?: boolean;
        }

        /**
         * ResponseMatch describes the conditions under which to classify a response.
         */
        export interface ServiceProfileSpecRoutesResponseClassesCondition {
            all?: {[key: string]: any}[];
            any?: {[key: string]: any}[];
            not?: {[key: string]: any}[];
            /**
             * Range describes a range of integers (e.g. status codes).
             */
            status?: outputs.linkerd.v1alpha2.ServiceProfileSpecRoutesResponseClassesConditionStatus;
        }

        /**
         * Range describes a range of integers (e.g. status codes).
         */
        export interface ServiceProfileSpecRoutesResponseClassesConditionStatus {
            max?: number;
            min?: number;
        }
    }
}

export namespace pingcap {
    export namespace v1alpha1 {
        export interface BackupScheduleSpec {
            backupTemplate: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplate;
            imagePullSecrets?: outputs.pingcap.v1alpha1.BackupScheduleSpecImagePullSecrets[];
            maxBackups?: number;
            maxReservedTime?: string;
            pause?: boolean;
            schedule: string;
            storageClassName?: string;
            storageSize?: string;
        }
        /**
         * backupScheduleSpecProvideDefaults sets the appropriate defaults for BackupScheduleSpec
         */
        export function backupScheduleSpecProvideDefaults(val: BackupScheduleSpec): BackupScheduleSpec {
            return {
                ...val,
                backupTemplate: outputs.pingcap.v1alpha1.backupScheduleSpecBackupTemplateProvideDefaults(val.backupTemplate),
            };
        }

        export interface BackupScheduleSpecBackupTemplate {
            affinity?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinity;
            azblob?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAzblob;
            backupType?: string;
            br?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateBr;
            cleanOption?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateCleanOption;
            cleanPolicy?: string;
            dumpling?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateDumpling;
            env?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateEnv[];
            from?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateFrom;
            gcs?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateGcs;
            imagePullSecrets?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateImagePullSecrets[];
            local?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocal;
            podSecurityContext?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplatePodSecurityContext;
            priorityClassName?: string;
            resources?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateResources;
            s3?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateS3;
            serviceAccount?: string;
            storageClassName?: string;
            storageSize?: string;
            tableFilter?: string[];
            tikvGCLifeTime?: string;
            tolerations?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateTolerations[];
            toolImage?: string;
            useKMS?: boolean;
        }
        /**
         * backupScheduleSpecBackupTemplateProvideDefaults sets the appropriate defaults for BackupScheduleSpecBackupTemplate
         */
        export function backupScheduleSpecBackupTemplateProvideDefaults(val: BackupScheduleSpecBackupTemplate): BackupScheduleSpecBackupTemplate {
            return {
                ...val,
                cleanOption: (val.cleanOption ? outputs.pingcap.v1alpha1.backupScheduleSpecBackupTemplateCleanOptionProvideDefaults(val.cleanOption) : undefined),
            };
        }

        export interface BackupScheduleSpecBackupTemplateAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityNodeAffinity;
            podAffinity?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinity;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupScheduleSpecBackupTemplateAzblob {
            accessTier?: string;
            container?: string;
            path?: string;
            prefix?: string;
            secretName?: string;
        }

        export interface BackupScheduleSpecBackupTemplateBr {
            checksum?: boolean;
            cluster: string;
            clusterNamespace?: string;
            concurrency?: number;
            db?: string;
            logLevel?: string;
            onLine?: boolean;
            options?: string[];
            rateLimit?: number;
            sendCredToTikv?: boolean;
            statusAddr?: string;
            table?: string;
            timeAgo?: string;
        }

        export interface BackupScheduleSpecBackupTemplateCleanOption {
            backoffEnabled?: boolean;
            batchConcurrency?: number;
            disableBatchConcurrency?: boolean;
            pageSize?: number;
            retryCount?: number;
            routineConcurrency?: number;
        }
        /**
         * backupScheduleSpecBackupTemplateCleanOptionProvideDefaults sets the appropriate defaults for BackupScheduleSpecBackupTemplateCleanOption
         */
        export function backupScheduleSpecBackupTemplateCleanOptionProvideDefaults(val: BackupScheduleSpecBackupTemplateCleanOption): BackupScheduleSpecBackupTemplateCleanOption {
            return {
                ...val,
                retryCount: (val.retryCount) ?? 5,
            };
        }

        export interface BackupScheduleSpecBackupTemplateDumpling {
            options?: string[];
            tableFilter?: string[];
        }

        export interface BackupScheduleSpecBackupTemplateEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateEnvValueFrom;
        }

        export interface BackupScheduleSpecBackupTemplateEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateEnvValueFromSecretKeyRef;
        }

        export interface BackupScheduleSpecBackupTemplateEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface BackupScheduleSpecBackupTemplateEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface BackupScheduleSpecBackupTemplateEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface BackupScheduleSpecBackupTemplateEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface BackupScheduleSpecBackupTemplateFrom {
            host: string;
            port?: number;
            secretName: string;
            tlsClientSecretName?: string;
            user?: string;
        }

        export interface BackupScheduleSpecBackupTemplateGcs {
            bucket?: string;
            bucketAcl?: string;
            location?: string;
            objectAcl?: string;
            path?: string;
            prefix?: string;
            projectId: string;
            secretName?: string;
            storageClass?: string;
        }

        export interface BackupScheduleSpecBackupTemplateImagePullSecrets {
            name?: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocal {
            prefix?: string;
            volume: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolume;
            volumeMount: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeMount;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolume {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeAwsElasticBlockStore;
            azureDisk?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeAzureDisk;
            azureFile?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeAzureFile;
            cephfs?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeCephfs;
            cinder?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeCinder;
            configMap?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeConfigMap;
            csi?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeDownwardAPI;
            emptyDir?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeEmptyDir;
            ephemeral?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeEphemeral;
            fc?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeFc;
            flexVolume?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeFlexVolume;
            flocker?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeGcePersistentDisk;
            gitRepo?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeGitRepo;
            glusterfs?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeHostPath;
            iscsi?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumePersistentVolumeClaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumePhotonPersistentDisk;
            portworxVolume?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumePortworxVolume;
            projected?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeProjected;
            quobyte?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeQuobyte;
            rbd?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeRbd;
            scaleIO?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeScaleIO;
            secret?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeSecret;
            storageos?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeVsphereVolume;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeAwsElasticBlockStore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeAzureDisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeAzureFile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeCephfsSecretRef;
            user?: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeCephfsSecretRef {
            name?: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeCinderSecretRef;
            volumeID: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeCinderSecretRef {
            name?: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeConfigMap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeCsiNodePublishSecretRef;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeCsiNodePublishSecretRef {
            name?: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeDownwardAPI {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeDownwardAPIItems[];
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeDownwardAPIItemsResourceFieldRef;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeEmptyDir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeEphemeralVolumeClaimTemplate;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeEphemeralVolumeClaimTemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeEphemeralVolumeClaimTemplateSpec;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeEphemeralVolumeClaimTemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeEphemeralVolumeClaimTemplateSpecDataSource;
            resources?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeEphemeralVolumeClaimTemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeEphemeralVolumeClaimTemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeEphemeralVolumeClaimTemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeFlexVolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeFlexVolumeSecretRef;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeFlexVolumeSecretRef {
            name?: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeGcePersistentDisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeGitRepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeHostPath {
            path: string;
            type?: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeIscsiSecretRef;
            targetPortal: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeIscsiSecretRef {
            name?: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeMount {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumePersistentVolumeClaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumePhotonPersistentDisk {
            fsType?: string;
            pdID: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumePortworxVolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeProjectedSources[];
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeProjectedSourcesConfigMap;
            downwardAPI?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeProjectedSourcesDownwardAPI;
            secret?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeProjectedSourcesServiceAccountToken;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeProjectedSourcesConfigMap {
            items?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeProjectedSourcesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeProjectedSourcesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeProjectedSourcesDownwardAPI {
            items?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeProjectedSourcesDownwardAPIItems[];
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeProjectedSourcesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeProjectedSourcesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeProjectedSourcesServiceAccountToken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeRbdSecretRef;
            user?: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeRbdSecretRef {
            name?: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeScaleIO {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeScaleIOSecretRef;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeScaleIOSecretRef {
            name?: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateLocalVolumeStorageosSecretRef;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeStorageosSecretRef {
            name?: string;
        }

        export interface BackupScheduleSpecBackupTemplateLocalVolumeVsphereVolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface BackupScheduleSpecBackupTemplatePodSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplatePodSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplatePodSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplatePodSecurityContextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplatePodSecurityContextWindowsOptions;
        }

        export interface BackupScheduleSpecBackupTemplatePodSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface BackupScheduleSpecBackupTemplatePodSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface BackupScheduleSpecBackupTemplatePodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface BackupScheduleSpecBackupTemplatePodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface BackupScheduleSpecBackupTemplateResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface BackupScheduleSpecBackupTemplateS3 {
            acl?: string;
            bucket?: string;
            endpoint?: string;
            options?: string[];
            path?: string;
            prefix?: string;
            provider: string;
            region?: string;
            secretName?: string;
            sse?: string;
            storageClass?: string;
        }

        export interface BackupScheduleSpecBackupTemplateTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface BackupScheduleSpecImagePullSecrets {
            name?: string;
        }

        export interface BackupScheduleStatus {
            allBackupCleanTime?: string;
            lastBackup?: string;
            lastBackupTime?: string;
        }

        export interface BackupSpec {
            affinity?: outputs.pingcap.v1alpha1.BackupSpecAffinity;
            azblob?: outputs.pingcap.v1alpha1.BackupSpecAzblob;
            backupType?: string;
            br?: outputs.pingcap.v1alpha1.BackupSpecBr;
            cleanOption?: outputs.pingcap.v1alpha1.BackupSpecCleanOption;
            cleanPolicy?: string;
            dumpling?: outputs.pingcap.v1alpha1.BackupSpecDumpling;
            env?: outputs.pingcap.v1alpha1.BackupSpecEnv[];
            from?: outputs.pingcap.v1alpha1.BackupSpecFrom;
            gcs?: outputs.pingcap.v1alpha1.BackupSpecGcs;
            imagePullSecrets?: outputs.pingcap.v1alpha1.BackupSpecImagePullSecrets[];
            local?: outputs.pingcap.v1alpha1.BackupSpecLocal;
            podSecurityContext?: outputs.pingcap.v1alpha1.BackupSpecPodSecurityContext;
            priorityClassName?: string;
            resources?: outputs.pingcap.v1alpha1.BackupSpecResources;
            s3?: outputs.pingcap.v1alpha1.BackupSpecS3;
            serviceAccount?: string;
            storageClassName?: string;
            storageSize?: string;
            tableFilter?: string[];
            tikvGCLifeTime?: string;
            tolerations?: outputs.pingcap.v1alpha1.BackupSpecTolerations[];
            toolImage?: string;
            useKMS?: boolean;
        }
        /**
         * backupSpecProvideDefaults sets the appropriate defaults for BackupSpec
         */
        export function backupSpecProvideDefaults(val: BackupSpec): BackupSpec {
            return {
                ...val,
                cleanOption: (val.cleanOption ? outputs.pingcap.v1alpha1.backupSpecCleanOptionProvideDefaults(val.cleanOption) : undefined),
            };
        }

        export interface BackupSpecAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.BackupSpecAffinityNodeAffinity;
            podAffinity?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodAffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodAntiAffinity;
        }

        export interface BackupSpecAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.pingcap.v1alpha1.BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupSpecAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupSpecAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupSpecAzblob {
            accessTier?: string;
            container?: string;
            path?: string;
            prefix?: string;
            secretName?: string;
        }

        export interface BackupSpecBr {
            checksum?: boolean;
            cluster: string;
            clusterNamespace?: string;
            concurrency?: number;
            db?: string;
            logLevel?: string;
            onLine?: boolean;
            options?: string[];
            rateLimit?: number;
            sendCredToTikv?: boolean;
            statusAddr?: string;
            table?: string;
            timeAgo?: string;
        }

        export interface BackupSpecCleanOption {
            backoffEnabled?: boolean;
            batchConcurrency?: number;
            disableBatchConcurrency?: boolean;
            pageSize?: number;
            retryCount?: number;
            routineConcurrency?: number;
        }
        /**
         * backupSpecCleanOptionProvideDefaults sets the appropriate defaults for BackupSpecCleanOption
         */
        export function backupSpecCleanOptionProvideDefaults(val: BackupSpecCleanOption): BackupSpecCleanOption {
            return {
                ...val,
                retryCount: (val.retryCount) ?? 5,
            };
        }

        export interface BackupSpecDumpling {
            options?: string[];
            tableFilter?: string[];
        }

        export interface BackupSpecEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.BackupSpecEnvValueFrom;
        }

        export interface BackupSpecEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.BackupSpecEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.BackupSpecEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.BackupSpecEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.BackupSpecEnvValueFromSecretKeyRef;
        }

        export interface BackupSpecEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface BackupSpecEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface BackupSpecEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface BackupSpecEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface BackupSpecFrom {
            host: string;
            port?: number;
            secretName: string;
            tlsClientSecretName?: string;
            user?: string;
        }

        export interface BackupSpecGcs {
            bucket?: string;
            bucketAcl?: string;
            location?: string;
            objectAcl?: string;
            path?: string;
            prefix?: string;
            projectId: string;
            secretName?: string;
            storageClass?: string;
        }

        export interface BackupSpecImagePullSecrets {
            name?: string;
        }

        export interface BackupSpecLocal {
            prefix?: string;
            volume: outputs.pingcap.v1alpha1.BackupSpecLocalVolume;
            volumeMount: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeMount;
        }

        export interface BackupSpecLocalVolume {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeAwsElasticBlockStore;
            azureDisk?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeAzureDisk;
            azureFile?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeAzureFile;
            cephfs?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeCephfs;
            cinder?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeCinder;
            configMap?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeConfigMap;
            csi?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeDownwardAPI;
            emptyDir?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeEmptyDir;
            ephemeral?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeEphemeral;
            fc?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeFc;
            flexVolume?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeFlexVolume;
            flocker?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeGcePersistentDisk;
            gitRepo?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeGitRepo;
            glusterfs?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeHostPath;
            iscsi?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumePersistentVolumeClaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumePhotonPersistentDisk;
            portworxVolume?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumePortworxVolume;
            projected?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjected;
            quobyte?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeQuobyte;
            rbd?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeRbd;
            scaleIO?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeScaleIO;
            secret?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeSecret;
            storageos?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeVsphereVolume;
        }

        export interface BackupSpecLocalVolumeAwsElasticBlockStore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface BackupSpecLocalVolumeAzureDisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface BackupSpecLocalVolumeAzureFile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface BackupSpecLocalVolumeCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeCephfsSecretRef;
            user?: string;
        }

        export interface BackupSpecLocalVolumeCephfsSecretRef {
            name?: string;
        }

        export interface BackupSpecLocalVolumeCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeCinderSecretRef;
            volumeID: string;
        }

        export interface BackupSpecLocalVolumeCinderSecretRef {
            name?: string;
        }

        export interface BackupSpecLocalVolumeConfigMap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface BackupSpecLocalVolumeConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface BackupSpecLocalVolumeCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeCsiNodePublishSecretRef;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface BackupSpecLocalVolumeCsiNodePublishSecretRef {
            name?: string;
        }

        export interface BackupSpecLocalVolumeDownwardAPI {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeDownwardAPIItems[];
        }

        export interface BackupSpecLocalVolumeDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeDownwardAPIItemsResourceFieldRef;
        }

        export interface BackupSpecLocalVolumeDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface BackupSpecLocalVolumeDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface BackupSpecLocalVolumeEmptyDir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface BackupSpecLocalVolumeEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeEphemeralVolumeClaimTemplate;
        }

        export interface BackupSpecLocalVolumeEphemeralVolumeClaimTemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeEphemeralVolumeClaimTemplateSpec;
        }

        export interface BackupSpecLocalVolumeEphemeralVolumeClaimTemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeEphemeralVolumeClaimTemplateSpecDataSource;
            resources?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeEphemeralVolumeClaimTemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeEphemeralVolumeClaimTemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface BackupSpecLocalVolumeEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface BackupSpecLocalVolumeEphemeralVolumeClaimTemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface BackupSpecLocalVolumeEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface BackupSpecLocalVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface BackupSpecLocalVolumeFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface BackupSpecLocalVolumeFlexVolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeFlexVolumeSecretRef;
        }

        export interface BackupSpecLocalVolumeFlexVolumeSecretRef {
            name?: string;
        }

        export interface BackupSpecLocalVolumeFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface BackupSpecLocalVolumeGcePersistentDisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface BackupSpecLocalVolumeGitRepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface BackupSpecLocalVolumeGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface BackupSpecLocalVolumeHostPath {
            path: string;
            type?: string;
        }

        export interface BackupSpecLocalVolumeIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeIscsiSecretRef;
            targetPortal: string;
        }

        export interface BackupSpecLocalVolumeIscsiSecretRef {
            name?: string;
        }

        export interface BackupSpecLocalVolumeMount {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface BackupSpecLocalVolumeNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface BackupSpecLocalVolumePersistentVolumeClaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface BackupSpecLocalVolumePhotonPersistentDisk {
            fsType?: string;
            pdID: string;
        }

        export interface BackupSpecLocalVolumePortworxVolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface BackupSpecLocalVolumeProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSources[];
        }

        export interface BackupSpecLocalVolumeProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSourcesConfigMap;
            downwardAPI?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSourcesDownwardAPI;
            secret?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSourcesServiceAccountToken;
        }

        export interface BackupSpecLocalVolumeProjectedSourcesConfigMap {
            items?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSourcesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface BackupSpecLocalVolumeProjectedSourcesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface BackupSpecLocalVolumeProjectedSourcesDownwardAPI {
            items?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSourcesDownwardAPIItems[];
        }

        export interface BackupSpecLocalVolumeProjectedSourcesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSourcesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface BackupSpecLocalVolumeProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface BackupSpecLocalVolumeProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface BackupSpecLocalVolumeProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface BackupSpecLocalVolumeProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface BackupSpecLocalVolumeProjectedSourcesServiceAccountToken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface BackupSpecLocalVolumeQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface BackupSpecLocalVolumeRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeRbdSecretRef;
            user?: string;
        }

        export interface BackupSpecLocalVolumeRbdSecretRef {
            name?: string;
        }

        export interface BackupSpecLocalVolumeScaleIO {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeScaleIOSecretRef;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface BackupSpecLocalVolumeScaleIOSecretRef {
            name?: string;
        }

        export interface BackupSpecLocalVolumeSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface BackupSpecLocalVolumeSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface BackupSpecLocalVolumeStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.BackupSpecLocalVolumeStorageosSecretRef;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface BackupSpecLocalVolumeStorageosSecretRef {
            name?: string;
        }

        export interface BackupSpecLocalVolumeVsphereVolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface BackupSpecPodSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.BackupSpecPodSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.BackupSpecPodSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.BackupSpecPodSecurityContextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.BackupSpecPodSecurityContextWindowsOptions;
        }

        export interface BackupSpecPodSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface BackupSpecPodSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface BackupSpecPodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface BackupSpecPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface BackupSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface BackupSpecS3 {
            acl?: string;
            bucket?: string;
            endpoint?: string;
            options?: string[];
            path?: string;
            prefix?: string;
            provider: string;
            region?: string;
            secretName?: string;
            sse?: string;
            storageClass?: string;
        }

        export interface BackupSpecTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface BackupStatus {
            backupPath?: string;
            backupSize?: number;
            backupSizeReadable?: string;
            commitTs?: string;
            conditions?: outputs.pingcap.v1alpha1.BackupStatusConditions[];
            phase?: string;
            timeCompleted?: string;
            timeStarted?: string;
        }

        export interface BackupStatusConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface DMClusterSpec {
            affinity?: outputs.pingcap.v1alpha1.DMClusterSpecAffinity;
            annotations?: {[key: string]: string};
            configUpdateStrategy?: string;
            discovery?: outputs.pingcap.v1alpha1.DMClusterSpecDiscovery;
            dnsConfig?: outputs.pingcap.v1alpha1.DMClusterSpecDnsConfig;
            dnsPolicy?: string;
            enablePVReclaim?: boolean;
            hostNetwork?: boolean;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.DMClusterSpecImagePullSecrets[];
            labels?: {[key: string]: string};
            master?: outputs.pingcap.v1alpha1.DMClusterSpecMaster;
            nodeSelector?: {[key: string]: string};
            paused?: boolean;
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.DMClusterSpecPodSecurityContext;
            priorityClassName?: string;
            pvReclaimPolicy?: string;
            schedulerName?: string;
            statefulSetUpdateStrategy?: string;
            suspendAction?: outputs.pingcap.v1alpha1.DMClusterSpecSuspendAction;
            timezone?: string;
            tlsClientSecretNames?: string[];
            tlsCluster?: outputs.pingcap.v1alpha1.DMClusterSpecTlsCluster;
            tolerations?: outputs.pingcap.v1alpha1.DMClusterSpecTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.DMClusterSpecTopologySpreadConstraints[];
            version?: string;
            worker?: outputs.pingcap.v1alpha1.DMClusterSpecWorker;
        }
        /**
         * dmclusterSpecProvideDefaults sets the appropriate defaults for DMClusterSpec
         */
        export function dmclusterSpecProvideDefaults(val: DMClusterSpec): DMClusterSpec {
            return {
                ...val,
                imagePullPolicy: (val.imagePullPolicy) ?? "IfNotPresent",
                master: (val.master ? outputs.pingcap.v1alpha1.dmclusterSpecMasterProvideDefaults(val.master) : undefined),
                pvReclaimPolicy: (val.pvReclaimPolicy) ?? "Retain",
                worker: (val.worker ? outputs.pingcap.v1alpha1.dmclusterSpecWorkerProvideDefaults(val.worker) : undefined),
            };
        }

        export interface DMClusterSpecAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityNodeAffinity;
            podAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodAffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodAntiAffinity;
        }

        export interface DMClusterSpecAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface DMClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.pingcap.v1alpha1.DMClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface DMClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface DMClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.DMClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface DMClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface DMClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface DMClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface DMClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface DMClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface DMClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscovery {
            additionalContainers?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumeMounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumes[];
            address?: string;
            affinity?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinity;
            annotations?: {[key: string]: string};
            configUpdateStrategy?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryDnsConfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryEnv[];
            envFrom?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryEnvFrom[];
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryImagePullSecrets[];
            initContainers?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainers[];
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryPodSecurityContext;
            priorityClassName?: string;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            statefulSetUpdateStrategy?: string;
            suspendAction?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoverySuspendAction;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryTopologySpreadConstraints[];
            version?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersEnvValueFrom;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersEnvFromSecretRef;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersEnvValueFromSecretKeyRef;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersLifecyclePreStop;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersLifecyclePostStartTcpSocket;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersLifecyclePreStopTcpSocket;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersLivenessProbeExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * dmclusterSpecDiscoveryAdditionalContainersPortsProvideDefaults sets the appropriate defaults for DMClusterSpecDiscoveryAdditionalContainersPorts
         */
        export function dmclusterSpecDiscoveryAdditionalContainersPortsProvideDefaults(val: DMClusterSpecDiscoveryAdditionalContainersPorts): DMClusterSpecDiscoveryAdditionalContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersReadinessProbeExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersSecurityContextWindowsOptions;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersStartupProbeExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesAwsElasticBlockStore;
            azureDisk?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesAzureDisk;
            azureFile?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesAzureFile;
            cephfs?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesConfigMap;
            csi?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesDownwardAPI;
            emptyDir?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesEmptyDir;
            ephemeral?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesFlexVolume;
            flocker?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesGcePersistentDisk;
            gitRepo?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesGitRepo;
            glusterfs?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesHostPath;
            iscsi?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesPersistentVolumeClaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesPhotonPersistentDisk;
            portworxVolume?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesPortworxVolume;
            projected?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesScaleIO;
            secret?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesVsphereVolume;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesAwsElasticBlockStore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesAzureDisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesAzureFile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesCephfsSecretRef;
            user?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesCephfsSecretRef {
            name?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesCinderSecretRef;
            volumeID: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesCinderSecretRef {
            name?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesConfigMap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesCsiNodePublishSecretRef;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesCsiNodePublishSecretRef {
            name?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesDownwardAPI {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesDownwardAPIItems[];
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesDownwardAPIItemsResourceFieldRef;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesEmptyDir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplate;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpec;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            resources?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesFlexVolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesFlexVolumeSecretRef;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesFlexVolumeSecretRef {
            name?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesGcePersistentDisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesGitRepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesHostPath {
            path: string;
            type?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesIscsiSecretRef;
            targetPortal: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesIscsiSecretRef {
            name?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesPersistentVolumeClaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesPhotonPersistentDisk {
            fsType?: string;
            pdID: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesPortworxVolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesProjectedSources[];
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesProjectedSourcesConfigMap;
            downwardAPI?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesProjectedSourcesDownwardAPI;
            secret?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesProjectedSourcesServiceAccountToken;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesProjectedSourcesConfigMap {
            items?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesProjectedSourcesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesProjectedSourcesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesProjectedSourcesDownwardAPI {
            items?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesProjectedSourcesDownwardAPIItems[];
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesProjectedSourcesServiceAccountToken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesRbdSecretRef;
            user?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesRbdSecretRef {
            name?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesScaleIO {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesScaleIOSecretRef;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesScaleIOSecretRef {
            name?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAdditionalVolumesStorageosSecretRef;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesStorageosSecretRef {
            name?: string;
        }

        export interface DMClusterSpecDiscoveryAdditionalVolumesVsphereVolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface DMClusterSpecDiscoveryAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityNodeAffinity;
            podAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodAffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodAntiAffinity;
        }

        export interface DMClusterSpecDiscoveryAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface DMClusterSpecDiscoveryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface DMClusterSpecDiscoveryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface DMClusterSpecDiscoveryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscoveryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscoveryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface DMClusterSpecDiscoveryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface DMClusterSpecDiscoveryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscoveryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscoveryAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface DMClusterSpecDiscoveryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface DMClusterSpecDiscoveryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecDiscoveryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecDiscoveryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscoveryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecDiscoveryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecDiscoveryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscoveryAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface DMClusterSpecDiscoveryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface DMClusterSpecDiscoveryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecDiscoveryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecDiscoveryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscoveryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecDiscoveryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecDiscoveryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecDiscoveryDnsConfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryDnsConfigOptions[];
            searches?: string[];
        }

        export interface DMClusterSpecDiscoveryDnsConfigOptions {
            name?: string;
            value?: string;
        }

        export interface DMClusterSpecDiscoveryEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryEnvValueFrom;
        }

        export interface DMClusterSpecDiscoveryEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryEnvFromSecretRef;
        }

        export interface DMClusterSpecDiscoveryEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryEnvValueFromSecretKeyRef;
        }

        export interface DMClusterSpecDiscoveryEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecDiscoveryEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecDiscoveryEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryImagePullSecrets {
            name?: string;
        }

        export interface DMClusterSpecDiscoveryInitContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface DMClusterSpecDiscoveryInitContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersEnvValueFrom;
        }

        export interface DMClusterSpecDiscoveryInitContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersEnvFromSecretRef;
        }

        export interface DMClusterSpecDiscoveryInitContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryInitContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryInitContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersEnvValueFromSecretKeyRef;
        }

        export interface DMClusterSpecDiscoveryInitContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryInitContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecDiscoveryInitContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecDiscoveryInitContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecDiscoveryInitContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersLifecyclePreStop;
        }

        export interface DMClusterSpecDiscoveryInitContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersLifecyclePostStartTcpSocket;
        }

        export interface DMClusterSpecDiscoveryInitContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryInitContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryInitContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryInitContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryInitContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersLifecyclePreStopTcpSocket;
        }

        export interface DMClusterSpecDiscoveryInitContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryInitContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryInitContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryInitContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryInitContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecDiscoveryInitContainersLivenessProbeExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryInitContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryInitContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryInitContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryInitContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * dmclusterSpecDiscoveryInitContainersPortsProvideDefaults sets the appropriate defaults for DMClusterSpecDiscoveryInitContainersPorts
         */
        export function dmclusterSpecDiscoveryInitContainersPortsProvideDefaults(val: DMClusterSpecDiscoveryInitContainersPorts): DMClusterSpecDiscoveryInitContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface DMClusterSpecDiscoveryInitContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecDiscoveryInitContainersReadinessProbeExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryInitContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryInitContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryInitContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryInitContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface DMClusterSpecDiscoveryInitContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersSecurityContextWindowsOptions;
        }

        export interface DMClusterSpecDiscoveryInitContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface DMClusterSpecDiscoveryInitContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecDiscoveryInitContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecDiscoveryInitContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecDiscoveryInitContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecDiscoveryInitContainersStartupProbeExec {
            command?: string[];
        }

        export interface DMClusterSpecDiscoveryInitContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryInitContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecDiscoveryInitContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryInitContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecDiscoveryInitContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface DMClusterSpecDiscoveryInitContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface DMClusterSpecDiscoveryPodSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryPodSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryPodSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryPodSecurityContextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecDiscoveryPodSecurityContextWindowsOptions;
        }

        export interface DMClusterSpecDiscoveryPodSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecDiscoveryPodSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecDiscoveryPodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface DMClusterSpecDiscoveryPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecDiscoverySuspendAction {
            suspendStatefulSet?: boolean;
        }

        export interface DMClusterSpecDiscoveryTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface DMClusterSpecDiscoveryTopologySpreadConstraints {
            topologyKey: string;
        }

        export interface DMClusterSpecDnsConfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.DMClusterSpecDnsConfigOptions[];
            searches?: string[];
        }

        export interface DMClusterSpecDnsConfigOptions {
            name?: string;
            value?: string;
        }

        export interface DMClusterSpecImagePullSecrets {
            name?: string;
        }

        export interface DMClusterSpecMaster {
            additionalContainers?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumeMounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumes[];
            affinity?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinity;
            annotations?: {[key: string]: string};
            baseImage?: string;
            config?: {[key: string]: any};
            configUpdateStrategy?: string;
            dataSubDir?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.DMClusterSpecMasterDnsConfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.DMClusterSpecMasterEnv[];
            envFrom?: outputs.pingcap.v1alpha1.DMClusterSpecMasterEnvFrom[];
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.DMClusterSpecMasterImagePullSecrets[];
            initContainers?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainers[];
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            maxFailoverCount?: number;
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.DMClusterSpecMasterPodSecurityContext;
            priorityClassName?: string;
            replicas: number;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            service?: outputs.pingcap.v1alpha1.DMClusterSpecMasterService;
            statefulSetUpdateStrategy?: string;
            storageClassName?: string;
            storageSize?: string;
            suspendAction?: outputs.pingcap.v1alpha1.DMClusterSpecMasterSuspendAction;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.pingcap.v1alpha1.DMClusterSpecMasterTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.DMClusterSpecMasterTopologySpreadConstraints[];
            version?: string;
        }
        /**
         * dmclusterSpecMasterProvideDefaults sets the appropriate defaults for DMClusterSpecMaster
         */
        export function dmclusterSpecMasterProvideDefaults(val: DMClusterSpecMaster): DMClusterSpecMaster {
            return {
                ...val,
                baseImage: (val.baseImage) ?? "pingcap/dm",
            };
        }

        export interface DMClusterSpecMasterAdditionalContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface DMClusterSpecMasterAdditionalContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersEnvValueFrom;
        }

        export interface DMClusterSpecMasterAdditionalContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersEnvFromSecretRef;
        }

        export interface DMClusterSpecMasterAdditionalContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersEnvValueFromSecretKeyRef;
        }

        export interface DMClusterSpecMasterAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecMasterAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecMasterAdditionalContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersLifecyclePreStop;
        }

        export interface DMClusterSpecMasterAdditionalContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersLifecyclePostStartTcpSocket;
        }

        export interface DMClusterSpecMasterAdditionalContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterAdditionalContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterAdditionalContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterAdditionalContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersLifecyclePreStopTcpSocket;
        }

        export interface DMClusterSpecMasterAdditionalContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterAdditionalContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterAdditionalContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterAdditionalContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecMasterAdditionalContainersLivenessProbeExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterAdditionalContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterAdditionalContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterAdditionalContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * dmclusterSpecMasterAdditionalContainersPortsProvideDefaults sets the appropriate defaults for DMClusterSpecMasterAdditionalContainersPorts
         */
        export function dmclusterSpecMasterAdditionalContainersPortsProvideDefaults(val: DMClusterSpecMasterAdditionalContainersPorts): DMClusterSpecMasterAdditionalContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface DMClusterSpecMasterAdditionalContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecMasterAdditionalContainersReadinessProbeExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterAdditionalContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterAdditionalContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterAdditionalContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface DMClusterSpecMasterAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersSecurityContextWindowsOptions;
        }

        export interface DMClusterSpecMasterAdditionalContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface DMClusterSpecMasterAdditionalContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecMasterAdditionalContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecMasterAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecMasterAdditionalContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecMasterAdditionalContainersStartupProbeExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterAdditionalContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterAdditionalContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterAdditionalContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface DMClusterSpecMasterAdditionalContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesAwsElasticBlockStore;
            azureDisk?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesAzureDisk;
            azureFile?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesAzureFile;
            cephfs?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesConfigMap;
            csi?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesDownwardAPI;
            emptyDir?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesEmptyDir;
            ephemeral?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesFlexVolume;
            flocker?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesGcePersistentDisk;
            gitRepo?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesGitRepo;
            glusterfs?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesHostPath;
            iscsi?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesPersistentVolumeClaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesPhotonPersistentDisk;
            portworxVolume?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesPortworxVolume;
            projected?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesScaleIO;
            secret?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesVsphereVolume;
        }

        export interface DMClusterSpecMasterAdditionalVolumesAwsElasticBlockStore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesAzureDisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalVolumesAzureFile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesCephfsSecretRef;
            user?: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesCephfsSecretRef {
            name?: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesCinderSecretRef;
            volumeID: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesCinderSecretRef {
            name?: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesConfigMap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalVolumesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesCsiNodePublishSecretRef;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface DMClusterSpecMasterAdditionalVolumesCsiNodePublishSecretRef {
            name?: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesDownwardAPI {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesDownwardAPIItems[];
        }

        export interface DMClusterSpecMasterAdditionalVolumesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesDownwardAPIItemsResourceFieldRef;
        }

        export interface DMClusterSpecMasterAdditionalVolumesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesEmptyDir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesEphemeralVolumeClaimTemplate;
        }

        export interface DMClusterSpecMasterAdditionalVolumesEphemeralVolumeClaimTemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesEphemeralVolumeClaimTemplateSpec;
        }

        export interface DMClusterSpecMasterAdditionalVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            resources?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface DMClusterSpecMasterAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecMasterAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecMasterAdditionalVolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface DMClusterSpecMasterAdditionalVolumesFlexVolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesFlexVolumeSecretRef;
        }

        export interface DMClusterSpecMasterAdditionalVolumesFlexVolumeSecretRef {
            name?: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesGcePersistentDisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalVolumesGitRepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalVolumesHostPath {
            path: string;
            type?: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesIscsiSecretRef;
            targetPortal: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesIscsiSecretRef {
            name?: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesPersistentVolumeClaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalVolumesPhotonPersistentDisk {
            fsType?: string;
            pdID: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesPortworxVolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesProjectedSources[];
        }

        export interface DMClusterSpecMasterAdditionalVolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesProjectedSourcesConfigMap;
            downwardAPI?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesProjectedSourcesDownwardAPI;
            secret?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesProjectedSourcesServiceAccountToken;
        }

        export interface DMClusterSpecMasterAdditionalVolumesProjectedSourcesConfigMap {
            items?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesProjectedSourcesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalVolumesProjectedSourcesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesProjectedSourcesDownwardAPI {
            items?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesProjectedSourcesDownwardAPIItems[];
        }

        export interface DMClusterSpecMasterAdditionalVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface DMClusterSpecMasterAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterAdditionalVolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesProjectedSourcesServiceAccountToken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesRbdSecretRef;
            user?: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesRbdSecretRef {
            name?: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesScaleIO {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesScaleIOSecretRef;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesScaleIOSecretRef {
            name?: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAdditionalVolumesStorageosSecretRef;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesStorageosSecretRef {
            name?: string;
        }

        export interface DMClusterSpecMasterAdditionalVolumesVsphereVolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface DMClusterSpecMasterAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityNodeAffinity;
            podAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodAffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodAntiAffinity;
        }

        export interface DMClusterSpecMasterAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface DMClusterSpecMasterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface DMClusterSpecMasterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface DMClusterSpecMasterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecMasterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecMasterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface DMClusterSpecMasterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface DMClusterSpecMasterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecMasterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecMasterAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface DMClusterSpecMasterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface DMClusterSpecMasterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecMasterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecMasterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecMasterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecMasterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecMasterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecMasterAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface DMClusterSpecMasterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface DMClusterSpecMasterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecMasterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecMasterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecMasterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecMasterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecMasterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecMasterDnsConfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.DMClusterSpecMasterDnsConfigOptions[];
            searches?: string[];
        }

        export interface DMClusterSpecMasterDnsConfigOptions {
            name?: string;
            value?: string;
        }

        export interface DMClusterSpecMasterEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.DMClusterSpecMasterEnvValueFrom;
        }

        export interface DMClusterSpecMasterEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterEnvFromSecretRef;
        }

        export interface DMClusterSpecMasterEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterEnvValueFromSecretKeyRef;
        }

        export interface DMClusterSpecMasterEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecMasterEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecMasterEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterImagePullSecrets {
            name?: string;
        }

        export interface DMClusterSpecMasterInitContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface DMClusterSpecMasterInitContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersEnvValueFrom;
        }

        export interface DMClusterSpecMasterInitContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersEnvFromSecretRef;
        }

        export interface DMClusterSpecMasterInitContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterInitContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterInitContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersEnvValueFromSecretKeyRef;
        }

        export interface DMClusterSpecMasterInitContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterInitContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecMasterInitContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecMasterInitContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecMasterInitContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersLifecyclePreStop;
        }

        export interface DMClusterSpecMasterInitContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersLifecyclePostStartTcpSocket;
        }

        export interface DMClusterSpecMasterInitContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterInitContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterInitContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterInitContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterInitContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersLifecyclePreStopTcpSocket;
        }

        export interface DMClusterSpecMasterInitContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterInitContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterInitContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterInitContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterInitContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecMasterInitContainersLivenessProbeExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterInitContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterInitContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterInitContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterInitContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * dmclusterSpecMasterInitContainersPortsProvideDefaults sets the appropriate defaults for DMClusterSpecMasterInitContainersPorts
         */
        export function dmclusterSpecMasterInitContainersPortsProvideDefaults(val: DMClusterSpecMasterInitContainersPorts): DMClusterSpecMasterInitContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface DMClusterSpecMasterInitContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecMasterInitContainersReadinessProbeExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterInitContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterInitContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterInitContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterInitContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface DMClusterSpecMasterInitContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersSecurityContextWindowsOptions;
        }

        export interface DMClusterSpecMasterInitContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface DMClusterSpecMasterInitContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecMasterInitContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecMasterInitContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecMasterInitContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecMasterInitContainersStartupProbeExec {
            command?: string[];
        }

        export interface DMClusterSpecMasterInitContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecMasterInitContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecMasterInitContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterInitContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecMasterInitContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface DMClusterSpecMasterInitContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface DMClusterSpecMasterPodSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterPodSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecMasterPodSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.DMClusterSpecMasterPodSecurityContextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecMasterPodSecurityContextWindowsOptions;
        }

        export interface DMClusterSpecMasterPodSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecMasterPodSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecMasterPodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface DMClusterSpecMasterPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecMasterService {
            annotations?: {[key: string]: string};
            clusterIP?: string;
            externalTrafficPolicy?: string;
            labels?: {[key: string]: string};
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            masterNodePort?: number;
            port?: number;
            portName?: string;
            type?: string;
        }

        export interface DMClusterSpecMasterSuspendAction {
            suspendStatefulSet?: boolean;
        }

        export interface DMClusterSpecMasterTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface DMClusterSpecMasterTopologySpreadConstraints {
            topologyKey: string;
        }

        export interface DMClusterSpecPodSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecPodSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecPodSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.DMClusterSpecPodSecurityContextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecPodSecurityContextWindowsOptions;
        }

        export interface DMClusterSpecPodSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecPodSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecPodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface DMClusterSpecPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecSuspendAction {
            suspendStatefulSet?: boolean;
        }

        export interface DMClusterSpecTlsCluster {
            enabled?: boolean;
        }

        export interface DMClusterSpecTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface DMClusterSpecTopologySpreadConstraints {
            topologyKey: string;
        }

        export interface DMClusterSpecWorker {
            additionalContainers?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumeMounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumes[];
            affinity?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinity;
            annotations?: {[key: string]: string};
            baseImage?: string;
            config?: {[key: string]: any};
            configUpdateStrategy?: string;
            dataSubDir?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerDnsConfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerEnv[];
            envFrom?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerEnvFrom[];
            failover?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerFailover;
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerImagePullSecrets[];
            initContainers?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainers[];
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            maxFailoverCount?: number;
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerPodSecurityContext;
            priorityClassName?: string;
            recoverFailover?: boolean;
            replicas: number;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            statefulSetUpdateStrategy?: string;
            storageClassName?: string;
            storageSize?: string;
            suspendAction?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerSuspendAction;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerTopologySpreadConstraints[];
            version?: string;
        }
        /**
         * dmclusterSpecWorkerProvideDefaults sets the appropriate defaults for DMClusterSpecWorker
         */
        export function dmclusterSpecWorkerProvideDefaults(val: DMClusterSpecWorker): DMClusterSpecWorker {
            return {
                ...val,
                baseImage: (val.baseImage) ?? "pingcap/dm",
            };
        }

        export interface DMClusterSpecWorkerAdditionalContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersEnvValueFrom;
        }

        export interface DMClusterSpecWorkerAdditionalContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersEnvFromSecretRef;
        }

        export interface DMClusterSpecWorkerAdditionalContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersEnvValueFromSecretKeyRef;
        }

        export interface DMClusterSpecWorkerAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersLifecyclePreStop;
        }

        export interface DMClusterSpecWorkerAdditionalContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersLifecyclePostStartTcpSocket;
        }

        export interface DMClusterSpecWorkerAdditionalContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerAdditionalContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersLifecyclePreStopTcpSocket;
        }

        export interface DMClusterSpecWorkerAdditionalContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerAdditionalContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecWorkerAdditionalContainersLivenessProbeExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerAdditionalContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * dmclusterSpecWorkerAdditionalContainersPortsProvideDefaults sets the appropriate defaults for DMClusterSpecWorkerAdditionalContainersPorts
         */
        export function dmclusterSpecWorkerAdditionalContainersPortsProvideDefaults(val: DMClusterSpecWorkerAdditionalContainersPorts): DMClusterSpecWorkerAdditionalContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface DMClusterSpecWorkerAdditionalContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecWorkerAdditionalContainersReadinessProbeExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerAdditionalContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface DMClusterSpecWorkerAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersSecurityContextWindowsOptions;
        }

        export interface DMClusterSpecWorkerAdditionalContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface DMClusterSpecWorkerAdditionalContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecWorkerAdditionalContainersStartupProbeExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerAdditionalContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface DMClusterSpecWorkerAdditionalContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesAwsElasticBlockStore;
            azureDisk?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesAzureDisk;
            azureFile?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesAzureFile;
            cephfs?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesConfigMap;
            csi?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesDownwardAPI;
            emptyDir?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesEmptyDir;
            ephemeral?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesFlexVolume;
            flocker?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesGcePersistentDisk;
            gitRepo?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesGitRepo;
            glusterfs?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesHostPath;
            iscsi?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesPersistentVolumeClaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesPhotonPersistentDisk;
            portworxVolume?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesPortworxVolume;
            projected?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesScaleIO;
            secret?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesVsphereVolume;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesAwsElasticBlockStore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesAzureDisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesAzureFile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesCephfsSecretRef;
            user?: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesCephfsSecretRef {
            name?: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesCinderSecretRef;
            volumeID: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesCinderSecretRef {
            name?: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesConfigMap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesCsiNodePublishSecretRef;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface DMClusterSpecWorkerAdditionalVolumesCsiNodePublishSecretRef {
            name?: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesDownwardAPI {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesDownwardAPIItems[];
        }

        export interface DMClusterSpecWorkerAdditionalVolumesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesDownwardAPIItemsResourceFieldRef;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesEmptyDir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesEphemeralVolumeClaimTemplate;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesEphemeralVolumeClaimTemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesEphemeralVolumeClaimTemplateSpec;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            resources?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface DMClusterSpecWorkerAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecWorkerAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecWorkerAdditionalVolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface DMClusterSpecWorkerAdditionalVolumesFlexVolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesFlexVolumeSecretRef;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesFlexVolumeSecretRef {
            name?: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesGcePersistentDisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesGitRepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesHostPath {
            path: string;
            type?: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesIscsiSecretRef;
            targetPortal: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesIscsiSecretRef {
            name?: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesPersistentVolumeClaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesPhotonPersistentDisk {
            fsType?: string;
            pdID: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesPortworxVolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesProjectedSources[];
        }

        export interface DMClusterSpecWorkerAdditionalVolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesProjectedSourcesConfigMap;
            downwardAPI?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesProjectedSourcesDownwardAPI;
            secret?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesProjectedSourcesServiceAccountToken;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesProjectedSourcesConfigMap {
            items?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesProjectedSourcesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesProjectedSourcesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesProjectedSourcesDownwardAPI {
            items?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesProjectedSourcesDownwardAPIItems[];
        }

        export interface DMClusterSpecWorkerAdditionalVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesProjectedSourcesServiceAccountToken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesRbdSecretRef;
            user?: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesRbdSecretRef {
            name?: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesScaleIO {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesScaleIOSecretRef;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesScaleIOSecretRef {
            name?: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAdditionalVolumesStorageosSecretRef;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesStorageosSecretRef {
            name?: string;
        }

        export interface DMClusterSpecWorkerAdditionalVolumesVsphereVolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface DMClusterSpecWorkerAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityNodeAffinity;
            podAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodAffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodAntiAffinity;
        }

        export interface DMClusterSpecWorkerAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface DMClusterSpecWorkerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface DMClusterSpecWorkerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface DMClusterSpecWorkerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecWorkerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecWorkerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface DMClusterSpecWorkerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface DMClusterSpecWorkerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecWorkerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecWorkerAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface DMClusterSpecWorkerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface DMClusterSpecWorkerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecWorkerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecWorkerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecWorkerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecWorkerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecWorkerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecWorkerAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface DMClusterSpecWorkerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface DMClusterSpecWorkerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecWorkerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecWorkerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecWorkerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface DMClusterSpecWorkerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface DMClusterSpecWorkerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface DMClusterSpecWorkerDnsConfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerDnsConfigOptions[];
            searches?: string[];
        }

        export interface DMClusterSpecWorkerDnsConfigOptions {
            name?: string;
            value?: string;
        }

        export interface DMClusterSpecWorkerEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerEnvValueFrom;
        }

        export interface DMClusterSpecWorkerEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerEnvFromSecretRef;
        }

        export interface DMClusterSpecWorkerEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerEnvValueFromSecretKeyRef;
        }

        export interface DMClusterSpecWorkerEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecWorkerEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecWorkerEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerFailover {
            recoverByUID?: string;
        }

        export interface DMClusterSpecWorkerImagePullSecrets {
            name?: string;
        }

        export interface DMClusterSpecWorkerInitContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface DMClusterSpecWorkerInitContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersEnvValueFrom;
        }

        export interface DMClusterSpecWorkerInitContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersEnvFromSecretRef;
        }

        export interface DMClusterSpecWorkerInitContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerInitContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerInitContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersEnvValueFromSecretKeyRef;
        }

        export interface DMClusterSpecWorkerInitContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerInitContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface DMClusterSpecWorkerInitContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface DMClusterSpecWorkerInitContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface DMClusterSpecWorkerInitContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersLifecyclePreStop;
        }

        export interface DMClusterSpecWorkerInitContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersLifecyclePostStartTcpSocket;
        }

        export interface DMClusterSpecWorkerInitContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerInitContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerInitContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerInitContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerInitContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersLifecyclePreStopTcpSocket;
        }

        export interface DMClusterSpecWorkerInitContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerInitContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerInitContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerInitContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerInitContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecWorkerInitContainersLivenessProbeExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerInitContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerInitContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerInitContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerInitContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * dmclusterSpecWorkerInitContainersPortsProvideDefaults sets the appropriate defaults for DMClusterSpecWorkerInitContainersPorts
         */
        export function dmclusterSpecWorkerInitContainersPortsProvideDefaults(val: DMClusterSpecWorkerInitContainersPorts): DMClusterSpecWorkerInitContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface DMClusterSpecWorkerInitContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecWorkerInitContainersReadinessProbeExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerInitContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerInitContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerInitContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerInitContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface DMClusterSpecWorkerInitContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersSecurityContextWindowsOptions;
        }

        export interface DMClusterSpecWorkerInitContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface DMClusterSpecWorkerInitContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecWorkerInitContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecWorkerInitContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecWorkerInitContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface DMClusterSpecWorkerInitContainersStartupProbeExec {
            command?: string[];
        }

        export interface DMClusterSpecWorkerInitContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerInitContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface DMClusterSpecWorkerInitContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerInitContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface DMClusterSpecWorkerInitContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface DMClusterSpecWorkerInitContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface DMClusterSpecWorkerPodSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerPodSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerPodSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerPodSecurityContextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.DMClusterSpecWorkerPodSecurityContextWindowsOptions;
        }

        export interface DMClusterSpecWorkerPodSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface DMClusterSpecWorkerPodSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface DMClusterSpecWorkerPodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface DMClusterSpecWorkerPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface DMClusterSpecWorkerSuspendAction {
            suspendStatefulSet?: boolean;
        }

        export interface DMClusterSpecWorkerTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface DMClusterSpecWorkerTopologySpreadConstraints {
            topologyKey: string;
        }

        export interface DMClusterStatus {
            conditions?: outputs.pingcap.v1alpha1.DMClusterStatusConditions[];
            master?: outputs.pingcap.v1alpha1.DMClusterStatusMaster;
            worker?: outputs.pingcap.v1alpha1.DMClusterStatusWorker;
        }

        export interface DMClusterStatusConditions {
            lastTransitionTime?: string;
            lastUpdateTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface DMClusterStatusMaster {
            conditions?: outputs.pingcap.v1alpha1.DMClusterStatusMasterConditions[];
            failureMembers?: {[key: string]: outputs.pingcap.v1alpha1.DMClusterStatusMasterFailureMembers};
            image?: string;
            leader?: outputs.pingcap.v1alpha1.DMClusterStatusMasterLeader;
            members?: {[key: string]: outputs.pingcap.v1alpha1.DMClusterStatusMasterMembers};
            phase?: string;
            statefulSet?: outputs.pingcap.v1alpha1.DMClusterStatusMasterStatefulSet;
            synced?: boolean;
            unjoinedMembers?: {[key: string]: outputs.pingcap.v1alpha1.DMClusterStatusMasterUnjoinedMembers};
            volumes?: {[key: string]: outputs.pingcap.v1alpha1.DMClusterStatusMasterVolumes};
        }

        export interface DMClusterStatusMasterConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration?: number;
            reason: string;
            status: string;
            type: string;
        }

        export interface DMClusterStatusMasterFailureMembers {
            createdAt?: string;
            memberDeleted?: boolean;
            memberID?: string;
            podName?: string;
            pvcUID?: string;
        }

        export interface DMClusterStatusMasterLeader {
            clientURL: string;
            health: boolean;
            id: string;
            lastTransitionTime?: string;
            name: string;
        }

        export interface DMClusterStatusMasterMembers {
            clientURL: string;
            health: boolean;
            id: string;
            lastTransitionTime?: string;
            name: string;
        }

        export interface DMClusterStatusMasterStatefulSet {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.DMClusterStatusMasterStatefulSetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface DMClusterStatusMasterStatefulSetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface DMClusterStatusMasterUnjoinedMembers {
            createdAt?: string;
            podName?: string;
            pvcUID?: string;
            pvcUIDSet?: {[key: string]: {[key: string]: any}};
        }

        export interface DMClusterStatusMasterVolumes {
            boundCount?: number;
            currentCapacity: number | string;
            currentCount?: number;
            name: string;
            resizedCapacity: number | string;
            resizedCount?: number;
        }

        export interface DMClusterStatusWorker {
            conditions?: outputs.pingcap.v1alpha1.DMClusterStatusWorkerConditions[];
            failoverUID?: string;
            failureMembers?: {[key: string]: outputs.pingcap.v1alpha1.DMClusterStatusWorkerFailureMembers};
            image?: string;
            members?: {[key: string]: outputs.pingcap.v1alpha1.DMClusterStatusWorkerMembers};
            phase?: string;
            statefulSet?: outputs.pingcap.v1alpha1.DMClusterStatusWorkerStatefulSet;
            synced?: boolean;
            volumes?: {[key: string]: outputs.pingcap.v1alpha1.DMClusterStatusWorkerVolumes};
        }

        export interface DMClusterStatusWorkerConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration?: number;
            reason: string;
            status: string;
            type: string;
        }

        export interface DMClusterStatusWorkerFailureMembers {
            createdAt?: string;
            podName?: string;
        }

        export interface DMClusterStatusWorkerMembers {
            addr?: string;
            lastTransitionTime?: string;
            name?: string;
            stage: string;
        }

        export interface DMClusterStatusWorkerStatefulSet {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.DMClusterStatusWorkerStatefulSetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface DMClusterStatusWorkerStatefulSetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface DMClusterStatusWorkerVolumes {
            boundCount?: number;
            currentCapacity: number | string;
            currentCount?: number;
            name: string;
            resizedCapacity: number | string;
            resizedCount?: number;
        }

        export interface RestoreSpec {
            affinity?: outputs.pingcap.v1alpha1.RestoreSpecAffinity;
            azblob?: outputs.pingcap.v1alpha1.RestoreSpecAzblob;
            backupType?: string;
            br?: outputs.pingcap.v1alpha1.RestoreSpecBr;
            env?: outputs.pingcap.v1alpha1.RestoreSpecEnv[];
            gcs?: outputs.pingcap.v1alpha1.RestoreSpecGcs;
            imagePullSecrets?: outputs.pingcap.v1alpha1.RestoreSpecImagePullSecrets[];
            local?: outputs.pingcap.v1alpha1.RestoreSpecLocal;
            podSecurityContext?: outputs.pingcap.v1alpha1.RestoreSpecPodSecurityContext;
            priorityClassName?: string;
            resources?: outputs.pingcap.v1alpha1.RestoreSpecResources;
            s3?: outputs.pingcap.v1alpha1.RestoreSpecS3;
            serviceAccount?: string;
            storageClassName?: string;
            storageSize?: string;
            tableFilter?: string[];
            tikvGCLifeTime?: string;
            to?: outputs.pingcap.v1alpha1.RestoreSpecTo;
            tolerations?: outputs.pingcap.v1alpha1.RestoreSpecTolerations[];
            toolImage?: string;
            useKMS?: boolean;
        }

        export interface RestoreSpecAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.RestoreSpecAffinityNodeAffinity;
            podAffinity?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodAffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodAntiAffinity;
        }

        export interface RestoreSpecAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.pingcap.v1alpha1.RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: outputs.pingcap.v1alpha1.RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RestoreSpecAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RestoreSpecAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RestoreSpecAzblob {
            accessTier?: string;
            container?: string;
            path?: string;
            prefix?: string;
            secretName?: string;
        }

        export interface RestoreSpecBr {
            checksum?: boolean;
            cluster: string;
            clusterNamespace?: string;
            concurrency?: number;
            db?: string;
            logLevel?: string;
            onLine?: boolean;
            options?: string[];
            rateLimit?: number;
            sendCredToTikv?: boolean;
            statusAddr?: string;
            table?: string;
            timeAgo?: string;
        }

        export interface RestoreSpecEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.RestoreSpecEnvValueFrom;
        }

        export interface RestoreSpecEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.RestoreSpecEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.RestoreSpecEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.RestoreSpecEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.RestoreSpecEnvValueFromSecretKeyRef;
        }

        export interface RestoreSpecEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface RestoreSpecEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface RestoreSpecEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface RestoreSpecEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface RestoreSpecGcs {
            bucket?: string;
            bucketAcl?: string;
            location?: string;
            objectAcl?: string;
            path?: string;
            prefix?: string;
            projectId: string;
            secretName?: string;
            storageClass?: string;
        }

        export interface RestoreSpecImagePullSecrets {
            name?: string;
        }

        export interface RestoreSpecLocal {
            prefix?: string;
            volume: outputs.pingcap.v1alpha1.RestoreSpecLocalVolume;
            volumeMount: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeMount;
        }

        export interface RestoreSpecLocalVolume {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeAwsElasticBlockStore;
            azureDisk?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeAzureDisk;
            azureFile?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeAzureFile;
            cephfs?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeCephfs;
            cinder?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeCinder;
            configMap?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeConfigMap;
            csi?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeDownwardAPI;
            emptyDir?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeEmptyDir;
            ephemeral?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeEphemeral;
            fc?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeFc;
            flexVolume?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeFlexVolume;
            flocker?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeGcePersistentDisk;
            gitRepo?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeGitRepo;
            glusterfs?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeHostPath;
            iscsi?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumePersistentVolumeClaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumePhotonPersistentDisk;
            portworxVolume?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumePortworxVolume;
            projected?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjected;
            quobyte?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeQuobyte;
            rbd?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeRbd;
            scaleIO?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeScaleIO;
            secret?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeSecret;
            storageos?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeVsphereVolume;
        }

        export interface RestoreSpecLocalVolumeAwsElasticBlockStore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface RestoreSpecLocalVolumeAzureDisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface RestoreSpecLocalVolumeAzureFile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface RestoreSpecLocalVolumeCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeCephfsSecretRef;
            user?: string;
        }

        export interface RestoreSpecLocalVolumeCephfsSecretRef {
            name?: string;
        }

        export interface RestoreSpecLocalVolumeCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeCinderSecretRef;
            volumeID: string;
        }

        export interface RestoreSpecLocalVolumeCinderSecretRef {
            name?: string;
        }

        export interface RestoreSpecLocalVolumeConfigMap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface RestoreSpecLocalVolumeConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface RestoreSpecLocalVolumeCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeCsiNodePublishSecretRef;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface RestoreSpecLocalVolumeCsiNodePublishSecretRef {
            name?: string;
        }

        export interface RestoreSpecLocalVolumeDownwardAPI {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeDownwardAPIItems[];
        }

        export interface RestoreSpecLocalVolumeDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeDownwardAPIItemsResourceFieldRef;
        }

        export interface RestoreSpecLocalVolumeDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface RestoreSpecLocalVolumeDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface RestoreSpecLocalVolumeEmptyDir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface RestoreSpecLocalVolumeEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeEphemeralVolumeClaimTemplate;
        }

        export interface RestoreSpecLocalVolumeEphemeralVolumeClaimTemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeEphemeralVolumeClaimTemplateSpec;
        }

        export interface RestoreSpecLocalVolumeEphemeralVolumeClaimTemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeEphemeralVolumeClaimTemplateSpecDataSource;
            resources?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeEphemeralVolumeClaimTemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeEphemeralVolumeClaimTemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface RestoreSpecLocalVolumeEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface RestoreSpecLocalVolumeEphemeralVolumeClaimTemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface RestoreSpecLocalVolumeEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RestoreSpecLocalVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RestoreSpecLocalVolumeFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface RestoreSpecLocalVolumeFlexVolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeFlexVolumeSecretRef;
        }

        export interface RestoreSpecLocalVolumeFlexVolumeSecretRef {
            name?: string;
        }

        export interface RestoreSpecLocalVolumeFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface RestoreSpecLocalVolumeGcePersistentDisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface RestoreSpecLocalVolumeGitRepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface RestoreSpecLocalVolumeGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface RestoreSpecLocalVolumeHostPath {
            path: string;
            type?: string;
        }

        export interface RestoreSpecLocalVolumeIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeIscsiSecretRef;
            targetPortal: string;
        }

        export interface RestoreSpecLocalVolumeIscsiSecretRef {
            name?: string;
        }

        export interface RestoreSpecLocalVolumeMount {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface RestoreSpecLocalVolumeNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface RestoreSpecLocalVolumePersistentVolumeClaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface RestoreSpecLocalVolumePhotonPersistentDisk {
            fsType?: string;
            pdID: string;
        }

        export interface RestoreSpecLocalVolumePortworxVolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface RestoreSpecLocalVolumeProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSources[];
        }

        export interface RestoreSpecLocalVolumeProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSourcesConfigMap;
            downwardAPI?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSourcesDownwardAPI;
            secret?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSourcesServiceAccountToken;
        }

        export interface RestoreSpecLocalVolumeProjectedSourcesConfigMap {
            items?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSourcesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface RestoreSpecLocalVolumeProjectedSourcesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface RestoreSpecLocalVolumeProjectedSourcesDownwardAPI {
            items?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSourcesDownwardAPIItems[];
        }

        export interface RestoreSpecLocalVolumeProjectedSourcesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSourcesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface RestoreSpecLocalVolumeProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface RestoreSpecLocalVolumeProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface RestoreSpecLocalVolumeProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface RestoreSpecLocalVolumeProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface RestoreSpecLocalVolumeProjectedSourcesServiceAccountToken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface RestoreSpecLocalVolumeQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface RestoreSpecLocalVolumeRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeRbdSecretRef;
            user?: string;
        }

        export interface RestoreSpecLocalVolumeRbdSecretRef {
            name?: string;
        }

        export interface RestoreSpecLocalVolumeScaleIO {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeScaleIOSecretRef;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface RestoreSpecLocalVolumeScaleIOSecretRef {
            name?: string;
        }

        export interface RestoreSpecLocalVolumeSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface RestoreSpecLocalVolumeSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface RestoreSpecLocalVolumeStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.RestoreSpecLocalVolumeStorageosSecretRef;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface RestoreSpecLocalVolumeStorageosSecretRef {
            name?: string;
        }

        export interface RestoreSpecLocalVolumeVsphereVolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface RestoreSpecPodSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.RestoreSpecPodSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.RestoreSpecPodSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.RestoreSpecPodSecurityContextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.RestoreSpecPodSecurityContextWindowsOptions;
        }

        export interface RestoreSpecPodSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface RestoreSpecPodSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface RestoreSpecPodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface RestoreSpecPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface RestoreSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface RestoreSpecS3 {
            acl?: string;
            bucket?: string;
            endpoint?: string;
            options?: string[];
            path?: string;
            prefix?: string;
            provider: string;
            region?: string;
            secretName?: string;
            sse?: string;
            storageClass?: string;
        }

        export interface RestoreSpecTo {
            host: string;
            port?: number;
            secretName: string;
            tlsClientSecretName?: string;
            user?: string;
        }

        export interface RestoreSpecTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface RestoreStatus {
            commitTs?: string;
            conditions?: outputs.pingcap.v1alpha1.RestoreStatusConditions[];
            phase?: string;
            timeCompleted?: string;
            timeStarted?: string;
        }

        export interface RestoreStatusConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbClusterAutoScalerSpec {
            cluster: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecCluster;
            tidb?: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTidb;
            tikv?: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTikv;
        }

        export interface TidbClusterAutoScalerSpecCluster {
            clusterDomain?: string;
            name: string;
            namespace?: string;
        }

        export interface TidbClusterAutoScalerSpecTidb {
            external?: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTidbExternal;
            resources?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTidbResources};
            rules?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTidbRules};
            scaleInIntervalSeconds?: number;
            scaleOutIntervalSeconds?: number;
        }

        export interface TidbClusterAutoScalerSpecTidbExternal {
            endpoint?: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTidbExternalEndpoint;
            maxReplicas: number;
        }

        export interface TidbClusterAutoScalerSpecTidbExternalEndpoint {
            host: string;
            path: string;
            port: number;
            tlsSecret?: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTidbExternalEndpointTlsSecret;
        }

        export interface TidbClusterAutoScalerSpecTidbExternalEndpointTlsSecret {
            name: string;
            namespace: string;
        }

        export interface TidbClusterAutoScalerSpecTidbResources {
            count?: number;
            cpu: number | string;
            memory: number | string;
            storage?: number | string;
        }

        export interface TidbClusterAutoScalerSpecTidbRules {
            max_threshold: number;
            min_threshold?: number;
            resource_types?: string[];
        }

        export interface TidbClusterAutoScalerSpecTikv {
            external?: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTikvExternal;
            resources?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTikvResources};
            rules?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTikvRules};
            scaleInIntervalSeconds?: number;
            scaleOutIntervalSeconds?: number;
        }

        export interface TidbClusterAutoScalerSpecTikvExternal {
            endpoint?: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTikvExternalEndpoint;
            maxReplicas: number;
        }

        export interface TidbClusterAutoScalerSpecTikvExternalEndpoint {
            host: string;
            path: string;
            port: number;
            tlsSecret?: outputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTikvExternalEndpointTlsSecret;
        }

        export interface TidbClusterAutoScalerSpecTikvExternalEndpointTlsSecret {
            name: string;
            namespace: string;
        }

        export interface TidbClusterAutoScalerSpecTikvResources {
            count?: number;
            cpu: number | string;
            memory: number | string;
            storage?: number | string;
        }

        export interface TidbClusterAutoScalerSpecTikvRules {
            max_threshold: number;
            min_threshold?: number;
            resource_types?: string[];
        }

        export interface TidbClusterAutoScalerStatus {
            tidb?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterAutoScalerStatusTidb};
            tikv?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterAutoScalerStatusTikv};
        }

        export interface TidbClusterAutoScalerStatusTidb {
            lastAutoScalingTimestamp?: string;
        }

        export interface TidbClusterAutoScalerStatusTikv {
            lastAutoScalingTimestamp?: string;
        }

        export interface TidbClusterSpec {
            acrossK8s?: boolean;
            affinity?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinity;
            annotations?: {[key: string]: string};
            cluster?: outputs.pingcap.v1alpha1.TidbClusterSpecCluster;
            clusterDomain?: string;
            configUpdateStrategy?: string;
            discovery?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscovery;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbClusterSpecDnsConfig;
            dnsPolicy?: string;
            enableDynamicConfiguration?: boolean;
            enablePVReclaim?: boolean;
            helper?: outputs.pingcap.v1alpha1.TidbClusterSpecHelper;
            hostNetwork?: boolean;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbClusterSpecImagePullSecrets[];
            labels?: {[key: string]: string};
            nodeSelector?: {[key: string]: string};
            paused?: boolean;
            pd?: outputs.pingcap.v1alpha1.TidbClusterSpecPd;
            pdAddresses?: string[];
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecPodSecurityContext;
            priorityClassName?: string;
            pump?: outputs.pingcap.v1alpha1.TidbClusterSpecPump;
            pvReclaimPolicy?: string;
            schedulerName?: string;
            serviceAccount?: string;
            services?: outputs.pingcap.v1alpha1.TidbClusterSpecServices[];
            statefulSetUpdateStrategy?: string;
            suspendAction?: outputs.pingcap.v1alpha1.TidbClusterSpecSuspendAction;
            ticdc?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdc;
            tidb?: outputs.pingcap.v1alpha1.TidbClusterSpecTidb;
            tiflash?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflash;
            tikv?: outputs.pingcap.v1alpha1.TidbClusterSpecTikv;
            timezone?: string;
            tlsCluster?: outputs.pingcap.v1alpha1.TidbClusterSpecTlsCluster;
            tolerations?: outputs.pingcap.v1alpha1.TidbClusterSpecTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbClusterSpecTopologySpreadConstraints[];
            version?: string;
        }
        /**
         * tidbClusterSpecProvideDefaults sets the appropriate defaults for TidbClusterSpec
         */
        export function tidbClusterSpecProvideDefaults(val: TidbClusterSpec): TidbClusterSpec {
            return {
                ...val,
                imagePullPolicy: (val.imagePullPolicy) ?? "IfNotPresent",
                pd: (val.pd ? outputs.pingcap.v1alpha1.tidbClusterSpecPdProvideDefaults(val.pd) : undefined),
                pump: (val.pump ? outputs.pingcap.v1alpha1.tidbClusterSpecPumpProvideDefaults(val.pump) : undefined),
                pvReclaimPolicy: (val.pvReclaimPolicy) ?? "Retain",
                ticdc: (val.ticdc ? outputs.pingcap.v1alpha1.tidbClusterSpecTicdcProvideDefaults(val.ticdc) : undefined),
                tidb: (val.tidb ? outputs.pingcap.v1alpha1.tidbClusterSpecTidbProvideDefaults(val.tidb) : undefined),
                tiflash: (val.tiflash ? outputs.pingcap.v1alpha1.tidbClusterSpecTiflashProvideDefaults(val.tiflash) : undefined),
                tikv: (val.tikv ? outputs.pingcap.v1alpha1.tidbClusterSpecTikvProvideDefaults(val.tikv) : undefined),
            };
        }

        export interface TidbClusterSpecAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeAffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAntiAffinity;
        }

        export interface TidbClusterSpecAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecCluster {
            clusterDomain?: string;
            name: string;
            namespace?: string;
        }

        export interface TidbClusterSpecDiscovery {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumeMounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumes[];
            affinity?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinity;
            annotations?: {[key: string]: string};
            configUpdateStrategy?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryDnsConfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryEnvFrom[];
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryImagePullSecrets[];
            initContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainers[];
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryPodSecurityContext;
            priorityClassName?: string;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            statefulSetUpdateStrategy?: string;
            suspendAction?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoverySuspendAction;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryTopologySpreadConstraints[];
            version?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersEnvValueFrom;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersEnvFromSecretRef;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersLifecyclePreStop;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersLifecyclePostStartTcpSocket;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersLifecyclePreStopTcpSocket;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersLivenessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecDiscoveryAdditionalContainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecDiscoveryAdditionalContainersPorts
         */
        export function tidbClusterSpecDiscoveryAdditionalContainersPortsProvideDefaults(val: TidbClusterSpecDiscoveryAdditionalContainersPorts): TidbClusterSpecDiscoveryAdditionalContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersReadinessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersStartupProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesAwsElasticBlockStore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesAzureDisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesAzureFile;
            cephfs?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesConfigMap;
            csi?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesDownwardAPI;
            emptyDir?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesEmptyDir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesFlexVolume;
            flocker?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesGcePersistentDisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesGitRepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesHostPath;
            iscsi?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesPersistentVolumeClaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesPhotonPersistentDisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesPortworxVolume;
            projected?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesScaleIO;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesVsphereVolume;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesAwsElasticBlockStore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesAzureDisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesAzureFile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesCephfsSecretRef;
            user?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesCephfsSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesCinderSecretRef;
            volumeID: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesCinderSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesConfigMap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesCsiNodePublishSecretRef;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesCsiNodePublishSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesDownwardAPI {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesDownwardAPIItems[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesEmptyDir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplate;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpec;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesFlexVolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesFlexVolumeSecretRef;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesFlexVolumeSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesGcePersistentDisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesGitRepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesHostPath {
            path: string;
            type?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesIscsiSecretRef;
            targetPortal: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesIscsiSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesPersistentVolumeClaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesPhotonPersistentDisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesPortworxVolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesProjectedSources[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesProjectedSourcesConfigMap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesProjectedSourcesDownwardAPI;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesProjectedSourcesServiceAccountToken;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesProjectedSourcesConfigMap {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesProjectedSourcesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesProjectedSourcesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesProjectedSourcesDownwardAPI {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesProjectedSourcesDownwardAPIItems[];
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesProjectedSourcesServiceAccountToken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesRbdSecretRef;
            user?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesRbdSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesScaleIO {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesScaleIOSecretRef;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesScaleIOSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAdditionalVolumesStorageosSecretRef;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesStorageosSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecDiscoveryAdditionalVolumesVsphereVolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbClusterSpecDiscoveryAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityNodeAffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodAffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodAntiAffinity;
        }

        export interface TidbClusterSpecDiscoveryAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface TidbClusterSpecDiscoveryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface TidbClusterSpecDiscoveryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface TidbClusterSpecDiscoveryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecDiscoveryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecDiscoveryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface TidbClusterSpecDiscoveryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface TidbClusterSpecDiscoveryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecDiscoveryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecDiscoveryAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbClusterSpecDiscoveryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbClusterSpecDiscoveryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecDiscoveryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecDiscoveryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecDiscoveryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecDiscoveryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecDiscoveryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecDiscoveryAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbClusterSpecDiscoveryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbClusterSpecDiscoveryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecDiscoveryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecDiscoveryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecDiscoveryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecDiscoveryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecDiscoveryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecDiscoveryDnsConfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryDnsConfigOptions[];
            searches?: string[];
        }

        export interface TidbClusterSpecDiscoveryDnsConfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbClusterSpecDiscoveryEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryEnvValueFrom;
        }

        export interface TidbClusterSpecDiscoveryEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryEnvFromSecretRef;
        }

        export interface TidbClusterSpecDiscoveryEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecDiscoveryEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecDiscoveryEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecDiscoveryEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryImagePullSecrets {
            name?: string;
        }

        export interface TidbClusterSpecDiscoveryInitContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersEnvValueFrom;
        }

        export interface TidbClusterSpecDiscoveryInitContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersEnvFromSecretRef;
        }

        export interface TidbClusterSpecDiscoveryInitContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryInitContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryInitContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecDiscoveryInitContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryInitContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecDiscoveryInitContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersLifecyclePreStop;
        }

        export interface TidbClusterSpecDiscoveryInitContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersLifecyclePostStartTcpSocket;
        }

        export interface TidbClusterSpecDiscoveryInitContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryInitContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersLifecyclePreStopTcpSocket;
        }

        export interface TidbClusterSpecDiscoveryInitContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryInitContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecDiscoveryInitContainersLivenessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryInitContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecDiscoveryInitContainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecDiscoveryInitContainersPorts
         */
        export function tidbClusterSpecDiscoveryInitContainersPortsProvideDefaults(val: TidbClusterSpecDiscoveryInitContainersPorts): TidbClusterSpecDiscoveryInitContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecDiscoveryInitContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecDiscoveryInitContainersReadinessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryInitContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecDiscoveryInitContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecDiscoveryInitContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecDiscoveryInitContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecDiscoveryInitContainersStartupProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecDiscoveryInitContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryInitContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecDiscoveryInitContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecDiscoveryPodSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryPodSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryPodSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryPodSecurityContextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecDiscoveryPodSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecDiscoveryPodSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecDiscoveryPodSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecDiscoveryPodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecDiscoveryPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecDiscoverySuspendAction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbClusterSpecDiscoveryTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbClusterSpecDiscoveryTopologySpreadConstraints {
            topologyKey: string;
        }

        export interface TidbClusterSpecDnsConfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbClusterSpecDnsConfigOptions[];
            searches?: string[];
        }

        export interface TidbClusterSpecDnsConfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbClusterSpecHelper {
            image?: string;
            imagePullPolicy?: string;
        }

        export interface TidbClusterSpecImagePullSecrets {
            name?: string;
        }

        export interface TidbClusterSpecPd {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumeMounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumes[];
            affinity?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinity;
            annotations?: {[key: string]: string};
            baseImage?: string;
            config?: {[key: string]: any};
            configUpdateStrategy?: string;
            dataSubDir?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbClusterSpecPdDnsConfig;
            dnsPolicy?: string;
            enableDashboardInternalProxy?: boolean;
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecPdEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPdEnvFrom[];
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbClusterSpecPdImagePullSecrets[];
            initContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainers[];
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            maxFailoverCount?: number;
            mountClusterClientSecret?: boolean;
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecPdPodSecurityContext;
            priorityClassName?: string;
            replicas: number;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            service?: outputs.pingcap.v1alpha1.TidbClusterSpecPdService;
            serviceAccount?: string;
            startUpScriptVersion?: string;
            statefulSetUpdateStrategy?: string;
            storageClassName?: string;
            storageVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecPdStorageVolumes[];
            suspendAction?: outputs.pingcap.v1alpha1.TidbClusterSpecPdSuspendAction;
            terminationGracePeriodSeconds?: number;
            tlsClientSecretName?: string;
            tolerations?: outputs.pingcap.v1alpha1.TidbClusterSpecPdTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbClusterSpecPdTopologySpreadConstraints[];
            version?: string;
        }
        /**
         * tidbClusterSpecPdProvideDefaults sets the appropriate defaults for TidbClusterSpecPd
         */
        export function tidbClusterSpecPdProvideDefaults(val: TidbClusterSpecPd): TidbClusterSpecPd {
            return {
                ...val,
                baseImage: (val.baseImage) ?? "pingcap/pd",
            };
        }

        export interface TidbClusterSpecPdAdditionalContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecPdAdditionalContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersEnvValueFrom;
        }

        export interface TidbClusterSpecPdAdditionalContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersEnvFromSecretRef;
        }

        export interface TidbClusterSpecPdAdditionalContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecPdAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPdAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPdAdditionalContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePreStop;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePostStartTcpSocket;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePreStopTcpSocket;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdAdditionalContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPdAdditionalContainersLivenessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdAdditionalContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdAdditionalContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecPdAdditionalContainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecPdAdditionalContainersPorts
         */
        export function tidbClusterSpecPdAdditionalContainersPortsProvideDefaults(val: TidbClusterSpecPdAdditionalContainersPorts): TidbClusterSpecPdAdditionalContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecPdAdditionalContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPdAdditionalContainersReadinessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdAdditionalContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdAdditionalContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecPdAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecPdAdditionalContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecPdAdditionalContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecPdAdditionalContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecPdAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecPdAdditionalContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPdAdditionalContainersStartupProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdAdditionalContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdAdditionalContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdAdditionalContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecPdAdditionalContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesAwsElasticBlockStore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesAzureDisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesAzureFile;
            cephfs?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesConfigMap;
            csi?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesDownwardAPI;
            emptyDir?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesEmptyDir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesFlexVolume;
            flocker?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesGcePersistentDisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesGitRepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesHostPath;
            iscsi?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesPersistentVolumeClaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesPhotonPersistentDisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesPortworxVolume;
            projected?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesScaleIO;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesVsphereVolume;
        }

        export interface TidbClusterSpecPdAdditionalVolumesAwsElasticBlockStore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesAzureDisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalVolumesAzureFile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesCephfsSecretRef;
            user?: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesCephfsSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesCinderSecretRef;
            volumeID: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesCinderSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesConfigMap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalVolumesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesCsiNodePublishSecretRef;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbClusterSpecPdAdditionalVolumesCsiNodePublishSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesDownwardAPI {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesDownwardAPIItems[];
        }

        export interface TidbClusterSpecPdAdditionalVolumesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbClusterSpecPdAdditionalVolumesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesEmptyDir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesEphemeralVolumeClaimTemplate;
        }

        export interface TidbClusterSpecPdAdditionalVolumesEphemeralVolumeClaimTemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesEphemeralVolumeClaimTemplateSpec;
        }

        export interface TidbClusterSpecPdAdditionalVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecPdAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPdAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPdAdditionalVolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbClusterSpecPdAdditionalVolumesFlexVolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesFlexVolumeSecretRef;
        }

        export interface TidbClusterSpecPdAdditionalVolumesFlexVolumeSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesGcePersistentDisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalVolumesGitRepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalVolumesHostPath {
            path: string;
            type?: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesIscsiSecretRef;
            targetPortal: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesIscsiSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesPersistentVolumeClaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalVolumesPhotonPersistentDisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesPortworxVolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSources[];
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSourcesConfigMap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPI;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSourcesServiceAccountToken;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSourcesConfigMap {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSourcesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSourcesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPI {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItems[];
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSourcesServiceAccountToken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesRbdSecretRef;
            user?: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesRbdSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesScaleIO {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesScaleIOSecretRef;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesScaleIOSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesStorageosSecretRef;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesStorageosSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecPdAdditionalVolumesVsphereVolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbClusterSpecPdAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeAffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAntiAffinity;
        }

        export interface TidbClusterSpecPdAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPdAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPdAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPdDnsConfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbClusterSpecPdDnsConfigOptions[];
            searches?: string[];
        }

        export interface TidbClusterSpecPdDnsConfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbClusterSpecPdEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPdEnvValueFrom;
        }

        export interface TidbClusterSpecPdEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdEnvFromSecretRef;
        }

        export interface TidbClusterSpecPdEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecPdEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPdEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPdEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdImagePullSecrets {
            name?: string;
        }

        export interface TidbClusterSpecPdInitContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecPdInitContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersEnvValueFrom;
        }

        export interface TidbClusterSpecPdInitContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersEnvFromSecretRef;
        }

        export interface TidbClusterSpecPdInitContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdInitContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdInitContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecPdInitContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdInitContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPdInitContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPdInitContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPdInitContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersLifecyclePreStop;
        }

        export interface TidbClusterSpecPdInitContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersLifecyclePostStartTcpSocket;
        }

        export interface TidbClusterSpecPdInitContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdInitContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdInitContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdInitContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdInitContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersLifecyclePreStopTcpSocket;
        }

        export interface TidbClusterSpecPdInitContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdInitContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdInitContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdInitContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdInitContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPdInitContainersLivenessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdInitContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdInitContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdInitContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdInitContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecPdInitContainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecPdInitContainersPorts
         */
        export function tidbClusterSpecPdInitContainersPortsProvideDefaults(val: TidbClusterSpecPdInitContainersPorts): TidbClusterSpecPdInitContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecPdInitContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPdInitContainersReadinessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdInitContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdInitContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdInitContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdInitContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecPdInitContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecPdInitContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecPdInitContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecPdInitContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecPdInitContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecPdInitContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPdInitContainersStartupProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPdInitContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPdInitContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPdInitContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdInitContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPdInitContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecPdInitContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecPdPodSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdPodSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecPdPodSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbClusterSpecPdPodSecurityContextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPdPodSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecPdPodSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecPdPodSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecPdPodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPdPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecPdService {
            annotations?: {[key: string]: string};
            clusterIP?: string;
            labels?: {[key: string]: string};
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            port?: number;
            portName?: string;
            type?: string;
        }

        export interface TidbClusterSpecPdStorageVolumes {
            mountPath?: string;
            name: string;
            storageClassName?: string;
            storageSize: string;
        }

        export interface TidbClusterSpecPdSuspendAction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbClusterSpecPdTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbClusterSpecPdTopologySpreadConstraints {
            topologyKey: string;
        }

        export interface TidbClusterSpecPodSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPodSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecPodSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbClusterSpecPodSecurityContextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPodSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecPodSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecPodSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecPodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecPump {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumeMounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumes[];
            affinity?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinity;
            annotations?: {[key: string]: string};
            baseImage?: string;
            config?: {[key: string]: any};
            configUpdateStrategy?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpDnsConfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvFrom[];
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpImagePullSecrets[];
            initContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainers[];
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpPodSecurityContext;
            priorityClassName?: string;
            replicas: number;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            serviceAccount?: string;
            setTimeZone?: boolean;
            statefulSetUpdateStrategy?: string;
            storageClassName?: string;
            suspendAction?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpSuspendAction;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpTopologySpreadConstraints[];
            version?: string;
        }
        /**
         * tidbClusterSpecPumpProvideDefaults sets the appropriate defaults for TidbClusterSpecPump
         */
        export function tidbClusterSpecPumpProvideDefaults(val: TidbClusterSpecPump): TidbClusterSpecPump {
            return {
                ...val,
                baseImage: (val.baseImage) ?? "pingcap/tidb-binlog",
            };
        }

        export interface TidbClusterSpecPumpAdditionalContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersEnvValueFrom;
        }

        export interface TidbClusterSpecPumpAdditionalContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersEnvFromSecretRef;
        }

        export interface TidbClusterSpecPumpAdditionalContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecPumpAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePreStop;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartTcpSocket;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopTcpSocket;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLivenessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecPumpAdditionalContainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecPumpAdditionalContainersPorts
         */
        export function tidbClusterSpecPumpAdditionalContainersPortsProvideDefaults(val: TidbClusterSpecPumpAdditionalContainersPorts): TidbClusterSpecPumpAdditionalContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecPumpAdditionalContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPumpAdditionalContainersReadinessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecPumpAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecPumpAdditionalContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecPumpAdditionalContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPumpAdditionalContainersStartupProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecPumpAdditionalContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesAwsElasticBlockStore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesAzureDisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesAzureFile;
            cephfs?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesConfigMap;
            csi?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesDownwardAPI;
            emptyDir?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesEmptyDir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesFlexVolume;
            flocker?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesGcePersistentDisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesGitRepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesHostPath;
            iscsi?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesPersistentVolumeClaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesPhotonPersistentDisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesPortworxVolume;
            projected?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesScaleIO;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesVsphereVolume;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesAwsElasticBlockStore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesAzureDisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesAzureFile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesCephfsSecretRef;
            user?: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesCephfsSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesCinderSecretRef;
            volumeID: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesCinderSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesConfigMap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesCsiNodePublishSecretRef;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbClusterSpecPumpAdditionalVolumesCsiNodePublishSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesDownwardAPI {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesDownwardAPIItems[];
        }

        export interface TidbClusterSpecPumpAdditionalVolumesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesEmptyDir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesEphemeralVolumeClaimTemplate;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesEphemeralVolumeClaimTemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesEphemeralVolumeClaimTemplateSpec;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecPumpAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPumpAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPumpAdditionalVolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbClusterSpecPumpAdditionalVolumesFlexVolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesFlexVolumeSecretRef;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesFlexVolumeSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesGcePersistentDisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesGitRepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesHostPath {
            path: string;
            type?: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesIscsiSecretRef;
            targetPortal: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesIscsiSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesPersistentVolumeClaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesPhotonPersistentDisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesPortworxVolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSources[];
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesConfigMap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPI;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesServiceAccountToken;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSourcesConfigMap {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSourcesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPI {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItems[];
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSourcesServiceAccountToken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesRbdSecretRef;
            user?: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesRbdSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesScaleIO {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesScaleIOSecretRef;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesScaleIOSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesStorageosSecretRef;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesStorageosSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesVsphereVolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbClusterSpecPumpAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeAffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAntiAffinity;
        }

        export interface TidbClusterSpecPumpAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPumpAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPumpAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecPumpDnsConfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpDnsConfigOptions[];
            searches?: string[];
        }

        export interface TidbClusterSpecPumpDnsConfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbClusterSpecPumpEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvValueFrom;
        }

        export interface TidbClusterSpecPumpEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvFromSecretRef;
        }

        export interface TidbClusterSpecPumpEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecPumpEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPumpEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPumpEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpImagePullSecrets {
            name?: string;
        }

        export interface TidbClusterSpecPumpInitContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecPumpInitContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersEnvValueFrom;
        }

        export interface TidbClusterSpecPumpInitContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersEnvFromSecretRef;
        }

        export interface TidbClusterSpecPumpInitContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpInitContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpInitContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecPumpInitContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpInitContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecPumpInitContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecPumpInitContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecPumpInitContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersLifecyclePreStop;
        }

        export interface TidbClusterSpecPumpInitContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersLifecyclePostStartTcpSocket;
        }

        export interface TidbClusterSpecPumpInitContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpInitContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpInitContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpInitContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpInitContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersLifecyclePreStopTcpSocket;
        }

        export interface TidbClusterSpecPumpInitContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpInitContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpInitContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpInitContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpInitContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPumpInitContainersLivenessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpInitContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpInitContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpInitContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpInitContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecPumpInitContainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecPumpInitContainersPorts
         */
        export function tidbClusterSpecPumpInitContainersPortsProvideDefaults(val: TidbClusterSpecPumpInitContainersPorts): TidbClusterSpecPumpInitContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecPumpInitContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPumpInitContainersReadinessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpInitContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpInitContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpInitContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpInitContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecPumpInitContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecPumpInitContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecPumpInitContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecPumpInitContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecPumpInitContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecPumpInitContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecPumpInitContainersStartupProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecPumpInitContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpInitContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecPumpInitContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpInitContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecPumpInitContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecPumpInitContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecPumpPodSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpPodSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpPodSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpPodSecurityContextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecPumpPodSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecPumpPodSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecPumpPodSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecPumpPodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecPumpPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecPumpSuspendAction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbClusterSpecPumpTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbClusterSpecPumpTopologySpreadConstraints {
            topologyKey: string;
        }

        export interface TidbClusterSpecServices {
            name?: string;
            type?: string;
        }

        export interface TidbClusterSpecSuspendAction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbClusterSpecTicdc {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumeMounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumes[];
            affinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinity;
            annotations?: {[key: string]: string};
            baseImage?: string;
            config?: {[key: string]: any};
            configUpdateStrategy?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcDnsConfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvFrom[];
            gracefulShutdownTimeout?: string;
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcImagePullSecrets[];
            initContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainers[];
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcPodSecurityContext;
            priorityClassName?: string;
            replicas: number;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            serviceAccount?: string;
            statefulSetUpdateStrategy?: string;
            storageClassName?: string;
            storageVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcStorageVolumes[];
            suspendAction?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcSuspendAction;
            terminationGracePeriodSeconds?: number;
            tlsClientSecretNames?: string[];
            tolerations?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcTopologySpreadConstraints[];
            version?: string;
        }
        /**
         * tidbClusterSpecTicdcProvideDefaults sets the appropriate defaults for TidbClusterSpecTicdc
         */
        export function tidbClusterSpecTicdcProvideDefaults(val: TidbClusterSpecTicdc): TidbClusterSpecTicdc {
            return {
                ...val,
                baseImage: (val.baseImage) ?? "pingcap/ticdc",
            };
        }

        export interface TidbClusterSpecTicdcAdditionalContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersEnvValueFrom;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersEnvFromSecretRef;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStop;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartTcpSocket;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopTcpSocket;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLivenessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecTicdcAdditionalContainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecTicdcAdditionalContainersPorts
         */
        export function tidbClusterSpecTicdcAdditionalContainersPortsProvideDefaults(val: TidbClusterSpecTicdcAdditionalContainersPorts): TidbClusterSpecTicdcAdditionalContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecTicdcAdditionalContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersReadinessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTicdcAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecTicdcAdditionalContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersStartupProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesAwsElasticBlockStore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesAzureDisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesAzureFile;
            cephfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesConfigMap;
            csi?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesDownwardAPI;
            emptyDir?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesEmptyDir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesFlexVolume;
            flocker?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesGcePersistentDisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesGitRepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesHostPath;
            iscsi?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesPersistentVolumeClaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesPhotonPersistentDisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesPortworxVolume;
            projected?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesScaleIO;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesVsphereVolume;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesAwsElasticBlockStore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesAzureDisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesAzureFile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesCephfsSecretRef;
            user?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesCephfsSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesCinderSecretRef;
            volumeID: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesCinderSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesConfigMap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesCsiNodePublishSecretRef;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesCsiNodePublishSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesDownwardAPI {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItems[];
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesEmptyDir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesEphemeralVolumeClaimTemplate;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesEphemeralVolumeClaimTemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesEphemeralVolumeClaimTemplateSpec;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesFlexVolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesFlexVolumeSecretRef;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesFlexVolumeSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesGcePersistentDisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesGitRepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesHostPath {
            path: string;
            type?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesIscsiSecretRef;
            targetPortal: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesIscsiSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesPersistentVolumeClaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesPhotonPersistentDisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesPortworxVolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSources[];
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesConfigMap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPI;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesServiceAccountToken;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesConfigMap {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPI {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItems[];
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesServiceAccountToken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesRbdSecretRef;
            user?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesRbdSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesScaleIO {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesScaleIOSecretRef;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesScaleIOSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesStorageosSecretRef;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesStorageosSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesVsphereVolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbClusterSpecTicdcAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeAffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAntiAffinity;
        }

        export interface TidbClusterSpecTicdcAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTicdcAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTicdcAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTicdcDnsConfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcDnsConfigOptions[];
            searches?: string[];
        }

        export interface TidbClusterSpecTicdcDnsConfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbClusterSpecTicdcEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvValueFrom;
        }

        export interface TidbClusterSpecTicdcEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvFromSecretRef;
        }

        export interface TidbClusterSpecTicdcEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecTicdcEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTicdcEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTicdcEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcImagePullSecrets {
            name?: string;
        }

        export interface TidbClusterSpecTicdcInitContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecTicdcInitContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersEnvValueFrom;
        }

        export interface TidbClusterSpecTicdcInitContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersEnvFromSecretRef;
        }

        export interface TidbClusterSpecTicdcInitContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcInitContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcInitContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecTicdcInitContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcInitContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTicdcInitContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTicdcInitContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTicdcInitContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersLifecyclePreStop;
        }

        export interface TidbClusterSpecTicdcInitContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersLifecyclePostStartTcpSocket;
        }

        export interface TidbClusterSpecTicdcInitContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcInitContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcInitContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcInitContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcInitContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersLifecyclePreStopTcpSocket;
        }

        export interface TidbClusterSpecTicdcInitContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcInitContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcInitContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcInitContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcInitContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTicdcInitContainersLivenessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcInitContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcInitContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcInitContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcInitContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecTicdcInitContainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecTicdcInitContainersPorts
         */
        export function tidbClusterSpecTicdcInitContainersPortsProvideDefaults(val: TidbClusterSpecTicdcInitContainersPorts): TidbClusterSpecTicdcInitContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecTicdcInitContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTicdcInitContainersReadinessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcInitContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcInitContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcInitContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcInitContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTicdcInitContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecTicdcInitContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecTicdcInitContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTicdcInitContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTicdcInitContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTicdcInitContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTicdcInitContainersStartupProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTicdcInitContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcInitContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTicdcInitContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcInitContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTicdcInitContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecTicdcInitContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTicdcPodSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcPodSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcPodSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcPodSecurityContextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTicdcPodSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecTicdcPodSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTicdcPodSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTicdcPodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTicdcPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTicdcStorageVolumes {
            mountPath?: string;
            name: string;
            storageClassName?: string;
            storageSize: string;
        }

        export interface TidbClusterSpecTicdcSuspendAction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbClusterSpecTicdcTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbClusterSpecTicdcTopologySpreadConstraints {
            topologyKey: string;
        }

        export interface TidbClusterSpecTidb {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumeMounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumes[];
            affinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinity;
            annotations?: {[key: string]: string};
            baseImage?: string;
            binlogEnabled?: boolean;
            config?: {[key: string]: any};
            configUpdateStrategy?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbDnsConfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvFrom[];
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbImagePullSecrets[];
            initContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainers[];
            initializer?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitializer;
            labels?: {[key: string]: string};
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecycle;
            limits?: {[key: string]: number | string};
            maxFailoverCount?: number;
            nodeSelector?: {[key: string]: string};
            plugins?: string[];
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbPodSecurityContext;
            priorityClassName?: string;
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbReadinessProbe;
            replicas: number;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            separateSlowLog?: boolean;
            service?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbService;
            serviceAccount?: string;
            slowLogTailer?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbSlowLogTailer;
            slowLogVolumeName?: string;
            statefulSetUpdateStrategy?: string;
            storageClassName?: string;
            storageVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbStorageVolumes[];
            suspendAction?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbSuspendAction;
            terminationGracePeriodSeconds?: number;
            tlsClient?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbTlsClient;
            tolerations?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbTopologySpreadConstraints[];
            version?: string;
        }
        /**
         * tidbClusterSpecTidbProvideDefaults sets the appropriate defaults for TidbClusterSpecTidb
         */
        export function tidbClusterSpecTidbProvideDefaults(val: TidbClusterSpecTidb): TidbClusterSpecTidb {
            return {
                ...val,
                baseImage: (val.baseImage) ?? "pingcap/tidb",
            };
        }

        export interface TidbClusterSpecTidbAdditionalContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersEnvValueFrom;
        }

        export interface TidbClusterSpecTidbAdditionalContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersEnvFromSecretRef;
        }

        export interface TidbClusterSpecTidbAdditionalContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecTidbAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePreStop;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartTcpSocket;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopTcpSocket;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLivenessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecTidbAdditionalContainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecTidbAdditionalContainersPorts
         */
        export function tidbClusterSpecTidbAdditionalContainersPortsProvideDefaults(val: TidbClusterSpecTidbAdditionalContainersPorts): TidbClusterSpecTidbAdditionalContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecTidbAdditionalContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTidbAdditionalContainersReadinessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTidbAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecTidbAdditionalContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecTidbAdditionalContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTidbAdditionalContainersStartupProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecTidbAdditionalContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesAwsElasticBlockStore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesAzureDisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesAzureFile;
            cephfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesConfigMap;
            csi?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesDownwardAPI;
            emptyDir?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesEmptyDir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesFlexVolume;
            flocker?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesGcePersistentDisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesGitRepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesHostPath;
            iscsi?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesPersistentVolumeClaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesPhotonPersistentDisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesPortworxVolume;
            projected?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesScaleIO;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesVsphereVolume;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesAwsElasticBlockStore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesAzureDisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesAzureFile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesCephfsSecretRef;
            user?: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesCephfsSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesCinderSecretRef;
            volumeID: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesCinderSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesConfigMap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesCsiNodePublishSecretRef;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbClusterSpecTidbAdditionalVolumesCsiNodePublishSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesDownwardAPI {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesDownwardAPIItems[];
        }

        export interface TidbClusterSpecTidbAdditionalVolumesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesEmptyDir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesEphemeralVolumeClaimTemplate;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesEphemeralVolumeClaimTemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesEphemeralVolumeClaimTemplateSpec;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTidbAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTidbAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTidbAdditionalVolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbClusterSpecTidbAdditionalVolumesFlexVolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesFlexVolumeSecretRef;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesFlexVolumeSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesGcePersistentDisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesGitRepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesHostPath {
            path: string;
            type?: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesIscsiSecretRef;
            targetPortal: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesIscsiSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesPersistentVolumeClaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesPhotonPersistentDisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesPortworxVolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSources[];
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesConfigMap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPI;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesServiceAccountToken;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSourcesConfigMap {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSourcesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPI {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItems[];
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSourcesServiceAccountToken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesRbdSecretRef;
            user?: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesRbdSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesScaleIO {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesScaleIOSecretRef;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesScaleIOSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesStorageosSecretRef;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesStorageosSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesVsphereVolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbClusterSpecTidbAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeAffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAntiAffinity;
        }

        export interface TidbClusterSpecTidbAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTidbAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTidbAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTidbDnsConfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbDnsConfigOptions[];
            searches?: string[];
        }

        export interface TidbClusterSpecTidbDnsConfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbClusterSpecTidbEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvValueFrom;
        }

        export interface TidbClusterSpecTidbEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvFromSecretRef;
        }

        export interface TidbClusterSpecTidbEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecTidbEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTidbEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTidbEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbImagePullSecrets {
            name?: string;
        }

        export interface TidbClusterSpecTidbInitContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecTidbInitContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersEnvValueFrom;
        }

        export interface TidbClusterSpecTidbInitContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersEnvFromSecretRef;
        }

        export interface TidbClusterSpecTidbInitContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbInitContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbInitContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecTidbInitContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbInitContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTidbInitContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTidbInitContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTidbInitContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersLifecyclePreStop;
        }

        export interface TidbClusterSpecTidbInitContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersLifecyclePostStartTcpSocket;
        }

        export interface TidbClusterSpecTidbInitContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbInitContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbInitContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbInitContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbInitContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersLifecyclePreStopTcpSocket;
        }

        export interface TidbClusterSpecTidbInitContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbInitContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbInitContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbInitContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbInitContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTidbInitContainersLivenessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbInitContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbInitContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbInitContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbInitContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecTidbInitContainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecTidbInitContainersPorts
         */
        export function tidbClusterSpecTidbInitContainersPortsProvideDefaults(val: TidbClusterSpecTidbInitContainersPorts): TidbClusterSpecTidbInitContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecTidbInitContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTidbInitContainersReadinessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbInitContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbInitContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbInitContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbInitContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTidbInitContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecTidbInitContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecTidbInitContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTidbInitContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTidbInitContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTidbInitContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTidbInitContainersStartupProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbInitContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbInitContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbInitContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbInitContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbInitContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecTidbInitContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTidbInitializer {
            createPassword?: boolean;
        }

        export interface TidbClusterSpecTidbLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePreStop;
        }

        export interface TidbClusterSpecTidbLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePostStartTcpSocket;
        }

        export interface TidbClusterSpecTidbLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePreStopTcpSocket;
        }

        export interface TidbClusterSpecTidbLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbClusterSpecTidbLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTidbLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTidbPodSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbPodSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbPodSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbPodSecurityContextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbPodSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecTidbPodSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTidbPodSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTidbPodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTidbPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTidbReadinessProbe {
            initialDelaySeconds?: number;
            periodSeconds?: number;
            type?: string;
        }

        export interface TidbClusterSpecTidbService {
            additionalPorts?: outputs.pingcap.v1alpha1.TidbClusterSpecTidbServiceAdditionalPorts[];
            annotations?: {[key: string]: string};
            clusterIP?: string;
            exposeStatus?: boolean;
            externalTrafficPolicy?: string;
            labels?: {[key: string]: string};
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            mysqlNodePort?: number;
            port?: number;
            portName?: string;
            statusNodePort?: number;
            type?: string;
        }

        export interface TidbClusterSpecTidbServiceAdditionalPorts {
            appProtocol?: string;
            name?: string;
            nodePort?: number;
            port: number;
            protocol?: string;
            targetPort?: number | string;
        }
        /**
         * tidbClusterSpecTidbServiceAdditionalPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecTidbServiceAdditionalPorts
         */
        export function tidbClusterSpecTidbServiceAdditionalPortsProvideDefaults(val: TidbClusterSpecTidbServiceAdditionalPorts): TidbClusterSpecTidbServiceAdditionalPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecTidbSlowLogTailer {
            image?: string;
            imagePullPolicy?: string;
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTidbStorageVolumes {
            mountPath?: string;
            name: string;
            storageClassName?: string;
            storageSize: string;
        }

        export interface TidbClusterSpecTidbSuspendAction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbClusterSpecTidbTlsClient {
            disableClientAuthn?: boolean;
            enabled?: boolean;
            skipInternalClientCA?: boolean;
        }

        export interface TidbClusterSpecTidbTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbClusterSpecTidbTopologySpreadConstraints {
            topologyKey: string;
        }

        export interface TidbClusterSpecTiflash {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumeMounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumes[];
            affinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinity;
            annotations?: {[key: string]: string};
            baseImage?: string;
            config?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashConfig;
            configUpdateStrategy?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashDnsConfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvFrom[];
            failover?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashFailover;
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashImagePullSecrets[];
            initContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainers[];
            initializer?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitializer;
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            logTailer?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashLogTailer;
            maxFailoverCount?: number;
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashPodSecurityContext;
            priorityClassName?: string;
            privileged?: boolean;
            recoverFailover?: boolean;
            replicas: number;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            serviceAccount?: string;
            statefulSetUpdateStrategy?: string;
            storageClaims: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashStorageClaims[];
            suspendAction?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashSuspendAction;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashTopologySpreadConstraints[];
            version?: string;
        }
        /**
         * tidbClusterSpecTiflashProvideDefaults sets the appropriate defaults for TidbClusterSpecTiflash
         */
        export function tidbClusterSpecTiflashProvideDefaults(val: TidbClusterSpecTiflash): TidbClusterSpecTiflash {
            return {
                ...val,
                baseImage: (val.baseImage) ?? "pingcap/tiflash",
            };
        }

        export interface TidbClusterSpecTiflashAdditionalContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersEnvValueFrom;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersEnvFromSecretRef;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStop;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartTcpSocket;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopTcpSocket;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLivenessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecTiflashAdditionalContainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecTiflashAdditionalContainersPorts
         */
        export function tidbClusterSpecTiflashAdditionalContainersPortsProvideDefaults(val: TidbClusterSpecTiflashAdditionalContainersPorts): TidbClusterSpecTiflashAdditionalContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecTiflashAdditionalContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersReadinessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTiflashAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecTiflashAdditionalContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersStartupProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesAwsElasticBlockStore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesAzureDisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesAzureFile;
            cephfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesConfigMap;
            csi?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesDownwardAPI;
            emptyDir?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesEmptyDir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesFlexVolume;
            flocker?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesGcePersistentDisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesGitRepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesHostPath;
            iscsi?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesPersistentVolumeClaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesPhotonPersistentDisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesPortworxVolume;
            projected?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesScaleIO;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesVsphereVolume;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesAwsElasticBlockStore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesAzureDisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesAzureFile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesCephfsSecretRef;
            user?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesCephfsSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesCinderSecretRef;
            volumeID: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesCinderSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesConfigMap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesCsiNodePublishSecretRef;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesCsiNodePublishSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesDownwardAPI {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItems[];
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesEmptyDir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesEphemeralVolumeClaimTemplate;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesEphemeralVolumeClaimTemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesEphemeralVolumeClaimTemplateSpec;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesFlexVolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesFlexVolumeSecretRef;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesFlexVolumeSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesGcePersistentDisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesGitRepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesHostPath {
            path: string;
            type?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesIscsiSecretRef;
            targetPortal: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesIscsiSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesPersistentVolumeClaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesPhotonPersistentDisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesPortworxVolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSources[];
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesConfigMap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPI;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesServiceAccountToken;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesConfigMap {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPI {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItems[];
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesServiceAccountToken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesRbdSecretRef;
            user?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesRbdSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesScaleIO {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesScaleIOSecretRef;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesScaleIOSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesStorageosSecretRef;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesStorageosSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesVsphereVolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbClusterSpecTiflashAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeAffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAntiAffinity;
        }

        export interface TidbClusterSpecTiflashAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTiflashAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTiflashAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTiflashConfig {
            config?: {[key: string]: any};
            proxy?: {[key: string]: any};
        }

        export interface TidbClusterSpecTiflashDnsConfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashDnsConfigOptions[];
            searches?: string[];
        }

        export interface TidbClusterSpecTiflashDnsConfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbClusterSpecTiflashEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvValueFrom;
        }

        export interface TidbClusterSpecTiflashEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvFromSecretRef;
        }

        export interface TidbClusterSpecTiflashEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecTiflashEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTiflashEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTiflashEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashFailover {
            recoverByUID?: string;
        }

        export interface TidbClusterSpecTiflashImagePullSecrets {
            name?: string;
        }

        export interface TidbClusterSpecTiflashInitContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecTiflashInitContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersEnvValueFrom;
        }

        export interface TidbClusterSpecTiflashInitContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersEnvFromSecretRef;
        }

        export interface TidbClusterSpecTiflashInitContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashInitContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashInitContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecTiflashInitContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashInitContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTiflashInitContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTiflashInitContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTiflashInitContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersLifecyclePreStop;
        }

        export interface TidbClusterSpecTiflashInitContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersLifecyclePostStartTcpSocket;
        }

        export interface TidbClusterSpecTiflashInitContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashInitContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashInitContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashInitContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashInitContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersLifecyclePreStopTcpSocket;
        }

        export interface TidbClusterSpecTiflashInitContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashInitContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashInitContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashInitContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashInitContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTiflashInitContainersLivenessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashInitContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashInitContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashInitContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashInitContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecTiflashInitContainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecTiflashInitContainersPorts
         */
        export function tidbClusterSpecTiflashInitContainersPortsProvideDefaults(val: TidbClusterSpecTiflashInitContainersPorts): TidbClusterSpecTiflashInitContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecTiflashInitContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTiflashInitContainersReadinessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashInitContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashInitContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashInitContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashInitContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTiflashInitContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecTiflashInitContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecTiflashInitContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTiflashInitContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTiflashInitContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTiflashInitContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTiflashInitContainersStartupProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTiflashInitContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashInitContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTiflashInitContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashInitContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTiflashInitContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecTiflashInitContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTiflashInitializer {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTiflashLogTailer {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTiflashPodSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashPodSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashPodSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashPodSecurityContextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashPodSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecTiflashPodSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTiflashPodSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTiflashPodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTiflashPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTiflashStorageClaims {
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTiflashStorageClaimsResources;
            storageClassName?: string;
        }

        export interface TidbClusterSpecTiflashStorageClaimsResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTiflashSuspendAction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbClusterSpecTiflashTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbClusterSpecTiflashTopologySpreadConstraints {
            topologyKey: string;
        }

        export interface TidbClusterSpecTikv {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumeMounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumes[];
            affinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinity;
            annotations?: {[key: string]: string};
            baseImage?: string;
            config?: {[key: string]: any};
            configUpdateStrategy?: string;
            dataSubDir?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvDnsConfig;
            dnsPolicy?: string;
            enableNamedStatusPort?: boolean;
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvFrom[];
            evictLeaderTimeout?: string;
            failover?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvFailover;
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvImagePullSecrets[];
            initContainers?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainers[];
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            logTailer?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvLogTailer;
            maxFailoverCount?: number;
            mountClusterClientSecret?: boolean;
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvPodSecurityContext;
            priorityClassName?: string;
            privileged?: boolean;
            raftLogVolumeName?: string;
            recoverFailover?: boolean;
            replicas: number;
            requests?: {[key: string]: number | string};
            rocksDBLogVolumeName?: string;
            schedulerName?: string;
            separateRaftLog?: boolean;
            separateRocksDBLog?: boolean;
            serviceAccount?: string;
            statefulSetUpdateStrategy?: string;
            storageClassName?: string;
            storageVolumes?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvStorageVolumes[];
            storeLabels?: string[];
            suspendAction?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvSuspendAction;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvTopologySpreadConstraints[];
            version?: string;
        }
        /**
         * tidbClusterSpecTikvProvideDefaults sets the appropriate defaults for TidbClusterSpecTikv
         */
        export function tidbClusterSpecTikvProvideDefaults(val: TidbClusterSpecTikv): TidbClusterSpecTikv {
            return {
                ...val,
                baseImage: (val.baseImage) ?? "pingcap/tikv",
            };
        }

        export interface TidbClusterSpecTikvAdditionalContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersEnvValueFrom;
        }

        export interface TidbClusterSpecTikvAdditionalContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersEnvFromSecretRef;
        }

        export interface TidbClusterSpecTikvAdditionalContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecTikvAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePreStop;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartTcpSocket;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopTcpSocket;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLivenessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecTikvAdditionalContainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecTikvAdditionalContainersPorts
         */
        export function tidbClusterSpecTikvAdditionalContainersPortsProvideDefaults(val: TidbClusterSpecTikvAdditionalContainersPorts): TidbClusterSpecTikvAdditionalContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecTikvAdditionalContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTikvAdditionalContainersReadinessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTikvAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecTikvAdditionalContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecTikvAdditionalContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTikvAdditionalContainersStartupProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecTikvAdditionalContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesAwsElasticBlockStore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesAzureDisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesAzureFile;
            cephfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesConfigMap;
            csi?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesDownwardAPI;
            emptyDir?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesEmptyDir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesFlexVolume;
            flocker?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesGcePersistentDisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesGitRepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesHostPath;
            iscsi?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesPersistentVolumeClaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesPhotonPersistentDisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesPortworxVolume;
            projected?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesScaleIO;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesVsphereVolume;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesAwsElasticBlockStore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesAzureDisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesAzureFile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesCephfsSecretRef;
            user?: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesCephfsSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesCinderSecretRef;
            volumeID: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesCinderSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesConfigMap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesCsiNodePublishSecretRef;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbClusterSpecTikvAdditionalVolumesCsiNodePublishSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesDownwardAPI {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesDownwardAPIItems[];
        }

        export interface TidbClusterSpecTikvAdditionalVolumesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesEmptyDir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesEphemeralVolumeClaimTemplate;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesEphemeralVolumeClaimTemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesEphemeralVolumeClaimTemplateSpec;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTikvAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTikvAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTikvAdditionalVolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbClusterSpecTikvAdditionalVolumesFlexVolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesFlexVolumeSecretRef;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesFlexVolumeSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesGcePersistentDisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesGitRepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesHostPath {
            path: string;
            type?: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesIscsiSecretRef;
            targetPortal: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesIscsiSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesPersistentVolumeClaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesPhotonPersistentDisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesPortworxVolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSources[];
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesConfigMap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPI;
            secret?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesServiceAccountToken;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSourcesConfigMap {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSourcesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPI {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItems[];
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSourcesServiceAccountToken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesRbdSecretRef;
            user?: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesRbdSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesScaleIO {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesScaleIOSecretRef;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesScaleIOSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesStorageosSecretRef;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesStorageosSecretRef {
            name?: string;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesVsphereVolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbClusterSpecTikvAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeAffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAntiAffinity;
        }

        export interface TidbClusterSpecTikvAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTikvAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTikvAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbClusterSpecTikvDnsConfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvDnsConfigOptions[];
            searches?: string[];
        }

        export interface TidbClusterSpecTikvDnsConfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbClusterSpecTikvEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvValueFrom;
        }

        export interface TidbClusterSpecTikvEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvFromSecretRef;
        }

        export interface TidbClusterSpecTikvEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecTikvEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTikvEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTikvEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvFailover {
            recoverByUID?: string;
        }

        export interface TidbClusterSpecTikvImagePullSecrets {
            name?: string;
        }

        export interface TidbClusterSpecTikvInitContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface TidbClusterSpecTikvInitContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersEnvValueFrom;
        }

        export interface TidbClusterSpecTikvInitContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersEnvFromSecretRef;
        }

        export interface TidbClusterSpecTikvInitContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvInitContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvInitContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersEnvValueFromSecretKeyRef;
        }

        export interface TidbClusterSpecTikvInitContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvInitContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbClusterSpecTikvInitContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbClusterSpecTikvInitContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbClusterSpecTikvInitContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersLifecyclePreStop;
        }

        export interface TidbClusterSpecTikvInitContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersLifecyclePostStartTcpSocket;
        }

        export interface TidbClusterSpecTikvInitContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvInitContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvInitContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvInitContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvInitContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersLifecyclePreStopTcpSocket;
        }

        export interface TidbClusterSpecTikvInitContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvInitContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvInitContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvInitContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvInitContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTikvInitContainersLivenessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvInitContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvInitContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvInitContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvInitContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbClusterSpecTikvInitContainersPortsProvideDefaults sets the appropriate defaults for TidbClusterSpecTikvInitContainersPorts
         */
        export function tidbClusterSpecTikvInitContainersPortsProvideDefaults(val: TidbClusterSpecTikvInitContainersPorts): TidbClusterSpecTikvInitContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbClusterSpecTikvInitContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTikvInitContainersReadinessProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvInitContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvInitContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvInitContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvInitContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTikvInitContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecTikvInitContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbClusterSpecTikvInitContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTikvInitContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTikvInitContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTikvInitContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbClusterSpecTikvInitContainersStartupProbeExec {
            command?: string[];
        }

        export interface TidbClusterSpecTikvInitContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvInitContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbClusterSpecTikvInitContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvInitContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbClusterSpecTikvInitContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface TidbClusterSpecTikvInitContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbClusterSpecTikvLogTailer {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbClusterSpecTikvPodSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvPodSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvPodSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvPodSecurityContextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbClusterSpecTikvPodSecurityContextWindowsOptions;
        }

        export interface TidbClusterSpecTikvPodSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbClusterSpecTikvPodSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbClusterSpecTikvPodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface TidbClusterSpecTikvPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbClusterSpecTikvStorageVolumes {
            mountPath?: string;
            name: string;
            storageClassName?: string;
            storageSize: string;
        }

        export interface TidbClusterSpecTikvSuspendAction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbClusterSpecTikvTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbClusterSpecTikvTopologySpreadConstraints {
            topologyKey: string;
        }

        export interface TidbClusterSpecTlsCluster {
            enabled?: boolean;
        }

        export interface TidbClusterSpecTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbClusterSpecTopologySpreadConstraints {
            topologyKey: string;
        }

        export interface TidbClusterStatus {
            auto-scaler?: outputs.pingcap.v1alpha1.TidbClusterStatusAuto-Scaler;
            clusterID?: string;
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusConditions[];
            pd?: outputs.pingcap.v1alpha1.TidbClusterStatusPd;
            pump?: outputs.pingcap.v1alpha1.TidbClusterStatusPump;
            ticdc?: outputs.pingcap.v1alpha1.TidbClusterStatusTicdc;
            tidb?: outputs.pingcap.v1alpha1.TidbClusterStatusTidb;
            tiflash?: outputs.pingcap.v1alpha1.TidbClusterStatusTiflash;
            tikv?: outputs.pingcap.v1alpha1.TidbClusterStatusTikv;
        }

        export interface TidbClusterStatusAuto-Scaler {
            name: string;
            namespace: string;
        }

        export interface TidbClusterStatusConditions {
            lastTransitionTime?: string;
            lastUpdateTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusPd {
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusPdConditions[];
            failureMembers?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusPdFailureMembers};
            image?: string;
            leader?: outputs.pingcap.v1alpha1.TidbClusterStatusPdLeader;
            members?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusPdMembers};
            peerMembers?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusPdPeerMembers};
            phase?: string;
            statefulSet?: outputs.pingcap.v1alpha1.TidbClusterStatusPdStatefulSet;
            synced?: boolean;
            unjoinedMembers?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusPdUnjoinedMembers};
            volumes?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusPdVolumes};
        }

        export interface TidbClusterStatusPdConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration?: number;
            reason: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusPdFailureMembers {
            createdAt?: string;
            memberDeleted?: boolean;
            memberID?: string;
            podName?: string;
            pvcUID?: string;
            pvcUIDSet?: {[key: string]: {[key: string]: any}};
        }

        export interface TidbClusterStatusPdLeader {
            clientURL: string;
            health: boolean;
            id: string;
            lastTransitionTime?: string;
            name: string;
        }

        export interface TidbClusterStatusPdMembers {
            clientURL: string;
            health: boolean;
            id: string;
            lastTransitionTime?: string;
            name: string;
        }

        export interface TidbClusterStatusPdPeerMembers {
            clientURL: string;
            health: boolean;
            id: string;
            lastTransitionTime?: string;
            name: string;
        }

        export interface TidbClusterStatusPdStatefulSet {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusPdStatefulSetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface TidbClusterStatusPdStatefulSetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusPdUnjoinedMembers {
            createdAt?: string;
            podName?: string;
            pvcUID?: string;
            pvcUIDSet?: {[key: string]: {[key: string]: any}};
        }

        export interface TidbClusterStatusPdVolumes {
            boundCount?: number;
            currentCapacity: number | string;
            currentCount?: number;
            name: string;
            resizedCapacity: number | string;
            resizedCount?: number;
        }

        export interface TidbClusterStatusPump {
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusPumpConditions[];
            members?: outputs.pingcap.v1alpha1.TidbClusterStatusPumpMembers[];
            phase?: string;
            statefulSet?: outputs.pingcap.v1alpha1.TidbClusterStatusPumpStatefulSet;
            volumes?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusPumpVolumes};
        }

        export interface TidbClusterStatusPumpConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration?: number;
            reason: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusPumpMembers {
            host: string;
            nodeId: string;
            state: string;
        }

        export interface TidbClusterStatusPumpStatefulSet {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusPumpStatefulSetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface TidbClusterStatusPumpStatefulSetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusPumpVolumes {
            boundCount?: number;
            currentCapacity: number | string;
            currentCount?: number;
            name: string;
            resizedCapacity: number | string;
            resizedCount?: number;
        }

        export interface TidbClusterStatusTicdc {
            captures?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTicdcCaptures};
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusTicdcConditions[];
            phase?: string;
            statefulSet?: outputs.pingcap.v1alpha1.TidbClusterStatusTicdcStatefulSet;
            synced?: boolean;
            volumes?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTicdcVolumes};
        }

        export interface TidbClusterStatusTicdcCaptures {
            id?: string;
            isOwner?: boolean;
            podName?: string;
            ready?: boolean;
            version?: string;
        }

        export interface TidbClusterStatusTicdcConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration?: number;
            reason: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusTicdcStatefulSet {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusTicdcStatefulSetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface TidbClusterStatusTicdcStatefulSetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusTicdcVolumes {
            boundCount?: number;
            currentCapacity: number | string;
            currentCount?: number;
            name: string;
            resizedCapacity: number | string;
            resizedCount?: number;
        }

        export interface TidbClusterStatusTidb {
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusTidbConditions[];
            failureMembers?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTidbFailureMembers};
            image?: string;
            members?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTidbMembers};
            passwordInitialized?: boolean;
            phase?: string;
            resignDDLOwnerRetryCount?: number;
            statefulSet?: outputs.pingcap.v1alpha1.TidbClusterStatusTidbStatefulSet;
            volumes?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTidbVolumes};
        }

        export interface TidbClusterStatusTidbConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration?: number;
            reason: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusTidbFailureMembers {
            createdAt?: string;
            podName?: string;
        }

        export interface TidbClusterStatusTidbMembers {
            health: boolean;
            lastTransitionTime?: string;
            name: string;
            node?: string;
        }

        export interface TidbClusterStatusTidbStatefulSet {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusTidbStatefulSetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface TidbClusterStatusTidbStatefulSetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusTidbVolumes {
            boundCount?: number;
            currentCapacity: number | string;
            currentCount?: number;
            name: string;
            resizedCapacity: number | string;
            resizedCount?: number;
        }

        export interface TidbClusterStatusTiflash {
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusTiflashConditions[];
            failoverUID?: string;
            failureStores?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTiflashFailureStores};
            image?: string;
            peerStores?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTiflashPeerStores};
            phase?: string;
            statefulSet?: outputs.pingcap.v1alpha1.TidbClusterStatusTiflashStatefulSet;
            stores?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTiflashStores};
            synced?: boolean;
            tombstoneStores?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTiflashTombstoneStores};
            volumes?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTiflashVolumes};
        }

        export interface TidbClusterStatusTiflashConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration?: number;
            reason: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusTiflashFailureStores {
            createdAt?: string;
            podName?: string;
            storeID?: string;
        }

        export interface TidbClusterStatusTiflashPeerStores {
            id: string;
            ip: string;
            lastTransitionTime?: string;
            leaderCount: number;
            podName: string;
            state: string;
        }

        export interface TidbClusterStatusTiflashStatefulSet {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusTiflashStatefulSetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface TidbClusterStatusTiflashStatefulSetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusTiflashStores {
            id: string;
            ip: string;
            lastTransitionTime?: string;
            leaderCount: number;
            podName: string;
            state: string;
        }

        export interface TidbClusterStatusTiflashTombstoneStores {
            id: string;
            ip: string;
            lastTransitionTime?: string;
            leaderCount: number;
            podName: string;
            state: string;
        }

        export interface TidbClusterStatusTiflashVolumes {
            boundCount?: number;
            currentCapacity: number | string;
            currentCount?: number;
            name: string;
            resizedCapacity: number | string;
            resizedCount?: number;
        }

        export interface TidbClusterStatusTikv {
            bootStrapped?: boolean;
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusTikvConditions[];
            evictLeader?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTikvEvictLeader};
            failoverUID?: string;
            failureStores?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTikvFailureStores};
            image?: string;
            peerStores?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTikvPeerStores};
            phase?: string;
            statefulSet?: outputs.pingcap.v1alpha1.TidbClusterStatusTikvStatefulSet;
            stores?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTikvStores};
            synced?: boolean;
            tombstoneStores?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTikvTombstoneStores};
            volumes?: {[key: string]: outputs.pingcap.v1alpha1.TidbClusterStatusTikvVolumes};
        }

        export interface TidbClusterStatusTikvConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration?: number;
            reason: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusTikvEvictLeader {
            beginTime?: string;
            podCreateTime?: string;
            value?: string;
        }

        export interface TidbClusterStatusTikvFailureStores {
            createdAt?: string;
            podName?: string;
            storeID?: string;
        }

        export interface TidbClusterStatusTikvPeerStores {
            id: string;
            ip: string;
            lastTransitionTime?: string;
            leaderCount: number;
            podName: string;
            state: string;
        }

        export interface TidbClusterStatusTikvStatefulSet {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.TidbClusterStatusTikvStatefulSetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface TidbClusterStatusTikvStatefulSetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbClusterStatusTikvStores {
            id: string;
            ip: string;
            lastTransitionTime?: string;
            leaderCount: number;
            podName: string;
            state: string;
        }

        export interface TidbClusterStatusTikvTombstoneStores {
            id: string;
            ip: string;
            lastTransitionTime?: string;
            leaderCount: number;
            podName: string;
            state: string;
        }

        export interface TidbClusterStatusTikvVolumes {
            boundCount?: number;
            currentCapacity: number | string;
            currentCount?: number;
            name: string;
            resizedCapacity: number | string;
            resizedCount?: number;
        }

        export interface TidbInitializerSpec {
            cluster: outputs.pingcap.v1alpha1.TidbInitializerSpecCluster;
            image: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbInitializerSpecImagePullSecrets[];
            initSql?: string;
            initSqlConfigMap?: string;
            passwordSecret?: string;
            permitHost?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbInitializerSpecPodSecurityContext;
            resources?: outputs.pingcap.v1alpha1.TidbInitializerSpecResources;
            timezone?: string;
            tlsClientSecretName?: string;
        }

        export interface TidbInitializerSpecCluster {
            clusterDomain?: string;
            name: string;
            namespace?: string;
        }

        export interface TidbInitializerSpecImagePullSecrets {
            name?: string;
        }

        export interface TidbInitializerSpecPodSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbInitializerSpecPodSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbInitializerSpecPodSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbInitializerSpecPodSecurityContextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbInitializerSpecPodSecurityContextWindowsOptions;
        }

        export interface TidbInitializerSpecPodSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbInitializerSpecPodSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbInitializerSpecPodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface TidbInitializerSpecPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbInitializerSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbInitializerStatus {
            active?: number;
            completionTime?: string;
            conditions?: outputs.pingcap.v1alpha1.TidbInitializerStatusConditions[];
            failed?: number;
            phase?: string;
            startTime?: string;
            succeeded?: number;
        }

        export interface TidbInitializerStatusConditions {
            lastProbeTime?: string;
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbMonitorSpec {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainers[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumes[];
            alertManagerRulesVersion?: string;
            alertmanagerURL?: string;
            annotations?: {[key: string]: string};
            clusterScoped?: boolean;
            clusters?: outputs.pingcap.v1alpha1.TidbMonitorSpecClusters[];
            dm?: outputs.pingcap.v1alpha1.TidbMonitorSpecDm;
            enableAlertRules?: boolean;
            externalLabels?: {[key: string]: string};
            grafana?: outputs.pingcap.v1alpha1.TidbMonitorSpecGrafana;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbMonitorSpecImagePullSecrets[];
            initializer: outputs.pingcap.v1alpha1.TidbMonitorSpecInitializer;
            kubePrometheusURL?: string;
            labels?: {[key: string]: string};
            nodeSelector?: {[key: string]: string};
            persistent?: boolean;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbMonitorSpecPodSecurityContext;
            prometheus: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheus;
            prometheusReloader?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusReloader;
            pvReclaimPolicy?: string;
            reloader: outputs.pingcap.v1alpha1.TidbMonitorSpecReloader;
            replicaExternalLabelName?: string;
            replicas?: number;
            shards?: number;
            storage?: string;
            storageClassName?: string;
            thanos?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanos;
            timezone?: string;
            tolerations?: outputs.pingcap.v1alpha1.TidbMonitorSpecTolerations[];
        }
        /**
         * tidbMonitorSpecProvideDefaults sets the appropriate defaults for TidbMonitorSpec
         */
        export function tidbMonitorSpecProvideDefaults(val: TidbMonitorSpec): TidbMonitorSpec {
            return {
                ...val,
                pvReclaimPolicy: (val.pvReclaimPolicy) ?? "Retain",
            };
        }

        export interface TidbMonitorSpecAdditionalContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface TidbMonitorSpecAdditionalContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersEnvValueFrom;
        }

        export interface TidbMonitorSpecAdditionalContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersEnvFromSecretRef;
        }

        export interface TidbMonitorSpecAdditionalContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecAdditionalContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecAdditionalContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersEnvValueFromSecretKeyRef;
        }

        export interface TidbMonitorSpecAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbMonitorSpecAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbMonitorSpecAdditionalContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePreStop;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePostStartTcpSocket;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePreStopTcpSocket;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbMonitorSpecAdditionalContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbMonitorSpecAdditionalContainersLivenessProbeExec {
            command?: string[];
        }

        export interface TidbMonitorSpecAdditionalContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbMonitorSpecAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbMonitorSpecAdditionalContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbMonitorSpecAdditionalContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbMonitorSpecAdditionalContainersPortsProvideDefaults sets the appropriate defaults for TidbMonitorSpecAdditionalContainersPorts
         */
        export function tidbMonitorSpecAdditionalContainersPortsProvideDefaults(val: TidbMonitorSpecAdditionalContainersPorts): TidbMonitorSpecAdditionalContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbMonitorSpecAdditionalContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbMonitorSpecAdditionalContainersReadinessProbeExec {
            command?: string[];
        }

        export interface TidbMonitorSpecAdditionalContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbMonitorSpecAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbMonitorSpecAdditionalContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbMonitorSpecAdditionalContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbMonitorSpecAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersSecurityContextWindowsOptions;
        }

        export interface TidbMonitorSpecAdditionalContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbMonitorSpecAdditionalContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbMonitorSpecAdditionalContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbMonitorSpecAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbMonitorSpecAdditionalContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbMonitorSpecAdditionalContainersStartupProbeExec {
            command?: string[];
        }

        export interface TidbMonitorSpecAdditionalContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbMonitorSpecAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbMonitorSpecAdditionalContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbMonitorSpecAdditionalContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface TidbMonitorSpecAdditionalContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbMonitorSpecAdditionalVolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesAwsElasticBlockStore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesAzureDisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesAzureFile;
            cephfs?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesConfigMap;
            csi?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesDownwardAPI;
            emptyDir?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesEmptyDir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesFlexVolume;
            flocker?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesGcePersistentDisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesGitRepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesHostPath;
            iscsi?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesPersistentVolumeClaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesPhotonPersistentDisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesPortworxVolume;
            projected?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesScaleIO;
            secret?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesVsphereVolume;
        }

        export interface TidbMonitorSpecAdditionalVolumesAwsElasticBlockStore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesAzureDisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbMonitorSpecAdditionalVolumesAzureFile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesCephfsSecretRef;
            user?: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesCephfsSecretRef {
            name?: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesCinderSecretRef;
            volumeID: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesCinderSecretRef {
            name?: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesConfigMap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecAdditionalVolumesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesCsiNodePublishSecretRef;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbMonitorSpecAdditionalVolumesCsiNodePublishSecretRef {
            name?: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesDownwardAPI {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesDownwardAPIItems[];
        }

        export interface TidbMonitorSpecAdditionalVolumesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbMonitorSpecAdditionalVolumesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesEmptyDir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbMonitorSpecAdditionalVolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesEphemeralVolumeClaimTemplate;
        }

        export interface TidbMonitorSpecAdditionalVolumesEphemeralVolumeClaimTemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpec;
        }

        export interface TidbMonitorSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            resources?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbMonitorSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbMonitorSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbMonitorSpecAdditionalVolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbMonitorSpecAdditionalVolumesFlexVolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesFlexVolumeSecretRef;
        }

        export interface TidbMonitorSpecAdditionalVolumesFlexVolumeSecretRef {
            name?: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesGcePersistentDisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbMonitorSpecAdditionalVolumesGitRepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbMonitorSpecAdditionalVolumesHostPath {
            path: string;
            type?: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesIscsiSecretRef;
            targetPortal: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesIscsiSecretRef {
            name?: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesPersistentVolumeClaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbMonitorSpecAdditionalVolumesPhotonPersistentDisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesPortworxVolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesProjectedSources[];
        }

        export interface TidbMonitorSpecAdditionalVolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesProjectedSourcesConfigMap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesProjectedSourcesDownwardAPI;
            secret?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesProjectedSourcesServiceAccountToken;
        }

        export interface TidbMonitorSpecAdditionalVolumesProjectedSourcesConfigMap {
            items?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesProjectedSourcesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecAdditionalVolumesProjectedSourcesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesProjectedSourcesDownwardAPI {
            items?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesProjectedSourcesDownwardAPIItems[];
        }

        export interface TidbMonitorSpecAdditionalVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbMonitorSpecAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecAdditionalVolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesProjectedSourcesServiceAccountToken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesRbdSecretRef;
            user?: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesRbdSecretRef {
            name?: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesScaleIO {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesScaleIOSecretRef;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesScaleIOSecretRef {
            name?: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalVolumesStorageosSecretRef;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesStorageosSecretRef {
            name?: string;
        }

        export interface TidbMonitorSpecAdditionalVolumesVsphereVolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbMonitorSpecClusters {
            clusterDomain?: string;
            name: string;
            namespace?: string;
        }

        export interface TidbMonitorSpecDm {
            clusters: outputs.pingcap.v1alpha1.TidbMonitorSpecDmClusters[];
            initializer: outputs.pingcap.v1alpha1.TidbMonitorSpecDmInitializer;
        }

        export interface TidbMonitorSpecDmClusters {
            clusterDomain?: string;
            name: string;
            namespace?: string;
        }

        export interface TidbMonitorSpecDmInitializer {
            baseImage?: string;
            envs?: {[key: string]: string};
            imagePullPolicy?: string;
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
            version?: string;
        }

        export interface TidbMonitorSpecGrafana {
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbMonitorSpecGrafanaAdditionalVolumeMounts[];
            baseImage?: string;
            envs?: {[key: string]: string};
            imagePullPolicy?: string;
            ingress?: outputs.pingcap.v1alpha1.TidbMonitorSpecGrafanaIngress;
            limits?: {[key: string]: number | string};
            logLevel?: string;
            password?: string;
            passwordSecret?: outputs.pingcap.v1alpha1.TidbMonitorSpecGrafanaPasswordSecret;
            requests?: {[key: string]: number | string};
            service?: outputs.pingcap.v1alpha1.TidbMonitorSpecGrafanaService;
            username?: string;
            usernameSecret?: outputs.pingcap.v1alpha1.TidbMonitorSpecGrafanaUsernameSecret;
            version?: string;
        }

        export interface TidbMonitorSpecGrafanaAdditionalVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbMonitorSpecGrafanaIngress {
            annotations?: {[key: string]: string};
            hosts: string[];
            tls?: outputs.pingcap.v1alpha1.TidbMonitorSpecGrafanaIngressTls[];
        }

        export interface TidbMonitorSpecGrafanaIngressTls {
            hosts?: string[];
            secretName?: string;
        }

        export interface TidbMonitorSpecGrafanaPasswordSecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecGrafanaService {
            annotations?: {[key: string]: string};
            clusterIP?: string;
            labels?: {[key: string]: string};
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            port?: number;
            portName?: string;
            type?: string;
        }

        export interface TidbMonitorSpecGrafanaUsernameSecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecImagePullSecrets {
            name?: string;
        }

        export interface TidbMonitorSpecInitializer {
            baseImage?: string;
            envs?: {[key: string]: string};
            imagePullPolicy?: string;
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
            version?: string;
        }

        export interface TidbMonitorSpecPodSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbMonitorSpecPodSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbMonitorSpecPodSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbMonitorSpecPodSecurityContextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbMonitorSpecPodSecurityContextWindowsOptions;
        }

        export interface TidbMonitorSpecPodSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbMonitorSpecPodSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbMonitorSpecPodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface TidbMonitorSpecPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbMonitorSpecPrometheus {
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusAdditionalVolumeMounts[];
            baseImage?: string;
            config?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusConfig;
            disableCompaction?: boolean;
            imagePullPolicy?: string;
            ingress?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusIngress;
            limits?: {[key: string]: number | string};
            logLevel?: string;
            remoteWrite?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemoteWrite[];
            requests?: {[key: string]: number | string};
            reserveDays?: number;
            retentionTime?: string;
            service?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusService;
            version?: string;
        }

        export interface TidbMonitorSpecPrometheusAdditionalVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbMonitorSpecPrometheusConfig {
            commandOptions?: string[];
            configMapRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusConfigConfigMapRef;
            ruleConfigRef?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusConfigRuleConfigRef;
        }

        export interface TidbMonitorSpecPrometheusConfigConfigMapRef {
            name?: string;
            namespace?: string;
        }

        export interface TidbMonitorSpecPrometheusConfigRuleConfigRef {
            name?: string;
            namespace?: string;
        }

        export interface TidbMonitorSpecPrometheusIngress {
            annotations?: {[key: string]: string};
            hosts: string[];
            tls?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusIngressTls[];
        }

        export interface TidbMonitorSpecPrometheusIngressTls {
            hosts?: string[];
            secretName?: string;
        }

        export interface TidbMonitorSpecPrometheusReloader {
            baseImage?: string;
            imagePullPolicy?: string;
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
            version?: string;
        }

        export interface TidbMonitorSpecPrometheusRemoteWrite {
            basicAuth?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemoteWriteBasicAuth;
            bearerToken?: string;
            bearerTokenFile?: string;
            proxyUrl?: string;
            queueConfig?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemoteWriteQueueConfig;
            remoteTimeout?: number;
            tlsConfig?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemoteWriteTlsConfig;
            url: string;
            writeRelabelConfigs?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemoteWriteWriteRelabelConfigs[];
        }

        export interface TidbMonitorSpecPrometheusRemoteWriteBasicAuth {
            password?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemoteWriteBasicAuthPassword;
            username?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemoteWriteBasicAuthUsername;
        }

        export interface TidbMonitorSpecPrometheusRemoteWriteBasicAuthPassword {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecPrometheusRemoteWriteBasicAuthUsername {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecPrometheusRemoteWriteQueueConfig {
            batchSendDeadline?: number;
            capacity?: number;
            maxBackoff?: number;
            maxRetries?: number;
            maxSamplesPerSend?: number;
            maxShards?: number;
            minBackoff?: number;
        }

        export interface TidbMonitorSpecPrometheusRemoteWriteTlsConfig {
            ca?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemoteWriteTlsConfigCa;
            caFile?: string;
            cert?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemoteWriteTlsConfigCert;
            certFile?: string;
            insecureSkipVerify?: boolean;
            keyFile?: string;
            keySecret?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemoteWriteTlsConfigKeySecret;
            serverName?: string;
        }

        export interface TidbMonitorSpecPrometheusRemoteWriteTlsConfigCa {
            configMap?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemoteWriteTlsConfigCaConfigMap;
            secret?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemoteWriteTlsConfigCaSecret;
        }

        export interface TidbMonitorSpecPrometheusRemoteWriteTlsConfigCaConfigMap {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecPrometheusRemoteWriteTlsConfigCaSecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecPrometheusRemoteWriteTlsConfigCert {
            configMap?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemoteWriteTlsConfigCertConfigMap;
            secret?: outputs.pingcap.v1alpha1.TidbMonitorSpecPrometheusRemoteWriteTlsConfigCertSecret;
        }

        export interface TidbMonitorSpecPrometheusRemoteWriteTlsConfigCertConfigMap {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecPrometheusRemoteWriteTlsConfigCertSecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecPrometheusRemoteWriteTlsConfigKeySecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecPrometheusRemoteWriteWriteRelabelConfigs {
            action?: string;
            modulus?: number;
            regex?: string;
            replacement?: string;
            separator?: string;
            sourceLabels?: string[];
            targetLabel?: string;
        }

        export interface TidbMonitorSpecPrometheusService {
            annotations?: {[key: string]: string};
            clusterIP?: string;
            labels?: {[key: string]: string};
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            port?: number;
            portName?: string;
            type?: string;
        }

        export interface TidbMonitorSpecReloader {
            baseImage?: string;
            imagePullPolicy?: string;
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
            service?: outputs.pingcap.v1alpha1.TidbMonitorSpecReloaderService;
            version?: string;
        }

        export interface TidbMonitorSpecReloaderService {
            annotations?: {[key: string]: string};
            clusterIP?: string;
            labels?: {[key: string]: string};
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            port?: number;
            portName?: string;
            type?: string;
        }

        export interface TidbMonitorSpecThanos {
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosAdditionalVolumeMounts[];
            baseImage?: string;
            grpcServerTlsConfig?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosGrpcServerTlsConfig;
            imagePullPolicy?: string;
            limits?: {[key: string]: number | string};
            listenLocal?: boolean;
            logFormat?: string;
            logLevel?: string;
            minTime?: string;
            objectStorageConfig?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosObjectStorageConfig;
            objectStorageConfigFile?: string;
            requests?: {[key: string]: number | string};
            routePrefix?: string;
            tracingConfig?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosTracingConfig;
            tracingConfigFile?: string;
            version?: string;
        }

        export interface TidbMonitorSpecThanosAdditionalVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbMonitorSpecThanosGrpcServerTlsConfig {
            ca?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosGrpcServerTlsConfigCa;
            caFile?: string;
            cert?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosGrpcServerTlsConfigCert;
            certFile?: string;
            insecureSkipVerify?: boolean;
            keyFile?: string;
            keySecret?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosGrpcServerTlsConfigKeySecret;
            serverName?: string;
        }

        export interface TidbMonitorSpecThanosGrpcServerTlsConfigCa {
            configMap?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosGrpcServerTlsConfigCaConfigMap;
            secret?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosGrpcServerTlsConfigCaSecret;
        }

        export interface TidbMonitorSpecThanosGrpcServerTlsConfigCaConfigMap {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecThanosGrpcServerTlsConfigCaSecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecThanosGrpcServerTlsConfigCert {
            configMap?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosGrpcServerTlsConfigCertConfigMap;
            secret?: outputs.pingcap.v1alpha1.TidbMonitorSpecThanosGrpcServerTlsConfigCertSecret;
        }

        export interface TidbMonitorSpecThanosGrpcServerTlsConfigCertConfigMap {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecThanosGrpcServerTlsConfigCertSecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecThanosGrpcServerTlsConfigKeySecret {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecThanosObjectStorageConfig {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecThanosTracingConfig {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbMonitorSpecTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbMonitorStatus {
            deploymentStorageStatus?: outputs.pingcap.v1alpha1.TidbMonitorStatusDeploymentStorageStatus;
            statefulSet?: outputs.pingcap.v1alpha1.TidbMonitorStatusStatefulSet;
        }

        export interface TidbMonitorStatusDeploymentStorageStatus {
            pvName?: string;
        }

        export interface TidbMonitorStatusStatefulSet {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.TidbMonitorStatusStatefulSetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface TidbMonitorStatusStatefulSetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }

        export interface TidbNGMonitoringSpec {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumeMounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumes[];
            affinity?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinity;
            annotations?: {[key: string]: string};
            clusterDomain?: string;
            clusters: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecClusters[];
            configUpdateStrategy?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecDnsConfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecEnvFrom[];
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecImagePullSecrets[];
            initContainers?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainers[];
            labels?: {[key: string]: string};
            ngMonitoring: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoring;
            nodeSelector?: {[key: string]: string};
            paused?: boolean;
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecPodSecurityContext;
            priorityClassName?: string;
            pvReclaimPolicy?: string;
            schedulerName?: string;
            statefulSetUpdateStrategy?: string;
            suspendAction?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecSuspendAction;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecTopologySpreadConstraints[];
            version?: string;
        }
        /**
         * tidbNGMonitoringSpecProvideDefaults sets the appropriate defaults for TidbNGMonitoringSpec
         */
        export function tidbNGMonitoringSpecProvideDefaults(val: TidbNGMonitoringSpec): TidbNGMonitoringSpec {
            return {
                ...val,
                ngMonitoring: outputs.pingcap.v1alpha1.tidbNGMonitoringSpecNgMonitoringProvideDefaults(val.ngMonitoring),
                pvReclaimPolicy: (val.pvReclaimPolicy) ?? "Retain",
            };
        }

        export interface TidbNGMonitoringSpecAdditionalContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersEnvValueFrom;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersEnvFromSecretRef;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersEnvValueFromSecretKeyRef;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersLifecyclePreStop;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersLifecyclePostStartTcpSocket;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecAdditionalContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersLifecyclePreStopTcpSocket;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecAdditionalContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersLivenessProbeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecAdditionalContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbNGMonitoringSpecAdditionalContainersPortsProvideDefaults sets the appropriate defaults for TidbNGMonitoringSpecAdditionalContainersPorts
         */
        export function tidbNGMonitoringSpecAdditionalContainersPortsProvideDefaults(val: TidbNGMonitoringSpecAdditionalContainersPorts): TidbNGMonitoringSpecAdditionalContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbNGMonitoringSpecAdditionalContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersReadinessProbeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecAdditionalContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbNGMonitoringSpecAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersSecurityContextWindowsOptions;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbNGMonitoringSpecAdditionalContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersStartupProbeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecAdditionalContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface TidbNGMonitoringSpecAdditionalContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesAwsElasticBlockStore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesAzureDisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesAzureFile;
            cephfs?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesConfigMap;
            csi?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesDownwardAPI;
            emptyDir?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesEmptyDir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesFlexVolume;
            flocker?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesGcePersistentDisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesGitRepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesHostPath;
            iscsi?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesPersistentVolumeClaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesPhotonPersistentDisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesPortworxVolume;
            projected?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesScaleIO;
            secret?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesVsphereVolume;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesAwsElasticBlockStore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesAzureDisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesAzureFile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesCephfsSecretRef;
            user?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesCephfsSecretRef {
            name?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesCinderSecretRef;
            volumeID: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesCinderSecretRef {
            name?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesConfigMap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesCsiNodePublishSecretRef;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesCsiNodePublishSecretRef {
            name?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesDownwardAPI {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesDownwardAPIItems[];
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesEmptyDir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesEphemeralVolumeClaimTemplate;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesEphemeralVolumeClaimTemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpec;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            resources?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesFlexVolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesFlexVolumeSecretRef;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesFlexVolumeSecretRef {
            name?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesGcePersistentDisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesGitRepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesHostPath {
            path: string;
            type?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesIscsiSecretRef;
            targetPortal: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesIscsiSecretRef {
            name?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesPersistentVolumeClaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesPhotonPersistentDisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesPortworxVolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesProjectedSources[];
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesProjectedSourcesConfigMap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesProjectedSourcesDownwardAPI;
            secret?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesProjectedSourcesServiceAccountToken;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesProjectedSourcesConfigMap {
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesProjectedSourcesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesProjectedSourcesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesProjectedSourcesDownwardAPI {
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesProjectedSourcesDownwardAPIItems[];
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesProjectedSourcesServiceAccountToken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesRbdSecretRef;
            user?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesRbdSecretRef {
            name?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesScaleIO {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesScaleIOSecretRef;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesScaleIOSecretRef {
            name?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAdditionalVolumesStorageosSecretRef;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesStorageosSecretRef {
            name?: string;
        }

        export interface TidbNGMonitoringSpecAdditionalVolumesVsphereVolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbNGMonitoringSpecAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityNodeAffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodAffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodAntiAffinity;
        }

        export interface TidbNGMonitoringSpecAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface TidbNGMonitoringSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface TidbNGMonitoringSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface TidbNGMonitoringSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface TidbNGMonitoringSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface TidbNGMonitoringSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbNGMonitoringSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbNGMonitoringSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbNGMonitoringSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbNGMonitoringSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbNGMonitoringSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbNGMonitoringSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbNGMonitoringSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbNGMonitoringSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecClusters {
            clusterDomain?: string;
            name: string;
            namespace?: string;
        }

        export interface TidbNGMonitoringSpecDnsConfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecDnsConfigOptions[];
            searches?: string[];
        }

        export interface TidbNGMonitoringSpecDnsConfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbNGMonitoringSpecEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecEnvValueFrom;
        }

        export interface TidbNGMonitoringSpecEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecEnvFromSecretRef;
        }

        export interface TidbNGMonitoringSpecEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecEnvValueFromSecretKeyRef;
        }

        export interface TidbNGMonitoringSpecEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecImagePullSecrets {
            name?: string;
        }

        export interface TidbNGMonitoringSpecInitContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface TidbNGMonitoringSpecInitContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersEnvValueFrom;
        }

        export interface TidbNGMonitoringSpecInitContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersEnvFromSecretRef;
        }

        export interface TidbNGMonitoringSpecInitContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecInitContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecInitContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersEnvValueFromSecretKeyRef;
        }

        export interface TidbNGMonitoringSpecInitContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecInitContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecInitContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecInitContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecInitContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersLifecyclePreStop;
        }

        export interface TidbNGMonitoringSpecInitContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersLifecyclePostStartTcpSocket;
        }

        export interface TidbNGMonitoringSpecInitContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecInitContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecInitContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecInitContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecInitContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersLifecyclePreStopTcpSocket;
        }

        export interface TidbNGMonitoringSpecInitContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecInitContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecInitContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecInitContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecInitContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecInitContainersLivenessProbeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecInitContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecInitContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecInitContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecInitContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbNGMonitoringSpecInitContainersPortsProvideDefaults sets the appropriate defaults for TidbNGMonitoringSpecInitContainersPorts
         */
        export function tidbNGMonitoringSpecInitContainersPortsProvideDefaults(val: TidbNGMonitoringSpecInitContainersPorts): TidbNGMonitoringSpecInitContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbNGMonitoringSpecInitContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecInitContainersReadinessProbeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecInitContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecInitContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecInitContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecInitContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbNGMonitoringSpecInitContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersSecurityContextWindowsOptions;
        }

        export interface TidbNGMonitoringSpecInitContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbNGMonitoringSpecInitContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbNGMonitoringSpecInitContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbNGMonitoringSpecInitContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbNGMonitoringSpecInitContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecInitContainersStartupProbeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecInitContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecInitContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecInitContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecInitContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecInitContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface TidbNGMonitoringSpecInitContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoring {
            additionalContainers?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainers[];
            additionalVolumeMounts?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumeMounts[];
            additionalVolumes?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumes[];
            affinity?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinity;
            annotations?: {[key: string]: string};
            baseImage?: string;
            config?: {[key: string]: any};
            configUpdateStrategy?: string;
            dnsConfig?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringDnsConfig;
            dnsPolicy?: string;
            env?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringEnvFrom[];
            hostNetwork?: boolean;
            image?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringImagePullSecrets[];
            initContainers?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainers[];
            labels?: {[key: string]: string};
            limits?: {[key: string]: number | string};
            nodeSelector?: {[key: string]: string};
            podManagementPolicy?: string;
            podSecurityContext?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringPodSecurityContext;
            priorityClassName?: string;
            requests?: {[key: string]: number | string};
            schedulerName?: string;
            statefulSetUpdateStrategy?: string;
            storageClassName?: string;
            storageVolumes?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringStorageVolumes[];
            suspendAction?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringSuspendAction;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringTolerations[];
            topologySpreadConstraints?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringTopologySpreadConstraints[];
            version?: string;
        }
        /**
         * tidbNGMonitoringSpecNgMonitoringProvideDefaults sets the appropriate defaults for TidbNGMonitoringSpecNgMonitoring
         */
        export function tidbNGMonitoringSpecNgMonitoringProvideDefaults(val: TidbNGMonitoringSpecNgMonitoring): TidbNGMonitoringSpecNgMonitoring {
            return {
                ...val,
                baseImage: (val.baseImage) ?? "pingcap/ng-monitoring",
            };
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersEnvValueFrom;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersEnvFromSecretRef;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersEnvValueFromSecretKeyRef;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePreStop;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePostStartTcpSocket;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePreStopTcpSocket;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersLivenessProbeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbNGMonitoringSpecNgMonitoringAdditionalContainersPortsProvideDefaults sets the appropriate defaults for TidbNGMonitoringSpecNgMonitoringAdditionalContainersPorts
         */
        export function tidbNGMonitoringSpecNgMonitoringAdditionalContainersPortsProvideDefaults(val: TidbNGMonitoringSpecNgMonitoringAdditionalContainersPorts): TidbNGMonitoringSpecNgMonitoringAdditionalContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersReadinessProbeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersSecurityContextWindowsOptions;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersStartupProbeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumes {
            awsElasticBlockStore?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesAwsElasticBlockStore;
            azureDisk?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesAzureDisk;
            azureFile?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesAzureFile;
            cephfs?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesCephfs;
            cinder?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesCinder;
            configMap?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesConfigMap;
            csi?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesCsi;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesDownwardAPI;
            emptyDir?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesEmptyDir;
            ephemeral?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesEphemeral;
            fc?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesFc;
            flexVolume?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesFlexVolume;
            flocker?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesFlocker;
            gcePersistentDisk?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesGcePersistentDisk;
            gitRepo?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesGitRepo;
            glusterfs?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesGlusterfs;
            hostPath?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesHostPath;
            iscsi?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesIscsi;
            name: string;
            nfs?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesNfs;
            persistentVolumeClaim?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesPersistentVolumeClaim;
            photonPersistentDisk?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesPhotonPersistentDisk;
            portworxVolume?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesPortworxVolume;
            projected?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjected;
            quobyte?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesQuobyte;
            rbd?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesRbd;
            scaleIO?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesScaleIO;
            secret?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesSecret;
            storageos?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesStorageos;
            vsphereVolume?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesVsphereVolume;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesAwsElasticBlockStore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesAzureDisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesAzureFile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesCephfsSecretRef;
            user?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesCephfsSecretRef {
            name?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesCinderSecretRef;
            volumeID: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesCinderSecretRef {
            name?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesConfigMap {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesCsiNodePublishSecretRef;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesCsiNodePublishSecretRef {
            name?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesDownwardAPI {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesDownwardAPIItems[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesEmptyDir {
            medium?: string;
            sizeLimit?: number | string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesEphemeral {
            readOnly?: boolean;
            volumeClaimTemplate?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesEphemeralVolumeClaimTemplate;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesEphemeralVolumeClaimTemplate {
            metadata?: {[key: string]: any};
            spec: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesEphemeralVolumeClaimTemplateSpec;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            resources?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesEphemeralVolumeClaimTemplateSpecResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesFlexVolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesFlexVolumeSecretRef;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesFlexVolumeSecretRef {
            name?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesGcePersistentDisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesGitRepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesHostPath {
            path: string;
            type?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesIscsiSecretRef;
            targetPortal: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesIscsiSecretRef {
            name?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesPersistentVolumeClaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesPhotonPersistentDisk {
            fsType?: string;
            pdID: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesPortworxVolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjected {
            defaultMode?: number;
            sources: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSources[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSources {
            configMap?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSourcesConfigMap;
            downwardAPI?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSourcesDownwardAPI;
            secret?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSourcesServiceAccountToken;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSourcesConfigMap {
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSourcesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSourcesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSourcesDownwardAPI {
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSourcesDownwardAPIItems[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSourcesSecret {
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesProjectedSourcesServiceAccountToken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesRbdSecretRef;
            user?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesRbdSecretRef {
            name?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesScaleIO {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesScaleIOSecretRef;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesScaleIOSecretRef {
            name?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesSecret {
            defaultMode?: number;
            items?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAdditionalVolumesStorageosSecretRef;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesStorageosSecretRef {
            name?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAdditionalVolumesVsphereVolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinity {
            nodeAffinity?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityNodeAffinity;
            podAffinity?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityPodAffinity;
            podAntiAffinity?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityPodAntiAffinity;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface TidbNGMonitoringSpecNgMonitoringAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringDnsConfig {
            nameservers?: string[];
            options?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringDnsConfigOptions[];
            searches?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringDnsConfigOptions {
            name?: string;
            value?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringEnvValueFrom;
        }

        export interface TidbNGMonitoringSpecNgMonitoringEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringEnvFromSecretRef;
        }

        export interface TidbNGMonitoringSpecNgMonitoringEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringEnvValueFromSecretKeyRef;
        }

        export interface TidbNGMonitoringSpecNgMonitoringEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringImagePullSecrets {
            name?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainers {
            args?: string[];
            command?: string[];
            env?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersEnv[];
            envFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersLifecycle;
            livenessProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersLivenessProbe;
            name: string;
            ports?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersPorts[];
            readinessProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersReadinessProbe;
            resources?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersResources;
            securityContext?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersSecurityContext;
            startupProbe?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersVolumeDevices[];
            volumeMounts?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersEnvValueFrom;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersEnvFrom {
            configMapRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersEnvFromSecretRef;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersEnvValueFrom {
            configMapKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersEnvValueFromSecretKeyRef;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: number | string;
            resource: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersLifecycle {
            postStart?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePostStart;
            preStop?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePreStop;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePostStart {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePostStartExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePostStartTcpSocket;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePreStop {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePreStopExec;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePreStopTcpSocket;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersLivenessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersLivenessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersLivenessProbeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersLivenessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }
        /**
         * tidbNGMonitoringSpecNgMonitoringInitContainersPortsProvideDefaults sets the appropriate defaults for TidbNGMonitoringSpecNgMonitoringInitContainersPorts
         */
        export function tidbNGMonitoringSpecNgMonitoringInitContainersPortsProvideDefaults(val: TidbNGMonitoringSpecNgMonitoringInitContainersPorts): TidbNGMonitoringSpecNgMonitoringInitContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersReadinessProbe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersReadinessProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersReadinessProbeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersReadinessProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersResources {
            limits?: {[key: string]: number | string};
            requests?: {[key: string]: number | string};
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersSecurityContextWindowsOptions;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersStartupProbe {
            exec?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersStartupProbeTcpSocket;
            timeoutSeconds?: number;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersStartupProbeExec {
            command?: string[];
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringInitContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: number | string;
            scheme?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersStartupProbeTcpSocket {
            host?: string;
            port: number | string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringInitContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringPodSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringPodSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringPodSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringPodSecurityContextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecNgMonitoringPodSecurityContextWindowsOptions;
        }

        export interface TidbNGMonitoringSpecNgMonitoringPodSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringPodSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringPodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringStorageVolumes {
            mountPath?: string;
            name: string;
            storageClassName?: string;
            storageSize: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringSuspendAction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbNGMonitoringSpecNgMonitoringTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbNGMonitoringSpecNgMonitoringTopologySpreadConstraints {
            topologyKey: string;
        }

        export interface TidbNGMonitoringSpecPodSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecPodSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecPodSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecPodSecurityContextSysctls[];
            windowsOptions?: outputs.pingcap.v1alpha1.TidbNGMonitoringSpecPodSecurityContextWindowsOptions;
        }

        export interface TidbNGMonitoringSpecPodSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface TidbNGMonitoringSpecPodSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface TidbNGMonitoringSpecPodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface TidbNGMonitoringSpecPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface TidbNGMonitoringSpecSuspendAction {
            suspendStatefulSet?: boolean;
        }

        export interface TidbNGMonitoringSpecTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface TidbNGMonitoringSpecTopologySpreadConstraints {
            topologyKey: string;
        }

        export interface TidbNGMonitoringStatus {
            ngMonitoring?: outputs.pingcap.v1alpha1.TidbNGMonitoringStatusNgMonitoring;
        }

        export interface TidbNGMonitoringStatusNgMonitoring {
            phase?: string;
            statefulSet?: outputs.pingcap.v1alpha1.TidbNGMonitoringStatusNgMonitoringStatefulSet;
            synced?: boolean;
        }

        export interface TidbNGMonitoringStatusNgMonitoringStatefulSet {
            collisionCount?: number;
            conditions?: outputs.pingcap.v1alpha1.TidbNGMonitoringStatusNgMonitoringStatefulSetConditions[];
            currentReplicas?: number;
            currentRevision?: string;
            observedGeneration?: number;
            readyReplicas?: number;
            replicas: number;
            updateRevision?: string;
            updatedReplicas?: number;
        }

        export interface TidbNGMonitoringStatusNgMonitoringStatefulSetConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status: string;
            type: string;
        }
    }
}

export namespace policy {
    export namespace v1alpha1 {
        /**
         * Authorizes clients to communicate with Linkerd-proxied servers.
         */
        export interface ServerAuthorizationSpec {
            /**
             * Describes clients authorized to access a server.
             */
            client: outputs.policy.v1alpha1.ServerAuthorizationSpecClient;
            /**
             * Identifies servers in the same namespace for which this authorization applies.
             * Only one of `name` or `selector` may be specified.
             */
            server: any;
        }

        /**
         * Describes clients authorized to access a server.
         */
        export interface ServerAuthorizationSpecClient {
            meshTLS?: outputs.policy.v1alpha1.ServerAuthorizationSpecClientMeshTLS;
            /**
             * Limits the client IP addresses to which this authorization applies. If unset, the server chooses a default (typically, all IPs or the cluster's pod network).
             */
            networks?: outputs.policy.v1alpha1.ServerAuthorizationSpecClientNetworks[];
            /**
             * Authorizes unauthenticated clients to access a server.
             */
            unauthenticated?: boolean;
        }

        export interface ServerAuthorizationSpecClientMeshTLS {
            /**
             * Authorizes clients with the provided proxy identity strings (as provided via MTLS)
             * The `*` prefix can be used to match all identities in a domain. An identity string of `*` indicates that all authentication clients are authorized.
             */
            identities?: string[];
            /**
             * Authorizes clients with the provided proxy identity service accounts (as provided via MTLS)
             */
            serviceAccounts?: outputs.policy.v1alpha1.ServerAuthorizationSpecClientMeshTLSServiceAccounts[];
            /**
             * Indicates that no client identity is required for communication.
             * This is mostly important for the identity controller, which must terminate TLS connections from clients that do not yet have a certificate.
             */
            unauthenticatedTLS?: boolean;
        }

        export interface ServerAuthorizationSpecClientMeshTLSServiceAccounts {
            /**
             * The ServiceAccount's name.
             */
            name: string;
            /**
             * The ServiceAccount's namespace. If unset, the authorization's namespace is used.
             */
            namespace?: string;
        }

        export interface ServerAuthorizationSpecClientNetworks {
            cidr: string;
            except?: string[];
        }

        export interface ServerSpec {
            /**
             * Selects pods in the same namespace.
             */
            podSelector: any;
            /**
             * A port name or number. Must exist in a pod spec.
             */
            port: number | string;
            /**
             * Configures protocol discovery for inbound connections.
             * Supersedes the `config.linkerd.io/opaque-ports` annotation.
             */
            proxyProtocol?: string;
        }
        /**
         * serverSpecProvideDefaults sets the appropriate defaults for ServerSpec
         */
        export function serverSpecProvideDefaults(val: ServerSpec): ServerSpec {
            return {
                ...val,
                proxyProtocol: (val.proxyProtocol) ?? "unknown",
            };
        }

    }

    export namespace v1beta1 {
        /**
         * Authorizes clients to communicate with Linkerd-proxied servers.
         */
        export interface ServerAuthorizationSpec {
            /**
             * Describes clients authorized to access a server.
             */
            client: outputs.policy.v1beta1.ServerAuthorizationSpecClient;
            /**
             * Identifies servers in the same namespace for which this authorization applies.
             * Only one of `name` or `selector` may be specified.
             */
            server: any;
        }

        /**
         * Describes clients authorized to access a server.
         */
        export interface ServerAuthorizationSpecClient {
            meshTLS?: outputs.policy.v1beta1.ServerAuthorizationSpecClientMeshTLS;
            /**
             * Limits the client IP addresses to which this authorization applies. If unset, the server chooses a default (typically, all IPs or the cluster's pod network).
             */
            networks?: outputs.policy.v1beta1.ServerAuthorizationSpecClientNetworks[];
            /**
             * Authorizes unauthenticated clients to access a server.
             */
            unauthenticated?: boolean;
        }

        export interface ServerAuthorizationSpecClientMeshTLS {
            /**
             * Authorizes clients with the provided proxy identity strings (as provided via MTLS)
             * The `*` prefix can be used to match all identities in a domain. An identity string of `*` indicates that all authentication clients are authorized.
             */
            identities?: string[];
            /**
             * Authorizes clients with the provided proxy identity service accounts (as provided via MTLS)
             */
            serviceAccounts?: outputs.policy.v1beta1.ServerAuthorizationSpecClientMeshTLSServiceAccounts[];
            /**
             * Indicates that no client identity is required for communication.
             * This is mostly important for the identity controller, which must terminate TLS connections from clients that do not yet have a certificate.
             */
            unauthenticatedTLS?: boolean;
        }

        export interface ServerAuthorizationSpecClientMeshTLSServiceAccounts {
            /**
             * The ServiceAccount's name.
             */
            name: string;
            /**
             * The ServiceAccount's namespace. If unset, the authorization's namespace is used.
             */
            namespace?: string;
        }

        export interface ServerAuthorizationSpecClientNetworks {
            cidr: string;
            except?: string[];
        }

        export interface ServerSpec {
            /**
             * Selects pods in the same namespace.
             * The result of matchLabels and matchExpressions are ANDed. Selects all if empty.
             */
            podSelector: outputs.policy.v1beta1.ServerSpecPodSelector;
            /**
             * A port name or number. Must exist in a pod spec.
             */
            port: number | string;
            /**
             * Configures protocol discovery for inbound connections.
             * Supersedes the `config.linkerd.io/opaque-ports` annotation.
             */
            proxyProtocol?: string;
        }
        /**
         * serverSpecProvideDefaults sets the appropriate defaults for ServerSpec
         */
        export function serverSpecProvideDefaults(val: ServerSpec): ServerSpec {
            return {
                ...val,
                proxyProtocol: (val.proxyProtocol) ?? "unknown",
            };
        }

        /**
         * Selects pods in the same namespace.
         * The result of matchLabels and matchExpressions are ANDed. Selects all if empty.
         */
        export interface ServerSpecPodSelector {
            matchExpressions?: outputs.policy.v1beta1.ServerSpecPodSelectorMatchExpressions[];
            matchLabels?: {[key: string]: any};
        }

        export interface ServerSpecPodSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

    }
}

export namespace split {
    export namespace v1alpha1 {
        export interface TrafficSplitSpec {
            /**
             * The backend services of this split.
             */
            backends: outputs.split.v1alpha1.TrafficSplitSpecBackends[];
            /**
             * The apex service of this split.
             */
            service: string;
        }

        export interface TrafficSplitSpecBackends {
            /**
             * Name of the Kubernetes service.
             */
            service: string;
            /**
             * Traffic weight value of this backend.
             */
            weight: number | string;
        }

    }

    export namespace v1alpha2 {
        export interface TrafficSplitSpec {
            /**
             * The backend services of this split.
             */
            backends: outputs.split.v1alpha2.TrafficSplitSpecBackends[];
            /**
             * The apex service of this split.
             */
            service: string;
        }

        export interface TrafficSplitSpecBackends {
            /**
             * Name of the Kubernetes service.
             */
            service: string;
            /**
             * Traffic weight value of this backend.
             */
            weight: number;
        }

    }
}

export namespace trust {
    export namespace v1alpha1 {
        /**
         * Desired state of the Bundle resource.
         */
        export interface BundleSpec {
            /**
             * Sources is a set of references to data whose data will sync to the target.
             */
            sources: outputs.trust.v1alpha1.BundleSpecSources[];
            /**
             * Target is the target location in all namespaces to sync source data to.
             */
            target: outputs.trust.v1alpha1.BundleSpecTarget;
        }

        /**
         * BundleSource is the set of sources whose data will be appended and synced to the BundleTarget in all Namespaces.
         */
        export interface BundleSpecSources {
            /**
             * ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.
             */
            configMap?: outputs.trust.v1alpha1.BundleSpecSourcesConfigMap;
            /**
             * InLine is a simple string to append as the source data.
             */
            inLine?: string;
            /**
             * Secret is a reference to a Secrets's `data` key, in the trust Namespace.
             */
            secret?: outputs.trust.v1alpha1.BundleSpecSourcesSecret;
        }

        /**
         * ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.
         */
        export interface BundleSpecSourcesConfigMap {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: string;
            /**
             * Name is the name of the source object in the trust Namespace.
             */
            name: string;
        }

        /**
         * Secret is a reference to a Secrets's `data` key, in the trust Namespace.
         */
        export interface BundleSpecSourcesSecret {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: string;
            /**
             * Name is the name of the source object in the trust Namespace.
             */
            name: string;
        }

        /**
         * Target is the target location in all namespaces to sync source data to.
         */
        export interface BundleSpecTarget {
            /**
             * ConfigMap is the target ConfigMap in all Namespaces that all Bundle source data will be synced to.
             */
            configMap?: outputs.trust.v1alpha1.BundleSpecTargetConfigMap;
        }

        /**
         * ConfigMap is the target ConfigMap in all Namespaces that all Bundle source data will be synced to.
         */
        export interface BundleSpecTargetConfigMap {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: string;
        }

        /**
         * Status of the Bundle. This is set and managed automatically.
         */
        export interface BundleStatus {
            /**
             * List of status conditions to indicate the status of the Bundle. Known condition types are `Bundle`.
             */
            conditions?: outputs.trust.v1alpha1.BundleStatusConditions[];
            /**
             * Target is the current Target that the Bundle is attempting or has completed syncing the source data to.
             */
            target?: outputs.trust.v1alpha1.BundleStatusTarget;
        }

        /**
         * BundleCondition contains condition information for a Bundle.
         */
        export interface BundleStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: string;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: string;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Bundle.
             */
            observedGeneration?: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of ('True', 'False', 'Unknown').
             */
            status: string;
            /**
             * Type of the condition, known values are (`Synced`).
             */
            type: string;
        }

        /**
         * Target is the current Target that the Bundle is attempting or has completed syncing the source data to.
         */
        export interface BundleStatusTarget {
            /**
             * ConfigMap is the target ConfigMap in all Namespaces that all Bundle source data will be synced to.
             */
            configMap?: outputs.trust.v1alpha1.BundleStatusTargetConfigMap;
        }

        /**
         * ConfigMap is the target ConfigMap in all Namespaces that all Bundle source data will be synced to.
         */
        export interface BundleStatusTargetConfigMap {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: string;
        }

    }
}
