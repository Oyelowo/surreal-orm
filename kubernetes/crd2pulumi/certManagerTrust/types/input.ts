// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

import { ObjectMeta } from "../meta/v1";

export namespace trust {
  export namespace v1alpha1 {
    /**
     * Desired state of the Bundle resource.
     */
    export interface BundleSpecArgs {
      /**
       * Sources is a set of references to data whose data will sync to the target.
       */
      sources: pulumi.Input<
        pulumi.Input<inputs.trust.v1alpha1.BundleSpecSourcesArgs>[]
      >;
      /**
       * Target is the target location in all namespaces to sync source data to.
       */
      target: pulumi.Input<inputs.trust.v1alpha1.BundleSpecTargetArgs>;
    }

    /**
     * BundleSource is the set of sources whose data will be appended and synced to the BundleTarget in all Namespaces.
     */
    export interface BundleSpecSourcesArgs {
      /**
       * ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.
       */
      configMap?: pulumi.Input<inputs.trust.v1alpha1.BundleSpecSourcesConfigMapArgs>;
      /**
       * InLine is a simple string to append as the source data.
       */
      inLine?: pulumi.Input<string>;
      /**
       * Secret is a reference to a Secrets's `data` key, in the trust Namespace.
       */
      secret?: pulumi.Input<inputs.trust.v1alpha1.BundleSpecSourcesSecretArgs>;
    }

    /**
     * ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.
     */
    export interface BundleSpecSourcesConfigMapArgs {
      /**
       * Key is the key of the entry in the object's `data` field to be used.
       */
      key: pulumi.Input<string>;
      /**
       * Name is the name of the source object in the trust Namespace.
       */
      name: pulumi.Input<string>;
    }

    /**
     * Secret is a reference to a Secrets's `data` key, in the trust Namespace.
     */
    export interface BundleSpecSourcesSecretArgs {
      /**
       * Key is the key of the entry in the object's `data` field to be used.
       */
      key: pulumi.Input<string>;
      /**
       * Name is the name of the source object in the trust Namespace.
       */
      name: pulumi.Input<string>;
    }

    /**
     * Target is the target location in all namespaces to sync source data to.
     */
    export interface BundleSpecTargetArgs {
      /**
       * ConfigMap is the target ConfigMap in all Namespaces that all Bundle source data will be synced to.
       */
      configMap?: pulumi.Input<inputs.trust.v1alpha1.BundleSpecTargetConfigMapArgs>;
    }

    /**
     * ConfigMap is the target ConfigMap in all Namespaces that all Bundle source data will be synced to.
     */
    export interface BundleSpecTargetConfigMapArgs {
      /**
       * Key is the key of the entry in the object's `data` field to be used.
       */
      key: pulumi.Input<string>;
    }

    /**
     * Status of the Bundle. This is set and managed automatically.
     */
    export interface BundleStatusArgs {
      /**
       * List of status conditions to indicate the status of the Bundle. Known condition types are `Bundle`.
       */
      conditions?: pulumi.Input<
        pulumi.Input<inputs.trust.v1alpha1.BundleStatusConditionsArgs>[]
      >;
      /**
       * Target is the current Target that the Bundle is attempting or has completed syncing the source data to.
       */
      target?: pulumi.Input<inputs.trust.v1alpha1.BundleStatusTargetArgs>;
    }

    /**
     * BundleCondition contains condition information for a Bundle.
     */
    export interface BundleStatusConditionsArgs {
      /**
       * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
       */
      lastTransitionTime?: pulumi.Input<string>;
      /**
       * Message is a human readable description of the details of the last transition, complementing reason.
       */
      message?: pulumi.Input<string>;
      /**
       * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Bundle.
       */
      observedGeneration?: pulumi.Input<number>;
      /**
       * Reason is a brief machine readable explanation for the condition's last transition.
       */
      reason?: pulumi.Input<string>;
      /**
       * Status of the condition, one of ('True', 'False', 'Unknown').
       */
      status: pulumi.Input<string>;
      /**
       * Type of the condition, known values are (`Synced`).
       */
      type: pulumi.Input<string>;
    }

    /**
     * Target is the current Target that the Bundle is attempting or has completed syncing the source data to.
     */
    export interface BundleStatusTargetArgs {
      /**
       * ConfigMap is the target ConfigMap in all Namespaces that all Bundle source data will be synced to.
       */
      configMap?: pulumi.Input<inputs.trust.v1alpha1.BundleStatusTargetConfigMapArgs>;
    }

    /**
     * ConfigMap is the target ConfigMap in all Namespaces that all Bundle source data will be synced to.
     */
    export interface BundleStatusTargetConfigMapArgs {
      /**
       * Key is the key of the entry in the object's `data` field to be used.
       */
      key: pulumi.Input<string>;
    }
  }
}
