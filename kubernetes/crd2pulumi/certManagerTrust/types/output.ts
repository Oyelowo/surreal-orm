// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

import {ObjectMeta} from "../meta/v1";

export namespace trust {
    export namespace v1alpha1 {
        /**
         * Desired state of the Bundle resource.
         */
        export interface BundleSpec {
            /**
             * Sources is a set of references to data whose data will sync to the target.
             */
            sources: outputs.trust.v1alpha1.BundleSpecSources[];
            /**
             * Target is the target location in all namespaces to sync source data to.
             */
            target: outputs.trust.v1alpha1.BundleSpecTarget;
        }

        /**
         * BundleSource is the set of sources whose data will be appended and synced to the BundleTarget in all Namespaces.
         */
        export interface BundleSpecSources {
            /**
             * ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.
             */
            configMap?: outputs.trust.v1alpha1.BundleSpecSourcesConfigMap;
            /**
             * InLine is a simple string to append as the source data.
             */
            inLine?: string;
            /**
             * Secret is a reference to a Secrets's `data` key, in the trust Namespace.
             */
            secret?: outputs.trust.v1alpha1.BundleSpecSourcesSecret;
        }

        /**
         * ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.
         */
        export interface BundleSpecSourcesConfigMap {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: string;
            /**
             * Name is the name of the source object in the trust Namespace.
             */
            name: string;
        }

        /**
         * Secret is a reference to a Secrets's `data` key, in the trust Namespace.
         */
        export interface BundleSpecSourcesSecret {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: string;
            /**
             * Name is the name of the source object in the trust Namespace.
             */
            name: string;
        }

        /**
         * Target is the target location in all namespaces to sync source data to.
         */
        export interface BundleSpecTarget {
            /**
             * ConfigMap is the target ConfigMap in all Namespaces that all Bundle source data will be synced to.
             */
            configMap?: outputs.trust.v1alpha1.BundleSpecTargetConfigMap;
        }

        /**
         * ConfigMap is the target ConfigMap in all Namespaces that all Bundle source data will be synced to.
         */
        export interface BundleSpecTargetConfigMap {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: string;
        }

        /**
         * Status of the Bundle. This is set and managed automatically.
         */
        export interface BundleStatus {
            /**
             * List of status conditions to indicate the status of the Bundle. Known condition types are `Bundle`.
             */
            conditions?: outputs.trust.v1alpha1.BundleStatusConditions[];
            /**
             * Target is the current Target that the Bundle is attempting or has completed syncing the source data to.
             */
            target?: outputs.trust.v1alpha1.BundleStatusTarget;
        }

        /**
         * BundleCondition contains condition information for a Bundle.
         */
        export interface BundleStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: string;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: string;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Bundle.
             */
            observedGeneration?: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of ('True', 'False', 'Unknown').
             */
            status: string;
            /**
             * Type of the condition, known values are (`Synced`).
             */
            type: string;
        }

        /**
         * Target is the current Target that the Bundle is attempting or has completed syncing the source data to.
         */
        export interface BundleStatusTarget {
            /**
             * ConfigMap is the target ConfigMap in all Namespaces that all Bundle source data will be synced to.
             */
            configMap?: outputs.trust.v1alpha1.BundleStatusTargetConfigMap;
        }

        /**
         * ConfigMap is the target ConfigMap in all Namespaces that all Bundle source data will be synced to.
         */
        export interface BundleStatusTargetConfigMap {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: string;
        }

    }
}
