name: Frontend_Main

on:
  push:
    branches: [master]
    paths: 
      - 'typescript/**'
  pull_request:
    branches: [master]
    paths: 
      - 'typescript/**'
    


env:
  CARGO_TERM_COLOR: always
  IMAGE: web
  IMAGE_TAG: ${GITHUB_REF#refs/heads/}-$GITHUB_SHA
  IMAGE_WITH_TAG: ghcr.io/oyelowo/$IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA
  IMAGE_WITH_TAG_SLIM: ghcr.io/oyelowo/$IMAGE.slim:${GITHUB_REF#refs/heads/}-$GITHUB_SHA

jobs:
  build:
    name: build and test
    timeout-minutes: 10
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: typescript

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          cache: 'npm'
          cache-dependency-path: package-lock.json
          node-version: '16'

      - name: Install dependencies
        run: npm ci

      - name: Build & Unit Test
        run: npm run test

      - name: Lint
        run: npm run lint

      # - name: E2E Tests
      #   run: npm run cypress:run


  build_web:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: typescript
        
    steps:
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check out code
        uses: actions/checkout@v2

      - name: build docker image
        run: docker build -f Dockerfile.prod --target web  -t ${{ env.IMAGE_WITH_TAG }}  .

      - name: Slim down docker image
        run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock dslim/docker-slim build  ${{ env.IMAGE_WITH_TAG }} --tag ${{ env.IMAGE_WITH_TAG_SLIM }}

      - name: Push docker image
        # docker slim above slims down the image and append ".slim" to the original image tag
        run: docker push  ${{ env.IMAGE_WITH_TAG_SLIM }}
        
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

