name: Rust applications checks

on:
  push:
    branches: [master]
    paths: 
      - 'rust/**'

  pull_request:
    paths: 
      - 'rust/**'

env:
  CARGO_TERM_COLOR: always
  CONTAINER_REPOSIT0RY: ghcr.io/oyelowo

  BACKEND_MAIN_IMAGE_NAME: backend-main
  BACKEND_MAIN_IMAGE_TAG: $GITHUB_REF_NAME-$GITHUB_SHA
  BACKEND_MAIN_IMAGE_WITH_TAG: $CONTAINER_REPOSIT0RY/$BACKEND_MAIN_IMAGE_NAME:$GITHUB_REF_NAME-$GITHUB_SHA

  BACKEND_SECOND_IMAGE_NAME: backend-second
  BACKEND_SECOND_IMAGE_TAG: $GITHUB_REF_NAME-$GITHUB_SHA
  BACKEND_SECOND_IMAGE_WITH_TAG: $CONTAINER_REPOSIT0RY/$BACKEND_SECOND_IMAGE_NAME:$GITHUB_REF_NAME-$GITHUB_SHA

jobs:
  check_and_test_rust_monorepo:
    name: Run code checks for rust workspace
    timeout-minutes: 10
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: rust

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run cargo test
        run: cargo test
        
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: rust
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - run: cargo fmt --all -- --check
        
        
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: rust
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - run: cargo clippy -- -D warnings


  build_and_push_rust_applications:
    needs: [check_and_test_rust_monorepo, fmt, clippy]
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged || github.ref == 'refs/heads/master'
    defaults:
      run:
        working-directory: rust
        
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check out code
        uses: actions/checkout@v2

      # 1. APPLICATION 1: Build and push image for backend-main
      - name: build backend-main docker image
        run:  docker build -f Dockerfile.prod --target backend-main  -t ${{ env.BACKEND_MAIN_IMAGE_WITH_TAG }} .

      # This step can be removed if I decide I dont want to slimdown the image further anymore or if docker-slim starts to become problematic
      - name: Slim down backend-main docker image
        run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock dslim/docker-slim build  ${{ env.BACKEND_MAIN_IMAGE_WITH_TAG }} --tag ${{ env.BACKEND_MAIN_IMAGE_WITH_TAG }}

      - name: Push backend-main docker image
        run: docker push  ${{ env.BACKEND_MAIN_IMAGE_WITH_TAG }}


      # 2. APPLICATION 2: Build and push image for backend-second
      - name: build backend-second docker image
        run:  docker build -f Dockerfile.prod --target backend-second  -t ${{ env.BACKEND_SECOND_IMAGE_WITH_TAG }} .

      # This step can be removed if I decide I dont want to slimdown the image further anymore or if docker-slim starts to become problematic
      - name: Slim down backend-second docker image
        run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock dslim/docker-slim build  ${{ env.BACKEND_SECOND_IMAGE_WITH_TAG }} --tag ${{ env.BACKEND_SECOND_IMAGE_WITH_TAG }}

      - name: Push backend-second docker image
        run: docker push  ${{ env.BACKEND_SECOND_IMAGE_WITH_TAG }}
        
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

