name: Rust monorepo CICD

on:
  push:
    branches: [master]
    paths: 
      - 'rust/**'

  pull_request:
    paths: 
      - 'rust/**'

env:
  CARGO_TERM_COLOR: always

jobs:
  check_and_test_rust_monorepo:
    name: Run code checks for rust workspace
    timeout-minutes: 10
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: rust

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run cargo test
        run: make test
        
  format:
    name: Rustfmt
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: rust
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - run: make fmt
        
        
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: rust
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - run: make clippy


  ############## BUILD AND DEPLOY IMAGES #################
  build_and_push_rust_applications:
    if: github.event.pull_request.merged ||  ${{ github.ref == 'refs/heads/master' }}
    needs: [check_and_test_rust_monorepo, format, clippy]
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: rust
        
    steps:
      - uses: actions/checkout@v2
      # Using other environment variables as input into another 
      # does not work for normal "env: <value>" setup as the input environment
      # variable to another would be treated literally by github parser rather than evaluating it.
      # This is why environment variables are set through shell here and used for most things
      # for consistency sake.
      - name: Set environment variables
        run: |
          echo "BACKEND_MAIN_IMAGE_WITH_TAG=ghcr.io/oyelowo/template-app-graphql-mongo:$GITHUB_REF_NAME-$GITHUB_SHA" >> $GITHUB_ENV
          
          echo "BACKEND_SECOND_IMAGE_WITH_TAG=ghcr.io/oyelowo/template-app-grpc-mongo:$GITHUB_REF_NAME-$GITHUB_SHA" >> $GITHUB_ENV

          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      

      - name: Build and cache graphql-mongo image
        uses: docker/build-push-action@v2
        with:
          context: rust
          file: rust/Dockerfile.production
          target: graphql-mongo
          tags: ${{ env.BACKEND_MAIN_IMAGE_WITH_TAG }}
          push: true
          cache-from: |
            type=gha,scope=graphql-mongo
          cache-to: |
            type=gha,scope=graphql-mongo,mode=max

      - name: Build and cache graphql-postgres image
        uses: docker/build-push-action@v2
        with:
          context: rust
          file: rust/Dockerfile.production
          target: graphql-postgres
          tags: ${{ env.BACKEND_MAIN_IMAGE_WITH_TAG }}
          push: true
          cache-from: |
            type=gha,scope=graphql-postgres
          cache-to: |
            type=gha,scope=graphql-postgres,mode=max

      - name: Build and cache grpc-mongo image
        uses: docker/build-push-action@v2
        with:
          context: rust
          file: rust/Dockerfile.production
          target: grpc-mongo
          tags: ${{ env.BACKEND_SECOND_IMAGE_WITH_TAG }}
          push: true
          cache-from: |
            type=gha,scope=grpc-mongo
          cache-to: |
            type=gha,scope=grpc-mongo,mode=max


      # - name: Check out code
      #   uses: actions/checkout@v2

      # # 1. APPLICATION 1: Build and push image for graphql-mongo
      # - name: build graphql-mongo docker image
      #   run:  docker build -f Dockerfile.production --target graphql-mongo  -t ${{ env.BACKEND_MAIN_IMAGE_WITH_TAG }} .

      # # This step can be removed if I decide I dont want to slimdown the image further anymore or if docker-slim starts to become problematic
      # - name: Slim down graphql-mongo docker image
      #   run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock dslim/docker-slim build  ${{ env.BACKEND_MAIN_IMAGE_WITH_TAG }} --tag ${{ env.BACKEND_MAIN_IMAGE_WITH_TAG }}

      # - name: Push graphql-mongo docker image
      #   run: docker push  ${{ env.BACKEND_MAIN_IMAGE_WITH_TAG }}

      # # 2. APPLICATION 2: Build and push image for grpc-mongo
      # - name: build grpc-mongo docker image
      #   run:  docker build -f Dockerfile.production --target grpc-mongo  -t ${{ env.BACKEND_SECOND_IMAGE_WITH_TAG }} .

      # - name: Push grpc-mongo docker image
      #   run: docker push  ${{ env.BACKEND_SECOND_IMAGE_WITH_TAG }}
        
      # - name: Image digest
      #   run: echo ${{ steps.docker_build.outputs.digest }}

