name: Typescript monorepo applications CICD

on:
  push:
    branches: [master]
    paths: 
      - 'typescript/**'

  pull_request:
    paths: 
      - 'typescript/**'

env:
  CARGO_TERM_COLOR: always

jobs:
  check_and_test_typescript_monorepo:
    if: "false" # FIXME: remove
    name: Run code checks for typescript monorepo
    timeout-minutes: 10
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: typescript

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build & Unit Test
        run: npm run test

      - name: Lint
        run: npm run lint

      # - name: E2E Tests
      #   run: npm run cypress:run


  ############## BUILD AND DEPLOY IMAGES #################
  build_and_push_typescript_applications:
    if: github.event.pull_request.merged || ${{ github.ref == 'refs/heads/master' }}
    # needs: [check_and_test_typescript_monorepo]
    runs-on: ubuntu-latest
    env:
      CONTAINER_REPOSIT0RY: ghcr.io/oyelowo
      WEB_IMAGE_NAME: web
      WEB_IMAGE_TAG: $GITHUB_REF_NAME-$GITHUB_SHA
      WEB_IMAGE_WITH_TAG: $CONTAINER_REPOSIT0RY/$WEB_IMAGE_NAME:$GITHUB_REF_NAME-$GITHUB_SHA

    defaults:
      run:
        working-directory: typescript
        
    steps:
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Build base image
        id: docker_build_base
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile.prod
          push: false
          load: false
          cache-from: |
            type=gha,scope=base
          cache-to: |
            type=gha,scope=base,mode=max
          target: web

      # - name: Check out code
      #   uses: actions/checkout@v2

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@master
      #   with:
      #     platforms: all

      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v1
      #   with:
      #     install: true

      # - name: Cache Docker layers
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-multi-buildx

      # - name: Prepare
      #   id: prep
      #   run: |
      #     TAG=$(echo $GITHUB_SHA | head -c7)
      #     IMAGE=${{ env.GITHUB_REPOSITORY }}
      #     echo ${{ env.GITHUB_REPOSITORY }}
      #     echo ::set-output name=tagged_image::${{ env.WEB_IMAGE_WITH_TAG}}
      #     echo ::set-output name=tag::${TAG}

      # - name: Check directory
      #   run: |
      #     ls -lart
      #     pwd
      #     echo pwd

      # - name: Build image and push
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: . # We already chose the typescript folder as the workspace directory
      #     file: Dockerfile.prod
      #     # builder: ${{ steps.buildx.outputs.name }}
      #     push: true
      #     # platforms: linux/amd64,linux/arm/v7,linux/arm64
      #     tags: ${{ steps.prep.outputs.tagged_image }}
      #     target: web # Sets the target stage to build
      #     #labels: ${{ steps.meta.outputs.labels }}
      #     # cache-from: type=gha, scope=${{ github.workflow }}
      #     # cache-to: type=gha, scope=${{ github.workflow }}, mode=max
      #     cache-from: type=gha
      #     cache-to: type=gha #,mode=max


      # - name: build web docker image
      #   run: docker build -f Dockerfile.prod --target web  -t ${{ env.WEB_IMAGE_WITH_TAG }}  .

      # - name: Slim down web docker image
      #   run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock dslim/docker-slim build  ${{ env.WEB_IMAGE_WITH_TAG }} --tag ${{ env.WEB_IMAGE_WITH_TAG }}

      # - name: Push web docker image
      #   run: docker push  ${{ env.WEB_IMAGE_WITH_TAG }}
        
      # - name: Image digest
      #   run: echo ${{ steps.docker_build.outputs.digest }}

