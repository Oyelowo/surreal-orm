name: Typescript monorepo applications CICD

on:
  push:
    branches: [master]
    paths: 
      - 'typescript/**'

  pull_request:
    paths: 
      - 'typescript/**'

env:
  CARGO_TERM_COLOR: always

jobs:
  check_and_test_typescript_monorepo:
    name: Run code checks for typescript monorepo
    timeout-minutes: 10
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: typescript

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build & Unit Test
        run: npm run test

      - name: Lint
        run: npm run lint

      # - name: E2E Tests
      #   run: npm run cypress:run


  ############## BUILD AND DEPLOY IMAGES #################
  build_and_push_typescript_applications:
    if: github.event.pull_request.merged || ${{ github.ref == 'refs/heads/master' }}
    needs: [check_and_test_typescript_monorepo]
    runs-on: ubuntu-latest
    env:
      CONTAINER_REPOSIT0RY: ghcr.io/oyelowo
      WEB_IMAGE_NAME: web
      WEB_IMAGE_TAG: $GITHUB_REF_NAME-$GITHUB_SHA
      WEB_IMAGE_WITH_TAG: $CONTAINER_REPOSIT0RY/$WEB_IMAGE_NAME:$GITHUB_REF_NAME-$GITHUB_SHA

    defaults:
      run:
        working-directory: typescript
        
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check out code
        uses: actions/checkout@v2

      - name: build web docker image
        run: docker build -f Dockerfile.prod --target web  -t ${{ env.WEB_IMAGE_WITH_TAG }}  .

      - name: Slim down web docker image
        run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock dslim/docker-slim build  ${{ env.WEB_IMAGE_WITH_TAG }} --tag ${{ env.WEB_IMAGE_WITH_TAG }}

      - name: Push web docker image
        run: docker push  ${{ env.WEB_IMAGE_WITH_TAG }}
        
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

