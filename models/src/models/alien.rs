/*
 * Author: Oyelowo Oyedayo
 * Email: oyelowo.oss@gmail.com
 * Copyright (c) 2023 Oyelowo Oyedayo
 * Licensed under the MIT license
 */

use std::time::Duration;

use crate::{AlienVisitsPlanet, Planet, Rocket, SpaceShip, Weapon};
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use surreal_orm::{LinkMany, LinkOne, LinkSelf, Node, Relate, SurrealSimpleId};
use surrealdb::sql;

// Alien
#[derive(Node, Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
#[surreal_orm(table = "alien")]
pub struct Alien {
    pub id: SurrealSimpleId<Self>,
    pub name: String,
    pub age: u8,
    pub created: DateTime<Utc>,
    pub life_expectancy: Duration,
    pub line_string: geo::LineString,
    pub territory_area: geo::Polygon,
    pub home: geo::Point,
    pub tags: Vec<String>,
    // database type attribute is autogenerated for all links of the struct. But you can also provide it
    #[surreal_orm(link_self = "Alien")]
    pub ally: LinkSelf<Alien>,

    #[surreal_orm(link_one = "Weapon")]
    pub weapon: LinkOne<Weapon>,

    // Again, we dont have to provide the type attribute, it can auto detect
    #[surreal_orm(link_many = "SpaceShip")]
    pub space_ships: LinkMany<SpaceShip>,

    // This is a read only field
    #[surreal_orm(relate(model = "AlienVisitsPlanet", connection = "->visits->planet"))]
    #[serde(skip_serializing, default)]
    pub planets_to_visit: Relate<Planet<u64>>,
}

// Explicityly specifying all field types. Most of it can be inferred.
// So, you usually wouldn't have to annotate the type manually. (See Alien).
// Adding this for testing purpose.
#[derive(Node, Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
#[surreal_orm(table = alien_with_explicit_attributes)]
pub struct AlienWithExplicitAttributes {
    #[surreal_orm(ty = "record<alien_with_explicit_attributes>")]
    id: sql::Thing,

    #[surreal_orm(ty = "string")]
    name: String,

    #[surreal_orm(ty = "int")]
    age: u8,

    #[surreal_orm(ty = "datetime")]
    created: DateTime<Utc>,

    #[surreal_orm(ty = "duration")]
    life_expectancy: Duration,

    #[surreal_orm(ty = "geometry<polygon>")]
    territory_area: geo::Polygon,

    #[surreal_orm(ty = "geometry<point>")]
    home: geo::Point,

    #[surreal_orm(ty = "array<string>")]
    tags: Vec<String>,

    // database type attribute is autogenerated for all links of the struct. But you can also provide it
    #[surreal_orm(
        link_self = AlienWithExplicitAttributes,
        ty = "record<alien_with_explicit_attributes>"
    )]
    ally: LinkSelf<AlienWithExplicitAttributes>,

    #[surreal_orm(link_one = Weapon, ty = "record<weapon>")]
    weapon: LinkOne<Weapon>,

    // Again, we dont have to provide the type attribute, it can auto detect
    // #[surreal_orm(link_many = "SpaceShip", ty = "set<record<space_ship>>")]
    #[surreal_orm(link_many = SpaceShip, ty = "array<record<space_ship>>")]
    space_ships: LinkMany<SpaceShip>,
}

#[derive(Node, Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
#[surreal_orm(table = "alien_2")]
pub struct Alien2 {
    pub id: SurrealSimpleId<Self>,
    pub name: String,
    pub age: u8,
    pub created: DateTime<Utc>,
    pub life_expectancy: Duration,
    pub line_polygon: geo::LineString,
    pub territory_area: geo::Polygon,
    pub home: geo::Point,
    pub tags: Vec<String>,

    #[surreal_orm(nest_object = Rocket)]
    pub weapon: Rocket,

    // Again, we dont have to provide the type attribute, it can auto detect
    #[surreal_orm(link_many = SpaceShip, ty = "array<record<space_ship>>")]
    pub space_ships: LinkMany<SpaceShip>,
}
