ARG BASE_IMAGE=rust:1.58

FROM $BASE_IMAGE as chef
RUN cargo install cargo-chef --version 0.1.33
WORKDIR /app


FROM chef as planner
COPY . .
RUN cargo chef prepare  --recipe-path recipe.json


FROM chef as  builder-graphql-mongo 
COPY --from=planner /app/recipe.json recipe.json
# Build dependencies - this is the caching Docker layer! Don't build in release mode for development
RUN cargo chef cook --recipe-path recipe.json 

COPY . .
# Copy over the cached dependencies


######### START GRAPHQL-MONGO BACKEND SERVICE  #################
################################################################
RUN cargo build -p graphql-mongo --bin graphql-mongo

# Although, we do not need the Rust toolchain to run the binary!
# Not using distroless in dev so that we can get extra toolchain for debugging containers in pods
# To test distroless in dev, uncomment the below and comment out the next baseline, of course!
FROM gcr.io/distroless/cc AS graphql-mongo
# FROM $BASE_IMAGE AS graphql-mongo
WORKDIR /app
EXPOSE 8000
COPY . .
# We are building in debug mode
COPY --from=builder-graphql-mongo /app/target/debug/graphql-mongo /usr/local/bin/graphql-mongo
ENTRYPOINT ["/usr/local/bin/graphql-mongo"]
# This is in case you want to build with cargo run or cargo watch. But kubernetes skaffold already watches our app
# so, it may be unnecessary.
# CMD ["cargo", "run", "-p", "graphql-mongo", "--bin", "graphql-mongo"]
######### END GRAPHQL-MONGO BACKEND SERVICE  #################
##############################################################
