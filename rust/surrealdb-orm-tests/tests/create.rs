// TODO: Validate in SurrealdbNode and Edge if id, skip_serializing_if = "Option::is_none" must be
// set and if relate, skip_serializing
use std::time::Duration;

use chrono::{DateTime, Utc};
use geo::line_string;
use geo::point;
use geo::polygon;
use geo::Coord;
use geo::Line;
use geo::LineString;
use geo::Point;
use geo::Polygon;
use serde::{Deserialize, Serialize};
use surrealdb::engine::local::Mem;
use surrealdb::sql;
use surrealdb::Surreal;
use surrealdb_orm::statements::insert;
use surrealdb_orm::statements::select;
use surrealdb_orm::{statements::create, *};

// Alien
#[derive(SurrealdbNode, Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
#[surrealdb(table_name = "alien")]
pub struct Alien {
    #[serde(skip_serializing_if = "Option::is_none")]
    id: Option<sql::Thing>,
    name: String,
    age: u8,
    created: DateTime<Utc>,
    life_expectancy: Duration,
    line_polygon: sql::Geometry,
    territory_area: sql::Geometry,
    home: sql::Geometry,
    tags: Vec<String>,
    // database type attribute is autogenerated for all links of the struct. But you can also provide it
    #[serde(skip_serializing)]
    #[surrealdb(link_self = "Alien", type = "record(alien)")]
    ally: LinkSelf<Alien>,

    // #[serde(skip_serializing)]
    #[surrealdb(link_one = "Weapon", type = "record(weapon)")]
    weapon: LinkOne<Weapon>,

    // Again, we dont have to provide the type attribute, it can auto detect
    // #[serde(skip_serializing)]
    #[surrealdb(
        link_many = "SpaceShip",
        type = "array",
        content_type = "record(space_ship)"
    )]
    space_ships: LinkMany<SpaceShip>,

    // This is a read only field
    #[surrealdb(relate(model = "AlienVisitsPlanet", connection = "->visits->planet"))]
    // #[serde(skip_serializing)]
    #[serde(default)]
    planets_to_visit: Relate<Planet>,
}

// Visits
#[derive(SurrealdbEdge, Serialize, Deserialize, Debug, Clone, Default)]
#[serde(rename_all = "camelCase")]
#[surrealdb(table_name = "visits")]
pub struct Visits<In: SurrealdbNode, Out: SurrealdbNode> {
    #[serde(skip_serializing_if = "Option::is_none")]
    id: Option<sql::Thing>,
    #[serde(rename = "in")]
    in_: LinkOne<In>,
    out: LinkOne<Out>,
    time_visited: Duration,
}

// Connects Alien to Planet via Visits
pub type AlienVisitsPlanet = Visits<Alien, Planet>;

// Planet
#[derive(SurrealdbNode, Serialize, Deserialize, Debug, Clone, Default)]
#[serde(rename_all = "camelCase")]
#[surrealdb(table_name = "planet")]
pub struct Planet {
    #[serde(skip_serializing_if = "Option::is_none")]
    id: Option<sql::Thing>,
    name: String,
    // area: Polygon,
    population: u64,
    created: DateTime<Utc>,
    tags: Vec<String>,
}

// Weapon
#[derive(SurrealdbNode, Serialize, Deserialize, Debug, Clone, Default)]
#[serde(rename_all = "camelCase")]
#[surrealdb(table_name = "weapon")]
pub struct Weapon {
    // #[serde(skip_serializing)]
    #[serde(skip_serializing_if = "Option::is_none")]
    id: Option<sql::Thing>,
    name: String,
    strength: u64,
    created: DateTime<Utc>,
}

// SpaceShip
#[derive(SurrealdbNode, Serialize, Deserialize, Debug, Clone, Default)]
#[serde(rename_all = "camelCase")]
#[surrealdb(table_name = "space_ship")]
pub struct SpaceShip {
    #[serde(skip_serializing_if = "Option::is_none")]
    id: Option<sql::Thing>,
    name: String,
    created: DateTime<Utc>,
}

// Configuration
#[derive(SurrealdbObject, Serialize, Deserialize, Debug, Clone, Default)]
#[serde(rename_all = "camelCase")]
pub struct Configuration {
    length: u64,
    shape: Shape,
}

#[derive(Serialize, Deserialize, Debug, Clone, Copy, Default)]
pub enum Shape {
    #[default]
    Circle,
    Square,
    Triangle,
}

#[tokio::test]
async fn test_create_alien_with_links() -> SurrealdbOrmResult<()> {
    let db = Surreal::new::<Mem>(()).await.unwrap();
    db.use_ns("test").use_db("test").await.unwrap();

    let weapon = Weapon {
        // id: Some(Weapon::create_uuid()),
        id: None,
        name: "Laser".to_string(),
        created: Utc::now(),
        ..Default::default()
    };

    let space_ship = SpaceShip {
        id: None,
        name: "SpaceShip1".to_string(),
        created: Utc::now(),
    };

    let space_ship2 = SpaceShip {
        name: "SpaceShip2".to_string(),
        created: Utc::now(),
        ..Default::default()
    };

    let space_ship3 = SpaceShip {
        name: "Oyelowo".to_string(),
        created: Utc::now(),
        ..Default::default()
    };

    assert_eq!(weapon.clone().id.is_some(), false);
    let created_weapon = create(weapon.clone()).return_one(db.clone()).await?;
    assert_eq!(created_weapon.unwrap().id.is_some(), true);

    let select1: Vec<Weapon> = select(All)
        .from(Weapon::table_name())
        .return_many(db.clone())
        .await?;
    assert_eq!(select1.len(), 1);

    let created_weapon = create(weapon.clone()).return_one(db.clone()).await?;

    let select2: Vec<Weapon> = select(All)
        .from(Weapon::table_name())
        .return_many(db.clone())
        .await?;
    assert_eq!(select2.len(), 2);

    insert(vec![weapon.clone(), weapon.clone()])
        .return_many(db.clone())
        .await?;

    let select2: Vec<Weapon> = select(All)
        .from(Weapon::table_name())
        .return_many(db.clone())
        .await?;

    let select2: Vec<Weapon> = select(All)
        .from(Weapon::table_name())
        .return_many(db.clone())
        .await?;
    assert_eq!(select2.len(), 4);

    let inserted_space_ships = insert(vec![space_ship, space_ship2, space_ship3])
        .return_many(db.clone())
        .await?;

    let select2: Vec<SpaceShip> = select(All)
        .from(SpaceShip::table_name())
        .where_(SpaceShip::schema().name.like("SpaceShip"))
        .return_many(db.clone())
        .await?;
    assert_eq!(select2.len(), 2);

    let select2: Vec<SpaceShip> = select(All)
        .from(SpaceShip::table_name())
        .where_(SpaceShip::schema().name.like("Oyelowo"))
        .return_many(db.clone())
        .await?;
    assert_eq!(select2.len(), 1);

    let point = point! {
        x: 40.02f64,
        y: 116.34,
    };

    let territory = line_string![(x: 40.02, y: 116.34), (x: 40.02, y: 116.35), (x: 40.03, y: 116.35), (x: 40.03, y: 116.34), (x: 40.02, y: 116.34)];
    let polygon = polygon![(x: 40.02, y: 116.34), (x: 40.02, y: 116.35), (x: 40.03, y: 116.35), (x: 40.03, y: 116.34), (x: 40.02, y: 116.34)];
    let unsaved_alien = Alien {
        id: None,
        name: "Oyelowo".to_string(),
        age: 20,
        created: Utc::now(),
        line_polygon: territory.into(),
        life_expectancy: Duration::from_secs(100),
        territory_area: polygon.into(),
        home: point.into(),
        tags: vec!["tag1".to_string(), "tag2".to_string()],
        ally: LinkSelf::null(),
        weapon: LinkOne::from(created_weapon.unwrap()),
        space_ships: LinkMany::from(inserted_space_ships),
        planets_to_visit: Relate::null(),
    };

    assert_eq!(unsaved_alien.weapon.get_id().is_some(), true);
    assert_eq!(unsaved_alien.weapon.value().is_some(), false);

    assert_eq!(unsaved_alien.id.is_some(), false);

    assert_eq!(
        Alien::get_serializable_field_names()
            .into_iter()
            .map(|f| f.to_string())
            .collect::<Vec<String>>(),
        vec![
            "id".to_string(),
            "name".to_string(),
            "age".to_string(),
            "created".to_string(),
            "linePolygon".to_string(),
            "lifeExpectancy".to_string(),
            "territoryArea".to_string(),
            "home".to_string(),
            "tags".to_string(),
            "ally".to_string(),
            "weapon".to_string(),
            "spaceShips".to_string(),
            "planetsToVisit".to_string(),
            // "xplanetsToVisit".to_string(),
        ]
    );
    assert_eq!(Alien::get_serializable_field_names().len(), 13);
    let created_alien = create(unsaved_alien.clone())
        .return_one_projections(
            db.clone(),
            Some(Alien::get_serializable_field_names()),
            //
            // Some(vec![
            //     "id".into(),
            //     "name".into(),
            //     "age".into(),
            //     "created".into(),
            //     "linePolygon".into(),
            //     "lifeExpectancy".into(),
            //     "territoryArea".into(),
            //     "home".into(),
            //     "tags".into(),
            //     "ally".into(),
            //     "weapon.*".into(),
            //     "spaceShips".into(),
            //     "planetsToVisit".into(),
            //     "xplanetsToVisit".into(),
            // ]),
        )
        .await?;

    assert_eq!(
        created_alien.clone().unwrap().weapon.get_id().is_some(),
        false
    );
    assert_eq!(
        created_alien.clone().unwrap().weapon.value().is_some(),
        true
    );

    assert_eq!(unsaved_alien.id.is_some(), false);

    assert_eq!(created_alien.clone().unwrap().age, 20);
    assert_eq!(created_alien.clone().unwrap().id.is_some(), true);

    assert_eq!(
        created_alien.clone().unwrap().line_polygon.to_string(),
        "{ type: 'LineString', coordinates: [[40.02, 116.34], [40.02, 116.35], \
            [40.03, 116.35], [40.03, 116.34], [40.02, 116.34]] }"
    );
    assert_eq!(created_alien.unwrap().name, "Oyelowo");

    Ok(())
}
