// TODO: Validate in SurrealdbNode and Edge if id, skip_serializing_if = "Option::is_none" must be
// set and if relate, skip_serializing
use std::time::Duration;

use chrono::{DateTime, Utc};
use geo::line_string;
use geo::point;
use geo::polygon;
use geo::Coord;
use geo::Line;
use geo::LineString;
use geo::Point;
use geo::Polygon;
use serde::{Deserialize, Serialize};
use surrealdb::engine::local::Mem;
use surrealdb::sql;
use surrealdb::Surreal;
use surrealdb_orm::statements::insert;
use surrealdb_orm::statements::select;
use surrealdb_orm::{statements::create, *};

// Alien
#[derive(SurrealdbNode, Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
#[surrealdb(table_name = "alien")]
pub struct Alien {
    #[serde(skip_serializing_if = "Option::is_none")]
    id: Option<sql::Thing>,
    name: String,
    age: u8,
    created: DateTime<Utc>,
    life_expectancy: Duration,
    line_polygon: sql::Geometry,
    territory_area: sql::Geometry,
    home: sql::Geometry,
    tags: Vec<String>,
    // database type attribute is autogenerated for all links of the struct. But you can also provide it
    #[surrealdb(link_self = "Alien", type = "record(alien)")]
    ally: LinkSelf<Alien>,

    // #[serde(skip_serializing)]
    #[surrealdb(link_one = "Weapon", type = "record(weapon)")]
    weapon: LinkOne<Weapon>,

    // Again, we dont have to provide the type attribute, it can auto detect
    // #[serde(skip_serializing)]
    #[surrealdb(
        link_many = "SpaceShip",
        type = "array",
        content_type = "record(space_ship)"
    )]
    space_ships: LinkMany<SpaceShip>,

    // This is a read only field
    #[surrealdb(relate(model = "AlienVisitsPlanet", connection = "->visits->planet"))]
    // #[serde(skip_serializing)]
    #[serde(default)]
    planets_to_visit: Relate<Planet>,
}

// Visits
#[derive(SurrealdbEdge, Serialize, Deserialize, Debug, Clone, Default)]
#[serde(rename_all = "camelCase")]
#[surrealdb(table_name = "visits")]
pub struct Visits<In: SurrealdbNode, Out: SurrealdbNode> {
    #[serde(skip_serializing_if = "Option::is_none")]
    id: Option<sql::Thing>,
    #[serde(rename = "in")]
    in_: LinkOne<In>,
    out: LinkOne<Out>,
    time_visited: Duration,
}

// Connects Alien to Planet via Visits
pub type AlienVisitsPlanet = Visits<Alien, Planet>;

// Planet
#[derive(SurrealdbNode, Serialize, Deserialize, Debug, Clone, Default)]
#[serde(rename_all = "camelCase")]
#[surrealdb(table_name = "planet")]
pub struct Planet {
    #[serde(skip_serializing_if = "Option::is_none")]
    id: Option<sql::Thing>,
    name: String,
    // area: Polygon,
    population: u64,
    created: DateTime<Utc>,
    tags: Vec<String>,
}

// Weapon
#[derive(SurrealdbNode, Serialize, Deserialize, Debug, Clone, Default)]
#[serde(rename_all = "camelCase")]
#[surrealdb(table_name = "weapon")]
pub struct Weapon {
    // #[serde(skip_serializing)]
    #[serde(skip_serializing_if = "Option::is_none")]
    id: Option<sql::Thing>,
    name: String,
    strength: u64,
    created: DateTime<Utc>,
}

// SpaceShip
#[derive(SurrealdbNode, Serialize, Deserialize, Debug, Clone, Default)]
#[serde(rename_all = "camelCase")]
#[surrealdb(table_name = "space_ship")]
pub struct SpaceShip {
    #[serde(skip_serializing_if = "Option::is_none")]
    id: Option<sql::Thing>,
    name: String,
    created: DateTime<Utc>,
}

// Configuration
#[derive(SurrealdbObject, Serialize, Deserialize, Debug, Clone, Default)]
#[serde(rename_all = "camelCase")]
pub struct Configuration {
    length: u64,
    shape: Shape,
}

#[derive(Serialize, Deserialize, Debug, Clone, Copy, Default)]
pub enum Shape {
    #[default]
    Circle,
    Square,
    Triangle,
}

#[tokio::test]
async fn test_create_alien_with_id_not_specified_but_generated_by_the_database(
) -> SurrealdbOrmResult<()> {
    let db = Surreal::new::<Mem>(()).await.unwrap();
    db.use_ns("test").use_db("test").await.unwrap();

    let space_ship = SpaceShip {
        id: None,
        name: "SpaceShip1".to_string(),
        created: Utc::now(),
    };
    // No id specified before creation. Will be autogenerated by the database.
    assert_eq!(space_ship.id.is_some(), false);

    let created_ship = create(space_ship.clone()).return_one(db.clone()).await?;

    // Id is generated after creation
    assert_eq!(created_ship.clone().unwrap().id.is_some(), true);
    assert!(created_ship
        .clone()
        .unwrap()
        .id
        .unwrap()
        .to_string()
        .starts_with("space_ship:"));
    assert_eq!(created_ship.clone().unwrap().name, "SpaceShip1");
    assert_eq!(created_ship.clone().unwrap().created, space_ship.created);
    Ok(())
}

#[tokio::test]
async fn test_create_alien_with_id_specified() -> SurrealdbOrmResult<()> {
    let db = Surreal::new::<Mem>(()).await.unwrap();
    db.use_ns("test").use_db("test").await.unwrap();

    let space_ship = SpaceShip {
        id: Some(SpaceShip::create_id("oyelowo")),
        name: "SpaceShip1".to_string(),
        created: Utc::now(),
    };
    // id specified before creation. Will be used by the database.
    assert_eq!(space_ship.id.is_some(), true);

    let created_ship = create(space_ship.clone()).return_one(db.clone()).await?;

    // Id is generated after creation
    assert_eq!(created_ship.clone().unwrap().id.is_some(), true);
    assert!(created_ship
        .clone()
        .unwrap()
        .id
        .unwrap()
        .to_string()
        .starts_with("space_ship:"));
    assert_eq!(
        created_ship.clone().unwrap().id.unwrap().to_string(),
        "space_ship:oyelowo"
    );
    assert_eq!(created_ship.clone().unwrap().name, "SpaceShip1");
    assert_eq!(created_ship.clone().unwrap().created, space_ship.created);
    Ok(())
}

#[tokio::test]
async fn test_create_alien_with_id_specified_as_uuid() -> SurrealdbOrmResult<()> {
    let db = Surreal::new::<Mem>(()).await.unwrap();
    db.use_ns("test").use_db("test").await.unwrap();

    let space_ship = SpaceShip {
        id: Some(SpaceShip::create_uuid()),
        name: "SpaceShip1".to_string(),
        created: Utc::now(),
    };
    // id specified before creation. Will be used by the database.
    assert_eq!(space_ship.id.is_some(), true);

    let created_ship = create(space_ship.clone()).return_one(db.clone()).await?;

    // Id is generated after creation
    assert_eq!(created_ship.clone().unwrap().id.is_some(), true);
    assert!(created_ship
        .clone()
        .unwrap()
        .id
        .unwrap()
        .to_string()
        .starts_with("space_ship:"));
    assert_eq!(
        created_ship.clone().unwrap().id.unwrap().to_string().len(),
        55
    );
    assert_eq!(created_ship.clone().unwrap().name, "SpaceShip1");
    assert_eq!(created_ship.clone().unwrap().created, space_ship.created);
    Ok(())
}

#[tokio::test]
async fn test_creation_with_returning_selected_fields() -> SurrealdbOrmResult<()> {
    let db = Surreal::new::<Mem>(()).await.unwrap();
    db.use_ns("test").use_db("test").await.unwrap();

    let space_ship = SpaceShip {
        id: Some(SpaceShip::create_uuid()),
        name: "SpaceShipCode".to_string(),
        created: Utc::now(),
    };
    // id specified before creation. Will be used by the database.
    assert_eq!(space_ship.id.is_some(), true);
    let spaceship::SpaceShip { name, .. } = SpaceShip::schema();

    #[derive(Serialize, Deserialize, Debug, Clone, Default)]
    struct ReturnedSpaceShip {
        name: String,
    }
    // Return only specified fields
    let created_ship = create(space_ship.clone())
        .return_one_projections::<ReturnedSpaceShip>(db.clone(), arr![name])
        .await?;

    assert_eq!(created_ship.clone().unwrap().name, "SpaceShipCode");
    Ok(())
}

#[tokio::test]
async fn test_create_alien_with_links() -> SurrealdbOrmResult<()> {
    let db = Surreal::new::<Mem>(()).await.unwrap();
    db.use_ns("test").use_db("test").await.unwrap();

    let weapon = Weapon {
        name: "Laser".to_string(),
        created: Utc::now(),
        ..Default::default()
    };

    let space_ship = SpaceShip {
        id: Some(SpaceShip::create_id("gbanda")),
        name: "SpaceShip1".to_string(),
        created: Utc::now(),
    };

    let space_ship2 = SpaceShip {
        name: "SpaceShip2".to_string(),
        created: Utc::now(),
        ..Default::default()
    };

    let space_ship3 = SpaceShip {
        name: "Oyelowo".to_string(),
        created: Utc::now(),
        ..Default::default()
    };

    /////
    // No id specified before creation. Will be autogenerated by the database.
    assert_eq!(weapon.clone().id.is_some(), false);

    // create first record to weapon table
    let created_weapon = create(weapon.clone()).return_one(db.clone()).await?;
    // Id is generated after creation
    assert_eq!(created_weapon.unwrap().id.is_some(), true);

    let select1: Vec<Weapon> = select(All)
        .from(Weapon::table_name())
        .return_many(db.clone())
        .await?;
    // weapon table should have one record
    assert_eq!(select1.len(), 1);

    //  Create second record
    let created_weapon = create(weapon.clone()).return_one(db.clone()).await?;

    let select2: Vec<Weapon> = select(All)
        .from(Weapon::table_name())
        .return_many(db.clone())
        .await?;
    // weapon table should have two records after second creation
    assert_eq!(select2.len(), 2);

    let created_spaceship1 = create(space_ship.clone()).return_one(db.clone()).await?;
    let created_spaceship2 = create(space_ship2.clone()).return_one(db.clone()).await?;
    let created_spaceship3 = create(space_ship3.clone()).return_one(db.clone()).await?;

    let point = point! {
        x: 40.02f64,
        y: 116.34,
    };

    let territory = line_string![(x: 40.02, y: 116.34), (x: 40.02, y: 116.35), (x: 40.03, y: 116.35), (x: 40.03, y: 116.34), (x: 40.02, y: 116.34)];
    let polygon = polygon![(x: 40.02, y: 116.34), (x: 40.02, y: 116.35), (x: 40.03, y: 116.35), (x: 40.03, y: 116.34), (x: 40.02, y: 116.34)];
    let unsaved_alien = Alien {
        id: None,
        name: "Oyelowo".to_string(),
        age: 20,
        created: Utc::now(),
        line_polygon: territory.into(),
        life_expectancy: Duration::from_secs(100),
        territory_area: polygon.into(),
        home: point.into(),
        tags: vec!["tag1".into(), "tag2".into()],
        ally: LinkSelf::null(),
        weapon: LinkOne::from(created_weapon.unwrap()),
        space_ships: LinkMany::from(vec![
            created_spaceship1.clone().unwrap(),
            created_spaceship2.clone().unwrap(),
            created_spaceship3.clone().unwrap(),
        ]),
        planets_to_visit: Relate::null(),
    };

    assert!(unsaved_alien.weapon.get_id().is_some());
    assert!(unsaved_alien.weapon.value().is_none());
    assert!(unsaved_alien.id.is_none());

    // Check fields value fetching
    let weapon = Alien::schema().weapon;
    let created_alien = create(unsaved_alien.clone())
        .return_one_and_fetch_links(db.clone(), vec![weapon])
        .await?;

    let ref created_alien = created_alien.clone().unwrap();
    // id is none  because ally field is not created.
    assert!(created_alien.ally.get_id().is_none());
    // .value() is None because ally is not created.
    assert!(created_alien.ally.value().is_none());

    // Weapon is created at weapon field and also loaded.
    // get_id  is None because weapon is loaded.
    assert!(created_alien.weapon.get_id().is_none());
    // .value() is Some because weapon is loaded.
    assert!(created_alien.weapon.value().is_some());

    // Spaceships created at weapon field and also loaded.
    assert_eq!(created_alien.space_ships.is_empty(), false);

    assert_eq!(created_alien.space_ships.len(), 3);
    assert_eq!(
        created_alien
            .space_ships
            .iter()
            .map(|x| x.get_id().unwrap().to_string())
            .collect::<Vec<_>>(),
        vec![
            created_spaceship1.unwrap().id.unwrap().to_string(),
            created_spaceship2.unwrap().id.unwrap().to_string(),
            created_spaceship3.unwrap().id.unwrap().to_string(),
        ]
    );
    assert!(created_alien.space_ships.values().is_none());
    assert_eq!(
        created_alien
            .space_ships
            .iter()
            .map(|x| x.clone().value().is_some())
            .collect::<Vec<_>>(),
        vec![false, false, false,]
    );

    assert_eq!(created_alien.age, 20);
    assert!(unsaved_alien.id.is_none());
    assert!(created_alien.id.is_some());

    assert_eq!(
        created_alien.line_polygon.to_string(),
        "{ type: 'LineString', coordinates: [[40.02, 116.34], [40.02, 116.35], \
            [40.03, 116.35], [40.03, 116.34], [40.02, 116.34]] }"
    );
    assert_eq!(created_alien.name, "Oyelowo");

    Ok(())
}

#[tokio::test]
async fn test_create_fetch_record_links() -> SurrealdbOrmResult<()> {
    let db = Surreal::new::<Mem>(()).await.unwrap();
    db.use_ns("test").use_db("test").await.unwrap();

    let space_ship = SpaceShip {
        id: Some(SpaceShip::create_id("gbanda")),
        name: "SpaceShip1".to_string(),
        created: Utc::now(),
    };

    let space_ship2 = SpaceShip {
        name: "SpaceShip2".to_string(),
        created: Utc::now(),
        ..Default::default()
    };

    let space_ship3 = SpaceShip {
        name: "Oyelowo".to_string(),
        created: Utc::now(),
        ..Default::default()
    };

    let created_spaceship1 = create(space_ship.clone()).return_one(db.clone()).await?;
    let created_spaceship2 = create(space_ship2.clone()).return_one(db.clone()).await?;
    let created_spaceship3 = create(space_ship3.clone()).return_one(db.clone()).await?;

    let point = point! {
        x: 40.02f64,
        y: 116.34,
    };

    let territory = line_string![(x: 40.02, y: 116.34), (x: 40.02, y: 116.35), (x: 40.03, y: 116.35), (x: 40.03, y: 116.34), (x: 40.02, y: 116.34)];
    let polygon = polygon![(x: 40.02, y: 116.34), (x: 40.02, y: 116.35), (x: 40.03, y: 116.35), (x: 40.03, y: 116.34), (x: 40.02, y: 116.34)];
    let unsaved_alien = Alien {
        id: None,
        name: "Oyelowo".to_string(),
        age: 20,
        created: Utc::now(),
        line_polygon: territory.into(),
        life_expectancy: Duration::from_secs(100),
        territory_area: polygon.into(),
        home: point.into(),
        tags: vec!["tag1".into(), "tag2".into()],
        ally: LinkSelf::null(),
        weapon: LinkOne::null(),
        space_ships: LinkMany::from(vec![
            created_spaceship1.clone().unwrap(),
            created_spaceship2.clone().unwrap(),
            created_spaceship3.clone().unwrap(),
        ]),
        planets_to_visit: Relate::null(),
    };

    // Check fields value fetching
    let alien_schema = Alien::schema();
    let age = Alien::schema().age;
    let name = Alien::schema().name;

    // We specify the exact fields we want from the returned projections(second argument).
    #[derive(Serialize, Deserialize, Clone)]
    struct SpaceShipName {
        age: u8,
        name: String,
        // Alias the retrieved names from foreign tables space_ships returned as array of strings
        aliens_spaceships_names_alias: Vec<String>,
    }

    let aliens_spaceships_names_alias = alien_schema
        .spaceShips(All)
        .name
        .__as__("aliens_spaceships_names_alias");
    assert_eq!(
        aliens_spaceships_names_alias.build(),
        "spaceShips[*].name AS aliens_spaceships_names_alias"
    );

    let space_ship_names: Option<SpaceShipName> = create(unsaved_alien.clone())
        .return_one_projections(db.clone(), arr![age, name, aliens_spaceships_names_alias])
        .await?;

    let ref space_ship_names = space_ship_names.unwrap();
    assert_eq!(space_ship_names.age, 20);
    assert_eq!(space_ship_names.name, "Oyelowo");
    assert_eq!(space_ship_names.aliens_spaceships_names_alias.len(), 3);
    assert_eq!(
        space_ship_names.aliens_spaceships_names_alias,
        vec!["SpaceShip1", "SpaceShip2", "Oyelowo"]
    );

    Ok(())
}

#[tokio::test]
async fn test_create_fetch_values_of_one_to_many_record_links() -> SurrealdbOrmResult<()> {
    let db = Surreal::new::<Mem>(()).await.unwrap();
    db.use_ns("test").use_db("test").await.unwrap();

    let space_ship = SpaceShip {
        id: Some(SpaceShip::create_id("gbanda")),
        name: "SpaceShip1".to_string(),
        created: Utc::now(),
    };

    let space_ship2 = SpaceShip {
        name: "SpaceShip2".to_string(),
        created: Utc::now(),
        ..Default::default()
    };

    let space_ship3 = SpaceShip {
        name: "Oyelowo".to_string(),
        created: Utc::now(),
        ..Default::default()
    };

    let created_spaceship1 = create(space_ship.clone()).return_one(db.clone()).await?;
    let created_spaceship2 = create(space_ship2.clone()).return_one(db.clone()).await?;
    let created_spaceship3 = create(space_ship3.clone()).return_one(db.clone()).await?;

    let point = point! {
        x: 40.02f64,
        y: 116.34,
    };

    let territory = line_string![(x: 40.02, y: 116.34), (x: 40.02, y: 116.35), (x: 40.03, y: 116.35), (x: 40.03, y: 116.34), (x: 40.02, y: 116.34)];
    let polygon = polygon![(x: 40.02, y: 116.34), (x: 40.02, y: 116.35), (x: 40.03, y: 116.35), (x: 40.03, y: 116.34), (x: 40.02, y: 116.34)];
    let unsaved_alien = Alien {
        id: None,
        name: "Oyelowo".to_string(),
        age: 20,
        created: Utc::now(),
        line_polygon: territory.into(),
        life_expectancy: Duration::from_secs(100),
        territory_area: polygon.into(),
        home: point.into(),
        tags: vec!["tag1".into(), "tag".into()],
        ally: LinkSelf::null(),
        weapon: LinkOne::null(),
        space_ships: LinkMany::from(vec![
            created_spaceship1.clone().unwrap(),
            created_spaceship2.clone().unwrap(),
            created_spaceship3.clone().unwrap(),
        ]),
        planets_to_visit: Relate::null(),
    };

    let alien::Alien { spaceShips, .. } = Alien::schema();

    let created_alien_with_fetched_links = create(unsaved_alien.clone())
        .return_one_and_fetch_links(db.clone(), vec![spaceShips])
        .await?;

    let ref created_alien_with_fetched_links = created_alien_with_fetched_links.unwrap();
    let alien_spaceships = created_alien_with_fetched_links
        .space_ships
        .values()
        .unwrap();

    assert!(created_alien_with_fetched_links
        .space_ships
        .keys()
        .is_none());
    assert_eq!(created_alien_with_fetched_links.age, 20);
    assert_eq!(created_alien_with_fetched_links.name, "Oyelowo");
    assert_eq!(created_alien_with_fetched_links.space_ships.len(), 3);
    assert_eq!(alien_spaceships[0].name, "SpaceShip1");
    assert_eq!(alien_spaceships[1].name, "SpaceShip2");
    assert_eq!(alien_spaceships[2].name, "Oyelowo");

    Ok(())
}
