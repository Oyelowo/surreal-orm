// TODO: Validate in SurrealdbNode and Edge if id, skip_serializing_if = "Option::is_none" must be
// set and if relate, skip_serializing
use std::time::Duration;

use chrono::{DateTime, Utc};
use geo::point;
use geo::polygon;
use geo::Point;
use geo::Polygon;
use serde::{Deserialize, Serialize};
use surrealdb::engine::local::Mem;
use surrealdb::sql;
use surrealdb::Surreal;
use surrealdb_orm::statements::insert;
use surrealdb_orm::statements::select;
use surrealdb_orm::{statements::create, *};

// Alien
#[derive(SurrealdbNode, Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
#[surrealdb(table_name = "alien")]
pub struct Alien {
    #[serde(skip_serializing)]
    id: Option<sql::Thing>,
    name: String,
    age: u8,
    created: DateTime<Utc>,
    life_expectancy: Duration,
    territory_area: Polygon,
    home: Point,
    tags: Vec<String>,
    // database type attribute is autogenerated for all links of the struct. But you can also provide it
    #[surrealdb(link_self = "Alien", type = "record(alien)")]
    ally: LinkSelf<Alien>,

    #[surrealdb(link_one = "Weapon", type = "record(weapon)")]
    weapon: LinkOne<Weapon>,

    // Again, we dont have to provide the type attribute, it can auto detect
    #[surrealdb(
        link_many = "SpaceShip",
        type = "array",
        content_type = "record(space_ship)"
    )]
    space_ships: LinkMany<SpaceShip>,

    // This is a read only field
    #[surrealdb(relate(model = "AlienVisitsPlanet", connection = "->visits->planet"))]
    #[serde(skip_serializing)]
    planets_to_visit: Relate<Planet>,
}

// Visits
#[derive(SurrealdbEdge, Serialize, Deserialize, Debug, Clone, Default)]
#[serde(rename_all = "camelCase")]
#[surrealdb(table_name = "visits")]
pub struct Visits<In: SurrealdbNode, Out: SurrealdbNode> {
    id: Option<sql::Thing>,
    #[serde(rename = "in")]
    in_: LinkOne<In>,
    out: LinkOne<Out>,
    time_visited: Duration,
}

// Connects Alien to Planet via Visits
pub type AlienVisitsPlanet = Visits<Alien, Planet>;

// Planet
#[derive(SurrealdbNode, Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
#[surrealdb(table_name = "planet")]
pub struct Planet {
    id: Option<sql::Thing>,
    name: String,
    area: Polygon,
    population: u64,
    created: DateTime<Utc>,
    tags: Vec<String>,
}

// Weapon
#[derive(SurrealdbNode, Serialize, Deserialize, Debug, Clone, Default)]
#[serde(rename_all = "camelCase")]
#[surrealdb(table_name = "weapon")]
pub struct Weapon {
    // #[serde(skip_serializing)]
    #[serde(skip_serializing_if = "Option::is_none")]
    id: Option<sql::Thing>,
    name: String,
    created: DateTime<Utc>,
}

// SpaceShip
#[derive(SurrealdbNode, Serialize, Deserialize, Debug, Clone, Default)]
#[serde(rename_all = "camelCase")]
#[surrealdb(table_name = "space_ship")]
pub struct SpaceShip {
    id: Option<sql::Thing>,
    name: String,
    created: DateTime<Utc>,
}

// Configuration
#[derive(SurrealdbObject, Serialize, Deserialize, Debug, Clone, Default)]
#[serde(rename_all = "camelCase")]
pub struct Configuration {
    length: u64,
    shape: Shape,
}

#[derive(Serialize, Deserialize, Debug, Clone, Copy, Default)]
pub enum Shape {
    #[default]
    Circle,
    Square,
    Triangle,
}

#[tokio::test]
async fn test_create_alien_with_links() -> SurrealdbOrmResult<()> {
    let db = Surreal::new::<Mem>(()).await.unwrap();
    db.use_ns("test").use_db("test").await.unwrap();

    let weapon = Weapon {
        // id: Some(Weapon::create_uuid()),
        id: None,
        name: "Laser".to_string(),
        created: Utc::now(),
        ..Default::default()
    };

    let space_ship = SpaceShip {
        id: None,
        name: "SpaceShip1".to_string(),
        created: Utc::now(),
    };

    let space_ship2 = SpaceShip {
        name: "SpaceShip2".to_string(),
        created: Utc::now(),
        ..Default::default()
    };

    // let created_weapon = create(weapon.clone()).return_one(db.clone()).await?;
    // let select1: Vec<Weapon> = select(All)
    //     .from(Weapon::table_name())
    //     .return_many(db.clone())
    //     .await?;
    // assert_eq!(select1.len(), 1);
    //
    // let created_weapon = create(weapon.clone()).return_one(db.clone()).await?;
    // let select2: Vec<Weapon> = select(All)
    //     .from(Weapon::table_name())
    //     .return_many(db.clone())
    //     .await?;
    // assert_eq!(select2.len(), 2);

    insert(vec![weapon.clone(), weapon.clone()])
        .return_many(db.clone())
        .await?;

    let select2: Vec<Weapon> = select(All)
        .from(Weapon::table_name())
        .return_many(db.clone())
        .await?;

    let select2: Vec<Weapon> = select(All)
        .from(Weapon::table_name())
        .return_many(db.clone())
        .await?;
    assert_eq!(select2.len(), 4);

    // let inserted_space_ships = insert(vec![space_ship, space_ship2])
    //     .return_many(db.clone())
    //     .await?;
    //
    // let alien = Alien {
    //     id: None,
    //     name: "John".to_string(),
    //     age: 20,
    //     created: Utc::now(),
    //     life_expectancy: Duration::from_secs(100),
    //     territory_area: polygon![
    //         (x: 0.0, y: 0.0),
    //         (x: 0.0, y: 1.0),
    //         (x: 1.0, y: 1.0),
    //         (x: 1.0, y: 0.0),
    //         (x: 0.0, y: 0.0),
    //     ],
    //     home: point!(x: 0.0, y: 0.0),
    //     tags: vec!["tag1".to_string(), "tag2".to_string()],
    //     ally: LinkSelf::null(),
    //     weapon: LinkOne::from(created_weapon.unwrap()),
    //     space_ships: LinkMany::from(inserted_space_ships),
    //     planets_to_visit: Relate::null(),
    // };

    // let created_alien = create(alien).return_one(db.clone()).await?;
    //
    // assert_eq!(
    //     serde_json::to_string(&created_alien).unwrap(),
    //     r#"{"id":"1","name":"John","age":20,"created":"2021-05-01T12:00:00Z","lifeExpectancy":100,"territoryArea":{"type":"Polygon","coordinates":[[[0.0,0.0],[0.0,1.0],[1.0,1.0],[1.0,0.0],[0.0,0.0]]]},"home":{"type":"Point","coordinates":[0.0,0.0]},"tags":["tag1","tag2"],"ally":null,"weapon":"1","spaceShips":["1","2"],"planetsToVisit":[]}"#
    // );
    //
    Ok(())
}
