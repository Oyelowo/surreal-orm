ARG BASE_IMAGE=rust:1.58

FROM $BASE_IMAGE as rust-with-chef
WORKDIR /app
RUN cargo install cargo-chef --version 0.1.33

FROM rust-with-chef as planner
COPY . .
RUN cargo chef prepare  --recipe-path recipe.json

FROM rust-with-chef as cacher
COPY --from=planner /app/recipe.json recipe.json
# Build dependencies - this is the caching Docker layer!
RUN cargo chef cook --release --recipe-path recipe.json


FROM $BASE_IMAGE AS shared
WORKDIR /app
COPY . .
# Copy over the cached dependencies
COPY --from=cacher /app/target target
COPY --from=cacher $CARGO_HOME $CARGO_HOME

## GRAPHQL-MONGO SERVICE
FROM shared AS builder-graphql-mongo 
RUN cargo build -p graphql-mongo

# We do not need the Rust toolchain to run the binary!
FROM gcr.io/distroless/cc AS graphql-mongo
WORKDIR /app
EXPOSE 8000
ENV HOST=0.0.0.0
ENV PORT=8000

COPY --from=builder-graphql-mongo /app/target/debug/graphql-mongo /usr/local/bin/graphql-mongo
ENV RUST_ENV=local
ENTRYPOINT ["/usr/local/bin/graphql-mongo"]

## GRPC-MONGO SERVICE
FROM shared AS builder-second
RUN rustup component add rustfmt
RUN cargo build -p grpc-mongo

# We do not need the Rust toolchain to run the binary!
FROM gcr.io/distroless/cc AS grpc-mongo
WORKDIR /app
COPY --from=builder-second app/target/debug/grpc-mongo /usr/local/bin/grpc-mongo
ENTRYPOINT ["/usr/local/bin/grpc-mongo"]