directive @oneOf on INPUT_OBJECT

type AccountOauth {
	"""
	unique identifier for the oauth provider. Don't use name of user because that could be changed
	"""
	id: String!
	accountType: String!
	provider: OauthProvider!
	providerAccountId: OauthProvider!
	accessToken: String!
	refreshToken: String
	"""
	ccess token expiration timestamp, represented as the number of seconds since the epoch (January 1, 1970 00:00:00 UTC).
	"""
	expiresAt: DateTime
	tokenType: TokenType
	scopes: [String!]!
	idToken: String
	oauthToken: String
	oauthTokenSecret: String
}

input Address {
	street: String!
	houseNumber: String!
	city: String!
	zip: String!
}


"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime




type Mutation {
	createUser(userInput: UserInput!): User!
	"""
	Creates a new user but doesn't log in the user
	Currently like this because of future developments
	"""
	signUp(user: UserInput!): User!
	signIn(signInCredentials: SignInCredentials!): User!
	signOut: SignOutMessage!
	createPost(post: PostInput!): Post!
}

enum OauthProvider {
	GITHUB
	GOOGLE
}

scalar ObjectId

type Post {
	id: ObjectId
	posterId: ObjectId!
	title: String!
	content: String!
	poster: User!
}

input PostInput {
	title: String!
	content: String!
}

type Query {
	me: User!
	user(id: ObjectId!): User!
	getUser(userBy: UserBy!): User!
	users: [User!]!
	session: Session!
	post(id: ObjectId!): Post!
	posts: [Post!]!
}

enum Role {
	ADMIN
	USER
}

type Session {
	userId: ObjectId!
	expiresAt: DateTime!
}

input SignInCredentials {
	username: String!
	password: String!
}

type SignOutMessage {
	message: String!
	userId: ObjectId!
}


type Subscription {
	values: Int!
}

enum TokenType {
	BEARER
}

type User {
	id: ObjectId
	createdAt: DateTime
	username: String!
	firstName: String
	lastName: String
	city: String
	email: String
	emailVerified: Boolean!
	age: Int
	socialMedia: [String!]!
	roles: [Role!]!
	accounts: [AccountOauth!]!
	posts: [Post!]!
	postCount: Int!
}

input UserBy @oneof {
	userId: ObjectId
	username: String
	address: Address
	email: String
}

input UserInput {
	username: String!
	password: String
	firstName: String
	lastName: String
	city: String
	email: String
	age: Int
	socialMedia: [String!]!
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}
