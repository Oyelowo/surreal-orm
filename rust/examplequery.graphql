mutation createUser($userInput: UserInput!) {
  createUser(userInput: $userInput) {
    id
    firstName
    lastName
    email
    age

  }
}

// The input

{
  "userInput": {
  "firstName": "Sake",
      "lastName":  "Koivi",
    "email": "sakkeko@gmail.com",
  "age": 40,
    "socialMedia": ["insta", "facebook"]
  }
}

mutation signIn($signInCredentials: SignInCredentials!) {
  signIn(signInCredentials: $signInCredentials) {
    __typename
    ...on ServerError {
      __typename
      message
    }
    ...on UserNotFoundError{
      message
      solution
    }
    ...on UserSignInInvalidInputError {
      loginErrorMessage
    }
    ...on User{
        id
    firstName
    lastName
    email
    age
    }
  }
}

mutation signIn($signInCredentials: SignInCredentials!) {
  signIn(signInCredentials: $signInCredentials) {
    ...on ServerError {
      __typename
      message
    }
    ...on User{
        id
    firstName
    lastName
    email
    age
    }
  }
}

# The input
{
  "signInCredentials": {
    "username": "oyelowo",
    "password": "12345"
  }
}


mutation signUp($userInput: UserInput!) {
  signUp(user: $userInput) {
    __typename
    ...on ServerError {
      message
      solution
    }
    ...on UserNotFoundError {

      message
    }
    ...on UserRegisterInvalidInputError {
      usernameErrorMessage
      emailErrorMessage
    }
    ...on User{
        id
    firstName
    lastName
    email
    age
    }
  }
}


mutation signUp($userInput: UserInput!) {
  signUp(user: $userInput) {
    __typename
    ...on UserNotFoundError {

      message
    }
    ...on UserRegisterInvalidInputError {
      usernameErrorMessage
      emailErrorMessage
    }
    ...on User{
        id
    firstName
    lastName
    email
    age
    }
  }
}

{
  "userInput": {
    "username": "dayo",
    "password": "1234",
  "firstName": "samo",
      "lastName":  "nama",
    "email": "jokoo@gmail.com",
  "age": 40,
    "socialMedia": ["li", "facebook"]
  }
}

#  Pagination
query postConnections {
  users {
    id
    username
    firstName
    lastName
    age
    # only one of last of first should be provided
    postsConnection(first: 12, after:"xx", last: 8, before:"mm") {
      ...on  PostConnection{
      edges {
        node {
          posterId
          id


        }
        cursor
        relationshipToNextNode
      }
      nodes {
        posterId
        id

      }
      pageInfo{
        hasPreviousPage
        hasNextPage
        endCursor
        startCursor
      }
    
      }
      ...on UserNotFoundError {
        message
        solution
      }
      ...on FirstOrLastParamsError {
        message
        solution
      }
      ...on UserBaseError {
        solution
        message
      }
    }
  }
}


mutation createPost($postInput: PostInput!) {
  createPost(postInput: $postInput) {
    id
    posterId
    title
    poster {
      id
      lastName
      firstName
      email
      age
      socialMedia
    }
  }
}

// The input

{
  "postInput": {
  "posterId": "61e87e83a052f6da42738022",
    "title":"First by sakke",
    "content": "Good content first"
  }
}




  {users{
    id
   firstName
    lastName
   age
    email
    socialMedia
    createdAt
    updatedAt
    deletedAt
    posts {
      posterId
      title
      content
    }

      

  }
    
  
  }




  {
  user(id:"61e87e24a052f6da42738021"){
    firstName
    lastName
    age
    email
    id
    posts {
      title
      id
      content
      poster {
        lastName
        firstName
        socialMedia
      }
    }
  }
}


query {
  session {
    __typename
    ...on Session{
    userId
    expiresAt
    __typename
    },
    ...on ServerError {
      message
      solution
    }
        ...on UserSessionExpiredError {
      message
      solution
    }
        ...on UserBaseError {
      message
      solution
    }
  }
}